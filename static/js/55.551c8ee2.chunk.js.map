{"version":3,"sources":["molecules/PageLayoutFullHeightItem.tsx","atoms/FlexRowSingle.tsx","atoms/VerticalGap.tsx","atoms/ScrollArea.tsx","atoms/RelativeLink.tsx","atoms/FormInputFlatSelect.tsx","atoms/DragHandle.tsx","hooks/useDebounceCallback.ts","atoms/FormInputSelect.tsx","molecules/TouchButtonEdit.tsx","molecules/TouchButtonRemove.tsx","molecules/TouchButtonVisibility.tsx","atoms/DataTable.tsx","molecules/SortableDataTable.tsx","segments/menu/molecules/CategoryListTable.tsx","segments/menu/molecules/CreateButton.tsx","segments/menu/organisms/CategoryList.tsx","segments/menu/pages/MenuCategoryListPage.tsx","molecules/TopRightButtonContainer.tsx","segments/menu/molecules/SubmitButton.tsx","atoms/FormContainer.tsx","atoms/PictogramDisplay.tsx","segments/menu/atoms/MenuCategoryPictogramSelect.tsx","segments/menu/molecules/FormDeleteButton.tsx","segments/menu/molecules/FormInputInternalNote.tsx","segments/menu/molecules/FormInputName.tsx","segments/menu/organisms/CategoryFormBasic.tsx","atoms/FormLoader.tsx","atoms/NavigateBack.tsx","segments/menu/atoms/MenuBaseFormLoader.tsx","segments/menu/hooks/useMenu.ts","segments/menu/organisms/CategoryFormLoader.tsx","segments/menu/molecules/RecipeListTable.tsx","segments/menu/atoms/MenuSuggestionPanel.tsx","segments/menu/organisms/RecipeSuggestionPanel.tsx","segments/menu/organisms/CategoryRecipesView.tsx","segments/menu/pages/MenuCategoryPage.tsx","atoms/DataTableContainer.tsx","segments/menu/molecules/MenuFilterInput.tsx","atoms/RelativeRedirect.tsx","segments/menu/molecules/RecipeTypeSelection.tsx","helpers/filter.ts","segments/menu/organisms/RecipeListLoader.tsx","segments/menu/pages/MenuRecipeListPage.tsx","segments/menu/atoms/IsCategoryType.tsx","segments/menu/organisms/CategorySuggestionPanel.tsx","segments/menu/organisms/RecipeCategoryView.tsx","segments/menu/molecules/FormInputCode.tsx","segments/menu/molecules/FormInputDescription.tsx","segments/menu/molecules/FormInputAllergens.graphql.ts","segments/menu/atoms/AllergenIndicator.tsx","segments/menu/molecules/RecipeAllergenDisplay.tsx","segments/menu/organisms/RecipeFormBasic.tsx","segments/menu/organisms/RecipeFormLoader.tsx","segments/menu/molecules/FormInputPrice.tsx","segments/menu/molecules/FormInputVatSelect.graphql.ts","segments/menu/molecules/FormInputVatSelect.tsx","segments/menu/molecules/FormPricingField.tsx","segments/menu/molecules/RecipeAssocListTable.tsx","segments/menu/organisms/RecipeAssociatedView.tsx","segments/menu/organisms/RecipeFormPricing.tsx","segments/menu/molecules/RecipeIngredientsTable.tsx","segments/menu/organisms/RecipeIngredientsView.tsx","segments/menu/pages/MenuRecipePage.tsx","segments/menu/molecules/StockDepositConfirmButton.tsx","segments/menu/molecules/StockDepositFilterInput.tsx","segments/menu/molecules/StockDepositQuantityInput.tsx","segments/menu/molecules/StockDepositResultTable.tsx","segments/menu/organisms/StockDepositControl.tsx","segments/menu/organisms/StockDepositLoader.graphql.ts","graph/buildMutation.tsx","segments/menu/organisms/StockDepositLoader.tsx","segments/menu/pages/MenuStockDepositPage.tsx","segments/menu/organisms/StockListTable.tsx","segments/menu/organisms/StockListLoader.tsx","segments/menu/pages/MenuStockListPage.tsx","segments/menu/organisms/StockForm.graphql.ts","segments/menu/organisms/StockFormLoader.tsx","segments/menu/molecules/FormInputAllergens.tsx","segments/menu/molecules/FormInputAllowNegative.tsx","segments/menu/molecules/FormInputPlu.tsx","segments/menu/molecules/FormInputWareUnit.graphql.ts","segments/menu/molecules/FormInputWareUnit.tsx","segments/menu/organisms/StockFormMain.tsx","segments/menu/organisms/StockRecipesView.graphql.ts","segments/menu/organisms/StockRecipesVIew.tsx","segments/menu/pages/MenuStockPage.tsx","segments/menu/routes/MenuRoutes.tsx"],"names":["__webpack_require__","d","__webpack_exports__","PageLayoutFullHeightItem","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","styled_components__WEBPACK_IMPORTED_MODULE_1__","_atoms_ScrollArea__WEBPACK_IMPORTED_MODULE_2__","_styling__WEBPACK_IMPORTED_MODULE_3__","FullHeightDiv","div","withConfig","displayName","props","undefined","widthInColumns","LayoutGridCellMargin","widthComputed","column","leftPos","row","topPos","FullHeightDivStyled","children","withScrollArea","scrollAreaId","a","createElement","id","FlexRowSingle","justify","VerticalGap","size","sizeUnit","ScrollArea","RelativeLink","_a","to","from","linkProps","__rest","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","location","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","_extends","resolveLocation","pathname","Object","resolve_pathname__WEBPACK_IMPORTED_MODULE_3__","resolved","assign","FormInputFlatSelect","Component","[object Object]","this","validate","value","isRequired","isMulti","validationName","Array","isArray","length","_i18n__WEBPACK_IMPORTED_MODULE_3__","_","fieldApi","items","defaultSelection","getItemId","selection","isSelected","item","includes","selectedItems","filter","onMultiSelection","setValue","map","setTouched","selectedItem","find","onSingleSelection","field","fieldIsPure","isClearable","react_form__WEBPACK_IMPORTED_MODULE_1__","pure","_SelectControlFlat__WEBPACK_IMPORTED_MODULE_4__","getControlProps","isInvalid","Boolean","error","defaultProps","_helpers_ramda__WEBPACK_IMPORTED_MODULE_2__","prop","DragHandle","react_sortable_hoc__WEBPACK_IMPORTED_MODULE_1__","styled_components__WEBPACK_IMPORTED_MODULE_2__","_Icon__WEBPACK_IMPORTED_MODULE_3__","DragHandleContainerStyled","iconName","useDebounceCallback","debounce__WEBPACK_IMPORTED_MODULE_0__","debounce__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_1__","cb","time","memoCb","debounced","current","clear","FormInputSelect","0","validatioName","options","getOptionValue","defaultValue","F","onChange","selectedOptions","option","_SelectControl__WEBPACK_IMPORTED_MODULE_4__","onFocus","styles","control","base","borderColor","TouchButtonEdit","target","Link","react_default","TouchButton","width","styling","ButtonHeight","height","TouchButtonRemove","TouchButtonRemove_rest","TouchButtonRemove_extends","TouchButtonVisibility","isVisible","TouchButtonVisibility_rest","TouchButtonVisibility_extends","iconColor","white","greyMiddle","color","DataTable_DataTable","react","isLoading","heightStretch","DataTable_rest","es","DataTable_extends","autoHeight","headerHeight","rowHeight","rowCount","rowGetter","index","noRowsRenderer","Pacman","renderTable","scrollElement","window","disableHeight","checkColumnAccess","canQuery","canMutate","renderer","cellProps","result","CanQuery","queryName","CanMutate","mutationName","ColumnRendererEdit","cellData","ColumnRendererRemove","columnData","onClick","onRemove","ColumnRendererVisibility","rowData","onToggle","NoteText","styled_components_browser_esm","ColumnRendererWithNote","Fragment","noteKey","DataTableEmptyText","text","i18n","SortableTableRowRenderer","commonjs","columns","style","className","SortableDataTable_rest","SortableDataTableContainer","SortableDataTable_SortableDataTable","state","sortedItems","onHandleSorting","newIndex","oldIndex","__awaiter","currentItems","setState","onSort","sortSuccess","offset","SortableDataTable_extends","useDragHandle","lockAxis","lockToContainerEdges","onSortEnd","rowRenderer","rowProps","getDerivedStateFromProps","nextProps","CategoryListTable","categories","showEditColumn","showRemoveColumn","showVisibilityColumn","showHeader","isSortable","noRowsDisplay","disableHeader","CategoryListTable_extends","dataKey","cellRenderer","cellDataGetter","MenuCategoryModel","categoryType","enum","label","toLocaleLowerCase","CreateButtonContainer","CreateButton","routeTo","green","CategoryList","headline","subHeadline","FlexColumn","widthGrowIndex","Headline","fixedWidth","WithRoot","render","settings","CategoryList_graphql","CategoryList_extends","getQueryProps","renderLoading","wareCategories","menu","category","changeVisibility","sortCategory","PartialDataTableContainer","MenuCategoryListPage","FullPageLayout","pageTitle","useBackButton","Card","stretchToParent","SettingsCompanyBranchPicker","types","MAIN","SIDE_DISH","COVER","TopRightButtonContainer","SubmitButton","isCreate","react_form_es","form","FormSubmit","helpers_form","getButtonText","FormContainer","FormColumn","PictogramDisplayStyled","fontSize","fontSizeUnit","PictogramDisplay","pictogramId","getClassName","MenuCategoryPictogramSelect","SelectControl","pictogram","Flaticon","ramda","formatOptionLabel","components","SingleValue","data","container","menuList","maxHeight","isSearchable","minWidth","FormDeleteButton","confirmText","onDelete","react_router","history","TouchButtonDelete","FormDeleteButton_awaiter","goBack","FormInputInternalNote","icon","FormInputInternalNote_rest","IconLine","labelWidth","FormInputTextBox","FormInputInternalNote_extends","inputWidth","FormInputName","FormInputName_rest","FormInputName_extends","CategoryBasicForm","placeholder","FormInputCheckbox","WithSettings","deleteCategory","FormLoader","shouldLoad","loader","FormLoader_rest","values","setValues","then","FormLoader_extends","NavigateBack","ErrorPop","MenuBaseFormLoader_MenuBaseFormLoader","submitError","validationErrors","renderSubmitError","renderValidationErrors","messages","ApolloError","propEq","userErrors","graphQLErrors","renderPopover","errors","index_es","open","anchorEl","document","getElementById","onClose","anchorOrigin","vertical","horizontal","message","idx","key","onCreate","onUpdate","getDefaultValues","loadValues","loadDefaults","defaultValues","MenuBaseFormLoader_awaiter","defaults","loadedDefaults","formApi","logger","onSubmit","onSubmitFailure","keys","renderErrors","useMenu","RootProvider","CategoryFormLoader","categoryId","createCategory","updateCategory","visible","internalNoteLabel","nameLabel","recipes","getDefaults","CategoryFormLoader_awaiter","client","query","CategoryForm_graphql","variables","fetchPolicy","wareCategory","RecipeListTable","onSortRecipe","showTypeColumn","react_content_loader_es","RecipeListTable_extends","MenuRecipeModel","recipeType","ColumnRendererCode","ColumnRendererPrice","priceType","DELIVERY","INHOUSE","prices","foundPrice","pathEq","price","formattedValue","type","MenuSuggestionPanel_MenuSuggestionPanel","selected","onAdd","onSelect","addLabel","addButtonText","MenuSuggestionPanel_rest","margin","MenuSuggestionPanel_extends","onKeyDown","ev","getOptionLabel","disabled","RecipeSuggestionPanel","filterRecipes","observe","RecipeList_graphql","RecipeSuggestionPanel_extends","CategoryRecipesView_FormContainer","FormFixedRow","FormStretchedRow","CategoryRecipesView","recipe","without","addedRecipe","concat","recipeId","reject","titleByType","_lingui_react","MenuCategoryPage_FormContainer","MenuCategoryPage_FormFixedRow","MenuCategoryPage_FormStretchedRow","MenuCategoryPage","hideLogoutWidget","DataTableContainer","MenuFilterInput","modelType","model","setFilterInput","icons_index_es","RelativeRedirect","RelativeRedirect_rest","RelativeRedirect_extends","RecipeTypeSelection_RecipeTypeSelection","isOpen","onOpen","push","preventDefault","isPartialMatch","searchValue","search","propValue","RecipeListLoader","index_module","loading","react_apollo_hooks_es","queryProps","suspend","filteredRecipes","partialMatch","filterInput","cond","propSatisfies","T","MenuRecipeListPage","IsCategoryType","isMain","isSideDish","isCover","CategorySuggestionPanel","currentCategories","CategorySuggestionPanel_extends","RecipeCategoryView","noRowsText","addedCategory","FormInputCode","FormInputCode_rest","FormInputCode_extends","FormInputDescription","FormInputDescription_rest","FormInputDescription_extends","AllergensQuery","src_default","AllergenFragment_graphql","QueryAllergens","buildQuery","AllergenBox","active","black","yellow","MenuAllergenIndicator","allergens","allergen","AllergenIndicator_extends","title","code","extractAllergens","pipe","flatten","uniq","RecipeAllergenDisplay","RecipeFormBasic","deleteRecipe","RecipeFormLoader","createRecipe","updateRecipe","RecipeFormLoader_getDefaults","RecipeFormLoader_awaiter","defaultVats","getDefaultVat","getPriceMap","vatId","RecipeForm_graphql","recipeSource","associatedRecipes","sourceAssociatedRecipes","warePriceType","associatedRecipe","formattedPrice","ingredients","sourceIngredients","quantity","stockItem","wareUnit","unitLabel","sourcePrice","sourcePrices","vat","acc","reduce","internalNote","descriptionLabel","sideDishes","formInputPriceValidate","validator","FormInputPrice","FormInputPrice_rest","FormInputPrice_extends","VatsQuery","QueryVat","index_esm","FormInputVatSelect","FormInputVatSelect_extends","vats","formatItem","FormPricingField","RecipeAssocListTable","RecipeAssociatedView","priceTypeRecipes","rejectSuggestions","some","isAssociated","onAddRecipe","RecipeAssociatedView_extends","priceTypes","RecipeFormPricing","RecipeIngredientsTable","rowIndex","validateQuantity","fieldName","validator_default","isEmpty","isFloat","min","unselectedStockOnly","differenceWith","RecipeIngredientsView","StockList_graphql","RecipeIngredientsView_extends","stockItems","addedStockItem","MenuRecipePage_titleByType","MenuRecipePage","StockDepositConfirmButton","onConfirm","numeral_default","format","1","StockDepositFilterInput","forwardRef","onFilter","ref","autoFocus","onKeyPressCapture","StockDepositQuantityInput","enabled","StockDepositResultTable","ColumnRendererSelect","stockWithUnit","highlightMatch","HighlightedValue","span","indexOf","begin","substring","match","end","StockDepositControl_StockDepositControl","targetStockItem","filteredStockItems","inputQuantity","filterInputRef","createRef","quantityInputRef","trim","head","onConfirmFilter","focus","onQuantity","onSelectStockItem","onDeposit","hasSearchValue","isNoneFind","isMultiFind","cardName","MenuStockDepositQuery","WareUnitFragment_graphql","ChangeMenuStockQuantityMutation","ChangeMenuStockQuantity","mutation","buildMutation_rest","react_apollo_browser_umd","buildMutation_extends","QueryMenuStockDeposit","StockDepositLoader","execute","quantityChange","StockDepositLoader_extends","MenuStockDepositPage","StockListTable","Loading","StockListTable_stockWithUnit","stockAllowNegative","StockListLoader","filteredItems","stock","MenuStockListPage","MenuStockFormQuery","MenuStockDefaultsQuery","StockFormLoader","stockId","createItem","updateItem","StockFormLoader_getDefaults","StockFormLoader_awaiter","branchId","allowNegativeDefault","getAllowNegativeDefault","companyBranch","allowNegative","note","plu","DEFAULT","isEnabled","ENABLED","DISABLED","FormInputAllergens","FormInputAllowNegative_items","FormInputAllowNegative","labelForDefault","FormInputPlu","FormInputPlu_rest","FormInputPlu_extends","WareUnitsQuery","QueryWareUnits","FormInputWareUnit","selectProps","FormInputWareUnit_rest","wareUnits","FormInputWareUnit_extends","StockFormMain","deleteItem","StockRecipesQuery","QueryStockRecipes","StockRecipesView","MenuStockPage","MenuRoutes","SecureRoute","exact","path","component","params","NotFoundPage"],"mappings":"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","file":"static/js/55.551c8ee2.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nimport { ScrollArea } from '../atoms/ScrollArea'\nimport { Spacing } from '../styling'\n\ninterface IPageLayoutFullHeightItemProps {\n  row?: number\n  column?: number\n  widthInColumns?: number\n  withScrollArea?: boolean\n  scrollAreaId?: string\n}\n\nconst gridColumnWidth: string = '6.22vw'\nconst gridColumnHeigth: string = '3.9375rem'\n\nconst leftPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.column !== undefined) {\n    return (\n      'calc((' +\n      props.column +\n      ' * ' +\n      gridColumnWidth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return Spacing.LayoutGridCellMargin\n  }\n}\nconst widthComputed = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.widthInColumns !== undefined) {\n    return (\n      'calc((' +\n      props.widthInColumns +\n      ' * ' +\n      gridColumnWidth +\n      ') - ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return 'calc(100vh - (2 * ' + Spacing.LayoutGridCellMargin + '))'\n  }\n}\nconst topPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.row !== undefined) {\n    return (\n      'calc((' +\n      props.row +\n      ' * ' +\n      gridColumnHeigth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return (\n      'calc(' + gridColumnHeigth + ' + ' + Spacing.LayoutGridCellMargin + ')'\n    )\n  }\n}\n\nconst FullHeightDiv = styled.div`\n  position: fixed;\n  bottom: 0.5rem;\n  width: ${widthComputed()};\n  left: ${leftPos()};\n  top: ${topPos()};\n`\n\nconst FullHeightDivStyled = styled.div`\n  height: 100%;\n`\n\nexport const PageLayoutFullHeightItem: React.SFC<\n  IPageLayoutFullHeightItemProps\n> = ({\n  children,\n  row = 1,\n  column = 0,\n  widthInColumns = 16,\n  withScrollArea = false,\n  scrollAreaId,\n}) => (\n  <FullHeightDiv\n    column={column}\n    row={row}\n    widthInColumns={widthInColumns}\n    withScrollArea={withScrollArea}\n  >\n    {withScrollArea ? (\n      <ScrollArea id={scrollAreaId}>{children}</ScrollArea>\n    ) : (\n      <FullHeightDivStyled>{children}</FullHeightDivStyled>\n    )}\n  </FullHeightDiv>\n)\n","import styled from 'styled-components'\n\nexport const FlexRowSingle = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: ${({ justify = 'space-between' }: { justify?: string }) =>\n    justify};\n`\n","import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import styled from 'styled-components'\n\nexport const ScrollArea = styled.div`\n  overflow-y: scroll;\n  -webkit-overflow-scrolling: touch;\n  height: 100%;\n`\n","import { LocationDescriptor } from 'history'\nimport React from 'react'\nimport { Link, LinkProps, Route } from 'react-router-dom'\nimport resolvePathname from 'resolve-pathname'\n\ninterface IRelativeLinkProps extends LinkProps {\n  to: LocationDescriptor\n  from?: string\n}\n\nexport const RelativeLink: React.SFC<IRelativeLinkProps> = ({\n  to,\n  from,\n  ...linkProps\n}) => (\n  <Route\n    children={({ location }) => (\n      <Link\n        to={resolveLocation(to, from || `${location.pathname}/`)}\n        {...linkProps}\n      />\n    )}\n  />\n)\n\nexport function resolveLocation(to: LocationDescriptor, from: string) {\n  if (typeof to === 'string') {\n    return resolvePathname(to, from)\n  }\n  const resolved = resolvePathname(to.pathname || '', from)\n  return { ...to, pathname: resolved }\n}\n","import React from 'react'\nimport { Field, FieldType, IFieldApi } from 'react-form'\n\nimport { RM } from '../helpers/ramda'\nimport { i18n } from '../i18n'\nimport { ISelectControlFlatProps, SelectControlFlat } from './SelectControlFlat'\n\ninterface IFormInputSelectProps<ItemType>\n  extends Omit<\n      ISelectControlFlatProps<ItemType>,\n      | 'selectedItems'\n      | 'onMultiSelection'\n      | 'selectedItem'\n      | 'onSingleSelection'\n    > {\n  field: FieldType\n  fieldIsPure?: boolean\n  getItemId?: (item: ItemType) => ID\n  isRequired?: boolean\n  validationName?: string\n  defaultSelection?: ReadonlyArray<ItemType> | ItemType\n}\n\nexport class FormInputFlatSelect<ItemType> extends React.Component<\n  IFormInputSelectProps<ItemType>\n> {\n  static defaultProps = {\n    validationName: i18n.t`Value`,\n    getItemId: RM.prop('id'),\n  }\n  validate = value => {\n    const { isRequired, isMulti, validationName } = this.props\n    if (isRequired) {\n      if (isMulti && (!Array.isArray(value) || value.length === 0)) {\n        return i18n.t`${validationName} must have at least option selected`\n      }\n      if (!isMulti && value == null) {\n        return i18n.t`${validationName} must have a selection`\n      }\n    }\n    return null\n  }\n  getControlProps(\n    fieldApi: IFieldApi,\n  ): Partial<ISelectControlFlatProps<ItemType>> {\n    const { isMulti, items, defaultSelection, getItemId } = this.props\n\n    const selection = fieldApi.value || defaultSelection\n\n    if (isMulti) {\n      const isSelected = (item: ItemType) =>\n        selection.includes(getItemId!(item))\n      return {\n        selectedItems: Array.isArray(selection) ? items.filter(isSelected) : [],\n        onMultiSelection: selectedItems => {\n          fieldApi.setValue(selectedItems.map(getItemId!))\n          fieldApi.setTouched(true)\n        },\n      }\n    }\n\n    return {\n      selectedItem:\n        selection && items.find(item => getItemId!(item) === selection),\n      onSingleSelection: item => {\n        fieldApi.setValue(item ? getItemId!(item) : null)\n        fieldApi.setTouched(true)\n      },\n    }\n  }\n  render() {\n    const {\n      field,\n      fieldIsPure = false,\n      isRequired = false,\n      isClearable = false,\n      ...props\n    } = this.props\n    return (\n      <Field field={field} pure={fieldIsPure} validate={this.validate}>\n        {fieldApi => (\n          <SelectControlFlat<ItemType>\n            {...this.getControlProps(fieldApi)}\n            isInvalid={Boolean(fieldApi.error)}\n            isClearable={isClearable && !isRequired}\n            {...props}\n          />\n        )}\n      </Field>\n    )\n  }\n}\n","import React from 'react'\nimport { SortableHandle } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Icon } from './Icon'\n\ninterface IDragHandleProps {}\n\nconst DragHandleContainerStyled = styled.div`\n  padding: 1rem 0.4rem;\n  cursor: grab;\n`\nexport const DragHandle = SortableHandle<IDragHandleProps>(() => (\n  <DragHandleContainerStyled>\n    <Icon iconName=\"reorder\" />\n  </DragHandleContainerStyled>\n))\n","import debounce from 'debounce'\nimport { useCallback, useEffect, useRef } from 'react'\n\nexport function useDebounceCallback(cb: AnyFunction, time: number = 300) {\n  const memoCb = useCallback(cb, [])\n  const debounced = useRef(debounce(memoCb, time))\n  useEffect(() => debounced.current.clear)\n  return debounced.current\n}\n","import React from 'react'\nimport { Field, FieldType, IFieldApi } from 'react-form'\n\nimport { RM } from '../helpers/ramda'\nimport { i18n } from '../i18n'\nimport { ISelectControlProps, SelectControl } from './SelectControl'\n\nexport interface IFormInputSelectProps<OptionType>\n  extends ISelectControlProps<OptionType> {\n  field: FieldType\n  fieldIsPure?: boolean\n  defaultValue?: OptionType\n  isRequired?: boolean\n  validatioName?: string\n}\n\nexport class FormInputSelect<OptionType> extends React.Component<\n  IFormInputSelectProps<OptionType>\n> {\n  static defaultProps = {\n    validatioName: 'Value',\n    getItemId: RM.prop('id'),\n  }\n\n  validate = (value: OptionType | undefined) => {\n    if (this.props.isRequired && !value) {\n      return i18n.t`${this.props.validatioName} must be selected`\n    }\n    return null\n  }\n\n  getControlProps(fieldApi: IFieldApi) {\n    const { isMulti, options, getOptionValue, defaultValue } = this.props\n    const selection = fieldApi.value || defaultValue\n\n    if (isMulti) {\n      const isSelected = Array.isArray(selection)\n        ? (item: OptionType) => selection.includes(getOptionValue!(item))\n        : RM.F\n      return {\n        value: Array.isArray(options)\n          ? (options as OptionType[]).filter(isSelected)\n          : [],\n        onChange: selectedOptions => {\n          fieldApi.setValue(selectedOptions.map(getOptionValue))\n        },\n      }\n    }\n\n    return {\n      value:\n        selection &&\n        (options as OptionType[]).find(\n          item => getOptionValue!(item) === selection,\n        ),\n      onChange: option => {\n        fieldApi.setValue(getOptionValue!(option))\n      },\n    }\n  }\n\n  render() {\n    const {\n      field,\n      fieldIsPure = false,\n      defaultValue = undefined,\n      isRequired = false,\n      ...props\n    } = this.props\n    return (\n      <Field field={field} validate={this.validate} pure={fieldIsPure}>\n        {fieldApi => (\n          <SelectControl\n            {...this.getControlProps(fieldApi)}\n            onFocus={() => fieldApi.setTouched(true)}\n            styles={{\n              control: base => {\n                if (Boolean(fieldApi.error)) {\n                  return {\n                    ...base,\n                    borderColor: 'red',\n                  }\n                }\n                return base\n              },\n            }}\n            {...props}\n          />\n        )}\n      </Field>\n    )\n  }\n}\n","import { LocationDescriptor } from 'history'\nimport React, { ComponentType } from 'react'\n\nimport { RelativeLink } from '../atoms/RelativeLink'\nimport { Spacing } from '../styling'\nimport { ITouchButtonProps, TouchButton } from './TouchButton'\n\ninterface IProps extends Omit<ITouchButtonProps, 'onClick'> {\n  target: LocationDescriptor\n  Link?: ComponentType<{ to: LocationDescriptor }>\n}\n\nexport const TouchButtonEdit: React.SFC<IProps> = ({\n  target,\n  Link = RelativeLink,\n  ...props\n}) => (\n  <Link to={target}>\n    <TouchButton\n      iconName=\"mode_edit\"\n      width={Spacing.ButtonHeight}\n      height={Spacing.ButtonHeight}\n      {...props}\n    />\n  </Link>\n)\n","import React from 'react'\n\nimport { Spacing } from '../styling'\nimport { ITouchButtonProps, TouchButton } from './TouchButton'\n\ninterface IProps extends ITouchButtonProps {}\n\nexport const TouchButtonRemove: React.SFC<IProps> = ({ ...props }) => (\n  <TouchButton\n    iconName=\"remove_circle_outline\"\n    width={Spacing.ButtonHeight}\n    height={Spacing.ButtonHeight}\n    {...props}\n  />\n)\n","import React from 'react'\n\nimport { ITouchButtonProps, TouchButton } from '../molecules/TouchButton'\nimport { Colors, Spacing } from '../styling'\n\ninterface IProps extends ITouchButtonProps {\n  isVisible: boolean\n}\n\nexport const TouchButtonVisibility: React.SFC<IProps> = ({\n  isVisible,\n  ...props\n}) => (\n  <TouchButton\n    iconName=\"remove_red_eye\"\n    width={Spacing.ButtonHeight}\n    height={Spacing.ButtonHeight}\n    iconColor={isVisible ? Colors.white : Colors.greyMiddle}\n    color={Colors.greyMiddle}\n    {...props}\n  />\n)\n","import 'react-virtualized/styles.css'\n\nimport React, { Component } from 'react'\nimport {\n  AutoSizer,\n  Column,\n  Table,\n  TableCellProps,\n  TableCellRenderer,\n  TableProps,\n  WindowScroller,\n} from 'react-virtualized'\nimport styled from 'styled-components'\n\nimport { i18n } from '../i18n'\nimport { TouchButtonEdit } from '../molecules/TouchButtonEdit'\nimport { TouchButtonRemove } from '../molecules/TouchButtonRemove'\nimport { TouchButtonVisibility } from '../molecules/TouchButtonVisibility'\nimport { Colors } from '../styling'\nimport { CanMutate } from './CanMutate'\nimport { CanQuery } from './CanQuery'\nimport Pacman from './Pacman'\n\nexport interface IDataTableProps<T> extends Partial<TableProps> {\n  items: T[]\n  isLoading?: boolean\n  heightStretch?: boolean\n}\n\nexport class DataTable<T> extends Component<IDataTableProps<T>> {\n  static defaultProps = {\n    heightStretch: false,\n  }\n  renderTable(width: number, height: number) {\n    const { items, children, isLoading, heightStretch, ...props } = this.props\n\n    return (\n      <Table\n        autoHeight={!heightStretch}\n        width={width}\n        height={height}\n        headerHeight={50}\n        rowHeight={60}\n        rowCount={items ? items.length : 0}\n        rowGetter={({ index }) => items[index]}\n        noRowsRenderer={() => (isLoading ? <Pacman /> : null)}\n        {...props}\n      >\n        {children}\n      </Table>\n    )\n  }\n  render() {\n    return this.props.heightStretch ? (\n      <AutoSizer>\n        {({ width, height }) => this.renderTable(width, height)}\n      </AutoSizer>\n    ) : (\n      <WindowScroller scrollElement={window}>\n        {({ height }) => (\n          <AutoSizer disableHeight={true}>\n            {({ width }) => this.renderTable(width, height)}\n          </AutoSizer>\n        )}\n      </WindowScroller>\n    )\n  }\n}\n\nexport function checkColumnAccess(\n  { canQuery, canMutate }: { canQuery?: string; canMutate?: string },\n  renderer: TableCellRenderer,\n) {\n  return (cellProps: TableCellProps) => {\n    let result = renderer(cellProps)\n    if (canQuery) {\n      result = <CanQuery queryName={canQuery}>{result}</CanQuery>\n    }\n    if (canMutate) {\n      result = <CanMutate mutationName={canMutate}>{result}</CanMutate>\n    }\n    return result\n  }\n}\n\nexport function ColumnRendererEdit({ cellData }: TableCellProps) {\n  return <TouchButtonEdit target={cellData} />\n}\n\nexport function ColumnRendererRemove({ cellData, columnData }: TableCellProps) {\n  return (\n    <TouchButtonRemove\n      onClick={() => columnData.onRemove && columnData.onRemove(cellData)}\n    />\n  )\n}\n\nexport function ColumnRendererVisibility({\n  cellData,\n  columnData,\n  rowData,\n}: TableCellProps) {\n  return (\n    <TouchButtonVisibility\n      isVisible={cellData}\n      onClick={() => columnData.onToggle(rowData.id, !cellData)}\n    />\n  )\n}\n\nexport const NoteText = styled.div`\n  color: ${Colors.greyMiddle};\n`\n\nexport function ColumnRendererWithNote({\n  cellData,\n  rowData,\n  columnData,\n}: TableCellProps) {\n  return (\n    <>\n      {cellData}\n      <NoteText>{rowData[columnData.noteKey]}</NoteText>\n    </>\n  )\n}\n\nexport const DataTableEmptyText = styled(\n  ({ text = i18n.t`Table is empty`, ...props }: { text?: string }) => (\n    <div {...props}>{text}</div>\n  ),\n)`\n  padding: 1rem;\n  color: ${Colors.greyMiddle};\n  font-style: 'italic';\n`\n\nexport { Column }\n","import React from 'react'\nimport {\n  arrayMove,\n  SortableContainer,\n  SortableElement,\n  SortEndHandler,\n} from 'react-sortable-hoc'\n\nimport { DataTable, IDataTableProps } from '../atoms/DataTable'\n\ninterface ISortResult<T> {\n  item: T\n  items: T[]\n  offset: number\n  oldIndex: number\n  newIndex: number\n}\n\nexport type TSortHandler<T> = (\n  result: ISortResult<T>,\n) => Promise<boolean> | void\n\ninterface IProps<T> extends IDataTableProps<T> {\n  items: T[]\n  onSort?: TSortHandler<T>\n}\n\ninterface IState<T> {\n  sortedItems: T[]\n}\n\nconst SortableTableRowRenderer = SortableElement(\n  ({ columns, style, className, ...props }) => (\n    <div style={style} className={className}>\n      {columns}\n    </div>\n  ),\n)\n\nconst SortableDataTableContainer = SortableContainer(DataTable)\n\nexport class SortableDataTable<T> extends React.Component<\n  IProps<T>,\n  IState<T>\n> {\n  state = { sortedItems: this.props.items }\n  static getDerivedStateFromProps = (nextProps: IProps<{}>) => {\n    return {\n      sortedItems: nextProps.items,\n    }\n  }\n  onHandleSorting: SortEndHandler = async ({ newIndex, oldIndex }) => {\n    const currentItems = [...this.state.sortedItems]\n    const sortedItems = arrayMove(this.state.sortedItems, oldIndex, newIndex)\n\n    this.setState({ sortedItems })\n\n    if (this.props.onSort) {\n      const sortSuccess = this.props.onSort({\n        item: currentItems[oldIndex],\n        items: sortedItems,\n        offset: newIndex - oldIndex,\n        newIndex,\n        oldIndex,\n      })\n      if (sortSuccess && !(await sortSuccess)) {\n        this.setState({\n          sortedItems: currentItems,\n        })\n      }\n    }\n  }\n  render() {\n    const { items, isLoading, ...props } = this.props\n    return (\n      <SortableDataTableContainer\n        useDragHandle={true}\n        lockAxis=\"y\"\n        lockToContainerEdges={true}\n        onSortEnd={this.onHandleSorting}\n        rowRenderer={rowProps => {\n          return <SortableTableRowRenderer {...rowProps} />\n        }}\n        isLoading={isLoading}\n        {...props}\n        items={this.state.sortedItems}\n      />\n    )\n  }\n}\n","import React from 'react'\n\nimport {\n  checkColumnAccess,\n  Column,\n  ColumnRendererEdit,\n  ColumnRendererRemove,\n  ColumnRendererVisibility,\n  ColumnRendererWithNote,\n  DataTable,\n  DataTableEmptyText,\n  IDataTableProps,\n} from '../../../atoms/DataTable'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { GMenuCategoryListItem } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport {\n  SortableDataTable,\n  TSortHandler,\n} from '../../../molecules/SortableDataTable'\nimport { getCategoryRoute } from '../models/MenuCategoryModel'\n\ntype TCategory = GMenuCategoryListItem.Fragment\n\ninterface IProps {\n  categories: TCategory[]\n  isSortable?: boolean\n  isLoading?: boolean\n  showEditColumn?: boolean\n  showRemoveColumn?: boolean\n  showVisibilityColumn?: boolean\n  showHeader?: boolean\n  onToggle?(categoryId: ID, visible: boolean): void\n  onRemove?(categoryId: ID): void\n  onSort?: TSortHandler<TCategory>\n  heightStretch?: boolean\n  noRowsDisplay?: ReactNode\n}\n\nexport const CategoryListTable: React.SFC<IProps> = ({\n  categories,\n  onToggle,\n  onRemove,\n  onSort,\n  showEditColumn = true,\n  showRemoveColumn = false,\n  showVisibilityColumn = false,\n  showHeader = true,\n  isSortable = false,\n  isLoading = false,\n  heightStretch = false,\n  noRowsDisplay = () => (\n    <DataTableEmptyText text={i18n.t`No recipes in category`} />\n  ),\n}) => {\n  const props: IDataTableProps<TCategory> = {\n    isLoading,\n    items: categories,\n    disableHeader: !showHeader,\n    noRowsRenderer: () => noRowsDisplay,\n  }\n  let Table: React.SFC = ({ children }) =>\n    isSortable ? (\n      <SortableDataTable\n        heightStretch={heightStretch}\n        onSort={onSort}\n        {...props}\n      >\n        {children}\n      </SortableDataTable>\n    ) : (\n      <DataTable heightStretch={heightStretch} {...props}>\n        {children}\n      </DataTable>\n    )\n  return (\n    <Table>\n      {showEditColumn && (\n        <Column\n          dataKey=\"id\"\n          width={60}\n          cellRenderer={checkColumnAccess(\n            { canQuery: 'wareCategory' },\n            ColumnRendererEdit,\n          )}\n          cellDataGetter={({ rowData }) =>\n            getCategoryRoute(rowData.id, rowData.categoryType.enum)\n          }\n        />\n      )}\n      {showRemoveColumn && (\n        <Column\n          dataKey=\"id\"\n          width={60}\n          cellRenderer={ColumnRendererRemove}\n          columnData={{ onRemove }}\n        />\n      )}\n      {showVisibilityColumn && (\n        <Column\n          dataKey=\"visible\"\n          width={60}\n          cellRenderer={checkColumnAccess(\n            { canMutate: 'updateWareCategory' },\n            ColumnRendererVisibility,\n          )}\n          columnData={{ onToggle }}\n        />\n      )}\n      <Column\n        dataKey=\"nameLabel\"\n        width={300}\n        label={i18n.t`Name`}\n        cellRenderer={ColumnRendererWithNote}\n        columnData={{ noteKey: 'internalNoteLabel' }}\n      />\n      <Column\n        dataKey=\"countRecipes\"\n        label={i18n.t`Recipe count`}\n        width={100}\n        cellRenderer={({ cellData }) =>\n          `${cellData} ${i18n.t`Recipes`.toLocaleLowerCase()}`\n        }\n      />\n      {isSortable && (\n        <Column dataKey=\"id\" width={50} cellRenderer={() => <DragHandle />} />\n      )}\n    </Table>\n  )\n}\n","import { LocationDescriptor } from 'history'\nimport React, { MouseEvent } from 'react'\nimport styled from 'styled-components'\n\nimport { RelativeLink } from '../../../atoms/RelativeLink'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\n\ninterface IProps {\n  routeTo?: LocationDescriptor\n  onClick?: (event: MouseEvent<HTMLAnchorElement>) => void\n}\n\nconst CreateButtonContainer = styled.div`\n  position: absolute;\n  right: 0;\n  z-index: 5;\n`\n\nexport const CreateButton: React.SFC<IProps> = ({\n  routeTo = 'create',\n  onClick,\n}) => (\n  <CreateButtonContainer>\n    <RelativeLink to={routeTo} onClick={onClick}>\n      <TouchButton\n        iconName=\"add_circle\"\n        color={Colors.green}\n        width={Spacing.ButtonHeight}\n        height={Spacing.ButtonHeight}\n      />\n    </RelativeLink>\n  </CreateButtonContainer>\n)\n","import React from 'react'\n\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { Headline } from '../../../atoms/Headline'\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { WareCategoryTypeEnum } from '../../../graph/types'\nimport { getCategoryRoute } from '../models/MenuCategoryModel'\nimport { CategoryListTable } from '../molecules/CategoryListTable'\nimport { CreateButton } from '../molecules/CreateButton'\nimport { QueryCategoryList } from './CategoryList.graphql'\n\ninterface ICategoryListProps {\n  headline: string\n  subHeadline?: string\n  categoryType: WareCategoryTypeEnum\n  heightStretch?: boolean\n}\n\nexport const CategoryList: React.SFC<ICategoryListProps> = ({\n  headline,\n  subHeadline = false,\n  categoryType,\n  heightStretch = false,\n}) => (\n  <>\n    <FlexRowSingle>\n      <FlexColumn widthGrowIndex={1}>\n        <Headline>{headline}</Headline>\n        {subHeadline && <Headline size=\"smaller\">{subHeadline}</Headline>}\n      </FlexColumn>\n      <FlexColumn fixedWidth={true}>\n        <CreateButton routeTo={getCategoryRoute('create', categoryType)} />\n      </FlexColumn>\n    </FlexRowSingle>\n    <WithRoot\n      render={({ settings }) => (\n        <QueryCategoryList\n          {...settings.getQueryProps({ categoryType })}\n          renderLoading={true}\n          render={({ wareCategories }) => (\n            <CategoryListTable\n              categories={wareCategories}\n              onToggle={settings.menu.category.changeVisibility}\n              isSortable={true}\n              showHeader={false}\n              heightStretch={heightStretch}\n              showVisibilityColumn={true}\n              onSort={({ item, offset }) => {\n                settings.menu.category.sortCategory(item.id, offset)\n              }}\n            />\n          )}\n        />\n      )}\n    />\n  </>\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../../../atoms/Card'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { WareCategoryTypeEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { SettingsCompanyBranchPicker } from '../../settings/organisms/SettingsCompanyBranchPicker'\nimport { CategoryList } from '../organisms/CategoryList'\n\nexport const PartialDataTableContainer = styled.div`\n  height: calc(100% - 3.5rem);\n  padding-top: 1rem;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  -webkit-overflow-scrolling: touch;\n`\n\nexport const MenuCategoryListPage: React.SFC = props => (\n  <>\n    <FullPageLayout\n      pageTitle={i18n.t`Category overview`}\n      useBackButton={true}\n    />\n    <PageLayoutFullHeightItem>\n      <Card stretchToParent={true}>\n        <SettingsCompanyBranchPicker width={20} />\n\n        <PartialDataTableContainer>\n          <CategoryList\n            categoryType={WareCategoryTypeEnum.MAIN}\n            headline={i18n.t`Category of recipes`}\n            heightStretch={false}\n          />\n\n          <VerticalGap size={1.5} />\n\n          <CategoryList\n            categoryType={WareCategoryTypeEnum.SIDE_DISH}\n            headline={i18n.t`Category of sidedish`}\n            heightStretch={false}\n          />\n\n          <VerticalGap size={1.5} />\n\n          <CategoryList\n            categoryType={WareCategoryTypeEnum.COVER}\n            headline={i18n.t`Category of covers`}\n            heightStretch={false}\n          />\n        </PartialDataTableContainer>\n        {/* <VerticalGap size={1.5} />\n      <Trans>\n        <Headline>Recipes without category</Headline>\n        <Headline size=\"smaller\">are not visible anywhere</Headline>\n      </Trans> */}\n      </Card>\n    </PageLayoutFullHeightItem>\n  </>\n)\n","import styled from 'styled-components'\n\nexport const TopRightButtonContainer = styled.div`\n  position: fixed;\n  right: 0;\n  top: -4rem;\n  width: 10rem;\n`\nTopRightButtonContainer.displayName = 'TopRightButtonContainer'\n","import React from 'react'\nimport { FormApi, IFormState } from 'react-form'\n\nimport { isFormValid } from '../../../helpers/form'\nimport { i18n } from '../../../i18n'\nimport { FormSubmit } from '../../../molecules/FormSubmit'\n\ninterface IProps {\n  isCreate?: boolean\n}\n\nexport const SubmitButton: React.SFC<IProps> = ({ isCreate = false }) => (\n  <FormApi\n    render={form => (\n      <FormSubmit id=\"form-submit\">{getButtonText(form, isCreate)}</FormSubmit>\n    )}\n  />\n)\n\nfunction getButtonText(form: IFormState, isCreate: boolean) {\n  if (!isFormValid(form)) {\n    return i18n.t`Fix form errors`\n  }\n  return isCreate ? i18n.t`Create` : i18n.t`Save`\n}\n","import styled from 'styled-components'\n\nexport const FormContainer = styled.form`\n  margin: 0.6rem;\n  display: flex;\n`\n\nexport const FormColumn = styled.div`\n  flex: none;\n  margin-right: 1rem;\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface IProps {\n  pictogramId: string\n  fontSize?: number\n  fontSizeUnit?: string\n}\n\nconst PictogramDisplayStyled = styled.div`\n  &:before {\n    font-size: ${getFontSize} !important;\n    margin-left: 0.5rem !important;\n  }\n`\n\nexport const PictogramDisplay: React.SFC<IProps> = ({\n  pictogramId,\n  fontSize = 2,\n  fontSizeUnit = 'rem',\n}) => (\n  <PictogramDisplayStyled\n    className={getClassName(pictogramId)}\n    fontSize={fontSize}\n    fontSizeUnit={fontSizeUnit}\n  />\n)\n\nfunction getFontSize({ fontSize = 2, fontSizeUnit = 'rem' }: Partial<IProps>) {\n  return `${fontSize}${fontSizeUnit}`\n}\n\nfunction getClassName(pictogramId: string) {\n  return `flaticon-${pictogramId}`\n}\n","import React from 'react'\nimport { Field, FieldType } from 'react-form'\n\nimport availablePictograms from '../../../assets/Flaticon.json'\nimport { PictogramDisplay } from '../../../atoms/PictogramDisplay'\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { RM } from '../../../helpers/ramda'\n\ninterface IProps {\n  field: FieldType\n}\n\n// const SelectStyled = styled(Select)`\n//   width: 7rem;\n//   &.Select--single {\n//     .Select-control {\n//       outline: none;\n//       border: 1px solid ${Colors.greyMiddle};\n//       min-height: 5rem;\n//       .Select-value {\n//         line-height: 5rem;\n//         outline: none;\n//       }\n//     }\n//   }\n//   & .Select-menu-outer {\n//     min-height: 35rem;\n//   }\n//   & .Select-menu {\n//     min-height: calc(35rem - 2px);\n//   }\n// `\n\ninterface IFormValue {\n  pictogram: string\n}\n\nexport const MenuCategoryPictogramSelect: React.SFC<IProps> = ({ field }) => (\n  <Field field={field} pure={true}>\n    {fieldApi => (\n      <SelectControl<IFormValue>\n        value={fieldApi.value ? { pictogram: fieldApi.value } : null}\n        onChange={value => fieldApi.setValue(value)}\n        options={availablePictograms}\n        getOptionValue={RM.prop('pictogram')}\n        // @ts-ignore Badly typed\n        formatOptionLabel={(pictogram: string) => (\n          <PictogramDisplay pictogramId={pictogram} fontSize={2} />\n        )}\n        components={{\n          SingleValue: ({ data }) => (\n            <PictogramDisplay pictogramId={data.pictogram} fontSize={4} />\n          ),\n        }}\n        styles={{\n          container: base => ({ ...base, width: '8rem' }),\n          menuList: base => ({ ...base, maxHeight: '35rem' }),\n        }}\n        isClearable={false}\n        isSearchable={false}\n        minWidth={8}\n      />\n    )}\n  </Field>\n)\n","import React from 'react'\nimport { Field } from 'react-form'\nimport { Route } from 'react-router'\n\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\n\ninterface IProps {\n  confirmText: string\n  onDelete(id: ID): Promise<void>\n}\n\nexport const FormDeleteButton: React.SFC<IProps> = ({\n  confirmText,\n  onDelete,\n}) => (\n  <Field field=\"id\">\n    {field =>\n      field.value !== 'NEW' && (\n        <Route>\n          {({ history }) => (\n            <TouchButtonDelete\n              confirmText={confirmText}\n              onDelete={async () => {\n                await onDelete(field.value)\n                history.goBack()\n              }}\n            />\n          )}\n        </Route>\n      )\n    }\n  </Field>\n)\n","import React from 'react'\n\nimport {\n  FormInputTextBox,\n  TFormInputTextBoxProps,\n} from '../../../atoms/FormInputTextBox'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\n\ninterface IProps extends Partial<TFormInputTextBoxProps> {\n  icon?: string\n  label?: string\n}\n\nexport const FormInputInternalNote: React.SFC<IProps> = ({\n  field = 'internalNote',\n  icon = 'label_outline',\n  label = i18n.t`Internal note`.toLocaleLowerCase(),\n  ...props\n}) => (\n  <IconLine label={label} labelWidth={7}>\n    <FormInputTextBox field={field} inputWidth={22} {...props} />\n  </IconLine>\n)\n","import React from 'react'\n\nimport {\n  FormInputTextBox,\n  TFormInputTextBoxProps,\n} from '../../../atoms/FormInputTextBox'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\n\ninterface IProps extends Partial<TFormInputTextBoxProps> {\n  icon?: string\n}\n\nexport const FormInputName: React.SFC<IProps> = ({\n  field = 'nameLabel',\n  icon = 'label',\n  ...props\n}) => (\n  <IconLine icon={icon} labelWidth={7}>\n    <FormInputTextBox\n      field={field}\n      inputWidth={22}\n      isRequired={true}\n      validatioName={i18n.t`Name`}\n      {...props}\n    />\n  </IconLine>\n)\n","import React from 'react'\n\nimport { FormColumn, FormContainer } from '../../../atoms/FormContainer'\nimport { FormInputCheckbox } from '../../../atoms/FormInputCheckbox'\nimport { WareCategoryTypeEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport { MenuCategoryPictogramSelect } from '../atoms/MenuCategoryPictogramSelect'\nimport { FormDeleteButton } from '../molecules/FormDeleteButton'\nimport { FormInputInternalNote } from '../molecules/FormInputInternalNote'\nimport { FormInputName } from '../molecules/FormInputName'\n\ninterface ICategoryBasicFormProps {\n  categoryType: WareCategoryTypeEnum\n}\n\nexport const CategoryBasicForm: React.SFC<ICategoryBasicFormProps> = ({\n  categoryType,\n}) => (\n  <FormContainer>\n    <FormColumn>\n      <FormInputName placeholder={i18n.t`Category name`} inputWidth={22} />\n      <FormInputInternalNote\n        placeholder={i18n.t`Category internal note`}\n        inputWidth={22}\n      />\n      <FormInputCheckbox\n        field=\"visible\"\n        label={i18n.t`To show this category`}\n      />\n    </FormColumn>\n\n    {categoryType === WareCategoryTypeEnum.MAIN ? (\n      <FormColumn>\n        <MenuCategoryPictogramSelect field=\"pictogram\" />\n      </FormColumn>\n    ) : null}\n\n    <FormColumn>\n      <WithSettings\n        render={({ menu }) => (\n          <FormDeleteButton\n            confirmText={i18n.t`Remove this category?`}\n            onDelete={id => menu.category.deleteCategory(id, categoryType)}\n          />\n        )}\n      />\n    </FormColumn>\n  </FormContainer>\n)\n","import React, { useEffect, useState } from 'react'\nimport { Form, FormProps } from 'react-form'\n\ninterface IProps<TValues = object> extends FormProps<TValues> {\n  shouldLoad: boolean\n  loader(): Promise<TValues>\n}\n\nexport function FormLoader<TValues = object>({\n  shouldLoad,\n  loader,\n  ...props\n}: IProps<TValues>) {\n  const [values, setValues] = useState<TValues | null>(null)\n  useEffect(\n    () => {\n      if (!shouldLoad) {\n        return\n      }\n      loader().then(setValues)\n    },\n    [shouldLoad],\n  )\n  return <Form values={values} {...props} />\n}\n","import React from 'react'\nimport { Route } from 'react-router'\n\ninterface IProps {\n  render?(goBack: () => void): ReactNode\n}\n\nexport const NavigateBack: React.SFC<IProps> = ({ render }) => (\n  <Route>\n    {({ history }) => {\n      if (render) {\n        return render(() => history.goBack())\n      }\n      history.goBack()\n      return null\n    }}\n  </Route>\n)\n","import { Popover } from '@material-ui/core'\nimport { isApolloError } from 'apollo-client/errors/ApolloError'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { FormLoader } from '../../../atoms/FormLoader'\nimport { NavigateBack } from '../../../atoms/NavigateBack'\nimport { TQueryErrors } from '../../../graph/errorHandler'\nimport { logError, logForm } from '../../../helpers/logger'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\n\ninterface IProps<TValues = object> {\n  isCreate: boolean\n  getDefaultValues(): TValues\n  loadValues(): Promise<TValues>\n  loadDefaults?(): Promise<Partial<TValues>>\n  onCreate(values: TValues): Promise<TQueryErrors>\n  onUpdate(values: TValues): Promise<TQueryErrors>\n}\n\ninterface IState {\n  submitError: Maybe<Error>\n  validationErrors: Maybe<object>\n}\n\nconst ErrorPop = styled.div`\n  color: red;\n  padding: 1rem;\n  max-width: 30rem;\n  overflow-wrap: break-word;\n`\n\nexport class MenuBaseFormLoader<TValues extends {}> extends React.Component<\n  IProps<TValues>,\n  IState\n> {\n  state: IState = { submitError: null, validationErrors: null }\n  renderErrors() {\n    const { submitError, validationErrors } = this.state\n    if (submitError) {\n      return this.renderSubmitError(submitError)\n    }\n    if (validationErrors) {\n      return this.renderValidationErrors(validationErrors)\n    }\n    return null\n  }\n  renderSubmitError(submitError: Error) {\n    let messages = [\n      i18n.t`Unexpected error while sending form. Out team was notified about the issue.`,\n    ]\n    if (isApolloError(submitError)) {\n      const filter =\n        process.env.NODE_ENV === 'production'\n          ? RM.propEq('showToUser', true)\n          : () => true\n      const userErrors = submitError.graphQLErrors\n        .filter(filter)\n        .map(RM.prop('message'))\n      if (userErrors.length) {\n        messages = userErrors\n      }\n    }\n    return this.renderPopover(messages)\n  }\n  renderValidationErrors(errors: object) {\n    return null // this.renderPopover(Object.values(errors))\n  }\n  renderPopover(messages: string[]) {\n    return (\n      <Popover\n        open={true}\n        anchorEl={() => document.getElementById('submit-button')!}\n        onClose={() =>\n          this.setState({ submitError: null, validationErrors: null })\n        }\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n      >\n        {messages.map((message, idx) => (\n          <ErrorPop key={idx}>{message}</ErrorPop>\n        ))}\n      </Popover>\n    )\n  }\n  render() {\n    const {\n      isCreate,\n      onCreate,\n      onUpdate,\n      getDefaultValues,\n      loadValues,\n      loadDefaults,\n      children,\n    } = this.props\n    return (\n      <NavigateBack\n        render={goBack => (\n          <FormLoader<TValues>\n            shouldLoad={true}\n            defaultValues={getDefaultValues()}\n            loader={async () => {\n              let defaults = getDefaultValues()\n              if (loadDefaults) {\n                const loadedDefaults = await loadDefaults()\n                Object.assign(defaults, loadedDefaults)\n              }\n              if (isCreate) {\n                return defaults\n              }\n              const values = await loadValues()\n              return Object.assign({}, defaults, values)\n            }}\n            onChange={formApi => logForm('new values', formApi.values)}\n            onSubmit={async values => {\n              if (isCreate) {\n                await onCreate(values)\n              } else {\n                await onUpdate(values)\n              }\n              goBack()\n            }}\n            onSubmitFailure={(validationErrors, submitError) => {\n              this.setState({ validationErrors, submitError })\n              if (Object.keys(validationErrors).length) {\n                logError('validation errors', validationErrors)\n              }\n              if (submitError) {\n                logError('submit error', submitError)\n              }\n            }}\n          >\n            {children}\n            {this.renderErrors()}\n          </FormLoader>\n        )}\n      />\n    )\n  }\n}\n","import { useRoot } from '../../../atoms/RootProvider'\n\nexport function useMenu() {\n  const {\n    settings: { menu },\n  } = useRoot()\n  return menu\n}\n","import React from 'react'\n\nimport { GMenuCategoryForm, WareCategoryTypeEnum } from '../../../graph/types'\nimport { MenuBaseFormLoader } from '../atoms/MenuBaseFormLoader'\nimport { useMenu } from '../hooks/useMenu'\nimport { MenuCategoryFormQuery } from './CategoryForm.graphql'\n\ninterface IProps {\n  categoryId: Maybe<ID>\n  categoryType: WareCategoryTypeEnum\n  children: ReactNode\n}\n\nexport type TCategoryFormValues = GMenuCategoryForm.WareCategory\n\nexport const CategoryFormLoader: React.SFC<IProps> = ({\n  categoryId,\n  categoryType,\n  children,\n}) => {\n  const menu = useMenu()\n  return (\n    <MenuBaseFormLoader<TCategoryFormValues>\n      isCreate={categoryId === null}\n      onCreate={values => menu.category.createCategory(values, categoryType)}\n      onUpdate={values => menu.category.updateCategory(values, categoryType)}\n      getDefaultValues={() => getDefaults(categoryType)}\n      loadValues={async () => {\n        const { data } = await menu.client.query<GMenuCategoryForm.Query>({\n          query: MenuCategoryFormQuery,\n          variables: { categoryId },\n          fetchPolicy: 'no-cache',\n        })\n        return data.wareCategory\n      }}\n    >\n      {children}\n    </MenuBaseFormLoader>\n  )\n}\n\nfunction getDefaults(categoryType: WareCategoryTypeEnum): TCategoryFormValues {\n  return {\n    id: 'NEW',\n    visible: true,\n    internalNoteLabel: '',\n    nameLabel: '',\n    categoryType: { enum: categoryType },\n    recipes: [],\n  }\n}\n","import React from 'react'\nimport { BulletList } from 'react-content-loader'\nimport { TableCellProps } from 'react-virtualized'\n\nimport {\n  checkColumnAccess,\n  Column,\n  ColumnRendererEdit,\n  ColumnRendererRemove,\n  ColumnRendererVisibility,\n  ColumnRendererWithNote,\n  DataTable,\n} from '../../../atoms/DataTable'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { Headline } from '../../../atoms/Headline'\nimport { GMenuRecipeList, WareCategoryTypeEnum } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport {\n  SortableDataTable,\n  TSortHandler,\n} from '../../../molecules/SortableDataTable'\nimport { TPriceType } from '../menutypes'\nimport { getRecipeRoute } from '../models/MenuRecipeModel'\n\ntype TRecipe = GMenuRecipeList.Recipes\n\ninterface IProps {\n  recipes: TRecipe[]\n  isSortable?: boolean\n  isLoading?: boolean\n  showEditColumn?: boolean\n  showRemoveColumn?: boolean\n  showVisibilityColumn?: boolean\n  showTypeColumn?: boolean\n  onToggle?(recipeId: ID, visible: boolean): void\n  onRemove?(recipeId: ID): void\n  onSortRecipe?: TSortHandler<TRecipe>\n  heightStretch?: boolean\n}\n\nexport const RecipeListTable: React.SFC<IProps> = ({\n  recipes,\n  onToggle,\n  onRemove,\n  onSortRecipe,\n  showEditColumn = true,\n  showRemoveColumn = false,\n  showVisibilityColumn = true,\n  showTypeColumn = false,\n  isSortable = false,\n  isLoading = false,\n  heightStretch = false,\n}) => {\n  const props = {\n    isLoading,\n    items: recipes,\n    heightStretch,\n    noRowsRenderer: () =>\n      isLoading ? (\n        <BulletList />\n      ) : (\n        <Headline>{i18n.t`No recipes has been found`}</Headline>\n      ),\n  }\n  let Table: React.SFC = ({ children }) =>\n    isSortable ? (\n      <SortableDataTable onSort={onSortRecipe} {...props}>\n        {children}\n      </SortableDataTable>\n    ) : (\n      <DataTable {...props}>{children}</DataTable>\n    )\n  return (\n    <Table>\n      {showEditColumn && (\n        <Column\n          dataKey=\"id\"\n          width={60}\n          cellRenderer={checkColumnAccess(\n            { canQuery: 'recipe' },\n            ColumnRendererEdit,\n          )}\n          cellDataGetter={({ rowData }) =>\n            getRecipeRoute(rowData.id, rowData.recipeType.enum)\n          }\n        />\n      )}\n      {showRemoveColumn && (\n        <Column\n          dataKey=\"id\"\n          width={60}\n          cellRenderer={ColumnRendererRemove}\n          columnData={{ onRemove }}\n        />\n      )}\n      {showVisibilityColumn && (\n        <Column\n          dataKey=\"visible\"\n          width={60}\n          cellRenderer={checkColumnAccess(\n            { canMutate: 'updateRecipe' },\n            ColumnRendererVisibility,\n          )}\n          columnData={{ onToggle }}\n        />\n      )}\n      {showTypeColumn && (\n        <Column\n          dataKey=\"recipeType\"\n          width={100}\n          label={i18n.t`Type`}\n          cellRenderer={ColumnRendererCode}\n        />\n      )}\n      <Column dataKey=\"code\" width={100} label={i18n.t`Code`} />\n      <Column\n        dataKey=\"nameLabel\"\n        width={300}\n        label={i18n.t`Name`}\n        cellRenderer={ColumnRendererWithNote}\n        columnData={{ noteKey: 'internalNote' }}\n      />\n      <Column\n        dataKey=\"prices\"\n        width={150}\n        label={i18n.t`Delivery sale`}\n        cellRenderer={ColumnRendererPrice}\n        columnData={{ priceType: TPriceType.DELIVERY }}\n      />\n      <Column\n        dataKey=\"prices\"\n        width={150}\n        label={i18n.t`Local sale`}\n        cellRenderer={ColumnRendererPrice}\n        columnData={{ priceType: TPriceType.INHOUSE }}\n      />\n      <Column\n        dataKey=\"availableAmount\"\n        label={i18n.t('recipe.list.availableAmount')`Stock`}\n        width={100}\n      />\n      <Column\n        dataKey=\"internalNote\"\n        label={i18n.t`Internal note`}\n        width={200}\n      />\n      {isSortable && (\n        <Column dataKey=\"id\" width={50} cellRenderer={() => <DragHandle />} />\n      )}\n    </Table>\n  )\n}\n\nfunction ColumnRendererPrice({\n  cellData: prices,\n  columnData: { priceType },\n}: TableCellProps) {\n  const foundPrice = prices.find(RM.pathEq(['priceType', 'enum'], priceType))\n  if (foundPrice) {\n    return foundPrice.price.formattedValue\n  }\n  return <i>{i18n.t`Not set`.toLocaleLowerCase()}</i>\n}\n\nfunction ColumnRendererCode({ rowData }: TableCellProps) {\n  const type: WareCategoryTypeEnum = rowData.recipeType.enum\n  if (type === WareCategoryTypeEnum.SIDE_DISH) {\n    return i18n.t`Sidedish`.toLocaleLowerCase()\n  }\n  if (type === WareCategoryTypeEnum.COVER) {\n    return i18n.t`Cover`.toLocaleLowerCase()\n  }\n  return i18n.t`Ware`.toLocaleLowerCase()\n}\n","import React, { Component } from 'react'\n\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport {\n  ISelectControlProps,\n  SelectControl,\n} from '../../../atoms/SelectControl'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\n\ninterface IProps<OptionType> extends ISelectControlProps {\n  onAdd(option: OptionType): void\n  addLabel?: string\n  addButtonText?: string\n}\n\nexport class MenuSuggestionPanel<OptionType extends {}> extends Component<\n  IProps<OptionType>\n> {\n  static defaultProps = {\n    addButtonText: i18n.t`Add`,\n  }\n  state: { selected: Maybe<OptionType> } = { selected: null }\n  onAdd = () => {\n    if (this.state.selected) {\n      this.props.onAdd(this.state.selected!)\n      this.setState({ selected: null })\n    }\n  }\n  onSelect = (selected: OptionType) => {\n    this.setState({ selected })\n  }\n  render() {\n    const {\n      addLabel = i18n.t`Add`,\n      onAdd,\n      addButtonText,\n      ...props\n    } = this.props\n    return (\n      <FlexRowSingle justify=\"flex-start\">\n        <FlexColumn fixedWidth={true} width=\"4rem\" margin=\"auto 0\">\n          {addLabel}\n        </FlexColumn>\n        <FlexColumn fixedWidth={true} width=\"20rem\" margin=\"auto 0\">\n          <SelectControl\n            value={this.state.selected}\n            onChange={this.onSelect}\n            onKeyDown={ev => {\n              if (ev.key === 'Enter') {\n                this.onAdd()\n              }\n            }}\n            isClearable={false}\n            getOptionValue={RM.prop('id')}\n            getOptionLabel={RM.prop('nameLabel')}\n            {...props}\n          />\n        </FlexColumn>\n        <FlexColumn fixedWidth={true} width=\"10rem\" margin=\"auto 0\">\n          <TouchButton\n            text={addButtonText}\n            disabled={this.state.selected === null}\n            onClick={this.onAdd}\n          />\n        </FlexColumn>\n      </FlexRowSingle>\n    )\n  }\n}\n","import React from 'react'\n\nimport { GMenuRecipe, WareCategoryTypeEnum } from '../../../graph/types'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\nimport { QueryRecipeList } from './RecipeList.graphql'\n\ntype TRecipe = GMenuRecipe.Fragment\n\ninterface IProps {\n  categoryType?: WareCategoryTypeEnum\n  onAdd(recipe: TRecipe): void\n  filterRecipes(recipes: TRecipe[]): TRecipe[]\n}\n\nexport const RecipeSuggestionPanel: React.SFC<IProps> = ({\n  categoryType,\n  filterRecipes,\n  onAdd,\n}) => (\n  <WithSettings\n    observe={true}\n    render={settings => (\n      <QueryRecipeList\n        {...settings.getQueryProps({ categoryType })}\n        fetchPolicy=\"cache-and-network\"\n        render={({ recipes }) => (\n          <MenuSuggestionPanel<TRecipe>\n            options={filterRecipes(recipes)}\n            onAdd={onAdd}\n          />\n        )}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { Field, IFieldApi } from 'react-form'\nimport styled from 'styled-components'\n\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { GMenuRecipe, WareCategoryTypeEnum } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { RecipeListTable } from '../molecules/RecipeListTable'\nimport { RecipeSuggestionPanel } from './RecipeSuggestionPanel'\n\ninterface IProps {\n  categoryType: WareCategoryTypeEnum\n}\n\nexport const FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 96%;\n  width: 100%;\n`\nexport const FormFixedRow = styled.div`\n  flex: 0 0 auto;\n`\nexport const FormStretchedRow = styled.div`\n  flex: 1 1 0;\n  min-height: 0;\n  position: relative;\n`\n\nexport const CategoryRecipesView: React.SFC<IProps> = ({ categoryType }) => (\n  <WithRoot\n    observe={false}\n    render={({\n      settings: {\n        menu: { recipe },\n      },\n    }) => (\n      <Field field=\"recipes\">\n        {(fieldApi: IFieldApi<GMenuRecipe.Fragment[]>) => (\n          <FormContainer>\n            <FormFixedRow>\n              <RecipeSuggestionPanel\n                categoryType={categoryType}\n                filterRecipes={RM.without(fieldApi.value)}\n                onAdd={addedRecipe =>\n                  fieldApi.setValue(fieldApi.value.concat(addedRecipe))\n                }\n              />\n            </FormFixedRow>\n            <FormStretchedRow>\n              <RecipeListTable\n                recipes={fieldApi.value}\n                isSortable={true}\n                showRemoveColumn={true}\n                showEditColumn={false}\n                showVisibilityColumn={false}\n                heightStretch={true}\n                onRemove={recipeId =>\n                  fieldApi.setValue(\n                    RM.reject(RM.propEq('id', recipeId), fieldApi.value),\n                  )\n                }\n                onSortRecipe={({ items }) => {\n                  fieldApi.setValue(items)\n                }}\n              />\n            </FormStretchedRow>\n          </FormContainer>\n        )}\n      </Field>\n    )}\n  />\n)\n","import { i18nMark, Trans } from '@lingui/react'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { WareCategoryTypeEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { TopRightButtonContainer } from '../../../molecules/TopRightButtonContainer'\nimport { SubmitButton } from '../molecules/SubmitButton'\nimport { CategoryBasicForm } from '../organisms/CategoryFormBasic'\nimport { CategoryFormLoader } from '../organisms/CategoryFormLoader'\nimport { CategoryRecipesView } from '../organisms/CategoryRecipesView'\n\ninterface IProps {\n  categoryId: Maybe<ID>\n  categoryType: WareCategoryTypeEnum\n}\n\nconst titleByType = {\n  [WareCategoryTypeEnum.MAIN]: i18nMark('Ware categories'),\n  [WareCategoryTypeEnum.SIDE_DISH]: i18nMark('Sidedish categories'),\n  [WareCategoryTypeEnum.COVER]: i18nMark('Cover categories'),\n}\n\nexport const FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n`\nexport const FormFixedRow = styled.div`\n  flex: 0 0 8rem;\n`\nexport const FormStretchedRow = styled.div`\n  flex: 1 1 0;\n  min-height: 0;\n  position: relative;\n`\n\nexport const MenuCategoryPage: React.SFC<IProps> = ({\n  categoryId,\n  categoryType,\n}) => (\n  <CategoryFormLoader categoryId={categoryId} categoryType={categoryType}>\n    <>\n      <FullPageLayout\n        pageTitle={i18n._(titleByType[categoryType])}\n        hideLogoutWidget={true}\n        useBackButton={true}\n      >\n        <TopRightButtonContainer>\n          <CanMutate\n            mutationName={\n              categoryId === null ? 'createWareCategory' : 'updateWareCategory'\n            }\n          >\n            <SubmitButton isCreate={categoryId === null} />\n          </CanMutate>\n        </TopRightButtonContainer>\n      </FullPageLayout>\n\n      <PageLayoutFullHeightItem>\n        <FormContainer>\n          <FormFixedRow>\n            <Card>\n              <CategoryBasicForm categoryType={categoryType} />\n            </Card>\n          </FormFixedRow>\n          <FormStretchedRow>\n            <Card stretchToParent={true}>\n              <Headline>\n                <Trans>Recipes assigned to this category</Trans>\n              </Headline>\n              <CategoryRecipesView categoryType={categoryType} />\n            </Card>\n          </FormStretchedRow>\n        </FormContainer>\n      </PageLayoutFullHeightItem>\n    </>\n  </CategoryFormLoader>\n)\n","import styled from 'styled-components'\n\nexport const DataTableContainer = styled.div`\n  height: calc(100% - 4.5rem);\n  padding-top: 2rem;\n`\n","import { Search } from '@material-ui/icons'\nimport React from 'react'\n\nimport { FormInputStyled } from '../../../atoms/FormInputTextBox'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { useDebounceCallback } from '../../../hooks/useDebounceCallback'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {\n  modelType: 'recipe' | 'category' | 'stock'\n}\n\nexport const MenuFilterInput: React.FC<IProps> = ({ modelType }) => {\n  const {\n    settings: { menu },\n  } = useRoot()\n\n  const model = menu[modelType]\n  const onChange = useDebounceCallback(model.setFilterInput)\n\n  return (\n    <IconLine icon={Search}>\n      <FormInputStyled\n        onChange={ev => onChange(ev.target.value)}\n        placeholder={i18n.t`Filter by name or code`}\n      />\n    </IconLine>\n  )\n}\n","import React from 'react'\nimport { Redirect, RedirectProps } from 'react-router-dom'\n\nimport { resolveLocation } from './RelativeLink'\n\ninterface IProps extends RedirectProps {}\n\nexport const RelativeRedirect: React.SFC<IProps> = ({ to, from, ...props }) => (\n  <Redirect\n    to={resolveLocation(to, from || `${location.pathname}/`)}\n    from={from}\n    {...props}\n  />\n)\n","import { Trans } from '@lingui/react'\nimport { Dialog, DialogTitle } from '@material-ui/core'\nimport React, { Component } from 'react'\n\nimport { RelativeRedirect } from '../../../atoms/RelativeRedirect'\nimport { WareCategoryTypeEnum } from '../../../graph/types'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { getRecipeRoute } from '../models/MenuRecipeModel'\nimport { CreateButton } from './CreateButton'\n\ninterface IProps {}\n\ninterface IState {\n  isOpen: boolean\n  recipeType: Maybe<WareCategoryTypeEnum>\n}\n\nexport class RecipeTypeSelection extends Component<IProps, IState> {\n  state = { isOpen: false, recipeType: null }\n  onClose = () => {\n    this.setState({ isOpen: false })\n  }\n  onOpen = () => {\n    this.setState({ isOpen: true })\n  }\n  onSelect = (recipeType: WareCategoryTypeEnum) => () => {\n    this.setState({ isOpen: true, recipeType })\n  }\n  render() {\n    const { isOpen, recipeType } = this.state\n    return (\n      <>\n        {recipeType !== null && (\n          <RelativeRedirect\n            to={getRecipeRoute('create', recipeType)}\n            push={true}\n          />\n        )}\n        <CreateButton\n          onClick={ev => {\n            ev.preventDefault()\n            this.onOpen()\n          }}\n        />\n        <Dialog open={isOpen} onClose={this.onClose}>\n          <DialogTitle>Select item type</DialogTitle>\n          <TouchButton onClick={this.onSelect(WareCategoryTypeEnum.MAIN)}>\n            <Trans>Ware</Trans>\n          </TouchButton>\n          <TouchButton onClick={this.onSelect(WareCategoryTypeEnum.SIDE_DISH)}>\n            <Trans>Sidedish</Trans>\n          </TouchButton>\n          <TouchButton onClick={this.onSelect(WareCategoryTypeEnum.COVER)}>\n            <Trans>Cover</Trans>\n          </TouchButton>\n        </Dialog>\n      </>\n    )\n  }\n}\n","export function isPartialMatch(searchValue: string) {\n  const search = searchValue.toLocaleLowerCase()\n  return (propValue: string) => propValue.toLocaleLowerCase().includes(search)\n}\n","import { observer, useComputed } from 'mobx-react-lite'\nimport React from 'react'\nimport { useQuery } from 'react-apollo-hooks'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { GMenuRecipeList } from '../../../graph/types'\nimport { isPartialMatch } from '../../../helpers/filter'\nimport { RM } from '../../../helpers/ramda'\nimport { RecipeListTable } from '../molecules/RecipeListTable'\nimport { MenuRecipeListQuery } from './RecipeList.graphql'\n\nexport const RecipeListLoader = observer(() => {\n  const { settings } = useRoot()\n  const { data, loading } = useQuery<\n    GMenuRecipeList.Query,\n    GMenuRecipeList.Variables\n  >(MenuRecipeListQuery, {\n    ...settings.queryProps,\n    suspend: false,\n  })\n\n  const filteredRecipes = useComputed(\n    () => {\n      if (!data.recipes || data.recipes.length === 0) {\n        return []\n      }\n      const partialMatch = isPartialMatch(settings.menu.recipe.filterInput)\n      return data.recipes.filter(\n        RM.cond([\n          [RM.propSatisfies(partialMatch, 'code'), RM.T],\n          [RM.propSatisfies(partialMatch, 'nameLabel'), RM.T],\n        ]),\n      )\n    },\n    [data && data.recipes],\n  )\n\n  return (\n    <RecipeListTable\n      recipes={filteredRecipes}\n      onToggle={settings.menu.recipe.changeVisibility}\n      isLoading={loading}\n      heightStretch={true}\n      showTypeColumn={true}\n    />\n  )\n})\n","import React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { DataTableContainer } from '../../../atoms/DataTableContainer'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { SettingsCompanyBranchPicker } from '../../settings/organisms/SettingsCompanyBranchPicker'\nimport { MenuFilterInput } from '../molecules/MenuFilterInput'\nimport { RecipeTypeSelection } from '../molecules/RecipeTypeSelection'\nimport { RecipeListLoader } from '../organisms/RecipeListLoader'\n\nexport const MenuRecipeListPage: React.SFC = props => (\n  <>\n    <FullPageLayout pageTitle={i18n.t`Recipe overview`} useBackButton={true} />\n\n    <PageLayoutFullHeightItem>\n      <Card stretchToParent={true}>\n        <FlexRowSingle justify=\"start\">\n          <FlexColumn>\n            <SettingsCompanyBranchPicker width={20} />\n          </FlexColumn>\n          <FlexColumn>\n            <MenuFilterInput modelType=\"recipe\" />\n          </FlexColumn>\n        </FlexRowSingle>\n        <CanMutate mutationName=\"createRecipe\">\n          <RecipeTypeSelection />\n        </CanMutate>\n        <DataTableContainer>\n          <RecipeListLoader />\n        </DataTableContainer>\n      </Card>\n    </PageLayoutFullHeightItem>\n  </>\n)\n","import React from 'react'\n\nimport { WareCategoryTypeEnum } from '../../../graph/types'\n\ninterface IProps {\n  type: WareCategoryTypeEnum\n  isMain?: boolean\n  isSideDish?: boolean\n  isCover?: boolean\n  children: ReactNode | ReactNode[]\n}\n\nexport const IsCategoryType: React.SFC<IProps> = ({\n  type,\n  isMain,\n  isSideDish,\n  isCover,\n  children,\n}) => {\n  if (\n    (isMain === true && type === WareCategoryTypeEnum.MAIN) ||\n    (isSideDish === true && type === WareCategoryTypeEnum.SIDE_DISH) ||\n    (isCover === true && type === WareCategoryTypeEnum.COVER)\n  ) {\n    return <>{children}</>\n  }\n  return null\n}\n","import React from 'react'\n\nimport {\n  GMenuCategoryListItem,\n  WareCategoryTypeEnum,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\nimport { QueryCategoryList } from './CategoryList.graphql'\n\ninterface IProps {\n  categoryType: WareCategoryTypeEnum\n  onAdd(recipe: TCategory): void\n  addButtonText: string\n  currentCategories: TCategory[]\n}\n\ntype TCategory = GMenuCategoryListItem.Fragment\n\nexport const CategorySuggestionPanel: React.SFC<IProps> = ({\n  categoryType,\n  currentCategories,\n  addButtonText,\n  onAdd,\n}) => (\n  <WithSettings\n    observe={true}\n    render={settings => (\n      <QueryCategoryList\n        {...settings.getQueryProps({ categoryType })}\n        fetchPolicy=\"cache-and-network\"\n        render={({ wareCategories }) => (\n          <MenuSuggestionPanel<TCategory>\n            onAdd={onAdd}\n            options={RM.without(currentCategories, wareCategories)}\n            addButtonText={addButtonText}\n          />\n        )}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { Field, FieldType, IFieldApi } from 'react-form'\n\nimport { DataTableEmptyText } from '../../../atoms/DataTable'\nimport {\n  GMenuCategoryListItem,\n  WareCategoryTypeEnum,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { CategoryListTable } from '../molecules/CategoryListTable'\nimport { CategorySuggestionPanel } from './CategorySuggestionPanel'\n\ninterface IProps {\n  categoryType: WareCategoryTypeEnum\n  addButtonText: string\n  noRowsText: string\n  field: FieldType\n}\n\nexport const RecipeCategoryView: React.SFC<IProps> = ({\n  categoryType,\n  addButtonText,\n  noRowsText,\n  field,\n}) => (\n  <Field field={field}>\n    {(fieldApi: IFieldApi<GMenuCategoryListItem.Fragment[]>) => (\n      <>\n        <CategoryListTable\n          categories={fieldApi.value}\n          showRemoveColumn={true}\n          showEditColumn={false}\n          showHeader={false}\n          onRemove={categoryId =>\n            fieldApi.setValue(\n              RM.reject(RM.propEq('id', categoryId), fieldApi.value),\n            )\n          }\n          noRowsDisplay={<DataTableEmptyText text={noRowsText} />}\n        />\n        <CategorySuggestionPanel\n          addButtonText={addButtonText}\n          categoryType={categoryType}\n          currentCategories={fieldApi.value}\n          onAdd={addedCategory =>\n            fieldApi.setValue(fieldApi.value.concat(addedCategory))\n          }\n        />\n      </>\n    )}\n  </Field>\n)\n","import React from 'react'\n\nimport {\n  FormInputTextBox,\n  TFormInputTextBoxProps,\n} from '../../../atoms/FormInputTextBox'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\n\ninterface IProps extends Partial<TFormInputTextBoxProps> {\n  icon?: string\n  isRequired?: boolean\n}\n\nexport const FormInputCode: React.SFC<IProps> = ({\n  field = 'code',\n  icon = 'label_outline',\n  isRequired = true,\n  ...props\n}) => (\n  <IconLine label={i18n.t`Code`.toLocaleLowerCase()} labelWidth={7}>\n    <FormInputTextBox\n      field={field}\n      width={9}\n      isRequired={true}\n      validatioName={i18n.t`Code`}\n      {...props}\n    />\n  </IconLine>\n)\n","import React from 'react'\n\nimport {\n  FormInputTextBox,\n  TFormInputTextBoxProps,\n} from '../../../atoms/FormInputTextBox'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\n\ninterface IProps extends Partial<TFormInputTextBoxProps> {\n  icon?: string\n}\n\nexport const FormInputDescription: React.SFC<IProps> = ({\n  field = 'descriptionLabel',\n  icon = 'label_outline',\n  ...props\n}) => (\n  <IconLine label={i18n.t`Public note`.toLocaleLowerCase()} labelWidth={7}>\n    <FormInputTextBox field={field} inputWidth={22} {...props} />\n  </IconLine>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GAllergens } from '../../../graph/types'\nimport { AllergenFragment } from '../graph/AllergenFragment.graphql'\n\nexport const AllergensQuery = gql`\n  query GAllergens {\n    allergens {\n      ...GAllergen\n    }\n  }\n  ${AllergenFragment}\n`\n\nexport const QueryAllergens = buildQuery<\n  GAllergens.Query,\n  GAllergens.Variables\n>(AllergensQuery)\n","import React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { AllergenEnum } from '../../../graph/types'\nimport { Colors } from '../../../styling'\nimport { QueryAllergens } from '../molecules/FormInputAllergens.graphql'\n\ninterface IProps {\n  selected: AllergenEnum[]\n  onToggle?(allergen: AllergenEnum): void\n}\n\nconst AllergenBox = styled.div`\n  float: left;\n  width: 2rem;\n  height: 2rem;\n  border: 1px solid ${Colors.greyMiddle};\n  margin: 0.3rem 0.6rem 0.3rem 0;\n  font-size: 1.5rem;\n  text-align: center;\n  vertical-align: center;\n  cursor: default;\n  ${({ active }: { active: boolean }) => css`\n    color: ${active ? Colors.black : Colors.greyMiddle};\n    background-color: ${active ? Colors.yellow : Colors.white};\n  `};\n`\n\nexport const MenuAllergenIndicator: React.SFC<IProps> = ({\n  selected,\n  onToggle,\n}) => (\n  <QueryAllergens\n    render={({ allergens }) => (\n      <>\n        {allergens.map(allergen => {\n          const props = {\n            active: selected.includes(allergen.enum),\n            onClick: onToggle && (() => onToggle(allergen.enum)),\n          }\n          return (\n            <AllergenBox key={allergen.enum} title={allergen.code} {...props}>\n              {allergen.category}\n            </AllergenBox>\n          )\n        })}\n      </>\n    )}\n  />\n)\n","import React from 'react'\nimport { Field, IFieldApi } from 'react-form'\n\nimport { RM } from '../../../helpers/ramda'\nimport { MenuAllergenIndicator } from '../atoms/AllergenIndicator'\nimport { TIngredient } from '../menutypes'\n\nconst extractAllergens = RM.pipe(\n  RM.map(RM.prop('allergens')),\n  RM.flatten,\n  RM.uniq,\n)\n\nexport const RecipeAllergenDisplay: React.SFC = () => (\n  <Field field=\"ingredients\">\n    {({ value }: IFieldApi<TIngredient[]>) => {\n      const allergens = extractAllergens(value)\n      // @ts-ignore Something wrong with Ramda typings\n      return <MenuAllergenIndicator selected={allergens} />\n    }}\n  </Field>\n)\n","import React from 'react'\n\nimport { FormColumn, FormContainer } from '../../../atoms/FormContainer'\nimport { FormInputCheckbox } from '../../../atoms/FormInputCheckbox'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { WareCategoryTypeEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport { IsCategoryType } from '../atoms/IsCategoryType'\nimport { TRecipeType } from '../menutypes'\nimport { FormDeleteButton } from '../molecules/FormDeleteButton'\nimport { FormInputCode } from '../molecules/FormInputCode'\nimport { FormInputDescription } from '../molecules/FormInputDescription'\nimport { FormInputInternalNote } from '../molecules/FormInputInternalNote'\nimport { FormInputName } from '../molecules/FormInputName'\nimport { RecipeAllergenDisplay } from '../molecules/RecipeAllergenDisplay'\n\ninterface IProps {\n  recipeType: TRecipeType\n}\n\nexport const RecipeFormBasic: React.SFC<IProps> = ({ recipeType }) => {\n  const isMain = recipeType === WareCategoryTypeEnum.MAIN\n  return (\n    <FormContainer>\n      <FormColumn>\n        <FormInputName placeholder={i18n.t`Recipe name`} />\n        <FormInputCode placeholder={i18n.t`Recipe code`} />\n        <FormInputInternalNote placeholder={i18n.t`Recipe internal note`} />\n        {isMain && (\n          <FormInputDescription\n            placeholder={i18n.t`Public note for customers, allergens`}\n          />\n        )}\n        <IsCategoryType type={recipeType} isMain={true}>\n          <IconLine labelWidth={7} icon=\"error_outline\">\n            {i18n.t`Allergens based on stock cards`}\n            <br />\n            <RecipeAllergenDisplay />\n          </IconLine>\n        </IsCategoryType>\n        <IconLine labelWidth={7}>\n          <FormInputCheckbox\n            field=\"visible\"\n            label={i18n.t`To show this recipe`}\n          />\n        </IconLine>\n      </FormColumn>\n      <FormColumn>\n        <WithSettings\n          render={({ menu }) => (\n            <FormDeleteButton\n              confirmText={i18n.t`Remove this recipe?`}\n              onDelete={id => menu.recipe.deleteRecipe(id)}\n            />\n          )}\n        />\n      </FormColumn>\n    </FormContainer>\n  )\n}\n","import React from 'react'\n\nimport { GMenuRecipeForm, WarePriceTypeEnum } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { MenuBaseFormLoader } from '../atoms/MenuBaseFormLoader'\nimport { useMenu } from '../hooks/useMenu'\nimport { TRecipeFormValues, TRecipeType } from '../menutypes'\nimport { MenuRecipeFormQuery } from './RecipeForm.graphql'\n\ninterface IProps {\n  recipeId: Maybe<ID>\n  recipeType: TRecipeType\n}\n\nexport const RecipeFormLoader: React.SFC<IProps> = ({\n  recipeId,\n  recipeType,\n  children,\n}) => {\n  const menu = useMenu()\n  return (\n    <MenuBaseFormLoader<TRecipeFormValues>\n      isCreate={recipeId === null}\n      onCreate={values => menu.recipe.createRecipe(values, recipeType)}\n      onUpdate={values => menu.recipe.updateRecipe(values)}\n      getDefaultValues={() => getDefaults(recipeType)}\n      loadDefaults={async () => {\n        const defaultVats = await menu.recipe.getDefaultVat()\n        const defaults = { ...getDefaults(recipeType) }\n        defaults.prices = getPriceMap(priceType => ({\n          value: 0,\n          vatId: defaultVats[priceType],\n        }))\n        return defaults\n      }}\n      loadValues={async () => {\n        const { data } = await menu.client.query<GMenuRecipeForm.Query>({\n          query: MenuRecipeFormQuery,\n          variables: { recipeId },\n          fetchPolicy: 'no-cache',\n        })\n        return normalizeValues(data.recipe)\n      }}\n    >\n      {children}\n    </MenuBaseFormLoader>\n  )\n}\n\nfunction getPriceMap<T>(acc: (priceType: WarePriceTypeEnum) => T) {\n  return [WarePriceTypeEnum.DELIVERY, WarePriceTypeEnum.INHOUSE].reduce(\n    (result, priceType) => {\n      result[priceType] = acc(priceType)\n      return result\n    },\n    {},\n  ) as { [priceType in WarePriceTypeEnum]: T }\n}\n\nfunction getDefaults(recipeType: TRecipeType): TRecipeFormValues {\n  return {\n    id: 'NEW',\n    code: '',\n    nameLabel: '',\n    internalNote: '',\n    descriptionLabel: '',\n    visible: true,\n    recipeType: {\n      enum: recipeType,\n    },\n    sourcePrices: [],\n    prices: getPriceMap(() => ({\n      value: 0,\n      vatId: null,\n    })),\n    sourceAssociatedRecipes: [],\n    associatedRecipes: [],\n    sourceIngredients: [],\n    ingredients: [],\n    sideDishes: [],\n    categories: [],\n  }\n}\n\nfunction normalizeValues(\n  recipeSource: GMenuRecipeForm.Recipe,\n): TRecipeFormValues {\n  return {\n    ...recipeSource,\n    associatedRecipes: recipeSource.sourceAssociatedRecipes.map(\n      ({ priceType, recipe }) => ({\n        warePriceType: priceType.enum,\n        nameLabel: recipe.nameLabel,\n        associatedRecipe: recipe.id,\n        formattedPrice: '?',\n      }),\n    ),\n    ingredients: recipeSource.sourceIngredients.map(\n      ({ quantity, stockItem: { id, label, allergens, wareUnit } }) => ({\n        stockItem: id,\n        label,\n        quantity,\n        unitLabel: wareUnit.code,\n        allergens: allergens.map(RM.prop('enum')),\n      }),\n    ),\n    prices: getPriceMap(priceType => {\n      const sourcePrice = recipeSource.sourcePrices.find(\n        RM.pathEq(['priceType', 'enum'], priceType),\n      )\n      if (!sourcePrice) {\n        return {\n          value: 0,\n          vatId: null,\n        }\n      }\n      return {\n        value: sourcePrice.price.value,\n        vatId: sourcePrice.vat.id,\n      }\n    }),\n  }\n}\n","import React from 'react'\nimport { isDecimal, isEmpty } from 'validator'\n\nimport {\n  FormInputTextBox,\n  TFormInputTextBoxProps,\n} from '../../../atoms/FormInputTextBox'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\n\ninterface IProps extends Partial<TFormInputTextBoxProps> {\n  icon?: string\n}\n\nconst formInputPriceValidate = (value: string) => {\n  if (value === undefined || isEmpty(value + '') || !isDecimal(value + '')) {\n    return i18n.t`Price must be a number`\n  }\n  return null\n}\n\nexport const FormInputPrice: React.SFC<IProps> = ({\n  field = 'price.value',\n  icon = 'toll',\n  ...props\n}) => (\n  <IconLine icon={icon}>\n    <FormInputTextBox\n      field={field}\n      inputWidth={5}\n      validate={formInputPriceValidate}\n      {...props}\n    />\n    Kč\n  </IconLine>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GVats } from '../../../graph/types'\n\nexport const VatsQuery = gql`\n  query GVats($branchId: ID!) {\n    vats(companyBranch: $branchId) {\n      id\n      vat\n    }\n  }\n`\n\nexport const QueryVat = buildQuery<GVats.Query, GVats.Variables>(VatsQuery)\n","import { css } from 'emotion'\nimport React from 'react'\nimport { FieldType } from 'react-form'\n\nimport { FormInputFlatSelect } from '../../../atoms/FormInputFlatSelect'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { i18n } from '../../../i18n'\nimport { QueryVat } from './FormInputVatSelect.graphql'\n\ninterface IProps {\n  field?: FieldType\n}\n\nconst container = css`\n  margin-left: 5rem;\n`\n\nexport const FormInputVatSelect: React.SFC<IProps> = ({\n  field = 'price.vat',\n}) => (\n  <WithRoot\n    render={({ settings }) => (\n      <QueryVat\n        {...settings.queryProps}\n        renderLoading={false}\n        render={({ vats }) => (\n          <IconLine className={container} label={`${i18n.t`VAT`}:`}>\n            {vats && (\n              <FormInputFlatSelect\n                field={field}\n                items={vats}\n                formatItem={({ vat }) => `${vat}%`}\n                isRequired={true}\n                validationName={i18n.t`VAT`}\n              />\n            )}\n          </IconLine>\n        )}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { NestedField } from 'react-form'\n\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { Headline } from '../../../atoms/Headline'\nimport { TPriceType } from '../menutypes'\nimport { FormInputPrice } from './FormInputPrice'\nimport { FormInputVatSelect } from './FormInputVatSelect'\n\ninterface IProps {\n  priceType: TPriceType\n  label: string\n}\n\nexport const FormPricingField: React.SFC<IProps> = ({ priceType, label }) => (\n  <>\n    <Headline>{label}</Headline>\n    <NestedField field={['prices', priceType]}>\n      <FlexRowSingle justify=\"flex-start\">\n        <FormInputPrice field=\"value\" />\n        <FormInputVatSelect field=\"vatId\" />\n      </FlexRowSingle>\n    </NestedField>\n  </>\n)\n","import React from 'react'\n\nimport {\n  Column,\n  ColumnRendererWithNote,\n  DataTable,\n} from '../../../atoms/DataTable'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonRemove } from '../../../molecules/TouchButtonRemove'\nimport { TAssocRecipe } from '../menutypes'\n\ninterface IProps {\n  recipes: TAssocRecipe[]\n  onRemove(recipeId: ID): void\n}\n\nexport const RecipeAssocListTable: React.SFC<IProps> = ({\n  recipes,\n  onRemove,\n}) => (\n  <DataTable items={recipes} disableHeader={true}>\n    <Column\n      dataKey=\"associatedRecipe\"\n      width={60}\n      cellRenderer={({ cellData }) => (\n        <TouchButtonRemove onClick={() => onRemove(cellData)} />\n      )}\n    />\n    <Column\n      dataKey=\"nameLabel\"\n      width={300}\n      label={i18n.t`Name`}\n      cellRenderer={ColumnRendererWithNote}\n      columnData={{ noteKey: 'internalNote' }}\n    />\n    <Column dataKey=\"formattedPrice\" width={100} label={i18n.t`Price`} />\n  </DataTable>\n)\n","import React from 'react'\nimport { Field, IFieldApi } from 'react-form'\n\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { GMenuAssocRecipe } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\nimport { TAssocRecipe, TPriceType } from '../menutypes'\nimport { RecipeAssocListTable } from '../molecules/RecipeAssocListTable'\nimport { QueryMenuRecipeFormAssoc } from './RecipeForm.graphql'\n\ninterface IProps {\n  recipeId: MaybeID\n  priceType: TPriceType\n}\n\nexport const RecipeAssociatedView: React.SFC<IProps> = ({\n  priceType,\n  recipeId,\n}) => (\n  <Field field=\"associatedRecipes\">\n    {(fieldApi: IFieldApi<TAssocRecipe[]>) => {\n      const priceTypeRecipes = RM.filter(\n        RM.propEq('warePriceType', priceType),\n        fieldApi.value,\n      )\n      const isAssociated = (id: ID) =>\n        priceTypeRecipes.some(RM.propEq('associatedRecipe', id))\n\n      const rejectSuggestions = RM.reject(\n        (recipe: GMenuAssocRecipe.Fragment) =>\n          recipe.id === recipeId || isAssociated(recipe.id),\n      )\n      const onAddRecipe = (addedRecipe: GMenuAssocRecipe.Fragment) => {\n        fieldApi.setValue(\n          fieldApi.value.concat({\n            warePriceType: priceType,\n            associatedRecipe: addedRecipe.id,\n            nameLabel: addedRecipe.nameLabel,\n            formattedPrice: '?',\n          }),\n        )\n      }\n      const onRemoveRecipe = (id: ID) => {\n        fieldApi.setValue(\n          RM.reject(\n            ({ associatedRecipe, warePriceType }) =>\n              associatedRecipe === id && warePriceType === priceType,\n            fieldApi.value,\n          ),\n        )\n      }\n\n      return (\n        <>\n          <RecipeAssocListTable\n            recipes={priceTypeRecipes}\n            onRemove={onRemoveRecipe}\n          />\n          <WithSettings\n            render={settings => (\n              <QueryMenuRecipeFormAssoc\n                {...settings.queryProps}\n                render={({ recipes }) => (\n                  <MenuSuggestionPanel\n                    options={rejectSuggestions(recipes)}\n                    onAdd={onAddRecipe}\n                    // labelKey=\"nameLabel\"\n                  />\n                )}\n              />\n            )}\n          />\n          <VerticalGap />\n        </>\n      )\n    }}\n  </Field>\n)\n","import { i18nMark } from '@lingui/react'\nimport React, { Fragment } from 'react'\n\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { WarePriceTypeEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { TRecipeType } from '../menutypes'\nimport { FormPricingField } from '../molecules/FormPricingField'\nimport { RecipeAssociatedView } from './RecipeAssociatedView'\n\ninterface IProps {\n  recipeId: MaybeID\n  recipeType: TRecipeType\n}\n\nexport const priceTypes = [\n  {\n    priceType: WarePriceTypeEnum.DELIVERY,\n    label: i18nMark('Delivery sale'),\n  },\n  {\n    priceType: WarePriceTypeEnum.INHOUSE,\n    label: i18nMark('Local sale'),\n  },\n]\n\nexport const RecipeFormPricing: React.SFC<IProps> = ({\n  recipeType,\n  recipeId,\n}) => (\n  <>\n    {priceTypes.map(({ priceType, label }) => (\n      <Fragment key={priceType}>\n        <FormPricingField priceType={priceType} label={i18n._(label)} />\n        <VerticalGap />\n        {recipeType === TRecipeType.MAIN && (\n          <RecipeAssociatedView priceType={priceType} recipeId={recipeId} />\n        )}\n      </Fragment>\n    ))}\n  </>\n)\n","import React from 'react'\nimport validator from 'validator'\n\nimport {\n  Column,\n  ColumnRendererRemove,\n  DataTable,\n  DataTableEmptyText,\n} from '../../../atoms/DataTable'\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { i18n } from '../../../i18n'\nimport { TIngredient } from '../menutypes'\n\ninterface IProps {\n  ingredients: TIngredient[]\n  onRemove?(stockItemId: ID): void\n  isLoading?: boolean\n}\n\nexport const RecipeIngredientsTable: React.SFC<IProps> = ({\n  ingredients,\n  onRemove,\n  isLoading = false,\n}) => (\n  <DataTable\n    isLoading={isLoading}\n    items={ingredients}\n    disableHeader={true}\n    noRowsRenderer={() => (\n      <DataTableEmptyText text={i18n.t`Recipe has no ingredients`} />\n    )}\n  >\n    <Column\n      dataKey=\"stockItem\"\n      width={60}\n      cellRenderer={ColumnRendererRemove}\n      columnData={{ onRemove }}\n    />\n    <Column dataKey=\"label\" width={300} label={i18n.t`Name`} />\n    <Column\n      dataKey=\"quantity\"\n      width={60}\n      label={i18n.t`Quantity`}\n      cellRenderer={({ rowIndex }) => (\n        <FormInputTextBox\n          field={['ingredients', rowIndex, 'quantity']}\n          validate={validateQuantity}\n          width=\"40px\"\n        />\n      )}\n    />\n    <Column dataKey=\"unitLabel\" width={100} label={i18n.t`Ware unit`} />\n  </DataTable>\n)\n\nfunction validateQuantity(value: string) {\n  const fieldName = i18n.t`Quantity`\n  if (validator.isEmpty(value + '')) {\n    return i18n.t`${fieldName} must be entered`\n  }\n  if (!validator.isFloat(value + '', { min: 0 })) {\n    return i18n.t`${fieldName} must be a positive number`\n  }\n  return null\n}\n","import React from 'react'\nimport { Field, IFieldApi } from 'react-form'\n\nimport { GMenuStockItem } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\nimport { TIngredient } from '../menutypes'\nimport { RecipeIngredientsTable } from '../molecules/RecipeIngredientsTable'\nimport { QueryMenuStockList } from './StockList.graphql'\n\ninterface IProps {}\n\nconst unselectedStockOnly = RM.differenceWith(\n  ({ id }, { stockItem }) => id === stockItem,\n)\n\nexport const RecipeIngredientsView: React.SFC<IProps> = () => (\n  <WithSettings\n    observe={false}\n    render={settings => (\n      <Field field=\"ingredients\">\n        {(fieldApi: IFieldApi<TIngredient[]>) => (\n          <>\n            <RecipeIngredientsTable\n              ingredients={fieldApi.value}\n              onRemove={stockItem => {\n                fieldApi.setValue(\n                  RM.reject(RM.propEq('stockItem', stockItem), fieldApi.value),\n                )\n              }}\n            />\n            <QueryMenuStockList\n              {...settings.queryProps}\n              render={({ stockItems }) => (\n                <MenuSuggestionPanel\n                  addButtonText={i18n.t`Add ingredient`}\n                  options={unselectedStockOnly(stockItems, fieldApi.value)}\n                  onAdd={(addedStockItem: GMenuStockItem.Fragment) => {\n                    fieldApi.setValue([\n                      ...fieldApi.value,\n                      {\n                        stockItem: addedStockItem.id,\n                        label: addedStockItem.nameLabel,\n                        quantity: 1,\n                        unitLabel: addedStockItem.wareUnit.code,\n                        allergens: addedStockItem.allergens.map(\n                          RM.prop('enum'),\n                        ),\n                      },\n                    ])\n                  }}\n                />\n              )}\n            />\n          </>\n        )}\n      </Field>\n    )}\n  />\n)\n","import { i18nMark, Trans } from '@lingui/react'\nimport React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { NoteText } from '../../../atoms/DataTable'\nimport { Headline } from '../../../atoms/Headline'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { WareCategoryTypeEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { TopRightButtonContainer } from '../../../molecules/TopRightButtonContainer'\nimport { IsCategoryType } from '../atoms/IsCategoryType'\nimport { SubmitButton } from '../molecules/SubmitButton'\nimport { RecipeCategoryView } from '../organisms/RecipeCategoryView'\nimport { RecipeFormBasic } from '../organisms/RecipeFormBasic'\nimport { RecipeFormLoader } from '../organisms/RecipeFormLoader'\nimport { RecipeFormPricing } from '../organisms/RecipeFormPricing'\nimport { RecipeIngredientsView } from '../organisms/RecipeIngredientsView'\n\ninterface IProps {\n  recipeId: Maybe<ID>\n  recipeType: WareCategoryTypeEnum\n}\n\nconst titleByType = {\n  [WareCategoryTypeEnum.MAIN]: i18nMark('Ware recipe'),\n  [WareCategoryTypeEnum.SIDE_DISH]: i18nMark('Sidedish recipe'),\n  [WareCategoryTypeEnum.COVER]: i18nMark('Cover recipe'),\n}\n\nexport const MenuRecipePage: React.SFC<IProps> = ({ recipeId, recipeType }) => (\n  <FullPageLayout\n    width={15}\n    pageTitle={i18n._(titleByType[recipeType])}\n    hideLogoutWidget={true}\n    useBackButton={true}\n  >\n    <RecipeFormLoader recipeId={recipeId} recipeType={recipeType}>\n      <TopRightButtonContainer>\n        <CanMutate\n          mutationName={recipeId === null ? 'createRecipe' : 'updateRecipe'}\n        >\n          <SubmitButton isCreate={recipeId === null} />\n        </CanMutate>\n      </TopRightButtonContainer>\n      <Card>\n        <RecipeFormBasic recipeType={recipeType} />\n      </Card>\n      <Card>\n        <RecipeFormPricing recipeType={recipeType} recipeId={recipeId} />\n      </Card>\n      <IsCategoryType type={recipeType} isMain={true}>\n        <Card>\n          <Headline>\n            <Trans>Recipe ingredients</Trans>\n          </Headline>\n          <VerticalGap />\n          <RecipeIngredientsView />\n        </Card>\n        <Card>\n          <Headline>\n            <Trans>Sidedish categories</Trans>\n          </Headline>\n          <NoteText>\n            <Trans>These sidedish are presented with recipe</Trans>\n          </NoteText>\n          <RecipeCategoryView\n            categoryType={WareCategoryTypeEnum.SIDE_DISH}\n            field=\"sideDishes\"\n            addButtonText={i18n.t`Attach sidedish category`}\n            noRowsText={i18n.t`Recipe has no sidedish category attached`}\n          />\n        </Card>\n        <Card>\n          <Headline>\n            <Trans>Category assignments</Trans>\n          </Headline>\n          <NoteText>\n            <Trans>Recipe is in these categories</Trans>\n          </NoteText>\n          <RecipeCategoryView\n            categoryType={WareCategoryTypeEnum.MAIN}\n            field=\"categories\"\n            addButtonText={i18n.t`Add to category`}\n            noRowsText={i18n.t`Recipe is not in any category`}\n          />\n        </Card>\n      </IsCategoryType>\n    </RecipeFormLoader>\n  </FullPageLayout>\n)\n","import { Trans } from '@lingui/react'\nimport numeral from 'numeral'\nimport React from 'react'\n\nimport { GWareUnit } from '../../../graph/types'\nimport { TouchButton } from '../../../molecules/TouchButton'\n\ninterface IProps {\n  cardName: string\n  wareUnit: Maybe<GWareUnit.Fragment>\n  quantity: number\n  onConfirm(): void\n}\n\nexport const StockDepositConfirmButton: React.SFC<IProps> = ({\n  wareUnit,\n  quantity,\n  onConfirm,\n}) => (\n  <TouchButton disabled={wareUnit === null} onClick={onConfirm}>\n    {wareUnit ? (\n      <Trans>{`Add ${numeral(quantity).format('0,0.[00]')} ${\n        wareUnit.code\n      }`}</Trans>\n    ) : (\n      <Trans>No stock card selected</Trans>\n    )}\n  </TouchButton>\n)\n","import React from 'react'\n\nimport { FormInputStyled } from '../../../atoms/FormInputTextBox'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {\n  value: string\n  onFilter(value: string): void\n  onConfirm(): void\n}\n\nexport const StockDepositFilterInput = React.forwardRef<\n  HTMLInputElement,\n  IProps\n>(({ value, onFilter, onConfirm }, ref) => (\n  <IconLine label={i18n.t`Stock card`} labelWidth={7}>\n    <FormInputStyled\n      // @ts-ignore https://github.com/DefinitelyTyped/DefinitelyTyped/issues/28884\n      ref={ref}\n      autoFocus={true}\n      placeholder={`${i18n.t`Code`.toLocaleLowerCase()} / ${i18n.t`PLU`} / ${i18n.t`Title`.toLocaleLowerCase()}`}\n      value={value}\n      onChange={ev => {\n        onFilter(ev.target.value)\n      }}\n      onKeyPressCapture={ev => {\n        if (ev.key === 'Enter') {\n          ev.preventDefault()\n          onConfirm()\n        }\n      }}\n    />\n  </IconLine>\n))\n","import numeral from 'numeral'\nimport React from 'react'\n\nimport { FormInputStyled } from '../../../atoms/FormInputTextBox'\n\ninterface IProps {\n  enabled: boolean\n  onChange(quantity: number): void\n  onConfirm(): void\n}\n\nexport const StockDepositQuantityInput = React.forwardRef<\n  HTMLInputElement,\n  IProps\n>(({ enabled, onChange, onConfirm }, ref) => (\n  <FormInputStyled\n    // @ts-ignore https://github.com/DefinitelyTyped/DefinitelyTyped/issues/28884\n    ref={ref}\n    disabled={!enabled}\n    onChange={ev => {\n      const value = numeral(ev.target.value).value()\n      onChange(value)\n    }}\n    onKeyPressCapture={ev => {\n      if (ev.key === 'Enter') {\n        ev.preventDefault()\n        onConfirm()\n      }\n    }}\n  />\n))\n","import React from 'react'\nimport { TableCellProps } from 'react-virtualized'\nimport styled from 'styled-components'\n\nimport { Column, DataTable } from '../../../atoms/DataTable'\nimport { DataTableContainer } from '../../../atoms/DataTableContainer'\nimport { GMenuStockDeposit } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\n\ninterface IProps {\n  searchValue: string\n  stockItems: GMenuStockDeposit.StockItems[]\n  onSelect(stockItem: GMenuStockDeposit.StockItems): void\n}\n\nexport const StockDepositResultTable: React.SFC<IProps> = ({\n  stockItems,\n  searchValue,\n  onSelect,\n}) => (\n  <DataTableContainer>\n    <DataTable items={stockItems} heightStretch={false}>\n      <Column\n        dataKey=\"id\"\n        width={60}\n        cellRenderer={ColumnRendererSelect}\n        columnData={{ onSelect }}\n      />\n      <Column\n        dataKey=\"quantity\"\n        width={100}\n        label={i18n.t`Card stock`}\n        cellRenderer={stockWithUnit}\n      />\n      <Column\n        dataKey=\"code\"\n        width={100}\n        label={i18n.t`Card code`}\n        cellRenderer={highlightMatch(searchValue)}\n      />\n      <Column\n        dataKey=\"nameLabel\"\n        width={300}\n        label={i18n.t`Card name`}\n        cellRenderer={highlightMatch(searchValue)}\n      />\n      <Column dataKey=\"note\" width={300} label={i18n.t`Card note`} />\n    </DataTable>\n  </DataTableContainer>\n)\n\nfunction ColumnRendererSelect({\n  rowData,\n  columnData: { onSelect },\n}: TableCellProps) {\n  return (\n    <TouchButton\n      iconName=\"done\"\n      width={Spacing.ButtonHeight}\n      height={Spacing.ButtonHeight}\n      onClick={() => onSelect(rowData)}\n    />\n  )\n}\n\nconst HighlightedValue = styled.span`\n  background-color: ${Colors.yellow};\n`\n\nfunction highlightMatch(searchValue: string) {\n  return ({ cellData }: TableCellProps) => {\n    const index = cellData\n      .toLocaleLowerCase()\n      .indexOf(searchValue.toLocaleLowerCase())\n    if (index === -1) {\n      return cellData\n    }\n    const begin = cellData.substring(0, index)\n    const match = cellData.substring(index, index + searchValue.length)\n    const end = cellData.substring(index + searchValue.length)\n    return (\n      <>\n        {begin}\n        <HighlightedValue>{match}</HighlightedValue>\n        {end}\n      </>\n    )\n  }\n}\n\nfunction stockWithUnit({ cellData, rowData }: TableCellProps) {\n  return `${cellData} ${rowData.wareUnit.code}`\n}\n","import { Trans } from '@lingui/react'\nimport React from 'react'\n\nimport { FormColumn, FormContainer } from '../../../atoms/FormContainer'\nimport { Headline } from '../../../atoms/Headline'\nimport { isPartialMatch } from '../../../helpers/filter'\nimport { RM } from '../../../helpers/ramda'\nimport { StockDepositConfirmButton } from '../molecules/StockDepositConfirmButton'\nimport { StockDepositFilterInput } from '../molecules/StockDepositFilterInput'\nimport { StockDepositQuantityInput } from '../molecules/StockDepositQuantityInput'\nimport { StockDepositResultTable } from '../molecules/StockDepositResultTable'\nimport { TStockItem } from './StockDepositLoader'\n\ninterface IProps {\n  stockItems: TStockItem[]\n  onDeposit(stockItem: TStockItem, quantity: number): void\n}\n\ninterface IState {\n  targetStockItem: Maybe<TStockItem>\n  filteredStockItems: TStockItem[]\n  searchValue: string\n  inputQuantity: number\n}\n\nexport class StockDepositControl extends React.Component<IProps, IState> {\n  state: IState = {\n    targetStockItem: null,\n    filteredStockItems: [],\n    searchValue: '',\n    inputQuantity: 0,\n  }\n  filterInputRef = React.createRef<HTMLInputElement>()\n  quantityInputRef = React.createRef<HTMLInputElement>()\n  onFilter = (searchValue: string) => {\n    if (searchValue.trim() === '') {\n      this.setState({\n        filteredStockItems: [],\n        searchValue: '',\n        targetStockItem: null,\n      })\n      return\n    }\n    const partialMatch = isPartialMatch(searchValue)\n    const filteredStockItems = this.props.stockItems.filter(\n      RM.cond([\n        [RM.propEq('plu', searchValue), RM.T],\n        [RM.propSatisfies(partialMatch, 'code'), RM.T],\n        [RM.propSatisfies(partialMatch, 'nameLabel'), RM.T],\n      ]),\n    )\n    let targetStockItem: Maybe<TStockItem> = null\n    if (filteredStockItems.length === 1) {\n      targetStockItem = RM.head(filteredStockItems)!\n    }\n    this.setState({\n      filteredStockItems,\n      searchValue: searchValue,\n      targetStockItem,\n    })\n  }\n  onConfirmFilter = () => {\n    if (this.state.filteredStockItems.length === 1) {\n      this.quantityInputRef.current!.focus()\n    }\n  }\n  onQuantity = (quantity: number) => {\n    this.setState({ inputQuantity: quantity })\n  }\n  onSelectStockItem = (stockItem: TStockItem) => {\n    this.setState(\n      {\n        targetStockItem: stockItem,\n        filteredStockItems: [stockItem],\n      },\n      () => {\n        this.quantityInputRef.current!.focus()\n      },\n    )\n  }\n  onConfirm = () => {\n    const { targetStockItem, inputQuantity } = this.state\n    if (targetStockItem && inputQuantity !== 0) {\n      this.props.onDeposit(targetStockItem, inputQuantity)\n    }\n    this.setState(\n      { targetStockItem: null, searchValue: '', inputQuantity: 0 },\n      () => {\n        this.quantityInputRef.current!.value = ''\n        this.filterInputRef.current!.focus()\n      },\n    )\n  }\n  render() {\n    const {\n      searchValue,\n      filteredStockItems,\n      targetStockItem,\n      inputQuantity,\n    } = this.state\n    const hasSearchValue = searchValue.trim() !== ''\n    const isNoneFind = filteredStockItems.length === 0\n    const isMultiFind = filteredStockItems.length > 1\n    return (\n      <>\n        <FormContainer>\n          <FormColumn>\n            <StockDepositFilterInput\n              onFilter={this.onFilter}\n              onConfirm={this.onConfirmFilter}\n              value={searchValue}\n              ref={this.filterInputRef}\n            />\n          </FormColumn>\n          <FormColumn>\n            <StockDepositQuantityInput\n              enabled={targetStockItem !== null}\n              onChange={this.onQuantity}\n              onConfirm={this.onConfirm}\n              ref={this.quantityInputRef}\n            />\n          </FormColumn>\n          <FormColumn>\n            <StockDepositConfirmButton\n              cardName={targetStockItem ? targetStockItem.nameLabel : ''}\n              quantity={inputQuantity}\n              wareUnit={targetStockItem ? targetStockItem.wareUnit : null}\n              onConfirm={this.onConfirm}\n            />\n          </FormColumn>\n        </FormContainer>\n        <Headline>\n          {hasSearchValue &&\n            isMultiFind && (\n              <Trans>\n                Continue typing to find single stock card or select one from the\n                list\n              </Trans>\n            )}\n          {hasSearchValue &&\n            isNoneFind && (\n              <Trans>No stock card found from entered search value</Trans>\n            )}\n          {hasSearchValue &&\n            targetStockItem && (\n              <Trans>\n                Stock card <b>{targetStockItem.nameLabel}</b> is selected\n              </Trans>\n            )}\n        </Headline>\n        {hasSearchValue && (\n          <StockDepositResultTable\n            searchValue={searchValue}\n            stockItems={filteredStockItems}\n            onSelect={this.onSelectStockItem}\n          />\n        )}\n      </>\n    )\n  }\n}\n","import gql from 'graphql-tag'\n\nimport { buildMutation } from '../../../graph/buildMutation'\nimport { buildQuery } from '../../../graph/buildQuery'\nimport {\n  GChangeMenuStockQuantity,\n  GMenuStockDeposit,\n} from '../../../graph/types'\nimport { WareUnitFragment } from '../graph/WareUnitFragment.graphql'\n\nconst MenuStockDepositQuery = gql`\n  query GMenuStockDeposit($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      id\n      code\n      plu\n      nameLabel: label\n      note\n      quantity\n      wareUnit {\n        ...GWareUnit\n      }\n    }\n  }\n  ${WareUnitFragment}\n`\n\nconst ChangeMenuStockQuantityMutation = gql`\n  mutation GChangeMenuStockQuantity($stockItem: ID!, $quantityChange: Float!) {\n    changeAmountStockItem(id: $stockItem, amountOffset: $quantityChange) {\n      id\n      quantity\n    }\n  }\n`\n\nexport const ChangeMenuStockQuantity = buildMutation<\n  GChangeMenuStockQuantity.Mutation,\n  GChangeMenuStockQuantity.Variables\n>(ChangeMenuStockQuantityMutation)\n\nexport const QueryMenuStockDeposit = buildQuery<\n  GMenuStockDeposit.Query,\n  GMenuStockDeposit.Variables\n>(MenuStockDepositQuery)\n","import { DocumentNode } from 'graphql'\nimport React from 'react'\nimport { Mutation, MutationFn, MutationProps } from 'react-apollo'\n\nexport function buildMutation<TData, TVariables>(mutation: DocumentNode) {\n  interface IProps\n    extends Omit<MutationProps<TData, TVariables>, 'mutation' | 'children'> {\n    render(result: MutationFn<TData, TVariables>): ReactNode\n  }\n  const GMutation: React.SFC<IProps> = ({ render, children, ...props }) => (\n    <Mutation mutation={mutation} {...props}>\n      {render}\n    </Mutation>\n  )\n  return GMutation\n}\n","import React from 'react'\n\nimport { GMenuStockDeposit } from '../../../graph/types'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport {\n  ChangeMenuStockQuantity,\n  QueryMenuStockDeposit,\n} from './StockDepositLoader.graphql'\n\nexport type TStockItem = GMenuStockDeposit.StockItems\n\nexport type TDepositFn = (stockItem: TStockItem, quantity: number) => void\n\ninterface IProps {\n  children(stockItems: TStockItem[], onDeposit: TDepositFn): ReactNode\n}\n\nexport const StockDepositLoader: React.SFC<IProps> = ({ children }) => (\n  <ChangeMenuStockQuantity\n    render={execute => {\n      const onDeposit: TDepositFn = (stockItem, quantity) => {\n        execute({\n          variables: { stockItem: stockItem.id, quantityChange: quantity },\n        })\n      }\n      return (\n        <WithSettings\n          render={settings => (\n            <QueryMenuStockDeposit\n              {...settings.queryProps}\n              render={({ stockItems }) => children(stockItems, onDeposit)}\n            />\n          )}\n        />\n      )\n    }}\n  />\n)\n","import React from 'react'\n\nimport { Card } from '../../../atoms/Card'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { SettingsCompanyBranchPicker } from '../../settings/organisms/SettingsCompanyBranchPicker'\nimport { StockDepositControl } from '../organisms/StockDepositControl'\nimport { StockDepositLoader } from '../organisms/StockDepositLoader'\n\ninterface IProps {}\n\nexport const MenuStockDepositPage: React.SFC<IProps> = props => (\n  <FullPageLayout\n    width={16}\n    pageTitle={i18n.t`Stock deposit`}\n    useBackButton={true}\n  >\n    <Card>\n      <SettingsCompanyBranchPicker />\n      <StockDepositLoader>\n        {(stockItems, onDeposit) => (\n          <StockDepositControl stockItems={stockItems} onDeposit={onDeposit} />\n        )}\n      </StockDepositLoader>\n    </Card>\n  </FullPageLayout>\n)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport { TableCellProps } from 'react-virtualized'\n\nimport {\n  checkColumnAccess,\n  Column,\n  ColumnRendererEdit,\n  DataTable,\n} from '../../../atoms/DataTable'\nimport { Loading } from '../../../atoms/Loading'\nimport { GMenuStockList } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\n\ntype TStockItem = GMenuStockList.StockItems\n\ninterface IProps {\n  stockItems: TStockItem[]\n  isLoading: boolean\n}\n\nexport const StockListTable: React.SFC<IProps> = ({\n  stockItems,\n  isLoading,\n}) => (\n  <DataTable\n    items={stockItems}\n    heightStretch={true}\n    noRowsRenderer={() =>\n      isLoading ? (\n        <Loading />\n      ) : (\n        <h3>\n          <Trans>Selected branch has no stock cards</Trans>\n        </h3>\n      )\n    }\n  >\n    <Column\n      dataKey=\"id\"\n      width={60}\n      cellRenderer={checkColumnAccess(\n        { canQuery: 'stockItem' },\n        ColumnRendererEdit,\n      )}\n    />\n    <Column dataKey=\"code\" width={100} label={i18n.t`Card code`} />\n    <Column dataKey=\"nameLabel\" width={300} label={i18n.t`Card name`} />\n    <Column\n      dataKey=\"quantity\"\n      width={100}\n      label={i18n.t`Card stock`}\n      cellRenderer={stockWithUnit}\n    />\n    <Column\n      dataKey=\"allowNegative\"\n      width={300}\n      label={i18n.t`Negative stock`}\n      cellRenderer={stockAllowNegative}\n    />\n    <Column dataKey=\"note\" width={300} label={i18n.t`Card note`} />\n  </DataTable>\n)\n\nfunction stockWithUnit({ cellData, rowData }: TableCellProps) {\n  return `${cellData} ${rowData.wareUnit.code}`\n}\n\nfunction stockAllowNegative({ cellData }: TableCellProps) {\n  return cellData === true ? <Trans>Permitted</Trans> : <Trans>Forbidden</Trans>\n}\n","import { observer, useComputed } from 'mobx-react-lite'\nimport React from 'react'\nimport { useQuery } from 'react-apollo-hooks'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { GMenuStockList } from '../../../graph/types'\nimport { isPartialMatch } from '../../../helpers/filter'\nimport { RM } from '../../../helpers/ramda'\nimport { MenuStockListQuery } from './StockList.graphql'\nimport { StockListTable } from './StockListTable'\n\nexport const StockListLoader = observer(() => {\n  const { settings } = useRoot()\n  const { data, loading } = useQuery<\n    GMenuStockList.Query,\n    GMenuStockList.Variables\n  >(MenuStockListQuery, {\n    ...settings.queryProps,\n    suspend: false,\n  })\n\n  const filteredItems = useComputed(\n    () => {\n      if (!data.stockItems || data.stockItems.length === 0) {\n        return []\n      }\n      const searchValue = settings.menu.stock.filterInput\n      const partialMatch = isPartialMatch(searchValue)\n      return data.stockItems.filter(\n        RM.cond([\n          [RM.propEq('plu', searchValue), RM.T],\n          [RM.propSatisfies(partialMatch, 'code'), RM.T],\n          [RM.propSatisfies(partialMatch, 'nameLabel'), RM.T],\n        ]),\n      )\n    },\n    [data && data.stockItems],\n  )\n\n  return <StockListTable stockItems={filteredItems} isLoading={loading} />\n})\n","import React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { DataTableContainer } from '../../../atoms/DataTableContainer'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { SettingsCompanyBranchPicker } from '../../settings/organisms/SettingsCompanyBranchPicker'\nimport { CreateButton } from '../molecules/CreateButton'\nimport { MenuFilterInput } from '../molecules/MenuFilterInput'\nimport { StockListLoader } from '../organisms/StockListLoader'\n\nexport const MenuStockListPage: React.SFC = props => (\n  <>\n    <FullPageLayout pageTitle={i18n.t`Stock overview`} useBackButton={true} />\n\n    <PageLayoutFullHeightItem>\n      <Card stretchToParent={true}>\n        <FlexRowSingle justify=\"start\">\n          <FlexColumn>\n            <SettingsCompanyBranchPicker width={20} />\n          </FlexColumn>\n          <FlexColumn>\n            <MenuFilterInput modelType=\"stock\" />\n          </FlexColumn>\n        </FlexRowSingle>\n        <CanMutate mutationName=\"createStockItem\">\n          <CreateButton routeTo=\"create\" />\n        </CanMutate>\n        <DataTableContainer>\n          <StockListLoader />\n        </DataTableContainer>\n      </Card>\n    </PageLayoutFullHeightItem>\n  </>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GMenuStockForm } from '../../../graph/types'\nimport { AllergenFragment } from '../graph/AllergenFragment.graphql'\nimport { WareUnitFragment } from '../graph/WareUnitFragment.graphql'\n\nexport const MenuStockFormQuery = gql`\n  query GMenuStockForm($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      code\n      plu\n      note\n      nameLabel: label\n      allowNegative\n      wareUnit {\n        ...GWareUnit\n      }\n      allergens {\n        ...GAllergen\n      }\n      companyBranch {\n        id\n        allowNegative: stockItemsCanBeNegative\n      }\n    }\n  }\n  ${AllergenFragment}\n  ${WareUnitFragment}\n`\n\nexport const MenuStockDefaultsQuery = gql`\n  query GMenuStockDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      allowNegative: stockItemsCanBeNegative\n    }\n  }\n`\n\nexport const QueryMenuStock = buildQuery<\n  GMenuStockForm.Query,\n  GMenuStockForm.Variables\n>(MenuStockFormQuery)\n","import React from 'react'\n\nimport {\n  AllergenEnum,\n  FieldStateEnum,\n  GMenuStockDefaults,\n  GMenuStockForm,\n  WareUnitEnum,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { MenuBaseFormLoader } from '../atoms/MenuBaseFormLoader'\nimport { useMenu } from '../hooks/useMenu'\nimport { MenuStockDefaultsQuery, MenuStockFormQuery } from './StockForm.graphql'\n\ninterface IProps {\n  stockId: Maybe<ID>\n  children: ReactNode\n}\n\nexport type TStockFormValues = {\n  id: ID\n  code: string\n  plu: Maybe<string>\n  note: string\n  nameLabel: string\n  internalNote: string\n  wareUnit: Maybe<WareUnitEnum>\n  allergens: AllergenEnum[]\n  allowNegative: FieldStateEnum\n  allowNegativeDefault: FieldStateEnum\n}\n\nexport const StockFormLoader: React.SFC<IProps> = ({ stockId, children }) => {\n  const menu = useMenu()\n  return (\n    <MenuBaseFormLoader<TStockFormValues>\n      isCreate={stockId === null}\n      onCreate={values => menu.stock.createItem(values)}\n      onUpdate={values => menu.stock.updateItem(values)}\n      getDefaultValues={getDefaults}\n      loadDefaults={async () => {\n        const { data } = await menu.client.query<\n          GMenuStockDefaults.Query,\n          GMenuStockDefaults.Variables\n        >({\n          query: MenuStockDefaultsQuery,\n          variables: { branchId: menu.stock.branchId },\n          fetchPolicy: 'no-cache',\n        })\n        return {\n          allowNegativeDefault: getAllowNegativeDefault(\n            data.companyBranch.allowNegative,\n          ),\n        }\n      }}\n      loadValues={async () => {\n        const { data } = await menu.client.query<\n          GMenuStockForm.Query,\n          GMenuStockForm.Variables\n        >({\n          query: MenuStockFormQuery,\n          variables: { stockId: stockId! },\n          fetchPolicy: 'no-cache',\n        })\n        return getFormValues(data.stockItem)\n      }}\n    >\n      {children}\n    </MenuBaseFormLoader>\n  )\n}\n\nfunction getDefaults(): TStockFormValues {\n  return {\n    id: 'NEW',\n    internalNote: '',\n    nameLabel: '',\n    code: '',\n    plu: '',\n    note: '',\n    wareUnit: null,\n    allergens: [],\n    allowNegative: FieldStateEnum.DEFAULT,\n    allowNegativeDefault: FieldStateEnum.DEFAULT,\n  }\n}\n\nfunction getFormValues(stockItem: GMenuStockForm.StockItem): TStockFormValues {\n  return {\n    id: stockItem.id,\n    internalNote: 'TBD',\n    nameLabel: stockItem.nameLabel,\n    code: stockItem.code,\n    note: stockItem.note,\n    plu: stockItem.plu || '',\n    wareUnit: stockItem.wareUnit.enum,\n    allergens: stockItem.allergens.map(RM.prop('enum')),\n    allowNegative: stockItem.allowNegative,\n    allowNegativeDefault: getAllowNegativeDefault(\n      stockItem.companyBranch.allowNegative,\n    ),\n  }\n}\n\nfunction getAllowNegativeDefault(isEnabled: boolean) {\n  return isEnabled ? FieldStateEnum.ENABLED : FieldStateEnum.DISABLED\n}\n","import React from 'react'\nimport { Field, FieldType } from 'react-form'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { AllergenEnum } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { MenuAllergenIndicator } from '../atoms/AllergenIndicator'\n\ninterface IProps {\n  field?: FieldType\n  icon?: string\n}\n\nexport const FormInputAllergens: React.SFC<IProps> = ({\n  field = 'allergens',\n  icon = 'error_outline',\n}) => (\n  <Field field={field}>\n    {fieldApi => {\n      const onToggle = (allergen: AllergenEnum) => {\n        const current: AllergenEnum[] = fieldApi.value\n        if (current.includes(allergen)) {\n          fieldApi.setValue(RM.without([allergen], current))\n        } else {\n          fieldApi.setValue([...current, allergen])\n        }\n      }\n      return (\n        <IconLine icon={icon} labelWidth={7}>\n          <MenuAllergenIndicator\n            selected={fieldApi.value}\n            onToggle={onToggle}\n          />\n        </IconLine>\n      )\n    }}\n  </Field>\n)\n","import { i18nMark } from '@lingui/react'\nimport React, { useMemo } from 'react'\nimport { FormApi } from 'react-form'\n\nimport { FormInputFlatSelect } from '../../../atoms/FormInputFlatSelect'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FieldStateEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {}\n\nconst items = [\n  {\n    type: FieldStateEnum.ENABLED,\n    label: i18nMark('Permit'),\n  },\n  {\n    type: FieldStateEnum.DISABLED,\n    label: i18nMark('Forbid'),\n  },\n]\n\nexport const FormInputAllowNegative: React.SFC<IProps> = ({}) => {\n  const labelForDefault = useMemo(\n    () => ` (${i18n.t`Is default setting`.toLocaleLowerCase()})`,\n    [],\n  )\n  return (\n    <FormApi>\n      {({ values: { allowNegativeDefault } }) => (\n        <IconLine label={i18n.t`Negative stock`} labelWidth={7}>\n          <FormInputFlatSelect\n            field=\"allowNegative\"\n            items={items}\n            formatItem={item => {\n              if (item.type === allowNegativeDefault) {\n                return (\n                  <span>\n                    {i18n._(item.label)}\n                    <i>{labelForDefault}</i>\n                  </span>\n                )\n              }\n              return i18n._(item.label)\n            }}\n            getItemId={item => item.type}\n          />\n        </IconLine>\n      )}\n    </FormApi>\n  )\n}\n","import React from 'react'\n\nimport {\n  FormInputTextBox,\n  TFormInputTextBoxProps,\n} from '../../../atoms/FormInputTextBox'\nimport { IconLine } from '../../../atoms/IconLine'\n\ninterface IProps extends Partial<TFormInputTextBoxProps> {\n  icon?: string\n}\n\nexport const FormInputPlu: React.SFC<IProps> = ({\n  field = 'plu',\n  icon = 'fingerprint',\n  ...props\n}) => (\n  <IconLine icon={icon} labelWidth={7}>\n    <FormInputTextBox field={field} width={9} {...props} />\n  </IconLine>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GWareUnits } from '../../../graph/types'\n\nexport const WareUnitsQuery = gql`\n  query GWareUnits {\n    wareUnits {\n      id\n      code\n      enum\n    }\n  }\n`\n\nexport const QueryWareUnits = buildQuery<\n  GWareUnits.Query,\n  GWareUnits.Variables\n>(WareUnitsQuery)\n","import React from 'react'\n\nimport {\n  FormInputSelect,\n  IFormInputSelectProps,\n} from '../../../atoms/FormInputSelect'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { GWareUnits } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport { QueryWareUnits } from './FormInputWareUnit.graphql'\n\ninterface IProps extends Partial<IFormInputSelectProps<GWareUnits.WareUnits>> {\n  icon?: string\n}\n\nexport const FormInputWareUnit: React.SFC<IProps> = ({\n  field = 'wareUnit',\n  icon = 'select_all',\n  ...selectProps\n}) => (\n  <QueryWareUnits\n    renderLoading={false}\n    render={({ wareUnits }, { loading }) => (\n      <IconLine icon={icon} labelWidth={7}>\n        <FormInputSelect<GWareUnits.WareUnits>\n          field={field}\n          options={wareUnits || []}\n          isLoading={loading}\n          isRequired={true}\n          validatioName={i18n.t`Ware unit`}\n          getOptionLabel={RM.prop('code')}\n          getOptionValue={RM.prop('enum')}\n          width={12}\n          {...selectProps}\n        />\n      </IconLine>\n    )}\n  />\n)\n","import React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { FormColumn, FormContainer } from '../../../atoms/FormContainer'\nimport { i18n } from '../../../i18n'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport { FormDeleteButton } from '../molecules/FormDeleteButton'\nimport { FormInputAllergens } from '../molecules/FormInputAllergens'\nimport { FormInputAllowNegative } from '../molecules/FormInputAllowNegative'\nimport { FormInputCode } from '../molecules/FormInputCode'\nimport { FormInputInternalNote } from '../molecules/FormInputInternalNote'\nimport { FormInputName } from '../molecules/FormInputName'\nimport { FormInputPlu } from '../molecules/FormInputPlu'\nimport { FormInputWareUnit } from '../molecules/FormInputWareUnit'\n\nexport const StockFormMain: React.SFC = props => (\n  <FormContainer>\n    <FormColumn>\n      <FormInputName placeholder={i18n.t`Card name`} />\n      <FormInputCode placeholder={i18n.t`Card code`} />\n      <FormInputWareUnit placeholder={i18n.t`Choose unit`} />\n      <FormInputPlu placeholder={i18n.t`PLU`} />\n      <FormInputInternalNote\n        placeholder={i18n.t`Card note`}\n        field=\"note\"\n        label={i18n.t`Card note`}\n      />\n      <FormInputAllergens />\n      <FormInputAllowNegative />\n    </FormColumn>\n    <FormColumn>\n      <CanMutate mutationName=\"destroyStockItem\">\n        <WithSettings\n          render={({ menu }) => (\n            <FormDeleteButton\n              confirmText={i18n.t`Remove this card?`}\n              onDelete={id => menu.stock.deleteItem(id)}\n            />\n          )}\n        />\n      </CanMutate>\n    </FormColumn>\n  </FormContainer>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GStockRecipes } from '../../../graph/types'\n\nexport const StockRecipesQuery = gql`\n  query GStockRecipes($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      ingredients {\n        id\n        recipe {\n          id\n          nameLabel\n          descriptionLabel\n        }\n      }\n    }\n  }\n`\n\nexport const QueryStockRecipes = buildQuery<\n  GStockRecipes.Query,\n  GStockRecipes.Variables\n>(StockRecipesQuery)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\n\nimport {\n  Column,\n  ColumnRendererEdit,\n  DataTable,\n  NoteText,\n} from '../../../atoms/DataTable'\nimport { Headline } from '../../../atoms/Headline'\nimport { i18n } from '../../../i18n'\nimport { QueryStockRecipes } from './StockRecipesView.graphql'\n\ninterface IProps {\n  stockId: Maybe<ID>\n}\n\nexport const StockRecipesView: React.SFC<IProps> = ({ stockId }) =>\n  stockId === null ? null : (\n    <QueryStockRecipes\n      variables={{ stockId }}\n      render={({ stockItem: { ingredients } }) =>\n        ingredients.length > 0 ? (\n          <>\n            <Headline>\n              <Trans>Recipes using this card</Trans>\n            </Headline>\n\n            <DataTable items={ingredients}>\n              <Column\n                dataKey=\"\"\n                cellDataGetter={({ rowData }) =>\n                  `../../recipe/${rowData.recipe.id}`\n                }\n                cellRenderer={ColumnRendererEdit}\n                width={100}\n              />\n              <Column\n                dataKey=\"recipe\"\n                width={300}\n                label={i18n.t`Name`}\n                cellRenderer={({ rowData }) => (\n                  <>\n                    {rowData.recipe.nameLabel}\n                    <NoteText>{rowData.recipe.descriptionLabel}</NoteText>\n                  </>\n                )}\n              />\n            </DataTable>\n          </>\n        ) : null\n      }\n    />\n  )\n","import React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { CanQuery } from '../../../atoms/CanQuery'\nimport { Card } from '../../../atoms/Card'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { TopRightButtonContainer } from '../../../molecules/TopRightButtonContainer'\nimport { SubmitButton } from '../molecules/SubmitButton'\nimport { StockFormLoader } from '../organisms/StockFormLoader'\nimport { StockFormMain } from '../organisms/StockFormMain'\nimport { StockRecipesView } from '../organisms/StockRecipesVIew'\n\ninterface IProps {\n  stockId: Maybe<ID>\n}\n\nexport const MenuStockPage: React.SFC<IProps> = ({ stockId }) => (\n  <FullPageLayout\n    width={16}\n    pageTitle={i18n.t`Stock card`}\n    hideLogoutWidget={true}\n    useBackButton={true}\n  >\n    <StockFormLoader stockId={stockId}>\n      <>\n        <TopRightButtonContainer>\n          <CanMutate\n            mutationName={\n              stockId === null ? 'createStockItem' : 'updateStockItem'\n            }\n          >\n            <SubmitButton isCreate={stockId === null} />\n          </CanMutate>\n        </TopRightButtonContainer>\n        <Card>\n          <StockFormMain />\n          <CanQuery queryName=\"recipes\">\n            <StockRecipesView stockId={stockId} />\n          </CanQuery>\n        </Card>\n      </>\n    </StockFormLoader>\n  </FullPageLayout>\n)\n","import React from 'react'\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { SecureRoute } from '../../../routes/SecureRoute'\nimport { MenuCategoryListPage } from '../pages/MenuCategoryListPage'\nimport { MenuCategoryPage } from '../pages/MenuCategoryPage'\nimport { MenuRecipeListPage } from '../pages/MenuRecipeListPage'\nimport { MenuRecipePage } from '../pages/MenuRecipePage'\nimport { MenuStockDepositPage } from '../pages/MenuStockDepositPage'\nimport { MenuStockListPage } from '../pages/MenuStockListPage'\nimport { MenuStockPage } from '../pages/MenuStockPage'\n\ninterface IProps extends RouteComponentProps<{}> {}\n\nexport const MenuRoutes: React.SFC<IProps> = ({ match }) => (\n  <Switch>\n    <SecureRoute\n      exact={true}\n      path={match.path}\n      render={() => <Redirect to={`${match.path}/category`} />}\n    />\n    <SecureRoute\n      exact={true}\n      path={`${match.path}/category`}\n      component={MenuCategoryListPage}\n    />\n    <SecureRoute\n      path={`${match.path}/category/:categoryId`}\n      render={({ match: { params }, location: { state } }) => (\n        <MenuCategoryPage\n          categoryId={params.categoryId === 'create' ? null : params.categoryId}\n          categoryType={state.categoryType}\n        />\n      )}\n    />\n    <SecureRoute\n      exact={true}\n      path={`${match.path}/recipe`}\n      component={MenuRecipeListPage}\n    />\n    <SecureRoute\n      path={`${match.path}/recipe/:recipeId`}\n      render={({ match: { params }, location: { state } }) => (\n        <MenuRecipePage\n          recipeId={params.recipeId === 'create' ? null : params.recipeId}\n          recipeType={state.recipeType}\n        />\n      )}\n    />\n    <SecureRoute\n      exact={true}\n      path={`${match.path}/stock`}\n      component={MenuStockListPage}\n    />\n    <SecureRoute\n      path={`${match.path}/stock/deposit`}\n      component={MenuStockDepositPage}\n    />\n    <SecureRoute\n      path={`${match.path}/stock/:stockId`}\n      render={({ match: { params } }) => (\n        <MenuStockPage\n          stockId={params.stockId === 'create' ? null : params.stockId}\n        />\n      )}\n    />\n    <Route component={NotFoundPage} />\n  </Switch>\n)\n\nexport default MenuRoutes\n"],"sourceRoot":""}