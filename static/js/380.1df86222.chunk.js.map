{"version":3,"sources":["atoms/VerticalGap.tsx","components/forms/FormInput.tsx","molecules/TouchButtonDelete.tsx","components/forms/FormDropdownMulti.tsx","hooks/useDropdownSingle.ts","components/forms/FormSubmitButton.tsx","hooks/useDropdownMulti.ts","atoms/FlexDiv.tsx","components/forms/FormDisplayValue.tsx","atoms/DragHandle.tsx","atoms/PictogramDisplay.tsx","components/forms/useFormLoader.ts","components/forms/FormDropdownSingle.tsx","segments/menu/molecules/MenuGuideDownload.tsx","molecules/SortableDataTable.tsx","segments/menu/molecules/CategoryListTable.tsx","segments/menu/organisms/CategoryList.tsx","segments/menu/pages/MenuCategoryListPage.tsx","molecules/TopRightButtonContainer.tsx","segments/menu/hooks/useMenuItemType.ts","segments/menu/atoms/IsMenuItemType.tsx","segments/menu/atoms/MenuSubmitButton.tsx","segments/menu/hooks/useMenuTranslations.ts","segments/menu/molecules/CategoryTranslationLoader.tsx","segments/menu/molecules/MenuFormLoader.tsx","segments/menu/organisms/CategoryFormLoader.tsx","components/forms/FormDeleteButton.tsx","segments/menu/atoms/FormLayoutGrid.tsx","segments/menu/molecules/CategoryOriginsField.tsx","segments/menu/molecules/CategoryPictogramSelect.tsx","segments/menu/atoms/MenuTranslationInput.tsx","segments/menu/molecules/MenuInternalNoteField.tsx","segments/menu/molecules/MenuLanguageSwitch.tsx","segments/menu/molecules/MenuNameInput.tsx","segments/menu/organisms/CategoryFormPrimary.tsx","hooks/useSettingsBranch.ts","segments/menu/atoms/MenuSuggestionPanel.tsx","segments/menu/hooks/usePriceType.ts","segments/menu/organisms/CategoryRecipesView.tsx","segments/menu/molecules/CategoryRequirementControl.tsx","segments/menu/organisms/CategoryRequirementsForm.tsx","segments/menu/pages/MenuCategoryPage.tsx","segments/menu/organisms/CategorySuggestionPanel.tsx","segments/menu/organisms/RecipeCategoryView.tsx","segments/menu/molecules/RecipeTranslationLoader.tsx","segments/menu/organisms/RecipeFormLoader.tsx","segments/menu/molecules/MenuPriceInput.tsx","components/forms/FormFlatSingleSelect.tsx","segments/menu/molecules/RecipeVatSelectField.tsx","segments/menu/molecules/RecipeAssocListTable.tsx","segments/menu/organisms/RecipeAssociatedView.tsx","segments/menu/hooks/useMenuItemId.ts","segments/menu/organisms/RecipeFormPricing.tsx","segments/menu/molecules/MenuCodeInput.tsx","segments/menu/molecules/MenuIdExternalSystem.tsx","segments/menu/molecules/MenuVisibilityField.tsx","segments/menu/atoms/MenuAllergenIndicator.tsx","segments/menu/molecules/RecipeAllergenDisplay.tsx","segments/menu/molecules/RecipeDescriptionInput.tsx","segments/menu/molecules/ImageCropModal.tsx","segments/menu/molecules/RecipeImage.tsx","segments/menu/organisms/RecipeFormPrimary.tsx","segments/menu/molecules/RecipeIngredientsTable.tsx","segments/menu/organisms/RecipeIngredientsView.tsx","segments/menu/pages/MenuRecipePage.tsx","segments/menu/organisms/StockListTable.tsx","segments/menu/organisms/StockListLoader.tsx","segments/menu/pages/MenuStockListPage.tsx","segments/menu/organisms/StockFormLoader.tsx","segments/menu/molecules/StockAllergenField.tsx","segments/menu/molecules/StockAllowNegativeField.tsx","segments/menu/molecules/StockPluField.tsx","segments/menu/molecules/StockWareUnitField.tsx","segments/menu/organisms/StockFormPrimary.tsx","segments/menu/organisms/StockRecipesVIew.tsx","segments/menu/pages/MenuStockPage.tsx","segments/menu/routes/MenuRouting.tsx"],"names":["VerticalGap","styled","div","size","sizeUnit","displayName","FormInput","React","forwardRef","inputRef","fieldName","fullWidth","validate","addHiddenLabelWithPlaceholderText","withLabel","props","getInputProps","useFormInputProps","useObserver","inputFullWidth","ref","placeholder","hidden","htmlFor","id","state","useXFormState","useXFieldForInput","field","disabled","isSubmitting","invalid","touched","Boolean","error","TouchButtonDelete","onDelete","confirmText","className","icon","Delete","color","Colors","greyMiddle","onClick","ev","preventDefault","window","confirm","FormDropdownMulti","getOptionValue","idProp","getOptionFilter","selectProps","formState","useXField","filterProps","useDropdownFilter","dropdownProps","useDropdownMulti","onSelectionChange","setValue","selected","value","onFocus","setTouched","hasError","isDisabled","useDropdownSingle","options","useMemo","find","option","onChange","FormSubmitButton","children","type","green","isValid","undefined","ErrorOutline","iconSize","iconColor","red","cn","heartBeat","Array","isArray","ARRAY_EMPTY","filter","includes","map","isMulti","FlexDiv","FormDisplayValue","useXFieldState","StyledDragHandle","DragHandle","SortableHandle","Reorder","getFontSize","fontSize","fontSizeUnit","Spacing","DefaultSizeUnit","PictogramDisplay","attrs","getPictogramClassName","pictogramId","logger","useFormLoader","onSubmit","initialValues","loadValues","validationSchema","submitMessage","submitRedirectPath","history","useRouterContext","useSnackBar","enqueueSuccess","enqueueWarning","onSubmitSuccess","useCallback","values","a","push","onSubmitFailed","errors","msg","hasLoaded","useRef","onReset","current","xform","useXForm","initialValidationEnabled","ignoreUnknownFieldsInValidation","onFormChanges","useEffect","Promise","resolve","then","api","mergeValues","pristineValues","enableValidation","FormDropdownSingle","MenuGuideDownloadButton","TouchButton","black","MenuGuideDownload","observer","settings","useRoot","useQMenuGuideDownload","branchId","fetchPolicy","loading","data","companyBranch","foodMenuUrl","href","target","rel","SortableTableRowRenderer","SortableElement","columns","style","SortableDataTableContainer","SortableContainer","DataTable","SortableDataTable","sortedItems","items","rowRenderer","rowProps","onHandleSorting","newIndex","oldIndex","currentItems","arrayMove","setState","onSort","sortSuccess","item","offset","this","lockAxis","useDragHandle","onSortEnd","PureComponent","getDerivedStateFromProps","nextProps","CategoryListTable","categories","onToggle","onRemove","showEditColumn","showRemoveColumn","showVisibilityColumn","showHeader","isSortable","isLoading","heightStretch","fullHeight","noRowsDisplay","text","i18n","disableHeader","noRowsRenderer","getCategoryEditRoute","useMenuRouting","dataKey","width","ButtonColumnWidthPx","minWidth","cellRenderer","checkColumnAccess","canQuery","ColumnRendererEdit","cellDataGetter","rowData","categoryType","enum","ColumnRendererRemove","columnData","canMutate","ColumnRendererVisibility","label","ColumnRendererWithNote","noteKey","cellData","toLocaleLowerCase","createElement","StyledCategoryList","greyLight","headline","subHeadline","useQMenuCategoryList","getStash","updateQuery","refetch","dataOrigins","useQMenuCategoryOrigins","originsMap","origins","reduce","acc","origin","code","renderOrigins","sort","originEnum","key","useMMenuCategoryVisibility","changeVisibility","onVisibilityToogle","categoryId","visible","optimisticResponse","updateWareCategory","__typename","useMMenuCategorySort","sortCategory","result","success","getCategoryCreateRoute","FlexRowSingle","FlexColumn","widthGrowIndex","Headline","fixedWidth","MenuCreateButton","routeTo","PartialDataTableContainer","MenuCategoryListPage","FullPageLayout","pageTitle","useBackButton","backRoute","ROUTE_SETTINGS","PageLayoutFullHeightItem","forcePercentHeightInMobile","Card","stretchToParent","justify","SettingsCompanyBranchPicker","WareCategoryTypeEnum","Main","SideDish","Cover","TopRightButtonContainer","Radiuses","Button","useMenuItemType","IsMenuItemType","isMain","isSideDish","isCover","itemType","MenuSubmitButton","isCreate","createMutation","updateMutation","useCanMutate","byLanguage","RM","propEq","useMenuTranslations","menuModel","useMenuModel","translations","findTranslation","language","getTranslation","initTranslation","translated","translation","hasTranslation","shouldLoadTranslation","isDefaultLanguageSelected","currentLanguage","CategoryTranslationLoader","useQMenuCategoryFormTrans","skip","category","nameLabel","internalNoteLabel","MenuFormLoader","loadCreateDefaults","loadUpdateValues","onCreate","onUpdate","createSuccessMessage","updateSuccessMessage","successRedirectPath","CategoryFormLoader","redirectToCategoryList","useObjectValidation","yup","string","required","useLazyQMenuCategoryForm","queryCategory","defaultLanguage","useMMenuCategoryUpdate","updateCategory","executeUpdate","getWriteVariables","useMMenuCategoryCreate","createCategory","wareCategoryType","length","getDefaults","ROUTE_MENU_CATEGORY","pictogram","minCount","maxCount","recipes","formValues","enabled","orderOriginCategories","FormDeleteButton","mutationName","canDelete","useAccessGuard","goBack","StyledFormLayoutGrid","Middle","primaryColumnWidth","secondaryColumnWidth","mediaMobile","FormLayoutGrid","contentPrimary","contentSecondary","contentTopRight","contentBottomRight","CategoryOriginsField","IconLine","labelWidth","getOptionLabel","prop","CategoryPictogramSelect","SelectControl","availablePictograms","formatOptionLabel","components","SingleValue","styles","container","base","menuList","maxHeight","isClearable","isSearchable","StyledMenuTranslationInput","MenuTranslationInput","getFieldProps","isTranslating","name","fieldProps","src","getFlag","alt","setLanguage","MenuInternalNoteInput","localized","StyledLanguagePicker","LanguagePicker","MenuLanguageSwitch","availableLanguages","supportedLanguages","selectedLanguage","formatLanguage","identity","arrowColor","MenuNameInput","Label","DefaultLabelWidth","CategoryFormPrimary","useMMenuCategoryDelete","deleteCategory","FormGrid","useSettingsBranch","MenuSuggestionPanel","onAdd","addLabel","addButtonText","useStateRef","getSelected","setSelected","onConfirm","onKeyDown","onSelect","margin","propOr","priceTypes","WarePriceTypeEnum","Delivery","Inhouse","usePriceType","priceTypeLabels","getPriceTypesLabels","StyledCategoryRecipesView","mediaDesktop","StyledFormStretchedRow","SortableRecipes","StyledRecipeRow","SortableRecipe","recipe","prices","priceType","foundPrice","pathEq","NoteText","formatPrice","price","currency","TouchButtonRemove","internalNote","CategoryRecipesView","useQMenuRecipeList","unselectedRecipesOnly","differenceWith","eqProps","isDesktop","useResponsive","addedRecipe","lockToContainerEdges","DataList","rowHeight","renderItem","index","reject","idPropEq","StyledCategoryRequirementControl","CategoryRequirementControl","count","countRef","Sizer","FormInputStyled","validity","valid","Number","parseInt","select","pattern","StyledCheckbox","checked","getRulesMap","noLimit","min","max","optional","onlyOne","custom","CategoryRequirementsForm","ruleMap","useLocalStore","currentRule","setRule","rule","useAutorun","found","_","findKey","SelectControlFlat","Object","keys","formatItem","req","onSingleSelection","selectedRule","selectedItem","FormContainer","FormFixedRow","FormStretchedRow","MenuCategoryPage","match","params","getCategoryTypeLabel","hideLogoutWidget","withScrollArea","minHeight","CategorySuggestionPanel","currentCategories","without","RecipeCategoryView","noRowsText","from","remove","addedCategory","RecipeTranslationLoader","recipeId","useQMenuRecipeFormTrans","descriptionLabel","RecipeFormLoader","recipeType","redirectToRecipeList","fieldIsRequiredMsg","object","mapPriceTypes","fieldDescription","validateAsNumberField","useLazyQMenuRecipeDefaults","queryDefaults","normalizeLoadedDefaults","defaults","useLazyQMenuRecipeForm","queryRecipe","normalizeUpdateValues","useMMenuRecipeUpdate","updateRecipe","image","getImageForUpdate","disableBatching","useMMenuRecipeCreate","createRecipe","ROUTE_MENU_RECIPE","warePriceType","parseNumber","vat","vatId","sideDishCategories","sideDishes","wareCategories","associatedRecipes","pick","ingredients","stockItem","quantity","delete","file","internalCode","currencyCode","vats","recipeSource","sourceAssociatedRecipes","associatedRecipe","formattedPrice","sourceIngredients","allergens","wareUnit","formatNumber","unitLabel","sourcePrice","sourcePrices","MenuPriceField","Toll","FormFlatSingleSelect","getItemId","isInvalid","RecipeVatSelectField","useQMenuVats","RecipeAssocListTable","RecipeAssociatedView","useQMenuRecipeFormAssoc","isPriceType","isAssocRecipe","priceTypeRecipes","onAddRecipe","onRemoveRecipe","both","some","FormPricingCurrencyCode","RecipeFormPricing","baseName","MarginBox","left","MenuCodeInput","MenuIdExternalSystem","MenuVisibilityField","AllergenBox","MarginAroundFormComponents","white","yellow","MenuAllergenIndicator","useQMenuAllergens","allergen","title","active","StyledAllergenLabel","RecipeAllergenDisplay","uniq","flatten","RecipeDescriptionInput","ImageCropModal","onCancel","useState","unit","aspect","crop","setCrop","imageRef","onConfirmClick","canvas","document","scaleX","naturalWidth","scaleY","naturalHeight","height","getContext","drawImage","x","y","toBlob","blob","Error","getCroppedBlob","onImageLoaded","imageSource","URL","createObjectURL","revokeObjectURL","Dialog","open","DialogTitle","DialogContent","keepSelection","ruleOfThirds","imageStyle","DialogActions","StyledRecipeImageUploader","ButtonHeight","RecipeImage","uploadedImage","setUploadedImage","useDropzone","accept","multiple","onDropAccepted","firstImage","onDropRejected","isDragActive","getRootProps","imageDisplay","RecipeFormPrimary","useMMenuRecipeDelete","deleteRecipe","RecipeIngredientsTable","rowIndex","String","unselectedStockOnly","RecipeIngredientsControl","useQMenuStockList","stockItems","addedStockItem","RecipeIngredientsView","ingredient","stockItemId","splice","findIndex","MenuRecipePage","right","bottom","getRecipeTypeLabel","TCategoryType","StyledDataTable","StockListTable","Loading","flexGrow","stockWithUnit","stockAllowNegative","StockListLoader","filterItem","getPredicate","partialMatch","exactMatch","MenuStockListPage","getStockCreateRoute","flexWrap","MenuFilterInput","CanMutate","StockFormLoader","stockId","redirectToStockList","array","of","useLazyQMenuStockDefaults","allowNegativeDefault","getAllowNegativeDefault","allowNegative","useLazyQMenuStockForm","queryStock","note","plu","useMMenuStockCreate","createStock","useMMenuStockUpdate","updateStock","FieldStateEnum","Default","ROUTE_MENU_STOCK","isEnabled","Disabled","StockAllergenField","Enabled","i18nMark","StockAllowNegativeField","StockPluField","Fingerprint","StockWareUnitField","useQMenuWareUnits","SelectAll","wareUnits","StockFormPrimary","useMMenuStockDelete","deleteStockItem","StockRecipesView","useQStockRecipes","BlockLoader","pathname","MenuStockPage","CanQuery","queryName","MenuRouting","SecureRoute","path","component","MenuRecipeListPage","to","ROUTE_MENU","NotFoundPage"],"mappings":"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","file":"static/js/380.1df86222.chunk.js","sourcesContent":["import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import {\n  useXFieldForInput,\n  useXFormState,\n  XFieldName,\n  XFieldValidator,\n} from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { StyledFormInput } from '../../atoms/FormInputStyled'\n\ntype TProps = NoChildren &\n  Omit<React.InputHTMLAttributes<never>, 'name'> & {\n    fieldName: XFieldName\n    validate?: XFieldValidator<string>\n    fullWidth?: boolean\n    addHiddenLabelWithPlaceholderText?: boolean\n  }\n\nexport type FormInputProps = TProps\n\nexport const FormInput = React.forwardRef<HTMLInputElement, TProps>(\n  (\n    {\n      fieldName,\n      fullWidth,\n      validate,\n      addHiddenLabelWithPlaceholderText: withLabel = true,\n      ...props\n    },\n    inputRef,\n  ) => {\n    const getInputProps = useFormInputProps({ fieldName, validate })\n    return useObserver(() => (\n      <>\n        <StyledFormInput\n          {...getInputProps()}\n          inputFullWidth={fullWidth}\n          ref={inputRef}\n          {...props}\n        />\n        {withLabel && props.placeholder && (\n          <label hidden={true} htmlFor={getInputProps().id}>\n            {props.placeholder}\n          </label>\n        )}\n      </>\n    ))\n  },\n)\n\ninterface IHookOptions {\n  fieldName: XFieldName\n  validate?: XFieldValidator<string>\n}\n\nexport function useFormInputProps({ fieldName, validate }: IHookOptions) {\n  const state = useXFormState()\n  const [field, getInputProps] = useXFieldForInput<string>(fieldName, {\n    validate,\n  })\n  return () => ({\n    ...getInputProps(),\n    disabled: state.isSubmitting,\n    invalid: field.touched && Boolean(field.error),\n  })\n}\n","import { Delete } from '@material-ui/icons'\nimport React from 'react'\n\nimport { SizerButton } from '../atoms/SizerButton'\nimport { Colors } from '../styling'\nimport { ITouchButtonProps, TouchButton } from './TouchButton'\n\ninterface ITouchButtonDeleteProps extends Omit<ITouchButtonProps, 'onClick'> {\n  confirmText?: string\n  onDelete(): void\n}\n\nexport const TouchButtonDelete: React.FC<ITouchButtonDeleteProps> = ({\n  onDelete,\n  confirmText,\n  ...props\n}) => {\n  return (\n    <SizerButton>\n      <TouchButton\n        className=\"delete-button\"\n        icon={Delete}\n        color={Colors.greyMiddle}\n        onClick={ev => {\n          ev.preventDefault()\n          if (!confirmText || window.confirm(confirmText)) {\n            onDelete()\n          }\n        }}\n        {...props}\n      />\n    </SizerButton>\n  )\n}\n","import { useXField, useXFormState, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { SelectControl, TSelectControlProps } from '../../atoms/SelectControl'\nimport { useDropdownFilter } from '../../hooks/useDropdownFilter'\nimport { useDropdownMulti } from '../../hooks/useDropdownMulti'\nimport { idProp } from '../../tools/ramda'\n\ntype TFormDropdownMultiProps<OptionType> = Omit<\n  TSelectControlProps<OptionType>,\n  'value' | 'onChange' | 'isMulti'\n> & {\n  fieldName: XFieldName\n  options: RoA<OptionType>\n  getOptionFilter?(option: OptionType): string\n}\n\nexport const FormDropdownMulti = <TOption extends any>({\n  fieldName,\n  getOptionValue = idProp as any,\n  getOptionFilter,\n  ...selectProps\n}: TFormDropdownMultiProps<TOption>) => {\n  const formState = useXFormState()\n  const field = useXField<RoA<ID>>(fieldName)\n\n  return useObserver(function useBody() {\n    const filterProps = useDropdownFilter({ getOptionFilter })\n    const dropdownProps = useDropdownMulti({\n      ...selectProps,\n      onSelectionChange: field.setValue,\n      selected: field.value,\n      getOptionValue,\n    })\n\n    return (\n      <SelectControl<TOption>\n        {...dropdownProps}\n        {...filterProps}\n        {...selectProps}\n        onFocus={() => field.setTouched()}\n        invalid={field.touched && field.hasError}\n        isDisabled={formState.isSubmitting}\n        getOptionValue={getOptionValue}\n      />\n    )\n  })\n}\n","import React from 'react'\n\ntype TOptions<TSelectOption> = {\n  options: RoA<TSelectOption> | null\n  selected: MaybeID\n  onSelectionChange: (selected: MaybeID) => void\n  getOptionValue(option: TSelectOption): string\n}\n\nexport function useDropdownSingle<TSelectOption>({\n  options,\n  selected,\n  onSelectionChange,\n  getOptionValue,\n}: TOptions<TSelectOption>) {\n  const value = React.useMemo(() => {\n    if (selected === null) {\n      return null\n    }\n    return options === null\n      ? null\n      : options.find(option => getOptionValue(option) === selected) || null\n  }, [selected, options, getOptionValue])\n\n  const onChange = (option: unknown) => {\n    onSelectionChange(option ? getOptionValue(option as TSelectOption) : null)\n  }\n\n  return { value, onChange }\n}\n","import { ErrorOutline } from '@material-ui/icons'\nimport { cn } from '@speedlo/ui'\nimport { useXFormState } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ITouchButtonProps, TouchButton } from '../../molecules/TouchButton'\nimport { Colors } from '../../styling'\n\ninterface IProps extends ITouchButtonProps {\n  children: ReactNode | ReactNode[] | string\n}\n\nexport const FormSubmitButton: React.FC<IProps> = ({\n  children,\n  id = 'form-submit',\n  ...props\n}) => {\n  const state = useXFormState()\n  return useObserver(() => (\n    <TouchButton\n      id={id}\n      type=\"submit\"\n      color={Colors.green}\n      disabled={state.isSubmitting}\n      icon={!state.isValid ? ErrorOutline : undefined}\n      iconSize={1.1}\n      iconColor={Colors.red}\n      {...props}\n      className={cn(props.className, 'animated', 'infinite', {\n        heartBeat: state.isSubmitting,\n      })}\n    >\n      <>{children}</>\n    </TouchButton>\n  ))\n}\n","import React from 'react'\n\nimport { ARRAY_EMPTY } from '../helpers/form'\n\ntype TOptions<TSelectOption> = {\n  options: RoA<TSelectOption> | null\n  selected: RoA<ID>\n  onSelectionChange: (selected: RoA<ID>) => void\n  getOptionValue(option: TSelectOption): string\n}\n\nexport function useDropdownMulti<TSelectOption>({\n  options,\n  selected,\n  onSelectionChange,\n  getOptionValue,\n}: TOptions<TSelectOption>) {\n  const value = React.useMemo(() => {\n    if (!Array.isArray(selected)) {\n      return null\n    }\n    return options === null\n      ? ARRAY_EMPTY\n      : options.filter(option => selected.includes(getOptionValue(option)))\n  }, [selected, options, getOptionValue])\n\n  const onChange = (option: unknown) => {\n    onSelectionChange(\n      option ? (option as TSelectOption[]).map(getOptionValue) : ARRAY_EMPTY,\n    )\n  }\n\n  return { value, onChange, isMulti: true }\n}\n","import styled from 'styled-components/macro'\n\nexport const FlexDiv = styled.div`\n  display: flex;\n`\n","import { useXFieldState, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\ntype TProps = NoChildren & {\n  fieldName: XFieldName\n  className?: string\n}\n\nexport const FormDisplayValue: React.FC<TProps> = ({\n  fieldName,\n  className,\n}) => {\n  const field = useXFieldState<string>(fieldName)\n  return useObserver(() => <span className={className}>{field.value}</span>)\n}\n","import { Reorder } from '@material-ui/icons'\nimport React from 'react'\nimport { SortableHandle } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Icon } from './Icon'\n\ninterface IProps {}\n\nconst StyledDragHandle = styled.div`\n  padding: 1rem 0.4rem;\n  cursor: grab;\n`\nexport const DragHandle = SortableHandle<IProps>(() => (\n  <StyledDragHandle>\n    <Icon icon={Reorder} />\n  </StyledDragHandle>\n))\n","import '@speedlo/assets/Flaticon.css'\n\nimport styled from 'styled-components/macro'\n\nimport { Spacing } from '../styling'\n\ninterface IProps {\n  pictogramId: string\n  fontSize?: number\n  fontSizeUnit?: string\n}\n\nconst getFontSize = ({\n  fontSize = 2,\n  fontSizeUnit = Spacing.DefaultSizeUnit,\n}: IProps) => `${fontSize}${fontSizeUnit}`\n\nexport const PictogramDisplay = styled.div.attrs<IProps>(({ pictogramId }) => ({\n  className: getPictogramClassName(pictogramId),\n}))<IProps>`\n  &:before {\n    font-size: ${getFontSize} !important;\n    margin-left: 0.5rem !important;\n  }\n`\n\nexport function getPictogramClassName(pictogramId: string) {\n  return `flaticon-${pictogramId}`\n}\n","import { useRouterContext } from '@speedlo/hooks'\nimport { TValidationSchema, useXForm, XFormErrors } from '@speedlo/xform'\nimport React from 'react'\n\nimport { logForm } from '../../helpers/logger'\nimport { useSnackBar } from '../../hooks/useSnackBar'\n\ninterface IOptions<TValues> {\n  initialValues: TValues\n  loadValues?(initialValues: TValues): Promise<Partial<TValues> | undefined>\n  onSubmit(values: TValues): Promise<any>\n  submitMessage?: string\n  submitRedirectPath?: string\n  validationSchema?: TValidationSchema\n}\n\nexport type TFormLoaderOptions<TValues = any> = IOptions<TValues>\n\nconst logger =\n  process.env.REACT_APP_STAGE !== 'prod' ? obj => logForm('%o', obj) : undefined\n\nexport function useFormLoader<TValues>({\n  onSubmit,\n  initialValues,\n  loadValues,\n  validationSchema,\n  submitMessage,\n  submitRedirectPath,\n}: IOptions<TValues>) {\n  const { history } = useRouterContext()\n  const { enqueueSuccess, enqueueWarning } = useSnackBar()\n\n  const onSubmitSuccess = React.useCallback(\n    async (values: TValues) => {\n      await onSubmit(values)\n      if (submitMessage) {\n        enqueueSuccess(submitMessage)\n      }\n      if (submitRedirectPath) {\n        history.push(submitRedirectPath)\n      }\n    },\n    [enqueueSuccess, history, onSubmit, submitMessage, submitRedirectPath],\n  )\n\n  const onSubmitFailed = React.useCallback(\n    (values: TValues, errors: XFormErrors) => {\n      for (const msg of errors.values()) {\n        if (msg) {\n          enqueueWarning(msg)\n        }\n      }\n    },\n    [enqueueWarning],\n  )\n\n  const hasLoaded = React.useRef(false)\n\n  const onReset = React.useCallback(() => {\n    hasLoaded.current = false\n  }, [])\n\n  const xform = useXForm<TValues>({\n    onSubmit: onSubmitSuccess,\n    onSubmitFailed,\n    onReset,\n    validationSchema,\n    initialValues,\n    initialValidationEnabled: loadValues === undefined,\n    ignoreUnknownFieldsInValidation: true,\n    onFormChanges: logger,\n  })\n\n  React.useEffect(() => {\n    if (!hasLoaded.current) {\n      if (loadValues) {\n        Promise.resolve(loadValues(xform.state.initialValues)).then(values => {\n          if (values) {\n            xform.api.mergeValues(values)\n            xform.state.pristineValues = xform.state.values\n          }\n          xform.api.enableValidation()\n        })\n      }\n      hasLoaded.current = true\n    }\n  }, [loadValues, xform])\n\n  return xform\n}\n","import { useXField, useXFormState, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { SelectControl, TSelectControlProps } from '../../atoms/SelectControl'\nimport { useDropdownFilter } from '../../hooks/useDropdownFilter'\nimport { useDropdownSingle } from '../../hooks/useDropdownSingle'\nimport { idProp } from '../../tools/ramda'\n\ntype TFormDropdownSingleProps<OptionType> = Omit<\n  TSelectControlProps<OptionType>,\n  'value' | 'onChange' | 'isMulti'\n> & {\n  fieldName: XFieldName\n  options: RoA<OptionType>\n  getOptionFilter?(option: OptionType): string\n}\n\nexport const FormDropdownSingle = <TOption extends any>({\n  fieldName,\n  getOptionValue = idProp as any,\n  getOptionFilter,\n  ...selectProps\n}: TFormDropdownSingleProps<TOption>) => {\n  const formState = useXFormState()\n  const field = useXField<MaybeID>(fieldName)\n\n  return useObserver(function useBody() {\n    const dropdownProps = useDropdownSingle({\n      ...selectProps,\n      onSelectionChange: field.setValue,\n      selected: field.value,\n      getOptionValue,\n    })\n    const filterProps = useDropdownFilter({ getOptionFilter })\n\n    return (\n      <SelectControl<TOption>\n        {...dropdownProps}\n        {...filterProps}\n        {...selectProps}\n        onFocus={() => field.setTouched()}\n        invalid={field.touched && field.hasError}\n        isDisabled={formState.isSubmitting}\n      />\n    )\n  })\n}\n","import { Trans } from '@lingui/macro'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { useQMenuGuideDownload } from '../../../graph/generated'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nconst MenuGuideDownloadButton = styled(TouchButton)`\n  white-space: nowrap;\n  margin-left: 2rem;\n  & a {\n    text-decoration: none;\n    color: ${Colors.black};\n    padding: 1rem;\n  }\n`\n\nexport const MenuGuideDownload = observer(() => {\n  const { settings } = useRoot()\n  const { loading, data } = useQMenuGuideDownload(\n    { branchId: settings.branchId },\n    { fetchPolicy: 'cache-first' },\n  )\n  if (loading || !(data && data.companyBranch.foodMenuUrl)) {\n    return null\n  }\n  return (\n    <MenuGuideDownloadButton color={Colors.greyMiddle}>\n      <a\n        href={data.companyBranch.foodMenuUrl}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Trans>Menu codes manual</Trans>\n      </a>\n    </MenuGuideDownloadButton>\n  )\n})\n","import React from 'react'\nimport {\n  arrayMove,\n  SortableContainer,\n  SortableElement,\n  SortEndHandler,\n} from 'react-sortable-hoc'\nimport { TableRowProps } from 'react-virtualized'\n\nimport { DataTable, IDataTableProps } from '../atoms/DataTable'\n\ninterface ISortResult<T> {\n  item: T\n  items: RoA<T>\n  offset: number\n  oldIndex: number\n  newIndex: number\n}\n\nexport type TSortHandler<T> = (\n  result: ISortResult<T>,\n) => Promise<boolean> | void\n\ninterface IProps<T> extends IDataTableProps<T> {\n  items: RoA<T>\n  onSort?: TSortHandler<T>\n}\n\ninterface IState<T> {\n  sortedItems: RoA<T>\n}\n\nconst SortableTableRowRenderer = SortableElement(\n  ({ columns, style, className }: TableRowProps) => (\n    <div style={style} className={className}>\n      {columns}\n    </div>\n  ),\n)\n\nconst SortableDataTableContainer = SortableContainer(DataTable)\n\nexport class SortableDataTable<T> extends React.PureComponent<\n  IProps<T>,\n  IState<T>\n> {\n  state = { sortedItems: this.props.items }\n  static getDerivedStateFromProps = (nextProps: IProps<{}>) => {\n    return {\n      sortedItems: nextProps.items,\n    }\n  }\n  rowRenderer = rowProps => {\n    return <SortableTableRowRenderer {...rowProps} />\n  }\n  onHandleSorting: SortEndHandler = async ({ newIndex, oldIndex }) => {\n    if (newIndex === oldIndex) {\n      return\n    }\n    const currentItems = [...this.state.sortedItems]\n    const sortedItems = arrayMove(\n      this.state.sortedItems as T[],\n      oldIndex,\n      newIndex,\n    )\n\n    this.setState({ sortedItems })\n\n    if (this.props.onSort) {\n      const sortSuccess = this.props.onSort({\n        item: currentItems[oldIndex],\n        items: sortedItems,\n        offset: newIndex - oldIndex,\n        newIndex,\n        oldIndex,\n      })\n      if (sortSuccess && !(await sortSuccess)) {\n        this.setState({\n          sortedItems: currentItems,\n        })\n      }\n    }\n  }\n  render() {\n    const { items, ...props } = this.props\n    return (\n      <SortableDataTableContainer\n        lockAxis=\"y\"\n        useDragHandle={true}\n        onSortEnd={this.onHandleSorting}\n        rowRenderer={this.rowRenderer}\n        {...props}\n        items={this.state.sortedItems}\n      />\n    )\n  }\n}\n","import React from 'react'\n\nimport {\n  checkColumnAccess,\n  Column,\n  ColumnRendererEdit,\n  ColumnRendererRemove,\n  ColumnRendererVisibility,\n  ColumnRendererWithNote,\n  DataTable,\n  DataTableEmptyText,\n  IDataTableProps,\n} from '../../../atoms/DataTable'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { FMenuCategoryInListFragment } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport {\n  SortableDataTable,\n  TSortHandler,\n} from '../../../molecules/SortableDataTable'\nimport { Spacing } from '../../../styling'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\n\ntype TCategory = FMenuCategoryInListFragment\n\ninterface IProps {\n  categories: RoA<TCategory>\n  isSortable?: boolean\n  isLoading?: boolean\n  showEditColumn?: boolean\n  showRemoveColumn?: boolean\n  showVisibilityColumn?: boolean\n  showHeader?: boolean\n  onToggle?(categoryId: ID, visible: boolean): void\n  onRemove?(categoryId: ID): void\n  onSort?: TSortHandler<TCategory>\n  heightStretch?: boolean\n  fullHeight?: boolean\n  noRowsDisplay?: ReactNode\n}\n\nexport const CategoryListTable: React.FC<IProps> = ({\n  categories,\n  children,\n  onToggle,\n  onRemove,\n  onSort,\n  showEditColumn = true,\n  showRemoveColumn = false,\n  showVisibilityColumn = false,\n  showHeader = true,\n  isSortable = false,\n  isLoading = false,\n  heightStretch = false,\n  fullHeight = false,\n  noRowsDisplay = <DataTableEmptyText text={i18n.t`No recipes in category`} />,\n}) => {\n  const props: IDataTableProps<TCategory> = {\n    isLoading,\n    items: categories,\n    disableHeader: !showHeader,\n    heightStretch,\n    fullHeight,\n    noRowsRenderer: () => noRowsDisplay,\n  }\n  const { getCategoryEditRoute } = useMenuRouting()\n  const columns = [\n    showEditColumn && (\n      <Column\n        dataKey=\"id\"\n        width={Spacing.ButtonColumnWidthPx}\n        minWidth={Spacing.ButtonColumnWidthPx}\n        cellRenderer={checkColumnAccess(\n          { canQuery: 'wareCategory' },\n          ColumnRendererEdit,\n        )}\n        cellDataGetter={({ rowData }) =>\n          getCategoryEditRoute(rowData.id, rowData.categoryType.enum)\n        }\n      />\n    ),\n    showRemoveColumn && (\n      <Column\n        dataKey=\"id\"\n        width={Spacing.ButtonColumnWidthPx}\n        minWidth={Spacing.ButtonColumnWidthPx}\n        cellRenderer={ColumnRendererRemove}\n        columnData={{ onRemove }}\n      />\n    ),\n    showVisibilityColumn && (\n      <Column\n        dataKey=\"visible\"\n        width={Spacing.ButtonColumnWidthPx}\n        minWidth={Spacing.ButtonColumnWidthPx}\n        cellRenderer={checkColumnAccess(\n          { canMutate: 'updateWareCategory' },\n          ColumnRendererVisibility,\n        )}\n        columnData={{ onToggle }}\n      />\n    ),\n    <Column\n      dataKey=\"nameLabel\"\n      width={300}\n      label={i18n.t`Name`}\n      cellRenderer={ColumnRendererWithNote}\n      columnData={{ noteKey: 'internalNote' }}\n    />,\n    <Column\n      dataKey=\"countRecipes\"\n      label={i18n.t`Recipe count`}\n      width={100}\n      cellRenderer={({ cellData }) =>\n        `${cellData} ${i18n.t`Recipes`.toLocaleLowerCase()}`\n      }\n    />,\n    children,\n    isSortable && (\n      <Column dataKey=\"id\" width={50} cellRenderer={() => <DragHandle />} />\n    ),\n  ]\n\n  if (isSortable) {\n    return React.createElement(\n      // * Replacing this with Tabular will fix this\n      // @ts-ignore\n      SortableDataTable,\n      {\n        onSort: onSort as any,\n        ...props,\n      },\n      ...columns,\n    )\n  }\n\n  return React.createElement(DataTable, props, ...columns)\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Column } from '../../../atoms/DataTable'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { Headline } from '../../../atoms/Headline'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport {\n  OrderOriginCategoryEnum,\n  useMMenuCategorySort,\n  useMMenuCategoryVisibility,\n  useQMenuCategoryList,\n  useQMenuCategoryOrigins,\n  WareCategoryTypeEnum,\n} from '../../../graph/generated'\nimport { Colors } from '../../../styling'\nimport { MenuCreateButton } from '../atoms/MenuCreateButton'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { CategoryListTable } from '../molecules/CategoryListTable'\n\ninterface IProps {\n  headline: string\n  subHeadline?: string\n  categoryType: WareCategoryTypeEnum\n  heightStretch?: boolean\n}\n\nconst StyledCategoryList = styled.div`\n  .origins span {\n    display: inline-block;\n    margin: 0.2rem;\n    padding: 0.2rem;\n    background-color: ${Colors.greyLight};\n  }\n`\n\nconst CategoryList: React.FC<IProps> = ({\n  headline,\n  subHeadline = false,\n  categoryType,\n}) => {\n  const { settings } = useRoot()\n  const { getStash, loading, updateQuery, refetch } = useQMenuCategoryList({\n    branchId: settings.branchId,\n    categoryType,\n  })\n\n  const { data: dataOrigins } = useQMenuCategoryOrigins(\n    {},\n    { fetchPolicy: 'cache-first' },\n  )\n\n  const originsMap = React.useMemo(() => {\n    if (dataOrigins && dataOrigins.origins) {\n      return dataOrigins.origins.reduce((acc, origin) => {\n        acc[origin.enum] = origin.code\n        return acc\n      }, {}) as Record<OrderOriginCategoryEnum, string>\n    }\n    return {} as Record<OrderOriginCategoryEnum, string>\n  }, [dataOrigins])\n\n  const renderOrigins = React.useCallback(\n    ({ cellData }) => {\n      cellData.sort()\n      return cellData.map(originEnum => (\n        <span key={originEnum}>{originsMap[originEnum]}</span>\n      ))\n    },\n    [originsMap],\n  )\n\n  const [changeVisibility] = useMMenuCategoryVisibility()\n  const onVisibilityToogle = React.useCallback(\n    (categoryId: ID, visible: boolean) => {\n      changeVisibility(\n        { categoryId, visible },\n        {\n          optimisticResponse: {\n            updateWareCategory: {\n              __typename: 'WareCategory',\n              id: categoryId,\n              visible,\n            },\n          },\n        },\n      )\n    },\n    [changeVisibility],\n  )\n\n  const [sortCategory] = useMMenuCategorySort()\n  const onSort = React.useCallback(\n    async ({ item, items, offset }) => {\n      updateQuery(() => ({\n        categories: items,\n      }))\n      const result = await sortCategory({\n        categoryId: item.id,\n        offset,\n      })\n      if (result) {\n        await refetch()\n        return result.success\n      }\n      return false\n    },\n    [refetch, sortCategory, updateQuery],\n  )\n\n  const categories = getStash(data => data.categories)\n\n  const { getCategoryCreateRoute } = useMenuRouting()\n\n  return (\n    <StyledCategoryList>\n      <FlexRowSingle>\n        <FlexColumn widthGrowIndex={1}>\n          <Headline>{headline}</Headline>\n          {subHeadline && <Headline size=\"smaller\">{subHeadline}</Headline>}\n        </FlexColumn>\n        <FlexColumn fixedWidth={true}>\n          <MenuCreateButton routeTo={getCategoryCreateRoute(categoryType)} />\n        </FlexColumn>\n      </FlexRowSingle>\n      <CategoryListTable\n        isLoading={loading}\n        categories={categories || []}\n        onToggle={onVisibilityToogle}\n        isSortable={true}\n        showHeader={false}\n        fullHeight={true}\n        showVisibilityColumn={true}\n        onSort={onSort}\n      >\n        <Column\n          dataKey=\"origins\"\n          width={300}\n          className=\"origins\"\n          cellRenderer={renderOrigins}\n          style={{ fontSize: '0.8rem' }}\n        />\n      </CategoryListTable>\n    </StyledCategoryList>\n  )\n}\n\nexport default observer(CategoryList)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../../../atoms/Card'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { WareCategoryTypeEnum } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { SettingsCompanyBranchPicker } from '../../settings/organisms/SettingsCompanyBranchPicker'\nimport { ROUTE_SETTINGS } from '../../settings/settings.routes'\nimport { MenuGuideDownload } from '../molecules/MenuGuideDownload'\nimport CategoryList from '../organisms/CategoryList'\n\nexport const PartialDataTableContainer = styled.div`\n  height: calc(100% - 3.5rem);\n  padding-top: 1rem;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  -webkit-overflow-scrolling: touch;\n`\n\nexport const MenuCategoryListPage: React.FC = () => (\n  <FullPageLayout\n    pageTitle={i18n.t`Category overview`}\n    useBackButton\n    backRoute={ROUTE_SETTINGS}\n  >\n    <PageLayoutFullHeightItem forcePercentHeightInMobile={100}>\n      <Card stretchToParent={true}>\n        <FlexRowSingle justify=\"start\">\n          <FlexColumn>\n            <SettingsCompanyBranchPicker width={20} />\n          </FlexColumn>\n          <FlexColumn>\n            <MenuGuideDownload />\n          </FlexColumn>\n        </FlexRowSingle>\n\n        <PartialDataTableContainer>\n          <CategoryList\n            categoryType={WareCategoryTypeEnum.Main}\n            headline={i18n.t`Category of recipes`}\n          />\n\n          <VerticalGap size={1.5} />\n\n          <CategoryList\n            categoryType={WareCategoryTypeEnum.SideDish}\n            headline={i18n.t`Category of sidedish`}\n          />\n\n          <VerticalGap size={1.5} />\n\n          <CategoryList\n            categoryType={WareCategoryTypeEnum.Cover}\n            headline={i18n.t`Category of covers`}\n          />\n        </PartialDataTableContainer>\n        {/* <VerticalGap size={1.5} />\n      <Trans>\n        <Headline>Recipes without category</Headline>\n        <Headline size=\"smaller\">are not visible anywhere</Headline>\n      </Trans> */}\n      </Card>\n    </PageLayoutFullHeightItem>\n  </FullPageLayout>\n)\n","import styled from 'styled-components'\n\nimport { Colors, Radiuses } from '../styling'\n\nexport const TopRightButtonContainer = styled.div`\n  position: fixed;\n  z-index: 500;\n  right: 0.5rem;\n  top: 0.5rem;\n  width: 10rem;\n  opacity: 0.96;\n  background: ${Colors.black};\n  border-radius: ${Radiuses.Button};\n`\n","import { useXFieldState } from '@speedlo/xform'\n\nimport { TMenuItemType } from '../menu.types'\n\nexport function useMenuItemType() {\n  const field = useXFieldState<TMenuItemType>('itemType')\n  return field.value\n}\n","import React from 'react'\n\nimport { WareCategoryTypeEnum } from '../../../graph/generated'\nimport { useMenuItemType } from '../hooks/useMenuItemType'\n\ninterface IProps {\n  isMain?: boolean\n  isSideDish?: boolean\n  isCover?: boolean\n  children: ReactNode | ReactNode[]\n}\n\nexport const IsMenuItemType: React.FC<IProps> = ({\n  isMain,\n  isSideDish,\n  isCover,\n  children,\n}) => {\n  const itemType = useMenuItemType()\n  if (\n    (isMain === true && itemType === WareCategoryTypeEnum.Main) ||\n    (isSideDish === true && itemType === WareCategoryTypeEnum.SideDish) ||\n    (isCover === true && itemType === WareCategoryTypeEnum.Cover)\n  ) {\n    return <>{children}</>\n  }\n  return null\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { FormSubmitButton } from '../../../components/forms/FormSubmitButton'\nimport { useCanMutate } from '../../../hooks/useAccessGuard'\n\ninterface IProps {\n  isCreate: boolean\n  createMutation: string\n  updateMutation: string\n}\n\nexport const MenuSubmitButton: React.FC<IProps> = ({\n  isCreate,\n  createMutation,\n  updateMutation,\n}) => {\n  const canSubmit = useCanMutate(isCreate ? createMutation : updateMutation)\n  if (!canSubmit) {\n    return null\n  }\n\n  return (\n    <FormSubmitButton>\n      {isCreate ? <Trans>Create</Trans> : <Trans>Save</Trans>}\n    </FormSubmitButton>\n  )\n}\n","import { useXFieldState } from '@speedlo/xform'\nimport React from 'react'\n\nimport { LanguageEnum } from '../../../graph/generated'\nimport { RM } from '../../../tools/ramda'\nimport { useMenuModel } from './useMenu'\n\nconst byLanguage = RM.propEq('language')\n\nexport interface WithLanguage {\n  language: LanguageEnum\n}\n\nexport interface WithTranslations<T extends WithLanguage> {\n  translations: T[]\n}\n\nexport function useMenuTranslations<T extends WithLanguage>() {\n  const menuModel = useMenuModel()\n  const field = useXFieldState<WithLanguage[]>('translations')\n  const translations = field.value\n\n  const findTranslation = React.useCallback(\n    (language: LanguageEnum): T | undefined => {\n      return (\n        translations &&\n        (translations.find(byLanguage(language)) as T | undefined)\n      )\n    },\n    [translations],\n  )\n\n  const getTranslation = React.useCallback(\n    (language: LanguageEnum): T => {\n      return findTranslation(language)!\n    },\n    [findTranslation],\n  )\n\n  const initTranslation = React.useCallback(\n    (language: LanguageEnum, translated: Omit<T, 'language'>): T => {\n      const translation = findTranslation(language)\n      if (!translation) {\n        translations.push({ language, ...translated })\n        return getTranslation(language)\n      }\n      return translation\n    },\n    [findTranslation, getTranslation, translations],\n  )\n\n  const hasTranslation = React.useCallback(\n    (language: LanguageEnum) => {\n      return !!findTranslation(language)\n    },\n    [findTranslation],\n  )\n\n  const shouldLoadTranslation = React.useCallback(() => {\n    return !(\n      menuModel.isDefaultLanguageSelected ||\n      hasTranslation(menuModel.currentLanguage)\n    )\n  }, [hasTranslation, menuModel])\n\n  return {\n    shouldLoadTranslation,\n    findTranslation,\n    hasTranslation,\n    getTranslation,\n    initTranslation,\n  }\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useQMenuCategoryFormTrans } from '../../../graph/generated'\nimport { useMenuModel } from '../hooks/useMenu'\nimport { useMenuTranslations } from '../hooks/useMenuTranslations'\n\ntype TProps = NoChildren & {\n  categoryId: ID\n  isCreate: boolean\n}\n\nexport const CategoryTranslationLoader = observer<TProps>(\n  ({ categoryId, isCreate }) => {\n    const menuModel = useMenuModel()\n    const { shouldLoadTranslation, initTranslation } = useMenuTranslations()\n\n    const language = menuModel.currentLanguage\n    const { getStash } = useQMenuCategoryFormTrans(\n      { language, categoryId },\n      { fetchPolicy: 'no-cache', skip: isCreate || !shouldLoadTranslation() },\n    )\n\n    const translated = getStash(\n      ({ category: { nameLabel, internalNoteLabel } }) => ({\n        nameLabel,\n        internalNoteLabel,\n      }),\n    )\n\n    React.useEffect(() => {\n      if (translated) {\n        initTranslation(language, translated)\n      }\n    }, [initTranslation, language, translated])\n\n    return null\n  },\n)\n","import { TValidationSchema, XFormRender } from '@speedlo/xform'\nimport React from 'react'\n\nimport { useFormLoader } from '../../../components/forms/useFormLoader'\n\ninterface IProps<TValues> {\n  isCreate: boolean\n  initialValues: TValues\n  loadUpdateValues(values: TValues): Promise<Partial<TValues> | undefined>\n  loadCreateDefaults?(values: TValues): Promise<Partial<TValues> | undefined>\n  onCreate(values: TValues): Promise<any>\n  onUpdate(values: TValues): Promise<any>\n  createSuccessMessage?: string\n  updateSuccessMessage?: string\n  successRedirectPath?: string\n  validationSchema: TValidationSchema\n  children: ReactNode | ReactNode[]\n}\n\nexport function MenuFormLoader<TValues>({\n  isCreate,\n  initialValues,\n  loadCreateDefaults,\n  loadUpdateValues,\n  onCreate,\n  onUpdate,\n  createSuccessMessage,\n  updateSuccessMessage,\n  successRedirectPath,\n  validationSchema,\n  children,\n}: IProps<TValues>) {\n  const xform = useFormLoader({\n    initialValues,\n    validationSchema,\n    onSubmit: isCreate ? onCreate : onUpdate,\n    loadValues: isCreate ? loadCreateDefaults : loadUpdateValues,\n    submitMessage: isCreate ? createSuccessMessage : updateSuccessMessage,\n    submitRedirectPath: successRedirectPath,\n  })\n  return <XFormRender xform={xform}>{children}</XFormRender>\n}\n","import { useObjectValidation } from '@speedlo/xform'\nimport React from 'react'\n\nimport {\n  useLazyQMenuCategoryForm,\n  useMMenuCategoryCreate,\n  useMMenuCategoryUpdate,\n  WareCategoryTypeEnum,\n} from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { idProp } from '../../../tools/ramda'\nimport { useMenuModel } from '../hooks/useMenu'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { ROUTE_MENU_CATEGORY } from '../menu.routes'\nimport { TCategoryFormValues } from '../menu.types'\nimport { CategoryTranslationLoader } from '../molecules/CategoryTranslationLoader'\nimport { MenuFormLoader } from '../molecules/MenuFormLoader'\n\ninterface IProps {\n  isCreate: boolean\n  categoryId: ID\n  categoryType: WareCategoryTypeEnum\n  children: ReactNode\n}\n\nexport const CategoryFormLoader: React.FC<IProps> = ({\n  isCreate,\n  categoryId,\n  categoryType,\n  children,\n}) => {\n  const menuModel = useMenuModel()\n  const { redirectToCategoryList } = useMenuRouting()\n\n  const validationSchema = useObjectValidation(yup => ({\n    nameLabel: yup\n      .string()\n      .required(i18n.t`Category name in default language must be entered.`),\n  }))\n\n  const [queryCategory] = useLazyQMenuCategoryForm()\n  const loadUpdateValues = React.useCallback(\n    async (values: TCategoryFormValues) => {\n      const result = await queryCategory(\n        { categoryId: categoryId!, language: menuModel.defaultLanguage },\n        { fetchPolicy: 'no-cache' },\n      )\n      if (result === null) {\n        redirectToCategoryList()\n        return values\n      }\n      return {\n        ...result.category,\n        itemType: categoryType,\n        origins: [...result.category.origins],\n      }\n    },\n    [\n      categoryId,\n      categoryType,\n      menuModel.defaultLanguage,\n      queryCategory,\n      redirectToCategoryList,\n    ],\n  )\n\n  const [updateCategory] = useMMenuCategoryUpdate()\n  const executeUpdate = React.useCallback(\n    (categoryId: ID, values: TCategoryFormValues) =>\n      updateCategory({\n        categoryId,\n        category: {\n          ...getWriteVariables(values),\n          translations: values.translations,\n        },\n      }),\n    [updateCategory],\n  )\n\n  const onUpdate = React.useCallback(\n    (values: TCategoryFormValues) => executeUpdate(categoryId, values),\n    [categoryId, executeUpdate],\n  )\n\n  const [createCategory] = useMMenuCategoryCreate()\n  const onCreate = React.useCallback(\n    async (values: TCategoryFormValues) => {\n      const result = await createCategory({\n        category: {\n          companyBranch: menuModel.branchId,\n          wareCategoryType: categoryType,\n          ...getWriteVariables(values),\n        },\n      })\n      if (result && values.translations && values.translations.length > 0) {\n        const categoryId = result.createCategory.id\n        executeUpdate(categoryId, values)\n      }\n    },\n    [categoryType, createCategory, executeUpdate, menuModel],\n  )\n\n  return (\n    <MenuFormLoader<TCategoryFormValues>\n      isCreate={isCreate}\n      onCreate={onCreate}\n      onUpdate={onUpdate}\n      initialValues={getDefaults(categoryType)}\n      loadUpdateValues={loadUpdateValues}\n      validationSchema={validationSchema}\n      successRedirectPath={ROUTE_MENU_CATEGORY}\n    >\n      <>\n        <CategoryTranslationLoader\n          categoryId={categoryId}\n          isCreate={isCreate}\n        />\n        {children}\n      </>\n    </MenuFormLoader>\n  )\n}\n\nfunction getDefaults(categoryType: WareCategoryTypeEnum): TCategoryFormValues {\n  return {\n    id: 'NEW',\n    itemType: categoryType,\n    visible: true,\n    internalNoteLabel: '',\n    pictogram: '',\n    nameLabel: '',\n    minCount: 0,\n    maxCount: 0,\n    recipes: [],\n    origins: [],\n    translations: [],\n  }\n}\n\nfunction getWriteVariables(formValues: TCategoryFormValues) {\n  return {\n    nameLabel: formValues.nameLabel!,\n    internalNoteLabel: formValues.internalNoteLabel,\n    enabled: formValues.visible,\n    pictogram: formValues.pictogram,\n    recipes: formValues.recipes.map(idProp),\n    minCount: formValues.minCount,\n    maxCount: formValues.maxCount,\n    orderOriginCategories: formValues.origins,\n  }\n}\n","import { useRouterContext } from '@speedlo/hooks'\nimport { useXField, useXFormState, XFieldName } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useAccessGuard } from '../../hooks/useAccessGuard'\nimport { TouchButtonDelete } from '../../molecules/TouchButtonDelete'\n\ntype TProps = NoChildren & {\n  fieldName?: XFieldName\n  mutationName?: string\n  confirmText: string\n  onDelete(id: ID): Promise<any>\n}\n\nexport const FormDeleteButton = observer<TProps>(\n  ({ fieldName = 'id', mutationName, confirmText, onDelete }) => {\n    const field = useXField<ID>(fieldName)\n    const canDelete = useAccessGuard([], mutationName ? [mutationName] : [])\n\n    const { history } = useRouterContext()\n    const { isSubmitting } = useXFormState()\n\n    if (!canDelete || field.value === 'NEW') {\n      return null\n    }\n\n    return (\n      <TouchButtonDelete\n        type=\"button\"\n        disabled={isSubmitting}\n        confirmText={confirmText}\n        onDelete={async () => {\n          await onDelete(field.value)\n          history.goBack()\n        }}\n      />\n    )\n  },\n)\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { mediaMobile } from '../../../app/Responsive'\nimport { Spacing } from '../../../styling'\n\ninterface IStyledProps {\n  primaryColumnWidth?: string\n  secondaryColumnWidth?: string\n}\n\ninterface IProps extends IStyledProps {\n  contentPrimary: React.ReactNode\n  contentSecondary?: React.ReactNode\n  contentTopRight?: React.ReactNode\n  contentBottomRight?: React.ReactNode\n}\n\nconst StyledFormLayoutGrid = styled.div<IStyledProps>`\n  display: grid;\n  margin: -${Spacing.Middle};\n  grid-column-gap: ${Spacing.Middle};\n  grid-template-columns: ${Spacing.Middle} ${({ primaryColumnWidth }) =>\n      primaryColumnWidth} ${({ secondaryColumnWidth }) => secondaryColumnWidth} auto;\n  grid-template-rows: ${Spacing.Middle} auto 1fr auto ${Spacing.Middle};\n  grid-template-areas:\n    '. .              .                contentTopRight'\n    '. contentPrimary contentSecondary contentTopRight'\n    '. contentPrimary contentSecondary .'\n    '. contentPrimary contentSecondary contentBottomRight'\n    '. .              .                contentBottomRight';\n\n  .contentPrimary {\n    grid-area: contentPrimary;\n  }\n  .contentSecondary {\n    grid-area: contentSecondary;\n  }\n  .contentTopRight {\n    grid-area: contentTopRight;\n    justify-self: end;\n    align-self: start;\n  }\n  .contentBottomRight {\n    grid-area: contentBottomRight;\n    justify-self: end;\n    align-self: end;\n  }\n\n  ${mediaMobile`\n    grid-template-columns: ${Spacing.Middle} 1fr ${Spacing.Middle};\n    grid-template-rows: auto auto auto auto;\n    grid-row-gap: ${Spacing.Middle};\n    grid-template-areas:\n      '. contentTopRight    contentTopRight'\n      '. contentPrimary     .'\n      '. contentSecondary   .'\n      '. contentBottomRight contentBottomRight'\n  `};\n`\n\nexport const FormLayoutGrid: React.FC<IProps> = ({\n  contentPrimary,\n  contentSecondary,\n  contentTopRight,\n  contentBottomRight,\n  primaryColumnWidth = '1fr',\n  secondaryColumnWidth = '0',\n}) => {\n  return (\n    <StyledFormLayoutGrid\n      primaryColumnWidth={primaryColumnWidth}\n      secondaryColumnWidth={secondaryColumnWidth}\n    >\n      <div className=\"contentPrimary\">{contentPrimary}</div>\n      <div className=\"contentSecondary\">{contentSecondary}</div>\n      <div className=\"contentTopRight\">{contentTopRight}</div>\n      <div className=\"contentBottomRight\">{contentBottomRight}</div>\n    </StyledFormLayoutGrid>\n  )\n}\n","import React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormDropdownMulti } from '../../../components/forms/FormDropdownMulti'\nimport {\n  QMenuCategoryOriginsOrigins,\n  useQMenuCategoryOrigins,\n} from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\nimport { i18n } from '../../../i18n'\nimport { RM } from '../../../tools/ramda'\n\nexport const CategoryOriginsField: React.FC = () => {\n  const { data, loading } = useQMenuCategoryOrigins()\n  return (\n    <IconLine label={i18n.t`cat. origins`} labelWidth={7}>\n      <FormDropdownMulti<QMenuCategoryOriginsOrigins>\n        fieldName=\"origins\"\n        isLoading={loading}\n        options={data ? data.origins : ARRAY_EMPTY}\n        getOptionLabel={RM.prop('code')}\n        getOptionValue={RM.prop('enum')}\n      />\n    </IconLine>\n  )\n}\n","import { pictograms as availablePictograms } from '@speedlo/assets'\nimport { useXField } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { PictogramDisplay } from '../../../atoms/PictogramDisplay'\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { RM } from '../../../tools/ramda'\nimport { TCategoryFormValues } from '../menu.types'\n\ninterface IProps {}\n\ninterface IFormValue {\n  pictogram: string\n}\n\nexport const CategoryPictogramSelect: React.FC<IProps> = () => {\n  const field = useXField<TCategoryFormValues['pictogram']>('pictogram')\n\n  return useObserver(() => (\n    <SelectControl<IFormValue>\n      value={field.value ? { pictogram: field.value } : null}\n      onChange={value => {\n        if (value) {\n          field.setValue((value as IFormValue).pictogram)\n        }\n      }}\n      options={availablePictograms.map(pictogram => ({ pictogram }))}\n      getOptionValue={RM.prop('pictogram')}\n      formatOptionLabel={({ pictogram }) => (\n        <PictogramDisplay pictogramId={pictogram} fontSize={2} />\n      )}\n      components={{\n        SingleValue: ({ data }) => (\n          <PictogramDisplay pictogramId={data.pictogram} fontSize={4} />\n        ),\n      }}\n      styles={{\n        container: base => ({ ...base, width: '8rem' }),\n        menuList: base => ({ ...base, maxHeight: '35rem' }),\n      }}\n      isClearable={false}\n      isSearchable={false}\n      minWidth={8}\n    />\n  ))\n}\n","import { getFlag } from '@speedlo/assets'\nimport { useXFieldForInput, useXFormState, XFieldName } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { StyledFormInput } from '../../../atoms/FormInputStyled'\nimport { i18n } from '../../../i18n'\nimport { useMenuModel } from '../hooks/useMenu'\nimport { useMenuTranslations } from '../hooks/useMenuTranslations'\n\ninterface IProps {\n  fieldName: XFieldName\n  placeholder?: string\n}\n\nconst StyledMenuTranslationInput = styled.div`\n  position: relative;\n\n  .original {\n    font-size: 0.9rem;\n    padding: 0.3rem 0;\n    opacity: 0.7;\n  }\n\n  .original img {\n    width: 1.5rem;\n    margin: 0 0.6rem;\n  }\n\n  .current-language {\n    width: 1.5rem;\n    position: absolute;\n    right: 0.5rem;\n    top: 0.8rem;\n    border: 1px #aaa solid;\n    box-sizing: content-box;\n  }\n`\n\nexport const MenuTranslationInput = observer<IProps>(\n  ({ fieldName, placeholder }) => {\n    const { isSubmitting } = useXFormState()\n    const [field, getFieldProps] = useXFieldForInput(fieldName)\n    const menuModel = useMenuModel()\n\n    const { getTranslation, findTranslation } = useMenuTranslations()\n\n    const onChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n      const value = ev.target.value\n      const translation = getTranslation(menuModel.currentLanguage)\n      translation[field.name] = value\n    }\n\n    const isTranslating = !menuModel.isDefaultLanguageSelected\n\n    const translation = findTranslation(menuModel.currentLanguage)\n    const value = isTranslating\n      ? translation && translation[field.name]\n      : field.value\n\n    const fieldProps = getFieldProps()\n\n    return (\n      <StyledMenuTranslationInput>\n        <StyledFormInput\n          {...fieldProps}\n          disabled={isSubmitting}\n          value={value || ''}\n          onChange={isTranslating ? onChange : fieldProps.onChange}\n          inputFullWidth={true}\n          invalid={!isTranslating && field.touched && field.hasError}\n          placeholder={placeholder}\n        />\n        <img\n          className=\"current-language\"\n          src={getFlag(menuModel.currentLanguage)}\n          alt=\"translation\"\n        />\n        {isTranslating && (\n          <div\n            className=\"original\"\n            onClick={() => menuModel.setLanguage(menuModel.defaultLanguage)}\n          >\n            <img src={getFlag(menuModel.defaultLanguage)} alt=\"original text\" />\n            {field.value || <i>{i18n.t`No text is filled`}</i>}\n          </div>\n        )}\n      </StyledMenuTranslationInput>\n    )\n  },\n)\n","import { Trans } from '@lingui/macro'\nimport { XFieldName } from '@speedlo/xform'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormInput } from '../../../components/forms/FormInput'\nimport { MenuTranslationInput } from '../atoms/MenuTranslationInput'\n\ninterface IProps {\n  fieldName?: XFieldName\n  label?: string\n  placeholder?: string\n  localized?: boolean\n}\n\nexport const MenuInternalNoteInput: React.FC<IProps> = ({\n  fieldName = 'internalNote',\n  label = <Trans>Internal note</Trans>,\n  placeholder,\n  localized = false,\n}) => {\n  const props = {\n    fieldName,\n    placeholder,\n    fullWidth: true,\n  }\n  return (\n    <IconLine label={label} labelWidth={7}>\n      {localized ? (\n        <MenuTranslationInput {...props} />\n      ) : (\n        <FormInput {...props} />\n      )}\n    </IconLine>\n  )\n}\n","import { LanguagePicker } from '@speedlo/ui'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { Colors } from '../../../styling'\nimport { RM } from '../../../tools/ramda'\nimport { useMenuModel } from '../hooks/useMenu'\n\ninterface IProps {}\n\nconst StyledLanguagePicker = styled(LanguagePicker)`\n  transform: scale(2) translateY(0.5rem);\n  transform-origin: right;\n  height: 2.5rem;\n`\n\nexport const MenuLanguageSwitch = observer<IProps>(() => {\n  const menuModel = useMenuModel()\n  return (\n    <div>\n      <StyledLanguagePicker\n        availableLanguages={menuModel.supportedLanguages}\n        selectedLanguage={menuModel.currentLanguage}\n        onChange={menuModel.setLanguage}\n        formatLanguage={RM.identity}\n        arrowColor={Colors.greyMiddle}\n      />\n    </div>\n  )\n})\n","import { Label } from '@material-ui/icons'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormInput, FormInputProps } from '../../../components/forms/FormInput'\nimport { Spacing } from '../../../styling'\nimport { MenuTranslationInput } from '../atoms/MenuTranslationInput'\n\ninterface IProps extends Partial<FormInputProps> {\n  localized?: boolean\n}\n\nexport const MenuNameInput: React.FC<IProps> = ({\n  fieldName = 'nameLabel',\n  localized = false,\n  ...rest\n}) => {\n  const props = {\n    fieldName,\n    ...rest,\n  }\n  return (\n    <IconLine icon={Label} labelWidth={Spacing.DefaultLabelWidth}>\n      {localized ? (\n        <MenuTranslationInput {...props} />\n      ) : (\n        <FormInput {...props} />\n      )}\n    </IconLine>\n  )\n}\n","import React from 'react'\n\nimport { FormGrid } from '../../../atoms/FormGrid'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormDeleteButton } from '../../../components/forms/FormDeleteButton'\nimport { FormCheckbox } from '../../../components/forms/FormInputCheckbox'\nimport { useMMenuCategoryDelete } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { FormLayoutGrid } from '../atoms/FormLayoutGrid'\nimport { IsMenuItemType } from '../atoms/IsMenuItemType'\nimport { CategoryOriginsField } from '../molecules/CategoryOriginsField'\nimport { CategoryPictogramSelect } from '../molecules/CategoryPictogramSelect'\nimport { MenuInternalNoteInput } from '../molecules/MenuInternalNoteField'\nimport { MenuLanguageSwitch } from '../molecules/MenuLanguageSwitch'\nimport { MenuNameInput } from '../molecules/MenuNameInput'\n\ninterface IProps {}\n\nexport const CategoryFormPrimary: React.FC<IProps> = () => {\n  const [deleteCategory] = useMMenuCategoryDelete()\n  return (\n    <FormLayoutGrid\n      primaryColumnWidth=\"minmax(10rem, 45rem)\"\n      secondaryColumnWidth=\"14rem\"\n      contentPrimary={\n        <FormGrid>\n          <MenuNameInput placeholder={i18n.t`Category name`} localized />\n          <MenuInternalNoteInput\n            placeholder={i18n.t`Category internal note`}\n            fieldName=\"internalNoteLabel\"\n            localized\n          />\n          <CategoryOriginsField />\n          <IconLine>\n            <FormCheckbox\n              fieldName=\"visible\"\n              label={i18n.t`To show this category`}\n            />\n          </IconLine>\n        </FormGrid>\n      }\n      contentSecondary={\n        <IsMenuItemType isMain>\n          <CategoryPictogramSelect />\n        </IsMenuItemType>\n      }\n      contentTopRight={<MenuLanguageSwitch />}\n      contentBottomRight={\n        <FormDeleteButton\n          mutationName=\"destroyWareCategory\"\n          confirmText={i18n.t`Remove this category?`}\n          onDelete={categoryId => deleteCategory({ categoryId })}\n        />\n      }\n    />\n  )\n}\n","import { useObserver } from 'mobx-react-lite'\n\nimport { useRoot } from '../atoms/RootProvider'\n\nexport function useSettingsBranch() {\n  const { settings } = useRoot()\n  return useObserver(() => settings.branchId)\n}\n","import { useStateRef } from '@speedlo/hooks'\nimport React, { useCallback } from 'react'\n\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport {\n  SelectControl,\n  TSelectControlProps,\n} from '../../../atoms/SelectControl'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { RM } from '../../../tools/ramda'\n\ninterface IProps<OptionType> extends TSelectControlProps<OptionType> {\n  onAdd(option: OptionType): void\n  addLabel?: string\n  addButtonText?: string\n  isLoading?: boolean\n}\n\nexport function MenuSuggestionPanel<\n  OptionType extends { id: ID; nameLabel: Maybe<string> }\n>(props: IProps<OptionType>) {\n  const {\n    onAdd,\n    addLabel = i18n.t`Add`,\n    addButtonText = i18n.t`Add`,\n    isLoading = false,\n    ...selectProps\n  } = props\n\n  const [getSelected, setSelected] = useStateRef<Maybe<OptionType>>(null)\n\n  const onConfirm = useCallback(() => {\n    const selected = getSelected()\n    if (selected !== null) {\n      onAdd(selected)\n      setSelected(null)\n    }\n  }, [getSelected, onAdd, setSelected])\n\n  const onKeyDown = useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>) => {\n      if (ev.key === 'Enter') {\n        onConfirm()\n      }\n    },\n    [onConfirm],\n  )\n\n  const onSelect = useCallback(\n    option => {\n      setSelected(option || null)\n    },\n    [setSelected],\n  )\n\n  return (\n    <FlexRowSingle justify=\"flex-start\">\n      <FlexColumn fixedWidth={true} width=\"4rem\" margin=\"auto 0\">\n        {addLabel}\n      </FlexColumn>\n      <FlexColumn fixedWidth={true} width=\"20rem\" margin=\"auto 0\">\n        <SelectControl<OptionType>\n          value={getSelected()}\n          onChange={onSelect}\n          onKeyDown={onKeyDown}\n          isLoading={isLoading}\n          isMulti={false}\n          isClearable={false}\n          getOptionValue={RM.prop('id')}\n          getOptionLabel={RM.propOr('', 'nameLabel')}\n          {...selectProps}\n        />\n      </FlexColumn>\n      <FlexColumn fixedWidth={true} width=\"10rem\" margin=\"auto 0\">\n        <TouchButton\n          text={addButtonText}\n          disabled={getSelected() === null}\n          onClick={onConfirm}\n        />\n      </FlexColumn>\n    </FlexRowSingle>\n  )\n}\n","import React from 'react'\n\nimport { WarePriceTypeEnum } from '../../../graph/generated'\nimport { getPriceTypesLabels } from '../menu.labels'\n\nexport const priceTypes = [\n  WarePriceTypeEnum.Delivery,\n  WarePriceTypeEnum.Inhouse,\n]\n\nexport function usePriceType() {\n  const priceTypeLabels = React.useMemo(getPriceTypesLabels, [])\n  return {\n    priceTypes,\n    priceTypeLabels,\n  }\n}\n","import { useXField, useXFormState } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport {\n  arrayMove,\n  SortableContainer,\n  SortableElement,\n  SortEndHandler,\n} from 'react-sortable-hoc'\nimport styled from 'styled-components/macro'\n\nimport { mediaDesktop, useResponsive } from '../../../app/Responsive'\nimport { DataList } from '../../../atoms/DataList'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { NoteText } from '../../../atoms/NoteText'\nimport {\n  FMenuCategoryInFormRecipes,\n  FMenuRecipeInListFragment,\n  useQMenuRecipeList,\n} from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\nimport { formatPrice } from '../../../helpers/formats'\nimport { RM } from '../../../tools/ramda'\nimport { useSettingsBranch } from '../../../hooks/useSettingsBranch'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonRemove } from '../../../molecules/TouchButtonRemove'\nimport { Spacing } from '../../../styling'\nimport { idPropEq } from '../../../tools/ramda'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\nimport { useMenuItemType } from '../hooks/useMenuItemType'\nimport { usePriceType } from '../hooks/usePriceType'\n\ninterface IProps {}\n\nconst StyledCategoryRecipesView = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100% - 2rem);\n  width: 100%;\n\n  & .fixed-row {\n    flex: 0 0 auto;\n  }\n  & .move-cell {\n    ${mediaDesktop`\n      cursor: move;\n    `}\n  }\n`\n\nconst StyledFormStretchedRow = styled.div`\n  flex: 1 1 0;\n  margin: 1rem 0 0 1rem;\n`\n\nconst SortableRecipes = SortableContainer(StyledFormStretchedRow)\n\nconst StyledRecipeRow = styled.div`\n  display: grid;\n  grid-gap: 1rem;\n  grid-template-columns: ${Spacing.ButtonColumnWidthPx}px 100px 3fr 1fr 1fr 50px;\n`\n\ntype TCategoryRecipe = FMenuCategoryInFormRecipes\n\ninterface IRecipeRow {\n  recipe: TCategoryRecipe\n  onRemove(): void\n}\n\nconst SortableRecipe = SortableElement(({ recipe, onRemove }: IRecipeRow) => {\n  const { priceTypes, priceTypeLabels } = usePriceType()\n  const prices = priceTypes.map(priceType => {\n    const foundPrice = recipe.prices.find(\n      RM.pathEq(['priceType', 'enum'], priceType),\n    )\n    return (\n      <div className=\"move-cell\" key={priceType}>\n        <NoteText>{priceTypeLabels[priceType]}</NoteText>\n        {foundPrice ? (\n          formatPrice(foundPrice.price.value, foundPrice.price.currency.code)\n        ) : (\n          <i>{i18n.t`Not set`.toLocaleLowerCase()}</i>\n        )}\n      </div>\n    )\n  })\n\n  return (\n    <StyledRecipeRow>\n      <div>\n        <TouchButtonRemove onClick={onRemove} />\n      </div>\n      <div className=\"move-cell\">{recipe.code}</div>\n      <div className=\"move-cell\">\n        {recipe.nameLabel}\n        <NoteText>{recipe.internalNote || ''}</NoteText>\n      </div>\n      {prices}\n      <DragHandle />\n    </StyledRecipeRow>\n  )\n})\n\nexport const CategoryRecipesView: React.FC<IProps> = () => {\n  const branchId = useSettingsBranch()\n  const categoryType = useMenuItemType()\n\n  const { data, loading } = useQMenuRecipeList({\n    branchId,\n    categoryType,\n  })\n\n  const field = useXField<TCategoryRecipe[]>('recipes')\n\n  const onHandleSorting: SortEndHandler = React.useCallback(\n    async ({ newIndex, oldIndex }) => {\n      if (newIndex === oldIndex) {\n        return\n      }\n      field.setValue(arrayMove(field.value, oldIndex, newIndex))\n    },\n    [field],\n  )\n\n  const unselectedRecipesOnly = RM.differenceWith<\n    FMenuRecipeInListFragment,\n    TCategoryRecipe\n  >(RM.eqProps('id'))\n\n  const { isDesktop } = useResponsive()\n  const formState = useXFormState()\n\n  return useObserver(() => (\n    <StyledCategoryRecipesView>\n      <div className=\"fixed-row\">\n        <MenuSuggestionPanel<TCategoryRecipe>\n          isLoading={loading}\n          isDisabled={formState.isSubmitting}\n          options={\n            data\n              ? unselectedRecipesOnly(data.recipes, field.value)\n              : ARRAY_EMPTY\n          }\n          onAdd={addedRecipe => field.value.push(addedRecipe)}\n          getOptionLabel={({ nameLabel, code }) => `${code} - ${nameLabel}`}\n        />\n      </div>\n      <SortableRecipes\n        lockAxis=\"y\"\n        lockToContainerEdges={true}\n        onSortEnd={onHandleSorting}\n        useDragHandle={!isDesktop}\n      >\n        <DataList\n          items={field.value}\n          heightStretch={true}\n          rowHeight={60}\n          renderItem={(recipe, index) => (\n            <SortableRecipe\n              recipe={recipe}\n              onRemove={() => {\n                field.setValue(RM.reject(idPropEq(recipe.id), field.value))\n              }}\n              index={index}\n            />\n          )}\n        />\n      </SortableRecipes>\n    </StyledCategoryRecipesView>\n  ))\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { FormInputStyled } from '../../../atoms/FormInputStyled'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { StyledCheckbox } from '../../../atoms/StyledCheckbox'\nimport { TouchButton } from '../../../molecules/TouchButton'\n\ninterface IProps {\n  id: string\n  count: number\n  label: ReactNode | string\n  enabled: boolean\n  onChange(count: number): void\n}\n\nconst StyledCategoryRequirementControl = styled.div`\n  display: flex;\n  align-items: center;\n  & > label {\n    min-width: 5rem;\n  }\n  & > * {\n    margin: 0.2rem 0.5rem;\n  }\n  input.count {\n    font-size: 1.5rem;\n    line-height: 1.5rem;\n    text-align: center;\n  }\n`\n\nexport const CategoryRequirementControl: React.FC<IProps> = ({\n  count,\n  label,\n  enabled,\n  onChange,\n  id,\n}) => {\n  const countRef = React.useRef(count)\n  return (\n    <StyledCategoryRequirementControl>\n      <label htmlFor={id}>{label}</label>\n      <Sizer width={3}>\n        <FormInputStyled\n          id={id}\n          value={count === 0 ? '' : count}\n          onChange={ev => {\n            if (ev.target.validity.valid) {\n              onChange(Number.parseInt(ev.target.value, 10))\n            }\n          }}\n          onFocus={ev => {\n            ev.target.select()\n          }}\n          disabled={count === 0 || !enabled}\n          inputFullWidth={true}\n          type=\"tel\"\n          pattern=\"^[1-9]\\d*$\"\n          className=\"count\"\n        />\n      </Sizer>\n      <Sizer width={4}>\n        <TouchButton\n          disabled={!enabled || count <= 0}\n          onClick={() => onChange(count - 1)}\n        >\n          ➖\n        </TouchButton>\n      </Sizer>\n      <Sizer width={4}>\n        <TouchButton disabled={!enabled} onClick={() => onChange(count + 1)}>\n          ➕\n        </TouchButton>\n      </Sizer>\n      <div>\n        <StyledCheckbox>\n          <input\n            type=\"checkbox\"\n            id={`${id}-nolimit`}\n            checked={count === 0}\n            disabled={!enabled}\n            onChange={ev => {\n              if (count === 0) {\n                onChange(countRef.current || 1)\n              } else {\n                countRef.current = count\n                onChange(0)\n              }\n            }}\n          />\n          <label htmlFor={`${id}-nolimit`}>\n            <Trans>Unlimited</Trans>\n          </label>\n        </StyledCheckbox>\n      </div>\n    </StyledCategoryRequirementControl>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { useAutorun } from '@speedlo/hooks'\nimport { useXField } from '@speedlo/xform'\nimport _ from 'lodash'\nimport { observer, useLocalStore } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { SelectControlFlat } from '../../../atoms/SelectControlFlat'\nimport { i18n } from '../../../i18n'\nimport { CategoryRequirementControl } from '../molecules/CategoryRequirementControl'\n\ninterface IRequirement {\n  label: string\n  min?: number\n  max?: number\n}\n\nexport const getRulesMap = (): Record<string, IRequirement> => ({\n  noLimit: {\n    label: i18n.t`No limitation`,\n    min: 0,\n    max: 0,\n  },\n  optional: {\n    label: i18n.t`One at most`,\n    min: 0,\n    max: 1,\n  },\n  required: {\n    label: i18n.t`One at least`,\n    min: 1,\n    max: 0,\n  },\n  onlyOne: {\n    label: i18n.t`Exactly one`,\n    min: 1,\n    max: 1,\n  },\n  custom: {\n    label: i18n.t`Custom range`,\n  },\n})\n\ntype TRule = keyof ReturnType<typeof getRulesMap>\n\nexport const CategoryRequirementsForm = observer(() => {\n  const ruleMap = React.useMemo(getRulesMap, [])\n\n  const state = useLocalStore(() => ({\n    currentRule: 'noLimit' as TRule,\n  }))\n\n  const setRule = (rule: TRule) => {\n    state.currentRule = rule\n  }\n\n  const minCount = useXField<number>('minCount')\n  const maxCount = useXField<number>('maxCount')\n\n  useAutorun(() => {\n    if (state.currentRule !== 'custom') {\n      const found = _.findKey(\n        ruleMap,\n        ({ min, max }) => min === minCount.value && max === maxCount.value,\n      )\n      if (found) {\n        setRule(found)\n      }\n    }\n  })\n\n  return (\n    <>\n      <SelectControlFlat<TRule>\n        items={Object.keys(ruleMap) as RoA<TRule>}\n        formatItem={req => ruleMap[req].label}\n        onSingleSelection={selectedRule => {\n          if (selectedRule) {\n            setRule(selectedRule)\n            const rule = ruleMap[selectedRule]\n            minCount.setValue(rule.min || 0)\n            maxCount.setValue(rule.max || 0)\n          }\n        }}\n        selectedItem={state.currentRule}\n      />\n      <CategoryRequirementControl\n        id=\"minCount\"\n        count={minCount.value}\n        label={<Trans>Minimum</Trans>}\n        enabled={state.currentRule === 'custom'}\n        onChange={minCount.setValue}\n      />\n      <CategoryRequirementControl\n        id=\"maxCount\"\n        count={maxCount.value}\n        label={<Trans>Maximum</Trans>}\n        enabled={state.currentRule === 'custom'}\n        onChange={maxCount.setValue}\n      />\n    </>\n  )\n})\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport styled from 'styled-components/macro'\n\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { TopRightButtonContainer } from '../../../molecules/TopRightButtonContainer'\nimport { IsMenuItemType } from '../atoms/IsMenuItemType'\nimport { MenuSubmitButton } from '../atoms/MenuSubmitButton'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { getCategoryTypeLabel } from '../menu.labels'\nimport { CategoryFormLoader } from '../organisms/CategoryFormLoader'\nimport { CategoryFormPrimary } from '../organisms/CategoryFormPrimary'\nimport { CategoryRecipesView } from '../organisms/CategoryRecipesView'\nimport { CategoryRequirementsForm } from '../organisms/CategoryRequirementsForm'\n\ninterface IProps extends RouteComponentProps<{ categoryId: ID }> {}\n\nexport const FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n`\nexport const FormFixedRow = styled.div`\n  flex: 0 0 8rem;\n`\nexport const FormStretchedRow = styled.div`\n  flex: 1 1 0;\n  min-height: 0;\n  position: relative;\n`\n\nexport const MenuCategoryPage: React.FC<IProps> = ({ match }) => {\n  const { categoryId } = match.params\n  const {\n    isCreate,\n    itemType: categoryType,\n    redirectToCategoryList,\n  } = useMenuRouting(categoryId)\n\n  if (categoryType === null) {\n    redirectToCategoryList()\n    return null\n  }\n\n  return (\n    <CategoryFormLoader\n      isCreate={isCreate}\n      categoryId={categoryId}\n      categoryType={categoryType}\n    >\n      <FullPageLayout\n        pageTitle={getCategoryTypeLabel(categoryType)}\n        hideLogoutWidget={true}\n        useBackButton={true}\n      >\n        <PageLayoutFullHeightItem withScrollArea={true}>\n          <FormContainer>\n            <FormFixedRow>\n              <Card>\n                <CategoryFormPrimary />\n              </Card>\n            </FormFixedRow>\n            <IsMenuItemType isSideDish>\n              <FormFixedRow>\n                <Card>\n                  <Headline>\n                    <Trans>Required amounts of recipes to be picked</Trans>\n                  </Headline>\n                  <CategoryRequirementsForm />\n                </Card>\n              </FormFixedRow>\n            </IsMenuItemType>\n            <FormStretchedRow>\n              <Card stretchToParent={true} minHeight={25}>\n                <Headline>\n                  <Trans>Recipes assigned to this category</Trans>\n                </Headline>\n                <CategoryRecipesView />\n              </Card>\n            </FormStretchedRow>\n          </FormContainer>\n        </PageLayoutFullHeightItem>\n        <TopRightButtonContainer>\n          <MenuSubmitButton\n            isCreate={isCreate}\n            createMutation=\"createWareCategory\"\n            updateMutation=\"updateWareCategory\"\n          />\n        </TopRightButtonContainer>\n      </FullPageLayout>\n    </CategoryFormLoader>\n  )\n}\n","import { useXFormState } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport {\n  FMenuCategoryInListFragment,\n  useQMenuCategoryList,\n  WareCategoryTypeEnum,\n} from '../../../graph/generated'\nimport { RM } from '../../../tools/ramda'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\n\ninterface IProps {\n  categoryType: WareCategoryTypeEnum\n  onAdd(recipe: TCategory): void\n  addButtonText: string\n  currentCategories: RoA<TCategory>\n}\n\ntype TCategory = FMenuCategoryInListFragment\n\nexport const CategorySuggestionPanel = observer<IProps>(\n  ({ categoryType, currentCategories, addButtonText, onAdd }) => {\n    const { settings } = useRoot()\n    const { data, loading } = useQMenuCategoryList({\n      branchId: settings.branchId,\n      categoryType,\n    })\n\n    const categories = (data && data.categories) || []\n\n    const { isSubmitting } = useXFormState()\n\n    return (\n      <MenuSuggestionPanel<TCategory>\n        isLoading={loading}\n        isDisabled={isSubmitting}\n        options={RM.without(currentCategories, categories)}\n        addButtonText={addButtonText}\n        onAdd={onAdd}\n      />\n    )\n  },\n)\n","import { useXField, XFieldName } from '@speedlo/xform'\nimport { IObservableArray } from 'mobx'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { DataTableEmptyText } from '../../../atoms/DataTable'\nimport {\n  FMenuCategoryInListFragment,\n  WareCategoryTypeEnum,\n} from '../../../graph/generated'\nimport { idPropEq } from '../../../tools/ramda'\nimport { CategoryListTable } from '../molecules/CategoryListTable'\nimport { CategorySuggestionPanel } from './CategorySuggestionPanel'\n\ninterface IProps {\n  categoryType: WareCategoryTypeEnum\n  addButtonText: string\n  noRowsText: string\n  fieldName: XFieldName\n}\n\ntype TCategory = FMenuCategoryInListFragment\n\nexport const RecipeCategoryView: React.FC<IProps> = ({\n  categoryType,\n  addButtonText,\n  noRowsText,\n  fieldName,\n}) => {\n  const field = useXField<IObservableArray<TCategory>>(fieldName)\n  return useObserver(() => (\n    <>\n      <CategoryListTable\n        categories={Array.from(field.value)}\n        showRemoveColumn={true}\n        showEditColumn={false}\n        showHeader={false}\n        noRowsDisplay={<DataTableEmptyText text={noRowsText} />}\n        onRemove={categoryId =>\n          field.value.remove(field.value.find(idPropEq(categoryId))!)\n        }\n      />\n      <CategorySuggestionPanel\n        addButtonText={addButtonText}\n        categoryType={categoryType}\n        currentCategories={Array.from(field.value)}\n        onAdd={addedCategory => field.value.push(addedCategory)}\n      />\n    </>\n  ))\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useQMenuRecipeFormTrans } from '../../../graph/generated'\nimport { useMenuModel } from '../hooks/useMenu'\nimport { useMenuTranslations } from '../hooks/useMenuTranslations'\n\ntype TProps = NoChildren & {\n  recipeId: ID\n  isCreate: boolean\n}\n\nexport const RecipeTranslationLoader = observer<TProps>(\n  ({ recipeId, isCreate }) => {\n    const menuModel = useMenuModel()\n    const { shouldLoadTranslation, initTranslation } = useMenuTranslations()\n\n    const language = menuModel.currentLanguage\n    const { getStash } = useQMenuRecipeFormTrans(\n      { language, recipeId },\n      { fetchPolicy: 'no-cache', skip: isCreate || !shouldLoadTranslation() },\n    )\n\n    const translated = getStash(\n      ({ recipe: { nameLabel, descriptionLabel } }) => ({\n        nameLabel,\n        descriptionLabel,\n      }),\n    )\n\n    React.useEffect(() => {\n      if (translated) {\n        initTranslation(language, translated)\n      }\n    }, [initTranslation, language, translated])\n\n    return null\n  },\n)\n","import { disableBatching } from '@speedlo/graphql'\nimport { useObjectValidation } from '@speedlo/xform'\nimport React from 'react'\n\nimport {\n  InputRecipeImage,\n  QMenuRecipeDefaultsDefaults,\n  QMenuRecipeFormRecipe,\n  useLazyQMenuRecipeDefaults,\n  useLazyQMenuRecipeForm,\n  useMMenuRecipeCreate,\n  useMMenuRecipeUpdate,\n  WarePriceTypeEnum,\n} from '../../../graph/generated'\nimport {\n  fieldIsRequiredMsg,\n  validateAsNumberField,\n} from '../../../helpers/form'\nimport { formatNumber, formatPrice } from '../../../helpers/formats'\nimport { parseNumber } from '../../../helpers/numeral'\nimport { i18n } from '../../../i18n'\nimport { RM } from '../../../tools/ramda'\nimport { useMenuModel } from '../hooks/useMenu'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { priceTypes, usePriceType } from '../hooks/usePriceType'\nimport { ROUTE_MENU_RECIPE } from '../menu.routes'\nimport { TRecipeFormValues, TRecipeType } from '../menu.types'\nimport { MenuFormLoader } from '../molecules/MenuFormLoader'\nimport { RecipeTranslationLoader } from '../molecules/RecipeTranslationLoader'\n\ninterface IProps {\n  isCreate: boolean\n  recipeId: ID\n  recipeType: TRecipeType\n  children: ReactNode\n}\n\ntype FormValues = TRecipeFormValues\n\nexport const RecipeFormLoader: React.FC<IProps> = ({\n  isCreate,\n  recipeId,\n  recipeType,\n  children,\n}) => {\n  const menuModel = useMenuModel()\n  const { redirectToRecipeList } = useMenuRouting()\n  const { priceTypeLabels } = usePriceType()\n\n  const validationSchema = useObjectValidation(yup => ({\n    nameLabel: yup\n      .string()\n      .required(fieldIsRequiredMsg(i18n.t`Recipe name in default language`)),\n    code: yup.string().required(fieldIsRequiredMsg(i18n.t`Recipe code`)),\n    prices: yup.object(\n      mapPriceTypes(type => {\n        const priceType = priceTypeLabels[type].toLocaleLowerCase()\n        const fieldDescription = i18n.t`Recipe price for ${priceType}`\n        return yup.object({\n          value: validateAsNumberField(fieldDescription),\n        })\n      }),\n    ),\n  }))\n\n  const [queryDefaults] = useLazyQMenuRecipeDefaults()\n  const loadCreateDefaults = React.useCallback(async () => {\n    const result = await queryDefaults(\n      {\n        branchId: menuModel.branchId,\n      },\n      { fetchPolicy: 'cache-first' },\n    )\n    if (result !== null) {\n      return normalizeLoadedDefaults(result.defaults)\n    }\n    return\n  }, [menuModel, queryDefaults])\n\n  const [queryRecipe] = useLazyQMenuRecipeForm()\n  const loadUpdateValues = React.useCallback(async () => {\n    const result = await queryRecipe(\n      { recipeId: recipeId!, language: menuModel.defaultLanguage },\n      { fetchPolicy: 'no-cache' },\n    )\n    if (result === null) {\n      redirectToRecipeList()\n      return\n    }\n    return normalizeUpdateValues(result.recipe)\n  }, [menuModel.defaultLanguage, queryRecipe, recipeId, redirectToRecipeList])\n\n  const [updateRecipe] = useMMenuRecipeUpdate()\n  const executeUpdate = React.useCallback(\n    (recipeId: ID, values: FormValues) =>\n      updateRecipe(\n        {\n          recipeId,\n          recipe: {\n            ...getWriteVariables(values),\n            translations: values.translations,\n            image: getImageForUpdate(values),\n          },\n        },\n        disableBatching, // has to be disabled because of file upload\n      ),\n    [updateRecipe],\n  )\n\n  const onUpdate = React.useCallback(\n    (values: FormValues) => executeUpdate(recipeId, values),\n    [executeUpdate, recipeId],\n  )\n\n  const [createRecipe] = useMMenuRecipeCreate()\n  const onCreate = React.useCallback(\n    async (values: FormValues) => {\n      const result = await createRecipe(\n        {\n          recipe: {\n            ...getWriteVariables(values),\n            companyBranch: menuModel.branchId,\n            wareCategoryType: recipeType,\n            image: values.image,\n          },\n        },\n        disableBatching, // has to be disabled because of file upload\n      )\n      if (result && values.translations && values.translations.length > 0) {\n        const recipeId = result.recipe.id\n        executeUpdate(recipeId, values)\n      }\n    },\n    [createRecipe, executeUpdate, menuModel, recipeType],\n  )\n\n  return (\n    <MenuFormLoader<TRecipeFormValues>\n      isCreate={isCreate}\n      onCreate={onCreate}\n      onUpdate={onUpdate}\n      initialValues={getDefaults(recipeType)}\n      loadCreateDefaults={loadCreateDefaults}\n      loadUpdateValues={loadUpdateValues}\n      validationSchema={validationSchema}\n      successRedirectPath={ROUTE_MENU_RECIPE}\n    >\n      <>\n        {children}\n        <RecipeTranslationLoader recipeId={recipeId} isCreate={isCreate} />\n      </>\n    </MenuFormLoader>\n  )\n}\n\nfunction getWriteVariables(formValues: FormValues) {\n  return {\n    code: formValues.code,\n    nameLabel: formValues.nameLabel || '',\n    internalNote: formValues.internalNote,\n    descriptionLabel: formValues.descriptionLabel,\n    enabled: formValues.visible,\n    prices: Object.keys(formValues.prices).map(priceType => ({\n      warePriceType: (priceType as unknown) as WarePriceTypeEnum,\n      price: { value: parseNumber(formValues.prices[priceType].value) },\n      vat: formValues.prices[priceType].vatId,\n    })),\n    sideDishCategories: formValues.sideDishes.map(RM.prop('id')),\n    wareCategories: formValues.categories.map(RM.prop('id')),\n    associatedRecipes: formValues.associatedRecipes.map(\n      RM.pick(['associatedRecipe', 'warePriceType']),\n    ),\n    ingredients: formValues.ingredients.map(({ stockItem, quantity }) => {\n      return { stockItem, quantity: parseNumber(quantity) }\n    }),\n  }\n}\n\nfunction getImageForUpdate({ image }: FormValues): Maybe<InputRecipeImage> {\n  if (typeof image === 'string') {\n    // image did not change, do nothing\n    return null\n  }\n  if (image === null) {\n    return {\n      delete: true,\n    }\n  }\n  return {\n    file: image,\n    delete: false,\n  }\n}\n\nfunction mapPriceTypes<T>(acc: (priceType: WarePriceTypeEnum) => T) {\n  return priceTypes.reduce((result, priceType) => {\n    result[priceType] = acc(priceType)\n    return result\n  }, {}) as { [priceType in WarePriceTypeEnum]: T }\n}\n\nfunction getDefaults(recipeType: TRecipeType): FormValues {\n  return {\n    id: 'NEW',\n    itemType: recipeType,\n    visible: true,\n    code: '',\n    nameLabel: '',\n    internalNote: '',\n    internalCode: '',\n    descriptionLabel: '',\n    image: null,\n    prices: mapPriceTypes(() => ({\n      value: '0',\n      vatId: null,\n      currencyCode: '',\n    })),\n    associatedRecipes: [],\n    ingredients: [],\n    sideDishes: [],\n    categories: [],\n    translations: [],\n  }\n}\n\nfunction normalizeLoadedDefaults(\n  defaults: QMenuRecipeDefaultsDefaults,\n): Partial<FormValues> {\n  const vats = defaults.vats.reduce((acc, { vatId, priceType }) => {\n    acc[priceType.enum] = vatId\n    return acc\n  }, {})\n  return {\n    prices: mapPriceTypes(priceType => ({\n      value: '0',\n      vatId: vats[priceType],\n      currencyCode: defaults.currency.code,\n    })),\n  }\n}\n\nfunction normalizeUpdateValues(\n  recipeSource: QMenuRecipeFormRecipe,\n): Partial<FormValues> {\n  return {\n    ...recipeSource,\n    itemType: recipeSource.recipeType.enum,\n    internalNote: recipeSource.internalNote || '',\n    descriptionLabel: recipeSource.descriptionLabel || '',\n    associatedRecipes: recipeSource.sourceAssociatedRecipes.map(\n      ({ priceType, recipe }) => ({\n        warePriceType: priceType.enum,\n        nameLabel: recipe.nameLabel!,\n        associatedRecipe: recipe.id,\n        formattedPrice: '?',\n      }),\n    ),\n    ingredients: recipeSource.sourceIngredients.map(\n      ({ quantity, stockItem: { id, label, allergens, wareUnit } }) => ({\n        stockItem: id,\n        label,\n        quantity: formatNumber(quantity),\n        unitLabel: wareUnit.code,\n        allergens: allergens.map(RM.prop('enum')),\n      }),\n    ),\n    prices: mapPriceTypes(priceType => {\n      const sourcePrice = recipeSource.sourcePrices.find(\n        RM.pathEq(['priceType', 'enum'], priceType),\n      )\n      if (!sourcePrice) {\n        return {\n          value: '0',\n          vatId: null,\n          currencyCode: '',\n        }\n      }\n      return {\n        value: formatPrice(sourcePrice.price.value),\n        vatId: sourcePrice.vat.id,\n        currencyCode: sourcePrice.price.currency.code,\n      }\n    }),\n  }\n}\n","import { Toll } from '@material-ui/icons'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { FormInput, FormInputProps } from '../../../components/forms/FormInput'\n\ninterface IProps extends FormInputProps {}\n\nexport const MenuPriceField: React.FC<IProps> = ({ fieldName, ...props }) => (\n  <IconLine icon={Toll}>\n    <Sizer width={5}>\n      <FormInput fieldName={fieldName} fullWidth={true} {...props} />\n    </Sizer>\n  </IconLine>\n)\n","import { useXField, useXFormState, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport {\n  ISelectControlFlatProps,\n  SelectControlFlat,\n} from '../../atoms/SelectControlFlat'\nimport { idProp } from '../../tools/ramda'\n\ninterface IProps<ItemType>\n  extends Omit<\n    ISelectControlFlatProps<ItemType>,\n    | 'selectedItems'\n    | 'onMultiSelection'\n    | 'selectedItem'\n    | 'onSingleSelection'\n    | 'isMulti'\n  > {\n  fieldName: XFieldName\n  getItemId?: (item: ItemType) => ID\n}\n\nexport const FormFlatSingleSelect = <ItemType extends Record<string, unknown>>(\n  props: IProps<ItemType>,\n) => {\n  const {\n    items,\n    fieldName,\n    isClearable = false,\n    getItemId = idProp as AnyFunction,\n  } = props\n\n  const field = useXField(fieldName)\n  const formState = useXFormState()\n\n  return useObserver(() => (\n    <SelectControlFlat<ItemType>\n      selectedItem={\n        field.value && items.find(item => getItemId(item) === field.value)\n      }\n      onSingleSelection={item => {\n        field.setValue(item ? getItemId(item) : null)\n        field.setTouched()\n      }}\n      disabled={formState.isSubmitting}\n      isInvalid={field.hasError}\n      isClearable={isClearable}\n      isMulti={false}\n      {...props}\n    />\n  ))\n}\n","import { XFieldName } from '@speedlo/xform'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormFlatSingleSelect } from '../../../components/forms/FormFlatSingleSelect'\nimport { useQMenuVats } from '../../../graph/generated'\nimport { useSettingsBranch } from '../../../hooks/useSettingsBranch'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {\n  fieldName: XFieldName\n}\n\nexport const RecipeVatSelectField: React.FC<IProps> = ({ fieldName }) => {\n  const branchId = useSettingsBranch()\n  const { data } = useQMenuVats({ branchId }, { fetchPolicy: 'cache-first' })\n\n  if (!data) {\n    return null\n  }\n\n  return (\n    <IconLine label={`${i18n.t`VAT`}:`}>\n      <FormFlatSingleSelect\n        fieldName={fieldName}\n        items={data.vats}\n        formatItem={({ vat }) => `${vat}%`}\n      />\n    </IconLine>\n  )\n}\n","import React from 'react'\n\nimport {\n  Column,\n  ColumnRendererWithNote,\n  DataTable,\n} from '../../../atoms/DataTable'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonRemove } from '../../../molecules/TouchButtonRemove'\nimport { Spacing } from '../../../styling'\nimport { TAssocRecipe } from '../menu.types'\n\ninterface IProps {\n  recipes: TAssocRecipe[]\n  onRemove(recipeId: ID): void\n}\n\nexport const RecipeAssocListTable: React.FC<IProps> = ({\n  recipes,\n  onRemove,\n}) => (\n  <DataTable items={recipes} disableHeader={true}>\n    <Column\n      dataKey=\"associatedRecipe\"\n      width={Spacing.ButtonColumnWidthPx}\n      minWidth={Spacing.ButtonColumnWidthPx}\n      cellRenderer={({ cellData }) => (\n        <TouchButtonRemove onClick={() => onRemove(cellData)} />\n      )}\n    />\n    <Column\n      dataKey=\"nameLabel\"\n      width={300}\n      label={i18n.t`Name`}\n      cellRenderer={ColumnRendererWithNote}\n      columnData={{ noteKey: 'internalNote' }}\n    />\n    <Column dataKey=\"formattedPrice\" width={100} label={i18n.t`Price`} />\n  </DataTable>\n)\n","import { useXFieldState, useXFormState } from '@speedlo/xform'\nimport { IObservableArray } from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport {\n  FMenuAssocRecipeFragment,\n  useQMenuRecipeFormAssoc,\n} from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\nimport { RM } from '../../../tools/ramda'\nimport { useSettingsBranch } from '../../../hooks/useSettingsBranch'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\nimport { useMenuItemId } from '../hooks/useMenuItemId'\nimport { TAssocRecipe, TPriceType } from '../menu.types'\nimport { RecipeAssocListTable } from '../molecules/RecipeAssocListTable'\n\ninterface IProps {\n  priceType: TPriceType\n}\n\nexport const RecipeAssociatedView = observer<IProps>(({ priceType }) => {\n  const name = 'associatedRecipes'\n\n  const recipes = useXFieldState<IObservableArray<TAssocRecipe>>(name)\n\n  const recipeId = useMenuItemId()\n  const branchId = useSettingsBranch()\n\n  const { data, loading } = useQMenuRecipeFormAssoc({ branchId })\n\n  const isPriceType = RM.propEq('warePriceType', priceType)\n  const isAssocRecipe = RM.propEq('associatedRecipe')\n\n  const priceTypeRecipes = RM.filter(isPriceType, recipes.value)\n\n  const isAssociated = (id: ID) => priceTypeRecipes.some(isAssocRecipe(id))\n\n  const onAddRecipe = React.useCallback(\n    (addedRecipe: FMenuAssocRecipeFragment) => {\n      recipes.value.push({\n        warePriceType: priceType,\n        associatedRecipe: addedRecipe.id,\n        nameLabel: addedRecipe.nameLabel!,\n        formattedPrice: '?',\n      })\n    },\n    [priceType, recipes],\n  )\n\n  const onRemoveRecipe = React.useCallback(\n    (id: ID) => {\n      recipes.value.remove(\n        recipes.value.find(RM.both(isAssocRecipe(id), isPriceType))!,\n      )\n    },\n    [isAssocRecipe, isPriceType, recipes.value],\n  )\n\n  const { isSubmitting } = useXFormState()\n\n  const rejectSuggestion = (recipe: FMenuAssocRecipeFragment) =>\n    recipe.id === recipeId || isAssociated(recipe.id)\n\n  return (\n    <>\n      <RecipeAssocListTable\n        recipes={priceTypeRecipes}\n        onRemove={onRemoveRecipe}\n      />\n      <MenuSuggestionPanel\n        options={data ? RM.reject(rejectSuggestion, data.recipes) : ARRAY_EMPTY}\n        onAdd={onAddRecipe}\n        isLoading={loading}\n        isDisabled={isSubmitting}\n      />\n    </>\n  )\n})\n","import { useXFieldState } from '@speedlo/xform'\n\nexport const isCreateId = (id: ID) => id === 'NEW'\n\nexport function useMenuItemId() {\n  const field = useXFieldState<ID>('id')\n  return field.value\n}\n","import React, { Fragment } from 'react'\nimport styled from 'styled-components/macro'\n\nimport { FlexDiv } from '../../../atoms/FlexDiv'\nimport { Headline } from '../../../atoms/Headline'\nimport { MarginBox } from '../../../atoms/MarginBox'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { FormDisplayValue } from '../../../components/forms/FormDisplayValue'\nimport { IsMenuItemType } from '../atoms/IsMenuItemType'\nimport { usePriceType } from '../hooks/usePriceType'\nimport { MenuPriceField } from '../molecules/MenuPriceInput'\nimport { RecipeVatSelectField } from '../molecules/RecipeVatSelectField'\nimport { RecipeAssociatedView } from './RecipeAssociatedView'\n\ninterface IProps {}\n\nconst FormPricingCurrencyCode = styled(FormDisplayValue)`\n  padding: 0.5rem;\n`\n\nexport const RecipeFormPricing: React.FC<IProps> = () => {\n  const { priceTypes, priceTypeLabels } = usePriceType()\n  return (\n    <>\n      {priceTypes.map(priceType => {\n        const baseName = ['prices', priceType]\n        return (\n          <Fragment key={priceType}>\n            <Headline>{priceTypeLabels[priceType]}</Headline>\n            <FlexDiv>\n              <MenuPriceField fieldName={[...baseName, 'value']} />\n              <FormPricingCurrencyCode\n                fieldName={[...baseName, 'currencyCode']}\n              />\n              <MarginBox left={5}>\n                <RecipeVatSelectField fieldName={[...baseName, 'vatId']} />\n              </MarginBox>\n            </FlexDiv>\n            <VerticalGap />\n            <IsMenuItemType isMain>\n              <RecipeAssociatedView priceType={priceType} />\n              <VerticalGap />\n            </IsMenuItemType>\n          </Fragment>\n        )\n      })}\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { FormInput } from '../../../components/forms/FormInput'\nimport { Spacing } from '../../../styling'\n\ninterface IProps {\n  placeholder?: string\n}\n\nexport const MenuCodeInput: React.FC<IProps> = ({ placeholder }) => (\n  <IconLine label={<Trans>Code</Trans>} labelWidth={Spacing.DefaultLabelWidth}>\n    <Sizer width={9}>\n      <FormInput fieldName=\"code\" fullWidth={true} placeholder={placeholder} />\n    </Sizer>\n  </IconLine>\n)\n","import React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormInput } from '../../../components/forms/FormInput'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {}\n\nexport const MenuIdExternalSystem: React.FC<IProps> = props => {\n  return (\n    <IconLine label={i18n.t`External ID`} labelWidth={7}>\n      <FormInput fieldName=\"internalCode\" disabled={true} />\n    </IconLine>\n  )\n}\n","import React from 'react'\n\nimport { FormCheckbox } from '../../../components/forms/FormInputCheckbox'\n\ninterface IProps {\n  label: string\n}\n\nexport const MenuVisibilityField: React.FC<IProps> = ({ label }) => {\n  return <FormCheckbox fieldName=\"visible\" label={label} />\n}\n","import { cn } from '@speedlo/ui'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { AllergenEnum, useQMenuAllergens } from '../../../graph/generated'\nimport { Colors, Spacing } from '../../../styling'\n\ninterface IProps {\n  selected: RoA<AllergenEnum>\n  onToggle?(allergen: AllergenEnum): void\n}\n\nconst AllergenBox = styled.div`\n  float: left;\n  width: 2.3rem;\n  height: 2.3rem;\n  border: 1px solid ${Colors.greyMiddle};\n  margin: 0.3rem 0.6rem 0.3rem ${Spacing.MarginAroundFormComponents};\n  font-size: 1.5rem;\n  text-align: center;\n  vertical-align: middle;\n  cursor: default;\n  color: ${Colors.greyMiddle};\n  background-color: ${Colors.white};\n  &.active {\n    color: ${Colors.black};\n    background-color: ${Colors.yellow};\n  }\n`\n\nexport const MenuAllergenIndicator: React.FC<IProps> = ({\n  selected,\n  onToggle,\n}) => {\n  const { data, loading } = useQMenuAllergens(\n    {},\n    { fetchPolicy: 'cache-first' },\n  )\n  if (loading || !data) {\n    return null\n  }\n  return (\n    <>\n      {data.allergens.map(allergen => {\n        return (\n          <AllergenBox\n            key={allergen.enum}\n            title={allergen.code}\n            className={cn({ active: selected.includes(allergen.enum) })}\n            onClick={onToggle && (() => onToggle(allergen.enum))}\n          >\n            {allergen.category}\n          </AllergenBox>\n        )\n      })}\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { ErrorOutline } from '@material-ui/icons'\nimport { useXFieldState } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { RM } from '../../../tools/ramda'\nimport { Spacing } from '../../../styling'\nimport { MenuAllergenIndicator } from '../atoms/MenuAllergenIndicator'\nimport { TRecipeFormValues } from '../menu.types'\n\nconst StyledAllergenLabel = styled.div`\n  margin: 0.7rem 0 0 0.2rem;\n`\n\nexport const RecipeAllergenDisplay = observer(() => {\n  const field = useXFieldState<TRecipeFormValues['ingredients']>('ingredients')\n  const allergens = RM.uniq(\n    RM.flatten(RM.map(RM.prop('allergens'), field.value)),\n  )\n  return (\n    <IconLine labelWidth={Spacing.DefaultLabelWidth} icon={ErrorOutline}>\n      <StyledAllergenLabel>\n        <Trans>Allergens based on stock cards</Trans>\n      </StyledAllergenLabel>\n      <MenuAllergenIndicator selected={allergens} />\n    </IconLine>\n  )\n})\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\nimport { Spacing } from '../../../styling'\nimport { MenuTranslationInput } from '../atoms/MenuTranslationInput'\n\ninterface IProps {}\n\nexport const RecipeDescriptionInput: React.FC<IProps> = () => (\n  <IconLine\n    label={<Trans>Public note</Trans>}\n    labelWidth={Spacing.DefaultLabelWidth}\n  >\n    <MenuTranslationInput\n      fieldName=\"descriptionLabel\"\n      placeholder={i18n.t`Public note for customers, allergens`}\n    />\n  </IconLine>\n)\n","import 'react-image-crop/dist/ReactCrop.css'\n\nimport { Trans } from '@lingui/macro'\nimport {\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from '@material-ui/core'\nimport React from 'react'\nimport ReactCrop, { Crop } from 'react-image-crop'\n\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ntype TProps = NoChildren & {\n  image: File\n  onConfirm(blob: Blob): void\n  onCancel(): void\n}\n\nexport const ImageCropModal: React.FC<TProps> = ({\n  image,\n  onConfirm,\n  onCancel,\n}) => {\n  const [crop, setCrop] = React.useState<Crop>({\n    unit: '%',\n    width: 50,\n    aspect: 1,\n  })\n\n  const onChange = React.useCallback((crop: Crop) => {\n    setCrop(crop)\n  }, [])\n\n  const imageRef = React.useRef<HTMLImageElement>()\n\n  const onConfirmClick = React.useCallback(() => {\n    if (imageRef.current) {\n      // using \"any\" here as library will always fill up whole crop object\n      getCroppedBlob(imageRef.current, crop as any).then(onConfirm)\n    }\n  }, [crop, onConfirm])\n\n  const onImageLoaded = React.useCallback((image: HTMLImageElement) => {\n    imageRef.current = image\n    // * https://github.com/DominicTobias/react-image-crop/issues/306\n    // const cropSize = Math.min(image.width, image.height) / 2\n    // setCrop({\n    //   aspect: 1,\n    //   unit: 'px',\n    //   width: cropSize,\n    //   x: image.width / 2 - cropSize / 2,\n    //   y: image.height / 2 - cropSize / 2,\n    // })\n    // return false\n  }, [])\n\n  const imageSource = React.useMemo(() => URL.createObjectURL(image), [image])\n\n  React.useEffect(() => {\n    return () => {\n      URL.revokeObjectURL(imageSource)\n    }\n  }, [imageSource])\n\n  React.useEffect(() => {\n    return () => {\n      imageRef.current = undefined\n    }\n  }, [])\n\n  return (\n    <Dialog open fullWidth>\n      <DialogTitle>\n        <Trans>Choose the most significant part of the image</Trans>\n      </DialogTitle>\n      <DialogContent>\n        <ReactCrop\n          src={imageSource}\n          crop={crop}\n          onChange={onChange}\n          onImageLoaded={onImageLoaded}\n          keepSelection\n          ruleOfThirds\n          imageStyle={{ width: '100%' }}\n        />\n      </DialogContent>\n      <DialogActions>\n        <TouchButton onClick={onCancel}>\n          <Trans>Cancel</Trans>\n        </TouchButton>\n        <TouchButton onClick={onConfirmClick} color={Colors.green}>\n          <Trans>Confirm</Trans>\n        </TouchButton>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nfunction getCroppedBlob(\n  image: HTMLImageElement,\n  crop: Required<Crop>,\n): Promise<Blob> {\n  const canvas = document.createElement('canvas')\n  const scaleX = image.naturalWidth / image.width\n  const scaleY = image.naturalHeight / image.height\n  canvas.width = crop.width\n  canvas.height = crop.height\n\n  const ctx = canvas.getContext('2d')!\n  ctx.drawImage(\n    image,\n    crop.x * scaleX,\n    crop.y * scaleY,\n    crop.width * scaleX,\n    crop.height * scaleY,\n    0,\n    0,\n    crop.width,\n    crop.height,\n  )\n\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(blob => {\n      if (!blob) {\n        reject(new Error('Canvas is empty'))\n        return\n      }\n      resolve(blob)\n    }, 'image/jpeg')\n  })\n}\n","import { Trans } from '@lingui/macro'\nimport { useXField, useXFormState } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport styled from 'styled-components/macro'\n\nimport { useSnackBar } from '../../../hooks/useSnackBar'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Colors, Spacing } from '../../../styling'\nimport { TRecipeFormValues } from '../menu.types'\nimport { ImageCropModal } from './ImageCropModal'\n\nconst StyledRecipeImageUploader = styled.div`\n  border: 1px dotted ${Colors.greyMiddle};\n  background: ${Colors.white};\n  color: ${Colors.greyMiddle};\n  width: 16rem;\n  height: 16rem;\n  cursor: pointer;\n\n  & section {\n    height: 100%;\n    width: 100%;\n  }\n\n  & div.container {\n    height: 100%;\n    width: 100%;\n    padding: 0.4rem;\n  }\n\n  & img {\n    height: 100%;\n    width: 100%;\n    object-fit: contain;\n  }\n\n  & div.hint {\n    margin: 6rem 0;\n    text-align: center;\n  }\n\n  & .delete-button {\n    position: relative;\n    top: ${`-${Spacing.ButtonHeight}${Spacing.DefaultSizeUnit}`};\n    left: 12.5rem;\n  }\n`\n\nexport const RecipeImage = observer<NoChildren>(() => {\n  const { enqueueWarning } = useSnackBar()\n  const { isSubmitting } = useXFormState()\n\n  const [uploadedImage, setUploadedImage] = React.useState<Maybe<File>>()\n\n  const { isDragActive, getRootProps, getInputProps } = useDropzone({\n    disabled: isSubmitting,\n    accept: 'image/*',\n    multiple: false,\n    onDropAccepted: ([firstImage]) => {\n      setUploadedImage(firstImage)\n    },\n    onDropRejected: () => {\n      enqueueWarning(i18n.t`Supplied file is not recognized as image.`)\n    },\n  })\n\n  const field = useXField<TRecipeFormValues['image']>('image')\n\n  const imageDisplay = React.useMemo(() => {\n    const image = field.value\n    if (image === null) {\n      return null\n    }\n    if (typeof field.value !== 'string') {\n      return URL.createObjectURL(image)\n    } else {\n      return field.value\n    }\n  }, [field.value])\n\n  React.useEffect(() => {\n    return () => {\n      if (imageDisplay) {\n        URL.revokeObjectURL(imageDisplay)\n      }\n    }\n  }, [imageDisplay])\n\n  return (\n    <StyledRecipeImageUploader>\n      <section>\n        <div className=\"container\" {...getRootProps()}>\n          <input {...getInputProps()} />\n          {imageDisplay && <img src={imageDisplay} alt=\"\" />}\n          {imageDisplay === null && (\n            <div className=\"hint\">\n              {isDragActive ? (\n                <Trans>Drop the image here ...</Trans>\n              ) : (\n                <Trans>Click to select image or drop it here</Trans>\n              )}\n            </div>\n          )}\n        </div>\n      </section>\n      {imageDisplay && (\n        <TouchButtonDelete\n          type=\"button\"\n          disabled={isSubmitting}\n          onDelete={async () => {\n            field.setValue(null)\n          }}\n        />\n      )}\n      {uploadedImage && (\n        <ImageCropModal\n          image={uploadedImage}\n          onConfirm={blob => {\n            setUploadedImage(null)\n            field.setValue(blob)\n          }}\n          onCancel={() => {\n            setUploadedImage(null)\n          }}\n        />\n      )}\n    </StyledRecipeImageUploader>\n  )\n})\n","import React from 'react'\n\nimport { FormGrid } from '../../../atoms/FormGrid'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormDeleteButton } from '../../../components/forms/FormDeleteButton'\nimport { useMMenuRecipeDelete } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { Spacing } from '../../../styling'\nimport { FormLayoutGrid } from '../atoms/FormLayoutGrid'\nimport { IsMenuItemType } from '../atoms/IsMenuItemType'\nimport { MenuCodeInput } from '../molecules/MenuCodeInput'\nimport { MenuIdExternalSystem } from '../molecules/MenuIdExternalSystem'\nimport { MenuInternalNoteInput } from '../molecules/MenuInternalNoteField'\nimport { MenuLanguageSwitch } from '../molecules/MenuLanguageSwitch'\nimport { MenuNameInput } from '../molecules/MenuNameInput'\nimport { MenuVisibilityField } from '../molecules/MenuVisibilityField'\nimport { RecipeAllergenDisplay } from '../molecules/RecipeAllergenDisplay'\nimport { RecipeDescriptionInput } from '../molecules/RecipeDescriptionInput'\nimport { RecipeImage } from '../molecules/RecipeImage'\n\ninterface IProps {\n  isCreate: boolean\n}\n\nexport const RecipeFormPrimary: React.FC<IProps> = ({ isCreate }) => {\n  const [deleteRecipe] = useMMenuRecipeDelete()\n\n  return (\n    <FormLayoutGrid\n      primaryColumnWidth=\"minmax(24rem, 54rem)\"\n      secondaryColumnWidth=\"minmax(12rem, 30rem)\"\n      contentPrimary={\n        <FormGrid>\n          <MenuCodeInput placeholder={i18n.t`Recipe code`} />\n          <MenuNameInput placeholder={i18n.t`Recipe name`} localized />\n          <IsMenuItemType isMain>\n            <RecipeDescriptionInput />\n          </IsMenuItemType>\n          <MenuInternalNoteInput placeholder={i18n.t`Recipe internal note`} />\n          {!isCreate && <MenuIdExternalSystem />}\n          <IsMenuItemType isMain>\n            <RecipeAllergenDisplay />\n          </IsMenuItemType>\n          <IconLine labelWidth={Spacing.DefaultLabelWidth}>\n            <MenuVisibilityField label={i18n.t`To show this recipe`} />\n          </IconLine>\n        </FormGrid>\n      }\n      contentSecondary={<RecipeImage />}\n      contentTopRight={<MenuLanguageSwitch />}\n      contentBottomRight={\n        <FormDeleteButton\n          mutationName=\"destroyRecipe\"\n          confirmText={i18n.t`Remove this recipe?`}\n          onDelete={recipeId => deleteRecipe({ recipeId })}\n        />\n      }\n    />\n  )\n}\n","import React from 'react'\n\nimport {\n  Column,\n  ColumnRendererRemove,\n  DataTable,\n  DataTableEmptyText,\n} from '../../../atoms/DataTable'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { FormInput } from '../../../components/forms/FormInput'\nimport { i18n } from '../../../i18n'\nimport { Spacing } from '../../../styling'\nimport { TIngredient } from '../menu.types'\n\ninterface IProps {\n  ingredients: TIngredient[]\n  onRemove?(stockItemId: ID): void\n  isLoading?: boolean\n}\n\nexport const RecipeIngredientsTable: React.FC<IProps> = ({\n  ingredients,\n  onRemove,\n  isLoading = false,\n}) => (\n  <DataTable\n    isLoading={isLoading}\n    items={ingredients}\n    disableHeader={true}\n    noRowsRenderer={() => (\n      <DataTableEmptyText text={i18n.t`Recipe has no ingredients`} />\n    )}\n  >\n    <Column\n      dataKey=\"stockItem\"\n      width={Spacing.ButtonColumnWidthPx}\n      minWidth={Spacing.ButtonColumnWidthPx}\n      cellRenderer={ColumnRendererRemove}\n      columnData={{ onRemove }}\n    />\n    <Column dataKey=\"label\" width={300} label={i18n.t`Name`} />\n    <Column\n      dataKey=\"quantity\"\n      width={60}\n      label={i18n.t`Quantity`}\n      cellRenderer={({ rowIndex }) => (\n        <Sizer width={2.5}>\n          <FormInput\n            fieldName={['ingredients', String(rowIndex), 'quantity']}\n            fullWidth={true}\n          />\n        </Sizer>\n      )}\n    />\n    <Column dataKey=\"unitLabel\" width={100} label={i18n.t`Ware unit`} />\n  </DataTable>\n)\n\n// function validateQuantity(value: string) {\n//   const fieldName = i18n.t`Quantity`\n//   if (validator.isEmpty(value + '')) {\n//     return i18n.t`${fieldName} must be entered`\n//   }\n//   if (!validator.isFloat(value + '', { min: 0 })) {\n//     return i18n.t`${fieldName} must be a positive number`\n//   }\n//   return\n// }\n","import { useXField, useXFormState } from '@speedlo/xform'\nimport { observer, useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport {\n  FMenuStockItemFragment,\n  useQMenuStockList,\n} from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\nimport { RM } from '../../../tools/ramda'\nimport { useSettingsBranch } from '../../../hooks/useSettingsBranch'\nimport { i18n } from '../../../i18n'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\nimport { TIngredient, TRecipeFormValues } from '../menu.types'\nimport { RecipeIngredientsTable } from '../molecules/RecipeIngredientsTable'\n\ninterface IProps {\n  ingredients: TIngredient[]\n  onAdd(ingredient: TIngredient): void\n  onRemove(stockItemId: ID): void\n}\n\nconst unselectedStockOnly = RM.differenceWith(\n  ({ id }: FMenuStockItemFragment, { stockItem }: TIngredient) =>\n    id === stockItem,\n)\n\nexport const RecipeIngredientsControl = observer<IProps>(\n  ({ ingredients, onAdd, onRemove }) => {\n    const branchId = useSettingsBranch()\n    const { data, loading } = useQMenuStockList({\n      branchId,\n    })\n\n    const { isSubmitting } = useXFormState()\n\n    return (\n      <>\n        <RecipeIngredientsTable ingredients={ingredients} onRemove={onRemove} />\n        <MenuSuggestionPanel<FMenuStockItemFragment>\n          isLoading={loading}\n          isDisabled={isSubmitting}\n          addButtonText={i18n.t`Add ingredient`}\n          options={\n            data\n              ? unselectedStockOnly(data.stockItems, ingredients)\n              : ARRAY_EMPTY\n          }\n          onAdd={(addedStockItem: FMenuStockItemFragment) => {\n            onAdd({\n              stockItem: addedStockItem.id,\n              label: addedStockItem.nameLabel,\n              quantity: '1',\n              unitLabel: addedStockItem.wareUnit.code,\n              allergens: addedStockItem.allergens.map(RM.prop('enum')),\n            })\n          }}\n        />\n      </>\n    )\n  },\n)\n\nexport const RecipeIngredientsView = () => {\n  const field = useXField<TRecipeFormValues['ingredients']>('ingredients')\n  return useObserver(() => (\n    <RecipeIngredientsControl\n      ingredients={field.value}\n      onAdd={ingredient => {\n        field.value.push(ingredient)\n      }}\n      onRemove={stockItemId => {\n        field.value.splice(\n          field.value.findIndex(RM.propEq('stockItem', stockItemId)),\n          1,\n        )\n      }}\n    />\n  ))\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { MarginBox } from '../../../atoms/MarginBox'\nimport { NoteText } from '../../../atoms/NoteText'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { TopRightButtonContainer } from '../../../molecules/TopRightButtonContainer'\nimport { IsMenuItemType } from '../atoms/IsMenuItemType'\nimport { MenuSubmitButton } from '../atoms/MenuSubmitButton'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { getRecipeTypeLabel } from '../menu.labels'\nimport { TCategoryType } from '../menu.types'\nimport { RecipeCategoryView } from '../organisms/RecipeCategoryView'\nimport { RecipeFormLoader } from '../organisms/RecipeFormLoader'\nimport { RecipeFormPricing } from '../organisms/RecipeFormPricing'\nimport { RecipeFormPrimary } from '../organisms/RecipeFormPrimary'\nimport { RecipeIngredientsView } from '../organisms/RecipeIngredientsView'\n\ninterface IProps extends RouteComponentProps<{ recipeId: ID }> {}\n\nexport const MenuRecipePage: React.FC<IProps> = ({ match }) => {\n  const { recipeId } = match.params\n  const { isCreate, itemType, redirectToRecipeList } = useMenuRouting(recipeId)\n\n  if (itemType === null) {\n    redirectToRecipeList()\n    return null\n  }\n\n  return (\n    <RecipeFormLoader\n      isCreate={isCreate}\n      recipeId={recipeId}\n      recipeType={itemType}\n    >\n      <MarginBox right={1.25} bottom={4}>\n        <FullPageLayout\n          pageTitle={getRecipeTypeLabel(itemType)}\n          hideLogoutWidget={true}\n          useBackButton={true}\n        >\n          <Card>\n            <RecipeFormPrimary isCreate={isCreate} />\n          </Card>\n          <Card>\n            <RecipeFormPricing />\n          </Card>\n          <Card>\n            <Headline>\n              <Trans>Recipe ingredients</Trans>\n            </Headline>\n            <VerticalGap />\n            <RecipeIngredientsView />\n          </Card>\n          <IsMenuItemType isMain>\n            <Card>\n              <Headline>\n                <Trans>Sidedish categories</Trans>\n              </Headline>\n              <NoteText>\n                <Trans>These sidedish are presented with recipe</Trans>\n              </NoteText>\n              <RecipeCategoryView\n                fieldName=\"sideDishes\"\n                categoryType={TCategoryType.SideDish}\n                addButtonText={i18n.t`Attach sidedish category`}\n                noRowsText={i18n.t`Recipe has no sidedish category attached`}\n              />\n            </Card>\n            <Card>\n              <Headline>\n                <Trans>Category assignments</Trans>\n              </Headline>\n              <NoteText>\n                <Trans>Recipe is in these categories</Trans>\n              </NoteText>\n              <RecipeCategoryView\n                fieldName=\"categories\"\n                categoryType={TCategoryType.Main}\n                addButtonText={i18n.t`Add to category`}\n                noRowsText={i18n.t`Recipe is not in any category`}\n              />\n            </Card>\n          </IsMenuItemType>\n        </FullPageLayout>\n\n        <TopRightButtonContainer>\n          <MenuSubmitButton\n            isCreate={isCreate}\n            createMutation=\"createRecipe\"\n            updateMutation=\"updateRecipe\"\n          />\n        </TopRightButtonContainer>\n      </MarginBox>\n    </RecipeFormLoader>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { TableCellProps } from 'react-virtualized'\nimport styled from 'styled-components'\n\nimport {\n  checkColumnAccess,\n  Column,\n  ColumnRendererEdit,\n  DataTable,\n} from '../../../atoms/DataTable'\nimport { Loading } from '../../../atoms/Loading'\nimport { QMenuStockListStockItems } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { Spacing } from '../../../styling'\n\ntype TStockItem = QMenuStockListStockItems\n\ninterface IProps {\n  stockItems: RoA<TStockItem>\n  isLoading: boolean\n}\n\nconst StyledDataTable = styled(DataTable)`\n  [aria-label='grid']:focus {\n    outline: none;\n  }\n\n  [role='columnheader'] {\n    display: flex;\n    align-items: center;\n    overflow: hidden;\n  }\n`\n\nexport const StockListTable: React.FC<IProps> = observer(\n  ({ stockItems, isLoading }) => {\n    return (\n      <StyledDataTable\n        items={stockItems}\n        heightStretch={true}\n        noRowsRenderer={() =>\n          isLoading ? (\n            <Loading />\n          ) : (\n            <h3>\n              <Trans>Selected branch has no stock cards</Trans>\n            </h3>\n          )\n        }\n      >\n        <Column\n          dataKey=\"id\"\n          width={Spacing.ButtonColumnWidthPx}\n          minWidth={Spacing.ButtonColumnWidthPx}\n          cellRenderer={checkColumnAccess(\n            { canQuery: 'stockItem' },\n            ColumnRendererEdit,\n          )}\n        />\n        <Column dataKey=\"code\" width={100} label={i18n.t`Card code`} />\n        <Column\n          dataKey=\"nameLabel\"\n          width={300}\n          minWidth={30}\n          flexGrow={2}\n          label={i18n.t`Card name`}\n        />\n        <Column\n          dataKey=\"quantity\"\n          width={100}\n          label={i18n.t`Card stock`}\n          cellRenderer={stockWithUnit}\n        />\n        <Column\n          dataKey=\"allowNegativeValue\"\n          width={300}\n          label={i18n.t`Negative stock`}\n          cellRenderer={stockAllowNegative}\n        />\n        <Column dataKey=\"note\" width={300} label={i18n.t`Card note`} />\n      </StyledDataTable>\n    )\n  },\n)\n\nfunction stockWithUnit({ cellData, rowData }: TableCellProps) {\n  return `${cellData} ${rowData.wareUnit.code}`\n}\n\nfunction stockAllowNegative({ cellData }: TableCellProps) {\n  return cellData === true ? <Trans>Permitted</Trans> : <Trans>Forbidden</Trans>\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useQMenuStockList } from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\nimport { useMenuModel } from '../hooks/useMenu'\nimport { StockListTable } from './StockListTable'\n\ninterface IProps {}\n\nexport const StockListLoader = observer<IProps>(() => {\n  const menuModel = useMenuModel()\n  const { data, loading } = useQMenuStockList({\n    branchId: menuModel.branchId,\n  })\n\n  const filterItem = menuModel.filter.getPredicate({\n    partialMatch: ['code', 'nameLabel'],\n    exactMatch: ['plu'],\n  })\n\n  const stockItems = data ? data.stockItems.filter(filterItem) : ARRAY_EMPTY\n\n  return <StockListTable stockItems={stockItems} isLoading={loading} />\n})\n","import React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { SettingsCompanyBranchPicker } from '../../settings/organisms/SettingsCompanyBranchPicker'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { MenuCreateButton } from '../atoms/MenuCreateButton'\nimport { MenuFilterInput } from '../molecules/MenuFilterInput'\nimport { StockListLoader } from '../organisms/StockListLoader'\nimport { StyledFilterWithTableContainer } from './MenuRecipeListPage'\n\nexport const MenuStockListPage: React.FC = () => {\n  const { getStockCreateRoute } = useMenuRouting()\n  return (\n    <FullPageLayout pageTitle={i18n.t`Stock overview`} useBackButton={true}>\n      <PageLayoutFullHeightItem forcePercentHeightInMobile={100}>\n        <Card stretchToParent={true}>\n          <StyledFilterWithTableContainer>\n            <div className=\"filter\">\n              <FlexRowSingle justify=\"start\" flexWrap=\"wrap\">\n                <FlexColumn>\n                  <SettingsCompanyBranchPicker width={20} />\n                </FlexColumn>\n                <FlexColumn>\n                  <MenuFilterInput />\n                </FlexColumn>\n              </FlexRowSingle>\n              <CanMutate mutationName=\"createStockItem\">\n                <MenuCreateButton routeTo={getStockCreateRoute()} />\n              </CanMutate>\n            </div>\n            <div className=\"table\">\n              <StockListLoader />\n            </div>\n          </StyledFilterWithTableContainer>\n        </Card>\n      </PageLayoutFullHeightItem>\n    </FullPageLayout>\n  )\n}\n","import { useObjectValidation } from '@speedlo/xform'\nimport React from 'react'\n\nimport {\n  FieldStateEnum,\n  QMenuStockDefaultsDefaults,\n  QMenuStockFormStockItem,\n  useLazyQMenuStockDefaults,\n  useLazyQMenuStockForm,\n  useMMenuStockCreate,\n  useMMenuStockUpdate,\n} from '../../../graph/generated'\nimport { RM } from '../../../tools/ramda'\nimport { useMenuModel } from '../hooks/useMenu'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { ROUTE_MENU_STOCK } from '../menu.routes'\nimport { TStockFormValues } from '../menu.types'\nimport { MenuFormLoader } from '../molecules/MenuFormLoader'\n\ninterface IProps {\n  stockId: ID\n  isCreate: boolean\n  children: ReactNode\n}\n\nexport const StockFormLoader: React.FC<IProps> = ({\n  stockId,\n  isCreate,\n  children,\n}) => {\n  const menuModel = useMenuModel()\n  const { redirectToStockList } = useMenuRouting()\n\n  const validationSchema = useObjectValidation(yup => ({\n    code: yup.string().required(),\n    nameLabel: yup.string().required(),\n    wareUnit: yup.string().required(),\n    ingredients: yup.array().of(\n      yup.object({\n        quantity: yup.string().required(),\n      }),\n    ),\n  }))\n\n  const [queryDefaults] = useLazyQMenuStockDefaults()\n  const loadCreateDefaults = React.useCallback(\n    async (values: TStockFormValues) => {\n      const result = await queryDefaults({ branchId: menuModel.branchId })\n      if (result === null) {\n        return values\n      }\n      return {\n        ...values,\n        ...normalizeLoadedDefaults(result.defaults),\n      }\n    },\n    [menuModel, queryDefaults],\n  )\n\n  const [queryStock] = useLazyQMenuStockForm()\n  const loadUpdateValues = React.useCallback(\n    async (values: TStockFormValues) => {\n      const result = await queryStock({ stockId }, { fetchPolicy: 'no-cache' })\n      if (result === null) {\n        redirectToStockList()\n        return values\n      }\n      return {\n        ...normalizeUpdateValues(result.stockItem),\n      }\n    },\n    [queryStock, redirectToStockList, stockId],\n  )\n\n  const [createStock] = useMMenuStockCreate()\n  const onCreate = React.useCallback(\n    (values: TStockFormValues) =>\n      createStock({\n        stockItem: {\n          companyBranch: menuModel.branchId,\n          ...getWriteVariables(values),\n        },\n      }),\n    [createStock, menuModel],\n  )\n\n  const [updateStock] = useMMenuStockUpdate()\n  const onUpdate = React.useCallback(\n    (values: TStockFormValues) =>\n      updateStock({\n        stockId,\n        stockItem: getWriteVariables(values),\n      }),\n    [stockId, updateStock],\n  )\n\n  return (\n    <MenuFormLoader<TStockFormValues>\n      isCreate={isCreate}\n      onCreate={onCreate}\n      onUpdate={onUpdate}\n      initialValues={getDefaults()}\n      loadCreateDefaults={loadCreateDefaults}\n      loadUpdateValues={loadUpdateValues}\n      validationSchema={validationSchema}\n      successRedirectPath={ROUTE_MENU_STOCK}\n    >\n      {children}\n    </MenuFormLoader>\n  )\n}\n\nfunction getDefaults(): TStockFormValues {\n  return {\n    id: 'NEW',\n    internalNote: '',\n    nameLabel: '',\n    code: '',\n    plu: '',\n    note: '',\n    wareUnit: null,\n    quantity: 0,\n    allergens: [],\n    allowNegative: FieldStateEnum.Default,\n    allowNegativeDefault: FieldStateEnum.Default,\n  }\n}\n\nfunction normalizeLoadedDefaults(\n  defaults: QMenuStockDefaultsDefaults,\n): Partial<TStockFormValues> {\n  return {\n    allowNegativeDefault: getAllowNegativeDefault(defaults.allowNegative),\n  }\n}\n\nfunction normalizeUpdateValues(\n  stockItem: QMenuStockFormStockItem,\n): TStockFormValues {\n  return {\n    id: stockItem.id,\n    internalNote: 'TBD',\n    nameLabel: stockItem.nameLabel,\n    code: stockItem.code,\n    note: stockItem.note,\n    plu: stockItem.plu || '',\n    wareUnit: stockItem.wareUnit.enum,\n    quantity: stockItem.quantity,\n    allergens: stockItem.allergens.map(RM.prop('enum')),\n    allowNegative: stockItem.allowNegative,\n    allowNegativeDefault: getAllowNegativeDefault(\n      stockItem.companyBranch.allowNegative,\n    ),\n  }\n}\n\nfunction getAllowNegativeDefault(isEnabled: boolean) {\n  return isEnabled ? FieldStateEnum.Default : FieldStateEnum.Disabled\n}\n\nfunction getWriteVariables(formValues: TStockFormValues) {\n  return {\n    code: formValues.code,\n    label: formValues.nameLabel,\n    note: formValues.note,\n    plu: formValues.plu,\n    allergens: formValues.allergens,\n    wareUnit: formValues.wareUnit!,\n    allowNegative: formValues.allowNegative,\n  }\n}\n","import { ErrorOutline } from '@material-ui/icons'\nimport { useXField } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { AllergenEnum } from '../../../graph/generated'\nimport { RM } from '../../../tools/ramda'\nimport { MenuAllergenIndicator } from '../atoms/MenuAllergenIndicator'\n\ninterface IProps {}\n\nexport const StockAllergenField: React.FC<IProps> = () => {\n  const field = useXField<RoA<AllergenEnum>>('allergens')\n\n  const onToggle = React.useCallback(\n    (allergen: AllergenEnum) => {\n      const current = field.value\n      if (current.includes(allergen)) {\n        field.setValue(RM.without([allergen], current))\n      } else {\n        field.setValue([...current, allergen])\n      }\n    },\n    [field],\n  )\n\n  return useObserver(() => (\n    <IconLine icon={ErrorOutline} labelWidth={7}>\n      <MenuAllergenIndicator selected={field.value} onToggle={onToggle} />\n    </IconLine>\n  ))\n}\n","import { i18nMark } from '@lingui/core'\nimport { useXFormState } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormFlatSingleSelect } from '../../../components/forms/FormFlatSingleSelect'\nimport { FieldStateEnum } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { RM } from '../../../tools/ramda'\nimport { TStockFormValues } from '../menu.types'\n\nconst items = [\n  {\n    type: FieldStateEnum.Enabled,\n    label: i18nMark('Permit'),\n  },\n  {\n    type: FieldStateEnum.Disabled,\n    label: i18nMark('Forbid'),\n  },\n]\n\nexport const StockAllowNegativeField = observer(() => {\n  const { allowNegativeDefault } = useXFormState<TStockFormValues>().values\n  return (\n    <IconLine label={i18n.t`Negative stock`} labelWidth={7}>\n      <FormFlatSingleSelect\n        items={items}\n        fieldName=\"allowNegative\"\n        getItemId={RM.prop('type')}\n        formatItem={item => {\n          if (item.type === allowNegativeDefault) {\n            return (\n              <span>\n                {i18n._(item.label)}\n                <i>{` (${i18n.t`Is default setting`.toLocaleLowerCase()})`}</i>\n              </span>\n            )\n          }\n          return i18n._(item.label)\n        }}\n      />\n    </IconLine>\n  )\n})\n","import { Fingerprint } from '@material-ui/icons'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { FormInput } from '../../../components/forms/FormInput'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {}\n\nexport const StockPluField: React.FC<IProps> = () => (\n  <IconLine icon={Fingerprint} labelWidth={7}>\n    <Sizer width={9}>\n      <FormInput fieldName=\"plu\" fullWidth={true} placeholder={i18n.t`PLU`} />\n    </Sizer>\n  </IconLine>\n)\n","import { SelectAll } from '@material-ui/icons'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormDropdownSingle } from '../../../components/forms/FormDropdownSingle'\nimport {\n  QMenuWareUnitsWareUnits,\n  useQMenuWareUnits,\n} from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\nimport { i18n } from '../../../i18n'\nimport { RM } from '../../../tools/ramda'\n\ntype TWareUnits = QMenuWareUnitsWareUnits\n\nexport const StockWareUnitField: React.FC<NoChildren> = () => {\n  const { data, loading } = useQMenuWareUnits()\n  return (\n    <IconLine icon={SelectAll} labelWidth={7}>\n      <FormDropdownSingle<TWareUnits>\n        fieldName=\"wareUnit\"\n        isLoading={loading}\n        options={data ? data.wareUnits : ARRAY_EMPTY}\n        getOptionLabel={RM.prop('code')}\n        getOptionValue={RM.prop('enum')}\n        placeholder={i18n.t`Choose unit`}\n        width={12}\n      />\n    </IconLine>\n  )\n}\n","import React from 'react'\n\nimport { FormGrid } from '../../../atoms/FormGrid'\nimport { FormDeleteButton } from '../../../components/forms/FormDeleteButton'\nimport { useMMenuStockDelete } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { FormLayoutGrid } from '../atoms/FormLayoutGrid'\nimport { MenuCodeInput } from '../molecules/MenuCodeInput'\nimport { MenuInternalNoteInput } from '../molecules/MenuInternalNoteField'\nimport { MenuNameInput } from '../molecules/MenuNameInput'\nimport { StockAllergenField } from '../molecules/StockAllergenField'\nimport { StockAllowNegativeField } from '../molecules/StockAllowNegativeField'\nimport { StockPluField } from '../molecules/StockPluField'\nimport { StockWareUnitField } from '../molecules/StockWareUnitField'\n\nexport const StockFormPrimary: React.FC = () => {\n  const [deleteStockItem] = useMMenuStockDelete()\n  return (\n    <FormLayoutGrid\n      primaryColumnWidth=\"minmax(10rem, 54rem)\"\n      contentPrimary={\n        <FormGrid>\n          <MenuNameInput placeholder={i18n.t`Card name`} />\n          <MenuCodeInput placeholder={i18n.t`Card code`} />\n          <StockWareUnitField />\n          <StockPluField />\n          <MenuInternalNoteInput\n            fieldName=\"note\"\n            placeholder={i18n.t`Card note`}\n            label={i18n.t`Card note`}\n          />\n          <StockAllergenField />\n          <StockAllowNegativeField />\n        </FormGrid>\n      }\n      contentBottomRight={\n        <FormDeleteButton\n          mutationName=\"destroyStockItem\"\n          confirmText={i18n.t`Remove this card?`}\n          onDelete={stockId => deleteStockItem({ stockId })}\n        />\n      }\n    />\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { BlockLoader } from '../../../atoms/BlockLoader'\nimport { Column, ColumnRendererEdit, DataTable } from '../../../atoms/DataTable'\nimport { Headline } from '../../../atoms/Headline'\nimport { NoteText } from '../../../atoms/NoteText'\nimport { useQStockRecipes } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { ROUTE_MENU_RECIPE } from '../menu.routes'\n\ninterface IProps {\n  stockId: ID\n}\n\nexport const StockRecipesView: React.FC<IProps> = ({ stockId }) => {\n  const { getStash, loading } = useQStockRecipes({\n    stockId,\n  })\n\n  if (loading) {\n    return <BlockLoader />\n  }\n\n  const ingredients = getStash(data => data.stockItem.ingredients)\n\n  if (!ingredients || ingredients.length === 0) {\n    return (\n      <Headline>\n        <Trans>No recipes are using stock card</Trans>\n      </Headline>\n    )\n  }\n\n  return (\n    <>\n      <Headline>\n        <Trans>Recipes using this card</Trans>\n      </Headline>\n\n      <DataTable\n        items={[...ingredients]}\n        disableHeader={true}\n        fullHeight={true}\n      >\n        <Column\n          dataKey=\"\"\n          cellDataGetter={({ rowData }) => ({\n            pathname: `${ROUTE_MENU_RECIPE}/${rowData.recipe.id}`,\n            state: { recipeType: rowData.recipe.recipeType.enum },\n          })}\n          cellRenderer={ColumnRendererEdit}\n          width={100}\n        />\n        <Column\n          dataKey=\"recipe\"\n          width={300}\n          label={i18n.t`Name`}\n          cellRenderer={({ rowData }) => (\n            <>\n              {rowData.recipe.nameLabel}\n              <NoteText>{rowData.recipe.descriptionLabel}</NoteText>\n            </>\n          )}\n        />\n      </DataTable>\n    </>\n  )\n}\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router'\n\nimport { CanQuery } from '../../../atoms/CanQuery'\nimport { Card } from '../../../atoms/Card'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { TopRightButtonContainer } from '../../../molecules/TopRightButtonContainer'\nimport { MenuSubmitButton } from '../atoms/MenuSubmitButton'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { StockFormLoader } from '../organisms/StockFormLoader'\nimport { StockFormPrimary } from '../organisms/StockFormPrimary'\nimport { StockRecipesView } from '../organisms/StockRecipesVIew'\n\ninterface IProps extends RouteComponentProps<{ stockId: ID }> {}\n\nexport const MenuStockPage: React.FC<IProps> = ({ match }) => {\n  const { stockId } = match.params\n  const { isCreate } = useMenuRouting(stockId)\n\n  return (\n    <FullPageLayout\n      pageTitle={i18n.t`Stock card`}\n      hideLogoutWidget={true}\n      useBackButton={true}\n    >\n      <StockFormLoader isCreate={isCreate} stockId={stockId}>\n        <>\n          <Card>\n            <StockFormPrimary />\n            {!isCreate && (\n              <CanQuery queryName=\"recipes\">\n                <StockRecipesView stockId={stockId} />\n              </CanQuery>\n            )}\n          </Card>\n          <TopRightButtonContainer>\n            <MenuSubmitButton\n              isCreate={isCreate}\n              createMutation=\"createStockItem\"\n              updateMutation=\"updateStockItem\"\n            />\n          </TopRightButtonContainer>\n        </>\n      </StockFormLoader>\n    </FullPageLayout>\n  )\n}\n","import React from 'react'\nimport { Redirect, Route, Switch } from 'react-router-dom'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { SecureRoute } from '../../../routes/SecureRoute'\nimport {\n  ROUTE_MENU,\n  ROUTE_MENU_CATEGORY,\n  ROUTE_MENU_RECIPE,\n  ROUTE_MENU_STOCK,\n} from '../menu.routes'\nimport { MenuCategoryListPage } from '../pages/MenuCategoryListPage'\nimport { MenuCategoryPage } from '../pages/MenuCategoryPage'\nimport { MenuRecipeListPage } from '../pages/MenuRecipeListPage'\nimport { MenuRecipePage } from '../pages/MenuRecipePage'\nimport { MenuStockListPage } from '../pages/MenuStockListPage'\nimport { MenuStockPage } from '../pages/MenuStockPage'\n\ninterface IProps {}\n\nexport const MenuRouting: React.FC<IProps> = () => (\n  <Switch>\n    <SecureRoute\n      path={`${ROUTE_MENU_CATEGORY}/:categoryId`}\n      component={MenuCategoryPage}\n    />\n    <SecureRoute path={ROUTE_MENU_CATEGORY} component={MenuCategoryListPage} />\n    <SecureRoute\n      path={`${ROUTE_MENU_RECIPE}/:recipeId`}\n      component={MenuRecipePage}\n    />\n    <SecureRoute path={ROUTE_MENU_RECIPE} component={MenuRecipeListPage} />\n    <SecureRoute\n      path={`${ROUTE_MENU_STOCK}/:stockId`}\n      component={MenuStockPage}\n    />\n    <SecureRoute path={ROUTE_MENU_STOCK} component={MenuStockListPage} />\n    <Redirect to={ROUTE_MENU_CATEGORY} from={ROUTE_MENU} />\n    <Route component={NotFoundPage} />\n  </Switch>\n)\n\nexport default MenuRouting\n"],"sourceRoot":""}