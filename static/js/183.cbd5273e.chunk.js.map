{"version":3,"sources":["hooks/useGuardedMutation.tsx","atoms/VerticalGap.tsx","segments/settings/organisms/UserMenuLanguage.graphql.ts","segments/settings/organisms/UserMenuLanguage.tsx","hooks/useSafeQuery.ts","segments/settings/pages/UserMenuPage.tsx"],"names":["useGuardedMutation","mutation","options","arguments","length","undefined","defaultMessage","_i18n__WEBPACK_IMPORTED_MODULE_9__","_","_useSnackBar","useSnackBar","enqueueSnackbar","enqueueError","enqueueWarning","handleUserErrors","useCallback","userErrors","forEach","handleGraphQLErrors","errors","filter","RM","propEq","map","prop","handleError","err","isApolloError","networkError","graphQLErrors","reportError","action","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","ShowFeedbackButton","key","mutate","useMutation","_ref","Object","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","variables","result","_data","wrap","_context","prev","next","sent","abrupt","data","getUserErrors","t0","stop","this","_x","apply","_molecules_TouchButton__WEBPACK_IMPORTED_MODULE_10__","onClick","Raven","showReportDialog","_lingui_react__WEBPACK_IMPORTED_MODULE_2__","id","__webpack_require__","d","__webpack_exports__","VerticalGap","styled","div","withConfig","displayName","componentId","_ref$size","size","_ref$sizeUnit","sizeUnit","concat","UserMenuLanguagesQuery","gql","_templateObject","UserMenuChangeLanguageMutation","_templateObject2","UserMenuLanguage","_useRoot","useRoot","auth","user","_useSafeQuery","query","skip","fetchPolicy","_useQuery","useQuery","objectSpread","suspend","loading","rest","objectWithoutProperties","isEmpty","useSafeQuery","updateUserLanguage","_React$useState","React","useState","_React$useState2","slicedToArray","language","setLanguage","useEffect","languages","find","useObserver","node_modules_react_default","Sizer","width","margin","SelectControl","isLoading","toConsumableArray","getOptionLabel","getOptionValue","value","onChange","asyncToGenerator","regenerator_default","lang","TouchButton","_callee2","_context2","userId","enum","rawCode","color","Colors","green","react","UserMenuPage","FullPageLayout","pageTitle","i18n","Card","Headline","UserMenuLanguage_UserMenuLanguage"],"mappings":"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","file":"static/js/183.cbd5273e.chunk.js","sourcesContent":["import { Trans } from '@lingui/macro'\nimport { isApolloError } from 'apollo-client/errors/ApolloError'\nimport { DocumentNode, GraphQLError } from 'graphql'\nimport Raven from 'raven-js'\nimport React, { useCallback } from 'react'\nimport { MutationHookOptions, useMutation } from 'react-apollo-hooks'\n\nimport { RM } from '../helpers/ramda'\nimport { reportError } from '../helpers/sentry'\nimport { i18n } from '../i18n'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { useSnackBar } from './useSnackBar'\n\ninterface IGuardedMutationOptions<TData, TVariables>\n  extends MutationHookOptions<TData, TVariables> {\n  getUserErrors?(data: TData): ReadonlyArray<string> | null\n}\n\nexport function useGuardedMutation<TData, TVariables>(\n  mutation: DocumentNode,\n  options: IGuardedMutationOptions<TData, TVariables> = {},\n) {\n  const defaultMessage = i18n.t`Unexpected error occured while sending a request. Our team was notified about the issue.`\n\n  const { enqueueSnackbar, enqueueError, enqueueWarning } = useSnackBar()\n\n  const handleUserErrors = useCallback((userErrors: ReadonlyArray<string>) => {\n    userErrors.forEach(enqueueWarning)\n  }, [])\n\n  const handleGraphQLErrors = useCallback(\n    (errors: ReadonlyArray<GraphQLError>) => {\n      const userErrors = errors.filter(RM.propEq('showToUser', true))\n      if (userErrors.length === 0) {\n        enqueueError(defaultMessage)\n      } else {\n        handleUserErrors(userErrors.map(RM.prop('message')))\n      }\n    },\n    [],\n  )\n\n  const handleError = useCallback((err: Error) => {\n    if (isApolloError(err)) {\n      if (err.networkError) {\n        enqueueError(\n          i18n.t`Communication with server has failed. Please retry the operation in a moment again.`,\n        )\n        return\n      } else if (err.graphQLErrors) {\n        handleGraphQLErrors(err.graphQLErrors)\n        return\n      }\n    }\n    reportError(err)\n    enqueueSnackbar(defaultMessage, {\n      action: [<ShowFeedbackButton key=\"feedback\" />],\n    })\n  }, [])\n\n  const mutate = useMutation(mutation, options)\n  return async (variables: TVariables) => {\n    try {\n      const result = await mutate({ variables })\n      if (result.errors) {\n        handleGraphQLErrors(result.errors)\n        return null\n      }\n      if (!result.data) {\n        return null\n      }\n      const data = result.data as TData\n      if (options.getUserErrors) {\n        const userErrors = options.getUserErrors(data)\n        if (userErrors !== null) {\n          handleUserErrors(userErrors)\n        }\n      }\n      return data\n    } catch (err) {\n      handleError(err)\n      return null\n    }\n  }\n}\n\nfunction ShowFeedbackButton() {\n  return (\n    <TouchButton onClick={() => Raven.showReportDialog()}>\n      <Trans> Submit feedback </Trans>\n    </TouchButton>\n  )\n}\n","import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import gql from 'graphql-tag'\n\nexport const UserMenuLanguagesQuery = gql`\n  query QUserMenuLanguages {\n    languages {\n      code\n      enum\n      rawCode\n    }\n  }\n`\n\nexport const UserMenuChangeLanguageMutation = gql`\n  mutation MUserMenuChangeLanguage($userId: ID!, $lang: LanguageEnum!) {\n    updateUser(id: $userId, user: { language: $lang }) {\n      id\n      language {\n        enum\n      }\n    }\n  }\n`\n","import { Trans } from '@lingui/macro'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport {\n  MUserMenuChangeLanguage,\n  QUserMenuLanguages,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { useGuardedMutation } from '../../../hooks/useGuardedMutation'\nimport { useSafeQuery } from '../../../hooks/useSafeQuery'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\nimport {\n  UserMenuChangeLanguageMutation,\n  UserMenuLanguagesQuery,\n} from './UserMenuLanguage.graphql'\n\ninterface IProps {}\n\ntype TLang = QUserMenuLanguages.Languages\n\nexport const UserMenuLanguage: React.FC<IProps> = () => {\n  const { auth, user } = useRoot()\n  const { data, loading } = useSafeQuery<\n    QUserMenuLanguages.Query,\n    QUserMenuLanguages.Variables\n  >(UserMenuLanguagesQuery)\n\n  const updateUserLanguage = useGuardedMutation<\n    {},\n    MUserMenuChangeLanguage.Variables\n  >(UserMenuChangeLanguageMutation)\n\n  const [language, setLanguage] = React.useState<Maybe<TLang>>(null)\n\n  React.useEffect(\n    () => {\n      if (language === null && !loading) {\n        setLanguage(\n          data.languages.find(RM.propEq('rawCode', user.language)) || null,\n        )\n      }\n    },\n    [data, loading],\n  )\n\n  return useObserver(() => (\n    <Sizer width={20} margin=\"1rem\">\n      <SelectControl<TLang>\n        isLoading={loading}\n        options={loading ? [] : [...data.languages]}\n        getOptionLabel={RM.prop('code')}\n        getOptionValue={RM.prop('enum')}\n        value={language}\n        onChange={async lang => {\n          if (lang) {\n            setLanguage(lang as TLang)\n          }\n        }}\n      />\n      <VerticalGap />\n      <TouchButton\n        onClick={async () => {\n          if (language) {\n            await updateUserLanguage({\n              userId: auth.userId,\n              lang: language.enum,\n            })\n            user.setLanguage(language.rawCode)\n          }\n        }}\n        color={Colors.green}\n      >\n        <Trans>Change language</Trans>\n      </TouchButton>\n    </Sizer>\n  ))\n}\n","import { FetchPolicy, OperationVariables } from 'apollo-client'\nimport { DocumentNode } from 'graphql'\nimport _ from 'lodash'\nimport { useQuery } from 'react-apollo-hooks'\n\ninterface IOptions {\n  skip?: boolean\n  fetchPolicy?: FetchPolicy\n}\n\nexport function useSafeQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  variables?: TVariables,\n  options: IOptions = {\n    skip: false,\n    fetchPolicy: 'cache-and-network',\n  },\n) {\n  const { data, loading, ...rest } = useQuery<TData, TVariables>(query, {\n    variables,\n    suspend: false,\n    ...options,\n  })\n  return {\n    loading: loading || !data || _.isEmpty(data),\n    data: data as TData,\n    ...rest,\n  }\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { UserMenuLanguage } from '../organisms/UserMenuLanguage'\n\nconst UserMenuPage: React.FC = () => {\n  return (\n    <FullPageLayout width={16} pageTitle={i18n.t`User`}>\n      <Card>\n        <Headline>\n          <Trans>Application language</Trans>\n        </Headline>\n        <UserMenuLanguage />\n      </Card>\n    </FullPageLayout>\n  )\n}\n\nexport default UserMenuPage\n"],"sourceRoot":""}