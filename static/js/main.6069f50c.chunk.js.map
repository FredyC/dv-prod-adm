{"version":3,"sources":["../node_modules/moment/locale lazy /^/.*$/ groupOptions: {} namespace object","../node_modules/numeral/locales lazy /^/.*$/ groupOptions: {} namespace object","../ /^/.*/messages/.po$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","helpers/gps.ts","atoms/PageLoader.tsx","routes/SecureRoute.tsx","atoms/ConnectionWarning.tsx","routes/LogRoute.tsx","routes/RedirectAfterLogin.tsx","routes/RedirectAfterLogout.tsx","routes/Routing.tsx","pages/ErrorPage.tsx","pages/ServiceUnreachablePage.tsx","app/DefaultErrorHandler.tsx","app/Router.tsx","app/SnackProvider.tsx","app/UpdateHandler.tsx","app/UserBootstrap.tsx","app/AppMain.tsx","app/AppProvider.tsx","app/GlobalStyles.tsx","index.tsx","molecules/TouchButton.tsx","atoms/Sizer.tsx","helpers/formats.ts","atoms/Icon.tsx","atoms/PageTitle.tsx","styling.ts","helpers/offline.ts","atoms/Card.tsx","molecules/FullPageLayout.tsx","hooks/useSnackBar.ts","pages/NotFoundPage.tsx","graph/buildQuery.tsx","routes/RedirectToLogin.tsx","models/BaseModel.ts","helpers/ramda.ts","atoms/SizerButton.tsx","atoms/PageLayoutGridItem.tsx","atoms/PageLayoutGrid.tsx","atoms/SoundControl.tsx","organisms/LogoutWidget.tsx","molecules/HomeButton.tsx","molecules/PageLayoutResponsive.tsx","atoms/MarginBox.tsx","atoms/Loading.tsx","hooks/useIntervalSound.ts","locale/numeral.ts","segments/menu/organisms/RecipeForm.graphql.ts","atoms/WithRoot.tsx","segments/businesshours/models/BusinessHoursModel.graphql.ts","segments/businesshours/models/BusinessHoursModel.ts","graph/generated.ts","helpers/logger.ts","locale/moment.ts","i18n.tsx","segments/businesshours/organisms/SpecificBusinessHours.graphql.ts","segments/zones/Zones.graphql.ts","routes/LazyRoute.tsx","assets/connectionWarning.mp3","segments/order/models/OrderListModel.ts","assets/loader.gif","assets/bg_antracit.jpg","app/Responsive.tsx","context/RootContext.ts","helpers/persistModel.ts","segments/login/models/PasswordLoginModel.ts","segments/login/models/LoginProviderModel.ts","models/AuthModel.ts","models/ConfigModel.ts","models/UserModel.ts","helpers/faker.ts","segments/createorder/models/CreateOrderModel.ts","models/MapModel.ts","segments/order/models/OrderMapModel.ts","segments/order/models/OrderModel.ts","segments/overview/models/StatisticsModel.ts","segments/settings/models/SettingsBaseModel.ts","graph/errorHandler.ts","segments/menu/models/MenuBaseModel.ts","segments/menu/models/MenuCategoryModel.graphql.ts","segments/menu/models/MenuCategoryModel.ts","segments/menu/models/MenuRecipeModel.graphql.ts","segments/menu/models/MenuRecipeModel.ts","segments/menu/models/MenuStockModel.graphql.ts","segments/menu/models/StockTransferModel.ts","segments/menu/models/MenuStockModel.ts","segments/menu/models/MenuModel.ts","segments/settings/models/SettingsModel.ts","segments/zones/models/ZoneMapModel.ts","segments/zones/models/ZoneModel.graphql.ts","segments/zones/models/ZoneModel.ts","models/RootModel.ts","atoms/RootProvider.tsx","graph/createClient.ts","config.ts","enableDebug.ts"],"names":["map","./af","./af.js","./ar","./ar-dz","./ar-dz.js","./ar-kw","./ar-kw.js","./ar-ly","./ar-ly.js","./ar-ma","./ar-ma.js","./ar-sa","./ar-sa.js","./ar-tn","./ar-tn.js","./ar.js","./az","./az.js","./be","./be.js","./bg","./bg.js","./bm","./bm.js","./bn","./bn.js","./bo","./bo.js","./br","./br.js","./bs","./bs.js","./ca","./ca.js","./cs","./cs.js","./cv","./cv.js","./cy","./cy.js","./da","./da.js","./de","./de-at","./de-at.js","./de-ch","./de-ch.js","./de.js","./dv","./dv.js","./el","./el.js","./en-SG","./en-SG.js","./en-au","./en-au.js","./en-ca","./en-ca.js","./en-gb","./en-gb.js","./en-ie","./en-ie.js","./en-il","./en-il.js","./en-nz","./en-nz.js","./eo","./eo.js","./es","./es-do","./es-do.js","./es-us","./es-us.js","./es.js","./et","./et.js","./eu","./eu.js","./fa","./fa.js","./fi","./fi.js","./fo","./fo.js","./fr","./fr-ca","./fr-ca.js","./fr-ch","./fr-ch.js","./fr.js","./fy","./fy.js","./ga","./ga.js","./gd","./gd.js","./gl","./gl.js","./gom-latn","./gom-latn.js","./gu","./gu.js","./he","./he.js","./hi","./hi.js","./hr","./hr.js","./hu","./hu.js","./hy-am","./hy-am.js","./id","./id.js","./is","./is.js","./it","./it-ch","./it-ch.js","./it.js","./ja","./ja.js","./jv","./jv.js","./ka","./ka.js","./kk","./kk.js","./km","./km.js","./kn","./kn.js","./ko","./ko.js","./ku","./ku.js","./ky","./ky.js","./lb","./lb.js","./lo","./lo.js","./lt","./lt.js","./lv","./lv.js","./me","./me.js","./mi","./mi.js","./mk","./mk.js","./ml","./ml.js","./mn","./mn.js","./mr","./mr.js","./ms","./ms-my","./ms-my.js","./ms.js","./mt","./mt.js","./my","./my.js","./nb","./nb.js","./ne","./ne.js","./nl","./nl-be","./nl-be.js","./nl.js","./nn","./nn.js","./pa-in","./pa-in.js","./pl","./pl.js","./pt","./pt-br","./pt-br.js","./pt.js","./ro","./ro.js","./ru","./ru.js","./sd","./sd.js","./se","./se.js","./si","./si.js","./sk","./sk.js","./sl","./sl.js","./sq","./sq.js","./sr","./sr-cyrl","./sr-cyrl.js","./sr.js","./ss","./ss.js","./sv","./sv.js","./sw","./sw.js","./ta","./ta.js","./te","./te.js","./tet","./tet.js","./tg","./tg.js","./th","./th.js","./tl-ph","./tl-ph.js","./tlh","./tlh.js","./tr","./tr.js","./tzl","./tzl.js","./tzm","./tzm-latn","./tzm-latn.js","./tzm.js","./ug-cn","./ug-cn.js","./uk","./uk.js","./ur","./ur.js","./uz","./uz-latn","./uz-latn.js","./uz.js","./vi","./vi.js","./x-pseudo","./x-pseudo.js","./yo","./yo.js","./zh-cn","./zh-cn.js","./zh-hk","./zh-hk.js","./zh-tw","./zh-tw.js","webpackAsyncContext","req","ids","__webpack_require__","e","then","id","t","Promise","resolve","Error","code","keys","Object","module","exports","./chs","./chs.js","./da-dk","./da-dk.js","./en-za","./en-za.js","./es-es","./es-es.js","./nl-nl","./nl-nl.js","./no","./no.js","./pt-pt","./pt-pt.js","./ru-ua","./ru-ua.js","./uk-ua","./uk-ua.js","./cs/messages.po","./de/messages.po","./en-dev/messages.po","./en/messages.po","./pl/messages.po","./sk/messages.po","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","d","__webpack_exports__","gpsToLatLng","gpsToLatLngLit","latLngToGps","generatePolygon","geolib__WEBPACK_IMPORTED_MODULE_0__","gps","google","maps","LatLng","Number","latitude","longitude","lat","lng","latLng","_ref","center","_ref$metersRadius","metersRadius","_ref$pointsCount","pointsCount","Array","fill","_","idx","degree","computeDestinationPoint","StyledPageLoader","styled","div","_templateObject","PageLoader","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","role","src","loaderGif","alt","appConfig","pageTitleSuffix","width","height","SecureRoute","_ref$redirect","redirect","props","lazy","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","useRoot","auth","isAuthenticatedUser","_RedirectToLogin__WEBPACK_IMPORTED_MODULE_6__","_pages_NotFoundPage__WEBPACK_IMPORTED_MODULE_4__","component","path","exact","_LazyRoute__WEBPACK_IMPORTED_MODULE_5__","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","MessageStyled","Colors","red","ConnectionWarning","observer","audio","useIntervalSound","soundUrl","connectionWarningSound","intervalSec","shouldPlay","isNetworkOffline","react_default","Fragment","Dialog","open","disableBackdropClick","disableEscapeKeyDown","WarningTwoTone","fontSize","_lingui_react","LogRoute","react_router","location","logRouting","pathname","log","debug","RedirectAfterLogin","children","history","WithRoot","render","root","route","state","origin","when","isAuthenticated","replace","RedirectAfterLogout","_useRoot","user","order","createOrder","settings","zone","invalidate","RedirectToLogin","useOrigin","to","PasswordLoginRoute","React","all","bind","PasswordChangeRoute","PasswordResetRoute","MainDashboardPage","OrderRoutes","KitchenRoutes","SettingsRoutes","OverviewRoutes","SupportPage","StockPage","Routing","Suspense","fallback","LogRoute_LogRoute","RedirectAfterLogin_RedirectAfterLogin","NotFoundPage","IconStyled","ErrorPage_templateObject","orange","Center","_templateObject2","ErrorPage","onFeedback","FullPageLayout","pageTitle","i18n","hideLogoutWidget","showHomeButton","Card","Warning","style","Sizer","TouchButton","onClick","ContactSupport","window","reload","Autorenew","ServiceUnreachablePage_templateObject","ServiceUnreachablePage_templateObject2","ServiceUnreachablePage","onRetry","useBackButton","components","href","ServiceUnreachablePage_Center","ServiceUnreachablePage_IconStyled","OfflineBolt","icon","Cached","makeError","message","concat","DefaultErrorHandler","_useSnackBar","useSnackBar","enqueueWarning","enqueueError","_React$useState","useState","_React$useState2","slicedToArray","errorKind","setErrorKind","useCallback","onUnhandledError","error","isChunkError","Sentry","withScope","scope","setLevel","Severity","Debug","captureException","flushSentry","isApolloError","isNetworkUnreachableError","onNetworkError","isUnreachable","onOperationError","onUserErrors","messages","forEach","dist","tools_dist","onError","ServiceUnreachablePage_ServiceUnreachablePage","ErrorPage_ErrorPage","showFeedback","showReportDialog","labelClose","title","Router","index_es","_ref2","handleGetUserConfirm","react_router_dom","getUserConfirmation","successStyle","css","SnackProvider_templateObject","green","FontSizes","InfoMessageFontSize","snackStyles","variantSuccess","variantInfo","variantError","SnackProvider_templateObject2","variantWarning","_templateObject3","SnackProvider","build","maxSnack","classes","anchorOrigin","horizontal","vertical","UpdateHandler","_ref$onRestart","onRestart","_ref$autoUpdateDelay","autoUpdateDelay","SECOND","_ref$postponeTimeout","postponeTimeout","MINUTE","_ref$updateCheckInter","updateCheckInterval","HOUR","_ref$serviceWorker","serviceWorker","navigator","registrationWorkerRef","useRef","updateWorkerRef","useObservable","updatePending","applyingUpdate","useInterval","current","logUpdate","update","catch","useEffect","onMessage","event","data","addEventListener","removeEventListener","updateWorker","register","onInit","reg","onUpdate","sw","init","onCancel","setTimeout","onConfirm","postMessage","useObserver","UpdateSnack","autoHideDuration","rest","objectWithoutProperties","now","useTimer","interval","enabled","addMilliseconds","endTime","remainingSeconds","formatDistanceStrict","Snackbar","assign","className","data-testid","disableWindowBlurListener","action","Button","key","color","size","UserBootstrap","_useQUserBootstrap","useQUserBootstrap","userId","skip","loading","finishBootstrap","configureScope","setUser","undefined","username","setExtra","applyUserData","applyAccess","access","applyPermissions","permissions","firstName","lastName","setExtras","roles","RM","prop","branches","AppMain","enqueueInfo","useReleaseCabinet","DefaultErrorHandler_DefaultErrorHandler","UpdateHandler_UpdateHandler","Router_Router","index_module","isReady","Routing_Routing","AppProvider","useSentryInit","sentryDSN","RootProvider","SnackProvider_SnackProvider","GlobalStyles","createGlobalStyle","GlobalStyles_templateObject","backgroundImage","rootElement","document","getElementById","AppProvider_AppProvider","AppMain_AppMain","applyAlpha","alphaValue","applyAlphaToColor","StyledTouchButton","button","withConfig","displayName","componentId","Spacing","ButtonHeight","DefaultSizeUnit","_ref$width","_ref2$height","Radiuses","mediaDesktop","mediaMobile","ButtonLabelStyled","ButtonLabelNextToIconStyled","forwardRef","_ref3","forwardedRef","iconName","_ref3$iconColor","iconColor","white","_ref3$iconSize","iconSize","_ref3$color","greyMiddle","_ref3$textNextToIcon","textNextToIcon","badge","text","logError","react__WEBPACK_IMPORTED_MODULE_3___default","ref","_atoms_Icon__WEBPACK_IMPORTED_MODULE_5__","StyledSizer","_ref$widthUnit","widthUnit","_ref2$heightUnit","heightUnit","_ref3$widthUnit","_ref3$heightUnit","margin","wrap","react__WEBPACK_IMPORTED_MODULE_2___default","_MarginBox__WEBPACK_IMPORTED_MODULE_4__","fullDateFormat","formatDateISO","formatTime","priceFormat","formatPrice","formatTimeWithoutTodayDate","formatAddress","formatFullName","date_fns__WEBPACK_IMPORTED_MODULE_0__","date_fns_fp__WEBPACK_IMPORTED_MODULE_1__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2___default","n","numeral__WEBPACK_IMPORTED_MODULE_3__","numeral__WEBPACK_IMPORTED_MODULE_3___default","currentLocale","csLocale","formatLocale","formatWithOptions","locale","format","formatDateTime","price","numeral","time","isSameDay","Date","address","street","houseNumber","city","trim","StyledIcon","span","fontSizeUnit","Icon","memo","_ref3$fontSize","_ref3$fontSizeUnit","iconNode","TitleStyled","h1","greyLight","observableTitles","observable","array","autorun","lastTitle","from","pop","PageTitle","_React$Component","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","apply","arguments","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","value","push","prevProps","findIndex","equals","splice","remove","Component","Route","react__WEBPACK_IMPORTED_MODULE_9___default","react_router_dom__WEBPACK_IMPORTED_MODULE_10__","Display","mobx_react_lite__WEBPACK_IMPORTED_MODULE_8__","join","color__WEBPACK_IMPORTED_MODULE_0__","color__WEBPACK_IMPORTED_MODULE_0___default","_helpers_ramda__WEBPACK_IMPORTED_MODULE_1__","curry","Color","alpha","string","MarginAroundFormComponents","Small","Middle","LayoutGridCellMargin","DashboardButtonHeight","DefaultInputWidth","ButtonColumnWidthPx","PageHeaderHeight","OrderFlowMenuButtonWidth","CompactCard","CompactCardBig","whenGoingOnline","isOnline","box","onLine","set","get","cb","observe","change","oldValue","newValue","lighten","textColor","black","_ref$padding","padding","_ref3$stretchToParent","stretchToParent","_PageLayoutResponsive__WEBPACK_IMPORTED_MODULE_3__","_atoms_PageLayoutGridItem__WEBPACK_IMPORTED_MODULE_2__","gridColumn","notistack__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","successVariant","variant","errorVariant","warningVariant","infoVariant","enqueueSnackbar","useSnackbarOrig","enqueueSuccess","errorMessage","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","_atoms_PageTitle__WEBPACK_IMPORTED_MODULE_1__","_i18n__WEBPACK_IMPORTED_MODULE_2__","buildQuery","query","cleanup","executeCleanup","fn","length","renderFragment","_props$renderLoading","renderLoading","_props$refetchOnConne","refetchOnConnectionLost","react_apollo__WEBPACK_IMPORTED_MODULE_2__","result","_atoms_Loading__WEBPACK_IMPORTED_MODULE_3__","refetch","debug__WEBPACK_IMPORTED_MODULE_0__","debug__WEBPACK_IMPORTED_MODULE_0___default","_ref$useOrigin","match","BaseModel","mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__","types","model","views","self","getPath","getRoot","client","apolloClient","ramda__WEBPACK_IMPORTED_MODULE_0__","SizerButton","_Sizer__WEBPACK_IMPORTED_MODULE_3__","PageLayoutGridItem","_ref$gridColumn","_ref$gridColumnSpan","gridColumnSpan","toString","indexOf","_ref2$gridRow","gridRow","_ref2$gridRowSpan","gridRowSpan","_ref3$gridColumnInMob","gridColumnInMobile","_ref3$gridColumnSpanI","gridColumnSpanInMobile","_ref4","gridRowInMobile","_ref4$gridRowSpanInMo","gridRowSpanInMobile","PageLayoutGrid","isForIconDashboard","SoundControl","soundEnabled","VolumeUp","VolumeOff","controlSound","StyledLogoutWidget","_templateObject4","_templateObject5","LogoutWidget","_useQLogoutWidget","useQLogoutWidget","ExitToApp","DF","HomeButtonStyled","HomeButton_templateObject","HomeButton","_ref$color","_ref$iconColor","_ref$goBack","goBack","backRoute","useRouterContext","ChevronLeft","Home","StyledPageLayoutResponsive","isScrolledDown","PageLayoutResponsive_templateObject","PageLayoutResponsive_templateObject2","PageLayoutResponsive_templateObject3","topContent","PageLayoutResponsive_templateObject4","PageLayoutResponsive_templateObject5","mediaSmallMobile","_templateObject6","PageLayoutResponsive","_ref4$pageTitle","_ref4$hideLogoutWidge","_ref4$showSoundContro","showSoundControl","_ref4$showHomeButton","_ref4$useBackButton","_ref4$isForIconDashbo","y","useWindowScroll","HomeButton_HomeButton","SoundControl_SoundControl","MarginBox","_ref$top","top","_ref$bottom","bottom","_ref$left","left","_ref$right","right","Loading","_ref$text","_useAudio","useAudio","autoPlay","loop","_useAudio2","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","controls","config","source","useAsObservableSource","isPlaying","canPlay","playIfYouCan","volume","play","useReaction","useAutorun","pause","seek","changeNumeralLocale","_x","_changeNumeralLocale","_callee","lang","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","_context","prev","next","abrupt","stop","numberRx","validateNumber","input","test","MenuRecipePriceFragment","gql","FPriceFragmentDoc","MenuAssocRecipeFragment","MenuRecipeFormQuery","FMenuCategoryListItemFragmentDoc","MenuRecipeFormAssocQuery","MenuRecipeDefaults","QueryMenuRecipeFormAssoc","mobx_react_lite__WEBPACK_IMPORTED_MODULE_0__","_RootProvider__WEBPACK_IMPORTED_MODULE_2__","_ref$observe","ESpecificHourMode","CreateSpecificBusinessHour","SpecificBusinessHourFragment","DeleteSpecificBusinessHour","BusinessHoursModel","byIdPredicate","complement","propEq","named","specificMode","optional","enumeration","TIMESPAN","actions","changeSpecificMode","mode","submitSpecificHour","values","variables","companyBranch","branchId","specificDate","isoDate","date","closed","FULLDAY","openAt","closeAt","closedNote","note","mutate","mutation","updateQueries","GSpecificBusinessHours","mutationResult","businessHours","deleteSpecificHour","businessHourId","filter","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","WeekDayEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","LanguageEnum","MobilePlatformEnum","WareUnitEnum","AvailabilityTypeEnum","AllergenEnum","WarePriceTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","OrderStateEnum","OrderBillingTypeEnum","PaymentGateEnum","PaymentTypeEnum","DeliveryTypeEnum","OrderRecipeStateEnum","OrderOnlineStateEnum","OrderOriginEnum","SectorTypeEnum","ZoneTypeEnum","ShiftUserStateEnum","OrderOriginCategoryEnum","WareCategoryTypeEnum","SettingTypeEnum","WareRequirementEnum","SubscriptionActionType","GSpecificBusinessHourFragmentDoc","GMenuRecipeFragmentDoc","FMenuAllergenFragmentDoc","FMenuWareUnitFragmentDoc","GMenuStockItemFragmentDoc","GMenuRecipePriceFragmentDoc","_templateObject7","GMenuAssocRecipeFragmentDoc","_templateObject8","FGeoPointFragmentDoc","_templateObject9","FCompanyBranchFragmentDoc","_templateObject10","FOrderStateCategoryFragmentDoc","_templateObject11","FPriceWithCurrencyFragmentDoc","_templateObject12","FRegularBusinessHourFragmentDoc","_templateObject13","FWeekdayFragmentDoc","_templateObject14","_templateObject15","FCreateOrderItemFragmentDoc","_templateObject16","FCreateOrderFragmentDoc","_templateObject17","FCreateOrderRecipeSidedishesFragmentDoc","_templateObject18","FOrderMenuRecipeFragmentDoc","_templateObject19","FOrderMenuCategoryFragmentDoc","_templateObject20","FKitchenOrderRecipeFragmentDoc","_templateObject21","FKitchenOrderBaseFragmentDoc","_templateObject22","FKitchenCompletionOrderFragmentDoc","_templateObject23","FAddressFragmentDoc","_templateObject24","FEmailFragmentDoc","_templateObject25","FPhoneFragmentDoc","_templateObject26","FCustomerFragmentDoc","_templateObject27","FKitchenOrderFragmentDoc","_templateObject28","FMenuRecipeFragmentDoc","_templateObject29","FMenuCategoryFragmentDoc","_templateObject30","_templateObject31","FOrderDetailWareFragmentDoc","_templateObject32","_templateObject33","FUserNameFragmentDoc","_templateObject34","FDriverFragmentDoc","_templateObject35","FOrderDriverFragmentDoc","_templateObject36","FOrderMapDriverFragmentDoc","_templateObject37","FOrderMapDeviceFragmentDoc","_templateObject38","FOrderMapDeliveryFragmentDoc","_templateObject39","FOrderMapOrderFragmentDoc","_templateObject40","FOrderTickerFragmentDoc","_templateObject41","FOrderTimingFragmentDoc","_templateObject42","FOrderTotalsFragmentDoc","_templateObject43","FPaymentMethodsFragmentDoc","_templateObject44","FZonePriceRangeFragmentDoc","_templateObject45","FZoneFragmentDoc","_templateObject46","_templateObject47","_templateObject48","_templateObject49","_templateObject50","_templateObject51","_templateObject52","_templateObject53","_templateObject54","_templateObject55","_templateObject56","_templateObject57","_templateObject58","_templateObject59","_templateObject60","_templateObject61","_templateObject62","_templateObject63","_templateObject64","_templateObject65","_templateObject66","_templateObject67","_templateObject68","_templateObject69","_templateObject70","_templateObject71","_templateObject72","_templateObject73","_templateObject74","_templateObject75","_templateObject76","_templateObject77","_templateObject78","_templateObject79","MOrderStateDocument","_templateObject80","useMOrderState","baseOptions","Hooks","MSetPriorityOrderDocument","_templateObject81","useMSetPriorityOrder","QLogoutWidgetDocument","_templateObject82","MBusinessHoursSubmitDocument","_templateObject83","useMBusinessHoursSubmit","QRegularBusinessHoursDocument","_templateObject84","useQRegularBusinessHours","MAddOrderPromoDocument","_templateObject85","useMAddOrderPromo","MCancelOrderDocument","_templateObject86","useMCancelOrder","MCreateOrderAcceptDocument","_templateObject87","useMCreateOrderAccept","MCreateOrderAddRecipeDocument","_templateObject88","useMCreateOrderAddRecipe","MCreateOrderNewDocument","_templateObject89","useMCreateOrderNew","MCreateOrderRemoveItemDocument","_templateObject90","useMCreateOrderRemoveItem","MCreateOrderUpdateDocument","_templateObject91","useMCreateOrderUpdate","MCreateOrderUpdateItemDocument","_templateObject92","useMCreateOrderUpdateItem","MRemoveOrderPromoDocument","_templateObject93","useMRemoveOrderPromo","QCreateOrderItemDocument","_templateObject94","QCreateOrderRecipeDocument","_templateObject95","QOrderCartDocument","_templateObject96","useQOrderCart","QOrderFormDeliverAtDefaultsDocument","_templateObject97","useQOrderFormDeliverAtDefaults","QOrderMenuDocument","_templateObject98","useQOrderMenu","QValidateLocationDocument","_templateObject99","MKitchenRecipeStateDocument","_templateObject100","useMKitchenRecipeState","QKitchenCompletionOrderListDocument","_templateObject101","useQKitchenCompletionOrderList","QKitchenOrderListDocument","_templateObject102","useQKitchenOrderList","SKitchenCompletionOrderListDocument","_templateObject103","useSKitchenCompletionOrderList","SKitchenOrderListDocument","_templateObject104","useSKitchenOrderList","MPasswordChangeDocument","_templateObject105","useMPasswordChange","QUserBootstrapDocument","_templateObject106","SOrderCallDocument","_templateObject107","useSOrderCall","MCreateTransfersDocument","_templateObject108","useMCreateTransfers","MMenuCategoryVisibilityDocument","_templateObject109","useMMenuCategoryVisibility","MMenuStockQuantityDocument","_templateObject110","useMMenuStockQuantity","QMenuCategoryDocument","_templateObject111","QMenuCategoryFilterDocument","_templateObject112","useQMenuCategoryFilter","QMenuCategoryListDocument","_templateObject113","useQMenuCategoryList","QMenuCategoryOriginsDocument","_templateObject114","useQMenuCategoryOrigins","QMenuGuideDownloadDocument","_templateObject115","useQMenuGuideDownload","QMenuRecipeListDocument","_templateObject116","useQMenuRecipeList","QMenuStockDepositDocument","_templateObject117","useQMenuStockDeposit","QMenuStockListDocument","_templateObject118","useQMenuStockList","QStockRecipesDocument","_templateObject119","useQStockRecipes","MBranchDefaultTimeDocument","_templateObject120","useMBranchDefaultTime","MChangePaymentMethodDocument","_templateObject121","useMChangePaymentMethod","MOrderChangeToPickupDocument","_templateObject122","useMOrderChangeToPickup","MOrderTimeNotificationDocument","_templateObject123","useMOrderTimeNotification","MRemoveOrderDriverDocument","_templateObject124","useMRemoveOrderDriver","MSelectOrderDriverDocument","_templateObject125","useMSelectOrderDriver","QBranchDefeaultTimesDocument","_templateObject126","useQBranchDefeaultTimes","QOrderDetailDocument","_templateObject127","useQOrderDetail","QOrderDriversDocument","_templateObject128","useQOrderDrivers","QOrderListDocument","_templateObject129","useQOrderList","QOrderListCategoriesDocument","_templateObject130","useQOrderListCategories","QOrderMapDeliveriesDocument","_templateObject131","useQOrderMapDeliveries","QOrderMapOrdersDocument","_templateObject132","useQOrderMapOrders","QOrdersCategoryCountDocument","_templateObject133","useQOrdersCategoryCount","QOrderStateDocument","_templateObject134","useQOrderState","SOrderListDocument","_templateObject135","useSOrderList","SOrderMapDeliveriesDocument","_templateObject136","useSOrderMapDeliveries","SOrderMapOrdersDocument","_templateObject137","useSOrderMapOrders","SOrdersCategoryCountDocument","_templateObject138","useSOrdersCategoryCount","MFinancialReportCreateDocument","_templateObject139","useMFinancialReportCreate","QAllDriversDocument","_templateObject140","useQAllDrivers","QClosureHistoryDocument","_templateObject141","QClosureReportDocument","_templateObject142","useQClosureReport","QStatsDailyDocument","_templateObject143","useQStatsDaily","QStatsOrdersDocument","_templateObject144","useQStatsOrders","QStatsOrdersCountsDocument","_templateObject145","useQStatsOrdersCounts","QStatsOrdersListDocument","_templateObject146","QStockStatsDocument","_templateObject147","useQStockStats","MUserMenuLanguageDocument","_templateObject148","useMUserMenuLanguage","QUserMenuLanguagesDocument","_templateObject149","useQUserMenuLanguages","MZoneUpdateDocument","_templateObject150","useMZoneUpdate","logDebug","logAuth","logPersistence","logForm","logLang","useColors","console","changeMomentLocale","_changeMomentLocale","regenerator_default","moment","sent","updateLocale","setupI18n","I18nManager","forceUpdate","useReactionNow","language","languages","LocaleResolver","DETECTORS","NavigatorDetector","TRANSFORMERS","LanguageOnlyTransformer","getLocales","find","loc","supportedLanguages","includes","fallbackLanguage","detectLanguage","loadCatalog","activate","setupLanguage","success","i","node_modules_react_default","react","Children","only","catalog","load","defineProperty","QuerySpecificBusinessHours","ZoneLocationQuery","ZoneColorsQuery","LazyRoute","routeProps","p","setImmediate","OrderListModel","mobx__WEBPACK_IMPORTED_MODULE_0__","react_scroll__WEBPACK_IMPORTED_MODULE_2__","_graph_generated__WEBPACK_IMPORTED_MODULE_3__","collapsedCategories","Finished","branchesFilter","hasBranchFilter","isSingleBranchSelected","firstBranchId","orderMap","getParent","clear","clearBranchFilter","setBranchFilter","extend","detailOpen","isOrderDetailOpen","orderId","has","isCategoryCollapsed","categoryCode","toggleOrderDetail","delete","add","toggleCategoryCollapse","category","index","focusOrderDetail","scroller","scrollTo","smooth","containerId","absolute","offset","observerOrderDetail","Desktop","react_responsive__WEBPACK_IMPORTED_MODULE_2___default","minWidth","Mobile","maxWidth","mobileBreakpoint","RootContext","createContext","persistenceKey","persistModel","_persistModel","modelName","stateKey","writeState","getType","name","snapshot","localforage","setItem","getItem","applySnapshot","getSnapshot","t0","removeItem","onSnapshot","getLoginUrl","password","endpoint","PasswordLoginModel","volatile","errorCode","hasFailed","Boolean","setFailure","setSuccess","token","authenticate","requestToken","_requestToken","asyncToGenerator","mark","url","fetch","response","payload","headers","Accept","json","status","String","_x2","LoginProviderModel","passwordLogin","AuthModel","provider","cache","reset","ConfigModel","orderListPollIntervalSec","orderListSoundIntervalSec","UserModel","maybe","soundVolume","number","soundIgnore","isLoaded","brands","canCancelOrders","canCreateOrder","branchesId","R","defaultBranch","hasSingleBranch","filterBranches","predicate","canQuery","queryName","queries","toLowerCase","canMutate","mutationName","mutations","rawCode","uniqBy","makeSet","fields","Set","compose","toLower","subscriptions","setLanguage","ignore","setSoundVolume","faker","fakerCZ","CreateOrderModel","getDefaultProps","currentBranch","deliveryType","isDelivery","Messenger","deliverAt","deliverAtIso","startOfMinute","hasAddress","deliveryAddress","fakeAddress","clearGps","objectSpread","phone","call","phonePrefix","prefix","country","customer","formValues","emails","email","phones","vamCustomer","isFound","_self$vamCustomer","lastOrder","defaults","fakeValues","hasOrder","createOrderVariables","callEventId","eventId","updateOrderVariables","acceptOrderVariables","resetOrder","resetModel","setOrder","useLocation","clearLocation","setMinimalPrice","minimalPrice","selectBranch","userIsCalling","setDeliveryMinutes","minutes","deliveryMinutes","updateFormValues","touched","pick","updateFromVam","updateFormWithFakeValues","internet","phoneNumberFormat","lorem","sentence","slice","resolver","makeResolver","selectSidedishesForRecipe","recipeId","sidedishMode","sidedishRootId","selectSidedishesForItem","itemId","sidedishSelectionConfirmed","sidedishes","isConfirmed","sidedishSelectionCancel","notDeliveryLocation","sidedishSelection","GPSCzechia","MapModel","zoom","mapRef","setMapRef","updateZoom","getZoom","updatePosition","getCenter","OrderMapModel","activeDriverId","activateDriver","driverId","position","panTo","OrderModel","list","StatisticsModel","drivers","closureBranch","maybeNull","stockBrandId","dateTimeFrom","startOfDay","dateTimeTo","endOfDay","stockSearchInput","updateFilter","setDriversFilter","setStockBrand","brandId","setClosureBranch","branch","setStockFilter","setTodayOrdersFilter","SettingsBaseModel","getQueryErrors","errors","MenuBaseModel","filterInput","setFilterInput","SortMenuCategoryMutation","MenuCategoryCreateMutation","MenuCategoryUpdateMutation","MenuCategoryDeleteMutation","MenuCategoryModel","sortCategory","_sortCategory","categoryId","createCategory","categoryType","wareCategoryType","getFormVariables","updateCategory","_updateCategory","_callee2","_context2","_x3","_x4","deleteCategory","_deleteCategory","_callee3","_context3","_x5","_x6","nameLabel","internalNoteLabel","visible","pictogram","recipes","minCount","maxCount","orderOriginCategories","origins","MenuRecipeFragment","MenuRecipeModel_graphql_templateObject","MenuRecipeVisibilityMutation","MenuRecipeModel_graphql_templateObject2","MenuRecipeCreateMutation","MenuRecipeModel_graphql_templateObject3","MenuRecipeUpdateMutation","MenuRecipeModel_graphql_templateObject4","MenuRecipeDeleteMutation","MenuRecipeModel","categoryFilterId","changeVisibility","optimisticResponse","updateRecipe","__typename","setCategoryFilter","createRecipe","recipeType","recipe","getRecipeVariables","deleteRecipe","_deleteRecipe","queryDefaults","_queryDefaults","_data$companyBranch","vats","currency","reduce","vatId","priceType","enum","currencyCode","internalNote","descriptionLabel","prices","warePriceType","vat","sideDishCategories","sideDishes","wareCategories","categories","associatedRecipes","ingredients","stockItem","quantity","parseFloat","MenuStockItemFragment","MenuStockModel_graphql_templateObject","MenuStockCreateMutation","MenuStockModel_graphql_templateObject2","MenuStockUpdateMutation","MenuStockModel_graphql_templateObject3","MenuStockDeleteMutation","MenuStockModel_graphql_templateObject4","DEFAULT_MAX","MAX_SAFE_INTEGER","DEFAULT_ITEM","import","max","Item","identifier","boolean","StockTransferModel","transferItems","importMode","targetBranchId","isImportMode","isTransferMode","targetId","sourceId","isImportingAll","shouldNotImportSome","isImportingItem","getItemTransferQuantity","getItemLimit","item","hasInvalidAmount","amountUnderflow","amountOverflow","itemsForTransfer","_this","setTargetId","initItems","items","newItems","clearItems","put","toggleImportAll","toggleImportItem","setQuantity","isNaN","clearTransferState","toggleImportMode","MenuStockModel","transfer","createItem","updateItem","stockId","deleteItem","_deleteItem","label","plu","allergens","wareUnit","allowNegative","MenuModel","stock","SettingsModel","selectedBranchId","menu","head","ZoneMapModel","currentZonePoints","updateZonePoints","points","clearZonePoints","panToZone","_panToZone","zoneId","panToBranch","_panToBranch","CreateZoneMutation","ZoneModel_graphql_templateObject","UpdateZonePriorityMutation","ZoneModel_graphql_templateObject2","DestroyZoneMutation","ZoneModel_graphql_templateObject3","ZoneModel","brand","branchFilterId","branchFilterPredicate","zoneFilterPredicate","getZoneVariables","zoneColor","minimalOrderPrice","priceRangeRules","normalizePriceRangeRule","geoPolygon","setBrandFilter","brandBranches","clearBrandFilter","createZone","flow","onZoneCreate","GZones","zones","destroyZone","changeZonePriority","oldIndex","newIndex","updateZonePriority","priority","numberOrNull","num","range","toPrice","RootModel","statistics","persistedModels","setClient","isInit","setInit","_React$useState3","create","_React$useState5","newClient","createDefaultApolloClient","createAuthLink","enableTokenCache","getToken","onInvalidToken","createLogLink","createRetryLink","createOfflineLink","createNetworkLink","createApolloClient","useAsyncEffect","Provider","useContext","googleMapsApi","localStorage"],"mappings":"0HAAA,IAAAA,EAAA,CACAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,GAEAC,aAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,gBAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aaAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,YAAA,CACA,IACA,IAEAC,eAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,gBAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,YAAA,CACA,IACA,IAEAC,eAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,gBAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,KAGA,SAAAC,EAAAC,GACA,IAAAC,EAAAjQ,EAAAgQ,GACA,OAAAC,EAOAC,EAAAC,EAAAF,EAAA,IAAAG,KAAA,WACA,IAAAC,EAAAJ,EAAA,GACA,OAAAC,EAAAI,EAAAD,EAAA,KARAE,QAAAC,UAAAJ,KAAA,WACA,IAAAD,EAAA,IAAAM,MAAA,uBAAAT,EAAA,KAEA,MADAG,EAAAO,KAAA,mBACAP,IAQAJ,EAAAY,KAAA,WACA,OAAAC,OAAAD,KAAA3Q,IAEA+P,EAAAM,GAAA,KACAQ,EAAAC,QAAAf,wBC5gCA,IAAA/P,EAAA,CACAqB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAyP,QAAA,CACA,IACA,KAEAC,WAAA,CACA,IACA,KAEA7O,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEA6O,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAvO,OAAA,CACA,IACA,KAEAG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAO,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAuN,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA/M,OAAA,CACA,IACA,KAEAgN,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA5M,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAK,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAG,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAmB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAO,OAAA,CACA,IACA,KAEAG,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAuB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEA0B,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA0G,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAvG,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAE,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAoG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAjG,OAAA,CACA,IACA,KAEAkG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAlG,UAAA,CACA,IACA,KAEAO,OA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","file":"static/js/main.6069f50c.chunk.js","sourcesContent":["var map = {\n\t\"./af\": [\n\t\t550,\n\t\t4\n\t],\n\t\"./af.js\": [\n\t\t550,\n\t\t4\n\t],\n\t\"./ar\": [\n\t\t557,\n\t\t27\n\t],\n\t\"./ar-dz\": [\n\t\t551,\n\t\t60\n\t],\n\t\"./ar-dz.js\": [\n\t\t551,\n\t\t60\n\t],\n\t\"./ar-kw\": [\n\t\t552,\n\t\t98\n\t],\n\t\"./ar-kw.js\": [\n\t\t552,\n\t\t98\n\t],\n\t\"./ar-ly\": [\n\t\t553,\n\t\t109\n\t],\n\t\"./ar-ly.js\": [\n\t\t553,\n\t\t109\n\t],\n\t\"./ar-ma\": [\n\t\t554,\n\t\t120\n\t],\n\t\"./ar-ma.js\": [\n\t\t554,\n\t\t120\n\t],\n\t\"./ar-sa\": [\n\t\t555,\n\t\t5\n\t],\n\t\"./ar-sa.js\": [\n\t\t555,\n\t\t5\n\t],\n\t\"./ar-tn\": [\n\t\t556,\n\t\t16\n\t],\n\t\"./ar-tn.js\": [\n\t\t556,\n\t\t16\n\t],\n\t\"./ar.js\": [\n\t\t557,\n\t\t27\n\t],\n\t\"./az\": [\n\t\t558,\n\t\t38\n\t],\n\t\"./az.js\": [\n\t\t558,\n\t\t38\n\t],\n\t\"./be\": [\n\t\t559,\n\t\t49\n\t],\n\t\"./be.js\": [\n\t\t559,\n\t\t49\n\t],\n\t\"./bg\": [\n\t\t560,\n\t\t61\n\t],\n\t\"./bg.js\": [\n\t\t560,\n\t\t61\n\t],\n\t\"./bm\": [\n\t\t561,\n\t\t72\n\t],\n\t\"./bm.js\": [\n\t\t561,\n\t\t72\n\t],\n\t\"./bn\": [\n\t\t562,\n\t\t83\n\t],\n\t\"./bn.js\": [\n\t\t562,\n\t\t83\n\t],\n\t\"./bo\": [\n\t\t563,\n\t\t91\n\t],\n\t\"./bo.js\": [\n\t\t563,\n\t\t91\n\t],\n\t\"./br\": [\n\t\t564,\n\t\t92\n\t],\n\t\"./br.js\": [\n\t\t564,\n\t\t92\n\t],\n\t\"./bs\": [\n\t\t565,\n\t\t93\n\t],\n\t\"./bs.js\": [\n\t\t565,\n\t\t93\n\t],\n\t\"./ca\": [\n\t\t566,\n\t\t94\n\t],\n\t\"./ca.js\": [\n\t\t566,\n\t\t94\n\t],\n\t\"./cs\": [\n\t\t567,\n\t\t95\n\t],\n\t\"./cs.js\": [\n\t\t567,\n\t\t95\n\t],\n\t\"./cv\": [\n\t\t568,\n\t\t96\n\t],\n\t\"./cv.js\": [\n\t\t568,\n\t\t96\n\t],\n\t\"./cy\": [\n\t\t569,\n\t\t97\n\t],\n\t\"./cy.js\": [\n\t\t569,\n\t\t97\n\t],\n\t\"./da\": [\n\t\t570,\n\t\t99\n\t],\n\t\"./da.js\": [\n\t\t570,\n\t\t99\n\t],\n\t\"./de\": [\n\t\t573,\n\t\t102\n\t],\n\t\"./de-at\": [\n\t\t571,\n\t\t100\n\t],\n\t\"./de-at.js\": [\n\t\t571,\n\t\t100\n\t],\n\t\"./de-ch\": [\n\t\t572,\n\t\t101\n\t],\n\t\"./de-ch.js\": [\n\t\t572,\n\t\t101\n\t],\n\t\"./de.js\": [\n\t\t573,\n\t\t102\n\t],\n\t\"./dv\": [\n\t\t574,\n\t\t103\n\t],\n\t\"./dv.js\": [\n\t\t574,\n\t\t103\n\t],\n\t\"./el\": [\n\t\t575,\n\t\t104\n\t],\n\t\"./el.js\": [\n\t\t575,\n\t\t104\n\t],\n\t\"./en-SG\": [\n\t\t576,\n\t\t105\n\t],\n\t\"./en-SG.js\": [\n\t\t576,\n\t\t105\n\t],\n\t\"./en-au\": [\n\t\t577,\n\t\t106\n\t],\n\t\"./en-au.js\": [\n\t\t577,\n\t\t106\n\t],\n\t\"./en-ca\": [\n\t\t578,\n\t\t107\n\t],\n\t\"./en-ca.js\": [\n\t\t578,\n\t\t107\n\t],\n\t\"./en-gb\": [\n\t\t579,\n\t\t108\n\t],\n\t\"./en-gb.js\": [\n\t\t579,\n\t\t108\n\t],\n\t\"./en-ie\": [\n\t\t580,\n\t\t110\n\t],\n\t\"./en-ie.js\": [\n\t\t580,\n\t\t110\n\t],\n\t\"./en-il\": [\n\t\t581,\n\t\t111\n\t],\n\t\"./en-il.js\": [\n\t\t581,\n\t\t111\n\t],\n\t\"./en-nz\": [\n\t\t582,\n\t\t112\n\t],\n\t\"./en-nz.js\": [\n\t\t582,\n\t\t112\n\t],\n\t\"./eo\": [\n\t\t583,\n\t\t113\n\t],\n\t\"./eo.js\": [\n\t\t583,\n\t\t113\n\t],\n\t\"./es\": [\n\t\t586,\n\t\t116\n\t],\n\t\"./es-do\": [\n\t\t584,\n\t\t114\n\t],\n\t\"./es-do.js\": [\n\t\t584,\n\t\t114\n\t],\n\t\"./es-us\": [\n\t\t585,\n\t\t115\n\t],\n\t\"./es-us.js\": [\n\t\t585,\n\t\t115\n\t],\n\t\"./es.js\": [\n\t\t586,\n\t\t116\n\t],\n\t\"./et\": [\n\t\t587,\n\t\t117\n\t],\n\t\"./et.js\": [\n\t\t587,\n\t\t117\n\t],\n\t\"./eu\": [\n\t\t588,\n\t\t118\n\t],\n\t\"./eu.js\": [\n\t\t588,\n\t\t118\n\t],\n\t\"./fa\": [\n\t\t589,\n\t\t119\n\t],\n\t\"./fa.js\": [\n\t\t589,\n\t\t119\n\t],\n\t\"./fi\": [\n\t\t590,\n\t\t121\n\t],\n\t\"./fi.js\": [\n\t\t590,\n\t\t121\n\t],\n\t\"./fo\": [\n\t\t591,\n\t\t122\n\t],\n\t\"./fo.js\": [\n\t\t591,\n\t\t122\n\t],\n\t\"./fr\": [\n\t\t594,\n\t\t125\n\t],\n\t\"./fr-ca\": [\n\t\t592,\n\t\t123\n\t],\n\t\"./fr-ca.js\": [\n\t\t592,\n\t\t123\n\t],\n\t\"./fr-ch\": [\n\t\t593,\n\t\t124\n\t],\n\t\"./fr-ch.js\": [\n\t\t593,\n\t\t124\n\t],\n\t\"./fr.js\": [\n\t\t594,\n\t\t125\n\t],\n\t\"./fy\": [\n\t\t595,\n\t\t126\n\t],\n\t\"./fy.js\": [\n\t\t595,\n\t\t126\n\t],\n\t\"./ga\": [\n\t\t596,\n\t\t127\n\t],\n\t\"./ga.js\": [\n\t\t596,\n\t\t127\n\t],\n\t\"./gd\": [\n\t\t597,\n\t\t128\n\t],\n\t\"./gd.js\": [\n\t\t597,\n\t\t128\n\t],\n\t\"./gl\": [\n\t\t598,\n\t\t129\n\t],\n\t\"./gl.js\": [\n\t\t598,\n\t\t129\n\t],\n\t\"./gom-latn\": [\n\t\t599,\n\t\t130\n\t],\n\t\"./gom-latn.js\": [\n\t\t599,\n\t\t130\n\t],\n\t\"./gu\": [\n\t\t600,\n\t\t6\n\t],\n\t\"./gu.js\": [\n\t\t600,\n\t\t6\n\t],\n\t\"./he\": [\n\t\t601,\n\t\t7\n\t],\n\t\"./he.js\": [\n\t\t601,\n\t\t7\n\t],\n\t\"./hi\": [\n\t\t602,\n\t\t8\n\t],\n\t\"./hi.js\": [\n\t\t602,\n\t\t8\n\t],\n\t\"./hr\": [\n\t\t603,\n\t\t9\n\t],\n\t\"./hr.js\": [\n\t\t603,\n\t\t9\n\t],\n\t\"./hu\": [\n\t\t604,\n\t\t10\n\t],\n\t\"./hu.js\": [\n\t\t604,\n\t\t10\n\t],\n\t\"./hy-am\": [\n\t\t605,\n\t\t11\n\t],\n\t\"./hy-am.js\": [\n\t\t605,\n\t\t11\n\t],\n\t\"./id\": [\n\t\t606,\n\t\t12\n\t],\n\t\"./id.js\": [\n\t\t606,\n\t\t12\n\t],\n\t\"./is\": [\n\t\t607,\n\t\t13\n\t],\n\t\"./is.js\": [\n\t\t607,\n\t\t13\n\t],\n\t\"./it\": [\n\t\t609,\n\t\t15\n\t],\n\t\"./it-ch\": [\n\t\t608,\n\t\t14\n\t],\n\t\"./it-ch.js\": [\n\t\t608,\n\t\t14\n\t],\n\t\"./it.js\": [\n\t\t609,\n\t\t15\n\t],\n\t\"./ja\": [\n\t\t610,\n\t\t17\n\t],\n\t\"./ja.js\": [\n\t\t610,\n\t\t17\n\t],\n\t\"./jv\": [\n\t\t611,\n\t\t18\n\t],\n\t\"./jv.js\": [\n\t\t611,\n\t\t18\n\t],\n\t\"./ka\": [\n\t\t612,\n\t\t19\n\t],\n\t\"./ka.js\": [\n\t\t612,\n\t\t19\n\t],\n\t\"./kk\": [\n\t\t613,\n\t\t20\n\t],\n\t\"./kk.js\": [\n\t\t613,\n\t\t20\n\t],\n\t\"./km\": [\n\t\t614,\n\t\t21\n\t],\n\t\"./km.js\": [\n\t\t614,\n\t\t21\n\t],\n\t\"./kn\": [\n\t\t615,\n\t\t22\n\t],\n\t\"./kn.js\": [\n\t\t615,\n\t\t22\n\t],\n\t\"./ko\": [\n\t\t616,\n\t\t23\n\t],\n\t\"./ko.js\": [\n\t\t616,\n\t\t23\n\t],\n\t\"./ku\": [\n\t\t617,\n\t\t24\n\t],\n\t\"./ku.js\": [\n\t\t617,\n\t\t24\n\t],\n\t\"./ky\": [\n\t\t618,\n\t\t25\n\t],\n\t\"./ky.js\": [\n\t\t618,\n\t\t25\n\t],\n\t\"./lb\": [\n\t\t619,\n\t\t26\n\t],\n\t\"./lb.js\": [\n\t\t619,\n\t\t26\n\t],\n\t\"./lo\": [\n\t\t620,\n\t\t28\n\t],\n\t\"./lo.js\": [\n\t\t620,\n\t\t28\n\t],\n\t\"./lt\": [\n\t\t621,\n\t\t29\n\t],\n\t\"./lt.js\": [\n\t\t621,\n\t\t29\n\t],\n\t\"./lv\": [\n\t\t622,\n\t\t30\n\t],\n\t\"./lv.js\": [\n\t\t622,\n\t\t30\n\t],\n\t\"./me\": [\n\t\t623,\n\t\t31\n\t],\n\t\"./me.js\": [\n\t\t623,\n\t\t31\n\t],\n\t\"./mi\": [\n\t\t624,\n\t\t32\n\t],\n\t\"./mi.js\": [\n\t\t624,\n\t\t32\n\t],\n\t\"./mk\": [\n\t\t625,\n\t\t33\n\t],\n\t\"./mk.js\": [\n\t\t625,\n\t\t33\n\t],\n\t\"./ml\": [\n\t\t626,\n\t\t34\n\t],\n\t\"./ml.js\": [\n\t\t626,\n\t\t34\n\t],\n\t\"./mn\": [\n\t\t627,\n\t\t35\n\t],\n\t\"./mn.js\": [\n\t\t627,\n\t\t35\n\t],\n\t\"./mr\": [\n\t\t628,\n\t\t36\n\t],\n\t\"./mr.js\": [\n\t\t628,\n\t\t36\n\t],\n\t\"./ms\": [\n\t\t630,\n\t\t39\n\t],\n\t\"./ms-my\": [\n\t\t629,\n\t\t37\n\t],\n\t\"./ms-my.js\": [\n\t\t629,\n\t\t37\n\t],\n\t\"./ms.js\": [\n\t\t630,\n\t\t39\n\t],\n\t\"./mt\": [\n\t\t631,\n\t\t40\n\t],\n\t\"./mt.js\": [\n\t\t631,\n\t\t40\n\t],\n\t\"./my\": [\n\t\t632,\n\t\t41\n\t],\n\t\"./my.js\": [\n\t\t632,\n\t\t41\n\t],\n\t\"./nb\": [\n\t\t633,\n\t\t42\n\t],\n\t\"./nb.js\": [\n\t\t633,\n\t\t42\n\t],\n\t\"./ne\": [\n\t\t634,\n\t\t43\n\t],\n\t\"./ne.js\": [\n\t\t634,\n\t\t43\n\t],\n\t\"./nl\": [\n\t\t636,\n\t\t45\n\t],\n\t\"./nl-be\": [\n\t\t635,\n\t\t44\n\t],\n\t\"./nl-be.js\": [\n\t\t635,\n\t\t44\n\t],\n\t\"./nl.js\": [\n\t\t636,\n\t\t45\n\t],\n\t\"./nn\": [\n\t\t637,\n\t\t46\n\t],\n\t\"./nn.js\": [\n\t\t637,\n\t\t46\n\t],\n\t\"./pa-in\": [\n\t\t638,\n\t\t47\n\t],\n\t\"./pa-in.js\": [\n\t\t638,\n\t\t47\n\t],\n\t\"./pl\": [\n\t\t639,\n\t\t48\n\t],\n\t\"./pl.js\": [\n\t\t639,\n\t\t48\n\t],\n\t\"./pt\": [\n\t\t641,\n\t\t51\n\t],\n\t\"./pt-br\": [\n\t\t640,\n\t\t50\n\t],\n\t\"./pt-br.js\": [\n\t\t640,\n\t\t50\n\t],\n\t\"./pt.js\": [\n\t\t641,\n\t\t51\n\t],\n\t\"./ro\": [\n\t\t642,\n\t\t52\n\t],\n\t\"./ro.js\": [\n\t\t642,\n\t\t52\n\t],\n\t\"./ru\": [\n\t\t643,\n\t\t53\n\t],\n\t\"./ru.js\": [\n\t\t643,\n\t\t53\n\t],\n\t\"./sd\": [\n\t\t644,\n\t\t54\n\t],\n\t\"./sd.js\": [\n\t\t644,\n\t\t54\n\t],\n\t\"./se\": [\n\t\t645,\n\t\t55\n\t],\n\t\"./se.js\": [\n\t\t645,\n\t\t55\n\t],\n\t\"./si\": [\n\t\t646,\n\t\t56\n\t],\n\t\"./si.js\": [\n\t\t646,\n\t\t56\n\t],\n\t\"./sk\": [\n\t\t647,\n\t\t57\n\t],\n\t\"./sk.js\": [\n\t\t647,\n\t\t57\n\t],\n\t\"./sl\": [\n\t\t648,\n\t\t58\n\t],\n\t\"./sl.js\": [\n\t\t648,\n\t\t58\n\t],\n\t\"./sq\": [\n\t\t649,\n\t\t59\n\t],\n\t\"./sq.js\": [\n\t\t649,\n\t\t59\n\t],\n\t\"./sr\": [\n\t\t651,\n\t\t63\n\t],\n\t\"./sr-cyrl\": [\n\t\t650,\n\t\t62\n\t],\n\t\"./sr-cyrl.js\": [\n\t\t650,\n\t\t62\n\t],\n\t\"./sr.js\": [\n\t\t651,\n\t\t63\n\t],\n\t\"./ss\": [\n\t\t652,\n\t\t64\n\t],\n\t\"./ss.js\": [\n\t\t652,\n\t\t64\n\t],\n\t\"./sv\": [\n\t\t653,\n\t\t65\n\t],\n\t\"./sv.js\": [\n\t\t653,\n\t\t65\n\t],\n\t\"./sw\": [\n\t\t654,\n\t\t66\n\t],\n\t\"./sw.js\": [\n\t\t654,\n\t\t66\n\t],\n\t\"./ta\": [\n\t\t655,\n\t\t67\n\t],\n\t\"./ta.js\": [\n\t\t655,\n\t\t67\n\t],\n\t\"./te\": [\n\t\t656,\n\t\t68\n\t],\n\t\"./te.js\": [\n\t\t656,\n\t\t68\n\t],\n\t\"./tet\": [\n\t\t657,\n\t\t69\n\t],\n\t\"./tet.js\": [\n\t\t657,\n\t\t69\n\t],\n\t\"./tg\": [\n\t\t658,\n\t\t70\n\t],\n\t\"./tg.js\": [\n\t\t658,\n\t\t70\n\t],\n\t\"./th\": [\n\t\t659,\n\t\t71\n\t],\n\t\"./th.js\": [\n\t\t659,\n\t\t71\n\t],\n\t\"./tl-ph\": [\n\t\t660,\n\t\t73\n\t],\n\t\"./tl-ph.js\": [\n\t\t660,\n\t\t73\n\t],\n\t\"./tlh\": [\n\t\t661,\n\t\t74\n\t],\n\t\"./tlh.js\": [\n\t\t661,\n\t\t74\n\t],\n\t\"./tr\": [\n\t\t662,\n\t\t75\n\t],\n\t\"./tr.js\": [\n\t\t662,\n\t\t75\n\t],\n\t\"./tzl\": [\n\t\t663,\n\t\t76\n\t],\n\t\"./tzl.js\": [\n\t\t663,\n\t\t76\n\t],\n\t\"./tzm\": [\n\t\t665,\n\t\t78\n\t],\n\t\"./tzm-latn\": [\n\t\t664,\n\t\t77\n\t],\n\t\"./tzm-latn.js\": [\n\t\t664,\n\t\t77\n\t],\n\t\"./tzm.js\": [\n\t\t665,\n\t\t78\n\t],\n\t\"./ug-cn\": [\n\t\t666,\n\t\t79\n\t],\n\t\"./ug-cn.js\": [\n\t\t666,\n\t\t79\n\t],\n\t\"./uk\": [\n\t\t667,\n\t\t80\n\t],\n\t\"./uk.js\": [\n\t\t667,\n\t\t80\n\t],\n\t\"./ur\": [\n\t\t668,\n\t\t81\n\t],\n\t\"./ur.js\": [\n\t\t668,\n\t\t81\n\t],\n\t\"./uz\": [\n\t\t670,\n\t\t84\n\t],\n\t\"./uz-latn\": [\n\t\t669,\n\t\t82\n\t],\n\t\"./uz-latn.js\": [\n\t\t669,\n\t\t82\n\t],\n\t\"./uz.js\": [\n\t\t670,\n\t\t84\n\t],\n\t\"./vi\": [\n\t\t671,\n\t\t85\n\t],\n\t\"./vi.js\": [\n\t\t671,\n\t\t85\n\t],\n\t\"./x-pseudo\": [\n\t\t672,\n\t\t86\n\t],\n\t\"./x-pseudo.js\": [\n\t\t672,\n\t\t86\n\t],\n\t\"./yo\": [\n\t\t673,\n\t\t87\n\t],\n\t\"./yo.js\": [\n\t\t673,\n\t\t87\n\t],\n\t\"./zh-cn\": [\n\t\t674,\n\t\t88\n\t],\n\t\"./zh-cn.js\": [\n\t\t674,\n\t\t88\n\t],\n\t\"./zh-hk\": [\n\t\t675,\n\t\t89\n\t],\n\t\"./zh-hk.js\": [\n\t\t675,\n\t\t89\n\t],\n\t\"./zh-tw\": [\n\t\t676,\n\t\t90\n\t],\n\t\"./zh-tw.js\": [\n\t\t676,\n\t\t90\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1117;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./bg\": [\n\t\t677,\n\t\t131\n\t],\n\t\"./bg.js\": [\n\t\t677,\n\t\t131\n\t],\n\t\"./chs\": [\n\t\t678,\n\t\t137\n\t],\n\t\"./chs.js\": [\n\t\t678,\n\t\t137\n\t],\n\t\"./cs\": [\n\t\t679,\n\t\t148\n\t],\n\t\"./cs.js\": [\n\t\t679,\n\t\t148\n\t],\n\t\"./da-dk\": [\n\t\t680,\n\t\t159\n\t],\n\t\"./da-dk.js\": [\n\t\t680,\n\t\t159\n\t],\n\t\"./de\": [\n\t\t682,\n\t\t132\n\t],\n\t\"./de-ch\": [\n\t\t681,\n\t\t164\n\t],\n\t\"./de-ch.js\": [\n\t\t681,\n\t\t164\n\t],\n\t\"./de.js\": [\n\t\t682,\n\t\t132\n\t],\n\t\"./en-au\": [\n\t\t683,\n\t\t133\n\t],\n\t\"./en-au.js\": [\n\t\t683,\n\t\t133\n\t],\n\t\"./en-gb\": [\n\t\t684,\n\t\t134\n\t],\n\t\"./en-gb.js\": [\n\t\t684,\n\t\t134\n\t],\n\t\"./en-za\": [\n\t\t685,\n\t\t135\n\t],\n\t\"./en-za.js\": [\n\t\t685,\n\t\t135\n\t],\n\t\"./es\": [\n\t\t687,\n\t\t138\n\t],\n\t\"./es-es\": [\n\t\t686,\n\t\t136\n\t],\n\t\"./es-es.js\": [\n\t\t686,\n\t\t136\n\t],\n\t\"./es.js\": [\n\t\t687,\n\t\t138\n\t],\n\t\"./et\": [\n\t\t688,\n\t\t139\n\t],\n\t\"./et.js\": [\n\t\t688,\n\t\t139\n\t],\n\t\"./fi\": [\n\t\t689,\n\t\t140\n\t],\n\t\"./fi.js\": [\n\t\t689,\n\t\t140\n\t],\n\t\"./fr\": [\n\t\t692,\n\t\t143\n\t],\n\t\"./fr-ca\": [\n\t\t690,\n\t\t141\n\t],\n\t\"./fr-ca.js\": [\n\t\t690,\n\t\t141\n\t],\n\t\"./fr-ch\": [\n\t\t691,\n\t\t142\n\t],\n\t\"./fr-ch.js\": [\n\t\t691,\n\t\t142\n\t],\n\t\"./fr.js\": [\n\t\t692,\n\t\t143\n\t],\n\t\"./hu\": [\n\t\t693,\n\t\t144\n\t],\n\t\"./hu.js\": [\n\t\t693,\n\t\t144\n\t],\n\t\"./it\": [\n\t\t694,\n\t\t145\n\t],\n\t\"./it.js\": [\n\t\t694,\n\t\t145\n\t],\n\t\"./ja\": [\n\t\t695,\n\t\t146\n\t],\n\t\"./ja.js\": [\n\t\t695,\n\t\t146\n\t],\n\t\"./lv\": [\n\t\t696,\n\t\t147\n\t],\n\t\"./lv.js\": [\n\t\t696,\n\t\t147\n\t],\n\t\"./nl-be\": [\n\t\t697,\n\t\t149\n\t],\n\t\"./nl-be.js\": [\n\t\t697,\n\t\t149\n\t],\n\t\"./nl-nl\": [\n\t\t698,\n\t\t150\n\t],\n\t\"./nl-nl.js\": [\n\t\t698,\n\t\t150\n\t],\n\t\"./no\": [\n\t\t699,\n\t\t151\n\t],\n\t\"./no.js\": [\n\t\t699,\n\t\t151\n\t],\n\t\"./pl\": [\n\t\t700,\n\t\t152\n\t],\n\t\"./pl.js\": [\n\t\t700,\n\t\t152\n\t],\n\t\"./pt-br\": [\n\t\t701,\n\t\t153\n\t],\n\t\"./pt-br.js\": [\n\t\t701,\n\t\t153\n\t],\n\t\"./pt-pt\": [\n\t\t702,\n\t\t154\n\t],\n\t\"./pt-pt.js\": [\n\t\t702,\n\t\t154\n\t],\n\t\"./ru\": [\n\t\t704,\n\t\t156\n\t],\n\t\"./ru-ua\": [\n\t\t703,\n\t\t155\n\t],\n\t\"./ru-ua.js\": [\n\t\t703,\n\t\t155\n\t],\n\t\"./ru.js\": [\n\t\t704,\n\t\t156\n\t],\n\t\"./sk\": [\n\t\t705,\n\t\t157\n\t],\n\t\"./sk.js\": [\n\t\t705,\n\t\t157\n\t],\n\t\"./sl\": [\n\t\t706,\n\t\t158\n\t],\n\t\"./sl.js\": [\n\t\t706,\n\t\t158\n\t],\n\t\"./th\": [\n\t\t707,\n\t\t160\n\t],\n\t\"./th.js\": [\n\t\t707,\n\t\t160\n\t],\n\t\"./tr\": [\n\t\t708,\n\t\t161\n\t],\n\t\"./tr.js\": [\n\t\t708,\n\t\t161\n\t],\n\t\"./uk-ua\": [\n\t\t709,\n\t\t162\n\t],\n\t\"./uk-ua.js\": [\n\t\t709,\n\t\t162\n\t],\n\t\"./vi\": [\n\t\t710,\n\t\t163\n\t],\n\t\"./vi.js\": [\n\t\t710,\n\t\t163\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1118;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.po\": [\n\t\t1410,\n\t\t166\n\t],\n\t\"./de/messages.po\": [\n\t\t1411,\n\t\t167\n\t],\n\t\"./en-dev/messages.po\": [\n\t\t1413,\n\t\t169\n\t],\n\t\"./en/messages.po\": [\n\t\t1412,\n\t\t168\n\t],\n\t\"./pl/messages.po\": [\n\t\t1414,\n\t\t170\n\t],\n\t\"./sk/messages.po\": [\n\t\t1415,\n\t\t171\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1125;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t1416,\n\t\t166\n\t],\n\t\"./de/messages.js\": [\n\t\t1417,\n\t\t167\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t1419,\n\t\t169\n\t],\n\t\"./en/messages.js\": [\n\t\t1418,\n\t\t168\n\t],\n\t\"./pl/messages.js\": [\n\t\t1420,\n\t\t170\n\t],\n\t\"./sk/messages.js\": [\n\t\t1421,\n\t\t171\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1126;\nmodule.exports = webpackAsyncContext;","import { computeDestinationPoint, getBounds } from 'geolib'\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLng =>\n  // eslint-disable-next-line no-undef\n  new google.maps.LatLng(Number(gps.latitude), Number(gps.longitude))\n\nexport const gpsToLatLngLit = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n\ninterface IGeneratePolygonInput {\n  center: GeoPoint\n  metersRadius?: number\n  pointsCount?: number\n}\n\nexport const generatePolygon = ({\n  center,\n  metersRadius = 1000,\n  pointsCount = 15,\n}: IGeneratePolygonInput) => {\n  return new Array(pointsCount).fill(null).map((_, idx) => {\n    const degree = (360 / pointsCount) * idx\n    return computeDestinationPoint(center, metersRadius, degree)\n  })\n}\n\nexport const getBoundsOfPoints = (points: GeoPoint[]) => {\n  const bounds = getBounds(points)\n  if (!bounds) {\n    return null\n  }\n  // eslint-disable-next-line no-undef\n  return new google.maps.LatLngBounds(\n    {\n      lat: bounds.minLat,\n      lng: bounds.minLng,\n    },\n    {\n      lat: bounds.maxLat,\n      lng: bounds.maxLng,\n    },\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport loaderGif from '../assets/loader.gif'\nimport { appConfig } from '../config'\n\nconst StyledPageLoader = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n`\n\nconst PageLoader: React.FC = () => (\n  <StyledPageLoader role=\"banner\">\n    <img\n      src={loaderGif}\n      alt={appConfig.pageTitleSuffix}\n      width={200}\n      height={200}\n    />\n  </StyledPageLoader>\n)\n\nexport default PageLoader\n","import React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { RedirectToLogin } from './RedirectToLogin'\n\ninterface ISecureRouteProps extends RouteProps {\n  redirect?: boolean\n  lazy?: boolean\n}\n\nexport const SecureRoute: React.FC<ISecureRouteProps> = ({\n  redirect = true,\n  lazy = true,\n  ...props\n}) => {\n  const { auth } = useRoot()\n  if (!auth.isAuthenticatedUser) {\n    return redirect ? <RedirectToLogin /> : <NotFoundPage />\n  }\n  if (props.component && typeof props.component === 'object') {\n    const { component, path, exact } = props\n    return <LazyRoute path={path} exact={exact} component={component} />\n  }\n  return <Route {...props} />\n}\n","import { Trans } from '@lingui/macro'\nimport { Dialog } from '@material-ui/core'\nimport { WarningTwoTone } from '@material-ui/icons'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport connectionWarningSound from '../assets/connectionWarning.mp3'\nimport { isNetworkOffline } from '../helpers/offline'\nimport { useIntervalSound } from '../hooks/useIntervalSound'\nimport { Colors } from '../styling'\n\nconst MessageStyled = styled.div`\n  padding: 1rem;\n  background-color: ${Colors.red} !important;\n  font-size: 2rem;\n\n  & svg {\n    position: relative;\n    top: 0.3rem;\n    padding-right: 0.5rem;\n  }\n`\n\nexport const ConnectionWarning = observer(() => {\n  const audio = useIntervalSound({\n    soundUrl: connectionWarningSound,\n    intervalSec: 30,\n    shouldPlay: isNetworkOffline(),\n  })\n  return (\n    <>\n      {audio}\n      <Dialog\n        open={isNetworkOffline()}\n        disableBackdropClick={true}\n        disableEscapeKeyDown={true}\n      >\n        <MessageStyled>\n          <WarningTwoTone fontSize=\"large\" />\n          <Trans>Internet connection is not available</Trans>\n        </MessageStyled>\n      </Dialog>\n    </>\n  )\n})\n","import React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { logRouting } from '../helpers/logger'\n\nexport const LogRoute: React.FC = () => {\n  if (process.env.NODE_ENV !== 'development') {\n    return (\n      <Route>\n        {({ location }) => {\n          logRouting('at %s', location.pathname)\n          return null\n        }}\n      </Route>\n    )\n  } else {\n    return null\n  }\n}\n","import debug from 'debug'\nimport { when } from 'mobx'\nimport React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { WithRoot } from '../atoms/WithRoot'\n\nconst log = debug('routing')\n\nexport const RedirectAfterLogin = () => (\n  <Route\n    children={({ location, history }) => (\n      <WithRoot\n        render={root => {\n          if (!root.auth.isAuthenticatedUser) {\n            const route = (location.state && location.state.origin) || '/'\n            const waitForAuthentication = () => root.auth.isAuthenticated\n            const redirectAfterLogin = () => {\n              history.replace(route)\n            }\n            when(waitForAuthentication, redirectAfterLogin)\n            log('will redirect to %s when auth', route)\n          }\n          return null\n        }}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { RedirectToLogin } from './RedirectToLogin'\n\nexport const RedirectAfterLogout = () => {\n  const { auth, user, order, createOrder, settings, zone } = useRoot()\n  if (auth.isAuthenticated) {\n    auth.invalidate()\n    user.invalidate()\n    order.invalidate()\n    createOrder.invalidate()\n    settings.invalidate()\n    zone.invalidate()\n    return <RedirectToLogin useOrigin={false} />\n  }\n  return <Redirect to=\"/\" />\n}\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport PageLoader from '../atoms/PageLoader'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LogRoute } from './LogRoute'\nimport { RedirectAfterLogin } from './RedirectAfterLogin'\nimport { RedirectAfterLogout } from './RedirectAfterLogout'\nimport { SecureRoute } from './SecureRoute'\n\nconst PasswordLoginRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordLoginRoute'),\n)\n\nconst PasswordChangeRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordChangeRoute'),\n)\n\nconst PasswordResetRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordResetRoute'),\n)\n\nconst MainDashboardPage = React.lazy(() =>\n  import('../segments/main/pages/MainDashboardPage'),\n)\n\nconst OrderRoutes = React.lazy(() =>\n  import('../segments/order/routes/OrderRoutes'),\n)\n\nconst KitchenRoutes = React.lazy(() =>\n  import('../segments/kitchen/routes/KitchenRoutes'),\n)\n\nconst SettingsRoutes = React.lazy(() =>\n  import('../segments/settings/routes/SettingsRoutes'),\n)\n\nconst OverviewRoutes = React.lazy(() =>\n  import('../segments/overview/routes/OverviewRoutes'),\n)\n\nconst SupportPage = React.lazy(() =>\n  import('../segments/main/pages/SupportPage'),\n)\n\nconst StockPage = React.lazy(() =>\n  import('../segments/main/pages/StockDashboardPage'),\n)\n\nexport const Routing = () => (\n  <React.Suspense fallback={<PageLoader />}>\n    <LogRoute />\n    <RedirectAfterLogin />\n    <Switch>\n      <Route path=\"/login\" component={PasswordLoginRoute} />\n      <Route path=\"/reset\" exact={true} component={PasswordResetRoute} />\n      <Route\n        path=\"/recovery/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <Route\n        path=\"/register/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <SecureRoute path=\"/\" exact={true} component={MainDashboardPage} />\n      <SecureRoute path=\"/order\" component={OrderRoutes} />\n      <SecureRoute path=\"/kitchen\" component={KitchenRoutes} />\n      <SecureRoute path=\"/settings\" component={SettingsRoutes} />\n      <SecureRoute path=\"/overview\" component={OverviewRoutes} />\n      <Route path=\"/support\" component={SupportPage} />\n      <Route path=\"/stock\" component={StockPage} />\n      <Route path=\"/logout\" component={RedirectAfterLogout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </React.Suspense>\n)\n","import { Trans } from '@lingui/macro'\nimport { Autorenew, ContactSupport, Warning } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { Sizer } from '../atoms/Sizer'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\nconst IconStyled = styled.div`\n  color: ${Colors.orange};\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ninterface IProps {\n  onFeedback(): void\n}\n\nexport const ErrorPage: React.FC<IProps> = ({ onFeedback }) => (\n  <FullPageLayout\n    pageTitle={i18n.t`Application error`}\n    hideLogoutWidget={true}\n    showHomeButton={false}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          We are sorry, but there is an unexpected problem in the app. Our team\n          was notified and will fix this soon.\n        </Trans>\n      </h3>\n      <Center>\n        <IconStyled>\n          <Warning style={{ fontSize: '5rem' }} />\n        </IconStyled>\n        <Sizer width={20}>\n          <TouchButton onClick={onFeedback}>\n            <ContactSupport />\n            <Trans>Send feedback</Trans>\n          </TouchButton>\n        </Sizer>\n        <Sizer width={20}>\n          <TouchButton onClick={() => window.location.reload()}>\n            <Autorenew />\n            <Trans>Restart application</Trans>\n          </TouchButton>\n        </Sizer>\n      </Center>\n    </Card>\n  </FullPageLayout>\n)\n","import { Trans } from '@lingui/macro'\nimport { Cached, OfflineBolt } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { Sizer } from '../atoms/Sizer'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\nconst IconStyled = styled.div`\n  margin-top: 2rem;\n  color: ${Colors.red};\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ninterface IProps {\n  onRetry(): void\n}\n\nexport const ServiceUnreachablePage: React.FC<IProps> = ({ onRetry }) => (\n  <FullPageLayout\n    pageTitle={i18n.t`Service unreachable`}\n    useBackButton={false}\n    hideLogoutWidget={true}\n    showHomeButton={false}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          Connection to external service is not possible at the moment. Please\n          try again later or <a href=\"/support\">contact our support</a>.\n        </Trans>\n      </h3>\n      <Center>\n        <IconStyled>\n          <OfflineBolt style={{ fontSize: '5rem' }} />\n        </IconStyled>\n        <Sizer width={20}>\n          <TouchButton onClick={onRetry} icon={Cached}>\n            {' '}\n            <Trans>Retry the connection</Trans>\n          </TouchButton>\n        </Sizer>\n      </Center>\n    </Card>\n  </FullPageLayout>\n)\n","import {\n  ApolloDefender,\n  isChunkError,\n  isNetworkUnreachableError,\n} from '@speedlo/graphql'\nimport { flushSentry, Sentry } from '@speedlo/sentry'\nimport { SillyErrorBoundary } from '@speedlo/tools'\nimport { isApolloError } from 'apollo-client'\nimport React from 'react'\n\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { i18n } from '../i18n'\nimport { ErrorPage } from '../pages/ErrorPage'\nimport { ServiceUnreachablePage } from '../pages/ServiceUnreachablePage'\n\nexport type ErrorKind = 'none' | 'serviceUnreachable' | 'otherError'\n\nconst makeError = (message: string) =>\n  `${message} ${i18n.t`Our team was notified about the issue.`}`\n\nexport const DefaultErrorHandler: React.FC = ({ children }) => {\n  const { enqueueWarning, enqueueError } = useSnackBar()\n\n  const [errorKind, setErrorKind] = React.useState<ErrorKind>('none')\n\n  const onRetry = React.useCallback(() => {\n    setErrorKind('none')\n  }, [])\n\n  const onUnhandledError = React.useCallback((error: Error) => {\n    if (isChunkError(error)) {\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Debug)\n        Sentry.captureException(error)\n      })\n      flushSentry().then(() => window.location.reload())\n      return\n    }\n    if (isApolloError(error) && isNetworkUnreachableError(error)) {\n      setErrorKind('serviceUnreachable')\n      return\n    }\n    Sentry.captureException(error)\n    setErrorKind('otherError')\n  }, [])\n\n  const onNetworkError = React.useCallback(\n    (error: Error, isUnreachable: boolean) => {\n      if (isUnreachable) {\n        setErrorKind('serviceUnreachable')\n      } else {\n        enqueueError(\n          makeError(\n            i18n.t`Unexpected error occured in communication with service.`,\n          ),\n        )\n      }\n    },\n    [enqueueError],\n  )\n\n  const onOperationError = React.useCallback(() => {\n    enqueueError(\n      makeError(i18n.t`Unexpected error occured while sending a request.`),\n    )\n  }, [enqueueError])\n\n  const onUserErrors = React.useCallback(\n    (messages: ReadonlyArray<string>) => {\n      messages.forEach(enqueueWarning)\n    },\n    [enqueueWarning],\n  )\n\n  const render = () => {\n    switch (errorKind) {\n      case 'serviceUnreachable': {\n        return <ServiceUnreachablePage onRetry={onRetry} />\n      }\n      case 'otherError': {\n        return <ErrorPage onFeedback={showFeedback} />\n      }\n      default: {\n        return children\n      }\n    }\n  }\n\n  return (\n    <ApolloDefender\n      onNetworkError={onNetworkError}\n      onUserErrors={onUserErrors}\n      onOperationError={onOperationError}\n    >\n      <SillyErrorBoundary onError={onUnhandledError}>\n        {render()}\n      </SillyErrorBoundary>\n    </ApolloDefender>\n  )\n}\n\nfunction showFeedback() {\n  Sentry.showReportDialog({\n    labelClose: i18n.t`Close`,\n    title: i18n.t`Unexpected error in the app`,\n  })\n}\n","import React from 'react'\nimport { Provider as GoodByeProvider } from 'react-goodbye'\nimport { BrowserRouter } from 'react-router-dom'\n\ninterface IProps {}\n\nexport const Router: React.FC<IProps> = ({ children }) => (\n  <GoodByeProvider>\n    {({ handleGetUserConfirm }) => (\n      <BrowserRouter getUserConfirmation={handleGetUserConfirm}>\n        {children}\n      </BrowserRouter>\n    )}\n  </GoodByeProvider>\n)\n","import { css } from 'emotion'\nimport { SnackbarProvider } from 'notistack'\nimport React from 'react'\n\nimport { Colors, FontSizes } from '../styling'\n\ninterface IProps {}\n\nconst successStyle = css`\n  background: ${Colors.green} !important;\n  font-size: ${FontSizes.InfoMessageFontSize} !important;\n`\nconst errorStyle = css`\n  background: ${Colors.red};\n  font-size: ${FontSizes.InfoMessageFontSize} !important;\n`\nconst warningStyle = css`\n  background: ${Colors.orange};\n  font-size: ${FontSizes.InfoMessageFontSize} !important;\n`\nexport const snackStyles = {\n  variantSuccess: successStyle,\n  variantInfo: successStyle,\n  variantError: errorStyle,\n  variantWarning: warningStyle,\n}\n\nexport const SnackProvider: React.FC<IProps> = ({ children }) => (\n  <SnackbarProvider\n    maxSnack={3}\n    classes={snackStyles}\n    anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\n  >\n    {children}\n  </SnackbarProvider>\n)\n","import { Button, Snackbar } from '@material-ui/core'\nimport { SnackbarProps } from '@material-ui/core/Snackbar'\nimport { HOUR, MINUTE, SECOND, useInterval, useTimer } from '@speedlo/hooks'\nimport { updateWorker } from '@speedlo/tools'\nimport { addMilliseconds, formatDistanceStrict } from 'date-fns'\nimport { useObservable, useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { logUpdate } from '../helpers/logger'\nimport { i18n } from '../i18n'\nimport { snackStyles } from './SnackProvider'\n\nexport interface IProps {\n  onRestart?(): void\n  autoUpdateDelay?: number\n  postponeTimeout?: number\n  updateCheckInterval?: number\n  serviceWorker?: ServiceWorkerContainer\n}\n\nexport const UpdateHandler: React.FC<IProps> = ({\n  onRestart = () => window.location.reload(),\n  autoUpdateDelay = 20 * SECOND,\n  postponeTimeout = 2 * MINUTE,\n  updateCheckInterval = process.env.REACT_APP_STAGE === 'prod'\n    ? 1 * HOUR\n    : 5 * MINUTE,\n  serviceWorker = window.navigator.serviceWorker,\n}) => {\n  const registrationWorkerRef = React.useRef<ServiceWorkerRegistration | null>(\n    null,\n  )\n  const updateWorkerRef = React.useRef<ServiceWorker | null>(null)\n\n  const state = useObservable({ updatePending: false, applyingUpdate: false })\n\n  useInterval(() => {\n    if (registrationWorkerRef.current) {\n      logUpdate('checking...')\n      registrationWorkerRef.current.update().catch(() => {\n        // don't really care if check fails\n      })\n    }\n  }, updateCheckInterval)\n\n  React.useEffect(() => {\n    const onMessage = (event: MessageEvent) => {\n      if (event.data === 'update-applied') {\n        logUpdate('restarting to apply...')\n        onRestart()\n      }\n    }\n    if (serviceWorker) {\n      serviceWorker.addEventListener('message', onMessage)\n      return () => {\n        serviceWorker.removeEventListener('message', onMessage)\n      }\n    } else {\n      logUpdate('serviceWorker is not supported')\n      return () => {\n        /* noop */\n      }\n    }\n  }, [onRestart, serviceWorker])\n\n  React.useEffect(() => {\n    const init = updateWorker.register({\n      onInit: reg => {\n        registrationWorkerRef.current = reg\n      },\n      onUpdate: sw => {\n        updateWorkerRef.current = sw\n        state.updatePending = true\n        logUpdate('new update is available')\n      },\n    })\n    // service worker is normally using load event, but since this\n    // done after the load, it has to be triggered manually\n    init()\n  }, [state])\n\n  const onCancel = React.useCallback(() => {\n    logUpdate('user postponed')\n    state.updatePending = false\n    setTimeout(() => {\n      logUpdate('reminding update to user again')\n      state.updatePending = true\n    }, postponeTimeout)\n  }, [postponeTimeout, state])\n\n  const onConfirm = React.useCallback(() => {\n    state.updatePending = false\n    if (updateWorkerRef.current) {\n      logUpdate('user confirmed')\n      state.applyingUpdate = true\n      updateWorkerRef.current.postMessage('apply-update')\n    }\n  }, [state])\n\n  if (state.applyingUpdate && process.env.NODE_ENV !== 'test') {\n    throw new Promise(() => {\n      // Suspense will catch it and show loader while the update is being applied\n    })\n  }\n\n  return useObserver(() =>\n    state.updatePending ? (\n      <UpdateSnack\n        autoHideDuration={autoUpdateDelay}\n        onCancel={onCancel}\n        onConfirm={onConfirm}\n      />\n    ) : null,\n  )\n}\n\ninterface IUpdateSnackProps extends LegacyOmit<SnackbarProps, 'open'> {\n  autoHideDuration: number\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport function UpdateSnack(props: IUpdateSnackProps) {\n  const { onConfirm, onCancel, ...rest } = props\n  const now = useTimer({ interval: SECOND, enabled: true })\n  const [endTime] = React.useState(() =>\n    addMilliseconds(now, props.autoHideDuration),\n  )\n  const remainingSeconds = formatDistanceStrict(endTime, now)\n\n  React.useEffect(() => {\n    if (now >= endTime) {\n      onConfirm()\n    }\n  }, [now, endTime, onConfirm])\n\n  return (\n    <Snackbar\n      open={true}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center',\n      }}\n      className={snackStyles.variantInfo}\n      message={\n        <span data-testid=\"message\">{i18n.t`Application will be restarted in ${remainingSeconds} to apply available update.`}</span>\n      }\n      disableWindowBlurListener={true}\n      action={[\n        <Button\n          key=\"later\"\n          color=\"secondary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"postpone-button\"\n          onClick={onCancel}\n        >\n          {i18n.t`Postpone update`}\n        </Button>,\n        <Button\n          key=\"confirm\"\n          color=\"primary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"confirm-button\"\n          onClick={onConfirm}\n        >\n          {i18n.t`Restart now`}\n        </Button>,\n      ]}\n      {...rest}\n    />\n  )\n}\n","import { Sentry } from '@speedlo/sentry'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { useQUserBootstrap } from '../graph/generated'\nimport { RM } from '../helpers/ramda'\n\nexport const UserBootstrap = observer(() => {\n  const { auth, user } = useRoot()\n\n  const { data, loading } = useQUserBootstrap(\n    { userId: auth.userId },\n    { skip: !auth.isAuthenticatedUser },\n  )\n\n  React.useEffect(() => {\n    if (!auth.userId) {\n      user.finishBootstrap()\n      Sentry.configureScope(scope => {\n        scope.setUser({\n          id: undefined,\n          username: undefined,\n        })\n        scope.setExtra('roles', [])\n        scope.setExtra('branches', [])\n      })\n    }\n  })\n\n  React.useEffect(() => {\n    if (auth.isAuthenticatedUser && !loading) {\n      user.applyUserData(data.user)\n      user.applyAccess(data.access)\n      user.applyPermissions(data.permissions)\n      user.finishBootstrap()\n      Sentry.configureScope(scope => {\n        scope.setUser({\n          id: auth.userId,\n          username: `${data.user.firstName} ${data.user.lastName}`,\n        })\n        scope.setExtras({\n          roles: data.user.roles.map(RM.prop('name')),\n          branches: data.user.branches.map(RM.prop('id')),\n        })\n      })\n    }\n  })\n\n  return null\n})\n","import { useReleaseCabinet } from '@speedlo/tools/dist/useReleaseCabinet'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ConnectionWarning } from '../atoms/ConnectionWarning'\nimport PageLoader from '../atoms/PageLoader'\nimport { useRoot } from '../atoms/RootProvider'\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { Routing } from '../routes/Routing'\nimport { DefaultErrorHandler } from './DefaultErrorHandler'\nimport { Router } from './Router'\nimport { UpdateHandler } from './UpdateHandler'\nimport { UserBootstrap } from './UserBootstrap'\n\nexport const AppMain: React.FC = () => {\n  const { user } = useRoot()\n\n  const { enqueueInfo } = useSnackBar()\n  useReleaseCabinet(enqueueInfo)\n\n  return (\n    <DefaultErrorHandler>\n      <UserBootstrap />\n      <UpdateHandler />\n      <ConnectionWarning />\n      <React.Suspense fallback={<PageLoader />}>\n        <Router>\n          <Observer>\n            {() => (user.isReady ? <Routing /> : <PageLoader />)}\n          </Observer>\n        </Router>\n      </React.Suspense>\n    </DefaultErrorHandler>\n  )\n}\n","import { useSentryInit } from '@speedlo/sentry'\nimport React from 'react'\n\nimport { RootProvider } from '../atoms/RootProvider'\nimport { appConfig } from '../config'\nimport { I18nManager } from '../i18n'\nimport { SnackProvider } from './SnackProvider'\n\nexport const AppProvider: React.FC = ({ children }) => {\n  useSentryInit(appConfig.sentryDSN)\n  return (\n    <RootProvider>\n      <I18nManager>\n        <SnackProvider>{children}</SnackProvider>\n      </I18nManager>\n    </RootProvider>\n  )\n}\n","import { createGlobalStyle } from 'styled-components'\n\nimport backgroundImage from '../assets/bg_antracit.jpg'\n\nexport const GlobalStyles = createGlobalStyle`\n  body,\n  input,\n  textarea,\n  select,\n  button {\n    margin: 0;\n    padding: 0;\n    font-family: 'Open Sans', sans-serif;\n    font-size: 16px;\n  }\n  body {\n    background-color: #322e2d;\n    color: white;\n    background-image: url(${backgroundImage});\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-size: cover;\n  }\n\n  input {\n    padding: 0.5rem;\n    border: 1px solid #95989a;\n    border-radius: 0.25rem;\n  }\n\n  /* react-grid disabling animation */\n  .react-grid-item {\n    transition: all 0s;\n  }\n\n  /* apply a natural box layout model to all elements, but allowing components to change */\n  html {\n    box-sizing: border-box;\n  }\n  *,\n  *:before,\n  *:after {\n    box-sizing: inherit;\n  }\n`\n","import './enableDebug'\n\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport { AppMain } from './app/AppMain'\nimport { AppProvider } from './app/AppProvider'\nimport { GlobalStyles } from './app/GlobalStyles'\nimport PageLoader from './atoms/PageLoader'\n\nconst Main = () => {\n  return (\n    <React.Suspense fallback={<PageLoader />}>\n      <>\n        <GlobalStyles />\n        <AppProvider>\n          <AppMain />\n        </AppProvider>\n      </>\n    </React.Suspense>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nrender(<Main />, rootElement)\n","import { SvgIconComponent } from '@material-ui/icons'\nimport React, { MouseEvent } from 'react'\nimport styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile } from '../app/Responsive'\nimport { Icon } from '../atoms/Icon'\nimport { logError } from '../helpers/logger'\nimport { applyAlphaToColor, Colors, Radiuses, Spacing } from '../styling'\n\nexport interface ITouchButtonProps\n  extends React.HTMLAttributes<HTMLButtonElement> {\n  icon?: SvgIconComponent\n  iconName?: string\n  iconColor?: Colors\n  iconSize?: number\n  text?: string\n  color?: Colors\n  badge?: ReactNode\n  disabled?: boolean\n  textNextToIcon?: boolean\n  className?: string\n  width?: string\n  height?: string\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n}\n\nconst applyAlpha = (alphaValue: number) => (props: ITouchButtonProps) =>\n  applyAlphaToColor(props.color!, alphaValue)\n\nconst StyledTouchButton = styled.button`\n  min-height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  min-width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  width: ${({ width = '100%' }: ITouchButtonProps) => width};\n  height: ${({ height = '100%' }: ITouchButtonProps) => height};\n  margin: 0;\n  padding: 0 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  user-select: none;\n  /* fallback font size for incompatible browsers */\n  font-size: 1rem;\n  ${mediaDesktop`\n    font-size: calc(0.6rem + 0.5vw);\n  `}\n  ${mediaMobile`\n    font-size: calc(0.9rem + 0.5vw);\n  `};\n  transition-duration: 0.2s;\n\n  & .materialIcon {\n    vertical-align: middle;\n  }\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nconst ButtonLabelStyled = styled.div`\n  color: white;\n  text-align: center;\n  width: 100%;\n  overflow: hidden;\n`\nconst ButtonLabelNextToIconStyled = styled(ButtonLabelStyled)`\n  width: calc(100% - 4rem);\n  margin: 0 0 0 1rem;\n  text-align: left;\n  display: inline-block;\n  vertical-align: top;\n  overflow: hidden;\n`\n\nexport const TouchButton = React.forwardRef<\n  HTMLButtonElement,\n  ITouchButtonProps\n>(\n  (\n    {\n      children,\n      icon,\n      iconName,\n      iconColor = Colors.white,\n      iconSize = 3,\n      color = Colors.greyMiddle,\n      textNextToIcon = false,\n      badge,\n      text,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    if (iconName) {\n      logError(\n        `TouchButton: Do not use iconName prop! Replace \"${iconName}\" with the one imported from @material-ui/icons and pass in icon prop instead.`,\n      )\n    }\n    return (\n      <StyledTouchButton color={color} {...props} ref={forwardedRef}>\n        {icon && <Icon icon={icon} color={iconColor} fontSize={iconSize} />}\n\n        {text && textNextToIcon && (\n          <ButtonLabelNextToIconStyled>{text}</ButtonLabelNextToIconStyled>\n        )}\n\n        {text && !textNextToIcon && (\n          <ButtonLabelStyled>{text}</ButtonLabelStyled>\n        )}\n\n        {badge}\n        {children}\n      </StyledTouchButton>\n    )\n  },\n)\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { Spacing } from '../styling'\nimport { MarginBox } from './MarginBox'\n\ninterface IProps {\n  width?: number\n  widthUnit?: string\n  height?: number\n  heightUnit?: string\n  margin?: string\n  className?: string\n}\n\nconst widthProperty = ({\n  width,\n  widthUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (width === undefined) {\n    return ''\n  } else {\n    return `width: ${width}${widthUnit}`\n  }\n}\n\nconst heightProperty = ({\n  height,\n  heightUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (height === undefined) {\n    return ''\n  } else {\n    return `height: ${height}${heightUnit}`\n  }\n}\n\nconst StyledSizer = styled('div')`\n  ${widthProperty};\n  ${heightProperty};\n`\n\nexport const Sizer: React.FC<IProps> = ({\n  width,\n  widthUnit = Spacing.DefaultSizeUnit,\n  height,\n  heightUnit = Spacing.DefaultSizeUnit,\n  margin,\n  children,\n  className,\n  ...props\n}) => {\n  const wrap = (\n    <StyledSizer\n      width={width}\n      widthUnit={widthUnit}\n      height={height}\n      heightUnit={heightUnit}\n      className={className}\n      {...props}\n    >\n      {children}\n    </StyledSizer>\n  )\n\n  return margin === undefined ? (\n    wrap\n  ) : (\n    <MarginBox margin={margin}>{wrap}</MarginBox>\n  )\n}\n","import { isSameDay } from 'date-fns'\nimport { format, formatWithOptions } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\nimport numeral from 'numeral'\n\nimport { FAddressFragment, FUserNameFragment } from '../graph/generated'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const fullDateFormat = 'dddd LL'\nexport const formatFullDate = formatLocale(fullDateFormat)\n\nexport const dateFormat = 'D.M.YYYY'\nexport const formatDate = formatLocale(dateFormat)\n\nexport const dateFormatISO = 'YYYY-MM-DD'\nexport const formatDateISO = format(dateFormatISO)\n\nexport const timeFormat = 'H:mm'\nexport const formatTime = formatLocale(timeFormat)\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const priceFormat = '0,0.[00]'\nexport const formatPrice = price => numeral(price).format(priceFormat)\n\nexport const formatTimeWithoutTodayDate = (time: string) =>\n  isSameDay(time, new Date()) ? formatTime(time) : formatDateTime(time)\n\nexport const formatAddress = (address: FAddressFragment) => {\n  if (!address) {\n    return ''\n  }\n  if (!address.street) {\n    if (address.city && address.houseNumber) {\n      return `${address.city} ${address.houseNumber}, ${address.state}`\n    }\n    if (address.city) {\n      if (address.state) {\n        return `${address.city}, ${address.state}`\n      }\n      return address.city\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n\nexport function formatFullName(user: FUserNameFragment) {\n  return `${user.lastName} ${user.firstName}`.trim()\n}\n","import { SvgIconComponent } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { logError } from '../helpers/logger'\nimport { Colors, Spacing } from '../styling'\n\ninterface IProps {\n  icon?: SvgIconComponent\n  iconName?: string\n  color?: string\n  fontSize?: number\n  fontSizeUnit?: string\n}\n\nconst StyledIcon = styled.span<IProps>`\n  color: ${({ color }) => color};\n  > svg {\n    font-size: ${({ fontSize, fontSizeUnit }) => `${fontSize}${fontSizeUnit}`};\n  }\n`\n\nexport const Icon = React.memo<IProps>(\n  ({\n    iconName,\n    icon,\n    children,\n    color = Colors.white,\n    fontSize = 1.5,\n    fontSizeUnit = Spacing.DefaultSizeUnit,\n  }) => {\n    if (iconName) {\n      // tslint:disable-next-line: no-console\n      logError(\n        `Icon: Do not use iconName! Replace \"${iconName}\" with the one imported from @material-ui/icons and pass in icon prop instead.`,\n      )\n      return null\n    }\n    if (icon && children) {\n      // tslint:disable-next-line: no-console\n      logError(\n        `Icon: Do not use both icon prop & children! Only one of them is allowed.`,\n      )\n      return null\n    }\n    const iconNode = icon ? React.createElement(icon) : children\n    return (\n      <StyledIcon\n        color={color}\n        fontSize={fontSize}\n        fontSizeUnit={fontSizeUnit}\n        className=\"materialIcon\"\n      >\n        {iconNode}\n      </StyledIcon>\n    )\n  },\n)\n","import { autorun, observable } from 'mobx'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { mediaMobile } from '../app/Responsive'\nimport { appConfig } from '../config'\nimport { RM } from '../helpers/ramda'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  title: string\n}\n\nconst TitleStyled = styled.h1`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  margin: 0.5rem 0.5rem 0 0.5rem;\n  white-space: nowrap;\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.9);\n  ${mediaMobile`\n    font-size: 1.2rem;\n  `};\n`\n\nconst observableTitles = observable.array<string>([])\n\nautorun(() => {\n  const lastTitle = Array.from(observableTitles).pop()\n  if (lastTitle) {\n    document.title = `${lastTitle} :: ${appConfig.pageTitleSuffix}`\n  } else {\n    document.title = appConfig.pageTitleSuffix\n  }\n})\n\nconst PageTitleDisplay: React.FC = () => (\n  <Observer>\n    {() => <TitleStyled>{observableTitles.join(' - ')}</TitleStyled>}\n  </Observer>\n)\n\nexport class PageTitle extends React.Component<IProps> {\n  static Route = PageTitleRoute\n  static Display = PageTitleDisplay\n  componentDidMount() {\n    observableTitles.push(this.props.title)\n  }\n  componentDidUpdate(prevProps: IProps) {\n    const idx = observableTitles.findIndex(RM.equals(prevProps.title))\n    if (idx >= 0) {\n      observableTitles.splice(idx, 1, this.props.title)\n    }\n  }\n  componentWillUnmount() {\n    observableTitles.remove(this.props.title)\n  }\n  render() {\n    return null\n  }\n}\n\nfunction PageTitleRoute({ title, ...props }: IProps & RouteProps) {\n  return <Route {...props} render={() => <PageTitle title={title} />} />\n}\n","import Color from 'color'\n\nimport { RM } from './helpers/ramda'\n\nexport enum Colors {\n  yellow = '#FFDB2B',\n  pink = '#FF2B95',\n  blue = '#2441FF',\n  red = '#FF1C1C',\n  green = '#179B12',\n  turquoise = '#2BFFFF',\n  orange = '#FF862B',\n  violet = '#6D4F8C',\n  black = '#000000',\n  greyDarkest = '#080808',\n  greyDark = '#2C2C2C',\n  greyMiddle = '#939393',\n  greyLight = '#EDEDED',\n  white = '#FFFFFF',\n}\n\nexport const applyAlphaToColor = RM.curry((color: Colors, alphaValue: number) =>\n  Color(color)\n    .alpha(alphaValue)\n    .string(),\n)\n\nexport enum Radiuses {\n  Card = '0.5rem',\n  Button = '0.5rem',\n  TextComponent = '0.25rem',\n}\n\nexport const Spacing = {\n  MarginAroundFormComponents: '0.1rem',\n  Small: '0.25rem',\n  Middle: '0.5rem',\n  LayoutGridCellMargin: '0.5rem',\n  ButtonHeight: 3.4375,\n  DashboardButtonHeight: 6,\n  DefaultInputWidth: 20,\n  DefaultSizeUnit: 'rem',\n  ButtonColumnWidthPx: 55,\n  PageHeaderHeight: 4.4375,\n  OrderFlowMenuButtonWidth: 7.375,\n}\n\nexport const FontSizes = {\n  InfoMessageFontSize: '1.375rem',\n  CompactCard: '0.95rem',\n  CompactCardBig: '1rem',\n}\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import Color from 'color'\nimport styled, { css } from 'styled-components/macro'\n\nimport { Colors, Radiuses } from '../styling'\n\ninterface IProps {\n  color?: string\n  textColor?: string\n  padding?: number\n  stretchToParent?: boolean\n}\n\nexport const Card = styled.div`\n  background: ${getBackgroundColor};\n  color: ${getTextColor};\n  border-radius: ${Radiuses.Card};\n  padding: ${getPadding}rem;\n  margin: 0 0 0.5rem 0;\n  position: relative;\n  ${applyStretchToParentStyle};\n`\n\nCard.displayName = 'Card'\n\nfunction getPadding({ padding = 0.5 }: IProps) {\n  return padding\n}\n\nfunction getBackgroundColor({ color }: IProps) {\n  return Color(color || Colors.greyLight)\n    .alpha(0.8)\n    .lighten(0.4)\n    .string()\n}\n\nfunction getTextColor(props: IProps) {\n  return props.textColor || Colors.black\n}\n\nfunction applyStretchToParentStyle({ stretchToParent = false }: IProps) {\n  if (!stretchToParent) {\n    return ''\n  }\n  return css`\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  `\n}\n","import React from 'react'\n\nimport { PageLayoutGridItem } from '../atoms/PageLayoutGridItem'\nimport { IPageLayoutProps, PageLayoutResponsive } from './PageLayoutResponsive'\n\ninterface IFullPageLayoutProps extends IPageLayoutProps {}\n\nexport const FullPageLayout: React.FC<IFullPageLayoutProps> = ({\n  children,\n  ...props\n}) => (\n  <PageLayoutResponsive {...props}>\n    <PageLayoutGridItem gridColumn=\"span 16\">{children}</PageLayoutGridItem>\n  </PageLayoutResponsive>\n)\n","import { useSnackbar as useSnackbarOrig, VariantType } from 'notistack'\nimport React from 'react'\n\nconst successVariant = { variant: 'success' as VariantType }\nconst errorVariant = { variant: 'error' as VariantType }\nconst warningVariant = { variant: 'warning' as VariantType }\nconst infoVariant = { variant: 'info' as VariantType }\n\nexport function useSnackBar() {\n  const { enqueueSnackbar } = useSnackbarOrig()\n  return {\n    enqueueSnackbar,\n    enqueueSuccess: React.useCallback(\n      (errorMessage: string) => enqueueSnackbar(errorMessage, successVariant),\n      [enqueueSnackbar],\n    ),\n    enqueueError: React.useCallback(\n      (errorMessage: string) => enqueueSnackbar(errorMessage, errorVariant),\n      [enqueueSnackbar],\n    ),\n    enqueueWarning: React.useCallback(\n      (errorMessage: string) => enqueueSnackbar(errorMessage, warningVariant),\n      [enqueueSnackbar],\n    ),\n    enqueueInfo: React.useCallback(\n      (errorMessage: string) => enqueueSnackbar(errorMessage, infoVariant),\n      [enqueueSnackbar],\n    ),\n  }\n}\n","import React from 'react'\n\nimport { PageTitle } from '../atoms/PageTitle'\nimport { i18n } from '../i18n'\n\nexport const NotFoundPage: React.FC = () => (\n  <>\n    <PageTitle title={i18n.t`Not found`} />\n    <h1>{i18n.t`There is nothing here, sorry!`}</h1>\n  </>\n)\n","import { DocumentNode } from 'graphql'\nimport { Lambda } from 'mobx'\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\n\nimport { Loading } from '../atoms/Loading'\nimport { whenGoingOnline } from '../helpers/offline'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends LegacyOmit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean\n    refetchOnConnectionLost?: boolean\n  }\n  const GQuery: React.FC<IProps> = props => {\n    const cleanup = useRef<Lambda[]>([])\n    const executeCleanup = useCallback(() => {\n      cleanup.current.forEach(fn => fn())\n      cleanup.current.length = 0\n    }, [])\n\n    useEffect(() => {\n      return executeCleanup\n    }, [cleanup.current.length, executeCleanup])\n\n    const {\n      render,\n      renderFragment,\n      renderLoading = true,\n      refetchOnConnectionLost = false,\n      children,\n      ...rest\n    } = props\n\n    return (\n      // @ts-ignore Some weird changes in @types/react\n      <Query query={query} {...rest}>\n        {result => {\n          if (result.loading) {\n            if (typeof renderLoading === 'function') {\n              return renderLoading(result)\n            } else if (renderLoading === true) {\n              return <Loading />\n            }\n          }\n          if (result.error) {\n            throw result.error\n          }\n          if (refetchOnConnectionLost) {\n            cleanup.current.push(whenGoingOnline(result.refetch))\n          }\n          if (result.data) {\n            if (renderFragment) {\n              return <>{renderFragment(result.data, result)}</>\n            }\n            if (render) {\n              return render(result.data, result)\n            }\n          }\n          return children || null\n        }}\n      </Query>\n    )\n  }\n  return GQuery\n}\n","import debug from 'debug'\nimport React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\n\ninterface IRedirectToLoginProps {\n  useOrigin?: boolean\n}\n\nconst log = debug('routing')\n\nexport const RedirectToLogin: React.FC<IRedirectToLoginProps> = ({\n  useOrigin = true,\n}) => (\n  <Route\n    path=\"/login\"\n    children={({ match, location }) => {\n      if (match) {\n        return null\n      }\n      log('redirecting to login...')\n      return (\n        <Redirect\n          to={{\n            pathname: '/login',\n            state: { origin: useOrigin ? location.pathname : '/' },\n          }}\n        />\n      )\n    }}\n  />\n)\n","import { DefaultApolloClient } from '@speedlo/graphql'\nimport debug from 'debug'\nimport { getPath, getRoot, types } from 'mobx-state-tree'\n\nimport { TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    return debug(`model${getPath(self)}`)\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n  get client(): DefaultApolloClient {\n    return this.root.apolloClient\n  },\n}))\n","import * as RM from 'ramda'\n\nexport { RM }\n","import React from 'react'\n\nimport { Spacing } from '../styling'\nimport { Sizer } from './Sizer'\n\ninterface IProps {\n  className?: string\n}\n\nexport const SizerButton: React.FC<IProps> = ({ children, ...props }) => {\n  return (\n    <Sizer\n      width={Spacing.ButtonHeight}\n      height={Spacing.ButtonHeight}\n      {...props}\n    >\n      {children}\n    </Sizer>\n  )\n}\n","import styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile } from '../app/Responsive'\n\nexport interface IPageLayoutGridItemProps {\n  gridRow?: string | number\n  gridRowInMobile?: string | number\n  gridRowSpan?: number\n  gridRowSpanInMobile?: number\n  gridColumn?: string | number\n  gridColumnInMobile?: string | number\n  gridColumnSpan?: number\n  gridColumnSpanInMobile?: number\n}\n\nconst gridColumnProperty = ({\n  gridColumn = '1',\n  gridColumnSpan = 1,\n}: IPageLayoutGridItemProps) =>\n  gridColumn.toString().indexOf('/') === -1\n    ? `${gridColumn} / span ${gridColumnSpan}`\n    : gridColumn\n\nconst gridRowProperty = ({\n  gridRow = '1',\n  gridRowSpan = 1,\n}: IPageLayoutGridItemProps) =>\n  gridRow.toString().indexOf('/') === -1\n    ? `${gridRow} / span ${gridRowSpan}`\n    : gridRow\n\nconst gridColumnInMobileProperty = ({\n  gridColumn = '1',\n  gridColumnInMobile = 1,\n  gridColumnSpanInMobile = 16,\n}: IPageLayoutGridItemProps) => {\n  if (gridColumnInMobile.toString().indexOf('/') === -1) {\n    return `${gridColumnInMobile} / span ${gridColumnSpanInMobile}`\n  } else {\n    return gridColumnInMobile\n  }\n}\n\nconst gridRowInMobileProperty = ({\n  gridRow = '1',\n  gridRowInMobile,\n  gridRowSpanInMobile = 1,\n}: IPageLayoutGridItemProps) => {\n  if (gridRowInMobile === undefined) {\n    return 'unset'\n  }\n  if (gridRowInMobile.toString().indexOf('/') === -1) {\n    return `${gridRowInMobile} / span ${gridRowSpanInMobile}`\n  } else {\n    return gridRowInMobile\n  }\n}\n\nexport const PageLayoutGridItem = styled.div<IPageLayoutGridItemProps>`\n  ${mediaDesktop`\n    grid-column: ${gridColumnProperty};\n    grid-row: ${gridRowProperty};\n  `};\n  ${mediaMobile`\n    grid-column: ${gridColumnInMobileProperty};\n    grid-row: ${gridRowInMobileProperty};\n  `};\n`\n","import styled from 'styled-components/macro'\n\nimport { Spacing } from '../styling'\n\ninterface IProps {\n  isForIconDashboard: boolean\n}\n\nconst getGridTemplatesRows = (props: IProps) =>\n  props.isForIconDashboard\n    ? `repeat(4, ${Spacing.DashboardButtonHeight + Spacing.DefaultSizeUnit})`\n    : 'repeat(16, auto)'\n\nconst getGridGap = (props: IProps) =>\n  props.isForIconDashboard ? `${Spacing.Middle}` : `0 ${Spacing.Small}`\n\nexport const PageLayoutGrid = styled.div<IProps>`\n  display: grid;\n  width: 100vw;\n  max-width: 100%;\n  grid-gap: ${getGridGap};\n  grid-template-columns: repeat(16, 1fr);\n  grid-template-rows: ${getGridTemplatesRows};\n  padding: 0 ${Spacing.Small} ${Spacing.Small} ${Spacing.Small};\n  grid-auto-flow: row dense;\n`\n","import { VolumeOff, VolumeUp } from '@material-ui/icons'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\nimport { useRoot } from './RootProvider'\nimport { SizerButton } from './SizerButton'\n\nexport const SoundControl: React.FC = () => {\n  const { user } = useRoot()\n  return useObserver(() => (\n    <SizerButton>\n      <TouchButton\n        color={user.soundEnabled ? Colors.green : Colors.red}\n        icon={user.soundEnabled ? VolumeUp : VolumeOff}\n        iconSize={2}\n        onClick={() => {\n          user.controlSound(!user.soundEnabled)\n        }}\n      />\n    </SizerButton>\n  ))\n}\n","import { ExitToApp } from '@material-ui/icons'\nimport { SECOND, useTimer } from '@speedlo/hooks'\nimport { DF } from '@speedlo/tools'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile } from '../app/Responsive'\nimport { useRoot } from '../atoms/RootProvider'\nimport { useQLogoutWidget } from '../graph/generated'\nimport { i18n } from '../i18n'\nimport { Colors, Spacing } from '../styling'\n\nconst StyledLogoutWidget = styled.div`\n  color: ${Colors.greyLight};\n  ${mediaDesktop`\n    margin-left: ${Spacing.Middle};\n  `};\n  ${mediaMobile`\n    margin-left: ${Spacing.Small};\n  `};\n  &:hover {\n    color: ${Colors.white};\n  }\n  & a {\n    white-space: nowrap;\n  }\n  & span.name {\n    color: ${Colors.greyLight};\n    text-decoration: none;\n    font-weight: lighter;\n    position: relative;\n    display: inline-block;\n    max-width: 10rem;\n    text-align: right;\n    ${mediaDesktop`\n    top: 0.6rem;\n    `}\n    ${mediaMobile`\n       top: 0.3rem;\n    `}\n  }\n\n  & svg {\n    color: ${Colors.greyLight};\n    vertical-align: top;\n    margin: 0.4rem;\n    ${mediaMobile`\n       margin: 0.2rem;\n    `}\n  }\n\n  & div.time {\n    font-size: 1.3rem;\n  }\n`\n\nexport const LogoutWidget = observer(() => {\n  const { auth } = useRoot()\n  const { data, loading } = useQLogoutWidget(\n    { id: auth.userId },\n    { skip: !auth.isAuthenticated },\n  )\n\n  let displayName\n  if (loading) {\n    displayName = i18n.t`Not logged in`\n  } else {\n    displayName = `${data.user.firstName} ${data.user.lastName}`\n  }\n\n  const now = useTimer({ enabled: true, interval: SECOND })\n\n  return (\n    <StyledLogoutWidget data-testid=\"logout-widget\">\n      <Link to=\"/logout\">\n        <span className=\"name\">{displayName}</span>\n        <ExitToApp />\n      </Link>\n      <div className=\"time\">{DF.format(now, 'H:mm:ss')}</div>\n    </StyledLogoutWidget>\n  )\n})\n","import { ChevronLeft, Home } from '@material-ui/icons'\nimport { useRouterContext } from '@speedlo/hooks'\nimport Color from 'color'\nimport React, { MouseEvent } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { Colors, Radiuses, Spacing } from '../styling'\n\ninterface IHomeButtonProps {\n  iconColor?: Colors\n  color?: Colors\n  disabled?: boolean\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n  goBack?: boolean\n  backRoute?: string\n}\n\nconst applyAlpha = (alphaValue: number) => (props: IHomeButtonProps) =>\n  Color(props.color)\n    .alpha(alphaValue)\n    .string()\n\nconst HomeButtonStyled = styled.button`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 0 0 ${Radiuses.Button} 0 !important;\n  height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  margin: 0;\n  padding: 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  font-size: 1rem;\n  transition-duration: 0.2s;\n\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nexport const HomeButton: React.FC<IHomeButtonProps> = ({\n  color = Colors.greyMiddle,\n  iconColor = Colors.white,\n  goBack = false,\n  backRoute,\n  ...props\n}) => {\n  const { history } = useRouterContext()\n  if (goBack) {\n    return (\n      <HomeButtonStyled\n        color={color}\n        onClick={() => {\n          if (backRoute) {\n            history.push(backRoute)\n          } else {\n            history.goBack()\n          }\n        }}\n        {...props}\n      >\n        <Icon icon={ChevronLeft} color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    )\n  }\n  return (\n    <Link to=\"/\">\n      <HomeButtonStyled color={color} {...props}>\n        <Icon icon={Home} color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    </Link>\n  )\n}\n","import React from 'react'\nimport useWindowScroll from 'react-use/lib/useWindowScroll'\nimport styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile, mediaSmallMobile } from '../app/Responsive'\nimport { PageLayoutGrid } from '../atoms/PageLayoutGrid'\nimport { PageTitle } from '../atoms/PageTitle'\nimport { SoundControl } from '../atoms/SoundControl'\nimport { LogoutWidget } from '../organisms/LogoutWidget'\nimport { SecureRoute } from '../routes/SecureRoute'\nimport { Spacing } from '../styling'\nimport { HomeButton } from './HomeButton'\n\ninterface ICommonProps {\n  topContent?: React.ReactNode\n}\n\ninterface IStyledProps extends ICommonProps {\n  isScrolledDown: boolean\n}\n\nexport interface IPageLayoutProps extends ICommonProps {\n  pageTitle?: string\n  hideLogoutWidget?: boolean\n  showSoundControl?: boolean\n  showHomeButton?: boolean\n  useBackButton?: boolean\n  backRoute?: string\n  isForIconDashboard?: boolean\n  className?: string\n}\n\nconst StyledPageLayoutResponsive = styled.div<IStyledProps>`\n  .page-header {\n    position: sticky;\n    top: 0;\n    width: 100vw;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    z-index: 30;\n    height: ${Spacing.PageHeaderHeight + Spacing.DefaultSizeUnit};\n    background-color: ${({ isScrolledDown }) =>\n      isScrolledDown ? 'rgba(0, 0, 0, 0.7)' : 'initial'};\n  }\n\n  .home-button-container {\n    flex: 0 0 auto;\n    z-index: 100;\n  }\n\n  .menu-container {\n    flex: 1 1 0;\n    align-self: flex-start;\n    z-index: 80;\n    display: flex;\n    justify-content: flex-end;\n    flex-wrap: wrap;\n    overflow: hidden;\n    ${mediaDesktop`\n    height: 4rem;\n    `};\n    ${mediaMobile`\n    height: 3.7rem;\n    `};\n  }\n\n  .menu-item-title {\n    flex: 1 1 0;\n    ${mediaMobile`\n      display: ${({ topContent }: IPageLayoutProps) =>\n        topContent !== undefined ? 'none' : 'initial'};\n    `};\n  }\n\n  .menu-item {\n    ${mediaDesktop`\n      margin: ${Spacing.Middle} ${Spacing.Small};\n    `};\n    ${mediaMobile`\n     margin: 0 ${Spacing.Small};\n    `};\n  }\n\n  .menu-item-logout {\n    ${mediaSmallMobile`\n      display: ${({ topContent }: IPageLayoutProps) =>\n        topContent !== undefined ? 'none' : 'initial'};\n    `};\n  }\n`\n\nexport const PageLayoutResponsive: React.FC<IPageLayoutProps> = ({\n  pageTitle = '',\n  hideLogoutWidget = false,\n  showSoundControl = false,\n  showHomeButton = true,\n  useBackButton = false,\n  backRoute,\n  children,\n  topContent,\n  isForIconDashboard = false,\n  className,\n}) => {\n  const { y } = useWindowScroll()\n\n  return (\n    <StyledPageLayoutResponsive\n      topContent={topContent}\n      isScrolledDown={y > 10}\n      className={className}\n    >\n      {pageTitle && <PageTitle title={pageTitle} />}\n\n      <div className=\"page-header\">\n        <div className=\"home-button-container\">\n          {showHomeButton ? (\n            <HomeButton goBack={useBackButton} backRoute={backRoute} />\n          ) : null}\n        </div>\n\n        <div className=\"menu-container\">\n          <div className=\"menu-item-title\">\n            <PageTitle.Display />\n          </div>\n\n          <div className=\"menu-item\">{topContent}</div>\n\n          {showSoundControl && (\n            <div className=\"menu-item\">\n              <SoundControl />\n            </div>\n          )}\n\n          <div className=\"menu-item-logout\">\n            {!hideLogoutWidget && (\n              <SecureRoute path=\"/\" component={LogoutWidget} redirect={false} />\n            )}\n          </div>\n        </div>\n      </div>\n      <PageLayoutGrid isForIconDashboard={isForIconDashboard}>\n        {children}\n      </PageLayoutGrid>\n    </StyledPageLayoutResponsive>\n  )\n}\n","import styled from 'styled-components/macro'\n\nimport { Spacing } from '../styling'\n\nexport interface IProps {\n  margin?: string | number\n  bottom?: number\n  left?: number\n  right?: number\n  top?: number\n  className?: string\n}\n\nexport const MarginBox = styled('div')`\n  margin: ${({ margin, top = 0, bottom = 0, left = 0, right = 0 }: IProps) => {\n    if (typeof margin === 'string') {\n      return margin\n    }\n    if (typeof margin === 'number') {\n      return `${margin}${Spacing.DefaultSizeUnit}`\n    }\n    return `${top}${Spacing.DefaultSizeUnit} ${right}${Spacing.DefaultSizeUnit} ${bottom}${Spacing.DefaultSizeUnit} ${left}${Spacing.DefaultSizeUnit}`\n  }};\n`\n","import React from 'react'\n\ninterface ILoadingProps {\n  text?: string\n}\n\nexport const Loading: React.FC<ILoadingProps> = ({ text = '...' }) => (\n  <h1>{text}</h1>\n)\n","import { useAutorun, useInterval, useReaction } from '@speedlo/hooks'\nimport { useAsObservableSource } from 'mobx-react-lite'\nimport useAudio from 'react-use/lib/useAudio'\n\nimport { useRoot } from '../atoms/RootProvider'\n\ninterface IOptions {\n  soundUrl: string\n  shouldPlay: boolean\n  intervalSec: number\n}\n\nexport function useIntervalSound({\n  soundUrl,\n  shouldPlay,\n  intervalSec,\n}: IOptions) {\n  const [audio, state, controls] = useAudio({\n    src: soundUrl,\n    autoPlay: false,\n    loop: false,\n  })\n\n  const { user, config } = useRoot()\n  const source = useAsObservableSource({\n    shouldPlay,\n    isPlaying: state.isPlaying,\n  })\n\n  const canPlay = () => {\n    return config.soundEnabled && user.soundEnabled\n  }\n\n  const playIfYouCan = () => {\n    if (canPlay() && source.shouldPlay) {\n      controls.volume(0.5)\n      controls.play()\n    }\n  }\n\n  useInterval(playIfYouCan, intervalSec * 1000)\n\n  useReaction(() => source.shouldPlay, playIfYouCan)\n\n  useAutorun(() => {\n    if (!canPlay() || !source.shouldPlay) {\n      controls.pause()\n      controls.seek(0)\n    }\n  })\n\n  return audio\n}\n","import numeral from 'numeral'\n\nexport async function changeNumeralLocale(lang: string) {\n  if (lang === 'en') {\n    numeral.locale(lang)\n    return\n  }\n  await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"numeral-[index]\" */\n    `numeral/locales/${lang}`\n  )\n  numeral.locale(lang)\n}\n\nexport const numberRx = /^\\d[\\d.,\\s]*$/\n\nexport function validateNumber(input: string) {\n  return numberRx.test(input)\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport {\n  FMenuCategoryListItemFragmentDoc,\n  FPriceFragmentDoc,\n} from '../../../graph/generated'\nimport { GMenuRecipeFormAssoc } from '../../../graph/types'\n\nexport const MenuRecipePriceFragment = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n  ${FPriceFragmentDoc}\n`\n\nexport const MenuAssocRecipeFragment = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const MenuRecipeFormQuery = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...FMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...FMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n  ${MenuRecipePriceFragment}\n  ${FMenuCategoryListItemFragmentDoc}\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeFormAssocQuery = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeDefaults = gql`\n  query GMenuRecipeDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport const QueryMenuRecipeFormAssoc = buildQuery<\n  GMenuRecipeFormAssoc.Query,\n  GMenuRecipeFormAssoc.Variables\n>(MenuRecipeFormAssocQuery)\n","import { Observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { TRootModel } from '../models/RootModel'\nimport { useRoot } from './RootProvider'\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.FC<IProps> = ({ render, observe = true }) => {\n  const root = useRoot()\n  return observe === true ? (\n    <Observer>{() => <>{render(root)}</>}</Observer>\n  ) : (\n    render(root)\n  )\n}\n","import gql from 'graphql-tag'\n\nimport { SpecificBusinessHourFragment } from '../organisms/SpecificBusinessHours.graphql'\n\nexport const CreateSpecificBusinessHour = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`\n\nexport const DeleteSpecificBusinessHour = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n","import { isoDate } from '@speedlo/graphql'\nimport { types } from 'mobx-state-tree'\n\nimport {\n  GCreateSpecificBusinessHour,\n  GDeleteSpecificBusinessHour,\n} from '../../../graph/types'\nimport { formatTime } from '../../../helpers/formats'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  CreateSpecificBusinessHour,\n  DeleteSpecificBusinessHour,\n} from './BusinessHoursModel.graphql'\n\nexport enum ESpecificHourMode {\n  TIMESPAN = 'TIMESPAN',\n  FULLDAY = 'FULLDAY',\n}\n\nexport interface ISpecificFormData {\n  date: Date\n  openAt: Date\n  closeAt: Date\n  note: string\n}\n\nconst byIdPredicate = RM.complement(RM.propEq('id'))\n\nexport const BusinessHoursModel = BaseModel.named('BusinessHours')\n  .props({\n    specificMode: types.optional(\n      types.enumeration(['TIMESPAN', 'FULLDAY']),\n      ESpecificHourMode.TIMESPAN,\n    ),\n  })\n  .actions(self => ({\n    changeSpecificMode(mode: ESpecificHourMode) {\n      self.specificMode = mode\n    },\n    submitSpecificHour(values: ISpecificFormData) {\n      const variables: GCreateSpecificBusinessHour.Variables = {\n        input: {\n          companyBranch: self.root.settings.branchId,\n          specificDate: isoDate(values.date),\n          closed: self.specificMode === ESpecificHourMode.FULLDAY,\n          openAt: values.openAt && formatTime(values.openAt),\n          closeAt: values.closeAt && formatTime(values.closeAt),\n          closedNote: values.note,\n        },\n      }\n      self.client.mutate<GCreateSpecificBusinessHour.Mutation>({\n        mutation: CreateSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.concat(\n                  mutationResult.data.result,\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n    deleteSpecificHour(businessHourId: ID) {\n      const variables: GDeleteSpecificBusinessHour.Variables = {\n        id: businessHourId,\n      }\n      self.client.mutate({\n        mutation: DeleteSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.filter(\n                  byIdPredicate(mutationResult.data.result.id),\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n  }))\n","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<string>\n\n  readonly includeOldFinished?: boolean\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputStatisticCreate {\n  readonly dateFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly dateTimeFrom?: Maybe<string>\n\n  readonly dateTimeTo?: Maybe<string>\n\n  readonly branches: ReadonlyArray<string>\n\n  readonly drivers?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly internalNumber?: Maybe<string>\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: string\n\n  readonly closed?: boolean\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly minCount?: number\n\n  readonly maxCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly translations?: Maybe<ReadonlyArray<InputWareCategoryTranslation>>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly minCount?: Maybe<number>\n\n  readonly maxCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareCategoryTranslation {\n  readonly language: LanguageEnum\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly translations?: Maybe<ReadonlyArray<InputRecipeTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputRecipeTranslation {\n  readonly language: LanguageEnum\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityCreate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityUpdate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n\n  readonly sector?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderWifiCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly sector?: Maybe<string>\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment method used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<string>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderStaffImport {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly companyBranch: string\n\n  readonly acceptedAt?: Maybe<string>\n\n  readonly acceptedAtRaw?: Maybe<string>\n\n  readonly orderRecipes: ReadonlyArray<InputOrderRecipeCreates>\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly invoice: string\n\n  readonly invoiceNumber: number\n\n  readonly paymentMethods: ReadonlyArray<InputOrderPaymentMethodsCreate>\n\n  readonly canceled?: Maybe<boolean>\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputOrderPaymentMethodUpdate {\n  readonly paymentMethodId: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: number\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputStockTransferCreate {\n  readonly stockItemId: string\n\n  readonly quantity: number\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n  Pln = 'PLN',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  Driver = 'DRIVER',\n  FeAdmin = 'FE_ADMIN',\n  FeCompletion = 'FE_COMPLETION',\n  FeKitchen = 'FE_KITCHEN',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n  Pl = 'PL',\n  De = 'DE',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n  Specific = 'SPECIFIC',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n  HighPriority = 'HIGH_PRIORITY',\n  WifiDelayed = 'WIFI_DELAYED',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n  Pwa = 'PWA',\n  WebMenu = 'WEB_MENU',\n}\n/** Possible sector types */\nexport enum SectorTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible order origin categories */\nexport enum OrderOriginCategoryEnum {\n  Website = 'WEBSITE',\n  Wifi = 'WIFI',\n  Staff = 'STAFF',\n  Doveze = 'DOVEZE',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type GCreateSpecificBusinessHourVariables = {\n  readonly input: InputBusinessHourSpecificDateCreate\n}\n\nexport type GCreateSpecificBusinessHourMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GCreateSpecificBusinessHourResult\n}\n\nexport type GCreateSpecificBusinessHourResult = GSpecificBusinessHourFragment\n\nexport type GDeleteSpecificBusinessHourVariables = {\n  readonly id: string\n}\n\nexport type GDeleteSpecificBusinessHourMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GDeleteSpecificBusinessHourResult\n}\n\nexport type GDeleteSpecificBusinessHourResult = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n}\n\nexport type GSpecificBusinessHoursVariables = {\n  readonly branchId: string\n}\n\nexport type GSpecificBusinessHoursQuery = {\n  readonly __typename?: 'Query'\n\n  readonly businessHours: ReadonlyArray<GSpecificBusinessHoursBusinessHours>\n}\n\nexport type GSpecificBusinessHoursBusinessHours = GSpecificBusinessHourFragment\n\nexport type GOrderVamVariables = {\n  readonly branchId: string\n  readonly phone: string\n}\n\nexport type GOrderVamQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vamCustomer: GOrderVamVamCustomer\n}\n\nexport type GOrderVamVamCustomer = {\n  readonly __typename?: 'CustomerInformation'\n\n  readonly isFound: boolean\n\n  readonly email: string\n\n  readonly firstName: string\n\n  readonly lastName: string\n\n  readonly lastOrder: Maybe<GOrderVamLastOrder>\n\n  readonly locations: ReadonlyArray<GOrderVamLocations>\n}\n\nexport type GOrderVamLastOrder = {\n  readonly __typename?: 'Order'\n\n  readonly note: Maybe<string>\n}\n\nexport type GOrderVamLocations = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly state: Maybe<string>\n\n  readonly gps: Maybe<GOrderVamGps>\n}\n\nexport type GOrderVamGps = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type GOrderPromoVariables = {\n  readonly branchId: string\n}\n\nexport type GOrderPromoQuery = {\n  readonly __typename?: 'Query'\n\n  readonly promoCodes: ReadonlyArray<GOrderPromoPromoCodes>\n}\n\nexport type GOrderPromoPromoCodes = {\n  readonly __typename?: 'PromoCode'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type GSortMenuCategoryVariables = {\n  readonly categoryId: string\n  readonly offset: number\n}\n\nexport type GSortMenuCategoryMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly success: boolean\n}\n\nexport type GMenuCategoryCreateVariables = {\n  readonly input: InputWareCategoryCreate\n}\n\nexport type GMenuCategoryCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createWareCategory: GMenuCategoryCreateCreateWareCategory\n}\n\nexport type GMenuCategoryCreateCreateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type GMenuCategoryUpdateVariables = {\n  readonly categoryId: string\n  readonly input: InputWareCategoryUpdate\n}\n\nexport type GMenuCategoryUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: GMenuCategoryUpdateUpdateWareCategory\n}\n\nexport type GMenuCategoryUpdateUpdateWareCategory = FMenuCategoryFragment\n\nexport type GMenuCategoryDeleteVariables = {\n  readonly categoryId: string\n}\n\nexport type GMenuCategoryDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyWareCategory: GMenuCategoryDeleteDestroyWareCategory\n}\n\nexport type GMenuCategoryDeleteDestroyWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type GMenuRecipeVisibilityVariables = {\n  readonly recipeId: string\n  readonly visible: boolean\n}\n\nexport type GMenuRecipeVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateRecipe: GMenuRecipeVisibilityUpdateRecipe\n}\n\nexport type GMenuRecipeVisibilityUpdateRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type GMenuRecipeCreateVariables = {\n  readonly recipe: InputRecipeCreate\n}\n\nexport type GMenuRecipeCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createRecipe: GMenuRecipeCreateCreateRecipe\n}\n\nexport type GMenuRecipeCreateCreateRecipe = GMenuRecipeFragment\n\nexport type GMenuRecipeUpdateVariables = {\n  readonly recipeId: string\n  readonly recipe: InputRecipeUpdate\n}\n\nexport type GMenuRecipeUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateRecipe: GMenuRecipeUpdateUpdateRecipe\n}\n\nexport type GMenuRecipeUpdateUpdateRecipe = GMenuRecipeFragment\n\nexport type GMenuRecipeDeleteVariables = {\n  readonly recipeId: string\n}\n\nexport type GMenuRecipeDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyRecipe: GMenuRecipeDeleteDestroyRecipe\n}\n\nexport type GMenuRecipeDeleteDestroyRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type GMenuStockCreateVariables = {\n  readonly stockItem: InputStockItemCreate\n}\n\nexport type GMenuStockCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createStockItem: GMenuStockCreateCreateStockItem\n}\n\nexport type GMenuStockCreateCreateStockItem = GMenuStockItemFragment\n\nexport type GMenuStockUpdateVariables = {\n  readonly stockId: string\n  readonly stockItem: InputStockItemUpdate\n}\n\nexport type GMenuStockUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateStockItem: GMenuStockUpdateUpdateStockItem\n}\n\nexport type GMenuStockUpdateUpdateStockItem = GMenuStockItemFragment\n\nexport type GMenuStockDeleteVariables = {\n  readonly stockId: string\n}\n\nexport type GMenuStockDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyStockItem: GMenuStockDeleteDestroyStockItem\n}\n\nexport type GMenuStockDeleteDestroyStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n}\n\nexport type GAllergensVariables = {}\n\nexport type GAllergensQuery = {\n  readonly __typename?: 'Query'\n\n  readonly allergens: ReadonlyArray<GAllergensAllergens>\n}\n\nexport type GAllergensAllergens = FMenuAllergenFragment\n\nexport type GCurrenciesVariables = {\n  readonly branchId: string\n}\n\nexport type GCurrenciesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly currencies: ReadonlyArray<GCurrenciesCurrencies>\n\n  readonly companyBranch: GCurrenciesCompanyBranch\n}\n\nexport type GCurrenciesCurrencies = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n\n  readonly code: string\n}\n\nexport type GCurrenciesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly address: GCurrenciesAddress\n}\n\nexport type GCurrenciesAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<GCurrenciesCountry>\n}\n\nexport type GCurrenciesCountry = {\n  readonly __typename?: 'Country'\n\n  readonly currency: GCurrenciesCurrency\n}\n\nexport type GCurrenciesCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n}\n\nexport type GVatsVariables = {\n  readonly branchId: string\n}\n\nexport type GVatsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vats: ReadonlyArray<GVatsVats>\n}\n\nexport type GVatsVats = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n\n  readonly vat: number\n}\n\nexport type GWareUnitsVariables = {}\n\nexport type GWareUnitsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareUnits: ReadonlyArray<GWareUnitsWareUnits>\n}\n\nexport type GWareUnitsWareUnits = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: WareUnitEnum\n}\n\nexport type GMenuRecipeFormVariables = {\n  readonly recipeId: string\n}\n\nexport type GMenuRecipeFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: GMenuRecipeFormRecipe\n}\n\nexport type GMenuRecipeFormRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly image: Maybe<string>\n\n  readonly nameLabel: Maybe<string>\n\n  readonly internalNote: Maybe<string>\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly visible: boolean\n\n  readonly recipeType: GMenuRecipeFormRecipeType\n\n  readonly sourcePrices: ReadonlyArray<GMenuRecipeFormSourcePrices>\n\n  readonly sideDishes: ReadonlyArray<GMenuRecipeFormSideDishes>\n\n  readonly categories: ReadonlyArray<GMenuRecipeFormCategories>\n\n  readonly sourceAssociatedRecipes: ReadonlyArray<\n    GMenuRecipeFormSourceAssociatedRecipes\n  >\n\n  readonly sourceIngredients: ReadonlyArray<GMenuRecipeFormSourceIngredients>\n}\n\nexport type GMenuRecipeFormRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuRecipeFormSourcePrices = GMenuRecipePriceFragment\n\nexport type GMenuRecipeFormSideDishes = FMenuCategoryListItemFragment\n\nexport type GMenuRecipeFormCategories = FMenuCategoryListItemFragment\n\nexport type GMenuRecipeFormSourceAssociatedRecipes = {\n  readonly __typename?: 'RecipeRelation'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipeFormPriceType\n\n  readonly recipe: GMenuRecipeForm_Recipe\n}\n\nexport type GMenuRecipeFormPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipeForm_Recipe = GMenuAssocRecipeFragment\n\nexport type GMenuRecipeFormSourceIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly quantity: number\n\n  readonly stockItem: GMenuRecipeFormStockItem\n}\n\nexport type GMenuRecipeFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly label: string\n\n  readonly wareUnit: GMenuRecipeFormWareUnit\n\n  readonly allergens: ReadonlyArray<GMenuRecipeFormAllergens>\n}\n\nexport type GMenuRecipeFormWareUnit = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type GMenuRecipeFormAllergens = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly enum: AllergenEnum\n}\n\nexport type GMenuRecipeFormAssocVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuRecipeFormAssocQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<GMenuRecipeFormAssocRecipes>\n}\n\nexport type GMenuRecipeFormAssocRecipes = GMenuAssocRecipeFragment\n\nexport type GMenuRecipeDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuRecipeDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GMenuRecipeDefaultsCompanyBranch\n}\n\nexport type GMenuRecipeDefaultsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly vats: ReadonlyArray<GMenuRecipeDefaultsVats>\n\n  readonly currency: GMenuRecipeDefaultsCurrency\n}\n\nexport type GMenuRecipeDefaultsVats = {\n  readonly __typename?: 'VatPriceType'\n\n  readonly vatId: string\n\n  readonly priceType: GMenuRecipeDefaultsPriceType\n}\n\nexport type GMenuRecipeDefaultsPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipeDefaultsCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GMenuStockFormVariables = {\n  readonly stockId: string\n}\n\nexport type GMenuStockFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: GMenuStockFormStockItem\n}\n\nexport type GMenuStockFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly note: string\n\n  readonly nameLabel: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly wareUnit: GMenuStockFormWareUnit\n\n  readonly allergens: ReadonlyArray<GMenuStockFormAllergens>\n\n  readonly companyBranch: GMenuStockFormCompanyBranch\n}\n\nexport type GMenuStockFormWareUnit = FMenuWareUnitFragment\n\nexport type GMenuStockFormAllergens = FMenuAllergenFragment\n\nexport type GMenuStockFormCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuStockDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GMenuStockDefaultsCompanyBranch\n}\n\nexport type GMenuStockDefaultsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type GCreateZoneVariables = {\n  readonly branchId: string\n  readonly points?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n}\n\nexport type GCreateZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createZone: GCreateZoneCreateZone\n}\n\nexport type GCreateZoneCreateZone = FZoneFragment\n\nexport type GUpdateZonePriorityVariables = {\n  readonly zoneId: string\n  readonly offset: number\n}\n\nexport type GUpdateZonePriorityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZonePriority: ReadonlyArray<\n    GUpdateZonePriorityUpdateZonePriority\n  >\n}\n\nexport type GUpdateZonePriorityUpdateZonePriority = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly priority: number\n}\n\nexport type GDestroyZoneVariables = {\n  readonly zoneId: string\n}\n\nexport type GDestroyZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyZone: GDestroyZoneDestroyZone\n}\n\nexport type GDestroyZoneDestroyZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n}\n\nexport type GZonesVariables = {\n  readonly branchesId: ReadonlyArray<string>\n}\n\nexport type GZonesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zones: ReadonlyArray<GZonesZones>\n}\n\nexport type GZonesZones = FZoneFragment\n\nexport type GZoneLocationVariables = {\n  readonly zoneId: string\n}\n\nexport type GZoneLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zone: GZoneLocationZone\n}\n\nexport type GZoneLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly companyBranch: GZoneLocationCompanyBranch\n}\n\nexport type GZoneLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GZoneLocationGps\n}\n\nexport type GZoneLocationGps = FGeoPointFragment\n\nexport type GZoneBranchLocationVariables = {\n  readonly branchId: string\n}\n\nexport type GZoneBranchLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GZoneBranchLocationCompanyBranch\n}\n\nexport type GZoneBranchLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GZoneBranchLocationGps\n}\n\nexport type GZoneBranchLocationGps = FGeoPointFragment\n\nexport type GZoneColorsVariables = {}\n\nexport type GZoneColorsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zoneColors: ReadonlyArray<GZoneColorsZoneColors>\n}\n\nexport type GZoneColorsZoneColors = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type QAddressSuggestVariables = {\n  readonly search: string\n}\n\nexport type QAddressSuggestQuery = {\n  readonly __typename?: 'Query'\n\n  readonly suggest: ReadonlyArray<QAddressSuggestSuggest>\n}\n\nexport type QAddressSuggestSuggest = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly gps: Maybe<QAddressSuggestGps>\n} & FAddressFragment\n\nexport type QAddressSuggestGps = FGeoPointFragment\n\nexport type MOrderStateVariables = {\n  readonly orderId: string\n  readonly state: OrderStateEnum\n}\n\nexport type MOrderStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MOrderStateAddOrderState\n}\n\nexport type MOrderStateAddOrderState = FOrderStateCategoryFragment &\n  FOrderTimingFragment\n\nexport type MSetPriorityOrderVariables = {\n  readonly orderId: string\n  readonly isPriority: boolean\n}\n\nexport type MSetPriorityOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly setPriorityOrder: MSetPriorityOrderSetPriorityOrder\n}\n\nexport type MSetPriorityOrderSetPriorityOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly isPriority: boolean\n}\n\nexport type QLogoutWidgetVariables = {\n  readonly id: string\n}\n\nexport type QLogoutWidgetQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: QLogoutWidgetUser\n}\n\nexport type QLogoutWidgetUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type MBusinessHoursSubmitVariables = {\n  readonly branchId: string\n  readonly hours: ReadonlyArray<InputBusinessHourCreate>\n}\n\nexport type MBusinessHoursSubmitMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createBusinessHours: ReadonlyArray<\n    MBusinessHoursSubmitCreateBusinessHours\n  >\n}\n\nexport type MBusinessHoursSubmitCreateBusinessHours = FRegularBusinessHourFragment\n\nexport type QRegularBusinessHoursVariables = {\n  readonly branchId: string\n}\n\nexport type QRegularBusinessHoursQuery = {\n  readonly __typename?: 'Query'\n\n  readonly businessHours: ReadonlyArray<QRegularBusinessHoursBusinessHours>\n\n  readonly weekDays: ReadonlyArray<QRegularBusinessHoursWeekDays>\n}\n\nexport type QRegularBusinessHoursBusinessHours = FRegularBusinessHourFragment\n\nexport type QRegularBusinessHoursWeekDays = FWeekdayFragment\n\nexport type MAddOrderPromoVariables = {\n  readonly orderId: string\n  readonly code: string\n}\n\nexport type MAddOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderPromoCode: MAddOrderPromoAddOrderPromoCode\n}\n\nexport type MAddOrderPromoAddOrderPromoCode = {\n  readonly __typename?: 'OrderWithErrors'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MAddOrderPromoOrder\n}\n\nexport type MAddOrderPromoOrder = FCreateOrderFragment\n\nexport type MCancelOrderVariables = {\n  readonly orderId: string\n}\n\nexport type MCancelOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MCancelOrderAddOrderState\n}\n\nexport type MCancelOrderAddOrderState = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FOrderStateCategoryFragment\n\nexport type MCreateOrderAcceptVariables = {\n  readonly orderId: string\n  readonly customer: InputCustomerCreate\n  readonly deliverAt?: Maybe<string>\n  readonly note?: Maybe<string>\n}\n\nexport type MCreateOrderAcceptMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: MCreateOrderAcceptFinishOrder\n}\n\nexport type MCreateOrderAcceptFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MCreateOrderAcceptOrder\n}\n\nexport type MCreateOrderAcceptOrder = FCreateOrderFragment\n\nexport type MCreateOrderAddRecipeVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderAddRecipeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrderRecipe: MCreateOrderAddRecipeCreateOrderRecipe\n}\n\nexport type MCreateOrderAddRecipeCreateOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderNewVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly callEventId?: Maybe<string>\n}\n\nexport type MCreateOrderNewMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrder: MCreateOrderNewCreateOrder\n}\n\nexport type MCreateOrderNewCreateOrder = FCreateOrderFragment\n\nexport type MCreateOrderRemoveItemVariables = {\n  readonly itemId: string\n}\n\nexport type MCreateOrderRemoveItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyOrderRecipe: MCreateOrderRemoveItemDestroyOrderRecipe\n}\n\nexport type MCreateOrderRemoveItemDestroyOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderUpdateVariables = {\n  readonly orderId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport type MCreateOrderUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MCreateOrderUpdateUpdateOrder\n}\n\nexport type MCreateOrderUpdateUpdateOrder = FCreateOrderFragment\n\nexport type MCreateOrderUpdateItemVariables = {\n  readonly itemId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderUpdateItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipe: MCreateOrderUpdateItemUpdateOrderRecipe\n}\n\nexport type MCreateOrderUpdateItemUpdateOrderRecipe = FCreateOrderFragment\n\nexport type MRemoveOrderPromoVariables = {\n  readonly orderId: string\n  readonly codeId: string\n}\n\nexport type MRemoveOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly removeOrderPromoCode: MRemoveOrderPromoRemoveOrderPromoCode\n}\n\nexport type MRemoveOrderPromoRemoveOrderPromoCode = FCreateOrderFragment\n\nexport type QCreateOrderItemVariables = {\n  readonly itemId: string\n}\n\nexport type QCreateOrderItemQuery = {\n  readonly __typename?: 'Query'\n\n  readonly item: QCreateOrderItemItem\n}\n\nexport type QCreateOrderItemItem = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItemRecipe\n\n  readonly selectedSidedishes: ReadonlyArray<QCreateOrderItemSelectedSidedishes>\n}\n\nexport type QCreateOrderItemRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QCreateOrderItemSelectedSidedishes = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItem_Recipe\n}\n\nexport type QCreateOrderItem_Recipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type QCreateOrderRecipeVariables = {\n  readonly recipeId: string\n}\n\nexport type QCreateOrderRecipeQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QCreateOrderRecipeRecipe\n}\n\nexport type QCreateOrderRecipeRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QOrderCartVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderCartQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderCartOrder\n}\n\nexport type QOrderCartOrder = FCreateOrderFragment\n\nexport type QOrderFormDeliverAtDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderFormDeliverAtDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly times: QOrderFormDeliverAtDefaultsTimes\n}\n\nexport type QOrderFormDeliverAtDefaultsTimes = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly deliveryTime: number\n\n  readonly pickupTime: number\n}\n\nexport type QOrderMenuVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderMenuQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orderMenu: ReadonlyArray<QOrderMenuOrderMenu>\n}\n\nexport type QOrderMenuOrderMenu = FOrderMenuCategoryFragment\n\nexport type QValidateLocationVariables = {\n  readonly branchId: string\n  readonly latitude: number\n  readonly longitude: number\n}\n\nexport type QValidateLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly resolveLocation: QValidateLocationResolveLocation\n}\n\nexport type QValidateLocationResolveLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly inDeliveryLocation: boolean\n\n  readonly zone: Maybe<QValidateLocationZone>\n}\n\nexport type QValidateLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly minimalOrderPrice: QValidateLocationMinimalOrderPrice\n}\n\nexport type QValidateLocationMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type MKitchenRecipeStateVariables = {\n  readonly recipeId: string\n  readonly state: OrderRecipeStateEnum\n}\n\nexport type MKitchenRecipeStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipeState: MKitchenRecipeStateUpdateOrderRecipeState\n}\n\nexport type MKitchenRecipeStateUpdateOrderRecipeState = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly orderRecipeState: MKitchenRecipeStateOrderRecipeState\n\n  readonly order: MKitchenRecipeStateOrder\n}\n\nexport type MKitchenRecipeStateOrderRecipeState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type MKitchenRecipeStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type QKitchenCompletionOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QKitchenCompletionOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QKitchenCompletionOrderListOrders>\n}\n\nexport type QKitchenCompletionOrderListOrders = FKitchenCompletionOrderFragment\n\nexport type QKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QKitchenOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QKitchenOrderListOrders>\n}\n\nexport type QKitchenOrderListOrders = FKitchenOrderFragment\n\nexport type SKitchenCompletionOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SKitchenCompletionOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SKitchenCompletionOrderListUpdatedOrder\n}\n\nexport type SKitchenCompletionOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SKitchenCompletionOrderListOrder>\n}\n\nexport type SKitchenCompletionOrderListOrder = FKitchenCompletionOrderFragment\n\nexport type SKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SKitchenOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SKitchenOrderListUpdatedOrder\n}\n\nexport type SKitchenOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SKitchenOrderListOrder>\n}\n\nexport type SKitchenOrderListOrder = FKitchenOrderFragment\n\nexport type MPasswordChangeVariables = {\n  readonly password: string\n}\n\nexport type MPasswordChangeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly change: MPasswordChangeChange\n}\n\nexport type MPasswordChangeChange = {\n  readonly __typename?: 'UserUpdatedPassword'\n\n  readonly userId: string\n\n  readonly newToken: string\n}\n\nexport type QUserBootstrapVariables = {\n  readonly userId: string\n}\n\nexport type QUserBootstrapQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: QUserBootstrapUser\n\n  readonly permissions: QUserBootstrapPermissions\n\n  readonly access: QUserBootstrapAccess\n}\n\nexport type QUserBootstrapUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly language: QUserBootstrapLanguage\n\n  readonly roles: ReadonlyArray<QUserBootstrapRoles>\n\n  readonly branches: ReadonlyArray<QUserBootstrapBranches>\n}\n\nexport type QUserBootstrapLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly rawCode: string\n}\n\nexport type QUserBootstrapRoles = {\n  readonly __typename?: 'Role'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type QUserBootstrapBranches = FCompanyBranchFragment\n\nexport type QUserBootstrapPermissions = {\n  readonly __typename?: 'UserPermission'\n\n  readonly canCancelOrders: boolean\n\n  readonly canCreateOrder: boolean\n}\n\nexport type QUserBootstrapAccess = {\n  readonly __typename?: '__Schema'\n\n  readonly queries: QUserBootstrapQueries\n\n  readonly mutations: Maybe<QUserBootstrapMutations>\n\n  readonly subscriptions: Maybe<QUserBootstrapSubscriptions>\n}\n\nexport type QUserBootstrapQueries = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrapFields>>\n}\n\nexport type QUserBootstrapFields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QUserBootstrapMutations = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrap_Fields>>\n}\n\nexport type QUserBootstrap_Fields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QUserBootstrapSubscriptions = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrap__Fields>>\n}\n\nexport type QUserBootstrap__Fields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type SOrderCallVariables = {}\n\nexport type SOrderCallSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly call: SOrderCallCall\n}\n\nexport type SOrderCallCall = {\n  readonly __typename?: 'UserCallingCustomerSubscription'\n\n  readonly eventId: string\n\n  readonly phone: string\n\n  readonly prefix: string\n\n  readonly isRinging: boolean\n}\n\nexport type MCreateTransfersVariables = {\n  readonly targetBranch: string\n  readonly transfers: ReadonlyArray<InputStockTransferCreate>\n}\n\nexport type MCreateTransfersMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createStockItemTransfers: ReadonlyArray<\n    MCreateTransfersCreateStockItemTransfers\n  >\n}\n\nexport type MCreateTransfersCreateStockItemTransfers = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly quantity: number\n}\n\nexport type MMenuCategoryVisibilityVariables = {\n  readonly categoryId: string\n  readonly visible: boolean\n}\n\nexport type MMenuCategoryVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: MMenuCategoryVisibilityUpdateWareCategory\n}\n\nexport type MMenuCategoryVisibilityUpdateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type MMenuStockQuantityVariables = {\n  readonly stockItem: string\n  readonly quantityChange: number\n}\n\nexport type MMenuStockQuantityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly changeAmountStockItem: MMenuStockQuantityChangeAmountStockItem\n}\n\nexport type MMenuStockQuantityChangeAmountStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly quantity: number\n}\n\nexport type QMenuCategoryVariables = {\n  readonly categoryId: string\n}\n\nexport type QMenuCategoryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly category: QMenuCategoryCategory\n}\n\nexport type QMenuCategoryCategory = FMenuCategoryFragment\n\nexport type QMenuCategoryFilterVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuCategoryFilterQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryFilterCategories>\n}\n\nexport type QMenuCategoryFilterCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: Maybe<string>\n\n  readonly countRecipes: number\n\n  readonly categoryType: QMenuCategoryFilterCategoryType\n}\n\nexport type QMenuCategoryFilterCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type QMenuCategoryListVariables = {\n  readonly branchId: string\n  readonly categoryType: WareCategoryTypeEnum\n}\n\nexport type QMenuCategoryListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryListCategories>\n}\n\nexport type QMenuCategoryListCategories = FMenuCategoryListItemFragment\n\nexport type QMenuCategoryOriginsVariables = {}\n\nexport type QMenuCategoryOriginsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly origins: ReadonlyArray<QMenuCategoryOriginsOrigins>\n}\n\nexport type QMenuCategoryOriginsOrigins = {\n  readonly __typename?: 'OrderOriginCategory'\n\n  readonly enum: OrderOriginCategoryEnum\n\n  readonly code: string\n}\n\nexport type QMenuGuideDownloadVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuGuideDownloadQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QMenuGuideDownloadCompanyBranch\n}\n\nexport type QMenuGuideDownloadCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly foodMenuUrl: Maybe<string>\n}\n\nexport type QMenuRecipeListVariables = {\n  readonly branchId: string\n  readonly categoryId?: Maybe<string>\n  readonly categoryType?: Maybe<WareCategoryTypeEnum>\n}\n\nexport type QMenuRecipeListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<QMenuRecipeListRecipes>\n}\n\nexport type QMenuRecipeListRecipes = FMenuRecipeFragment\n\nexport type QMenuStockDepositVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockDepositQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QMenuStockDepositStockItems>\n}\n\nexport type QMenuStockDepositStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly note: string\n\n  readonly quantity: number\n\n  readonly wareUnit: QMenuStockDepositWareUnit\n}\n\nexport type QMenuStockDepositWareUnit = FMenuWareUnitFragment\n\nexport type QMenuStockListVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QMenuStockListStockItems>\n}\n\nexport type QMenuStockListStockItems = GMenuStockItemFragment\n\nexport type QStockRecipesVariables = {\n  readonly stockId: string\n}\n\nexport type QStockRecipesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: QStockRecipesStockItem\n}\n\nexport type QStockRecipesStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly ingredients: ReadonlyArray<QStockRecipesIngredients>\n}\n\nexport type QStockRecipesIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly recipe: QStockRecipesRecipe\n}\n\nexport type QStockRecipesRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: Maybe<string>\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly recipeType: QStockRecipesRecipeType\n}\n\nexport type QStockRecipesRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type MBranchDefaultTimeVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly time: number\n}\n\nexport type MBranchDefaultTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateDefaultOrderProcessTime: MBranchDefaultTimeUpdateDefaultOrderProcessTime\n}\n\nexport type MBranchDefaultTimeUpdateDefaultOrderProcessTime = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type MChangePaymentMethodVariables = {\n  readonly orderId: string\n  readonly paymentMethodId: string\n}\n\nexport type MChangePaymentMethodMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderPaymentMethod: MChangePaymentMethodUpdateOrderPaymentMethod\n}\n\nexport type MChangePaymentMethodUpdateOrderPaymentMethod = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FPaymentMethodsFragment\n\nexport type MOrderChangeToPickupVariables = {\n  readonly orderId: string\n}\n\nexport type MOrderChangeToPickupMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderDeliveryToPickup: MOrderChangeToPickupUpdateOrderDeliveryToPickup\n}\n\nexport type MOrderChangeToPickupUpdateOrderDeliveryToPickup = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliveryType: Maybe<MOrderChangeToPickupDeliveryType>\n}\n\nexport type MOrderChangeToPickupDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type MOrderTimeNotificationVariables = {\n  readonly orderId: string\n  readonly minutes: number\n}\n\nexport type MOrderTimeNotificationMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly orderNotifyCustomer: MOrderTimeNotificationOrderNotifyCustomer\n}\n\nexport type MOrderTimeNotificationOrderNotifyCustomer = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n}\n\nexport type MRemoveOrderDriverVariables = {\n  readonly orderDriverId: string\n}\n\nexport type MRemoveOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyUserDeliveringOrder: MRemoveOrderDriverDestroyUserDeliveringOrder\n}\n\nexport type MRemoveOrderDriverDestroyUserDeliveringOrder = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: MRemoveOrderDriverOrder\n}\n\nexport type MRemoveOrderDriverOrder = FOrderDriverFragment\n\nexport type MSelectOrderDriverVariables = {\n  readonly driverId: string\n  readonly orderId: string\n}\n\nexport type MSelectOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MSelectOrderDriverResult\n}\n\nexport type MSelectOrderDriverResult = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: MSelectOrderDriverOrder\n}\n\nexport type MSelectOrderDriverOrder = FOrderDriverFragment\n\nexport type QBranchDefeaultTimesVariables = {\n  readonly branchId: string\n}\n\nexport type QBranchDefeaultTimesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QBranchDefeaultTimesCompanyBranch\n}\n\nexport type QBranchDefeaultTimesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type QOrderDetailVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderDetailQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderDetailOrder\n}\n\nexport type QOrderDetailOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly companyBranch: QOrderDetailCompanyBranch\n\n  readonly customer: QOrderDetailCustomer\n\n  readonly customerOrdersCountCurrent: number\n\n  readonly customerOrdersCountTotal: number\n\n  readonly note: Maybe<string>\n\n  readonly previousNote: Maybe<string>\n\n  readonly allAppliedRules: ReadonlyArray<string>\n\n  readonly items: ReadonlyArray<QOrderDetailItems>\n\n  readonly orderOrigin: QOrderDetailOrderOrigin\n} & (FOrderTotalsFragment & FOrderTimingFragment & FOrderDriverFragment)\n\nexport type QOrderDetailCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type QOrderDetailCustomer = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly emails: ReadonlyArray<QOrderDetailEmails>\n\n  readonly phones: ReadonlyArray<QOrderDetailPhones>\n}\n\nexport type QOrderDetailEmails = FEmailFragment\n\nexport type QOrderDetailPhones = FPhoneFragment\n\nexport type QOrderDetailItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<QOrderDetailSidedishes>\n} & FOrderDetailWareFragment\n\nexport type QOrderDetailSidedishes = FOrderDetailWareFragment\n\nexport type QOrderDetailOrderOrigin = {\n  readonly __typename?: 'OrderOrigin'\n\n  readonly code: string\n\n  readonly enum: OrderOriginEnum\n}\n\nexport type QOrderDriversVariables = {\n  readonly orderId: string\n  readonly branchId: ReadonlyArray<string>\n}\n\nexport type QOrderDriversQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderDriversOrder\n\n  readonly drivers: ReadonlyArray<QOrderDriversDrivers>\n}\n\nexport type QOrderDriversOrder = FOrderDriverFragment\n\nexport type QOrderDriversDrivers = FDriverFragment\n\nexport type QOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QOrderListOrders>\n}\n\nexport type QOrderListOrders = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (FOrderStateCategoryFragment & FOrderTickerFragment)\n\nexport type QOrderListCategoriesVariables = {}\n\nexport type QOrderListCategoriesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QOrderListCategoriesCategories>\n}\n\nexport type QOrderListCategoriesCategories = {\n  readonly __typename?: 'OrderStateCategory'\n\n  readonly label: string\n\n  readonly enum: OrderStateCategoryEnum\n}\n\nexport type QOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QOrderMapDeliveriesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly deliveries: ReadonlyArray<QOrderMapDeliveriesDeliveries>\n}\n\nexport type QOrderMapDeliveriesDeliveries = FOrderMapDeliveryFragment\n\nexport type QOrderMapOrdersVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QOrderMapOrdersQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QOrderMapOrdersOrders>\n}\n\nexport type QOrderMapOrdersOrders = FOrderMapOrderFragment\n\nexport type QOrdersCategoryCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n  readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type QOrdersCategoryCountQuery = {\n  readonly __typename?: 'Query'\n\n  readonly ordersCategoryCount: ReadonlyArray<\n    QOrdersCategoryCountOrdersCategoryCount\n  >\n}\n\nexport type QOrdersCategoryCountOrdersCategoryCount = {\n  readonly __typename?: 'OrderStateCategoryCount'\n\n  readonly category: QOrdersCategoryCountCategory\n\n  readonly count: number\n}\n\nexport type QOrdersCategoryCountCategory = {\n  readonly __typename?: 'OrderStateCategory'\n\n  readonly enum: OrderStateCategoryEnum\n}\n\nexport type QOrderStateVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type QOrderStateQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderStateOrder\n\n  readonly companyBranch: QOrderStateCompanyBranch\n}\n\nexport type QOrderStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly deliveryType: Maybe<QOrderStateDeliveryType>\n\n  readonly isCancelable: boolean\n\n  readonly isPriority: boolean\n} & (FPaymentMethodsFragment & FOrderStateCategoryFragment)\n\nexport type QOrderStateDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type QOrderStateCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowedCategories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type SOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SOrderListUpdatedOrder\n}\n\nexport type SOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SOrderListOrder>\n}\n\nexport type SOrderListOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (FOrderStateCategoryFragment & FOrderTickerFragment)\n\nexport type SOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type SOrderMapDeliveriesSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly update: SOrderMapDeliveriesUpdate\n}\n\nexport type SOrderMapDeliveriesUpdate = {\n  readonly __typename?: 'TransportationDeviceUserUpdateSubscription'\n\n  readonly device: Maybe<SOrderMapDeliveriesDevice>\n}\n\nexport type SOrderMapDeliveriesDevice = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly user: SOrderMapDeliveriesUser\n} & FOrderMapDeviceFragment\n\nexport type SOrderMapDeliveriesUser = FOrderMapDriverFragment\n\nexport type SOrderMapOrdersVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SOrderMapOrdersSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SOrderMapOrdersUpdatedOrder\n}\n\nexport type SOrderMapOrdersUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SOrderMapOrdersOrder>\n}\n\nexport type SOrderMapOrdersOrder = FOrderMapOrderFragment\n\nexport type SOrdersCategoryCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n  readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type SOrdersCategoryCountSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedCount: SOrdersCategoryCountUpdatedCount\n}\n\nexport type SOrdersCategoryCountUpdatedCount = {\n  readonly __typename?: 'OrderCategoryCountSubscription'\n\n  readonly order: SOrdersCategoryCountOrder\n\n  readonly nextCategory: OrderStateCategoryEnum\n\n  readonly prevCategory: OrderStateCategoryEnum\n}\n\nexport type SOrdersCategoryCountOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type MFinancialReportCreateVariables = {\n  readonly branchId: string\n}\n\nexport type MFinancialReportCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MFinancialReportCreateResult\n}\n\nexport type MFinancialReportCreateResult = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n}\n\nexport type QAllDriversVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QAllDriversQuery = {\n  readonly __typename?: 'Query'\n\n  readonly drivers: ReadonlyArray<QAllDriversDrivers>\n}\n\nexport type QAllDriversDrivers = FDriverFragment\n\nexport type QClosureHistoryVariables = {\n  readonly branchId: string\n  readonly dateFrom: string\n  readonly dateTo: string\n}\n\nexport type QClosureHistoryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly history: ReadonlyArray<QClosureHistoryHistory>\n}\n\nexport type QClosureHistoryHistory = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QClosureReportVariables = {\n  readonly branchId: string\n  readonly reportId: string\n  readonly showReport: boolean\n}\n\nexport type QClosureReportQuery = {\n  readonly __typename?: 'Query'\n\n  readonly lastReport: QClosureReportLastReport\n\n  readonly report: Maybe<QClosureReportReport>\n}\n\nexport type QClosureReportLastReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QClosureReportReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QStatsDailyVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsDailyQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsDailyStats\n}\n\nexport type QStatsDailyStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly category: string\n\n  readonly daily: string\n\n  readonly delivery: string\n\n  readonly drivers: string\n}\n\nexport type QStatsOrdersVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsOrdersQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersStats\n}\n\nexport type QStatsOrdersStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly finishedOrders: QStatsOrdersFinishedOrders\n\n  readonly orderStatisticsPlain: string\n}\n\nexport type QStatsOrdersFinishedOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly fees: QStatsOrdersFees\n\n  readonly onlinePayments: QStatsOrdersOnlinePayments\n\n  readonly total: QStatsOrdersTotal\n\n  readonly finishedCount: number\n\n  readonly cancelledCount: number\n}\n\nexport type QStatsOrdersFees = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersOnlinePayments = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersTotal = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersCountsVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsOrdersCountsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersCountsStats\n}\n\nexport type QStatsOrdersCountsStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly counts: QStatsOrdersCountsCounts\n}\n\nexport type QStatsOrdersCountsCounts = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly finished: number\n\n  readonly cancelled: number\n}\n\nexport type QStatsOrdersListVariables = {\n  readonly filter: InputStatisticCreate\n  readonly pagination?: Maybe<InputPaginationParams>\n}\n\nexport type QStatsOrdersListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersListStats\n}\n\nexport type QStatsOrdersListStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly orders: QStatsOrdersListOrders\n}\n\nexport type QStatsOrdersListOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly list: ReadonlyArray<QStatsOrdersListList>\n}\n\nexport type QStatsOrdersListList = FOrderTickerFragment &\n  FOrderStateCategoryFragment\n\nexport type QStockStatsVariables = {\n  readonly brandId: string\n}\n\nexport type QStockStatsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QStockStatsStockItems>\n}\n\nexport type QStockStatsStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly companyBranch: QStockStatsCompanyBranch\n\n  readonly plu: Maybe<string>\n\n  readonly quantity: number\n\n  readonly nameLabel: string\n\n  readonly wareUnit: QStockStatsWareUnit\n}\n\nexport type QStockStatsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type QStockStatsWareUnit = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type MUserMenuLanguageVariables = {\n  readonly userId: string\n  readonly lang: LanguageEnum\n}\n\nexport type MUserMenuLanguageMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateUser: MUserMenuLanguageUpdateUser\n}\n\nexport type MUserMenuLanguageUpdateUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly language: MUserMenuLanguageLanguage\n}\n\nexport type MUserMenuLanguageLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly enum: LanguageEnum\n}\n\nexport type QUserMenuLanguagesVariables = {}\n\nexport type QUserMenuLanguagesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly languages: ReadonlyArray<QUserMenuLanguagesLanguages>\n}\n\nexport type QUserMenuLanguagesLanguages = {\n  readonly __typename?: 'Language'\n\n  readonly code: string\n\n  readonly enum: LanguageEnum\n\n  readonly rawCode: string\n}\n\nexport type MZoneUpdateVariables = {\n  readonly zoneId: string\n  readonly update: InputZoneUpdate\n}\n\nexport type MZoneUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZone: MZoneUpdateUpdateZone\n}\n\nexport type MZoneUpdateUpdateZone = FZoneFragment\n\nexport type GSpecificBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly companyBranch: GSpecificBusinessHourCompanyBranch\n\n  readonly specificDate: Maybe<string>\n\n  readonly specificDateLocalized: Maybe<string>\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n\n  readonly openAt: string\n\n  readonly closeAt: string\n}\n\nexport type GSpecificBusinessHourCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type GMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly visible: boolean\n\n  readonly nameLabel: Maybe<string>\n\n  readonly internalNote: Maybe<string>\n\n  readonly availableAmount: number\n\n  readonly prices: ReadonlyArray<GMenuRecipePrices>\n\n  readonly recipeType: GMenuRecipeRecipeType\n}\n\nexport type GMenuRecipePrices = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipePriceType\n\n  readonly price: GMenuRecipePrice\n}\n\nexport type GMenuRecipePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n} & FPriceFragment\n\nexport type GMenuRecipeRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuStockItemFragment = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly note: string\n\n  readonly plu: Maybe<string>\n\n  readonly quantity: number\n\n  readonly nameLabel: string\n\n  readonly allergens: ReadonlyArray<GMenuStockItemAllergens>\n\n  readonly wareUnit: GMenuStockItemWareUnit\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockItemAllergens = FMenuAllergenFragment\n\nexport type GMenuStockItemWareUnit = FMenuWareUnitFragment\n\nexport type GMenuRecipePriceFragment = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipePricePriceType\n\n  readonly price: GMenuRecipePricePrice\n\n  readonly vat: GMenuRecipePriceVat\n}\n\nexport type GMenuRecipePricePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipePricePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly currency: GMenuRecipePriceCurrency\n} & FPriceFragment\n\nexport type GMenuRecipePriceCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GMenuRecipePriceVat = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n}\n\nexport type GMenuAssocRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: Maybe<string>\n}\n\nexport type FAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly state: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n}\n\nexport type FCompanyBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly address: FCompanyBranchAddress\n\n  readonly gps: FCompanyBranchGps\n\n  readonly brand: FCompanyBranchBrand\n}\n\nexport type FCompanyBranchAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<FCompanyBranchCountry>\n}\n\nexport type FCompanyBranchCountry = {\n  readonly __typename?: 'Country'\n\n  readonly phonePrefix: string\n}\n\nexport type FCompanyBranchGps = FGeoPointFragment\n\nexport type FCompanyBranchBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FCustomerFragment = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly defaultEmail: Maybe<FCustomerDefaultEmail>\n\n  readonly defaultPhone: Maybe<FCustomerDefaultPhone>\n}\n\nexport type FCustomerDefaultEmail = FEmailFragment\n\nexport type FCustomerDefaultPhone = FPhoneFragment\n\nexport type FEmailFragment = {\n  readonly __typename?: 'Email'\n\n  readonly email: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FGeoPointFragment = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type FOrderStateCategoryFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type FPhoneFragment = {\n  readonly __typename?: 'Phone'\n\n  readonly phone: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n}\n\nexport type FPriceWithCurrencyFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FPriceWithCurrencyCurrency\n}\n\nexport type FPriceWithCurrencyCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FUserNameFragment = {\n  readonly __typename?: 'User'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type FRegularBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly weekDay: Maybe<FRegularBusinessHourWeekDay>\n}\n\nexport type FRegularBusinessHourWeekDay = {\n  readonly __typename?: 'WeekDay'\n\n  readonly enum: WeekDayEnum\n}\n\nexport type FSpecificBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly companyBranch: FSpecificBusinessHourCompanyBranch\n\n  readonly specificDate: Maybe<string>\n\n  readonly specificDateLocalized: Maybe<string>\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n\n  readonly openAt: string\n\n  readonly closeAt: string\n}\n\nexport type FSpecificBusinessHourCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type FWeekdayFragment = {\n  readonly __typename?: 'WeekDay'\n\n  readonly enum: WeekDayEnum\n\n  readonly code: string\n}\n\nexport type FCreateOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly items: ReadonlyArray<FCreateOrderItems>\n\n  readonly coverPrice: FCreateOrderCoverPrice\n\n  readonly transportFee: FCreateOrderTransportFee\n\n  readonly discounts: ReadonlyArray<FCreateOrderDiscounts>\n\n  readonly minimalOrderPrice: Maybe<FCreateOrderMinimalOrderPrice>\n\n  readonly totalDiscount: FCreateOrderTotalDiscount\n\n  readonly totalSum: FCreateOrderTotalSum\n}\n\nexport type FCreateOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly recipe: FCreateOrderRecipe\n\n  readonly priceWithSidedishes: FCreateOrderPriceWithSidedishes\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderSidedishes>\n} & FCreateOrderItemFragment\n\nexport type FCreateOrderRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly sidedishCount: number\n}\n\nexport type FCreateOrderPriceWithSidedishes = FPriceFragment\n\nexport type FCreateOrderSidedishes = FCreateOrderItemFragment\n\nexport type FCreateOrderCoverPrice = FPriceFragment\n\nexport type FCreateOrderTransportFee = FPriceFragment\n\nexport type FCreateOrderDiscounts = {\n  readonly __typename?: 'PriceWithDescription'\n\n  readonly code: string\n\n  readonly description: string\n\n  readonly price: FCreateOrderPrice\n}\n\nexport type FCreateOrderPrice = FPriceFragment\n\nexport type FCreateOrderMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type FCreateOrderTotalDiscount = FPriceFragment\n\nexport type FCreateOrderTotalSum = FPriceFragment\n\nexport type FCreateOrderItemFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly price: FCreateOrderItemPrice\n\n  readonly recipe: FCreateOrderItemRecipe\n}\n\nexport type FCreateOrderItemPrice = FPriceFragment\n\nexport type FCreateOrderItemRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: Maybe<string>\n}\n\nexport type FCreateOrderRecipeSidedishesFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: Maybe<string>\n\n  readonly sidedishCategories: ReadonlyArray<\n    FCreateOrderRecipeSidedishesSidedishCategories\n  >\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: Maybe<string>\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderRecipeSidedishesSidedishes>\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: Maybe<string>\n\n  readonly price: FCreateOrderRecipeSidedishesPrice\n}\n\nexport type FCreateOrderRecipeSidedishesPrice = FPriceFragment\n\nexport type FOrderMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: Maybe<string>\n\n  readonly pictogram: Maybe<string>\n\n  readonly recipes: ReadonlyArray<FOrderMenuCategoryRecipes>\n}\n\nexport type FOrderMenuCategoryRecipes = FOrderMenuRecipeFragment\n\nexport type FOrderMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: Maybe<string>\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly price: FOrderMenuRecipePrice\n\n  readonly sidedishCount: number\n}\n\nexport type FOrderMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FOrderMenuRecipeCurrency\n}\n\nexport type FOrderMenuRecipeCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FKitchenCompletionOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly cashBox: Maybe<FKitchenCompletionOrderCashBox>\n\n  readonly orderNumber: Maybe<number>\n\n  readonly orderOrigin: FKitchenCompletionOrderOrderOrigin\n\n  readonly sector: Maybe<FKitchenCompletionOrderSector>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n} & FKitchenOrderBaseFragment\n\nexport type FKitchenCompletionOrderCashBox = {\n  readonly __typename?: 'CashBox'\n\n  readonly id: string\n}\n\nexport type FKitchenCompletionOrderOrderOrigin = {\n  readonly __typename?: 'OrderOrigin'\n\n  readonly code: string\n}\n\nexport type FKitchenCompletionOrderSector = {\n  readonly __typename?: 'Sector'\n\n  readonly name: string\n}\n\nexport type FKitchenOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly address: FKitchenOrderAddress\n\n  readonly customer: FKitchenOrderCustomer\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly note: Maybe<string>\n\n  readonly previousNote: Maybe<string>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n\n  readonly sector: Maybe<FKitchenOrderSector>\n} & FKitchenOrderBaseFragment\n\nexport type FKitchenOrderAddress = FAddressFragment\n\nexport type FKitchenOrderCustomer = FCustomerFragment\n\nexport type FKitchenOrderSector = {\n  readonly __typename?: 'Sector'\n\n  readonly name: string\n}\n\nexport type FKitchenOrderBaseFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliveryType: Maybe<FKitchenOrderBaseDeliveryType>\n\n  readonly companyBranch: FKitchenOrderBaseCompanyBranch\n\n  readonly isPriority: boolean\n\n  readonly items: ReadonlyArray<FKitchenOrderBaseItems>\n}\n\nexport type FKitchenOrderBaseDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FKitchenOrderBaseCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FKitchenOrderBaseItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<FKitchenOrderBaseSidedishes>\n} & FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderBaseSidedishes = FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderRecipeFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly orderRecipeState: FKitchenOrderRecipeOrderRecipeState\n\n  readonly recipe: FKitchenOrderRecipeRecipe\n}\n\nexport type FKitchenOrderRecipeOrderRecipeState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type FKitchenOrderRecipeRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: Maybe<string>\n}\n\nexport type FMenuAllergenFragment = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: AllergenEnum\n\n  readonly category: number\n}\n\nexport type FMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: Maybe<string>\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly visible: boolean\n\n  readonly categoryType: FMenuCategoryCategoryType\n\n  readonly origins: ReadonlyArray<OrderOriginCategoryEnum>\n\n  readonly pictogram: Maybe<string>\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly recipes: ReadonlyArray<FMenuCategoryRecipes>\n}\n\nexport type FMenuCategoryCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuCategoryRecipes = FMenuRecipeFragment\n\nexport type FMenuCategoryListItemFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: Maybe<string>\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly countRecipes: number\n\n  readonly visible: boolean\n\n  readonly categoryType: FMenuCategoryListItemCategoryType\n\n  readonly origins: ReadonlyArray<OrderOriginCategoryEnum>\n}\n\nexport type FMenuCategoryListItemCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly visible: boolean\n\n  readonly nameLabel: Maybe<string>\n\n  readonly internalNote: Maybe<string>\n\n  readonly availableAmount: number\n\n  readonly prices: ReadonlyArray<FMenuRecipePrices>\n\n  readonly recipeType: FMenuRecipeRecipeType\n}\n\nexport type FMenuRecipePrices = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: FMenuRecipePriceType\n\n  readonly price: FMenuRecipePrice\n}\n\nexport type FMenuRecipePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type FMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n} & FPriceFragment\n\nexport type FMenuRecipeRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuRecipePricingFragment = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: FMenuRecipePricingPriceType\n\n  readonly price: FMenuRecipePricingPrice\n\n  readonly vat: FMenuRecipePricingVat\n}\n\nexport type FMenuRecipePricingPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type FMenuRecipePricingPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly currency: FMenuRecipePricingCurrency\n} & FPriceFragment\n\nexport type FMenuRecipePricingCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FMenuRecipePricingVat = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n}\n\nexport type FMenuWareUnitFragment = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly enum: WareUnitEnum\n\n  readonly code: string\n}\n\nexport type FDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n} & FUserNameFragment\n\nexport type FOrderDetailWareFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FOrderDetailWareRecipe\n\n  readonly price: FOrderDetailWarePrice\n}\n\nexport type FOrderDetailWareRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: Maybe<string>\n}\n\nexport type FOrderDetailWarePrice = FPriceFragment\n\nexport type FOrderDriverFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly driver: Maybe<FOrderDriverDriver>\n}\n\nexport type FOrderDriverDriver = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly id: string\n\n  readonly user: FOrderDriverUser\n}\n\nexport type FOrderDriverUser = FDriverFragment\n\nexport type FOrderMapDeliveryFragment = {\n  readonly __typename?: 'User'\n\n  readonly device: Maybe<FOrderMapDeliveryDevice>\n} & FOrderMapDriverFragment\n\nexport type FOrderMapDeliveryDevice = FOrderMapDeviceFragment\n\nexport type FOrderMapDeviceFragment = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly id: string\n\n  readonly lastPosition: Maybe<FOrderMapDeviceLastPosition>\n\n  readonly isFinalized: boolean\n\n  readonly transportationDevice: FOrderMapDeviceTransportationDevice\n}\n\nexport type FOrderMapDeviceLastPosition = {\n  readonly __typename?: 'GeoPositionWithTimestamp'\n\n  readonly gps: FOrderMapDeviceGps\n\n  readonly timestamp: string\n}\n\nexport type FOrderMapDeviceGps = FGeoPointFragment\n\nexport type FOrderMapDeviceTransportationDevice = {\n  readonly __typename?: 'TransportationDevice'\n\n  readonly deviceState: FOrderMapDeviceDeviceState\n}\n\nexport type FOrderMapDeviceDeviceState = {\n  readonly __typename?: 'DeviceState'\n\n  readonly enum: DeviceStateEnum\n}\n\nexport type FOrderMapDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n\n  readonly countUndeliveredOrders: number\n}\n\nexport type FOrderMapOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliveryType: Maybe<FOrderMapOrderDeliveryType>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n\n  readonly gps: Maybe<FOrderMapOrderGps>\n}\n\nexport type FOrderMapOrderDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FOrderMapOrderGps = FGeoPointFragment\n\nexport type FOrderTickerFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly isPaidWithCard: boolean\n\n  readonly isPriority: boolean\n\n  readonly deliveryType: Maybe<FOrderTickerDeliveryType>\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliverAtWorst: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly companyBranch: FOrderTickerCompanyBranch\n\n  readonly address: FOrderTickerAddress\n\n  readonly customer: FOrderTickerCustomer\n\n  readonly totalSum: FOrderTickerTotalSum\n\n  readonly sector: Maybe<FOrderTickerSector>\n}\n\nexport type FOrderTickerDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FOrderTickerCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly oldOrderThreshold: number\n}\n\nexport type FOrderTickerAddress = FAddressFragment\n\nexport type FOrderTickerCustomer = FCustomerFragment\n\nexport type FOrderTickerTotalSum = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type FOrderTickerSector = {\n  readonly __typename?: 'Sector'\n\n  readonly name: string\n}\n\nexport type FOrderTimingFragment = {\n  readonly __typename?: 'Order'\n\n  readonly orderTiming: ReadonlyArray<FOrderTimingOrderTiming>\n}\n\nexport type FOrderTimingOrderTiming = {\n  readonly __typename?: 'OrderStateCategoryRelation'\n\n  readonly createdAt: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type FOrderTotalsFragment = {\n  readonly __typename?: 'Order'\n\n  readonly totalSum: FOrderTotalsTotalSum\n\n  readonly transportFee: FOrderTotalsTransportFee\n\n  readonly coverPrice: FOrderTotalsCoverPrice\n\n  readonly totalDiscount: FOrderTotalsTotalDiscount\n\n  readonly tip: FOrderTotalsTip\n}\n\nexport type FOrderTotalsTotalSum = FPriceFragment\n\nexport type FOrderTotalsTransportFee = FPriceFragment\n\nexport type FOrderTotalsCoverPrice = FPriceFragment\n\nexport type FOrderTotalsTotalDiscount = FPriceFragment\n\nexport type FOrderTotalsTip = FPriceFragment\n\nexport type FPaymentMethodsFragment = {\n  readonly __typename?: 'Order'\n\n  readonly paymentMethods: ReadonlyArray<FPaymentMethodsPaymentMethods>\n}\n\nexport type FPaymentMethodsPaymentMethods = {\n  readonly __typename?: 'PaymentMethod'\n\n  readonly id: string\n\n  readonly description: Maybe<string>\n\n  readonly paymentGate: FPaymentMethodsPaymentGate\n}\n\nexport type FPaymentMethodsPaymentGate = {\n  readonly __typename?: 'PaymentGate'\n\n  readonly code: string\n}\n\nexport type FZoneFragment = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly enabled: boolean\n\n  readonly priority: number\n\n  readonly companyBranch: FZoneCompanyBranch\n\n  readonly geoPolygon: ReadonlyArray<FZoneGeoPolygon>\n\n  readonly priceRangeRules: ReadonlyArray<FZonePriceRangeRules>\n\n  readonly minimalOrderPrice: FZoneMinimalOrderPrice\n\n  readonly zoneColor: FZoneZoneColor\n}\n\nexport type FZoneCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly brand: FZoneBrand\n}\n\nexport type FZoneBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type FZoneGeoPolygon = FGeoPointFragment\n\nexport type FZonePriceRangeRules = FZonePriceRangeFragment\n\nexport type FZoneMinimalOrderPrice = FPriceFragment\n\nexport type FZoneZoneColor = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type FZonePriceRangeFragment = {\n  readonly __typename?: 'ZonePriceRangeRule'\n\n  readonly toPrice: FZonePriceRangeToPrice\n\n  readonly price: FZonePriceRangePrice\n}\n\nexport type FZonePriceRangeToPrice = FPriceFragment\n\nexport type FZonePriceRangePrice = FPriceFragment\n\nimport * as Hooks from '@speedlo/graphql'\nimport gql from 'graphql-tag'\n\n// ====================================================\n// Fragments\n// ====================================================\n\nexport const GSpecificBusinessHourFragmentDoc = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const FPriceFragmentDoc = gql`\n  fragment FPrice on PriceConverted {\n    value\n  }\n`\n\nexport const GMenuRecipeFragmentDoc = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FMenuAllergenFragmentDoc = gql`\n  fragment FMenuAllergen on Allergen {\n    id\n    code\n    enum\n    category\n  }\n`\n\nexport const FMenuWareUnitFragmentDoc = gql`\n  fragment FMenuWareUnit on WareUnit {\n    id\n    enum\n    code\n  }\n`\n\nexport const GMenuStockItemFragmentDoc = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...FMenuAllergen\n    }\n    wareUnit {\n      ...FMenuWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n\n  ${FMenuAllergenFragmentDoc}\n  ${FMenuWareUnitFragmentDoc}\n`\n\nexport const GMenuRecipePriceFragmentDoc = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const GMenuAssocRecipeFragmentDoc = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const FGeoPointFragmentDoc = gql`\n  fragment FGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const FCompanyBranchFragmentDoc = gql`\n  fragment FCompanyBranch on CompanyBranch {\n    id\n    name\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    gps {\n      ...FGeoPoint\n    }\n    brand {\n      id\n      name\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderStateCategoryFragmentDoc = gql`\n  fragment FOrderStateCategory on Order {\n    id\n    orderStateCategory\n  }\n`\n\nexport const FPriceWithCurrencyFragmentDoc = gql`\n  fragment FPriceWithCurrency on PriceConverted {\n    value\n    currency {\n      code\n    }\n  }\n`\n\nexport const FRegularBusinessHourFragmentDoc = gql`\n  fragment FRegularBusinessHour on BusinessHour {\n    id\n    openAt\n    closeAt\n    weekDay {\n      enum\n    }\n  }\n`\n\nexport const FSpecificBusinessHourFragmentDoc = gql`\n  fragment FSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const FWeekdayFragmentDoc = gql`\n  fragment FWeekday on WeekDay {\n    enum\n    code\n  }\n`\n\nexport const FCreateOrderItemFragmentDoc = gql`\n  fragment FCreateOrderItem on OrderRecipe {\n    id\n    price {\n      ...FPrice\n    }\n    recipe {\n      id\n      code\n      nameLabel\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderFragmentDoc = gql`\n  fragment FCreateOrder on Order {\n    id\n    countWares\n    items {\n      ...FCreateOrderItem\n      recipe {\n        sidedishCount: sideDishesWareCategoriesCount\n      }\n      priceWithSidedishes: priceWithSideDishes {\n        ...FPrice\n      }\n      sidedishes: sideDishes {\n        ...FCreateOrderItem\n      }\n    }\n    coverPrice {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...FPrice\n      }\n    }\n    minimalOrderPrice {\n      formattedValue\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    totalSum {\n      ...FPrice\n    }\n  }\n\n  ${FCreateOrderItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderRecipeSidedishesFragmentDoc = gql`\n  fragment FCreateOrderRecipeSidedishes on Recipe {\n    id\n    nameLabel\n    sidedishCategories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sidedishes: sideDishes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderMenuRecipeFragmentDoc = gql`\n  fragment FOrderMenuRecipe on Recipe {\n    id\n    code\n    nameLabel\n    descriptionLabel\n    price(warePriceType: DELIVERY) {\n      value\n      currency {\n        code\n      }\n    }\n    sidedishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const FOrderMenuCategoryFragmentDoc = gql`\n  fragment FOrderMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n    recipes(enabled: true, isAvailable: true) {\n      ...FOrderMenuRecipe\n    }\n  }\n\n  ${FOrderMenuRecipeFragmentDoc}\n`\n\nexport const FKitchenOrderRecipeFragmentDoc = gql`\n  fragment FKitchenOrderRecipe on OrderRecipe {\n    id\n    orderRecipeState {\n      enum\n    }\n    recipe {\n      id\n      code\n      nameLabel\n    }\n  }\n`\n\nexport const FKitchenOrderBaseFragmentDoc = gql`\n  fragment FKitchenOrderBase on Order {\n    id\n    createdAt\n    deliverAt\n    deliveryType {\n      enum\n    }\n    companyBranch {\n      id\n      name\n    }\n    isPriority\n    items {\n      ...FKitchenOrderRecipe\n      sidedishes: sideDishes {\n        ...FKitchenOrderRecipe\n      }\n    }\n  }\n\n  ${FKitchenOrderRecipeFragmentDoc}\n`\n\nexport const FKitchenCompletionOrderFragmentDoc = gql`\n  fragment FKitchenCompletionOrder on Order {\n    ...FKitchenOrderBase\n    cashBox {\n      id\n    }\n    orderNumber: invoiceSequenceResettable\n    orderOrigin {\n      code\n    }\n    sector {\n      name\n    }\n    orderStateCategory(target: FE_COMPLETION)\n  }\n\n  ${FKitchenOrderBaseFragmentDoc}\n`\n\nexport const FAddressFragmentDoc = gql`\n  fragment FAddress on JsonAddress {\n    state\n    city\n    street\n    houseNumber\n  }\n`\n\nexport const FEmailFragmentDoc = gql`\n  fragment FEmail on Email {\n    email\n    description\n    default\n  }\n`\n\nexport const FPhoneFragmentDoc = gql`\n  fragment FPhone on Phone {\n    phone\n    description\n    default\n  }\n`\n\nexport const FCustomerFragmentDoc = gql`\n  fragment FCustomer on JsonCustomer {\n    firstName\n    lastName\n    defaultEmail {\n      ...FEmail\n    }\n    defaultPhone {\n      ...FPhone\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n`\n\nexport const FKitchenOrderFragmentDoc = gql`\n  fragment FKitchenOrder on Order {\n    ...FKitchenOrderBase\n    address {\n      ...FAddress\n    }\n    customer {\n      ...FCustomer\n    }\n    deliverAt\n    deliveredAt\n    delayedDeliveryTime\n    note\n    previousNote\n    orderStateCategory(target: FE_KITCHEN)\n    sector {\n      name\n    }\n  }\n\n  ${FKitchenOrderBaseFragmentDoc}\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n`\n\nexport const FMenuRecipeFragmentDoc = gql`\n  fragment FMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FMenuCategoryFragmentDoc = gql`\n  fragment FMenuCategory on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    origins: orderOriginCategories\n    pictogram\n    minCount\n    maxCount\n    recipes {\n      ...FMenuRecipe\n    }\n  }\n\n  ${FMenuRecipeFragmentDoc}\n`\n\nexport const FMenuCategoryListItemFragmentDoc = gql`\n  fragment FMenuCategoryListItem on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    countRecipes\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    origins: orderOriginCategories\n  }\n`\n\nexport const FMenuRecipePricingFragmentDoc = gql`\n  fragment FMenuRecipePricing on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderDetailWareFragmentDoc = gql`\n  fragment FOrderDetailWare on OrderRecipe {\n    id\n    recipe {\n      id\n      code\n      nameLabel\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FUserNameFragmentDoc = gql`\n  fragment FUserName on User {\n    firstName\n    lastName\n  }\n`\n\nexport const FDriverFragmentDoc = gql`\n  fragment FDriver on User {\n    id\n    initials\n    ...FUserName\n  }\n\n  ${FUserNameFragmentDoc}\n`\n\nexport const FOrderDriverFragmentDoc = gql`\n  fragment FOrderDriver on Order {\n    id\n    driver: userDeliveringOrder {\n      id\n      user {\n        ...FDriver\n      }\n    }\n  }\n\n  ${FDriverFragmentDoc}\n`\n\nexport const FOrderMapDriverFragmentDoc = gql`\n  fragment FOrderMapDriver on User {\n    id\n    initials\n    countUndeliveredOrders\n  }\n`\n\nexport const FOrderMapDeviceFragmentDoc = gql`\n  fragment FOrderMapDevice on TransportationDeviceUser {\n    id\n    lastPosition {\n      gps: geoPosition {\n        ...FGeoPoint\n      }\n      timestamp\n    }\n    isFinalized\n    transportationDevice {\n      deviceState {\n        enum\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderMapDeliveryFragmentDoc = gql`\n  fragment FOrderMapDelivery on User {\n    ...FOrderMapDriver\n    device: usedTransportationDevice {\n      ...FOrderMapDevice\n    }\n  }\n\n  ${FOrderMapDriverFragmentDoc}\n  ${FOrderMapDeviceFragmentDoc}\n`\n\nexport const FOrderMapOrderFragmentDoc = gql`\n  fragment FOrderMapOrder on Order {\n    id\n    deliverAt\n    deliveryType {\n      enum\n    }\n    delayedDeliveryTime\n    orderStateCategory\n    gps {\n      ...FGeoPoint\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderTickerFragmentDoc = gql`\n  fragment FOrderTicker on Order {\n    id\n    createdAt\n    isPaidWithCard\n    isPriority\n    deliveryType {\n      enum\n    }\n    deliverAt\n    deliverAtWorst\n    deliveredAt\n    delayedDeliveryTime\n    companyBranch {\n      id\n      name\n      oldOrderThreshold\n    }\n    address {\n      ...FAddress\n    }\n    customer {\n      ...FCustomer\n    }\n    totalSum {\n      formattedValue\n    }\n    sector {\n      name\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n`\n\nexport const FOrderTimingFragmentDoc = gql`\n  fragment FOrderTiming on Order {\n    orderTiming: orderStateCategoryRelations {\n      createdAt\n      orderStateCategory\n    }\n  }\n`\n\nexport const FOrderTotalsFragmentDoc = gql`\n  fragment FOrderTotals on Order {\n    totalSum {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    coverPrice {\n      ...FPrice\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    tip {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FPaymentMethodsFragmentDoc = gql`\n  fragment FPaymentMethods on Order {\n    paymentMethods: canBeUpdatedToPaymentMethods {\n      id\n      description\n      paymentGate {\n        code\n      }\n    }\n  }\n`\n\nexport const FZonePriceRangeFragmentDoc = gql`\n  fragment FZonePriceRange on ZonePriceRangeRule {\n    toPrice {\n      ...FPrice\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FZoneFragmentDoc = gql`\n  fragment FZone on Zone {\n    id\n    name\n    enabled\n    priority\n    companyBranch {\n      id\n      brand {\n        id\n      }\n    }\n    geoPolygon {\n      ...FGeoPoint\n    }\n    priceRangeRules {\n      ...FZonePriceRange\n    }\n    minimalOrderPrice {\n      ...FPrice\n    }\n    zoneColor {\n      id\n      code\n      color\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n  ${FZonePriceRangeFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\n// ====================================================\n// Hooks\n// ====================================================\n\nexport const GCreateSpecificBusinessHourDocument = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n\n  ${GSpecificBusinessHourFragmentDoc}\n`\n\nexport function useGCreateSpecificBusinessHour(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateSpecificBusinessHourMutation,\n    GCreateSpecificBusinessHourVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreateSpecificBusinessHourMutation,\n    GCreateSpecificBusinessHourVariables\n  >(GCreateSpecificBusinessHourDocument, baseOptions)\n}\n\nexport const GDeleteSpecificBusinessHourDocument = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n\nexport function useGDeleteSpecificBusinessHour(\n  baseOptions?: Hooks.MutationHookOptions<\n    GDeleteSpecificBusinessHourMutation,\n    GDeleteSpecificBusinessHourVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GDeleteSpecificBusinessHourMutation,\n    GDeleteSpecificBusinessHourVariables\n  >(GDeleteSpecificBusinessHourDocument, baseOptions)\n}\n\nexport const GSpecificBusinessHoursDocument = gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n\n  ${GSpecificBusinessHourFragmentDoc}\n`\n\nexport function useGSpecificBusinessHours(\n  variables?: GSpecificBusinessHoursVariables,\n  baseOptions?: Hooks.QueryHookOptions<GSpecificBusinessHoursVariables>,\n) {\n  return Hooks.useQuery<\n    GSpecificBusinessHoursQuery,\n    GSpecificBusinessHoursVariables\n  >(GSpecificBusinessHoursDocument, variables, baseOptions)\n}\n\nexport function useExecutableGSpecificBusinessHours(\n  options?: Hooks.ExecutableQueryOptions<GSpecificBusinessHoursVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    GSpecificBusinessHoursQuery,\n    GSpecificBusinessHoursVariables\n  >(GSpecificBusinessHoursDocument, options)\n}\n\nexport const GOrderVamDocument = gql`\n  query GOrderVam($branchId: ID!, $phone: String!) {\n    vamCustomer: vamInformation(companyBranchId: $branchId, phone: $phone) {\n      isFound\n      email\n      firstName\n      lastName\n      lastOrder {\n        note\n      }\n      locations {\n        street\n        houseNumber\n        city\n        state\n        gps {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n`\n\nexport function useGOrderVam(\n  variables?: GOrderVamVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderVamVariables>,\n) {\n  return Hooks.useQuery<GOrderVamQuery, GOrderVamVariables>(\n    GOrderVamDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGOrderVam(\n  options?: Hooks.ExecutableQueryOptions<GOrderVamVariables>,\n) {\n  return Hooks.useExecutableQuery<GOrderVamQuery, GOrderVamVariables>(\n    GOrderVamDocument,\n    options,\n  )\n}\n\nexport const GOrderPromoDocument = gql`\n  query GOrderPromo($branchId: ID!) {\n    promoCodes(promoCode: { companyBranch: $branchId, enabled: true }) {\n      id\n      code\n    }\n  }\n`\n\nexport function useGOrderPromo(\n  variables?: GOrderPromoVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderPromoVariables>,\n) {\n  return Hooks.useQuery<GOrderPromoQuery, GOrderPromoVariables>(\n    GOrderPromoDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGOrderPromo(\n  options?: Hooks.ExecutableQueryOptions<GOrderPromoVariables>,\n) {\n  return Hooks.useExecutableQuery<GOrderPromoQuery, GOrderPromoVariables>(\n    GOrderPromoDocument,\n    options,\n  )\n}\n\nexport const GSortMenuCategoryDocument = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport function useGSortMenuCategory(\n  baseOptions?: Hooks.MutationHookOptions<\n    GSortMenuCategoryMutation,\n    GSortMenuCategoryVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GSortMenuCategoryMutation,\n    GSortMenuCategoryVariables\n  >(GSortMenuCategoryDocument, baseOptions)\n}\n\nexport const GMenuCategoryCreateDocument = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport function useGMenuCategoryCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryCreateMutation,\n    GMenuCategoryCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryCreateMutation,\n    GMenuCategoryCreateVariables\n  >(GMenuCategoryCreateDocument, baseOptions)\n}\n\nexport const GMenuCategoryUpdateDocument = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...FMenuCategory\n    }\n  }\n\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport function useGMenuCategoryUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryUpdateMutation,\n    GMenuCategoryUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryUpdateMutation,\n    GMenuCategoryUpdateVariables\n  >(GMenuCategoryUpdateDocument, baseOptions)\n}\n\nexport const GMenuCategoryDeleteDocument = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuCategoryDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryDeleteMutation,\n    GMenuCategoryDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryDeleteMutation,\n    GMenuCategoryDeleteVariables\n  >(GMenuCategoryDeleteDocument, baseOptions)\n}\n\nexport const GMenuRecipeVisibilityDocument = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useGMenuRecipeVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeVisibilityMutation,\n    GMenuRecipeVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeVisibilityMutation,\n    GMenuRecipeVisibilityVariables\n  >(GMenuRecipeVisibilityDocument, baseOptions)\n}\n\nexport const GMenuRecipeCreateDocument = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeCreateMutation,\n    GMenuRecipeCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeCreateMutation,\n    GMenuRecipeCreateVariables\n  >(GMenuRecipeCreateDocument, baseOptions)\n}\n\nexport const GMenuRecipeUpdateDocument = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeUpdateMutation,\n    GMenuRecipeUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeUpdateMutation,\n    GMenuRecipeUpdateVariables\n  >(GMenuRecipeUpdateDocument, baseOptions)\n}\n\nexport const GMenuRecipeDeleteDocument = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuRecipeDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeDeleteMutation,\n    GMenuRecipeDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeDeleteMutation,\n    GMenuRecipeDeleteVariables\n  >(GMenuRecipeDeleteDocument, baseOptions)\n}\n\nexport const GMenuStockCreateDocument = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockCreateMutation,\n    GMenuStockCreateVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockCreateMutation, GMenuStockCreateVariables>(\n    GMenuStockCreateDocument,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockUpdateDocument = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockUpdateMutation,\n    GMenuStockUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockUpdateMutation, GMenuStockUpdateVariables>(\n    GMenuStockUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockDeleteDocument = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuStockDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockDeleteMutation,\n    GMenuStockDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockDeleteMutation, GMenuStockDeleteVariables>(\n    GMenuStockDeleteDocument,\n    baseOptions,\n  )\n}\n\nexport const GAllergensDocument = gql`\n  query GAllergens {\n    allergens {\n      ...FMenuAllergen\n    }\n  }\n\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport function useGAllergens(\n  variables?: GAllergensVariables,\n  baseOptions?: Hooks.QueryHookOptions<GAllergensVariables>,\n) {\n  return Hooks.useQuery<GAllergensQuery, GAllergensVariables>(\n    GAllergensDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGAllergens(\n  options?: Hooks.ExecutableQueryOptions<GAllergensVariables>,\n) {\n  return Hooks.useExecutableQuery<GAllergensQuery, GAllergensVariables>(\n    GAllergensDocument,\n    options,\n  )\n}\n\nexport const GCurrenciesDocument = gql`\n  query GCurrencies($branchId: ID!) {\n    currencies {\n      enum\n      code\n    }\n    companyBranch(id: $branchId) {\n      address {\n        country {\n          currency {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useGCurrencies(\n  variables?: GCurrenciesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GCurrenciesVariables>,\n) {\n  return Hooks.useQuery<GCurrenciesQuery, GCurrenciesVariables>(\n    GCurrenciesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGCurrencies(\n  options?: Hooks.ExecutableQueryOptions<GCurrenciesVariables>,\n) {\n  return Hooks.useExecutableQuery<GCurrenciesQuery, GCurrenciesVariables>(\n    GCurrenciesDocument,\n    options,\n  )\n}\n\nexport const GVatsDocument = gql`\n  query GVats($branchId: ID!) {\n    vats(companyBranch: $branchId) {\n      id\n      vat\n    }\n  }\n`\n\nexport function useGVats(\n  variables?: GVatsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GVatsVariables>,\n) {\n  return Hooks.useQuery<GVatsQuery, GVatsVariables>(\n    GVatsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGVats(\n  options?: Hooks.ExecutableQueryOptions<GVatsVariables>,\n) {\n  return Hooks.useExecutableQuery<GVatsQuery, GVatsVariables>(\n    GVatsDocument,\n    options,\n  )\n}\n\nexport const GWareUnitsDocument = gql`\n  query GWareUnits {\n    wareUnits {\n      id\n      code\n      enum\n    }\n  }\n`\n\nexport function useGWareUnits(\n  variables?: GWareUnitsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GWareUnitsVariables>,\n) {\n  return Hooks.useQuery<GWareUnitsQuery, GWareUnitsVariables>(\n    GWareUnitsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGWareUnits(\n  options?: Hooks.ExecutableQueryOptions<GWareUnitsVariables>,\n) {\n  return Hooks.useExecutableQuery<GWareUnitsQuery, GWareUnitsVariables>(\n    GWareUnitsDocument,\n    options,\n  )\n}\n\nexport const GMenuRecipeFormDocument = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...FMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...FMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n\n  ${GMenuRecipePriceFragmentDoc}\n  ${FMenuCategoryListItemFragmentDoc}\n  ${GMenuAssocRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeForm(\n  variables?: GMenuRecipeFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeFormVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeFormQuery, GMenuRecipeFormVariables>(\n    GMenuRecipeFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGMenuRecipeForm(\n  options?: Hooks.ExecutableQueryOptions<GMenuRecipeFormVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    GMenuRecipeFormQuery,\n    GMenuRecipeFormVariables\n  >(GMenuRecipeFormDocument, options)\n}\n\nexport const GMenuRecipeFormAssocDocument = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n\n  ${GMenuAssocRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeFormAssoc(\n  variables?: GMenuRecipeFormAssocVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeFormAssocVariables>,\n) {\n  return Hooks.useQuery<\n    GMenuRecipeFormAssocQuery,\n    GMenuRecipeFormAssocVariables\n  >(GMenuRecipeFormAssocDocument, variables, baseOptions)\n}\n\nexport function useExecutableGMenuRecipeFormAssoc(\n  options?: Hooks.ExecutableQueryOptions<GMenuRecipeFormAssocVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    GMenuRecipeFormAssocQuery,\n    GMenuRecipeFormAssocVariables\n  >(GMenuRecipeFormAssocDocument, options)\n}\n\nexport const GMenuRecipeDefaultsDocument = gql`\n  query GMenuRecipeDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport function useGMenuRecipeDefaults(\n  variables?: GMenuRecipeDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeDefaultsVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeDefaultsQuery, GMenuRecipeDefaultsVariables>(\n    GMenuRecipeDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGMenuRecipeDefaults(\n  options?: Hooks.ExecutableQueryOptions<GMenuRecipeDefaultsVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    GMenuRecipeDefaultsQuery,\n    GMenuRecipeDefaultsVariables\n  >(GMenuRecipeDefaultsDocument, options)\n}\n\nexport const GMenuStockFormDocument = gql`\n  query GMenuStockForm($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      code\n      plu\n      note\n      nameLabel: label\n      allowNegative\n      wareUnit {\n        ...FMenuWareUnit\n      }\n      allergens {\n        ...FMenuAllergen\n      }\n      companyBranch {\n        id\n        allowNegative: stockItemsCanBeNegative\n      }\n    }\n  }\n\n  ${FMenuWareUnitFragmentDoc}\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport function useGMenuStockForm(\n  variables?: GMenuStockFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockFormVariables>,\n) {\n  return Hooks.useQuery<GMenuStockFormQuery, GMenuStockFormVariables>(\n    GMenuStockFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGMenuStockForm(\n  options?: Hooks.ExecutableQueryOptions<GMenuStockFormVariables>,\n) {\n  return Hooks.useExecutableQuery<GMenuStockFormQuery, GMenuStockFormVariables>(\n    GMenuStockFormDocument,\n    options,\n  )\n}\n\nexport const GMenuStockDefaultsDocument = gql`\n  query GMenuStockDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      allowNegative: stockItemsCanBeNegative\n    }\n  }\n`\n\nexport function useGMenuStockDefaults(\n  variables?: GMenuStockDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockDefaultsVariables>,\n) {\n  return Hooks.useQuery<GMenuStockDefaultsQuery, GMenuStockDefaultsVariables>(\n    GMenuStockDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGMenuStockDefaults(\n  options?: Hooks.ExecutableQueryOptions<GMenuStockDefaultsVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    GMenuStockDefaultsQuery,\n    GMenuStockDefaultsVariables\n  >(GMenuStockDefaultsDocument, options)\n}\n\nexport const GCreateZoneDocument = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useGCreateZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateZoneMutation,\n    GCreateZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GCreateZoneMutation, GCreateZoneVariables>(\n    GCreateZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GUpdateZonePriorityDocument = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport function useGUpdateZonePriority(\n  baseOptions?: Hooks.MutationHookOptions<\n    GUpdateZonePriorityMutation,\n    GUpdateZonePriorityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GUpdateZonePriorityMutation,\n    GUpdateZonePriorityVariables\n  >(GUpdateZonePriorityDocument, baseOptions)\n}\n\nexport const GDestroyZoneDocument = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n\nexport function useGDestroyZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GDestroyZoneMutation,\n    GDestroyZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GDestroyZoneMutation, GDestroyZoneVariables>(\n    GDestroyZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GZonesDocument = gql`\n  query GZones($branchesId: [ID!]!) {\n    zones(companyBranches: $branchesId) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useGZones(\n  variables?: GZonesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZonesVariables>,\n) {\n  return Hooks.useQuery<GZonesQuery, GZonesVariables>(\n    GZonesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGZones(\n  options?: Hooks.ExecutableQueryOptions<GZonesVariables>,\n) {\n  return Hooks.useExecutableQuery<GZonesQuery, GZonesVariables>(\n    GZonesDocument,\n    options,\n  )\n}\n\nexport const GZoneLocationDocument = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...FGeoPoint\n        }\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGZoneLocation(\n  variables?: GZoneLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneLocationVariables>,\n) {\n  return Hooks.useQuery<GZoneLocationQuery, GZoneLocationVariables>(\n    GZoneLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGZoneLocation(\n  options?: Hooks.ExecutableQueryOptions<GZoneLocationVariables>,\n) {\n  return Hooks.useExecutableQuery<GZoneLocationQuery, GZoneLocationVariables>(\n    GZoneLocationDocument,\n    options,\n  )\n}\n\nexport const GZoneBranchLocationDocument = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGZoneBranchLocation(\n  variables?: GZoneBranchLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneBranchLocationVariables>,\n) {\n  return Hooks.useQuery<GZoneBranchLocationQuery, GZoneBranchLocationVariables>(\n    GZoneBranchLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGZoneBranchLocation(\n  options?: Hooks.ExecutableQueryOptions<GZoneBranchLocationVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    GZoneBranchLocationQuery,\n    GZoneBranchLocationVariables\n  >(GZoneBranchLocationDocument, options)\n}\n\nexport const GZoneColorsDocument = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n\nexport function useGZoneColors(\n  variables?: GZoneColorsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneColorsVariables>,\n) {\n  return Hooks.useQuery<GZoneColorsQuery, GZoneColorsVariables>(\n    GZoneColorsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGZoneColors(\n  options?: Hooks.ExecutableQueryOptions<GZoneColorsVariables>,\n) {\n  return Hooks.useExecutableQuery<GZoneColorsQuery, GZoneColorsVariables>(\n    GZoneColorsDocument,\n    options,\n  )\n}\n\nexport const QAddressSuggestDocument = gql`\n  query QAddressSuggest($search: String!) {\n    suggest: suggestGeolocation(address: $search) {\n      ...FAddress\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useQAddressSuggest(\n  variables?: QAddressSuggestVariables,\n  baseOptions?: Hooks.QueryHookOptions<QAddressSuggestVariables>,\n) {\n  return Hooks.useQuery<QAddressSuggestQuery, QAddressSuggestVariables>(\n    QAddressSuggestDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQAddressSuggest(\n  options?: Hooks.ExecutableQueryOptions<QAddressSuggestVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QAddressSuggestQuery,\n    QAddressSuggestVariables\n  >(QAddressSuggestDocument, options)\n}\n\nexport const MOrderStateDocument = gql`\n  mutation MOrderState($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...FOrderStateCategory\n      ...FOrderTiming\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTimingFragmentDoc}\n`\n\nexport function useMOrderState(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderStateMutation,\n    MOrderStateVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderStateMutation, MOrderStateVariables>(\n    MOrderStateDocument,\n    baseOptions,\n  )\n}\n\nexport const MSetPriorityOrderDocument = gql`\n  mutation MSetPriorityOrder($orderId: ID!, $isPriority: Boolean!) {\n    setPriorityOrder(order: $orderId, isPriority: $isPriority) {\n      id\n      isPriority\n    }\n  }\n`\n\nexport function useMSetPriorityOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSetPriorityOrderMutation,\n    MSetPriorityOrderVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSetPriorityOrderMutation,\n    MSetPriorityOrderVariables\n  >(MSetPriorityOrderDocument, baseOptions)\n}\n\nexport const QLogoutWidgetDocument = gql`\n  query QLogoutWidget($id: ID!) {\n    user(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n`\n\nexport function useQLogoutWidget(\n  variables?: QLogoutWidgetVariables,\n  baseOptions?: Hooks.QueryHookOptions<QLogoutWidgetVariables>,\n) {\n  return Hooks.useQuery<QLogoutWidgetQuery, QLogoutWidgetVariables>(\n    QLogoutWidgetDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQLogoutWidget(\n  options?: Hooks.ExecutableQueryOptions<QLogoutWidgetVariables>,\n) {\n  return Hooks.useExecutableQuery<QLogoutWidgetQuery, QLogoutWidgetVariables>(\n    QLogoutWidgetDocument,\n    options,\n  )\n}\n\nexport const MBusinessHoursSubmitDocument = gql`\n  mutation MBusinessHoursSubmit(\n    $branchId: ID!\n    $hours: [InputBusinessHourCreate!]!\n  ) {\n    createBusinessHours(companyBranch: $branchId, businessHours: $hours) {\n      ...FRegularBusinessHour\n    }\n  }\n\n  ${FRegularBusinessHourFragmentDoc}\n`\n\nexport function useMBusinessHoursSubmit(\n  baseOptions?: Hooks.MutationHookOptions<\n    MBusinessHoursSubmitMutation,\n    MBusinessHoursSubmitVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MBusinessHoursSubmitMutation,\n    MBusinessHoursSubmitVariables\n  >(MBusinessHoursSubmitDocument, baseOptions)\n}\n\nexport const QRegularBusinessHoursDocument = gql`\n  query QRegularBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId) {\n      ...FRegularBusinessHour\n    }\n    weekDays {\n      ...FWeekday\n    }\n  }\n\n  ${FRegularBusinessHourFragmentDoc}\n  ${FWeekdayFragmentDoc}\n`\n\nexport function useQRegularBusinessHours(\n  variables?: QRegularBusinessHoursVariables,\n  baseOptions?: Hooks.QueryHookOptions<QRegularBusinessHoursVariables>,\n) {\n  return Hooks.useQuery<\n    QRegularBusinessHoursQuery,\n    QRegularBusinessHoursVariables\n  >(QRegularBusinessHoursDocument, variables, baseOptions)\n}\n\nexport function useExecutableQRegularBusinessHours(\n  options?: Hooks.ExecutableQueryOptions<QRegularBusinessHoursVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QRegularBusinessHoursQuery,\n    QRegularBusinessHoursVariables\n  >(QRegularBusinessHoursDocument, options)\n}\n\nexport const MAddOrderPromoDocument = gql`\n  mutation MAddOrderPromo($orderId: ID!, $code: String!) {\n    addOrderPromoCode(order: $orderId, promoCode: $code) {\n      userErrors: errors\n      order {\n        ...FCreateOrder\n      }\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMAddOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddOrderPromoMutation,\n    MAddOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<MAddOrderPromoMutation, MAddOrderPromoVariables>(\n    MAddOrderPromoDocument,\n    baseOptions,\n  )\n}\n\nexport const MCancelOrderDocument = gql`\n  mutation MCancelOrder($orderId: ID!) {\n    addOrderState(order: $orderId, orderState: CANCELED) {\n      id\n      ...FOrderStateCategory\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useMCancelOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCancelOrderMutation,\n    MCancelOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MCancelOrderMutation, MCancelOrderVariables>(\n    MCancelOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderAcceptDocument = gql`\n  mutation MCreateOrderAccept(\n    $orderId: ID!\n    $customer: InputCustomerCreate!\n    $deliverAt: DateTime\n    $note: String\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        customer: $customer\n        note: $note\n        deliverAt: $deliverAt\n        paymentMethod: CASH\n        paymentGate: CASH\n      }\n    ) {\n      userErrors\n      order {\n        ...FCreateOrder\n      }\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderAccept(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >(MCreateOrderAcceptDocument, baseOptions)\n}\n\nexport const MCreateOrderAddRecipeDocument = gql`\n  mutation MCreateOrderAddRecipe(\n    $orderId: ID!\n    $recipeId: ID!\n    $sidedishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sidedishes\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderAddRecipe(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >(MCreateOrderAddRecipeDocument, baseOptions)\n}\n\nexport const MCreateOrderNewDocument = gql`\n  mutation MCreateOrderNew(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $callEventId: ID\n  ) {\n    createOrder(\n      order: {\n        companyBranch: $branchId\n        deliveryType: $deliveryType\n        callEventId: $callEventId\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: {}\n        warePriceType: DELIVERY\n        orderOrigin: STAFF\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderNew(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderNewMutation,\n    MCreateOrderNewVariables\n  >,\n) {\n  return Hooks.useMutation<MCreateOrderNewMutation, MCreateOrderNewVariables>(\n    MCreateOrderNewDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderRemoveItemDocument = gql`\n  mutation MCreateOrderRemoveItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderRemoveItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >(MCreateOrderRemoveItemDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateDocument = gql`\n  mutation MCreateOrderUpdate(\n    $orderId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $customer: InputCustomerCreate\n  ) {\n    updateOrder(\n      id: $orderId\n      order: {\n        deliveryType: $deliveryType\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: $customer\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >(MCreateOrderUpdateDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateItemDocument = gql`\n  mutation MCreateOrderUpdateItem($itemId: ID!, $sidedishes: [ID!]) {\n    updateOrderRecipe(id: $itemId, orderRecipe: { sideDishes: $sidedishes }) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderUpdateItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >(MCreateOrderUpdateItemDocument, baseOptions)\n}\n\nexport const MRemoveOrderPromoDocument = gql`\n  mutation MRemoveOrderPromo($orderId: ID!, $codeId: ID!) {\n    removeOrderPromoCode(order: $orderId, promoCode: $codeId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMRemoveOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >(MRemoveOrderPromoDocument, baseOptions)\n}\n\nexport const QCreateOrderItemDocument = gql`\n  query QCreateOrderItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...FCreateOrderRecipeSidedishes\n      }\n      selectedSidedishes: sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderItem(\n  variables?: QCreateOrderItemVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCreateOrderItemVariables>,\n) {\n  return Hooks.useQuery<QCreateOrderItemQuery, QCreateOrderItemVariables>(\n    QCreateOrderItemDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQCreateOrderItem(\n  options?: Hooks.ExecutableQueryOptions<QCreateOrderItemVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QCreateOrderItemQuery,\n    QCreateOrderItemVariables\n  >(QCreateOrderItemDocument, options)\n}\n\nexport const QCreateOrderRecipeDocument = gql`\n  query QCreateOrderRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...FCreateOrderRecipeSidedishes\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderRecipe(\n  variables?: QCreateOrderRecipeVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCreateOrderRecipeVariables>,\n) {\n  return Hooks.useQuery<QCreateOrderRecipeQuery, QCreateOrderRecipeVariables>(\n    QCreateOrderRecipeDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQCreateOrderRecipe(\n  options?: Hooks.ExecutableQueryOptions<QCreateOrderRecipeVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QCreateOrderRecipeQuery,\n    QCreateOrderRecipeVariables\n  >(QCreateOrderRecipeDocument, options)\n}\n\nexport const QOrderCartDocument = gql`\n  query QOrderCart($orderId: ID!) {\n    order(id: $orderId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useQOrderCart(\n  variables?: QOrderCartVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderCartVariables>,\n) {\n  return Hooks.useQuery<QOrderCartQuery, QOrderCartVariables>(\n    QOrderCartDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderCart(\n  options?: Hooks.ExecutableQueryOptions<QOrderCartVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderCartQuery, QOrderCartVariables>(\n    QOrderCartDocument,\n    options,\n  )\n}\n\nexport const QOrderFormDeliverAtDefaultsDocument = gql`\n  query QOrderFormDeliverAtDefaults($branchId: ID!) {\n    times: companyBranch(id: $branchId) {\n      id\n      deliveryTime: defaultDeliveryTime\n      pickupTime: defaultPickupTime\n    }\n  }\n`\n\nexport function useQOrderFormDeliverAtDefaults(\n  variables?: QOrderFormDeliverAtDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFormDeliverAtDefaultsVariables>,\n) {\n  return Hooks.useQuery<\n    QOrderFormDeliverAtDefaultsQuery,\n    QOrderFormDeliverAtDefaultsVariables\n  >(QOrderFormDeliverAtDefaultsDocument, variables, baseOptions)\n}\n\nexport function useExecutableQOrderFormDeliverAtDefaults(\n  options?: Hooks.ExecutableQueryOptions<QOrderFormDeliverAtDefaultsVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderFormDeliverAtDefaultsQuery,\n    QOrderFormDeliverAtDefaultsVariables\n  >(QOrderFormDeliverAtDefaultsDocument, options)\n}\n\nexport const QOrderMenuDocument = gql`\n  query QOrderMenu($branchId: ID!) {\n    orderMenu: wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n      orderOriginCategory: STAFF\n      enabled: true\n      isAvailable: true\n    ) {\n      ...FOrderMenuCategory\n    }\n  }\n\n  ${FOrderMenuCategoryFragmentDoc}\n`\n\nexport function useQOrderMenu(\n  variables?: QOrderMenuVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMenuVariables>,\n) {\n  return Hooks.useQuery<QOrderMenuQuery, QOrderMenuVariables>(\n    QOrderMenuDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderMenu(\n  options?: Hooks.ExecutableQueryOptions<QOrderMenuVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderMenuQuery, QOrderMenuVariables>(\n    QOrderMenuDocument,\n    options,\n  )\n}\n\nexport const QValidateLocationDocument = gql`\n  query QValidateLocation(\n    $branchId: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    resolveLocation(\n      companyBranch: $branchId\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      inDeliveryLocation\n      zone {\n        minimalOrderPrice {\n          formattedValue\n        }\n      }\n    }\n  }\n`\n\nexport function useQValidateLocation(\n  variables?: QValidateLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<QValidateLocationVariables>,\n) {\n  return Hooks.useQuery<QValidateLocationQuery, QValidateLocationVariables>(\n    QValidateLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQValidateLocation(\n  options?: Hooks.ExecutableQueryOptions<QValidateLocationVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QValidateLocationQuery,\n    QValidateLocationVariables\n  >(QValidateLocationDocument, options)\n}\n\nexport const MKitchenRecipeStateDocument = gql`\n  mutation MKitchenRecipeState($recipeId: ID!, $state: OrderRecipeStateEnum!) {\n    updateOrderRecipeState(id: $recipeId, orderRecipeState: $state) {\n      id\n      orderRecipeState {\n        enum\n      }\n      order {\n        id\n        orderStateCategory(target: FE_KITCHEN)\n      }\n    }\n  }\n`\n\nexport function useMKitchenRecipeState(\n  baseOptions?: Hooks.MutationHookOptions<\n    MKitchenRecipeStateMutation,\n    MKitchenRecipeStateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MKitchenRecipeStateMutation,\n    MKitchenRecipeStateVariables\n  >(MKitchenRecipeStateDocument, baseOptions)\n}\n\nexport const QKitchenCompletionOrderListDocument = gql`\n  query QKitchenCompletionOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoryTarget: FE_COMPLETION\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      ...FKitchenCompletionOrder\n    }\n  }\n\n  ${FKitchenCompletionOrderFragmentDoc}\n`\n\nexport function useQKitchenCompletionOrderList(\n  variables?: QKitchenCompletionOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QKitchenCompletionOrderListVariables>,\n) {\n  return Hooks.useQuery<\n    QKitchenCompletionOrderListQuery,\n    QKitchenCompletionOrderListVariables\n  >(QKitchenCompletionOrderListDocument, variables, baseOptions)\n}\n\nexport function useExecutableQKitchenCompletionOrderList(\n  options?: Hooks.ExecutableQueryOptions<QKitchenCompletionOrderListVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QKitchenCompletionOrderListQuery,\n    QKitchenCompletionOrderListVariables\n  >(QKitchenCompletionOrderListDocument, options)\n}\n\nexport const QKitchenOrderListDocument = gql`\n  query QKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoryTarget: FE_KITCHEN\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      ...FKitchenOrder\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useQKitchenOrderList(\n  variables?: QKitchenOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QKitchenOrderListVariables>,\n) {\n  return Hooks.useQuery<QKitchenOrderListQuery, QKitchenOrderListVariables>(\n    QKitchenOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQKitchenOrderList(\n  options?: Hooks.ExecutableQueryOptions<QKitchenOrderListVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QKitchenOrderListQuery,\n    QKitchenOrderListVariables\n  >(QKitchenOrderListDocument, options)\n}\n\nexport const SKitchenCompletionOrderListDocument = gql`\n  subscription SKitchenCompletionOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n      orderStateCategoryTarget: FE_COMPLETION\n    ) {\n      order {\n        ...FKitchenCompletionOrder\n      }\n    }\n  }\n\n  ${FKitchenCompletionOrderFragmentDoc}\n`\n\nexport function useSKitchenCompletionOrderList(\n  variables?: SKitchenCompletionOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SKitchenCompletionOrderListSubscription,\n    SKitchenCompletionOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SKitchenCompletionOrderListSubscription,\n    SKitchenCompletionOrderListVariables\n  >(SKitchenCompletionOrderListDocument, variables, baseOptions)\n}\n\nexport const SKitchenOrderListDocument = gql`\n  subscription SKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n      orderStateCategoryTarget: FE_KITCHEN\n    ) {\n      order {\n        ...FKitchenOrder\n      }\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useSKitchenOrderList(\n  variables?: SKitchenOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >(SKitchenOrderListDocument, variables, baseOptions)\n}\n\nexport const MPasswordChangeDocument = gql`\n  mutation MPasswordChange($password: String!) {\n    change: updateUserPassword(newPassword: $password) {\n      userId: id\n      newToken: token\n    }\n  }\n`\n\nexport function useMPasswordChange(\n  baseOptions?: Hooks.MutationHookOptions<\n    MPasswordChangeMutation,\n    MPasswordChangeVariables\n  >,\n) {\n  return Hooks.useMutation<MPasswordChangeMutation, MPasswordChangeVariables>(\n    MPasswordChangeDocument,\n    baseOptions,\n  )\n}\n\nexport const QUserBootstrapDocument = gql`\n  query QUserBootstrap($userId: ID!) {\n    user(id: $userId) {\n      id\n      firstName\n      lastName\n      language {\n        rawCode\n      }\n      roles {\n        id\n        name\n      }\n      branches: accessibleBranches {\n        ...FCompanyBranch\n      }\n    }\n    permissions: permissions {\n      canCancelOrders\n      canCreateOrder\n    }\n    access: __schema {\n      queries: queryType {\n        fields {\n          name\n        }\n      }\n      mutations: mutationType {\n        fields {\n          name\n        }\n      }\n      subscriptions: subscriptionType {\n        fields {\n          name\n        }\n      }\n    }\n  }\n\n  ${FCompanyBranchFragmentDoc}\n`\n\nexport function useQUserBootstrap(\n  variables?: QUserBootstrapVariables,\n  baseOptions?: Hooks.QueryHookOptions<QUserBootstrapVariables>,\n) {\n  return Hooks.useQuery<QUserBootstrapQuery, QUserBootstrapVariables>(\n    QUserBootstrapDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQUserBootstrap(\n  options?: Hooks.ExecutableQueryOptions<QUserBootstrapVariables>,\n) {\n  return Hooks.useExecutableQuery<QUserBootstrapQuery, QUserBootstrapVariables>(\n    QUserBootstrapDocument,\n    options,\n  )\n}\n\nexport const SOrderCallDocument = gql`\n  subscription SOrderCall {\n    call: updatedUserCallingCustomer {\n      eventId\n      phone\n      prefix\n      isRinging\n    }\n  }\n`\n\nexport function useSOrderCall(\n  variables?: SOrderCallVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderCallSubscription,\n    SOrderCallVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderCallSubscription, SOrderCallVariables>(\n    SOrderCallDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MCreateTransfersDocument = gql`\n  mutation MCreateTransfers(\n    $targetBranch: ID!\n    $transfers: [InputStockTransferCreate!]!\n  ) {\n    createStockItemTransfers(\n      destinationBranchId: $targetBranch\n      transfers: $transfers\n    ) {\n      id\n      quantity\n    }\n  }\n`\n\nexport function useMCreateTransfers(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateTransfersMutation,\n    MCreateTransfersVariables\n  >,\n) {\n  return Hooks.useMutation<MCreateTransfersMutation, MCreateTransfersVariables>(\n    MCreateTransfersDocument,\n    baseOptions,\n  )\n}\n\nexport const MMenuCategoryVisibilityDocument = gql`\n  mutation MMenuCategoryVisibility($categoryId: ID!, $visible: Boolean!) {\n    updateWareCategory(id: $categoryId, wareCategory: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useMMenuCategoryVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >(MMenuCategoryVisibilityDocument, baseOptions)\n}\n\nexport const MMenuStockQuantityDocument = gql`\n  mutation MMenuStockQuantity($stockItem: ID!, $quantityChange: Float!) {\n    changeAmountStockItem(id: $stockItem, amountOffset: $quantityChange) {\n      id\n      quantity\n    }\n  }\n`\n\nexport function useMMenuStockQuantity(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >(MMenuStockQuantityDocument, baseOptions)\n}\n\nexport const QMenuCategoryDocument = gql`\n  query QMenuCategory($categoryId: ID!) {\n    category: wareCategory(id: $categoryId) {\n      ...FMenuCategory\n    }\n  }\n\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport function useQMenuCategory(\n  variables?: QMenuCategoryVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryQuery, QMenuCategoryVariables>(\n    QMenuCategoryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuCategory(\n  options?: Hooks.ExecutableQueryOptions<QMenuCategoryVariables>,\n) {\n  return Hooks.useExecutableQuery<QMenuCategoryQuery, QMenuCategoryVariables>(\n    QMenuCategoryDocument,\n    options,\n  )\n}\n\nexport const QMenuCategoryFilterDocument = gql`\n  query QMenuCategoryFilter($branchId: ID!) {\n    categories: wareCategories(companyBranch: $branchId) {\n      id\n      nameLabel\n      countRecipes\n      categoryType: wareCategoryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useQMenuCategoryFilter(\n  variables?: QMenuCategoryFilterVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryFilterVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryFilterQuery, QMenuCategoryFilterVariables>(\n    QMenuCategoryFilterDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuCategoryFilter(\n  options?: Hooks.ExecutableQueryOptions<QMenuCategoryFilterVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuCategoryFilterQuery,\n    QMenuCategoryFilterVariables\n  >(QMenuCategoryFilterDocument, options)\n}\n\nexport const QMenuCategoryListDocument = gql`\n  query QMenuCategoryList(\n    $branchId: ID!\n    $categoryType: WareCategoryTypeEnum!\n  ) {\n    categories: wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: $categoryType\n    ) {\n      ...FMenuCategoryListItem\n    }\n  }\n\n  ${FMenuCategoryListItemFragmentDoc}\n`\n\nexport function useQMenuCategoryList(\n  variables?: QMenuCategoryListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryListVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryListQuery, QMenuCategoryListVariables>(\n    QMenuCategoryListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuCategoryList(\n  options?: Hooks.ExecutableQueryOptions<QMenuCategoryListVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuCategoryListQuery,\n    QMenuCategoryListVariables\n  >(QMenuCategoryListDocument, options)\n}\n\nexport const QMenuCategoryOriginsDocument = gql`\n  query QMenuCategoryOrigins {\n    origins: orderOriginCategories {\n      enum\n      code\n    }\n  }\n`\n\nexport function useQMenuCategoryOrigins(\n  variables?: QMenuCategoryOriginsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryOriginsVariables>,\n) {\n  return Hooks.useQuery<\n    QMenuCategoryOriginsQuery,\n    QMenuCategoryOriginsVariables\n  >(QMenuCategoryOriginsDocument, variables, baseOptions)\n}\n\nexport function useExecutableQMenuCategoryOrigins(\n  options?: Hooks.ExecutableQueryOptions<QMenuCategoryOriginsVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuCategoryOriginsQuery,\n    QMenuCategoryOriginsVariables\n  >(QMenuCategoryOriginsDocument, options)\n}\n\nexport const QMenuGuideDownloadDocument = gql`\n  query QMenuGuideDownload($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      foodMenuUrl\n    }\n  }\n`\n\nexport function useQMenuGuideDownload(\n  variables?: QMenuGuideDownloadVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuGuideDownloadVariables>,\n) {\n  return Hooks.useQuery<QMenuGuideDownloadQuery, QMenuGuideDownloadVariables>(\n    QMenuGuideDownloadDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuGuideDownload(\n  options?: Hooks.ExecutableQueryOptions<QMenuGuideDownloadVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuGuideDownloadQuery,\n    QMenuGuideDownloadVariables\n  >(QMenuGuideDownloadDocument, options)\n}\n\nexport const QMenuRecipeListDocument = gql`\n  query QMenuRecipeList(\n    $branchId: ID!\n    $categoryId: ID\n    $categoryType: WareCategoryTypeEnum\n  ) {\n    recipes(\n      companyBranch: $branchId\n      wareCategory: $categoryId\n      wareCategoryType: $categoryType\n    ) {\n      ...FMenuRecipe\n    }\n  }\n\n  ${FMenuRecipeFragmentDoc}\n`\n\nexport function useQMenuRecipeList(\n  variables?: QMenuRecipeListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuRecipeListVariables>,\n) {\n  return Hooks.useQuery<QMenuRecipeListQuery, QMenuRecipeListVariables>(\n    QMenuRecipeListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuRecipeList(\n  options?: Hooks.ExecutableQueryOptions<QMenuRecipeListVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuRecipeListQuery,\n    QMenuRecipeListVariables\n  >(QMenuRecipeListDocument, options)\n}\n\nexport const QMenuStockDepositDocument = gql`\n  query QMenuStockDeposit($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      id\n      code\n      plu\n      nameLabel: label\n      note\n      quantity\n      wareUnit {\n        ...FMenuWareUnit\n      }\n    }\n  }\n\n  ${FMenuWareUnitFragmentDoc}\n`\n\nexport function useQMenuStockDeposit(\n  variables?: QMenuStockDepositVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuStockDepositVariables>,\n) {\n  return Hooks.useQuery<QMenuStockDepositQuery, QMenuStockDepositVariables>(\n    QMenuStockDepositDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuStockDeposit(\n  options?: Hooks.ExecutableQueryOptions<QMenuStockDepositVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuStockDepositQuery,\n    QMenuStockDepositVariables\n  >(QMenuStockDepositDocument, options)\n}\n\nexport const QMenuStockListDocument = gql`\n  query QMenuStockList($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useQMenuStockList(\n  variables?: QMenuStockListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuStockListVariables>,\n) {\n  return Hooks.useQuery<QMenuStockListQuery, QMenuStockListVariables>(\n    QMenuStockListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuStockList(\n  options?: Hooks.ExecutableQueryOptions<QMenuStockListVariables>,\n) {\n  return Hooks.useExecutableQuery<QMenuStockListQuery, QMenuStockListVariables>(\n    QMenuStockListDocument,\n    options,\n  )\n}\n\nexport const QStockRecipesDocument = gql`\n  query QStockRecipes($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      ingredients {\n        id\n        recipe {\n          id\n          nameLabel\n          descriptionLabel\n          recipeType: wareCategoryType {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useQStockRecipes(\n  variables?: QStockRecipesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStockRecipesVariables>,\n) {\n  return Hooks.useQuery<QStockRecipesQuery, QStockRecipesVariables>(\n    QStockRecipesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQStockRecipes(\n  options?: Hooks.ExecutableQueryOptions<QStockRecipesVariables>,\n) {\n  return Hooks.useExecutableQuery<QStockRecipesQuery, QStockRecipesVariables>(\n    QStockRecipesDocument,\n    options,\n  )\n}\n\nexport const MBranchDefaultTimeDocument = gql`\n  mutation MBranchDefaultTime(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $time: Int!\n  ) {\n    updateDefaultOrderProcessTime(\n      companyBranch: $branchId\n      deliveryType: $deliveryType\n      defaultTime: $time\n    ) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useMBranchDefaultTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >(MBranchDefaultTimeDocument, baseOptions)\n}\n\nexport const MChangePaymentMethodDocument = gql`\n  mutation MChangePaymentMethod($orderId: ID!, $paymentMethodId: ID!) {\n    updateOrderPaymentMethod(\n      orderId: $orderId\n      paymentMethodId: $paymentMethodId\n    ) {\n      id\n      ...FPaymentMethods\n    }\n  }\n\n  ${FPaymentMethodsFragmentDoc}\n`\n\nexport function useMChangePaymentMethod(\n  baseOptions?: Hooks.MutationHookOptions<\n    MChangePaymentMethodMutation,\n    MChangePaymentMethodVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MChangePaymentMethodMutation,\n    MChangePaymentMethodVariables\n  >(MChangePaymentMethodDocument, baseOptions)\n}\n\nexport const MOrderChangeToPickupDocument = gql`\n  mutation MOrderChangeToPickup($orderId: ID!) {\n    updateOrderDeliveryToPickup(id: $orderId) {\n      id\n      deliveryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMOrderChangeToPickup(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderChangeToPickupMutation,\n    MOrderChangeToPickupVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderChangeToPickupMutation,\n    MOrderChangeToPickupVariables\n  >(MOrderChangeToPickupDocument, baseOptions)\n}\n\nexport const MOrderTimeNotificationDocument = gql`\n  mutation MOrderTimeNotification($orderId: ID!, $minutes: Int!) {\n    orderNotifyCustomer(id: $orderId, minutes: $minutes) {\n      id\n      deliverAt\n    }\n  }\n`\n\nexport function useMOrderTimeNotification(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderTimeNotificationMutation,\n    MOrderTimeNotificationVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderTimeNotificationMutation,\n    MOrderTimeNotificationVariables\n  >(MOrderTimeNotificationDocument, baseOptions)\n}\n\nexport const MRemoveOrderDriverDocument = gql`\n  mutation MRemoveOrderDriver($orderDriverId: ID!) {\n    destroyUserDeliveringOrder(id: $orderDriverId) {\n      order {\n        ...FOrderDriver\n      }\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useMRemoveOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderDriverMutation,\n    MRemoveOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderDriverMutation,\n    MRemoveOrderDriverVariables\n  >(MRemoveOrderDriverDocument, baseOptions)\n}\n\nexport const MSelectOrderDriverDocument = gql`\n  mutation MSelectOrderDriver($driverId: ID!, $orderId: ID!) {\n    result: createUserDeliveringOrder(user: $driverId, order: $orderId) {\n      order {\n        ...FOrderDriver\n      }\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useMSelectOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSelectOrderDriverMutation,\n    MSelectOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSelectOrderDriverMutation,\n    MSelectOrderDriverVariables\n  >(MSelectOrderDriverDocument, baseOptions)\n}\n\nexport const QBranchDefeaultTimesDocument = gql`\n  query QBranchDefeaultTimes($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useQBranchDefeaultTimes(\n  variables?: QBranchDefeaultTimesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QBranchDefeaultTimesVariables>,\n) {\n  return Hooks.useQuery<\n    QBranchDefeaultTimesQuery,\n    QBranchDefeaultTimesVariables\n  >(QBranchDefeaultTimesDocument, variables, baseOptions)\n}\n\nexport function useExecutableQBranchDefeaultTimes(\n  options?: Hooks.ExecutableQueryOptions<QBranchDefeaultTimesVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QBranchDefeaultTimesQuery,\n    QBranchDefeaultTimesVariables\n  >(QBranchDefeaultTimesDocument, options)\n}\n\nexport const QOrderDetailDocument = gql`\n  query QOrderDetail($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      createdAt\n      deliverAt\n      delayedDeliveryTime\n      companyBranch {\n        id\n      }\n      customer {\n        emails {\n          ...FEmail\n        }\n        phones {\n          ...FPhone\n        }\n      }\n      customerOrdersCountCurrent\n      customerOrdersCountTotal\n      note\n      previousNote\n      allAppliedRules\n      items {\n        ...FOrderDetailWare\n        sidedishes: sideDishes {\n          ...FOrderDetailWare\n        }\n      }\n      orderOrigin {\n        code\n        enum\n      }\n      ...FOrderTotals\n      ...FOrderTiming\n      ...FOrderDriver\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n  ${FOrderDetailWareFragmentDoc}\n  ${FOrderTotalsFragmentDoc}\n  ${FOrderTimingFragmentDoc}\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useQOrderDetail(\n  variables?: QOrderDetailVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderDetailVariables>,\n) {\n  return Hooks.useQuery<QOrderDetailQuery, QOrderDetailVariables>(\n    QOrderDetailDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderDetail(\n  options?: Hooks.ExecutableQueryOptions<QOrderDetailVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderDetailQuery, QOrderDetailVariables>(\n    QOrderDetailDocument,\n    options,\n  )\n}\n\nexport const QOrderDriversDocument = gql`\n  query QOrderDrivers($orderId: ID!, $branchId: [ID!]!) {\n    order(id: $orderId) {\n      ...FOrderDriver\n    }\n    drivers(companyBranches: $branchId, onlyAvailable: true) {\n      ...FDriver\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n  ${FDriverFragmentDoc}\n`\n\nexport function useQOrderDrivers(\n  variables?: QOrderDriversVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderDriversVariables>,\n) {\n  return Hooks.useQuery<QOrderDriversQuery, QOrderDriversVariables>(\n    QOrderDriversDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderDrivers(\n  options?: Hooks.ExecutableQueryOptions<QOrderDriversVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderDriversQuery, QOrderDriversVariables>(\n    QOrderDriversDocument,\n    options,\n  )\n}\n\nexport const QOrderListDocument = gql`\n  query QOrderList($branches: [ID!], $categories: [OrderStateCategoryEnum!]) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      id\n      ...FOrderStateCategory\n      ...FOrderTicker\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTickerFragmentDoc}\n`\n\nexport function useQOrderList(\n  variables?: QOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderListVariables>,\n) {\n  return Hooks.useQuery<QOrderListQuery, QOrderListVariables>(\n    QOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderList(\n  options?: Hooks.ExecutableQueryOptions<QOrderListVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderListQuery, QOrderListVariables>(\n    QOrderListDocument,\n    options,\n  )\n}\n\nexport const QOrderListCategoriesDocument = gql`\n  query QOrderListCategories {\n    categories: orderStateCategories {\n      label: code\n      enum\n    }\n  }\n`\n\nexport function useQOrderListCategories(\n  variables?: QOrderListCategoriesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderListCategoriesVariables>,\n) {\n  return Hooks.useQuery<\n    QOrderListCategoriesQuery,\n    QOrderListCategoriesVariables\n  >(QOrderListCategoriesDocument, variables, baseOptions)\n}\n\nexport function useExecutableQOrderListCategories(\n  options?: Hooks.ExecutableQueryOptions<QOrderListCategoriesVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderListCategoriesQuery,\n    QOrderListCategoriesVariables\n  >(QOrderListCategoriesDocument, options)\n}\n\nexport const QOrderMapDeliveriesDocument = gql`\n  query QOrderMapDeliveries($branches: [ID!]!) {\n    deliveries: drivers(companyBranches: $branches, onlyAvailable: true) {\n      ...FOrderMapDelivery\n    }\n  }\n\n  ${FOrderMapDeliveryFragmentDoc}\n`\n\nexport function useQOrderMapDeliveries(\n  variables?: QOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMapDeliveriesVariables>,\n) {\n  return Hooks.useQuery<QOrderMapDeliveriesQuery, QOrderMapDeliveriesVariables>(\n    QOrderMapDeliveriesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderMapDeliveries(\n  options?: Hooks.ExecutableQueryOptions<QOrderMapDeliveriesVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderMapDeliveriesQuery,\n    QOrderMapDeliveriesVariables\n  >(QOrderMapDeliveriesDocument, options)\n}\n\nexport const QOrderMapOrdersDocument = gql`\n  query QOrderMapOrders(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      ...FOrderMapOrder\n    }\n  }\n\n  ${FOrderMapOrderFragmentDoc}\n`\n\nexport function useQOrderMapOrders(\n  variables?: QOrderMapOrdersVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMapOrdersVariables>,\n) {\n  return Hooks.useQuery<QOrderMapOrdersQuery, QOrderMapOrdersVariables>(\n    QOrderMapOrdersDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderMapOrders(\n  options?: Hooks.ExecutableQueryOptions<QOrderMapOrdersVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderMapOrdersQuery,\n    QOrderMapOrdersVariables\n  >(QOrderMapOrdersDocument, options)\n}\n\nexport const QOrdersCategoryCountDocument = gql`\n  query QOrdersCategoryCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    ordersCategoryCount(\n      companyBranches: $branchesId\n      orderStateCategoriesOR: $categories\n    ) {\n      category: orderStateCategory {\n        enum\n      }\n      count: ordersCount\n    }\n  }\n`\n\nexport function useQOrdersCategoryCount(\n  variables?: QOrdersCategoryCountVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrdersCategoryCountVariables>,\n) {\n  return Hooks.useQuery<\n    QOrdersCategoryCountQuery,\n    QOrdersCategoryCountVariables\n  >(QOrdersCategoryCountDocument, variables, baseOptions)\n}\n\nexport function useExecutableQOrdersCategoryCount(\n  options?: Hooks.ExecutableQueryOptions<QOrdersCategoryCountVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrdersCategoryCountQuery,\n    QOrdersCategoryCountVariables\n  >(QOrdersCategoryCountDocument, options)\n}\n\nexport const QOrderStateDocument = gql`\n  query QOrderState($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      deliveryType {\n        enum\n      }\n      isCancelable\n      isPriority\n      ...FPaymentMethods\n      ...FOrderStateCategory\n    }\n    companyBranch(id: $branchId) {\n      id\n      allowedCategories\n    }\n  }\n\n  ${FPaymentMethodsFragmentDoc}\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useQOrderState(\n  variables?: QOrderStateVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderStateVariables>,\n) {\n  return Hooks.useQuery<QOrderStateQuery, QOrderStateVariables>(\n    QOrderStateDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderState(\n  options?: Hooks.ExecutableQueryOptions<QOrderStateVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderStateQuery, QOrderStateVariables>(\n    QOrderStateDocument,\n    options,\n  )\n}\n\nexport const SOrderListDocument = gql`\n  subscription SOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        id\n        ...FOrderStateCategory\n        ...FOrderTicker\n      }\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTickerFragmentDoc}\n`\n\nexport function useSOrderList(\n  variables?: SOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderListSubscription,\n    SOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderListSubscription, SOrderListVariables>(\n    SOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderMapDeliveriesDocument = gql`\n  subscription SOrderMapDeliveries($branches: [ID!]!) {\n    update: updatedTransportationDeviceUser(companyBranches: $branches) {\n      device: transportationDeviceUser {\n        ...FOrderMapDevice\n        user {\n          ...FOrderMapDriver\n        }\n      }\n    }\n  }\n\n  ${FOrderMapDeviceFragmentDoc}\n  ${FOrderMapDriverFragmentDoc}\n`\n\nexport function useSOrderMapDeliveries(\n  variables?: SOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >(SOrderMapDeliveriesDocument, variables, baseOptions)\n}\n\nexport const SOrderMapOrdersDocument = gql`\n  subscription SOrderMapOrders(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        ...FOrderMapOrder\n      }\n    }\n  }\n\n  ${FOrderMapOrderFragmentDoc}\n`\n\nexport function useSOrderMapOrders(\n  variables?: SOrderMapOrdersVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderMapOrdersSubscription,\n    SOrderMapOrdersVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrderMapOrdersSubscription,\n    SOrderMapOrdersVariables\n  >(SOrderMapOrdersDocument, variables, baseOptions)\n}\n\nexport const SOrdersCategoryCountDocument = gql`\n  subscription SOrdersCategoryCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    updatedCount: updatedOrderCategoryCount(\n      companyBranches: $branchesId\n      orderStateCategories: $categories\n    ) {\n      order {\n        id\n      }\n      nextCategory: newOrderStateCategory\n      prevCategory: oldOrderStateCategory\n    }\n  }\n`\n\nexport function useSOrdersCategoryCount(\n  variables?: SOrdersCategoryCountVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrdersCategoryCountSubscription,\n    SOrdersCategoryCountVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrdersCategoryCountSubscription,\n    SOrdersCategoryCountVariables\n  >(SOrdersCategoryCountDocument, variables, baseOptions)\n}\n\nexport const MFinancialReportCreateDocument = gql`\n  mutation MFinancialReportCreate($branchId: ID!) {\n    result: createFinancialReport(companyBranchId: $branchId) {\n      id\n    }\n  }\n`\n\nexport function useMFinancialReportCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MFinancialReportCreateMutation,\n    MFinancialReportCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MFinancialReportCreateMutation,\n    MFinancialReportCreateVariables\n  >(MFinancialReportCreateDocument, baseOptions)\n}\n\nexport const QAllDriversDocument = gql`\n  query QAllDrivers($branches: [ID!]!) {\n    drivers(companyBranches: $branches, onlyAvailable: false) {\n      ...FDriver\n    }\n  }\n\n  ${FDriverFragmentDoc}\n`\n\nexport function useQAllDrivers(\n  variables?: QAllDriversVariables,\n  baseOptions?: Hooks.QueryHookOptions<QAllDriversVariables>,\n) {\n  return Hooks.useQuery<QAllDriversQuery, QAllDriversVariables>(\n    QAllDriversDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQAllDrivers(\n  options?: Hooks.ExecutableQueryOptions<QAllDriversVariables>,\n) {\n  return Hooks.useExecutableQuery<QAllDriversQuery, QAllDriversVariables>(\n    QAllDriversDocument,\n    options,\n  )\n}\n\nexport const QClosureHistoryDocument = gql`\n  query QClosureHistory($branchId: ID!, $dateFrom: Date!, $dateTo: Date!) {\n    history: financialReports(\n      companyBranchId: $branchId\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n    ) {\n      id\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useQClosureHistory(\n  variables?: QClosureHistoryVariables,\n  baseOptions?: Hooks.QueryHookOptions<QClosureHistoryVariables>,\n) {\n  return Hooks.useQuery<QClosureHistoryQuery, QClosureHistoryVariables>(\n    QClosureHistoryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQClosureHistory(\n  options?: Hooks.ExecutableQueryOptions<QClosureHistoryVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QClosureHistoryQuery,\n    QClosureHistoryVariables\n  >(QClosureHistoryDocument, options)\n}\n\nexport const QClosureReportDocument = gql`\n  query QClosureReport($branchId: ID!, $reportId: ID!, $showReport: Boolean!) {\n    lastReport: lastFinancialReport(companyBranchId: $branchId)\n      @skip(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n    report: financialReport(report: $reportId) @include(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useQClosureReport(\n  variables?: QClosureReportVariables,\n  baseOptions?: Hooks.QueryHookOptions<QClosureReportVariables>,\n) {\n  return Hooks.useQuery<QClosureReportQuery, QClosureReportVariables>(\n    QClosureReportDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQClosureReport(\n  options?: Hooks.ExecutableQueryOptions<QClosureReportVariables>,\n) {\n  return Hooks.useExecutableQuery<QClosureReportQuery, QClosureReportVariables>(\n    QClosureReportDocument,\n    options,\n  )\n}\n\nexport const QStatsDailyDocument = gql`\n  query QStatsDaily($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      category: categoryStatisticsPlain\n      daily: dailyStatisticsPlain\n      delivery: deliveryStatisticsPlain\n      drivers: driversStatisticsPlain\n    }\n  }\n`\n\nexport function useQStatsDaily(\n  variables?: QStatsDailyVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsDailyVariables>,\n) {\n  return Hooks.useQuery<QStatsDailyQuery, QStatsDailyVariables>(\n    QStatsDailyDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQStatsDaily(\n  options?: Hooks.ExecutableQueryOptions<QStatsDailyVariables>,\n) {\n  return Hooks.useExecutableQuery<QStatsDailyQuery, QStatsDailyVariables>(\n    QStatsDailyDocument,\n    options,\n  )\n}\n\nexport const QStatsOrdersDocument = gql`\n  query QStatsOrders($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      finishedOrders {\n        fees {\n          ...FPriceWithCurrency\n        }\n        onlinePayments {\n          ...FPriceWithCurrency\n        }\n        total {\n          ...FPriceWithCurrency\n        }\n        finishedCount: ordersCount\n        cancelledCount: ordersCanceledCount\n      }\n      orderStatisticsPlain\n    }\n  }\n\n  ${FPriceWithCurrencyFragmentDoc}\n`\n\nexport function useQStatsOrders(\n  variables?: QStatsOrdersVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersQuery, QStatsOrdersVariables>(\n    QStatsOrdersDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQStatsOrders(\n  options?: Hooks.ExecutableQueryOptions<QStatsOrdersVariables>,\n) {\n  return Hooks.useExecutableQuery<QStatsOrdersQuery, QStatsOrdersVariables>(\n    QStatsOrdersDocument,\n    options,\n  )\n}\n\nexport const QStatsOrdersCountsDocument = gql`\n  query QStatsOrdersCounts($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      counts: finishedOrders {\n        finished: ordersCount\n        cancelled: ordersCanceledCount\n      }\n    }\n  }\n`\n\nexport function useQStatsOrdersCounts(\n  variables?: QStatsOrdersCountsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersCountsVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersCountsQuery, QStatsOrdersCountsVariables>(\n    QStatsOrdersCountsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQStatsOrdersCounts(\n  options?: Hooks.ExecutableQueryOptions<QStatsOrdersCountsVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QStatsOrdersCountsQuery,\n    QStatsOrdersCountsVariables\n  >(QStatsOrdersCountsDocument, options)\n}\n\nexport const QStatsOrdersListDocument = gql`\n  query QStatsOrdersList(\n    $filter: InputStatisticCreate!\n    $pagination: InputPaginationParams\n  ) {\n    stats: statistics(statisticsInput: $filter) {\n      orders: finishedOrders {\n        list: orders(includeCanceled: true, pagination: $pagination) {\n          ...FOrderTicker\n          ...FOrderStateCategory\n        }\n      }\n    }\n  }\n\n  ${FOrderTickerFragmentDoc}\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useQStatsOrdersList(\n  variables?: QStatsOrdersListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersListVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersListQuery, QStatsOrdersListVariables>(\n    QStatsOrdersListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQStatsOrdersList(\n  options?: Hooks.ExecutableQueryOptions<QStatsOrdersListVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QStatsOrdersListQuery,\n    QStatsOrdersListVariables\n  >(QStatsOrdersListDocument, options)\n}\n\nexport const QStockStatsDocument = gql`\n  query QStockStats($brandId: ID!) {\n    stockItems(company: $brandId) {\n      id\n      code\n      companyBranch {\n        id\n        name\n      }\n      plu\n      quantity\n      nameLabel: label\n      wareUnit {\n        id\n        code\n      }\n    }\n  }\n`\n\nexport function useQStockStats(\n  variables?: QStockStatsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStockStatsVariables>,\n) {\n  return Hooks.useQuery<QStockStatsQuery, QStockStatsVariables>(\n    QStockStatsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQStockStats(\n  options?: Hooks.ExecutableQueryOptions<QStockStatsVariables>,\n) {\n  return Hooks.useExecutableQuery<QStockStatsQuery, QStockStatsVariables>(\n    QStockStatsDocument,\n    options,\n  )\n}\n\nexport const MUserMenuLanguageDocument = gql`\n  mutation MUserMenuLanguage($userId: ID!, $lang: LanguageEnum!) {\n    updateUser(id: $userId, user: { language: $lang }) {\n      id\n      language {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMUserMenuLanguage(\n  baseOptions?: Hooks.MutationHookOptions<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >(MUserMenuLanguageDocument, baseOptions)\n}\n\nexport const QUserMenuLanguagesDocument = gql`\n  query QUserMenuLanguages {\n    languages {\n      code\n      enum\n      rawCode\n    }\n  }\n`\n\nexport function useQUserMenuLanguages(\n  variables?: QUserMenuLanguagesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QUserMenuLanguagesVariables>,\n) {\n  return Hooks.useQuery<QUserMenuLanguagesQuery, QUserMenuLanguagesVariables>(\n    QUserMenuLanguagesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQUserMenuLanguages(\n  options?: Hooks.ExecutableQueryOptions<QUserMenuLanguagesVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QUserMenuLanguagesQuery,\n    QUserMenuLanguagesVariables\n  >(QUserMenuLanguagesDocument, options)\n}\n\nexport const MZoneUpdateDocument = gql`\n  mutation MZoneUpdate($zoneId: ID!, $update: InputZoneUpdate!) {\n    updateZone(id: $zoneId, zone: $update) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useMZoneUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MZoneUpdateMutation,\n    MZoneUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<MZoneUpdateMutation, MZoneUpdateVariables>(\n    MZoneUpdateDocument,\n    baseOptions,\n  )\n}\n\n// Generated in 2019-07-16T12:50:25+02:00\n","import debug from 'debug'\n\n// @ts-ignore\ndebug.useColors = () => !process.env.REACT_APP_STAGE\n\nexport const logMain = debug('main')\nexport const logDebug = debug('debug')\nexport const logAuth = debug('auth')\nexport const logRouting = debug('routing')\nexport const logPersistence = debug('persistence')\nexport const logBootstrap = debug('bootstrap')\nexport const logAccess = debug('access')\nexport const logGraph = debug('graph')\nexport const logForm = debug('form')\nexport const logSentry = debug('sentry')\nexport const logLang = debug('lang')\nexport const logUpdate = debug('update')\nexport const logSound = debug('sound')\n// tslint:disable-next-line:no-console\nexport const logTest = console.log\n// tslint:disable-next-line:no-console\nexport const logError = console.error\n","import moment from 'moment'\n\nexport async function changeMomentLocale(lang: string) {\n  if (lang === 'en') {\n    moment.locale(lang)\n    return\n  }\n  const locale = await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"moment-[index]\" */\n    `moment/locale/${lang}`\n  )\n  moment.updateLocale(lang, locale)\n}\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { useReactionNow } from '@speedlo/hooks'\nimport { DETECTORS, LocaleResolver, TRANSFORMERS } from 'locales-detector'\nimport React from 'react'\n\nimport { useRoot } from './atoms/RootProvider'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\nimport { changeMomentLocale } from './locale/moment'\nimport { changeNumeralLocale } from './locale/numeral'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC = ({ children }) => {\n  const { user } = useRoot()\n  const [, forceUpdate] = React.useState(0)\n\n  useReactionNow(\n    () => user.language,\n    (lang = detectLanguage()) => {\n      setupLanguage(lang).then(success => {\n        if (success) {\n          user.log('setup for language %s done', lang)\n          forceUpdate(i => i + 1)\n        }\n      })\n    },\n  )\n\n  return (\n    <I18nProvider i18n={i18n}>{React.Children.only(children)}</I18nProvider>\n  )\n}\n\nexport function detectLanguage() {\n  const resolver = new LocaleResolver(\n    [new DETECTORS.NavigatorDetector()],\n    [new TRANSFORMERS.LanguageOnlyTransformer()],\n  )\n  const languages = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nfunction setupLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return Promise.resolve(false)\n  }\n  return Promise.all([\n    loadCatalog(lang),\n    changeNumeralLocale(lang),\n    changeMomentLocale(lang),\n  ]).then(() => {\n    i18n.activate(lang)\n    logLang('changed to %s', lang)\n    return true\n  })\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GSpecificBusinessHours } from '../../../graph/types'\n\nexport const SpecificBusinessHourFragment = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const QuerySpecificBusinessHours = buildQuery<\n  GSpecificBusinessHours.Query,\n  GSpecificBusinessHours.Variables\n>(gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`)\n","import gql from 'graphql-tag'\n\nimport { FGeoPointFragmentDoc } from '../../graph/generated'\n\nexport const ZoneLocationQuery = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...FGeoPoint\n        }\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n\nexport const ZoneBranchLocationQuery = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n\nexport const ZoneColorsQuery = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n","import React from 'react'\nimport { Route, RouteComponentProps, RouteProps } from 'react-router-dom'\n\ninterface IProps<Params> extends LegacyOmit<RouteProps, 'render' | 'children'> {\n  component: React.ComponentType<RouteComponentProps<Params>>\n}\n\nexport function LazyRoute<Params = {}>({\n  component: Component,\n  ...props\n}: IProps<Params>) {\n  return (\n    <Route {...props} render={routeProps => <Component {...routeProps} />} />\n  )\n}\n","module.exports = __webpack_public_path__ + \"static/media/connectionWarning.ac6fe03b.mp3\";","import { ISetDidChange, Lambda, observable } from 'mobx'\nimport { getParent, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { scroller } from 'react-scroll'\n\nimport { OrderStateCategoryEnum } from '../../../graph/generated'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TOrderModel } from './OrderModel'\n\nexport const OrderListModel = BaseModel.named('OrderList')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    collapsedCategories: types.optional(types.array(types.string), [\n      OrderStateCategoryEnum.Finished,\n    ]),\n  })\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length ? Array.from(self.branches) : []\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n    get isSingleBranchSelected() {\n      return self.branches.length === 1\n    },\n    get firstBranchId() {\n      if (self.branches.length === 1) {\n        return self.branches[0]\n      }\n      return null\n    },\n    get orderMap() {\n      return getParent<TOrderModel>(self).map\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.branches.clear()\n    },\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n  }))\n  .extend(self => {\n    const detailOpen = observable.set<ID>()\n\n    return {\n      views: {\n        isOrderDetailOpen(orderId: ID) {\n          return detailOpen.has(orderId)\n        },\n        isCategoryCollapsed(categoryCode: OrderStateCategoryEnum) {\n          return self.collapsedCategories.includes(categoryCode)\n        },\n      },\n      actions: {\n        toggleOrderDetail(orderId: ID) {\n          if (detailOpen.has(orderId)) {\n            detailOpen.delete(orderId)\n          } else {\n            detailOpen.add(orderId)\n          }\n        },\n        toggleCategoryCollapse(category: OrderStateCategoryEnum) {\n          const index = self.collapsedCategories.indexOf(category)\n          if (index >= 0) {\n            self.collapsedCategories.splice(index, 1)\n          } else {\n            self.collapsedCategories.push(category)\n          }\n        },\n        focusOrderDetail(orderId: ID) {\n          if (!detailOpen.has(orderId)) {\n            detailOpen.add(orderId)\n          }\n          setImmediate(() => {\n            scroller.scrollTo(`order-${orderId}`, {\n              smooth: 'easeInOutQuart',\n              containerId: 'order-list',\n              absolute: true,\n              offset: -140,\n            })\n          })\n        },\n        observerOrderDetail: detailOpen.observe.bind(detailOpen) as (\n          listener: (changes: ISetDidChange<ID>) => void,\n        ) => Lambda,\n      },\n    }\n  })\n\nexport interface TOrderListModel extends Instance<typeof OrderListModel> {}\nexport interface TOrderListModelProps\n  extends SnapshotIn<typeof OrderListModel> {}\n","module.exports = __webpack_public_path__ + \"static/media/loader.533cace4.gif\";","module.exports = __webpack_public_path__ + \"static/media/bg_antracit.edb33205.jpg\";","import React from 'react'\nimport ReactResponsive from 'react-responsive'\nimport { css } from 'styled-components/macro'\n\nexport const mobileBreakpoint = 600\nexport const mobileSmallBreakpoint = 375\n\nexport const Desktop = props => (\n  <ReactResponsive {...props} minWidth={mobileBreakpoint} />\n)\nexport const Mobile = props => (\n  <ReactResponsive {...props} maxWidth={mobileBreakpoint} />\n)\n\nexport const mediaMobile = (...args) => css`\n  @media (max-width: ${mobileBreakpoint / 16}em) {\n    // @ts-ignore\n    ${css(...args)}\n  }\n`\nexport const mediaSmallMobile = (...args) => css`\n  @media (max-width: ${mobileSmallBreakpoint / 16}em) {\n    // @ts-ignore\n    ${css(...args)}\n  }\n`\nexport const mediaDesktop = (...args) => css`\n  @media (min-width: ${mobileBreakpoint / 16}em) {\n    // @ts-ignore\n    ${css(...args)}\n  }\n`\n","import { createContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const RootContext = createContext<TRootModel | undefined>(undefined)\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersistence } from './logger'\n\nconst persistenceKey = appConfig.persistenceKey\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = (snapshot: object) =>\n    localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersistence('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersistence('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersistence('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { Sentry } from '@speedlo/sentry'\nimport { getParent, Instance } from 'mobx-state-tree'\n\nimport { appConfig } from '../../../config'\nimport { i18n } from '../../../i18n'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TLoginProviderModel } from './LoginProviderModel'\n\nconst getLoginUrl = ({ username, password }: Dictionary<string>) =>\n  `${appConfig.endpoint}/users/token?username=${username}&password=${password}`\n\nexport const PasswordLoginModel = BaseModel.named('PasswordLogin')\n  .volatile(() => ({\n    errorCode: '',\n    errorMessage: '',\n  }))\n  .views(self => ({\n    get hasFailed() {\n      return Boolean(self.errorCode)\n    },\n  }))\n  .actions(self => ({\n    setFailure(code: string, message: string) {\n      self.errorCode = code\n      self.errorMessage = message\n    },\n    setSuccess(token: string, userId: string) {\n      const provider = getParent<TLoginProviderModel>(self)\n      provider.authenticate(token, userId)\n    },\n  }))\n  .actions(self => ({\n    async requestToken(username: string, password: string) {\n      const url = getLoginUrl({ username, password })\n      const fetch: TFetch = window.fetch\n      try {\n        const response = await fetch(url, {\n          headers: {\n            Accept: 'application/json',\n          },\n        })\n        const payload = await response.json()\n        self.log('received payload %j', payload)\n\n        if (response.status !== 200) {\n          self.setFailure(payload.code, payload.error)\n          self.log('token request failed for username %s', username)\n        } else {\n          self.setSuccess(payload.token, String(payload.userId))\n          self.log(\n            'token request success for username %s [%s]',\n            username,\n            payload.userId,\n          )\n        }\n      } catch (err) {\n        self.setFailure(\n          'FAIL',\n          i18n.t`Cannot login right now, please try again later`,\n        )\n        Sentry.withScope(scope => {\n          scope.setExtra('username', username)\n          scope.setLevel(Sentry.Severity.Debug)\n          Sentry.captureException(err)\n        })\n      }\n    },\n  }))\n\nexport interface TPasswordLoginModel\n  extends Instance<typeof PasswordLoginModel> {}\n","import { getParent, Instance, types } from 'mobx-state-tree'\n\nimport { TAuthModel } from '../../../models/AuthModel'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { PasswordLoginModel } from './PasswordLoginModel'\n\nexport const LoginProviderModel = BaseModel.named('LoginProvider')\n  .props({\n    passwordLogin: types.optional(PasswordLoginModel, {}),\n  })\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      const auth = getParent<TAuthModel>(self)\n      auth.authenticate(token, userId)\n    },\n  }))\n\nexport interface TLoginProviderModel\n  extends Instance<typeof LoginProviderModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { LoginProviderModel } from '../segments/login/models/LoginProviderModel'\nimport { BaseModel } from './BaseModel'\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    userId: types.optional(types.string, ''),\n    token: types.optional(types.string, ''),\n    provider: types.optional(LoginProviderModel, {}),\n  })\n  .views(self => ({\n    get isAuthenticated() {\n      return self.token.length > 0\n    },\n    get isAuthenticatedUser() {\n      return this.isAuthenticated && self.userId.length > 0\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      self.log('authenticated with id %s', userId)\n    },\n    invalidate() {\n      self.token = ''\n      self.userId = ''\n      if (self.client) {\n        self.client.cache.reset()\n      }\n      self.log('invalidated authentication')\n    },\n  }))\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { BaseModel } from '../models/BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  soundEnabled: true,\n  orderListPollIntervalSec: 60,\n  orderListSoundIntervalSec: 60,\n})\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\n\nimport {\n  FCompanyBranchBrand,\n  FCompanyBranchFragment,\n  QUserBootstrapAccess,\n  QUserBootstrapFields,\n  QUserBootstrapPermissions,\n  QUserBootstrapUser,\n} from '../graph/generated'\nimport { RM } from '../helpers/ramda'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  isLoaded: boolean\n  branches: ReadonlyArray<FCompanyBranchFragment>\n  brands: ReadonlyArray<FCompanyBranchBrand>\n  soundEnabled: boolean\n  access: Maybe<IUserAccess>\n  permissions: QUserBootstrapPermissions\n}\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    language: types.maybe(types.string),\n    soundVolume: types.optional(types.number, 25),\n    soundIgnore: false,\n  })\n  .volatile<IVolatileProps>(() => ({\n    isLoaded: false,\n    branches: [],\n    brands: [],\n    soundEnabled: false,\n    access: null,\n    permissions: {\n      canCancelOrders: false,\n      canCreateOrder: false,\n    },\n  }))\n  .views(self => ({\n    get branchesId() {\n      return self.branches.map(R.prop('id'))\n    },\n    get defaultBranch() {\n      if (self.branches.length === 0) {\n        throw new Error('No user branches available to get defaultBranchId')\n      }\n      return self.branches[0]\n    },\n    get hasSingleBranch() {\n      return self.branches.length === 1\n    },\n    filterBranches(predicate: (value: FCompanyBranchFragment) => boolean) {\n      return self.branches.filter(predicate)\n    },\n    canQuery(queryName: string) {\n      return (\n        self.access !== null && self.access.queries.has(queryName.toLowerCase())\n      )\n    },\n    canMutate(mutationName: string) {\n      return (\n        self.access !== null &&\n        self.access.mutations.has(mutationName.toLowerCase())\n      )\n    },\n    get isReady() {\n      return self.isLoaded || !self.root.auth.isAuthenticated\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.isLoaded = false\n      self.branches = []\n      self.brands = []\n      self.access = null\n    },\n    applyUserData(user: QUserBootstrapUser) {\n      self.language = user.language.rawCode\n      self.branches = user.branches\n      self.brands = RM.uniqBy(\n        RM.prop('id'),\n        user.branches.map(RM.prop('brand')),\n      )\n    },\n    applyPermissions(permissions: QUserBootstrapPermissions) {\n      self.permissions = permissions\n    },\n    applyAccess(access: QUserBootstrapAccess) {\n      const makeSet = (fields: ReadonlyArray<QUserBootstrapFields>) =>\n        new Set(\n          fields.map(\n            RM.compose(\n              RM.toLower,\n              RM.prop('name'),\n            ),\n          ),\n        )\n\n      self.access = {\n        queries: makeSet(access.queries.fields ? access.queries.fields : []),\n        mutations: makeSet(\n          access.mutations && access.mutations.fields\n            ? access.mutations.fields\n            : [],\n        ),\n        subscriptions: makeSet(\n          access.subscriptions && access.subscriptions.fields\n            ? access.subscriptions.fields\n            : [],\n        ),\n      }\n    },\n    finishBootstrap() {\n      self.isLoaded = true\n    },\n    setLanguage(lang: string) {\n      self.language = lang\n    },\n    controlSound(enabled: boolean = true, ignore: boolean = false) {\n      self.soundEnabled = enabled\n      self.soundIgnore = ignore\n    },\n    setSoundVolume(volume: number) {\n      self.soundVolume = volume\n    },\n  }))\n\ninterface IUserAccess {\n  queries: Set<string>\n  mutations: Set<string>\n  subscriptions: Set<string>\n}\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import { fakerCZ } from '@speedlo/testing/dist/faker'\n\nexport const faker = fakerCZ\n","import { isoDate } from '@speedlo/graphql'\nimport { startOfMinute } from 'date-fns'\nimport _ from 'lodash'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { ISuggestion } from '../../../components/AddressSuggest'\nimport {\n  DeliveryTypeEnum,\n  MCreateOrderAcceptVariables,\n  MCreateOrderNewVariables,\n  MCreateOrderUpdateVariables,\n} from '../../../graph/generated'\nimport { GOrderVam, SOrderCall } from '../../../graph/types'\nimport { faker } from '../../../helpers/faker'\nimport { formatAddress } from '../../../helpers/formats'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\n\nexport interface IOrderSidedishControlResult {\n  sidedishes: ReadonlyArray<ID>\n  isConfirmed: boolean\n}\n\nexport interface ICall\n  extends LegacyOmit<SOrderCall.Call, 'isRinging' | 'eventId'> {\n  eventId?: ID\n}\n\nexport interface IOrderFormValues {\n  deliveryType: DeliveryTypeEnum.Messenger | DeliveryTypeEnum.Pickup\n  deliverAt?: Date\n  phone?: string\n  phonePrefix?: string\n  firstName?: string\n  lastName?: string\n  email?: string\n  note?: string\n}\n\ninterface IVolatileProps {\n  orderId: MaybeID\n  call?: ICall\n  deliveryAddress?: ISuggestion\n  deliveryMinutes?: number\n  minimalPrice?: string\n  notDeliveryLocation: boolean\n  values: IOrderFormValues\n  fakeValues?: Partial<IOrderFormValues>\n  fakeAddress?: ISuggestion\n  vamCustomer: Maybe<GOrderVam.VamCustomer>\n  sidedishMode: 'none' | 'recipe' | 'item'\n  sidedishRootId?: ID\n  sidedishSelection?: ReadonlyArray<ID>\n}\n\nexport const CreateOrderModel = BaseModel.named('CreateOrder')\n  .props({\n    branchId: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(getDefaultProps)\n  .actions(self => ({\n    invalidate() {\n      self.branchId = undefined\n      Object.assign(self, getDefaultProps())\n    },\n  }))\n  .views(self => ({\n    get currentBranch() {\n      return (\n        self.root.user.branches.find(RM.propEq('id', self.branchId)) ||\n        self.root.user.defaultBranch\n      )\n    },\n  }))\n  .views(self => ({\n    get deliveryType() {\n      return self.values.deliveryType\n    },\n    get isDelivery() {\n      return self.values.deliveryType === DeliveryTypeEnum.Messenger\n    },\n    get deliverAt() {\n      return (self.values.deliverAt && new Date(self.values.deliverAt)) || null\n    },\n    get deliverAtIso() {\n      return (this.deliverAt && isoDate(startOfMinute(this.deliverAt))) || null\n    },\n    get hasAddress() {\n      return Boolean(self.deliveryAddress || self.fakeAddress)\n    },\n    get gps() {\n      if (this.isDelivery && this.hasAddress) {\n        if (self.deliveryAddress && self.deliveryAddress.gps) {\n          return clearGps(self.deliveryAddress.gps)\n        } else if (self.fakeAddress && self.fakeAddress.gps) {\n          return clearGps(self.fakeAddress.gps)\n        }\n      }\n      return { ...clearGps(self.currentBranch.gps) }\n    },\n    get phone() {\n      if (self.values.phone !== undefined) {\n        return self.values.phone\n      }\n      return self.call ? self.call.phone : ''\n    },\n    get phonePrefix() {\n      if (self.values.phonePrefix !== undefined) {\n        return self.values.phonePrefix\n      }\n      if (self.call) {\n        return self.call.prefix\n      }\n      if (self.currentBranch.address.country) {\n        return self.currentBranch.address.country.phonePrefix\n      }\n      return '+'\n    },\n    get customer() {\n      const formValues = this.formValues as IOrderFormValues\n      return {\n        firstName: formValues.firstName,\n        lastName: formValues.lastName,\n        emails: formValues.email ? [{ email: formValues.email }] : null,\n        phones: formValues.phone\n          ? [\n              {\n                phone: `${formValues.phonePrefix}${formValues.phone}`,\n              },\n            ]\n          : null,\n      }\n    },\n    get formValues() {\n      if (self.vamCustomer !== null && self.vamCustomer.isFound) {\n        const { firstName, lastName, email, lastOrder } = self.vamCustomer\n        return _.defaults(\n          { ...self.values },\n          {\n            phone: this.phone,\n            phonePrefix: this.phonePrefix,\n            firstName,\n            lastName,\n            email,\n            note: (lastOrder && lastOrder.note) || '',\n          },\n        )\n      }\n      if (self.fakeValues) {\n        return _.defaults({ ...self.values }, { ...self.fakeValues })\n      }\n      return _.defaults(\n        { ...self.values },\n        { phone: this.phone, phonePrefix: this.phonePrefix },\n      )\n    },\n    get hasOrder() {\n      return self.orderId !== null\n    },\n  }))\n  .views(self => ({\n    get createOrderVariables(): MCreateOrderNewVariables {\n      return {\n        branchId: self.currentBranch.id,\n        deliveryType: self.values.deliveryType,\n        deliverAt: self.deliverAtIso,\n        callEventId: self.call && self.call.eventId,\n        gps: self.gps,\n      }\n    },\n    get updateOrderVariables(): MCreateOrderUpdateVariables {\n      return {\n        orderId: self.orderId!,\n        deliveryType: self.deliveryType,\n        deliverAt: self.deliverAtIso,\n        customer: self.customer,\n        gps: self.gps,\n      }\n    },\n    get acceptOrderVariables(): MCreateOrderAcceptVariables {\n      return {\n        orderId: self.orderId!,\n        customer: self.customer,\n        deliverAt: self.deliverAtIso,\n        note: self.formValues.note,\n      }\n    },\n  }))\n  .actions(self => ({\n    resetOrder() {\n      self.orderId = null\n    },\n    resetModel() {\n      Object.assign(self, getDefaultProps())\n    },\n    setOrder(orderId: ID) {\n      self.orderId = orderId\n      return orderId\n    },\n  }))\n  .actions(self => ({\n    useLocation(address: ISuggestion) {\n      self.deliveryAddress = address\n    },\n    clearLocation() {\n      self.deliveryAddress = undefined\n    },\n    setMinimalPrice(price: string | undefined) {\n      self.minimalPrice = price\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    userIsCalling(call: ICall | undefined) {\n      self.call = call\n    },\n    setDeliveryMinutes(minutes: number | undefined) {\n      self.deliveryMinutes = minutes\n    },\n    updateFormValues(\n      values: IOrderFormValues,\n      touched: { [K in keyof IOrderFormValues]?: boolean },\n    ) {\n      self.values = {\n        deliveryType: values.deliveryType,\n        ..._.pick(values, Object.keys(touched)),\n        deliverAt: values.deliverAt,\n      }\n      self.log('updated values: %j', self.values)\n    },\n    updateFromVam(vamCustomer: Maybe<GOrderVam.VamCustomer>) {\n      self.vamCustomer = vamCustomer\n      self.log('vam customer: %j', vamCustomer)\n    },\n    updateFormWithFakeValues() {\n      self.fakeValues = {\n        firstName: faker.name.firstName(),\n        lastName: faker.name.lastName(),\n        email: faker.internet.email(),\n        phone: faker.phone.phoneNumberFormat(3).replace(/\\s/g, ''),\n        phonePrefix: '+420',\n        note: faker.lorem.sentence().slice(0, 50 - 1),\n      }\n      self.fakeAddress = {\n        address: formatAddress({\n          city: 'Hradec Králové',\n          street: 'Opletalova',\n          houseNumber: '334/2',\n          state: '',\n        }),\n        gps: {\n          latitude: 50.2129839,\n          longitude: 15.8342836,\n        },\n      }\n    },\n  }))\n  .actions(self => {\n    let resolver: Maybe<(result: IOrderSidedishControlResult) => void> = null\n    const makeResolver = () => {\n      return new Promise<IOrderSidedishControlResult>(resolve => {\n        resolver = resolve\n      })\n    }\n    return {\n      selectSidedishesForRecipe(recipeId: ID) {\n        self.sidedishMode = 'recipe'\n        self.sidedishRootId = recipeId\n        return makeResolver()\n      },\n      selectSidedishesForItem(itemId: ID) {\n        self.sidedishMode = 'item'\n        self.sidedishRootId = itemId\n        return makeResolver()\n      },\n      sidedishSelectionConfirmed(sidedishes: ReadonlyArray<ID>) {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: true,\n            sidedishes,\n          })\n          resolver = null\n        }\n      },\n      sidedishSelectionCancel() {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: false,\n            sidedishes: [],\n          })\n          resolver = null\n        }\n      },\n    }\n  })\n\nfunction getDefaultProps(): IVolatileProps {\n  return {\n    orderId: null,\n    call: undefined,\n    values: {\n      deliveryType: DeliveryTypeEnum.Messenger,\n      deliverAt: undefined,\n      phone: undefined,\n      email: undefined,\n      firstName: undefined,\n      lastName: undefined,\n      note: undefined,\n    },\n    fakeAddress: undefined,\n    fakeValues: undefined,\n    deliveryAddress: undefined,\n    deliveryMinutes: undefined,\n    minimalPrice: undefined,\n    vamCustomer: null,\n    notDeliveryLocation: false,\n    sidedishMode: 'none',\n    sidedishRootId: undefined,\n    sidedishSelection: undefined,\n  }\n}\n\nfunction clearGps({ latitude, longitude }: GeoPoint) {\n  return { latitude, longitude }\n}\n\nexport interface TCreateOrderModel extends Instance<typeof CreateOrderModel> {}\nexport interface TCreateOrderModelProps\n  extends SnapshotIn<typeof CreateOrderModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { gpsToLatLngLit } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<google.maps.Map>\n}\n\nconst GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 12),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLngLit(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: google.maps.Map) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\n","import { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\n\ninterface IVolatileProps {\n  activeDriverId: MaybeID\n}\n\nexport const OrderMapModel = MapModel.named('OrderMap')\n  .volatile<IVolatileProps>(() => ({\n    activeDriverId: null,\n  }))\n  .actions(self => ({\n    activateDriver(driverId: ID, position: GeoPoint) {\n      self.activeDriverId = driverId\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(position))\n      }\n    },\n  }))\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { OrderListModel } from './OrderListModel'\nimport { OrderMapModel } from './OrderMapModel'\n\nexport const OrderModel = types\n  .model('Order', {\n    list: types.optional(OrderListModel, {}),\n    map: types.optional(OrderMapModel, {}),\n  })\n  .actions(self => ({\n    invalidate() {\n      self.list.clearBranchFilter()\n    },\n  }))\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\n","import { endOfDay, startOfDay } from 'date-fns'\nimport { types } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\n\nexport interface IStatisticsDateFilter {\n  dateTimeFrom: Date\n  dateTimeTo: Date\n}\n\ninterface IVolatileProps extends IStatisticsDateFilter {\n  stockSearchInput: string\n}\n\nexport const StatisticsModel = BaseModel.named('Statistics')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    drivers: types.optional(types.array(types.string), []),\n    closureBranch: types.maybeNull(types.string),\n    stockBrandId: types.maybeNull(types.string),\n  })\n  .volatile<IVolatileProps>(() => ({\n    dateTimeFrom: startOfDay(new Date()),\n    dateTimeTo: endOfDay(new Date()),\n    stockSearchInput: '',\n  }))\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length > 0\n        ? Array.from(self.branches)\n        : self.root.user.branchesId\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.branches.clear()\n      self.drivers.clear()\n      self.closureBranch = null\n    },\n    updateFilter(formValues: IStatisticsDateFilter) {\n      self.dateTimeFrom = new Date(formValues.dateTimeFrom)\n      self.dateTimeTo = new Date(formValues.dateTimeTo)\n    },\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    setDriversFilter(drivers: ID[]) {\n      self.drivers.replace(drivers)\n    },\n    setStockBrand(brandId: MaybeID) {\n      self.stockBrandId = brandId\n    },\n    setClosureBranch(branch: MaybeID) {\n      self.closureBranch = branch\n    },\n    setStockFilter(filter: string) {\n      self.stockSearchInput = filter\n    },\n    setTodayOrdersFilter() {\n      self.dateTimeFrom = startOfDay(new Date())\n      self.dateTimeTo = endOfDay(new Date())\n      self.branches.replace(self.root.order.list.branchesFilter)\n    },\n  }))\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TSettingsModel } from './SettingsModel'\n\nexport const SettingsBaseModel = BaseModel.named('SettingsBase').views(\n  self => ({\n    get settings() {\n      return getParent<TSettingsModel>(self)\n    },\n  }),\n)\n","export interface IQueryError extends Error {\n  showToUser: boolean\n}\n\nexport type TQueryErrors = IQueryError[] | null\n\n// tslint:disable-next-line:no-any\nexport const getQueryErrors = async (query: Promise<any>) => {\n  const result = await query\n  if (result && result.errors) {\n    return result.errors as IQueryError[]\n  }\n  return null\n}\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TMenuModel } from './MenuModel'\n\nexport const MenuBaseModel = BaseModel.named('MenuBase')\n  .volatile(() => ({\n    filterInput: '',\n  }))\n  .actions(self => ({\n    setFilterInput(input: string) {\n      self.filterInput = input\n    },\n  }))\n  .views(self => ({\n    get branchId() {\n      return getParent<TMenuModel>(self).settings.branchId\n    },\n  }))\n","import gql from 'graphql-tag'\n\nimport { FMenuCategoryFragmentDoc } from '../../../graph/generated'\n\nexport const SortMenuCategoryMutation = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport const MenuCategoryCreateMutation = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport const MenuCategoryUpdateMutation = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...FMenuCategory\n    }\n  }\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport const MenuCategoryDeleteMutation = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n","import { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  FMenuCategoryFragment,\n  OrderOriginCategoryEnum,\n  WareCategoryTypeEnum,\n} from '../../../graph/generated'\nimport {\n  GMenuCategoryCreate,\n  GMenuCategoryDelete,\n  GMenuCategoryUpdate,\n  GSortMenuCategory,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuCategoryCreateMutation,\n  MenuCategoryDeleteMutation,\n  MenuCategoryUpdateMutation,\n  SortMenuCategoryMutation,\n} from './MenuCategoryModel.graphql'\n\nexport interface TCategoryFormValues\n  extends LegacyOmit<FMenuCategoryFragment, 'origins'> {\n  origins: OrderOriginCategoryEnum[]\n}\n\nexport const MenuCategoryModel = MenuBaseModel.named('MenuCategory').actions(\n  self => ({\n    async sortCategory(categoryId: ID, offset: number) {\n      const variables: GSortMenuCategory.Variables = {\n        categoryId,\n        offset,\n      }\n      const result = await self.client.mutate({\n        mutation: SortMenuCategoryMutation,\n        variables,\n      })\n      return Boolean(result.data && result.data.success)\n    },\n    createCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryCreate.Variables = {\n        input: {\n          companyBranch: self.branchId,\n          wareCategoryType: categoryType,\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryCreateMutation,\n          variables,\n        }),\n      )\n    },\n    async updateCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryUpdate.Variables = {\n        categoryId: formValues.id,\n        input: {\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteCategory(categoryId: ID, categoryType: WareCategoryTypeEnum) {\n      const variables: GMenuCategoryDelete.Variables = {\n        categoryId,\n      }\n      await self.client.mutate({\n        mutation: MenuCategoryDeleteMutation,\n        variables,\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(\n  formValues: TCategoryFormValues,\n  categoryType: WareCategoryTypeEnum,\n) {\n  return Object.assign({\n    nameLabel: formValues.nameLabel,\n    internalNoteLabel: formValues.internalNoteLabel,\n    enabled: formValues.visible,\n    pictogram: formValues.pictogram,\n    recipes: formValues.recipes.map(RM.prop('id')),\n    minCount: formValues.minCount,\n    maxCount: formValues.maxCount,\n    orderOriginCategories: formValues.origins,\n  })\n}\n","import gql from 'graphql-tag'\n\nimport { FPriceFragmentDoc } from '../../../graph/generated'\n\nexport const MenuRecipeFragment = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n  ${FPriceFragmentDoc}\n`\n\nexport const MenuRecipeVisibilityMutation = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport const MenuRecipeCreateMutation = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeUpdateMutation = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeDeleteMutation = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n","import numeral from 'numeral'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  WareCategoryTypeEnum,\n  WarePriceTypeEnum,\n} from '../../../graph/generated'\nimport {\n  GMenuRecipeCreate,\n  GMenuRecipeDefaults,\n  GMenuRecipeDelete,\n  GMenuRecipeUpdate,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TRecipeFormValues } from '../menutypes'\nimport { MenuRecipeDefaults } from '../organisms/RecipeForm.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuRecipeCreateMutation,\n  MenuRecipeDeleteMutation,\n  MenuRecipeUpdateMutation,\n  MenuRecipeVisibilityMutation,\n} from './MenuRecipeModel.graphql'\n\nexport const MenuRecipeModel = MenuBaseModel.named('MenuRecipe')\n  .volatile(() => ({\n    categoryFilterId: null as MaybeID,\n  }))\n  .actions(self => ({\n    changeVisibility(recipeId: ID, visible: boolean) {\n      self.client.mutate({\n        mutation: MenuRecipeVisibilityMutation,\n        variables: { recipeId, visible },\n        optimisticResponse: {\n          updateRecipe: {\n            __typename: 'Recipe',\n            id: recipeId,\n            visible,\n          },\n        },\n      })\n    },\n    setCategoryFilter(categoryId: MaybeID) {\n      self.categoryFilterId = categoryId\n    },\n    createRecipe(\n      formValues: TRecipeFormValues,\n      recipeType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuRecipeCreate.Variables = {\n        recipe: {\n          companyBranch: self.branchId,\n          wareCategoryType: recipeType,\n          ...getRecipeVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeCreateMutation,\n          variables,\n        }),\n      )\n    },\n    updateRecipe(formValues: TRecipeFormValues) {\n      const variables: GMenuRecipeUpdate.Variables = {\n        recipeId: formValues.id,\n        recipe: {\n          ...getRecipeVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteRecipe(recipeId: ID) {\n      const variables: GMenuRecipeDelete.Variables = {\n        recipeId,\n      }\n      await self.client.mutate({\n        mutation: MenuRecipeDeleteMutation,\n        variables,\n      })\n    },\n    async queryDefaults() {\n      const { data } = await self.client.query<GMenuRecipeDefaults.Query>({\n        query: MenuRecipeDefaults,\n        variables: { branchId: self.branchId },\n      })\n      const {\n        companyBranch: {\n          vats,\n          currency: { code },\n        },\n      } = data\n      return {\n        vats: vats.reduce((result, { vatId, priceType }) => {\n          result[priceType.enum] = vatId\n          return result\n        }, {}),\n        currencyCode: code,\n      }\n    },\n  }))\n\nfunction getRecipeVariables(formValues: TRecipeFormValues) {\n  return {\n    code: formValues.code,\n    nameLabel: formValues.nameLabel || '',\n    internalNote: formValues.internalNote,\n    descriptionLabel: formValues.descriptionLabel,\n    enabled: formValues.visible,\n    prices: Object.keys(formValues.prices).map(priceType => ({\n      warePriceType: (priceType as unknown) as WarePriceTypeEnum,\n      price: { value: numeral(formValues.prices[priceType].value).value() },\n      vat: formValues.prices[priceType].vatId,\n    })),\n    sideDishCategories: formValues.sideDishes.map(RM.prop('id')),\n    wareCategories: formValues.categories.map(RM.prop('id')),\n    associatedRecipes: formValues.associatedRecipes.map(\n      RM.pick(['associatedRecipe', 'warePriceType']),\n    ),\n    ingredients: formValues.ingredients.map(({ stockItem, quantity }) => {\n      return { stockItem, quantity: parseNumber(quantity) }\n    }),\n  }\n}\n\nfunction parseNumber(value: string | number) {\n  return typeof value === 'number'\n    ? value\n    : Number.parseFloat(value.replace(',', '.'))\n}\n","import gql from 'graphql-tag'\n\nimport {\n  FMenuAllergenFragmentDoc,\n  FMenuWareUnitFragmentDoc,\n} from '../../../graph/generated'\n\nexport const MenuStockItemFragment = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...FMenuAllergen\n    }\n    wareUnit {\n      ...FMenuWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n  ${FMenuWareUnitFragmentDoc}\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport const MenuStockCreateMutation = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockUpdateMutation = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockDeleteMutation = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n","import { RM } from '@speedlo/tools'\nimport { Instance, types } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\n\nconst DEFAULT_IMPORT = false\nconst DEFAULT_QUANTITY = null\nconst DEFAULT_MAX = Number.MAX_SAFE_INTEGER\nconst DEFAULT_ITEM = {\n  import: DEFAULT_IMPORT,\n  quantity: DEFAULT_QUANTITY,\n  max: DEFAULT_MAX,\n}\nexport const MIN_TRANSFER_QUANTITY = 0\n\ntype TInitItem = {\n  id: string\n  max: number\n}\n\nconst Item = types.model('Item', {\n  id: types.identifier,\n  import: types.optional(types.boolean, DEFAULT_IMPORT),\n  quantity: types.optional(types.maybeNull(types.number), null),\n  max: types.optional(types.number, DEFAULT_MAX),\n})\n\nexport const StockTransferModel = BaseModel.named('StockTransfer')\n  .props({\n    transferItems: types.map(Item),\n  })\n  .volatile(() => ({\n    importMode: false,\n    targetBranchId: null as MaybeID,\n  }))\n  .views(self => ({\n    get isImportMode() {\n      return self.importMode === true\n    },\n    get isTransferMode() {\n      return self.importMode === false\n    },\n    get targetId() {\n      return self.targetBranchId !== self.root.settings.branchId\n        ? self.targetBranchId\n        : null\n    },\n    get sourceId() {\n      return self.root.settings.branchId\n    },\n    get isImportingAll() {\n      const shouldNotImportSome = Array.from(self.transferItems.values()).find(\n        RM.propEq('import', false),\n      )\n      return self.transferItems.size > 0 && !shouldNotImportSome\n    },\n    isImportingItem(itemId: ID) {\n      const item = self.transferItems.get(itemId) || DEFAULT_ITEM\n      return item.import\n    },\n    getItemTransferQuantity(itemId: ID) {\n      const item = self.transferItems.get(itemId) || DEFAULT_ITEM\n      return item.quantity\n    },\n    getItemLimit(itemId: ID) {\n      const item = self.transferItems.get(itemId)\n      return item ? item.max : 0\n    },\n    hasInvalidAmount(itemId: ID) {\n      const item = self.transferItems.get(itemId) || DEFAULT_ITEM\n      if (item.quantity === null) {\n        return false\n      }\n      const amountUnderflow = item.quantity < MIN_TRANSFER_QUANTITY\n      const amountOverflow = item.quantity > item.max\n      return amountUnderflow || amountOverflow\n    },\n    get itemsForTransfer() {\n      return Array.from(self.transferItems.values()).filter(item =>\n        this.isImportMode\n          ? item.import === true\n          : item.quantity !== null && item.quantity > 0,\n      )\n    },\n  }))\n  .actions(self => ({\n    setTargetId(branchId: MaybeID) {\n      self.targetBranchId = branchId\n    },\n    initItems(items: RoA<TInitItem>) {\n      const newItems = items.map(({ id, max }) => {\n        const item = self.transferItems.get(id) || DEFAULT_ITEM\n        return { ...item, id, max }\n      })\n      this.clearItems()\n      newItems.forEach(item => {\n        self.transferItems.put(item)\n      })\n    },\n    toggleImportAll() {\n      const newValue = !self.isImportingAll\n      self.transferItems.forEach(item => (item.import = newValue))\n    },\n    toggleImportItem(itemId: ID) {\n      const item = self.transferItems.get(itemId) || DEFAULT_ITEM\n      self.transferItems.put({ id: itemId, ...item, import: !item.import })\n    },\n    setQuantity(itemId: ID, quantity: number) {\n      const item = self.transferItems.get(itemId) || DEFAULT_ITEM\n      self.transferItems.put({\n        id: itemId,\n        ...item,\n        quantity: Number.isNaN(quantity) ? null : quantity,\n      })\n    },\n    clearTransferState() {\n      self.transferItems.forEach(item => {\n        item.quantity = DEFAULT_QUANTITY\n        item.import = DEFAULT_IMPORT\n      })\n    },\n    clearItems() {\n      self.transferItems.clear()\n    },\n    toggleImportMode() {\n      self.importMode = !self.importMode\n\n      if (self.importMode) {\n        self.transferItems.forEach(item => (item.quantity = DEFAULT_QUANTITY))\n      }\n    },\n  }))\n\nexport interface TStockTransferModel\n  extends Instance<typeof StockTransferModel> {}\n","import { types } from 'mobx-state-tree'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuStockCreate,\n  GMenuStockDelete,\n  GMenuStockUpdate,\n} from '../../../graph/types'\nimport { TStockFormValues } from '../organisms/StockFormLoader'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuStockCreateMutation,\n  MenuStockDeleteMutation,\n  MenuStockUpdateMutation,\n} from './MenuStockModel.graphql'\nimport { StockTransferModel } from './StockTransferModel'\n\nexport const MenuStockModel = MenuBaseModel.named('MenuStock')\n  .props({\n    transfer: types.optional(StockTransferModel, {}),\n  })\n  .actions(self => ({\n    createItem(formValues: TStockFormValues) {\n      const variables: GMenuStockCreate.Variables = {\n        stockItem: {\n          companyBranch: self.branchId,\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockCreateMutation,\n          variables,\n        }),\n      )\n    },\n    updateItem(formValues: TStockFormValues) {\n      const variables: GMenuStockUpdate.Variables = {\n        stockId: formValues.id,\n        stockItem: {\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteItem(stockId: ID) {\n      const variables: GMenuStockDelete.Variables = {\n        stockId,\n      }\n      await self.client.mutate({\n        mutation: MenuStockDeleteMutation,\n        variables,\n      })\n    },\n  }))\n\nfunction getFormVariables(formValues: TStockFormValues) {\n  return {\n    code: formValues.code,\n    label: formValues.nameLabel,\n    note: formValues.note,\n    plu: formValues.plu,\n    allergens: formValues.allergens,\n    wareUnit: formValues.wareUnit!,\n    allowNegative: formValues.allowNegative,\n  }\n}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { SettingsBaseModel } from '../../settings/models/SettingsBaseModel'\nimport { MenuCategoryModel } from './MenuCategoryModel'\nimport { MenuRecipeModel } from './MenuRecipeModel'\nimport { MenuStockModel } from './MenuStockModel'\n\nexport const MenuModel = SettingsBaseModel.named('Menu').props({\n  category: types.optional(MenuCategoryModel, {}),\n  recipe: types.optional(MenuRecipeModel, {}),\n  stock: types.optional(MenuStockModel, {}),\n})\n\nexport interface TMenuModel extends Instance<typeof MenuModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { BusinessHoursModel } from '../../businesshours/models/BusinessHoursModel'\nimport { MenuModel } from '../../menu/models/MenuModel'\n\nexport const SettingsModel = BaseModel.named('Settings')\n  .props({\n    selectedBranchId: types.maybe(types.string),\n    businessHours: types.optional(BusinessHoursModel, {}),\n    menu: types.optional(MenuModel, {}),\n  })\n  .views(self => ({\n    get branchId() {\n      return self.selectedBranchId || RM.head(self.root.user.defaultBranch.id)\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.selectedBranchId = undefined\n    },\n    selectBranch(branchId: ID) {\n      self.selectedBranchId = branchId\n    },\n  }))\n\nexport interface TSettingsModel extends Instance<typeof SettingsModel> {}\n","import { FCompanyBranchFragment } from '../../../graph/generated'\nimport { GZoneLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport { ZoneLocationQuery } from '../Zones.graphql'\n\ninterface IVolatileProps {\n  currentZonePoints: Maybe<GeoPoint[]>\n}\n\nexport const ZoneMapModel = MapModel.named('ZoneMap')\n  .volatile<IVolatileProps>(() => ({\n    currentZonePoints: null,\n  }))\n  .actions(self => ({\n    updateZonePoints(points: GeoPoint[]) {\n      self.currentZonePoints = points\n    },\n    clearZonePoints() {\n      self.currentZonePoints = null\n    },\n    async panToZone(zoneId: ID) {\n      const { data } = await self.client.query({\n        query: ZoneLocationQuery,\n        variables: { zoneId },\n      })\n      if (data) {\n        const {\n          zone: {\n            companyBranch: { gps },\n          },\n        } = data as GZoneLocation.Query\n        if (self.mapRef) {\n          self.mapRef.panTo(gpsToLatLng(gps))\n        }\n      }\n    },\n    async panToBranch(branch: FCompanyBranchFragment) {\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(branch.gps))\n      }\n    },\n  }))\n","import gql from 'graphql-tag'\n\nimport { FZoneFragmentDoc } from '../../../graph/generated'\n\nexport const CreateZoneMutation = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...FZone\n    }\n  }\n  ${FZoneFragmentDoc}\n`\n\nexport const UpdateZonePriorityMutation = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport const DestroyZoneMutation = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n","import { flow, Instance, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\n\nimport {\n  FCompanyBranchBrand,\n  FCompanyBranchFragment,\n  FZoneFragment,\n  FZonePriceRangeFragment,\n  MZoneUpdateVariables,\n} from '../../../graph/generated'\nimport {\n  GCreateZone,\n  GDestroyZone,\n  GUpdateZonePriority,\n} from '../../../graph/types'\nimport { generatePolygon } from '../../../helpers/gps'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { ZoneMapModel } from '../models/ZoneMapModel'\nimport {\n  CreateZoneMutation,\n  DestroyZoneMutation,\n  UpdateZonePriorityMutation,\n} from './ZoneModel.graphql'\n\ntype TBranch = FCompanyBranchFragment\ntype TBrand = FCompanyBranchBrand\n\ninterface IVolatileProps {\n  branch: Maybe<TBranch>\n}\n\nexport const ZoneModel = BaseModel.named('Zone')\n  .props({\n    map: types.optional(ZoneMapModel, {}),\n    brandId: types.maybeNull(types.string),\n  })\n  .volatile<IVolatileProps>(() => ({\n    branch: null,\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.brandId = null\n      self.branch = null\n    },\n  }))\n  .views(self => ({\n    get brand(): Maybe<TBrand> {\n      return (\n        (self.brandId &&\n          self.root.user.brands.find(RM.propEq('id', self.brandId))) ||\n        null\n      )\n    },\n    get hasBranchFilter() {\n      return self.branch !== null\n    },\n    get branchFilterId(): MaybeID {\n      return self.branch === null ? null : self.branch.id\n    },\n    get branchFilterPredicate() {\n      if (self.branch) {\n        return R.propEq('id', self.branch.id)\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), ['brand', 'id'])\n    },\n    get zoneFilterPredicate() {\n      if (self.branch !== null) {\n        return R.pathSatisfies(R.equals(self.branch.id), [\n          'companyBranch',\n          'id',\n        ])\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), [\n            'companyBranch',\n            'brand',\n            'id',\n          ])\n    },\n    get branches() {\n      return self.root.user.branches\n    },\n  }))\n  .views(self => ({\n    getZoneVariables(zoneId: ID, values: any): MZoneUpdateVariables {\n      return {\n        zoneId,\n        update: {\n          name: values.name,\n          enabled: values.enabled,\n          companyBranch: values.companyBranch.id,\n          zoneColor: values.zoneColor.id,\n          minimalOrderPrice: {\n            value: Number(values.minimalOrderPrice.value) || 0,\n          },\n          priceRangeRules: values.priceRangeRules\n            .map(normalizePriceRangeRule)\n            .filter(R.reject(R.pathEq(['price', 'value'], null))),\n          geoPolygon: self.map.currentZonePoints || undefined,\n        },\n      }\n    },\n  }))\n  .actions(self => ({\n    setBranchFilter(branch: TBranch) {\n      self.branch = branch\n      self.brandId = branch.brand.id\n    },\n    setBrandFilter(brand: TBrand, brandBranches: TBranch[]) {\n      self.brandId = brand.id\n      if (!self.branch || self.branch.brand.id !== brand.id) {\n        self.branch =\n          (brandBranches.length === 1 && RM.head(brandBranches)) || null\n      }\n    },\n    clearBranchFilter() {\n      self.branch = null\n    },\n    clearBrandFilter() {\n      self.brandId = null\n      self.branch = null\n    },\n  }))\n  .actions(self => ({\n    createZone: flow(function*(onZoneCreate: (zoneId: ID) => void) {\n      if (self.branch === null) {\n        throw new Error('Called createZone without branch being set')\n      }\n      const points = generatePolygon({\n        center: self.branch.gps,\n        metersRadius: 1000,\n        pointsCount: 5,\n      })\n      const variables: GCreateZone.Variables = {\n        branchId: self.branch.id,\n        points,\n      }\n      const { data } = yield self.client.mutate({\n        mutation: CreateZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: (prev, { mutationResult }) => {\n            const zone = (mutationResult.data as GCreateZone.Mutation)\n              .createZone\n            if (zone) {\n              return {\n                ...prev,\n                zones: prev.zones.concat(zone),\n              }\n            }\n            return prev\n          },\n        },\n      })\n      if (data) {\n        const zone = (data as GCreateZone.Mutation).createZone\n        onZoneCreate(zone.id)\n      }\n    }),\n    destroyZone(zoneId: ID) {\n      if (!zoneId) {\n        return\n      }\n      const variables: GDestroyZone.Variables = {\n        zoneId,\n      }\n      return self.client.mutate({\n        mutation: DestroyZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: prev => {\n            return {\n              ...prev,\n              zones: R.reject(R.propEq('id', zoneId), prev.zones),\n            }\n          },\n        },\n      })\n    },\n    changeZonePriority: flow(function*(\n      zone: FZoneFragment,\n      oldIndex: number,\n      newIndex: number,\n    ) {\n      if (!zone || oldIndex === newIndex) {\n        return\n      }\n      const offset = oldIndex - newIndex\n\n      const variables: GUpdateZonePriority.Variables = {\n        zoneId: zone.id,\n        offset,\n      }\n      yield self.client.mutate({\n        mutation: UpdateZonePriorityMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          updateZonePriority: {\n            __typename: 'Zone',\n            id: zone.id,\n            priority: zone.priority + offset,\n          },\n        },\n      })\n    }),\n  }))\n\nfunction numberOrNull(value: string | number | null) {\n  if (value === null) {\n    return null\n  }\n  const num = Number(value)\n  return Number.isNaN(num) ? null : num\n}\n\nfunction normalizePriceRangeRule(range: FZonePriceRangeFragment) {\n  return {\n    price: { value: numberOrNull(range.price.value) },\n    toPrice: { value: numberOrNull(range.toPrice.value) || -1 },\n  }\n}\n\nexport interface TZoneModel extends Instance<typeof ZoneModel> {}\n","import { DefaultApolloClient } from '@speedlo/graphql'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { AuthModel } from '../models/AuthModel'\nimport { ConfigModel } from '../models/ConfigModel'\nimport { UserModel } from '../models/UserModel'\nimport { CreateOrderModel } from '../segments/createorder/models/CreateOrderModel'\nimport { OrderModel } from '../segments/order/models/OrderModel'\nimport { StatisticsModel } from '../segments/overview/models/StatisticsModel'\nimport { SettingsModel } from '../segments/settings/models/SettingsModel'\nimport { ZoneModel } from '../segments/zones/models/ZoneModel'\nimport { BaseModel } from './BaseModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    user: types.optional(UserModel, {}),\n    order: types.optional(OrderModel, {}),\n    createOrder: types.optional(CreateOrderModel, {}),\n    zone: types.optional(ZoneModel, {}),\n    settings: types.optional(SettingsModel, {}),\n    config: types.optional(ConfigModel, {}),\n    statistics: types.optional(StatisticsModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.settings,\n        self.zone,\n        self.order,\n        self.statistics,\n        self.createOrder,\n      ]\n    },\n  }))\n  .volatile(() => ({\n    apolloClient: (null as unknown) as DefaultApolloClient,\n  }))\n  .actions(self => ({\n    setClient(client: DefaultApolloClient) {\n      self.apolloClient = client\n    },\n  }))\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import { ApolloProvider } from '@speedlo/graphql'\nimport { useAsyncEffect } from '@speedlo/hooks'\nimport React from 'react'\n\nimport { RootContext } from '../context/RootContext'\nimport { createApolloClient } from '../graph/createClient'\nimport { persistModel } from '../helpers/persistModel'\nimport { RootModel } from '../models/RootModel'\nimport PageLoader from './PageLoader'\n\nexport const RootProvider: React.FC = ({ children }) => {\n  const [isInit, setInit] = React.useState(false)\n\n  const [root] = React.useState(() => RootModel.create())\n  const [client] = React.useState(() => {\n    const newClient = createApolloClient(root)\n    // FIXME: Required for legacy code of calling GraphQL from models\n    root.setClient(newClient)\n    return newClient\n  })\n\n  useAsyncEffect(async () => {\n    if (process.env.REACT_APP_STAGE === 'dev') {\n      // @ts-ignore\n      window.root = root\n    }\n    await Promise.all(root.persistedModels.map(persistModel))\n    setInit(true)\n  }, [root])\n\n  if (!isInit) {\n    return <PageLoader />\n  }\n\n  return (\n    <ApolloProvider client={client}>\n      <RootContext.Provider value={root}>\n        {React.Children.only(children)}\n      </RootContext.Provider>\n    </ApolloProvider>\n  )\n}\n\nexport const useRoot = () => {\n  const root = React.useContext(RootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n","import {\n  createAuthLink,\n  createDefaultApolloClient,\n  createLogLink,\n  createNetworkLink,\n  createOfflineLink,\n  createRetryLink,\n} from '@speedlo/graphql'\n\nimport { appConfig } from '../config'\nimport { TRootModel } from '../models/RootModel'\n\nexport function createApolloClient(root: TRootModel) {\n  return createDefaultApolloClient(\n    createAuthLink({\n      enableTokenCache: false,\n      getToken: () => root.auth.token,\n      onInvalidToken: () => root.auth.invalidate(),\n    }),\n    createLogLink({ enabled: true }),\n    createRetryLink(),\n    createOfflineLink(),\n    createNetworkLink(appConfig.endpoint),\n  )\n}\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n  googleMapsApi: 'AIzaSyAMytFvlKm4fxw8LCcMHofNDHcrJ8ibOTY',\n  persistenceKey: 'admin@local',\n  pageTitleSuffix: 'LOCAL',\n  sentryDSN: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'admin@dev',\n    pageTitleSuffix: 'DEV',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'admin@prod',\n    pageTitleSuffix: 'Speɘdlo',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n","// @ts-ignore temporary before figuring out a logging solution that works in prod\nwindow.localStorage.setItem('debug', '*,-sockjs*')\n"],"sourceRoot":""}