{"version":3,"sources":["atoms/VerticalGap.tsx","components/forms/FormInput.tsx","components/forms/FormSubmitButton.tsx","molecules/TouchButtonDelete.tsx","hooks/useDropdownSingle.ts","hooks/useDropdownMulti.ts","components/forms/FormDropdownMulti.tsx","components/forms/FormDropdownSingle.tsx","atoms/FlexDiv.tsx","components/forms/FormDisplayValue.tsx","atoms/DragHandle.tsx","atoms/PictogramDisplay.tsx","components/forms/useFormLoader.ts","components/ColorSelector.tsx","segments/menu/molecules/MenuGuideDownload.tsx","molecules/SortableDataTable.tsx","segments/menu/atoms/ColorBadgeMenu.tsx","segments/menu/molecules/CategoryListTable.tsx","segments/menu/organisms/CategoryList.tsx","segments/menu/pages/MenuCategoryListPage.tsx","molecules/TopRightButtonContainer.tsx","segments/menu/hooks/useMenuItemType.ts","segments/menu/atoms/IsMenuItemType.tsx","segments/menu/atoms/MenuSubmitButton.tsx","segments/menu/hooks/useMenuTranslations.ts","segments/menu/molecules/CategoryTranslationLoader.tsx","segments/menu/molecules/MenuFormLoader.tsx","segments/menu/organisms/CategoryFormLoader.tsx","components/forms/FormDeleteButton.tsx","segments/menu/atoms/FormLayoutGrid.tsx","segments/menu/molecules/CategoryColorField.tsx","segments/menu/molecules/CategoryOriginsField.tsx","segments/menu/molecules/CategoryPictogramSelect.tsx","segments/menu/atoms/MenuTranslationInput.tsx","segments/menu/molecules/MenuInternalNoteField.tsx","segments/menu/molecules/MenuLanguageSwitch.tsx","segments/menu/molecules/MenuNameInput.tsx","segments/menu/organisms/CategoryFormPrimary.tsx","hooks/useSettingsBranch.ts","segments/menu/atoms/MenuSuggestionPanel.tsx","segments/menu/hooks/usePriceType.ts","segments/menu/organisms/CategoryRecipesView.tsx","segments/menu/molecules/CategoryRequirementControl.tsx","segments/menu/organisms/CategoryRequirementsForm.tsx","segments/menu/pages/MenuCategoryPage.tsx","segments/menu/organisms/CategorySuggestionPanel.tsx","segments/menu/organisms/RecipeCategoryView.tsx","segments/menu/molecules/RecipeTranslationLoader.tsx","segments/menu/organisms/RecipeFormLoader.tsx","segments/menu/molecules/MenuPriceInput.tsx","components/forms/FormFlatSingleSelect.tsx","segments/menu/molecules/RecipeVatSelectField.tsx","segments/menu/molecules/RecipeAssocListTable.tsx","segments/menu/organisms/RecipeAssociatedView.tsx","segments/menu/hooks/useMenuItemId.ts","segments/menu/organisms/RecipeFormPricing.tsx","segments/menu/molecules/MenuCodeInput.tsx","segments/menu/molecules/MenuIdExternalSystem.tsx","segments/menu/molecules/MenuVisibilityField.tsx","segments/menu/atoms/MenuAllergenIndicator.tsx","segments/menu/molecules/RecipeAllergenDisplay.tsx","segments/menu/molecules/RecipeDescriptionInput.tsx","segments/menu/molecules/ImageCropModal.tsx","segments/menu/molecules/RecipeImage.tsx","segments/menu/organisms/RecipeFormPrimary.tsx","segments/menu/molecules/RecipeIngredientsTable.tsx","segments/menu/organisms/RecipeIngredientsView.tsx","segments/menu/pages/MenuRecipePage.tsx","segments/menu/organisms/StockListTable.tsx","segments/menu/organisms/StockListLoader.tsx","segments/menu/pages/MenuStockListPage.tsx","segments/menu/organisms/StockFormLoader.tsx","segments/menu/molecules/StockAllergenField.tsx","segments/menu/molecules/StockAllowNegativeField.tsx","segments/menu/molecules/StockPluField.tsx","segments/menu/molecules/StockWareUnitField.tsx","segments/menu/organisms/StockFormPrimary.tsx","segments/menu/organisms/StockRecipesVIew.tsx","segments/menu/pages/MenuStockPage.tsx","segments/menu/routes/MenuRouting.tsx"],"names":["VerticalGap","styled","div","size","sizeUnit","displayName","FormInput","React","forwardRef","inputRef","fieldName","fullWidth","validate","addHiddenLabelWithPlaceholderText","withLabel","props","getInputProps","useFormInputProps","useObserver","inputFullWidth","ref","placeholder","hidden","htmlFor","id","state","useXFormState","useXFieldForInput","field","disabled","isSubmitting","invalid","touched","Boolean","error","FormSubmitButton","children","type","color","Colors","green","icon","isValid","undefined","ErrorOutline","iconSize","iconColor","red","className","cn","heartBeat","TouchButtonDelete","onDelete","confirmText","Delete","greyMiddle","onClick","ev","preventDefault","window","confirm","useDropdownSingle","options","selected","onSelectionChange","getOptionValue","value","useMemo","find","option","onChange","useDropdownMulti","Array","isArray","ARRAY_EMPTY","filter","includes","map","isMulti","FormDropdownMulti","idProp","getOptionFilter","selectProps","formState","useXField","filterProps","useDropdownFilter","dropdownProps","setValue","onFocus","setTouched","hasError","isDisabled","FormDropdownSingle","FlexDiv","FormDisplayValue","useXFieldState","StyledDragHandle","DragHandle","SortableHandle","Reorder","getFontSize","fontSize","fontSizeUnit","Spacing","DefaultSizeUnit","PictogramDisplay","attrs","getPictogramClassName","pictogramId","logger","useFormLoader","onSubmit","initialValues","loadValues","validationSchema","submitMessage","submitRedirectPath","history","useRouterContext","useSnackBar","enqueueSuccess","enqueueWarning","onSubmitSuccess","useCallback","values","a","async","push","onSubmitFailed","errors","msg","hasLoaded","useRef","onReset","current","xform","useXForm","initialValidationEnabled","ignoreUnknownFieldsInValidation","onFormChanges","useEffect","Promise","resolve","then","api","mergeValues","pristineValues","enableValidation","ColorOption","white","ColorSelector","colors","isLoading","isClearable","clearLabel","styles","base","padding","margin","menu","width","maxWidth","container","defaultValue","RM","head","formatOptionLabel","code","MenuGuideDownloadButton","TouchButton","black","MenuGuideDownload","observer","settings","useRoot","useQMenuGuideDownload","branchId","fetchPolicy","loading","data","companyBranch","foodMenuUrl","href","target","rel","SortableTableRowRenderer","SortableElement","columns","style","SortableDataTableContainer","SortableContainer","DataTable","SortableDataTable","sortedItems","items","rowRenderer","rowProps","onHandleSorting","newIndex","oldIndex","currentItems","arrayMove","setState","onSort","sortSuccess","item","offset","this","lockAxis","useDragHandle","onSortEnd","PureComponent","getDerivedStateFromProps","nextProps","ColorBadgeMenu","CategoryListTable","categories","onToggle","onRemove","showEditColumn","showRemoveColumn","showVisibilityColumn","showColor","showHeader","isSortable","heightStretch","fullHeight","noRowsDisplay","text","i18n","disableHeader","noRowsRenderer","getCategoryEditRoute","useMenuRouting","dataKey","ButtonColumnWidthPx","minWidth","cellRenderer","checkColumnAccess","canQuery","ColumnRendererEdit","cellDataGetter","rowData","categoryType","enum","ColumnRendererRemove","columnData","canMutate","ColumnRendererVisibility","label","ColumnRendererWithNote","noteKey","cellData","toLocaleLowerCase","createElement","StyledCategoryList","greyLight","headline","subHeadline","useQMenuCategoryList","getStash","updateQuery","refetch","dataOrigins","useQMenuCategoryOrigins","originsMap","origins","reduce","acc","origin","renderOrigins","sort","originEnum","key","useMMenuCategoryVisibility","changeVisibility","onVisibilityToogle","categoryId","visible","optimisticResponse","updateWareCategory","__typename","useMMenuCategorySort","sortCategory","result","success","getCategoryCreateRoute","FlexRowSingle","FlexColumn","widthGrowIndex","Headline","fixedWidth","MenuCreateButton","routeTo","PartialDataTableContainer","MenuCategoryListPage","FullPageLayout","pageTitle","useBackButton","backRoute","ROUTE_SETTINGS","PageLayoutFullHeightItem","forcePercentHeightInMobile","Card","stretchToParent","justify","SettingsCompanyBranchPicker","WareCategoryTypeEnum","Main","SideDish","Cover","TopRightButtonContainer","Radiuses","Button","useMenuItemType","IsMenuItemType","isMain","isSideDish","isCover","itemType","MenuSubmitButton","isCreate","createMutation","updateMutation","useCanMutate","byLanguage","propEq","useMenuTranslations","menuModel","useMenuModel","translations","findTranslation","language","getTranslation","initTranslation","translated","translation","hasTranslation","shouldLoadTranslation","isDefaultLanguageSelected","currentLanguage","CategoryTranslationLoader","useQMenuCategoryFormTrans","skip","category","nameLabel","internalNoteLabel","MenuFormLoader","loadCreateDefaults","loadUpdateValues","onCreate","onUpdate","createSuccessMessage","updateSuccessMessage","successRedirectPath","CategoryFormLoader","redirectToCategoryList","useObjectValidation","yup","string","required","useLazyQMenuCategoryForm","queryCategory","defaultLanguage","useMMenuCategoryUpdate","updateCategory","executeUpdate","getWriteVariables","useMMenuCategoryCreate","createCategory","wareCategoryType","length","getDefaults","ROUTE_MENU_CATEGORY","pictogram","minCount","maxCount","recipes","formValues","enabled","orderOriginCategories","wareCategoryColor","FormDeleteButton","mutationName","canDelete","useAccessGuard","goBack","StyledFormLayoutGrid","Middle","primaryColumnWidth","secondaryColumnWidth","mediaMobile","FormLayoutGrid","contentPrimary","contentSecondary","contentTopRight","contentBottomRight","CategoryColorField","useQMenuCategoryColors","CategoryOriginsField","IconLine","labelWidth","getOptionLabel","prop","CategoryPictogramSelect","SelectControl","availablePictograms","components","SingleValue","menuList","maxHeight","isSearchable","StyledMenuTranslationInput","MenuTranslationInput","getFieldProps","isTranslating","name","fieldProps","src","getFlag","alt","setLanguage","MenuInternalNoteInput","localized","StyledLanguagePicker","LanguagePicker","MenuLanguageSwitch","availableLanguages","supportedLanguages","selectedLanguage","formatLanguage","identity","arrowColor","MenuNameInput","rest","Label","DefaultLabelWidth","CategoryFormPrimary","useMMenuCategoryDelete","deleteCategory","FormGrid","useSettingsBranch","MenuSuggestionPanel","onAdd","addLabel","addButtonText","useStateRef","getSelected","setSelected","onConfirm","onKeyDown","onSelect","propOr","priceTypes","WarePriceTypeEnum","Delivery","Inhouse","usePriceType","priceTypeLabels","getPriceTypesLabels","StyledCategoryRecipesView","mediaDesktop","StyledFormStretchedRow","SortableRecipes","StyledRecipeRow","SortableRecipe","recipe","prices","priceType","foundPrice","pathEq","NoteText","formatPrice","price","currency","TouchButtonRemove","internalNote","CategoryRecipesView","useQMenuRecipeList","unselectedRecipesOnly","differenceWith","eqProps","isDesktop","useResponsive","addedRecipe","lockToContainerEdges","DataList","rowHeight","renderItem","index","reject","idPropEq","StyledCategoryRequirementControl","CategoryRequirementControl","count","countRef","Sizer","FormInputStyled","validity","valid","Number","parseInt","select","pattern","StyledCheckbox","checked","getRulesMap","noLimit","min","max","optional","onlyOne","custom","CategoryRequirementsForm","ruleMap","useLocalStore","currentRule","setRule","rule","useAutorun","found","_","findKey","SelectControlFlat","Object","keys","formatItem","req","onSingleSelection","selectedRule","selectedItem","FormContainer","FormFixedRow","FormStretchedRow","MenuCategoryPage","match","params","getCategoryTypeLabel","hideLogoutWidget","withScrollArea","minHeight","CategorySuggestionPanel","currentCategories","without","RecipeCategoryView","noRowsText","from","remove","addedCategory","RecipeTranslationLoader","recipeId","useQMenuRecipeFormTrans","descriptionLabel","RecipeFormLoader","recipeType","redirectToRecipeList","fieldIsRequiredMsg","object","mapPriceTypes","fieldDescription","validateAsNumberField","useLazyQMenuRecipeDefaults","queryDefaults","normalizeLoadedDefaults","defaults","useLazyQMenuRecipeForm","queryRecipe","normalizeUpdateValues","useMMenuRecipeUpdate","updateRecipe","image","getImageForUpdate","disableBatching","useMMenuRecipeCreate","createRecipe","ROUTE_MENU_RECIPE","warePriceType","parseNumber","vat","vatId","sideDishCategories","sideDishes","wareCategories","associatedRecipes","pick","ingredients","stockItem","quantity","delete","file","internalCode","currencyCode","vats","recipeSource","sourceAssociatedRecipes","associatedRecipe","formattedPrice","sourceIngredients","allergens","wareUnit","formatNumber","unitLabel","sourcePrice","sourcePrices","MenuPriceField","Toll","FormFlatSingleSelect","getItemId","isInvalid","RecipeVatSelectField","useQMenuVats","RecipeAssocListTable","RecipeAssociatedView","useQMenuRecipeFormAssoc","isPriceType","isAssocRecipe","priceTypeRecipes","onAddRecipe","onRemoveRecipe","both","some","FormPricingCurrencyCode","RecipeFormPricing","baseName","MarginBox","left","MenuCodeInput","MenuIdExternalSystem","MenuVisibilityField","AllergenBox","MarginAroundFormComponents","yellow","MenuAllergenIndicator","useQMenuAllergens","allergen","title","active","StyledAllergenLabel","RecipeAllergenDisplay","uniq","flatten","RecipeDescriptionInput","ImageCropModal","onCancel","useState","unit","aspect","crop","setCrop","imageRef","onConfirmClick","canvas","document","scaleX","naturalWidth","scaleY","naturalHeight","height","getContext","drawImage","x","y","toBlob","blob","Error","getCroppedBlob","onImageLoaded","imageSource","URL","createObjectURL","revokeObjectURL","Dialog","open","DialogTitle","DialogContent","keepSelection","ruleOfThirds","imageStyle","DialogActions","StyledRecipeImageUploader","ButtonHeight","RecipeImage","uploadedImage","setUploadedImage","useDropzone","accept","multiple","onDropAccepted","firstImage","onDropRejected","isDragActive","getRootProps","imageDisplay","RecipeFormPrimary","useMMenuRecipeDelete","deleteRecipe","RecipeIngredientsTable","rowIndex","String","unselectedStockOnly","RecipeIngredientsControl","useQMenuStockList","stockItems","addedStockItem","RecipeIngredientsView","ingredient","stockItemId","splice","findIndex","MenuRecipePage","right","bottom","getRecipeTypeLabel","TCategoryType","StyledDataTable","StockListTable","Loading","flexGrow","stockWithUnit","stockAllowNegative","StockListLoader","filterItem","getPredicate","partialMatch","exactMatch","MenuStockListPage","getStockCreateRoute","flexWrap","MenuFilterInput","CanMutate","StockFormLoader","stockId","redirectToStockList","array","of","useLazyQMenuStockDefaults","allowNegativeDefault","getAllowNegativeDefault","allowNegative","useLazyQMenuStockForm","queryStock","note","plu","useMMenuStockCreate","createStock","useMMenuStockUpdate","updateStock","FieldStateEnum","Default","ROUTE_MENU_STOCK","isEnabled","Disabled","StockAllergenField","Enabled","i18nMark","StockAllowNegativeField","StockPluField","Fingerprint","StockWareUnitField","useQMenuWareUnits","SelectAll","wareUnits","StockFormPrimary","useMMenuStockDelete","deleteStockItem","StockRecipesView","useQStockRecipes","BlockLoader","pathname","MenuStockPage","CanQuery","queryName","MenuRouting","SecureRoute","path","component","MenuRecipeListPage","to","ROUTE_MENU","NotFoundPage"],"mappings":"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","file":"static/js/387.a88a76ce.chunk.js","sourcesContent":["import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import {\n  useXFieldForInput,\n  useXFormState,\n  XFieldName,\n  XFieldValidator,\n} from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { StyledFormInput } from '../../atoms/FormInputStyled'\n\ntype TProps = NoChildren &\n  Omit<React.InputHTMLAttributes<never>, 'name'> & {\n    fieldName: XFieldName\n    validate?: XFieldValidator<string>\n    fullWidth?: boolean\n    addHiddenLabelWithPlaceholderText?: boolean\n  }\n\nexport type FormInputProps = TProps\n\nexport const FormInput = React.forwardRef<HTMLInputElement, TProps>(\n  (\n    {\n      fieldName,\n      fullWidth,\n      validate,\n      addHiddenLabelWithPlaceholderText: withLabel = true,\n      ...props\n    },\n    inputRef,\n  ) => {\n    const getInputProps = useFormInputProps({ fieldName, validate })\n    return useObserver(() => (\n      <>\n        <StyledFormInput\n          {...getInputProps()}\n          inputFullWidth={fullWidth}\n          ref={inputRef}\n          {...props}\n        />\n        {withLabel && props.placeholder && (\n          <label hidden={true} htmlFor={getInputProps().id}>\n            {props.placeholder}\n          </label>\n        )}\n      </>\n    ))\n  },\n)\n\ninterface IHookOptions {\n  fieldName: XFieldName\n  validate?: XFieldValidator<string>\n}\n\nexport function useFormInputProps({ fieldName, validate }: IHookOptions) {\n  const state = useXFormState()\n  const [field, getInputProps] = useXFieldForInput<string>(fieldName, {\n    validate,\n  })\n  return () => ({\n    ...getInputProps(),\n    disabled: state.isSubmitting,\n    invalid: field.touched && Boolean(field.error),\n  })\n}\n","import { ErrorOutline } from '@material-ui/icons'\nimport { cn } from '@speedlo/ui'\nimport { useXFormState } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ITouchButtonProps, TouchButton } from '../../molecules/TouchButton'\nimport { Colors } from '../../styling'\n\ninterface IProps extends ITouchButtonProps {\n  children: ReactNode | ReactNode[] | string\n}\n\nexport const FormSubmitButton: React.FC<IProps> = ({\n  children,\n  id = 'form-submit',\n  ...props\n}) => {\n  const state = useXFormState()\n  return useObserver(() => (\n    <TouchButton\n      id={id}\n      type=\"submit\"\n      color={Colors.green}\n      disabled={state.isSubmitting}\n      icon={!state.isValid ? ErrorOutline : undefined}\n      iconSize={1.1}\n      iconColor={Colors.red}\n      {...props}\n      className={cn(props.className, 'animated', 'infinite', {\n        heartBeat: state.isSubmitting,\n      })}\n    >\n      <>{children}</>\n    </TouchButton>\n  ))\n}\n","import { Delete } from '@material-ui/icons'\nimport React from 'react'\n\nimport { SizerButton } from '../atoms/SizerButton'\nimport { Colors } from '../styling'\nimport { ITouchButtonProps, TouchButton } from './TouchButton'\n\ninterface ITouchButtonDeleteProps extends Omit<ITouchButtonProps, 'onClick'> {\n  confirmText?: string\n  onDelete(): void\n}\n\nexport const TouchButtonDelete: React.FC<ITouchButtonDeleteProps> = ({\n  onDelete,\n  confirmText,\n  ...props\n}) => {\n  return (\n    <SizerButton>\n      <TouchButton\n        className=\"delete-button\"\n        icon={Delete}\n        color={Colors.greyMiddle}\n        onClick={ev => {\n          ev.preventDefault()\n          if (!confirmText || window.confirm(confirmText)) {\n            onDelete()\n          }\n        }}\n        {...props}\n      />\n    </SizerButton>\n  )\n}\n","import React from 'react'\n\ntype TOptions<TSelectOption> = {\n  options: RoA<TSelectOption> | null\n  selected: MaybeID\n  onSelectionChange: (selected: MaybeID) => void\n  getOptionValue(option: TSelectOption): string\n}\n\nexport function useDropdownSingle<TSelectOption>({\n  options,\n  selected,\n  onSelectionChange,\n  getOptionValue,\n}: TOptions<TSelectOption>) {\n  const value = React.useMemo(() => {\n    if (selected === null) {\n      return null\n    }\n    return options === null\n      ? null\n      : options.find(option => getOptionValue(option) === selected) || null\n  }, [selected, options, getOptionValue])\n\n  const onChange = (option: unknown) => {\n    onSelectionChange(option ? getOptionValue(option as TSelectOption) : null)\n  }\n\n  return { value, onChange, getOptionValue }\n}\n","import React from 'react'\n\nimport { ARRAY_EMPTY } from '../helpers/form'\n\ntype TOptions<TSelectOption> = {\n  options: RoA<TSelectOption> | null\n  selected: RoA<ID>\n  onSelectionChange: (selected: RoA<ID>) => void\n  getOptionValue(option: TSelectOption): string\n}\n\nexport function useDropdownMulti<TSelectOption>({\n  options,\n  selected,\n  onSelectionChange,\n  getOptionValue,\n}: TOptions<TSelectOption>) {\n  const value = React.useMemo(() => {\n    if (!Array.isArray(selected)) {\n      return null\n    }\n    return options === null\n      ? ARRAY_EMPTY\n      : options.filter(option => selected.includes(getOptionValue(option)))\n  }, [selected, options, getOptionValue])\n\n  const onChange = (option: unknown) => {\n    onSelectionChange(\n      option ? (option as TSelectOption[]).map(getOptionValue) : ARRAY_EMPTY,\n    )\n  }\n\n  return { value, onChange, isMulti: true }\n}\n","import { useXField, useXFormState, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { SelectControl, TSelectControlProps } from '../../atoms/SelectControl'\nimport { useDropdownFilter } from '../../hooks/useDropdownFilter'\nimport { useDropdownMulti } from '../../hooks/useDropdownMulti'\nimport { idProp } from '../../tools/ramda'\n\ntype TFormDropdownMultiProps<OptionType> = Omit<\n  TSelectControlProps<OptionType>,\n  'value' | 'onChange' | 'isMulti'\n> & {\n  fieldName: XFieldName\n  options: RoA<OptionType>\n  getOptionFilter?(option: OptionType): string\n}\n\nexport const FormDropdownMulti = <TOption extends any>({\n  fieldName,\n  getOptionValue = idProp as any,\n  getOptionFilter,\n  ...selectProps\n}: TFormDropdownMultiProps<TOption>) => {\n  const formState = useXFormState()\n  const field = useXField<RoA<ID>>(fieldName)\n\n  return useObserver(function useBody() {\n    const filterProps = useDropdownFilter({ getOptionFilter })\n    const dropdownProps = useDropdownMulti({\n      ...selectProps,\n      onSelectionChange: field.setValue,\n      selected: field.value,\n      getOptionValue,\n    })\n\n    return (\n      <SelectControl<TOption>\n        {...dropdownProps}\n        {...filterProps}\n        {...selectProps}\n        onFocus={() => field.setTouched()}\n        invalid={field.touched && field.hasError}\n        isDisabled={formState.isSubmitting}\n        getOptionValue={getOptionValue}\n      />\n    )\n  })\n}\n","import { useXField, useXFormState, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { SelectControl, TSelectControlProps } from '../../atoms/SelectControl'\nimport { useDropdownFilter } from '../../hooks/useDropdownFilter'\nimport { useDropdownSingle } from '../../hooks/useDropdownSingle'\nimport { idProp } from '../../tools/ramda'\n\ntype TFormDropdownSingleProps<OptionType> = Omit<\n  TSelectControlProps<OptionType>,\n  'value' | 'onChange' | 'isMulti'\n> & {\n  fieldName: XFieldName\n  options: RoA<OptionType>\n  getOptionFilter?(option: OptionType): string\n}\n\nexport const FormDropdownSingle = <TOption extends any>({\n  fieldName,\n  getOptionValue = idProp as any,\n  getOptionFilter,\n  ...selectProps\n}: TFormDropdownSingleProps<TOption>) => {\n  const formState = useXFormState()\n  const field = useXField<MaybeID>(fieldName)\n\n  return useObserver(function useBody() {\n    const dropdownProps = useDropdownSingle({\n      ...selectProps,\n      onSelectionChange: field.setValue,\n      selected: field.value,\n      getOptionValue,\n    })\n    const filterProps = useDropdownFilter({ getOptionFilter })\n\n    return (\n      <SelectControl<TOption>\n        {...dropdownProps}\n        {...filterProps}\n        {...selectProps}\n        onFocus={() => field.setTouched()}\n        invalid={field.touched && field.hasError}\n        isDisabled={formState.isSubmitting}\n      />\n    )\n  })\n}\n","import styled from 'styled-components/macro'\n\nexport const FlexDiv = styled.div`\n  display: flex;\n`\n","import { useXFieldState, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\ntype TProps = NoChildren & {\n  fieldName: XFieldName\n  className?: string\n}\n\nexport const FormDisplayValue: React.FC<TProps> = ({\n  fieldName,\n  className,\n}) => {\n  const field = useXFieldState<string>(fieldName)\n  return useObserver(() => <span className={className}>{field.value}</span>)\n}\n","import { Reorder } from '@material-ui/icons'\nimport React from 'react'\nimport { SortableHandle } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Icon } from './Icon'\n\ninterface IProps {}\n\nconst StyledDragHandle = styled.div`\n  padding: 1rem 0.4rem;\n  cursor: grab;\n`\nexport const DragHandle = SortableHandle<IProps>(() => (\n  <StyledDragHandle>\n    <Icon icon={Reorder} />\n  </StyledDragHandle>\n))\n","import '@speedlo/assets/Flaticon.css'\n\nimport styled from 'styled-components/macro'\n\nimport { Spacing } from '../styling'\n\ninterface IProps {\n  pictogramId: string\n  fontSize?: number\n  fontSizeUnit?: string\n}\n\nconst getFontSize = ({\n  fontSize = 2,\n  fontSizeUnit = Spacing.DefaultSizeUnit,\n}: IProps) => `${fontSize}${fontSizeUnit}`\n\nexport const PictogramDisplay = styled.div.attrs<IProps>(({ pictogramId }) => ({\n  className: getPictogramClassName(pictogramId),\n}))<IProps>`\n  &:before {\n    font-size: ${getFontSize} !important;\n    margin-left: 0.5rem !important;\n  }\n`\n\nexport function getPictogramClassName(pictogramId: string) {\n  return `flaticon-${pictogramId}`\n}\n","import { useRouterContext } from '@speedlo/hooks'\nimport { TValidationSchema, useXForm, XFormErrors } from '@speedlo/xform'\nimport React from 'react'\n\nimport { logForm } from '../../helpers/logger'\nimport { useSnackBar } from '../../hooks/useSnackBar'\n\ninterface IOptions<TValues> {\n  initialValues: TValues\n  loadValues?(initialValues: TValues): Promise<Partial<TValues> | undefined>\n  onSubmit(values: TValues): Promise<any>\n  submitMessage?: string\n  submitRedirectPath?: string\n  validationSchema?: TValidationSchema\n}\n\nexport type TFormLoaderOptions<TValues = any> = IOptions<TValues>\n\nconst logger =\n  process.env.REACT_APP_STAGE !== 'prod' ? obj => logForm('%o', obj) : undefined\n\nexport function useFormLoader<TValues>({\n  onSubmit,\n  initialValues,\n  loadValues,\n  validationSchema,\n  submitMessage,\n  submitRedirectPath,\n}: IOptions<TValues>) {\n  const { history } = useRouterContext()\n  const { enqueueSuccess, enqueueWarning } = useSnackBar()\n\n  const onSubmitSuccess = React.useCallback(\n    async (values: TValues) => {\n      await onSubmit(values)\n      if (submitMessage) {\n        enqueueSuccess(submitMessage)\n      }\n      if (submitRedirectPath) {\n        history.push(submitRedirectPath)\n      }\n    },\n    [enqueueSuccess, history, onSubmit, submitMessage, submitRedirectPath],\n  )\n\n  const onSubmitFailed = React.useCallback(\n    (values: TValues, errors: XFormErrors) => {\n      for (const msg of errors.values()) {\n        if (msg) {\n          enqueueWarning(msg)\n        }\n      }\n    },\n    [enqueueWarning],\n  )\n\n  const hasLoaded = React.useRef(false)\n\n  const onReset = React.useCallback(() => {\n    hasLoaded.current = false\n  }, [])\n\n  const xform = useXForm<TValues>({\n    onSubmit: onSubmitSuccess,\n    onSubmitFailed,\n    onReset,\n    validationSchema,\n    initialValues,\n    initialValidationEnabled: loadValues === undefined,\n    ignoreUnknownFieldsInValidation: true,\n    onFormChanges: logger,\n  })\n\n  React.useEffect(() => {\n    if (!hasLoaded.current) {\n      if (loadValues) {\n        Promise.resolve(loadValues(xform.state.initialValues)).then(values => {\n          if (values) {\n            xform.api.mergeValues(values)\n            xform.state.pristineValues = xform.state.values\n          }\n          xform.api.enableValidation()\n        })\n      }\n      hasLoaded.current = true\n    }\n  }, [loadValues, xform])\n\n  return xform\n}\n","import { XFieldName } from '@speedlo/xform'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { QZoneColorsZoneColors } from '../graph/generated'\nimport { i18n } from '../i18n'\nimport { Colors } from '../styling'\nimport { idProp, RM } from '../tools/ramda'\nimport { FormDropdownSingle } from './forms/FormDropdownSingle'\n\ninterface IProps {\n  fieldName: XFieldName\n  colors: RoA<TColor>\n  isLoading: boolean\n  isClearable: boolean\n}\n\nexport type TColor = {\n  id: ID\n  color: string\n  code: string\n}\n\nconst ColorOption = styled.div`\n  background-color: ${({ color }: { color: string }) => color};\n  color: ${Colors.white};\n  width: 6rem;\n  padding: 0.4rem 1rem;\n  margin: 0;\n  height: 100%;\n`\n\nconst makeStyles = () => ({\n  option: base => ({\n    ...base,\n    padding: 0,\n    margin: 0,\n  }),\n  menu: base => ({\n    ...base,\n    width: '8rem',\n    maxWidth: '8rem',\n  }),\n  container: base => ({\n    ...base,\n    width: '100%',\n  }),\n})\n\nexport const ColorSelector: React.FC<IProps> = ({\n  fieldName,\n  colors,\n  isLoading,\n  isClearable,\n}) => {\n  return (\n    <FormDropdownSingle<QZoneColorsZoneColors>\n      fieldName={fieldName}\n      options={colors}\n      isLoading={isLoading}\n      isClearable={isClearable}\n      clearLabel={i18n.t`Clear`}\n      styles={makeStyles()}\n      defaultValue={RM.head(colors)}\n      getOptionValue={idProp}\n      formatOptionLabel={({ color, code }) => (\n        <ColorOption color={color}>{code}</ColorOption>\n      )}\n    />\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { useQMenuGuideDownload } from '../../../graph/generated'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nconst MenuGuideDownloadButton = styled(TouchButton)`\n  white-space: nowrap;\n  margin-left: 2rem;\n  & a {\n    text-decoration: none;\n    color: ${Colors.black};\n    padding: 1rem;\n  }\n`\n\nexport const MenuGuideDownload = observer(() => {\n  const { settings } = useRoot()\n  const { loading, data } = useQMenuGuideDownload(\n    { branchId: settings.branchId },\n    { fetchPolicy: 'cache-first' },\n  )\n  if (loading || !(data && data.companyBranch.foodMenuUrl)) {\n    return null\n  }\n  return (\n    <MenuGuideDownloadButton color={Colors.greyMiddle}>\n      <a\n        href={data.companyBranch.foodMenuUrl}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Trans>Menu codes manual</Trans>\n      </a>\n    </MenuGuideDownloadButton>\n  )\n})\n","import React from 'react'\nimport {\n  arrayMove,\n  SortableContainer,\n  SortableElement,\n  SortEndHandler,\n} from 'react-sortable-hoc'\nimport { TableRowProps } from 'react-virtualized'\n\nimport { DataTable, IDataTableProps } from '../atoms/DataTable'\n\ninterface ISortResult<T> {\n  item: T\n  items: RoA<T>\n  offset: number\n  oldIndex: number\n  newIndex: number\n}\n\nexport type TSortHandler<T> = (\n  result: ISortResult<T>,\n) => Promise<boolean> | void\n\ninterface IProps<T> extends IDataTableProps<T> {\n  items: RoA<T>\n  onSort?: TSortHandler<T>\n}\n\ninterface IState<T> {\n  sortedItems: RoA<T>\n}\n\nconst SortableTableRowRenderer = SortableElement(\n  ({ columns, style, className }: TableRowProps) => (\n    <div style={style} className={className}>\n      {columns}\n    </div>\n  ),\n)\n\nconst SortableDataTableContainer = SortableContainer(DataTable)\n\nexport class SortableDataTable<T> extends React.PureComponent<\n  IProps<T>,\n  IState<T>\n> {\n  state = { sortedItems: this.props.items }\n  static getDerivedStateFromProps = (nextProps: IProps<{}>) => {\n    return {\n      sortedItems: nextProps.items,\n    }\n  }\n  rowRenderer = rowProps => {\n    return <SortableTableRowRenderer {...rowProps} />\n  }\n  onHandleSorting: SortEndHandler = async ({ newIndex, oldIndex }) => {\n    if (newIndex === oldIndex) {\n      return\n    }\n    const currentItems = [...this.state.sortedItems]\n    const sortedItems = arrayMove(\n      this.state.sortedItems as T[],\n      oldIndex,\n      newIndex,\n    )\n\n    this.setState({ sortedItems })\n\n    if (this.props.onSort) {\n      const sortSuccess = this.props.onSort({\n        item: currentItems[oldIndex],\n        items: sortedItems,\n        offset: newIndex - oldIndex,\n        newIndex,\n        oldIndex,\n      })\n      if (sortSuccess && !(await sortSuccess)) {\n        this.setState({\n          sortedItems: currentItems,\n        })\n      }\n    }\n  }\n  render() {\n    const { items, ...props } = this.props\n    return (\n      <SortableDataTableContainer\n        lockAxis=\"y\"\n        useDragHandle={true}\n        onSortEnd={this.onHandleSorting}\n        rowRenderer={this.rowRenderer}\n        {...props}\n        items={this.state.sortedItems}\n      />\n    )\n  }\n}\n","import styled from 'styled-components/macro'\n\nexport const ColorBadgeMenu = styled.div<{ color?: string }>`\n  position: absolute;\n  top: 0.3rem;\n  bottom: 0.3rem;\n  width: 5px;\n  background-color: ${({ color }) => color};\n`\n","import React from 'react'\n\nimport {\n  checkColumnAccess,\n  Column,\n  ColumnRendererEdit,\n  ColumnRendererRemove,\n  ColumnRendererVisibility,\n  ColumnRendererWithNote,\n  DataTable,\n  DataTableEmptyText,\n  IDataTableProps,\n} from '../../../atoms/DataTable'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { FMenuCategoryInListFragment } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport {\n  SortableDataTable,\n  TSortHandler,\n} from '../../../molecules/SortableDataTable'\nimport { Spacing } from '../../../styling'\nimport { ColorBadgeMenu } from '../atoms/ColorBadgeMenu'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\n\ntype TCategory = FMenuCategoryInListFragment\n\ninterface IProps {\n  categories: RoA<TCategory>\n  isSortable?: boolean\n  isLoading?: boolean\n  showEditColumn?: boolean\n  showRemoveColumn?: boolean\n  showVisibilityColumn?: boolean\n  showColor?: boolean\n  showHeader?: boolean\n  onToggle?(categoryId: ID, visible: boolean): void\n  onRemove?(categoryId: ID): void\n  onSort?: TSortHandler<TCategory>\n  heightStretch?: boolean\n  fullHeight?: boolean\n  noRowsDisplay?: ReactNode\n}\n\nexport const CategoryListTable: React.FC<IProps> = ({\n  categories,\n  children,\n  onToggle,\n  onRemove,\n  onSort,\n  showEditColumn = true,\n  showRemoveColumn = false,\n  showVisibilityColumn = false,\n  showColor = false,\n  showHeader = true,\n  isSortable = false,\n  isLoading = false,\n  heightStretch = false,\n  fullHeight = false,\n  noRowsDisplay = <DataTableEmptyText text={i18n.t`No recipes in category`} />,\n}) => {\n  const props: IDataTableProps<TCategory> = {\n    isLoading,\n    items: categories,\n    disableHeader: !showHeader,\n    heightStretch,\n    fullHeight,\n    noRowsRenderer: () => noRowsDisplay,\n  }\n  const { getCategoryEditRoute } = useMenuRouting()\n  const columns = [\n    showEditColumn && (\n      <Column\n        dataKey=\"id\"\n        width={Spacing.ButtonColumnWidthPx}\n        minWidth={Spacing.ButtonColumnWidthPx}\n        cellRenderer={checkColumnAccess(\n          { canQuery: 'wareCategory' },\n          ColumnRendererEdit,\n        )}\n        cellDataGetter={({ rowData }) =>\n          getCategoryEditRoute(rowData.id, rowData.categoryType.enum)\n        }\n      />\n    ),\n    showRemoveColumn && (\n      <Column\n        dataKey=\"id\"\n        width={Spacing.ButtonColumnWidthPx}\n        minWidth={Spacing.ButtonColumnWidthPx}\n        cellRenderer={ColumnRendererRemove}\n        columnData={{ onRemove }}\n      />\n    ),\n    showVisibilityColumn && (\n      <Column\n        dataKey=\"visible\"\n        width={Spacing.ButtonColumnWidthPx}\n        minWidth={Spacing.ButtonColumnWidthPx}\n        cellRenderer={checkColumnAccess(\n          { canMutate: 'updateWareCategory' },\n          ColumnRendererVisibility,\n        )}\n        columnData={{ onToggle }}\n      />\n    ),\n    showColor && (\n      <Column\n        dataKey=\"color\"\n        width={5}\n        cellRenderer={({ rowData }) => (\n          <ColorBadgeMenu color={rowData.color?.color} />\n        )}\n      />\n    ),\n    <Column\n      dataKey=\"nameLabel\"\n      width={300}\n      label={i18n.t`Name`}\n      cellRenderer={ColumnRendererWithNote}\n      columnData={{ noteKey: 'internalNote' }}\n    />,\n    <Column\n      dataKey=\"countRecipes\"\n      label={i18n.t`Recipe count`}\n      width={100}\n      cellRenderer={({ cellData }) =>\n        `${cellData} ${i18n.t`Recipes`.toLocaleLowerCase()}`\n      }\n    />,\n    children,\n    isSortable && (\n      <Column dataKey=\"id\" width={50} cellRenderer={() => <DragHandle />} />\n    ),\n  ]\n\n  if (isSortable) {\n    return React.createElement(\n      // * Replacing this with Tabular will fix this\n      // @ts-ignore\n      SortableDataTable,\n      {\n        onSort: onSort as any,\n        ...props,\n      },\n      ...columns,\n    )\n  }\n\n  return React.createElement(DataTable, props, ...columns)\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Column } from '../../../atoms/DataTable'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { Headline } from '../../../atoms/Headline'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport {\n  OrderOriginCategoryEnum,\n  useMMenuCategorySort,\n  useMMenuCategoryVisibility,\n  useQMenuCategoryList,\n  useQMenuCategoryOrigins,\n  WareCategoryTypeEnum,\n} from '../../../graph/generated'\nimport { Colors } from '../../../styling'\nimport { MenuCreateButton } from '../atoms/MenuCreateButton'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { CategoryListTable } from '../molecules/CategoryListTable'\n\ninterface IProps {\n  headline: string\n  subHeadline?: string\n  categoryType: WareCategoryTypeEnum\n  heightStretch?: boolean\n}\n\nconst StyledCategoryList = styled.div`\n  .origins span {\n    display: inline-block;\n    margin: 0.2rem;\n    padding: 0.2rem;\n    background-color: ${Colors.greyLight};\n  }\n`\n\nconst CategoryList: React.FC<IProps> = ({\n  headline,\n  subHeadline = false,\n  categoryType,\n}) => {\n  const { settings } = useRoot()\n  const { getStash, loading, updateQuery, refetch } = useQMenuCategoryList({\n    branchId: settings.branchId,\n    categoryType,\n  })\n\n  const { data: dataOrigins } = useQMenuCategoryOrigins(\n    {},\n    { fetchPolicy: 'cache-first' },\n  )\n\n  const originsMap = React.useMemo(() => {\n    if (dataOrigins && dataOrigins.origins) {\n      return dataOrigins.origins.reduce((acc, origin) => {\n        acc[origin.enum] = origin.code\n        return acc\n      }, {}) as Record<OrderOriginCategoryEnum, string>\n    }\n    return {} as Record<OrderOriginCategoryEnum, string>\n  }, [dataOrigins])\n\n  const renderOrigins = React.useCallback(\n    ({ cellData }) => {\n      cellData.sort()\n      return cellData.map(originEnum => (\n        <span key={originEnum}>{originsMap[originEnum]}</span>\n      ))\n    },\n    [originsMap],\n  )\n\n  const [changeVisibility] = useMMenuCategoryVisibility()\n  const onVisibilityToogle = React.useCallback(\n    (categoryId: ID, visible: boolean) => {\n      changeVisibility(\n        { categoryId, visible },\n        {\n          optimisticResponse: {\n            updateWareCategory: {\n              __typename: 'WareCategory',\n              id: categoryId,\n              visible,\n            },\n          },\n        },\n      )\n    },\n    [changeVisibility],\n  )\n\n  const [sortCategory] = useMMenuCategorySort()\n  const onSort = React.useCallback(\n    async ({ item, items, offset }) => {\n      updateQuery(() => ({\n        categories: items,\n      }))\n      const result = await sortCategory({\n        categoryId: item.id,\n        offset,\n      })\n      if (result) {\n        await refetch()\n        return result.success\n      }\n      return false\n    },\n    [refetch, sortCategory, updateQuery],\n  )\n\n  const categories = getStash(data => data.categories)\n\n  const { getCategoryCreateRoute } = useMenuRouting()\n\n  return (\n    <StyledCategoryList>\n      <FlexRowSingle>\n        <FlexColumn widthGrowIndex={1}>\n          <Headline>{headline}</Headline>\n          {subHeadline && <Headline size=\"smaller\">{subHeadline}</Headline>}\n        </FlexColumn>\n        <FlexColumn fixedWidth={true}>\n          <MenuCreateButton routeTo={getCategoryCreateRoute(categoryType)} />\n        </FlexColumn>\n      </FlexRowSingle>\n      <CategoryListTable\n        isLoading={loading}\n        categories={categories || []}\n        onToggle={onVisibilityToogle}\n        isSortable={true}\n        showHeader={false}\n        showColor={true}\n        fullHeight={true}\n        showVisibilityColumn={true}\n        onSort={onSort}\n      >\n        <Column\n          dataKey=\"origins\"\n          width={300}\n          className=\"origins\"\n          cellRenderer={renderOrigins}\n          style={{ fontSize: '0.8rem' }}\n        />\n      </CategoryListTable>\n    </StyledCategoryList>\n  )\n}\n\nexport default observer(CategoryList)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../../../atoms/Card'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { WareCategoryTypeEnum } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { SettingsCompanyBranchPicker } from '../../settings/organisms/SettingsCompanyBranchPicker'\nimport { ROUTE_SETTINGS } from '../../settings/settings.routes'\nimport { MenuGuideDownload } from '../molecules/MenuGuideDownload'\nimport CategoryList from '../organisms/CategoryList'\n\nexport const PartialDataTableContainer = styled.div`\n  height: calc(100% - 3.5rem);\n  padding-top: 1rem;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  -webkit-overflow-scrolling: touch;\n`\n\nexport const MenuCategoryListPage: React.FC = () => (\n  <FullPageLayout\n    pageTitle={i18n.t`Category overview`}\n    useBackButton\n    backRoute={ROUTE_SETTINGS}\n  >\n    <PageLayoutFullHeightItem forcePercentHeightInMobile={100}>\n      <Card stretchToParent={true}>\n        <FlexRowSingle justify=\"start\">\n          <FlexColumn>\n            <SettingsCompanyBranchPicker width={20} />\n          </FlexColumn>\n          <FlexColumn>\n            <MenuGuideDownload />\n          </FlexColumn>\n        </FlexRowSingle>\n\n        <PartialDataTableContainer>\n          <CategoryList\n            categoryType={WareCategoryTypeEnum.Main}\n            headline={i18n.t`Category of recipes`}\n          />\n\n          <VerticalGap size={1.5} />\n\n          <CategoryList\n            categoryType={WareCategoryTypeEnum.SideDish}\n            headline={i18n.t`Category of sidedish`}\n          />\n\n          <VerticalGap size={1.5} />\n\n          <CategoryList\n            categoryType={WareCategoryTypeEnum.Cover}\n            headline={i18n.t`Category of covers`}\n          />\n        </PartialDataTableContainer>\n        {/* <VerticalGap size={1.5} />\n      <Trans>\n        <Headline>Recipes without category</Headline>\n        <Headline size=\"smaller\">are not visible anywhere</Headline>\n      </Trans> */}\n      </Card>\n    </PageLayoutFullHeightItem>\n  </FullPageLayout>\n)\n","import styled from 'styled-components'\n\nimport { Colors, Radiuses } from '../styling'\n\nexport const TopRightButtonContainer = styled.div`\n  position: fixed;\n  z-index: 500;\n  right: 0.5rem;\n  top: 0.5rem;\n  width: 10rem;\n  opacity: 0.96;\n  background: ${Colors.black};\n  border-radius: ${Radiuses.Button};\n`\n","import { useXFieldState } from '@speedlo/xform'\n\nimport { TMenuItemType } from '../menu.types'\n\nexport function useMenuItemType() {\n  const field = useXFieldState<TMenuItemType>('itemType')\n  return field.value\n}\n","import React from 'react'\n\nimport { WareCategoryTypeEnum } from '../../../graph/generated'\nimport { useMenuItemType } from '../hooks/useMenuItemType'\n\ninterface IProps {\n  isMain?: boolean\n  isSideDish?: boolean\n  isCover?: boolean\n  children: ReactNode | ReactNode[]\n}\n\nexport const IsMenuItemType: React.FC<IProps> = ({\n  isMain,\n  isSideDish,\n  isCover,\n  children,\n}) => {\n  const itemType = useMenuItemType()\n  if (\n    (isMain === true && itemType === WareCategoryTypeEnum.Main) ||\n    (isSideDish === true && itemType === WareCategoryTypeEnum.SideDish) ||\n    (isCover === true && itemType === WareCategoryTypeEnum.Cover)\n  ) {\n    return <>{children}</>\n  }\n  return null\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { FormSubmitButton } from '../../../components/forms/FormSubmitButton'\nimport { useCanMutate } from '../../../hooks/useAccessGuard'\n\ninterface IProps {\n  isCreate: boolean\n  createMutation: string\n  updateMutation: string\n}\n\nexport const MenuSubmitButton: React.FC<IProps> = ({\n  isCreate,\n  createMutation,\n  updateMutation,\n}) => {\n  const canSubmit = useCanMutate(isCreate ? createMutation : updateMutation)\n  if (!canSubmit) {\n    return null\n  }\n\n  return (\n    <FormSubmitButton>\n      {isCreate ? <Trans>Create</Trans> : <Trans>Save</Trans>}\n    </FormSubmitButton>\n  )\n}\n","import { useXFieldState } from '@speedlo/xform'\nimport React from 'react'\n\nimport { LanguageEnum } from '../../../graph/generated'\nimport { RM } from '../../../tools/ramda'\nimport { useMenuModel } from './useMenu'\n\nconst byLanguage = RM.propEq('language')\n\nexport interface WithLanguage {\n  language: LanguageEnum\n}\n\nexport interface WithTranslations<T extends WithLanguage> {\n  translations: T[]\n}\n\nexport function useMenuTranslations<T extends WithLanguage>() {\n  const menuModel = useMenuModel()\n  const field = useXFieldState<WithLanguage[]>('translations')\n  const translations = field.value\n\n  const findTranslation = React.useCallback(\n    (language: LanguageEnum): T | undefined => {\n      return (\n        translations &&\n        (translations.find(byLanguage(language)) as T | undefined)\n      )\n    },\n    [translations],\n  )\n\n  const getTranslation = React.useCallback(\n    (language: LanguageEnum): T => {\n      return findTranslation(language)!\n    },\n    [findTranslation],\n  )\n\n  const initTranslation = React.useCallback(\n    (language: LanguageEnum, translated: Omit<T, 'language'>): T => {\n      const translation = findTranslation(language)\n      if (!translation) {\n        translations.push({ language, ...translated })\n        return getTranslation(language)\n      }\n      return translation\n    },\n    [findTranslation, getTranslation, translations],\n  )\n\n  const hasTranslation = React.useCallback(\n    (language: LanguageEnum) => {\n      return !!findTranslation(language)\n    },\n    [findTranslation],\n  )\n\n  const shouldLoadTranslation = React.useCallback(() => {\n    return !(\n      menuModel.isDefaultLanguageSelected ||\n      hasTranslation(menuModel.currentLanguage)\n    )\n  }, [hasTranslation, menuModel])\n\n  return {\n    shouldLoadTranslation,\n    findTranslation,\n    hasTranslation,\n    getTranslation,\n    initTranslation,\n  }\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useQMenuCategoryFormTrans } from '../../../graph/generated'\nimport { useMenuModel } from '../hooks/useMenu'\nimport { useMenuTranslations } from '../hooks/useMenuTranslations'\n\ntype TProps = NoChildren & {\n  categoryId: ID\n  isCreate: boolean\n}\n\nexport const CategoryTranslationLoader = observer<TProps>(\n  ({ categoryId, isCreate }) => {\n    const menuModel = useMenuModel()\n    const { shouldLoadTranslation, initTranslation } = useMenuTranslations()\n\n    const language = menuModel.currentLanguage\n    const { getStash } = useQMenuCategoryFormTrans(\n      { language, categoryId },\n      { fetchPolicy: 'no-cache', skip: isCreate || !shouldLoadTranslation() },\n    )\n\n    const translated = getStash(\n      ({ category: { nameLabel, internalNoteLabel } }) => ({\n        nameLabel,\n        internalNoteLabel,\n      }),\n    )\n\n    React.useEffect(() => {\n      if (translated) {\n        initTranslation(language, translated)\n      }\n    }, [initTranslation, language, translated])\n\n    return null\n  },\n)\n","import { TValidationSchema, XFormRender } from '@speedlo/xform'\nimport React from 'react'\n\nimport { useFormLoader } from '../../../components/forms/useFormLoader'\n\ninterface IProps<TValues> {\n  isCreate: boolean\n  initialValues: TValues\n  loadUpdateValues(values: TValues): Promise<Partial<TValues> | undefined>\n  loadCreateDefaults?(values: TValues): Promise<Partial<TValues> | undefined>\n  onCreate(values: TValues): Promise<any>\n  onUpdate(values: TValues): Promise<any>\n  createSuccessMessage?: string\n  updateSuccessMessage?: string\n  successRedirectPath?: string\n  validationSchema: TValidationSchema\n  children: ReactNode | ReactNode[]\n}\n\nexport function MenuFormLoader<TValues>({\n  isCreate,\n  initialValues,\n  loadCreateDefaults,\n  loadUpdateValues,\n  onCreate,\n  onUpdate,\n  createSuccessMessage,\n  updateSuccessMessage,\n  successRedirectPath,\n  validationSchema,\n  children,\n}: IProps<TValues>) {\n  const xform = useFormLoader({\n    initialValues,\n    validationSchema,\n    onSubmit: isCreate ? onCreate : onUpdate,\n    loadValues: isCreate ? loadCreateDefaults : loadUpdateValues,\n    submitMessage: isCreate ? createSuccessMessage : updateSuccessMessage,\n    submitRedirectPath: successRedirectPath,\n  })\n  return <XFormRender xform={xform}>{children}</XFormRender>\n}\n","import { useObjectValidation } from '@speedlo/xform'\nimport React from 'react'\n\nimport {\n  useLazyQMenuCategoryForm,\n  useMMenuCategoryCreate,\n  useMMenuCategoryUpdate,\n  WareCategoryTypeEnum,\n} from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { idProp } from '../../../tools/ramda'\nimport { useMenuModel } from '../hooks/useMenu'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { ROUTE_MENU_CATEGORY } from '../menu.routes'\nimport { TCategoryFormValues } from '../menu.types'\nimport { CategoryTranslationLoader } from '../molecules/CategoryTranslationLoader'\nimport { MenuFormLoader } from '../molecules/MenuFormLoader'\n\ninterface IProps {\n  isCreate: boolean\n  categoryId: ID\n  categoryType: WareCategoryTypeEnum\n  children: ReactNode\n}\n\nexport const CategoryFormLoader: React.FC<IProps> = ({\n  isCreate,\n  categoryId,\n  categoryType,\n  children,\n}) => {\n  const menuModel = useMenuModel()\n  const { redirectToCategoryList } = useMenuRouting()\n\n  const validationSchema = useObjectValidation(yup => ({\n    nameLabel: yup\n      .string()\n      .required(i18n.t`Category name in default language must be entered.`),\n  }))\n\n  const [queryCategory] = useLazyQMenuCategoryForm()\n  const loadUpdateValues = React.useCallback(\n    async (values: TCategoryFormValues) => {\n      const result = await queryCategory(\n        { categoryId: categoryId!, language: menuModel.defaultLanguage },\n        { fetchPolicy: 'no-cache' },\n      )\n      if (result === null) {\n        redirectToCategoryList()\n        return values\n      }\n      return {\n        ...result.category,\n        itemType: categoryType,\n        origins: [...result.category.origins],\n        color: result.category.color?.id,\n      }\n    },\n    [\n      categoryId,\n      categoryType,\n      menuModel.defaultLanguage,\n      queryCategory,\n      redirectToCategoryList,\n    ],\n  )\n\n  const [updateCategory] = useMMenuCategoryUpdate()\n  const executeUpdate = React.useCallback(\n    (categoryId: ID, values: TCategoryFormValues) =>\n      updateCategory({\n        categoryId,\n        category: {\n          ...getWriteVariables(values),\n          translations: values.translations,\n        },\n      }),\n    [updateCategory],\n  )\n\n  const onUpdate = React.useCallback(\n    (values: TCategoryFormValues) => executeUpdate(categoryId, values),\n    [categoryId, executeUpdate],\n  )\n\n  const [createCategory] = useMMenuCategoryCreate()\n  const onCreate = React.useCallback(\n    async (values: TCategoryFormValues) => {\n      const result = await createCategory({\n        category: {\n          companyBranch: menuModel.branchId,\n          wareCategoryType: categoryType,\n          ...getWriteVariables(values),\n        },\n      })\n      if (result && values.translations && values.translations.length > 0) {\n        const categoryId = result.createCategory.id\n        executeUpdate(categoryId, values)\n      }\n    },\n    [categoryType, createCategory, executeUpdate, menuModel],\n  )\n\n  return (\n    <MenuFormLoader<TCategoryFormValues>\n      isCreate={isCreate}\n      onCreate={onCreate}\n      onUpdate={onUpdate}\n      initialValues={getDefaults(categoryType)}\n      loadUpdateValues={loadUpdateValues}\n      validationSchema={validationSchema}\n      successRedirectPath={ROUTE_MENU_CATEGORY}\n    >\n      <>\n        <CategoryTranslationLoader\n          categoryId={categoryId}\n          isCreate={isCreate}\n        />\n        {children}\n      </>\n    </MenuFormLoader>\n  )\n}\n\nfunction getDefaults(categoryType: WareCategoryTypeEnum): TCategoryFormValues {\n  return {\n    id: 'NEW',\n    itemType: categoryType,\n    visible: true,\n    internalNoteLabel: '',\n    pictogram: '',\n    nameLabel: '',\n    minCount: 0,\n    maxCount: 0,\n    recipes: [],\n    origins: [],\n    translations: [],\n    color: null,\n  }\n}\n\nfunction getWriteVariables(formValues: TCategoryFormValues) {\n  return {\n    nameLabel: formValues.nameLabel!,\n    internalNoteLabel: formValues.internalNoteLabel,\n    enabled: formValues.visible,\n    pictogram: formValues.pictogram,\n    recipes: formValues.recipes.map(idProp),\n    minCount: formValues.minCount,\n    maxCount: formValues.maxCount,\n    orderOriginCategories: formValues.origins,\n    wareCategoryColor: formValues.color,\n  }\n}\n","import { useRouterContext } from '@speedlo/hooks'\nimport { useXField, useXFormState, XFieldName } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useAccessGuard } from '../../hooks/useAccessGuard'\nimport { TouchButtonDelete } from '../../molecules/TouchButtonDelete'\n\ntype TProps = NoChildren & {\n  fieldName?: XFieldName\n  mutationName?: string\n  confirmText: string\n  onDelete(id: ID): Promise<any>\n}\n\nexport const FormDeleteButton = observer<TProps>(\n  ({ fieldName = 'id', mutationName, confirmText, onDelete }) => {\n    const field = useXField<ID>(fieldName)\n    const canDelete = useAccessGuard([], mutationName ? [mutationName] : [])\n\n    const { history } = useRouterContext()\n    const { isSubmitting } = useXFormState()\n\n    if (!canDelete || field.value === 'NEW') {\n      return null\n    }\n\n    return (\n      <TouchButtonDelete\n        type=\"button\"\n        disabled={isSubmitting}\n        confirmText={confirmText}\n        onDelete={async () => {\n          await onDelete(field.value)\n          history.goBack()\n        }}\n      />\n    )\n  },\n)\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { mediaMobile } from '../../../app/Responsive'\nimport { Spacing } from '../../../styling'\n\ninterface IStyledProps {\n  primaryColumnWidth?: string\n  secondaryColumnWidth?: string\n}\n\ninterface IProps extends IStyledProps {\n  contentPrimary: React.ReactNode\n  contentSecondary?: React.ReactNode\n  contentTopRight?: React.ReactNode\n  contentBottomRight?: React.ReactNode\n}\n\nconst StyledFormLayoutGrid = styled.div<IStyledProps>`\n  display: grid;\n  margin: -${Spacing.Middle};\n  grid-column-gap: ${Spacing.Middle};\n  grid-template-columns: ${Spacing.Middle} ${({ primaryColumnWidth }) =>\n      primaryColumnWidth} ${({ secondaryColumnWidth }) => secondaryColumnWidth} auto;\n  grid-template-rows: ${Spacing.Middle} auto 1fr auto ${Spacing.Middle};\n  grid-template-areas:\n    '. .              .                contentTopRight'\n    '. contentPrimary contentSecondary contentTopRight'\n    '. contentPrimary contentSecondary .'\n    '. contentPrimary contentSecondary contentBottomRight'\n    '. .              .                contentBottomRight';\n\n  .contentPrimary {\n    grid-area: contentPrimary;\n  }\n  .contentSecondary {\n    grid-area: contentSecondary;\n  }\n  .contentTopRight {\n    grid-area: contentTopRight;\n    justify-self: end;\n    align-self: start;\n  }\n  .contentBottomRight {\n    grid-area: contentBottomRight;\n    justify-self: end;\n    align-self: end;\n  }\n\n  ${mediaMobile`\n    grid-template-columns: ${Spacing.Middle} 1fr ${Spacing.Middle};\n    grid-template-rows: auto auto auto auto;\n    grid-row-gap: ${Spacing.Middle};\n    grid-template-areas:\n      '. contentTopRight    contentTopRight'\n      '. contentPrimary     .'\n      '. contentSecondary   .'\n      '. contentBottomRight contentBottomRight'\n  `};\n`\n\nexport const FormLayoutGrid: React.FC<IProps> = ({\n  contentPrimary,\n  contentSecondary,\n  contentTopRight,\n  contentBottomRight,\n  primaryColumnWidth = '1fr',\n  secondaryColumnWidth = '0',\n}) => {\n  return (\n    <StyledFormLayoutGrid\n      primaryColumnWidth={primaryColumnWidth}\n      secondaryColumnWidth={secondaryColumnWidth}\n    >\n      <div className=\"contentPrimary\">{contentPrimary}</div>\n      <div className=\"contentSecondary\">{contentSecondary}</div>\n      <div className=\"contentTopRight\">{contentTopRight}</div>\n      <div className=\"contentBottomRight\">{contentBottomRight}</div>\n    </StyledFormLayoutGrid>\n  )\n}\n","import React from 'react'\n\nimport { ColorSelector } from '../../../components/ColorSelector'\nimport { useQMenuCategoryColors } from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\n\nexport const CategoryColorField: React.FC = () => {\n  const { getStash, loading } = useQMenuCategoryColors()\n  return (\n    <ColorSelector\n      fieldName=\"color\"\n      isLoading={loading}\n      isClearable={true}\n      colors={getStash(data => data.colors) ?? ARRAY_EMPTY}\n    />\n  )\n}\n","import React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormDropdownMulti } from '../../../components/forms/FormDropdownMulti'\nimport {\n  QMenuCategoryOriginsOrigins,\n  useQMenuCategoryOrigins,\n} from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\nimport { i18n } from '../../../i18n'\nimport { RM } from '../../../tools/ramda'\n\nexport const CategoryOriginsField: React.FC = () => {\n  const { data, loading } = useQMenuCategoryOrigins()\n  return (\n    <IconLine label={i18n.t`cat. origins`} labelWidth={7}>\n      <FormDropdownMulti<QMenuCategoryOriginsOrigins>\n        fieldName=\"origins\"\n        isLoading={loading}\n        options={data ? data.origins : ARRAY_EMPTY}\n        getOptionLabel={RM.prop('code')}\n        getOptionValue={RM.prop('enum')}\n      />\n    </IconLine>\n  )\n}\n","import { pictograms as availablePictograms } from '@speedlo/assets'\nimport { useXField } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { PictogramDisplay } from '../../../atoms/PictogramDisplay'\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { RM } from '../../../tools/ramda'\nimport { TCategoryFormValues } from '../menu.types'\n\ninterface IProps {}\n\ninterface IFormValue {\n  pictogram: string\n}\n\nexport const CategoryPictogramSelect: React.FC<IProps> = () => {\n  const field = useXField<TCategoryFormValues['pictogram']>('pictogram')\n\n  return useObserver(() => (\n    <SelectControl<IFormValue>\n      value={field.value ? { pictogram: field.value } : null}\n      onChange={value => {\n        if (value) {\n          field.setValue((value as IFormValue).pictogram)\n        }\n      }}\n      options={availablePictograms.map(pictogram => ({ pictogram }))}\n      getOptionValue={RM.prop('pictogram')}\n      formatOptionLabel={({ pictogram }) => (\n        <PictogramDisplay pictogramId={pictogram} fontSize={2} />\n      )}\n      components={{\n        SingleValue: ({ data }) => (\n          <PictogramDisplay pictogramId={data.pictogram} fontSize={4} />\n        ),\n      }}\n      styles={{\n        container: base => ({ ...base, width: '100%', margin: 0 }),\n        menuList: base => ({ ...base, maxHeight: '35rem' }),\n      }}\n      isClearable={false}\n      isSearchable={false}\n      minWidth={8}\n    />\n  ))\n}\n","import { getFlag } from '@speedlo/assets'\nimport { useXFieldForInput, useXFormState, XFieldName } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { StyledFormInput } from '../../../atoms/FormInputStyled'\nimport { i18n } from '../../../i18n'\nimport { useMenuModel } from '../hooks/useMenu'\nimport { useMenuTranslations } from '../hooks/useMenuTranslations'\n\ninterface IProps {\n  fieldName: XFieldName\n  placeholder?: string\n}\n\nconst StyledMenuTranslationInput = styled.div`\n  position: relative;\n\n  .original {\n    font-size: 0.9rem;\n    padding: 0.3rem 0;\n    opacity: 0.7;\n  }\n\n  .original img {\n    width: 1.5rem;\n    margin: 0 0.6rem;\n  }\n\n  .current-language {\n    width: 1.5rem;\n    position: absolute;\n    right: 0.5rem;\n    top: 0.8rem;\n    border: 1px #aaa solid;\n    box-sizing: content-box;\n  }\n`\n\nexport const MenuTranslationInput = observer<IProps>(\n  ({ fieldName, placeholder }) => {\n    const { isSubmitting } = useXFormState()\n    const [field, getFieldProps] = useXFieldForInput(fieldName)\n    const menuModel = useMenuModel()\n\n    const { getTranslation, findTranslation } = useMenuTranslations()\n\n    const onChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n      const value = ev.target.value\n      const translation = getTranslation(menuModel.currentLanguage)\n      translation[field.name] = value\n    }\n\n    const isTranslating = !menuModel.isDefaultLanguageSelected\n\n    const translation = findTranslation(menuModel.currentLanguage)\n    const value = isTranslating\n      ? translation && translation[field.name]\n      : field.value\n\n    const fieldProps = getFieldProps()\n\n    return (\n      <StyledMenuTranslationInput>\n        <StyledFormInput\n          {...fieldProps}\n          disabled={isSubmitting}\n          value={value || ''}\n          onChange={isTranslating ? onChange : fieldProps.onChange}\n          inputFullWidth={true}\n          invalid={!isTranslating && field.touched && field.hasError}\n          placeholder={placeholder}\n        />\n        <img\n          className=\"current-language\"\n          src={getFlag(menuModel.currentLanguage)}\n          alt=\"translation\"\n        />\n        {isTranslating && (\n          <div\n            className=\"original\"\n            onClick={() => menuModel.setLanguage(menuModel.defaultLanguage)}\n          >\n            <img src={getFlag(menuModel.defaultLanguage)} alt=\"original text\" />\n            {field.value || <i>{i18n.t`No text is filled`}</i>}\n          </div>\n        )}\n      </StyledMenuTranslationInput>\n    )\n  },\n)\n","import { Trans } from '@lingui/macro'\nimport { XFieldName } from '@speedlo/xform'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormInput } from '../../../components/forms/FormInput'\nimport { MenuTranslationInput } from '../atoms/MenuTranslationInput'\n\ninterface IProps {\n  fieldName?: XFieldName\n  label?: string\n  placeholder?: string\n  localized?: boolean\n}\n\nexport const MenuInternalNoteInput: React.FC<IProps> = ({\n  fieldName = 'internalNote',\n  label = <Trans>Internal note</Trans>,\n  placeholder,\n  localized = false,\n}) => {\n  const props = {\n    fieldName,\n    placeholder,\n    fullWidth: true,\n  }\n  return (\n    <IconLine label={label} labelWidth={7}>\n      {localized ? (\n        <MenuTranslationInput {...props} />\n      ) : (\n        <FormInput {...props} />\n      )}\n    </IconLine>\n  )\n}\n","import { LanguagePicker } from '@speedlo/ui'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { Colors } from '../../../styling'\nimport { RM } from '../../../tools/ramda'\nimport { useMenuModel } from '../hooks/useMenu'\n\ninterface IProps {}\n\nconst StyledLanguagePicker = styled(LanguagePicker)`\n  transform: scale(2) translateY(0.5rem);\n  transform-origin: right;\n  height: 2.5rem;\n`\n\nexport const MenuLanguageSwitch = observer<IProps>(() => {\n  const menuModel = useMenuModel()\n  return (\n    <div>\n      <StyledLanguagePicker\n        availableLanguages={menuModel.supportedLanguages}\n        selectedLanguage={menuModel.currentLanguage}\n        onChange={menuModel.setLanguage}\n        formatLanguage={RM.identity}\n        arrowColor={Colors.greyMiddle}\n      />\n    </div>\n  )\n})\n","import { Label } from '@material-ui/icons'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormInput, FormInputProps } from '../../../components/forms/FormInput'\nimport { Spacing } from '../../../styling'\nimport { MenuTranslationInput } from '../atoms/MenuTranslationInput'\n\ninterface IProps extends Partial<FormInputProps> {\n  localized?: boolean\n}\n\nexport const MenuNameInput: React.FC<IProps> = ({\n  fieldName = 'nameLabel',\n  localized = false,\n  ...rest\n}) => {\n  const props = {\n    fieldName,\n    ...rest,\n  }\n  return (\n    <IconLine icon={Label} labelWidth={Spacing.DefaultLabelWidth}>\n      {localized ? (\n        <MenuTranslationInput {...props} />\n      ) : (\n        <FormInput {...props} />\n      )}\n    </IconLine>\n  )\n}\n","import React from 'react'\n\nimport { FormGrid } from '../../../atoms/FormGrid'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormDeleteButton } from '../../../components/forms/FormDeleteButton'\nimport { FormCheckbox } from '../../../components/forms/FormInputCheckbox'\nimport { useMMenuCategoryDelete } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { FormLayoutGrid } from '../atoms/FormLayoutGrid'\nimport { IsMenuItemType } from '../atoms/IsMenuItemType'\nimport { CategoryColorField } from '../molecules/CategoryColorField'\nimport { CategoryOriginsField } from '../molecules/CategoryOriginsField'\nimport { CategoryPictogramSelect } from '../molecules/CategoryPictogramSelect'\nimport { MenuInternalNoteInput } from '../molecules/MenuInternalNoteField'\nimport { MenuLanguageSwitch } from '../molecules/MenuLanguageSwitch'\nimport { MenuNameInput } from '../molecules/MenuNameInput'\n\ninterface IProps {}\n\nexport const CategoryFormPrimary: React.FC<IProps> = () => {\n  const [deleteCategory] = useMMenuCategoryDelete()\n  return (\n    <FormLayoutGrid\n      primaryColumnWidth=\"minmax(10rem, 45rem)\"\n      secondaryColumnWidth=\"14rem\"\n      contentPrimary={\n        <FormGrid>\n          <MenuNameInput placeholder={i18n.t`Category name`} localized />\n          <MenuInternalNoteInput\n            placeholder={i18n.t`Category internal note`}\n            fieldName=\"internalNoteLabel\"\n            localized\n          />\n          <CategoryOriginsField />\n          <IconLine>\n            <FormCheckbox\n              fieldName=\"visible\"\n              label={i18n.t`To show this category`}\n            />\n          </IconLine>\n        </FormGrid>\n      }\n      contentSecondary={\n        <IsMenuItemType isMain>\n          <CategoryPictogramSelect />\n          <CategoryColorField />\n        </IsMenuItemType>\n      }\n      contentTopRight={<MenuLanguageSwitch />}\n      contentBottomRight={\n        <FormDeleteButton\n          mutationName=\"destroyWareCategory\"\n          confirmText={i18n.t`Remove this category?`}\n          onDelete={categoryId => deleteCategory({ categoryId })}\n        />\n      }\n    />\n  )\n}\n","import { useObserver } from 'mobx-react-lite'\n\nimport { useRoot } from '../atoms/RootProvider'\n\nexport function useSettingsBranch() {\n  const { settings } = useRoot()\n  return useObserver(() => settings.branchId)\n}\n","import { useStateRef } from '@speedlo/hooks'\nimport React, { useCallback } from 'react'\n\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport {\n  SelectControl,\n  TSelectControlProps,\n} from '../../../atoms/SelectControl'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { RM } from '../../../tools/ramda'\n\ninterface IProps<OptionType> extends TSelectControlProps<OptionType> {\n  onAdd(option: OptionType): void\n  addLabel?: string\n  addButtonText?: string\n  isLoading?: boolean\n}\n\nexport function MenuSuggestionPanel<\n  OptionType extends { id: ID; nameLabel: Maybe<string> }\n>(props: IProps<OptionType>) {\n  const {\n    onAdd,\n    addLabel = i18n.t`Add`,\n    addButtonText = i18n.t`Add`,\n    isLoading = false,\n    ...selectProps\n  } = props\n\n  const [getSelected, setSelected] = useStateRef<Maybe<OptionType>>(null)\n\n  const onConfirm = useCallback(() => {\n    const selected = getSelected()\n    if (selected !== null) {\n      onAdd(selected)\n      setSelected(null)\n    }\n  }, [getSelected, onAdd, setSelected])\n\n  const onKeyDown = useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>) => {\n      if (ev.key === 'Enter') {\n        onConfirm()\n      }\n    },\n    [onConfirm],\n  )\n\n  const onSelect = useCallback(\n    option => {\n      setSelected(option || null)\n    },\n    [setSelected],\n  )\n\n  return (\n    <FlexRowSingle justify=\"flex-start\">\n      <FlexColumn fixedWidth={true} width=\"4rem\" margin=\"auto 0\">\n        {addLabel}\n      </FlexColumn>\n      <FlexColumn fixedWidth={true} width=\"20rem\" margin=\"auto 0\">\n        <SelectControl<OptionType>\n          value={getSelected()}\n          onChange={onSelect}\n          onKeyDown={onKeyDown}\n          isLoading={isLoading}\n          isMulti={false}\n          isClearable={false}\n          getOptionValue={RM.prop('id')}\n          getOptionLabel={RM.propOr('', 'nameLabel')}\n          {...selectProps}\n        />\n      </FlexColumn>\n      <FlexColumn fixedWidth={true} width=\"10rem\" margin=\"auto 0\">\n        <TouchButton\n          text={addButtonText}\n          disabled={getSelected() === null}\n          onClick={onConfirm}\n        />\n      </FlexColumn>\n    </FlexRowSingle>\n  )\n}\n","import React from 'react'\n\nimport { WarePriceTypeEnum } from '../../../graph/generated'\nimport { getPriceTypesLabels } from '../menu.labels'\n\nexport const priceTypes = [\n  WarePriceTypeEnum.Delivery,\n  WarePriceTypeEnum.Inhouse,\n]\n\nexport function usePriceType() {\n  const priceTypeLabels = React.useMemo(getPriceTypesLabels, [])\n  return {\n    priceTypes,\n    priceTypeLabels,\n  }\n}\n","import { useXField, useXFormState } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport {\n  arrayMove,\n  SortableContainer,\n  SortableElement,\n  SortEndHandler,\n} from 'react-sortable-hoc'\nimport styled from 'styled-components/macro'\n\nimport { mediaDesktop, useResponsive } from '../../../app/Responsive'\nimport { DataList } from '../../../atoms/DataList'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { NoteText } from '../../../atoms/NoteText'\nimport {\n  FMenuCategoryInFormRecipes,\n  FMenuRecipeInListFragment,\n  useQMenuRecipeList,\n} from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\nimport { formatPrice } from '../../../helpers/formats'\nimport { RM } from '../../../tools/ramda'\nimport { useSettingsBranch } from '../../../hooks/useSettingsBranch'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonRemove } from '../../../molecules/TouchButtonRemove'\nimport { Spacing } from '../../../styling'\nimport { idPropEq } from '../../../tools/ramda'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\nimport { useMenuItemType } from '../hooks/useMenuItemType'\nimport { usePriceType } from '../hooks/usePriceType'\n\ninterface IProps {}\n\nconst StyledCategoryRecipesView = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100% - 2rem);\n  width: 100%;\n\n  & .fixed-row {\n    flex: 0 0 auto;\n  }\n  & .move-cell {\n    ${mediaDesktop`\n      cursor: move;\n    `}\n  }\n`\n\nconst StyledFormStretchedRow = styled.div`\n  flex: 1 1 0;\n  margin: 1rem 0 0 1rem;\n`\n\nconst SortableRecipes = SortableContainer(StyledFormStretchedRow)\n\nconst StyledRecipeRow = styled.div`\n  display: grid;\n  grid-gap: 1rem;\n  grid-template-columns: ${Spacing.ButtonColumnWidthPx}px 100px 3fr 1fr 1fr 50px;\n`\n\ntype TCategoryRecipe = FMenuCategoryInFormRecipes\n\ninterface IRecipeRow {\n  recipe: TCategoryRecipe\n  onRemove(): void\n}\n\nconst SortableRecipe = SortableElement(({ recipe, onRemove }: IRecipeRow) => {\n  const { priceTypes, priceTypeLabels } = usePriceType()\n  const prices = priceTypes.map(priceType => {\n    const foundPrice = recipe.prices.find(\n      RM.pathEq(['priceType', 'enum'], priceType),\n    )\n    return (\n      <div className=\"move-cell\" key={priceType}>\n        <NoteText>{priceTypeLabels[priceType]}</NoteText>\n        {foundPrice ? (\n          formatPrice(foundPrice.price.value, foundPrice.price.currency.code)\n        ) : (\n          <i>{i18n.t`Not set`.toLocaleLowerCase()}</i>\n        )}\n      </div>\n    )\n  })\n\n  return (\n    <StyledRecipeRow>\n      <div>\n        <TouchButtonRemove onClick={onRemove} />\n      </div>\n      <div className=\"move-cell\">{recipe.code}</div>\n      <div className=\"move-cell\">\n        {recipe.nameLabel}\n        <NoteText>{recipe.internalNote || ''}</NoteText>\n      </div>\n      {prices}\n      <DragHandle />\n    </StyledRecipeRow>\n  )\n})\n\nexport const CategoryRecipesView: React.FC<IProps> = () => {\n  const branchId = useSettingsBranch()\n  const categoryType = useMenuItemType()\n\n  const { data, loading } = useQMenuRecipeList({\n    branchId,\n    categoryType,\n  })\n\n  const field = useXField<TCategoryRecipe[]>('recipes')\n\n  const onHandleSorting: SortEndHandler = React.useCallback(\n    async ({ newIndex, oldIndex }) => {\n      if (newIndex === oldIndex) {\n        return\n      }\n      field.setValue(arrayMove(field.value, oldIndex, newIndex))\n    },\n    [field],\n  )\n\n  const unselectedRecipesOnly = RM.differenceWith<\n    FMenuRecipeInListFragment,\n    TCategoryRecipe\n  >(RM.eqProps('id'))\n\n  const { isDesktop } = useResponsive()\n  const formState = useXFormState()\n\n  return useObserver(() => (\n    <StyledCategoryRecipesView>\n      <div className=\"fixed-row\">\n        <MenuSuggestionPanel<TCategoryRecipe>\n          isLoading={loading}\n          isDisabled={formState.isSubmitting}\n          options={\n            data\n              ? unselectedRecipesOnly(data.recipes, field.value)\n              : ARRAY_EMPTY\n          }\n          onAdd={addedRecipe => field.value.push(addedRecipe)}\n          getOptionLabel={({ nameLabel, code }) => `${code} - ${nameLabel}`}\n        />\n      </div>\n      <SortableRecipes\n        lockAxis=\"y\"\n        lockToContainerEdges={true}\n        onSortEnd={onHandleSorting}\n        useDragHandle={!isDesktop}\n      >\n        <DataList\n          items={field.value}\n          heightStretch={true}\n          rowHeight={60}\n          renderItem={(recipe, index) => (\n            <SortableRecipe\n              recipe={recipe}\n              onRemove={() => {\n                field.setValue(RM.reject(idPropEq(recipe.id), field.value))\n              }}\n              index={index}\n            />\n          )}\n        />\n      </SortableRecipes>\n    </StyledCategoryRecipesView>\n  ))\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { FormInputStyled } from '../../../atoms/FormInputStyled'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { StyledCheckbox } from '../../../atoms/StyledCheckbox'\nimport { TouchButton } from '../../../molecules/TouchButton'\n\ninterface IProps {\n  id: string\n  count: number\n  label: ReactNode | string\n  enabled: boolean\n  onChange(count: number): void\n}\n\nconst StyledCategoryRequirementControl = styled.div`\n  display: flex;\n  align-items: center;\n  & > label {\n    min-width: 5rem;\n  }\n  & > * {\n    margin: 0.2rem 0.5rem;\n  }\n  input.count {\n    font-size: 1.5rem;\n    line-height: 1.5rem;\n    text-align: center;\n  }\n`\n\nexport const CategoryRequirementControl: React.FC<IProps> = ({\n  count,\n  label,\n  enabled,\n  onChange,\n  id,\n}) => {\n  const countRef = React.useRef(count)\n  return (\n    <StyledCategoryRequirementControl>\n      <label htmlFor={id}>{label}</label>\n      <Sizer width={3}>\n        <FormInputStyled\n          id={id}\n          value={count === 0 ? '' : count}\n          onChange={ev => {\n            if (ev.target.validity.valid) {\n              onChange(Number.parseInt(ev.target.value, 10))\n            }\n          }}\n          onFocus={ev => {\n            ev.target.select()\n          }}\n          disabled={count === 0 || !enabled}\n          inputFullWidth={true}\n          type=\"tel\"\n          pattern=\"^[1-9]\\d*$\"\n          className=\"count\"\n        />\n      </Sizer>\n      <Sizer width={4}>\n        <TouchButton\n          disabled={!enabled || count <= 0}\n          onClick={() => onChange(count - 1)}\n        >\n          ➖\n        </TouchButton>\n      </Sizer>\n      <Sizer width={4}>\n        <TouchButton disabled={!enabled} onClick={() => onChange(count + 1)}>\n          ➕\n        </TouchButton>\n      </Sizer>\n      <div>\n        <StyledCheckbox>\n          <input\n            type=\"checkbox\"\n            id={`${id}-nolimit`}\n            checked={count === 0}\n            disabled={!enabled}\n            onChange={ev => {\n              if (count === 0) {\n                onChange(countRef.current || 1)\n              } else {\n                countRef.current = count\n                onChange(0)\n              }\n            }}\n          />\n          <label htmlFor={`${id}-nolimit`}>\n            <Trans>Unlimited</Trans>\n          </label>\n        </StyledCheckbox>\n      </div>\n    </StyledCategoryRequirementControl>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { useAutorun } from '@speedlo/hooks'\nimport { useXField } from '@speedlo/xform'\nimport _ from 'lodash'\nimport { observer, useLocalStore } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { SelectControlFlat } from '../../../atoms/SelectControlFlat'\nimport { i18n } from '../../../i18n'\nimport { CategoryRequirementControl } from '../molecules/CategoryRequirementControl'\n\ninterface IRequirement {\n  label: string\n  min?: number\n  max?: number\n}\n\nexport const getRulesMap = (): Record<string, IRequirement> => ({\n  noLimit: {\n    label: i18n.t`No limitation`,\n    min: 0,\n    max: 0,\n  },\n  optional: {\n    label: i18n.t`One at most`,\n    min: 0,\n    max: 1,\n  },\n  required: {\n    label: i18n.t`One at least`,\n    min: 1,\n    max: 0,\n  },\n  onlyOne: {\n    label: i18n.t`Exactly one`,\n    min: 1,\n    max: 1,\n  },\n  custom: {\n    label: i18n.t`Custom range`,\n  },\n})\n\ntype TRule = keyof ReturnType<typeof getRulesMap>\n\nexport const CategoryRequirementsForm = observer(() => {\n  const ruleMap = React.useMemo(getRulesMap, [])\n\n  const state = useLocalStore(() => ({\n    currentRule: 'noLimit' as TRule,\n  }))\n\n  const setRule = (rule: TRule) => {\n    state.currentRule = rule\n  }\n\n  const minCount = useXField<number>('minCount')\n  const maxCount = useXField<number>('maxCount')\n\n  useAutorun(() => {\n    if (state.currentRule !== 'custom') {\n      const found = _.findKey(\n        ruleMap,\n        ({ min, max }) => min === minCount.value && max === maxCount.value,\n      )\n      if (found) {\n        setRule(found)\n      }\n    }\n  })\n\n  return (\n    <>\n      <SelectControlFlat<TRule>\n        items={Object.keys(ruleMap) as RoA<TRule>}\n        formatItem={req => ruleMap[req].label}\n        onSingleSelection={selectedRule => {\n          if (selectedRule) {\n            setRule(selectedRule)\n            const rule = ruleMap[selectedRule]\n            minCount.setValue(rule.min || 0)\n            maxCount.setValue(rule.max || 0)\n          }\n        }}\n        selectedItem={state.currentRule}\n      />\n      <CategoryRequirementControl\n        id=\"minCount\"\n        count={minCount.value}\n        label={<Trans>Minimum</Trans>}\n        enabled={state.currentRule === 'custom'}\n        onChange={minCount.setValue}\n      />\n      <CategoryRequirementControl\n        id=\"maxCount\"\n        count={maxCount.value}\n        label={<Trans>Maximum</Trans>}\n        enabled={state.currentRule === 'custom'}\n        onChange={maxCount.setValue}\n      />\n    </>\n  )\n})\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport styled from 'styled-components/macro'\n\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { TopRightButtonContainer } from '../../../molecules/TopRightButtonContainer'\nimport { IsMenuItemType } from '../atoms/IsMenuItemType'\nimport { MenuSubmitButton } from '../atoms/MenuSubmitButton'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { getCategoryTypeLabel } from '../menu.labels'\nimport { CategoryFormLoader } from '../organisms/CategoryFormLoader'\nimport { CategoryFormPrimary } from '../organisms/CategoryFormPrimary'\nimport { CategoryRecipesView } from '../organisms/CategoryRecipesView'\nimport { CategoryRequirementsForm } from '../organisms/CategoryRequirementsForm'\n\ninterface IProps extends RouteComponentProps<{ categoryId: ID }> {}\n\nexport const FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n`\nexport const FormFixedRow = styled.div`\n  flex: 0 0 8rem;\n`\nexport const FormStretchedRow = styled.div`\n  flex: 1 1 0;\n  min-height: 0;\n  position: relative;\n`\n\nexport const MenuCategoryPage: React.FC<IProps> = ({ match }) => {\n  const { categoryId } = match.params\n  const {\n    isCreate,\n    itemType: categoryType,\n    redirectToCategoryList,\n  } = useMenuRouting(categoryId)\n\n  if (categoryType === null) {\n    redirectToCategoryList()\n    return null\n  }\n\n  return (\n    <CategoryFormLoader\n      isCreate={isCreate}\n      categoryId={categoryId}\n      categoryType={categoryType}\n    >\n      <FullPageLayout\n        pageTitle={getCategoryTypeLabel(categoryType)}\n        hideLogoutWidget={true}\n        useBackButton={true}\n      >\n        <PageLayoutFullHeightItem withScrollArea={true}>\n          <FormContainer>\n            <FormFixedRow>\n              <Card>\n                <CategoryFormPrimary />\n              </Card>\n            </FormFixedRow>\n            <IsMenuItemType isSideDish>\n              <FormFixedRow>\n                <Card>\n                  <Headline>\n                    <Trans>Required amounts of recipes to be picked</Trans>\n                  </Headline>\n                  <CategoryRequirementsForm />\n                </Card>\n              </FormFixedRow>\n            </IsMenuItemType>\n            <FormStretchedRow>\n              <Card stretchToParent={true} minHeight={25}>\n                <Headline>\n                  <Trans>Recipes assigned to this category</Trans>\n                </Headline>\n                <CategoryRecipesView />\n              </Card>\n            </FormStretchedRow>\n          </FormContainer>\n        </PageLayoutFullHeightItem>\n        <TopRightButtonContainer>\n          <MenuSubmitButton\n            isCreate={isCreate}\n            createMutation=\"createWareCategory\"\n            updateMutation=\"updateWareCategory\"\n          />\n        </TopRightButtonContainer>\n      </FullPageLayout>\n    </CategoryFormLoader>\n  )\n}\n","import { useXFormState } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport {\n  FMenuCategoryInListFragment,\n  useQMenuCategoryList,\n  WareCategoryTypeEnum,\n} from '../../../graph/generated'\nimport { RM } from '../../../tools/ramda'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\n\ninterface IProps {\n  categoryType?: WareCategoryTypeEnum\n  onAdd(recipe: TCategory): void\n  addButtonText: string\n  currentCategories: RoA<TCategory>\n}\n\ntype TCategory = FMenuCategoryInListFragment\n\nexport const CategorySuggestionPanel = observer<IProps>(\n  ({ categoryType, currentCategories, addButtonText, onAdd }) => {\n    const { settings } = useRoot()\n    const { data, loading } = useQMenuCategoryList({\n      branchId: settings.branchId,\n      categoryType,\n    })\n\n    const categories = (data && data.categories) || []\n\n    const { isSubmitting } = useXFormState()\n\n    return (\n      <MenuSuggestionPanel<TCategory>\n        isLoading={loading}\n        isDisabled={isSubmitting}\n        options={RM.without(currentCategories, categories)}\n        addButtonText={addButtonText}\n        onAdd={onAdd}\n      />\n    )\n  },\n)\n","import { useXField, XFieldName } from '@speedlo/xform'\nimport { IObservableArray } from 'mobx'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { DataTableEmptyText } from '../../../atoms/DataTable'\nimport {\n  FMenuCategoryInListFragment,\n  WareCategoryTypeEnum,\n} from '../../../graph/generated'\nimport { idPropEq } from '../../../tools/ramda'\nimport { CategoryListTable } from '../molecules/CategoryListTable'\nimport { CategorySuggestionPanel } from './CategorySuggestionPanel'\n\ninterface IProps {\n  categoryType?: WareCategoryTypeEnum\n  addButtonText: string\n  noRowsText: string\n  fieldName: XFieldName\n}\n\ntype TCategory = FMenuCategoryInListFragment\n\nexport const RecipeCategoryView: React.FC<IProps> = ({\n  categoryType,\n  addButtonText,\n  noRowsText,\n  fieldName,\n}) => {\n  const field = useXField<IObservableArray<TCategory>>(fieldName)\n  return useObserver(() => (\n    <>\n      <CategoryListTable\n        categories={Array.from(field.value)}\n        showRemoveColumn={true}\n        showEditColumn={false}\n        showHeader={false}\n        noRowsDisplay={<DataTableEmptyText text={noRowsText} />}\n        onRemove={categoryId =>\n          field.value.remove(field.value.find(idPropEq(categoryId))!)\n        }\n      />\n      <CategorySuggestionPanel\n        addButtonText={addButtonText}\n        categoryType={categoryType}\n        currentCategories={Array.from(field.value)}\n        onAdd={addedCategory => field.value.push(addedCategory)}\n      />\n    </>\n  ))\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useQMenuRecipeFormTrans } from '../../../graph/generated'\nimport { useMenuModel } from '../hooks/useMenu'\nimport { useMenuTranslations } from '../hooks/useMenuTranslations'\n\ntype TProps = NoChildren & {\n  recipeId: ID\n  isCreate: boolean\n}\n\nexport const RecipeTranslationLoader = observer<TProps>(\n  ({ recipeId, isCreate }) => {\n    const menuModel = useMenuModel()\n    const { shouldLoadTranslation, initTranslation } = useMenuTranslations()\n\n    const language = menuModel.currentLanguage\n    const { getStash } = useQMenuRecipeFormTrans(\n      { language, recipeId },\n      { fetchPolicy: 'no-cache', skip: isCreate || !shouldLoadTranslation() },\n    )\n\n    const translated = getStash(\n      ({ recipe: { nameLabel, descriptionLabel } }) => ({\n        nameLabel,\n        descriptionLabel,\n      }),\n    )\n\n    React.useEffect(() => {\n      if (translated) {\n        initTranslation(language, translated)\n      }\n    }, [initTranslation, language, translated])\n\n    return null\n  },\n)\n","import { disableBatching } from '@speedlo/graphql'\nimport { useObjectValidation } from '@speedlo/xform'\nimport React from 'react'\n\nimport {\n  InputRecipeImage,\n  QMenuRecipeDefaultsDefaults,\n  QMenuRecipeFormRecipe,\n  useLazyQMenuRecipeDefaults,\n  useLazyQMenuRecipeForm,\n  useMMenuRecipeCreate,\n  useMMenuRecipeUpdate,\n  WarePriceTypeEnum,\n} from '../../../graph/generated'\nimport {\n  fieldIsRequiredMsg,\n  validateAsNumberField,\n} from '../../../helpers/form'\nimport { formatNumber, formatPrice } from '../../../helpers/formats'\nimport { parseNumber } from '../../../helpers/numeral'\nimport { i18n } from '../../../i18n'\nimport { RM } from '../../../tools/ramda'\nimport { useMenuModel } from '../hooks/useMenu'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { priceTypes, usePriceType } from '../hooks/usePriceType'\nimport { ROUTE_MENU_RECIPE } from '../menu.routes'\nimport { TRecipeFormValues, TRecipeType } from '../menu.types'\nimport { MenuFormLoader } from '../molecules/MenuFormLoader'\nimport { RecipeTranslationLoader } from '../molecules/RecipeTranslationLoader'\n\ninterface IProps {\n  isCreate: boolean\n  recipeId: ID\n  recipeType: TRecipeType\n  children: ReactNode\n}\n\ntype FormValues = TRecipeFormValues\n\nexport const RecipeFormLoader: React.FC<IProps> = ({\n  isCreate,\n  recipeId,\n  recipeType,\n  children,\n}) => {\n  const menuModel = useMenuModel()\n  const { redirectToRecipeList } = useMenuRouting()\n  const { priceTypeLabels } = usePriceType()\n\n  const validationSchema = useObjectValidation(yup => ({\n    nameLabel: yup\n      .string()\n      .required(fieldIsRequiredMsg(i18n.t`Recipe name in default language`)),\n    code: yup.string().required(fieldIsRequiredMsg(i18n.t`Recipe code`)),\n    prices: yup.object(\n      mapPriceTypes(type => {\n        const priceType = priceTypeLabels[type].toLocaleLowerCase()\n        const fieldDescription = i18n.t`Recipe price for ${priceType}`\n        return yup.object({\n          value: validateAsNumberField(fieldDescription),\n        })\n      }),\n    ),\n  }))\n\n  const [queryDefaults] = useLazyQMenuRecipeDefaults()\n  const loadCreateDefaults = React.useCallback(async () => {\n    const result = await queryDefaults(\n      {\n        branchId: menuModel.branchId,\n      },\n      { fetchPolicy: 'cache-first' },\n    )\n    if (result !== null) {\n      return normalizeLoadedDefaults(result.defaults)\n    }\n    return\n  }, [menuModel, queryDefaults])\n\n  const [queryRecipe] = useLazyQMenuRecipeForm()\n  const loadUpdateValues = React.useCallback(async () => {\n    const result = await queryRecipe(\n      { recipeId: recipeId!, language: menuModel.defaultLanguage },\n      { fetchPolicy: 'no-cache' },\n    )\n    if (result === null) {\n      redirectToRecipeList()\n      return\n    }\n    return normalizeUpdateValues(result.recipe)\n  }, [menuModel.defaultLanguage, queryRecipe, recipeId, redirectToRecipeList])\n\n  const [updateRecipe] = useMMenuRecipeUpdate()\n  const executeUpdate = React.useCallback(\n    (recipeId: ID, values: FormValues) =>\n      updateRecipe(\n        {\n          recipeId,\n          recipe: {\n            ...getWriteVariables(values),\n            translations: values.translations,\n            image: getImageForUpdate(values),\n          },\n        },\n        disableBatching, // has to be disabled because of file upload\n      ),\n    [updateRecipe],\n  )\n\n  const onUpdate = React.useCallback(\n    (values: FormValues) => executeUpdate(recipeId, values),\n    [executeUpdate, recipeId],\n  )\n\n  const [createRecipe] = useMMenuRecipeCreate()\n  const onCreate = React.useCallback(\n    async (values: FormValues) => {\n      const result = await createRecipe(\n        {\n          recipe: {\n            ...getWriteVariables(values),\n            companyBranch: menuModel.branchId,\n            wareCategoryType: recipeType,\n            image: values.image,\n          },\n        },\n        disableBatching, // has to be disabled because of file upload\n      )\n      if (result && values.translations && values.translations.length > 0) {\n        const recipeId = result.recipe.id\n        executeUpdate(recipeId, values)\n      }\n    },\n    [createRecipe, executeUpdate, menuModel, recipeType],\n  )\n\n  return (\n    <MenuFormLoader<TRecipeFormValues>\n      isCreate={isCreate}\n      onCreate={onCreate}\n      onUpdate={onUpdate}\n      initialValues={getDefaults(recipeType)}\n      loadCreateDefaults={loadCreateDefaults}\n      loadUpdateValues={loadUpdateValues}\n      validationSchema={validationSchema}\n      successRedirectPath={ROUTE_MENU_RECIPE}\n    >\n      <>\n        {children}\n        <RecipeTranslationLoader recipeId={recipeId} isCreate={isCreate} />\n      </>\n    </MenuFormLoader>\n  )\n}\n\nfunction getWriteVariables(formValues: FormValues) {\n  return {\n    code: formValues.code,\n    nameLabel: formValues.nameLabel || '',\n    internalNote: formValues.internalNote,\n    descriptionLabel: formValues.descriptionLabel,\n    enabled: formValues.visible,\n    prices: Object.keys(formValues.prices).map(priceType => ({\n      warePriceType: (priceType as unknown) as WarePriceTypeEnum,\n      price: { value: parseNumber(formValues.prices[priceType].value) },\n      vat: formValues.prices[priceType].vatId,\n    })),\n    sideDishCategories: formValues.sideDishes.map(RM.prop('id')),\n    wareCategories: formValues.categories.map(RM.prop('id')),\n    associatedRecipes: formValues.associatedRecipes.map(\n      RM.pick(['associatedRecipe', 'warePriceType']),\n    ),\n    ingredients: formValues.ingredients.map(({ stockItem, quantity }) => {\n      return { stockItem, quantity: parseNumber(quantity) }\n    }),\n  }\n}\n\nfunction getImageForUpdate({ image }: FormValues): Maybe<InputRecipeImage> {\n  if (typeof image === 'string') {\n    // image did not change, do nothing\n    return null\n  }\n  if (image === null) {\n    return {\n      delete: true,\n    }\n  }\n  return {\n    file: image,\n    delete: false,\n  }\n}\n\nfunction mapPriceTypes<T>(acc: (priceType: WarePriceTypeEnum) => T) {\n  return priceTypes.reduce((result, priceType) => {\n    result[priceType] = acc(priceType)\n    return result\n  }, {}) as { [priceType in WarePriceTypeEnum]: T }\n}\n\nfunction getDefaults(recipeType: TRecipeType): FormValues {\n  return {\n    id: 'NEW',\n    itemType: recipeType,\n    visible: true,\n    code: '',\n    nameLabel: '',\n    internalNote: '',\n    internalCode: '',\n    descriptionLabel: '',\n    image: null,\n    prices: mapPriceTypes(() => ({\n      value: '0',\n      vatId: null,\n      currencyCode: '',\n    })),\n    associatedRecipes: [],\n    ingredients: [],\n    sideDishes: [],\n    categories: [],\n    translations: [],\n  }\n}\n\nfunction normalizeLoadedDefaults(\n  defaults: QMenuRecipeDefaultsDefaults,\n): Partial<FormValues> {\n  const vats = defaults.vats.reduce((acc, { vatId, priceType }) => {\n    acc[priceType.enum] = vatId\n    return acc\n  }, {})\n  return {\n    prices: mapPriceTypes(priceType => ({\n      value: '0',\n      vatId: vats[priceType],\n      currencyCode: defaults.currency.code,\n    })),\n  }\n}\n\nfunction normalizeUpdateValues(\n  recipeSource: QMenuRecipeFormRecipe,\n): Partial<FormValues> {\n  return {\n    ...recipeSource,\n    itemType: recipeSource.recipeType.enum,\n    internalNote: recipeSource.internalNote || '',\n    descriptionLabel: recipeSource.descriptionLabel || '',\n    associatedRecipes: recipeSource.sourceAssociatedRecipes.map(\n      ({ priceType, recipe }) => ({\n        warePriceType: priceType.enum,\n        nameLabel: recipe.nameLabel!,\n        associatedRecipe: recipe.id,\n        formattedPrice: '?',\n      }),\n    ),\n    ingredients: recipeSource.sourceIngredients.map(\n      ({ quantity, stockItem: { id, label, allergens, wareUnit } }) => ({\n        stockItem: id,\n        label,\n        quantity: formatNumber(quantity),\n        unitLabel: wareUnit.code,\n        allergens: allergens.map(RM.prop('enum')),\n      }),\n    ),\n    prices: mapPriceTypes(priceType => {\n      const sourcePrice = recipeSource.sourcePrices.find(\n        RM.pathEq(['priceType', 'enum'], priceType),\n      )\n      if (!sourcePrice) {\n        return {\n          value: '0',\n          vatId: null,\n          currencyCode: '',\n        }\n      }\n      return {\n        value: formatPrice(sourcePrice.price.value),\n        vatId: sourcePrice.vat.id,\n        currencyCode: sourcePrice.price.currency.code,\n      }\n    }),\n  }\n}\n","import { Toll } from '@material-ui/icons'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { FormInput, FormInputProps } from '../../../components/forms/FormInput'\n\ninterface IProps extends FormInputProps {}\n\nexport const MenuPriceField: React.FC<IProps> = ({ fieldName, ...props }) => (\n  <IconLine icon={Toll}>\n    <Sizer width={5}>\n      <FormInput fieldName={fieldName} fullWidth={true} {...props} />\n    </Sizer>\n  </IconLine>\n)\n","import { useXField, useXFormState, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport {\n  ISelectControlFlatProps,\n  SelectControlFlat,\n} from '../../atoms/SelectControlFlat'\nimport { idProp } from '../../tools/ramda'\n\ninterface IProps<ItemType>\n  extends Omit<\n    ISelectControlFlatProps<ItemType>,\n    | 'selectedItems'\n    | 'onMultiSelection'\n    | 'selectedItem'\n    | 'onSingleSelection'\n    | 'isMulti'\n  > {\n  fieldName: XFieldName\n  getItemId?: (item: ItemType) => ID\n}\n\nexport const FormFlatSingleSelect = <ItemType extends Record<string, unknown>>(\n  props: IProps<ItemType>,\n) => {\n  const {\n    items,\n    fieldName,\n    isClearable = false,\n    getItemId = idProp as AnyFunction,\n  } = props\n\n  const field = useXField(fieldName)\n  const formState = useXFormState()\n\n  return useObserver(() => (\n    <SelectControlFlat<ItemType>\n      selectedItem={\n        field.value && items.find(item => getItemId(item) === field.value)\n      }\n      onSingleSelection={item => {\n        field.setValue(item ? getItemId(item) : null)\n        field.setTouched()\n      }}\n      disabled={formState.isSubmitting}\n      isInvalid={field.hasError}\n      isClearable={isClearable}\n      isMulti={false}\n      {...props}\n    />\n  ))\n}\n","import { XFieldName } from '@speedlo/xform'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormFlatSingleSelect } from '../../../components/forms/FormFlatSingleSelect'\nimport { useQMenuVats } from '../../../graph/generated'\nimport { useSettingsBranch } from '../../../hooks/useSettingsBranch'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {\n  fieldName: XFieldName\n}\n\nexport const RecipeVatSelectField: React.FC<IProps> = ({ fieldName }) => {\n  const branchId = useSettingsBranch()\n  const { data } = useQMenuVats({ branchId }, { fetchPolicy: 'cache-first' })\n\n  if (!data) {\n    return null\n  }\n\n  return (\n    <IconLine label={`${i18n.t`VAT`}:`}>\n      <FormFlatSingleSelect\n        fieldName={fieldName}\n        items={data.vats}\n        formatItem={({ vat }) => `${vat}%`}\n      />\n    </IconLine>\n  )\n}\n","import React from 'react'\n\nimport {\n  Column,\n  ColumnRendererWithNote,\n  DataTable,\n} from '../../../atoms/DataTable'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonRemove } from '../../../molecules/TouchButtonRemove'\nimport { Spacing } from '../../../styling'\nimport { TAssocRecipe } from '../menu.types'\n\ninterface IProps {\n  recipes: TAssocRecipe[]\n  onRemove(recipeId: ID): void\n}\n\nexport const RecipeAssocListTable: React.FC<IProps> = ({\n  recipes,\n  onRemove,\n}) => (\n  <DataTable items={recipes} disableHeader={true}>\n    <Column\n      dataKey=\"associatedRecipe\"\n      width={Spacing.ButtonColumnWidthPx}\n      minWidth={Spacing.ButtonColumnWidthPx}\n      cellRenderer={({ cellData }) => (\n        <TouchButtonRemove onClick={() => onRemove(cellData)} />\n      )}\n    />\n    <Column\n      dataKey=\"nameLabel\"\n      width={300}\n      label={i18n.t`Name`}\n      cellRenderer={ColumnRendererWithNote}\n      columnData={{ noteKey: 'internalNote' }}\n    />\n    <Column dataKey=\"formattedPrice\" width={100} label={i18n.t`Price`} />\n  </DataTable>\n)\n","import { useXFieldState, useXFormState } from '@speedlo/xform'\nimport { IObservableArray } from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport {\n  FMenuAssocRecipeFragment,\n  useQMenuRecipeFormAssoc,\n} from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\nimport { RM } from '../../../tools/ramda'\nimport { useSettingsBranch } from '../../../hooks/useSettingsBranch'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\nimport { useMenuItemId } from '../hooks/useMenuItemId'\nimport { TAssocRecipe, TPriceType } from '../menu.types'\nimport { RecipeAssocListTable } from '../molecules/RecipeAssocListTable'\n\ninterface IProps {\n  priceType: TPriceType\n}\n\nexport const RecipeAssociatedView = observer<IProps>(({ priceType }) => {\n  const name = 'associatedRecipes'\n\n  const recipes = useXFieldState<IObservableArray<TAssocRecipe>>(name)\n\n  const recipeId = useMenuItemId()\n  const branchId = useSettingsBranch()\n\n  const { data, loading } = useQMenuRecipeFormAssoc({ branchId })\n\n  const isPriceType = RM.propEq('warePriceType', priceType)\n  const isAssocRecipe = RM.propEq('associatedRecipe')\n\n  const priceTypeRecipes = RM.filter(isPriceType, recipes.value)\n\n  const isAssociated = (id: ID) => priceTypeRecipes.some(isAssocRecipe(id))\n\n  const onAddRecipe = React.useCallback(\n    (addedRecipe: FMenuAssocRecipeFragment) => {\n      recipes.value.push({\n        warePriceType: priceType,\n        associatedRecipe: addedRecipe.id,\n        nameLabel: addedRecipe.nameLabel!,\n        formattedPrice: '?',\n      })\n    },\n    [priceType, recipes],\n  )\n\n  const onRemoveRecipe = React.useCallback(\n    (id: ID) => {\n      recipes.value.remove(\n        recipes.value.find(RM.both(isAssocRecipe(id), isPriceType))!,\n      )\n    },\n    [isAssocRecipe, isPriceType, recipes.value],\n  )\n\n  const { isSubmitting } = useXFormState()\n\n  const rejectSuggestion = (recipe: FMenuAssocRecipeFragment) =>\n    recipe.id === recipeId || isAssociated(recipe.id)\n\n  return (\n    <>\n      <RecipeAssocListTable\n        recipes={priceTypeRecipes}\n        onRemove={onRemoveRecipe}\n      />\n      <MenuSuggestionPanel\n        options={data ? RM.reject(rejectSuggestion, data.recipes) : ARRAY_EMPTY}\n        onAdd={onAddRecipe}\n        isLoading={loading}\n        isDisabled={isSubmitting}\n      />\n    </>\n  )\n})\n","import { useXFieldState } from '@speedlo/xform'\n\nexport const isCreateId = (id: ID) => id === 'NEW'\n\nexport function useMenuItemId() {\n  const field = useXFieldState<ID>('id')\n  return field.value\n}\n","import React, { Fragment } from 'react'\nimport styled from 'styled-components/macro'\n\nimport { FlexDiv } from '../../../atoms/FlexDiv'\nimport { Headline } from '../../../atoms/Headline'\nimport { MarginBox } from '../../../atoms/MarginBox'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { FormDisplayValue } from '../../../components/forms/FormDisplayValue'\nimport { IsMenuItemType } from '../atoms/IsMenuItemType'\nimport { usePriceType } from '../hooks/usePriceType'\nimport { MenuPriceField } from '../molecules/MenuPriceInput'\nimport { RecipeVatSelectField } from '../molecules/RecipeVatSelectField'\nimport { RecipeAssociatedView } from './RecipeAssociatedView'\n\ninterface IProps {}\n\nconst FormPricingCurrencyCode = styled(FormDisplayValue)`\n  padding: 0.5rem;\n`\n\nexport const RecipeFormPricing: React.FC<IProps> = () => {\n  const { priceTypes, priceTypeLabels } = usePriceType()\n  return (\n    <>\n      {priceTypes.map(priceType => {\n        const baseName = ['prices', priceType]\n        return (\n          <Fragment key={priceType}>\n            <Headline>{priceTypeLabels[priceType]}</Headline>\n            <FlexDiv>\n              <MenuPriceField fieldName={[...baseName, 'value']} />\n              <FormPricingCurrencyCode\n                fieldName={[...baseName, 'currencyCode']}\n              />\n              <MarginBox left={5}>\n                <RecipeVatSelectField fieldName={[...baseName, 'vatId']} />\n              </MarginBox>\n            </FlexDiv>\n            <VerticalGap />\n            <IsMenuItemType isMain>\n              <RecipeAssociatedView priceType={priceType} />\n              <VerticalGap />\n            </IsMenuItemType>\n          </Fragment>\n        )\n      })}\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { FormInput } from '../../../components/forms/FormInput'\nimport { Spacing } from '../../../styling'\n\ninterface IProps {\n  placeholder?: string\n}\n\nexport const MenuCodeInput: React.FC<IProps> = ({ placeholder }) => (\n  <IconLine label={<Trans>Code</Trans>} labelWidth={Spacing.DefaultLabelWidth}>\n    <Sizer width={9}>\n      <FormInput fieldName=\"code\" fullWidth={true} placeholder={placeholder} />\n    </Sizer>\n  </IconLine>\n)\n","import React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormInput } from '../../../components/forms/FormInput'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {}\n\nexport const MenuIdExternalSystem: React.FC<IProps> = props => {\n  return (\n    <IconLine label={i18n.t`External ID`} labelWidth={7}>\n      <FormInput fieldName=\"internalCode\" disabled={true} />\n    </IconLine>\n  )\n}\n","import React from 'react'\n\nimport { FormCheckbox } from '../../../components/forms/FormInputCheckbox'\n\ninterface IProps {\n  label: string\n}\n\nexport const MenuVisibilityField: React.FC<IProps> = ({ label }) => {\n  return <FormCheckbox fieldName=\"visible\" label={label} />\n}\n","import { cn } from '@speedlo/ui'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { AllergenEnum, useQMenuAllergens } from '../../../graph/generated'\nimport { Colors, Spacing } from '../../../styling'\n\ninterface IProps {\n  selected: RoA<AllergenEnum>\n  onToggle?(allergen: AllergenEnum): void\n}\n\nconst AllergenBox = styled.div`\n  float: left;\n  width: 2.3rem;\n  height: 2.3rem;\n  border: 1px solid ${Colors.greyMiddle};\n  margin: 0.3rem 0.6rem 0.3rem ${Spacing.MarginAroundFormComponents};\n  font-size: 1.5rem;\n  text-align: center;\n  vertical-align: middle;\n  cursor: default;\n  color: ${Colors.greyMiddle};\n  background-color: ${Colors.white};\n  &.active {\n    color: ${Colors.black};\n    background-color: ${Colors.yellow};\n  }\n`\n\nexport const MenuAllergenIndicator: React.FC<IProps> = ({\n  selected,\n  onToggle,\n}) => {\n  const { data, loading } = useQMenuAllergens(\n    {},\n    { fetchPolicy: 'cache-first' },\n  )\n  if (loading || !data) {\n    return null\n  }\n  return (\n    <>\n      {data.allergens.map(allergen => {\n        return (\n          <AllergenBox\n            key={allergen.enum}\n            title={allergen.code}\n            className={cn({ active: selected.includes(allergen.enum) })}\n            onClick={onToggle && (() => onToggle(allergen.enum))}\n          >\n            {allergen.category}\n          </AllergenBox>\n        )\n      })}\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { ErrorOutline } from '@material-ui/icons'\nimport { useXFieldState } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { RM } from '../../../tools/ramda'\nimport { Spacing } from '../../../styling'\nimport { MenuAllergenIndicator } from '../atoms/MenuAllergenIndicator'\nimport { TRecipeFormValues } from '../menu.types'\n\nconst StyledAllergenLabel = styled.div`\n  margin: 0.7rem 0 0 0.2rem;\n`\n\nexport const RecipeAllergenDisplay = observer(() => {\n  const field = useXFieldState<TRecipeFormValues['ingredients']>('ingredients')\n  const allergens = RM.uniq(\n    RM.flatten(RM.map(RM.prop('allergens'), field.value)),\n  )\n  return (\n    <IconLine labelWidth={Spacing.DefaultLabelWidth} icon={ErrorOutline}>\n      <StyledAllergenLabel>\n        <Trans>Allergens based on stock cards</Trans>\n      </StyledAllergenLabel>\n      <MenuAllergenIndicator selected={allergens} />\n    </IconLine>\n  )\n})\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\nimport { Spacing } from '../../../styling'\nimport { MenuTranslationInput } from '../atoms/MenuTranslationInput'\n\ninterface IProps {}\n\nexport const RecipeDescriptionInput: React.FC<IProps> = () => (\n  <IconLine\n    label={<Trans>Public note</Trans>}\n    labelWidth={Spacing.DefaultLabelWidth}\n  >\n    <MenuTranslationInput\n      fieldName=\"descriptionLabel\"\n      placeholder={i18n.t`Public note for customers, allergens`}\n    />\n  </IconLine>\n)\n","import 'react-image-crop/dist/ReactCrop.css'\n\nimport { Trans } from '@lingui/macro'\nimport {\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from '@material-ui/core'\nimport React from 'react'\nimport ReactCrop, { Crop } from 'react-image-crop'\n\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ntype TProps = NoChildren & {\n  image: File\n  onConfirm(blob: Blob): void\n  onCancel(): void\n}\n\nexport const ImageCropModal: React.FC<TProps> = ({\n  image,\n  onConfirm,\n  onCancel,\n}) => {\n  const [crop, setCrop] = React.useState<Crop>({\n    unit: '%',\n    width: 50,\n    aspect: 1,\n  })\n\n  const onChange = React.useCallback((crop: Crop) => {\n    setCrop(crop)\n  }, [])\n\n  const imageRef = React.useRef<HTMLImageElement>()\n\n  const onConfirmClick = React.useCallback(() => {\n    if (imageRef.current) {\n      // using \"any\" here as library will always fill up whole crop object\n      getCroppedBlob(imageRef.current, crop as any).then(onConfirm)\n    }\n  }, [crop, onConfirm])\n\n  const onImageLoaded = React.useCallback((image: HTMLImageElement) => {\n    imageRef.current = image\n    // * https://github.com/DominicTobias/react-image-crop/issues/306\n    // const cropSize = Math.min(image.width, image.height) / 2\n    // setCrop({\n    //   aspect: 1,\n    //   unit: 'px',\n    //   width: cropSize,\n    //   x: image.width / 2 - cropSize / 2,\n    //   y: image.height / 2 - cropSize / 2,\n    // })\n    // return false\n  }, [])\n\n  const imageSource = React.useMemo(() => URL.createObjectURL(image), [image])\n\n  React.useEffect(() => {\n    return () => {\n      URL.revokeObjectURL(imageSource)\n    }\n  }, [imageSource])\n\n  React.useEffect(() => {\n    return () => {\n      imageRef.current = undefined\n    }\n  }, [])\n\n  return (\n    <Dialog open fullWidth>\n      <DialogTitle>\n        <Trans>Choose the most significant part of the image</Trans>\n      </DialogTitle>\n      <DialogContent>\n        <ReactCrop\n          src={imageSource}\n          crop={crop}\n          onChange={onChange}\n          onImageLoaded={onImageLoaded}\n          keepSelection\n          ruleOfThirds\n          imageStyle={{ width: '100%' }}\n        />\n      </DialogContent>\n      <DialogActions>\n        <TouchButton onClick={onCancel}>\n          <Trans>Cancel</Trans>\n        </TouchButton>\n        <TouchButton onClick={onConfirmClick} color={Colors.green}>\n          <Trans>Confirm</Trans>\n        </TouchButton>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nfunction getCroppedBlob(\n  image: HTMLImageElement,\n  crop: Required<Crop>,\n): Promise<Blob> {\n  const canvas = document.createElement('canvas')\n  const scaleX = image.naturalWidth / image.width\n  const scaleY = image.naturalHeight / image.height\n  canvas.width = crop.width\n  canvas.height = crop.height\n\n  const ctx = canvas.getContext('2d')!\n  ctx.drawImage(\n    image,\n    crop.x * scaleX,\n    crop.y * scaleY,\n    crop.width * scaleX,\n    crop.height * scaleY,\n    0,\n    0,\n    crop.width,\n    crop.height,\n  )\n\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(blob => {\n      if (!blob) {\n        reject(new Error('Canvas is empty'))\n        return\n      }\n      resolve(blob)\n    }, 'image/jpeg')\n  })\n}\n","import { Trans } from '@lingui/macro'\nimport { useXField, useXFormState } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport styled from 'styled-components/macro'\n\nimport { useSnackBar } from '../../../hooks/useSnackBar'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Colors, Spacing } from '../../../styling'\nimport { TRecipeFormValues } from '../menu.types'\nimport { ImageCropModal } from './ImageCropModal'\n\nconst StyledRecipeImageUploader = styled.div`\n  border: 1px dotted ${Colors.greyMiddle};\n  background: ${Colors.white};\n  color: ${Colors.greyMiddle};\n  width: 16rem;\n  height: 16rem;\n  cursor: pointer;\n\n  & section {\n    height: 100%;\n    width: 100%;\n  }\n\n  & div.container {\n    height: 100%;\n    width: 100%;\n    padding: 0.4rem;\n  }\n\n  & img {\n    height: 100%;\n    width: 100%;\n    object-fit: contain;\n  }\n\n  & div.hint {\n    margin: 6rem 0;\n    text-align: center;\n  }\n\n  & .delete-button {\n    position: relative;\n    top: ${`-${Spacing.ButtonHeight}${Spacing.DefaultSizeUnit}`};\n    left: 12.5rem;\n  }\n`\n\nexport const RecipeImage = observer<NoChildren>(() => {\n  const { enqueueWarning } = useSnackBar()\n  const { isSubmitting } = useXFormState()\n\n  const [uploadedImage, setUploadedImage] = React.useState<Maybe<File>>()\n\n  const { isDragActive, getRootProps, getInputProps } = useDropzone({\n    disabled: isSubmitting,\n    accept: 'image/*',\n    multiple: false,\n    onDropAccepted: ([firstImage]) => {\n      setUploadedImage(firstImage)\n    },\n    onDropRejected: () => {\n      enqueueWarning(i18n.t`Supplied file is not recognized as image.`)\n    },\n  })\n\n  const field = useXField<TRecipeFormValues['image']>('image')\n\n  const imageDisplay = React.useMemo(() => {\n    const image = field.value\n    if (image === null) {\n      return null\n    }\n    if (typeof field.value !== 'string') {\n      return URL.createObjectURL(image)\n    } else {\n      return field.value\n    }\n  }, [field.value])\n\n  React.useEffect(() => {\n    return () => {\n      if (imageDisplay) {\n        URL.revokeObjectURL(imageDisplay)\n      }\n    }\n  }, [imageDisplay])\n\n  return (\n    <StyledRecipeImageUploader>\n      <section>\n        <div className=\"container\" {...getRootProps()}>\n          <input {...getInputProps()} />\n          {imageDisplay && <img src={imageDisplay} alt=\"\" />}\n          {imageDisplay === null && (\n            <div className=\"hint\">\n              {isDragActive ? (\n                <Trans>Drop the image here ...</Trans>\n              ) : (\n                <Trans>Click to select image or drop it here</Trans>\n              )}\n            </div>\n          )}\n        </div>\n      </section>\n      {imageDisplay && (\n        <TouchButtonDelete\n          type=\"button\"\n          disabled={isSubmitting}\n          onDelete={async () => {\n            field.setValue(null)\n          }}\n        />\n      )}\n      {uploadedImage && (\n        <ImageCropModal\n          image={uploadedImage}\n          onConfirm={blob => {\n            setUploadedImage(null)\n            field.setValue(blob)\n          }}\n          onCancel={() => {\n            setUploadedImage(null)\n          }}\n        />\n      )}\n    </StyledRecipeImageUploader>\n  )\n})\n","import React from 'react'\n\nimport { FormGrid } from '../../../atoms/FormGrid'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormDeleteButton } from '../../../components/forms/FormDeleteButton'\nimport { useMMenuRecipeDelete } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { Spacing } from '../../../styling'\nimport { FormLayoutGrid } from '../atoms/FormLayoutGrid'\nimport { IsMenuItemType } from '../atoms/IsMenuItemType'\nimport { MenuCodeInput } from '../molecules/MenuCodeInput'\nimport { MenuIdExternalSystem } from '../molecules/MenuIdExternalSystem'\nimport { MenuInternalNoteInput } from '../molecules/MenuInternalNoteField'\nimport { MenuLanguageSwitch } from '../molecules/MenuLanguageSwitch'\nimport { MenuNameInput } from '../molecules/MenuNameInput'\nimport { MenuVisibilityField } from '../molecules/MenuVisibilityField'\nimport { RecipeAllergenDisplay } from '../molecules/RecipeAllergenDisplay'\nimport { RecipeDescriptionInput } from '../molecules/RecipeDescriptionInput'\nimport { RecipeImage } from '../molecules/RecipeImage'\n\ninterface IProps {\n  isCreate: boolean\n}\n\nexport const RecipeFormPrimary: React.FC<IProps> = ({ isCreate }) => {\n  const [deleteRecipe] = useMMenuRecipeDelete()\n\n  return (\n    <FormLayoutGrid\n      primaryColumnWidth=\"minmax(24rem, 54rem)\"\n      secondaryColumnWidth=\"minmax(12rem, 30rem)\"\n      contentPrimary={\n        <FormGrid>\n          <MenuCodeInput placeholder={i18n.t`Recipe code`} />\n          <MenuNameInput placeholder={i18n.t`Recipe name`} localized />\n          <IsMenuItemType isMain>\n            <RecipeDescriptionInput />\n          </IsMenuItemType>\n          <MenuInternalNoteInput placeholder={i18n.t`Recipe internal note`} />\n          {!isCreate && <MenuIdExternalSystem />}\n          <IsMenuItemType isMain>\n            <RecipeAllergenDisplay />\n          </IsMenuItemType>\n          <IconLine labelWidth={Spacing.DefaultLabelWidth}>\n            <MenuVisibilityField label={i18n.t`To show this recipe`} />\n          </IconLine>\n        </FormGrid>\n      }\n      contentSecondary={<RecipeImage />}\n      contentTopRight={<MenuLanguageSwitch />}\n      contentBottomRight={\n        <FormDeleteButton\n          mutationName=\"destroyRecipe\"\n          confirmText={i18n.t`Remove this recipe?`}\n          onDelete={recipeId => deleteRecipe({ recipeId })}\n        />\n      }\n    />\n  )\n}\n","import React from 'react'\n\nimport {\n  Column,\n  ColumnRendererRemove,\n  DataTable,\n  DataTableEmptyText,\n} from '../../../atoms/DataTable'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { FormInput } from '../../../components/forms/FormInput'\nimport { i18n } from '../../../i18n'\nimport { Spacing } from '../../../styling'\nimport { TIngredient } from '../menu.types'\n\ninterface IProps {\n  ingredients: TIngredient[]\n  onRemove?(stockItemId: ID): void\n  isLoading?: boolean\n}\n\nexport const RecipeIngredientsTable: React.FC<IProps> = ({\n  ingredients,\n  onRemove,\n  isLoading = false,\n}) => (\n  <DataTable\n    isLoading={isLoading}\n    items={ingredients}\n    disableHeader={true}\n    noRowsRenderer={() => (\n      <DataTableEmptyText text={i18n.t`Recipe has no ingredients`} />\n    )}\n  >\n    <Column\n      dataKey=\"stockItem\"\n      width={Spacing.ButtonColumnWidthPx}\n      minWidth={Spacing.ButtonColumnWidthPx}\n      cellRenderer={ColumnRendererRemove}\n      columnData={{ onRemove }}\n    />\n    <Column dataKey=\"label\" width={300} label={i18n.t`Name`} />\n    <Column\n      dataKey=\"quantity\"\n      width={60}\n      label={i18n.t`Quantity`}\n      cellRenderer={({ rowIndex }) => (\n        <Sizer width={2.5}>\n          <FormInput\n            fieldName={['ingredients', String(rowIndex), 'quantity']}\n            fullWidth={true}\n          />\n        </Sizer>\n      )}\n    />\n    <Column dataKey=\"unitLabel\" width={100} label={i18n.t`Ware unit`} />\n  </DataTable>\n)\n\n// function validateQuantity(value: string) {\n//   const fieldName = i18n.t`Quantity`\n//   if (validator.isEmpty(value + '')) {\n//     return i18n.t`${fieldName} must be entered`\n//   }\n//   if (!validator.isFloat(value + '', { min: 0 })) {\n//     return i18n.t`${fieldName} must be a positive number`\n//   }\n//   return\n// }\n","import { useXField, useXFormState } from '@speedlo/xform'\nimport { observer, useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport {\n  FMenuStockItemFragment,\n  useQMenuStockList,\n} from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\nimport { RM } from '../../../tools/ramda'\nimport { useSettingsBranch } from '../../../hooks/useSettingsBranch'\nimport { i18n } from '../../../i18n'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\nimport { TIngredient, TRecipeFormValues } from '../menu.types'\nimport { RecipeIngredientsTable } from '../molecules/RecipeIngredientsTable'\n\ninterface IProps {\n  ingredients: TIngredient[]\n  onAdd(ingredient: TIngredient): void\n  onRemove(stockItemId: ID): void\n}\n\nconst unselectedStockOnly = RM.differenceWith(\n  ({ id }: FMenuStockItemFragment, { stockItem }: TIngredient) =>\n    id === stockItem,\n)\n\nexport const RecipeIngredientsControl = observer<IProps>(\n  ({ ingredients, onAdd, onRemove }) => {\n    const branchId = useSettingsBranch()\n    const { data, loading } = useQMenuStockList({\n      branchId,\n    })\n\n    const { isSubmitting } = useXFormState()\n\n    return (\n      <>\n        <RecipeIngredientsTable ingredients={ingredients} onRemove={onRemove} />\n        <MenuSuggestionPanel<FMenuStockItemFragment>\n          isLoading={loading}\n          isDisabled={isSubmitting}\n          addButtonText={i18n.t`Add ingredient`}\n          options={\n            data\n              ? unselectedStockOnly(data.stockItems, ingredients)\n              : ARRAY_EMPTY\n          }\n          onAdd={(addedStockItem: FMenuStockItemFragment) => {\n            onAdd({\n              stockItem: addedStockItem.id,\n              label: addedStockItem.nameLabel,\n              quantity: '1',\n              unitLabel: addedStockItem.wareUnit.code,\n              allergens: addedStockItem.allergens.map(RM.prop('enum')),\n            })\n          }}\n        />\n      </>\n    )\n  },\n)\n\nexport const RecipeIngredientsView = () => {\n  const field = useXField<TRecipeFormValues['ingredients']>('ingredients')\n  return useObserver(() => (\n    <RecipeIngredientsControl\n      ingredients={field.value}\n      onAdd={ingredient => {\n        field.value.push(ingredient)\n      }}\n      onRemove={stockItemId => {\n        field.value.splice(\n          field.value.findIndex(RM.propEq('stockItem', stockItemId)),\n          1,\n        )\n      }}\n    />\n  ))\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { MarginBox } from '../../../atoms/MarginBox'\nimport { NoteText } from '../../../atoms/NoteText'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { TopRightButtonContainer } from '../../../molecules/TopRightButtonContainer'\nimport { IsMenuItemType } from '../atoms/IsMenuItemType'\nimport { MenuSubmitButton } from '../atoms/MenuSubmitButton'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { getRecipeTypeLabel } from '../menu.labels'\nimport { TCategoryType } from '../menu.types'\nimport { RecipeCategoryView } from '../organisms/RecipeCategoryView'\nimport { RecipeFormLoader } from '../organisms/RecipeFormLoader'\nimport { RecipeFormPricing } from '../organisms/RecipeFormPricing'\nimport { RecipeFormPrimary } from '../organisms/RecipeFormPrimary'\nimport { RecipeIngredientsView } from '../organisms/RecipeIngredientsView'\n\ninterface IProps extends RouteComponentProps<{ recipeId: ID }> {}\n\nexport const MenuRecipePage: React.FC<IProps> = ({ match }) => {\n  const { recipeId } = match.params\n  const { isCreate, itemType, redirectToRecipeList } = useMenuRouting(recipeId)\n\n  if (itemType === null) {\n    redirectToRecipeList()\n    return null\n  }\n\n  return (\n    <RecipeFormLoader\n      isCreate={isCreate}\n      recipeId={recipeId}\n      recipeType={itemType}\n    >\n      <MarginBox right={1.25} bottom={4}>\n        <FullPageLayout\n          pageTitle={getRecipeTypeLabel(itemType)}\n          hideLogoutWidget={true}\n          useBackButton={true}\n        >\n          <Card>\n            <RecipeFormPrimary isCreate={isCreate} />\n          </Card>\n          <Card>\n            <RecipeFormPricing />\n          </Card>\n          <Card>\n            <Headline>\n              <Trans>Recipe ingredients</Trans>\n            </Headline>\n            <VerticalGap />\n            <RecipeIngredientsView />\n          </Card>\n          <IsMenuItemType isMain>\n            <Card>\n              <Headline>\n                <Trans>Sidedish categories</Trans>\n              </Headline>\n              <NoteText>\n                <Trans>These sidedish are presented with recipe</Trans>\n              </NoteText>\n              <RecipeCategoryView\n                fieldName=\"sideDishes\"\n                addButtonText={i18n.t`Attach sidedish category`}\n                noRowsText={i18n.t`Recipe has no sidedish category attached`}\n              />\n            </Card>\n            <Card>\n              <Headline>\n                <Trans>Category assignments</Trans>\n              </Headline>\n              <NoteText>\n                <Trans>Recipe is in these categories</Trans>\n              </NoteText>\n              <RecipeCategoryView\n                fieldName=\"categories\"\n                categoryType={TCategoryType.Main}\n                addButtonText={i18n.t`Add to category`}\n                noRowsText={i18n.t`Recipe is not in any category`}\n              />\n            </Card>\n          </IsMenuItemType>\n        </FullPageLayout>\n\n        <TopRightButtonContainer>\n          <MenuSubmitButton\n            isCreate={isCreate}\n            createMutation=\"createRecipe\"\n            updateMutation=\"updateRecipe\"\n          />\n        </TopRightButtonContainer>\n      </MarginBox>\n    </RecipeFormLoader>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { TableCellProps } from 'react-virtualized'\nimport styled from 'styled-components'\n\nimport {\n  checkColumnAccess,\n  Column,\n  ColumnRendererEdit,\n  DataTable,\n} from '../../../atoms/DataTable'\nimport { Loading } from '../../../atoms/Loading'\nimport { QMenuStockListStockItems } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { Spacing } from '../../../styling'\n\ntype TStockItem = QMenuStockListStockItems\n\ninterface IProps {\n  stockItems: RoA<TStockItem>\n  isLoading: boolean\n}\n\nconst StyledDataTable = styled(DataTable)`\n  [aria-label='grid']:focus {\n    outline: none;\n  }\n\n  [role='columnheader'] {\n    display: flex;\n    align-items: center;\n    overflow: hidden;\n  }\n`\n\nexport const StockListTable: React.FC<IProps> = observer(\n  ({ stockItems, isLoading }) => {\n    return (\n      <StyledDataTable\n        items={stockItems}\n        heightStretch={true}\n        noRowsRenderer={() =>\n          isLoading ? (\n            <Loading />\n          ) : (\n            <h3>\n              <Trans>Selected branch has no stock cards</Trans>\n            </h3>\n          )\n        }\n      >\n        <Column\n          dataKey=\"id\"\n          width={Spacing.ButtonColumnWidthPx}\n          minWidth={Spacing.ButtonColumnWidthPx}\n          cellRenderer={checkColumnAccess(\n            { canQuery: 'stockItem' },\n            ColumnRendererEdit,\n          )}\n        />\n        <Column dataKey=\"code\" width={100} label={i18n.t`Card code`} />\n        <Column\n          dataKey=\"nameLabel\"\n          width={300}\n          minWidth={30}\n          flexGrow={2}\n          label={i18n.t`Card name`}\n        />\n        <Column\n          dataKey=\"quantity\"\n          width={100}\n          label={i18n.t`Card stock`}\n          cellRenderer={stockWithUnit}\n        />\n        <Column\n          dataKey=\"allowNegativeValue\"\n          width={300}\n          label={i18n.t`Negative stock`}\n          cellRenderer={stockAllowNegative}\n        />\n        <Column dataKey=\"note\" width={300} label={i18n.t`Card note`} />\n      </StyledDataTable>\n    )\n  },\n)\n\nfunction stockWithUnit({ cellData, rowData }: TableCellProps) {\n  return `${cellData} ${rowData.wareUnit.code}`\n}\n\nfunction stockAllowNegative({ cellData }: TableCellProps) {\n  return cellData === true ? <Trans>Permitted</Trans> : <Trans>Forbidden</Trans>\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useQMenuStockList } from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\nimport { useMenuModel } from '../hooks/useMenu'\nimport { StockListTable } from './StockListTable'\n\ninterface IProps {}\n\nexport const StockListLoader = observer<IProps>(() => {\n  const menuModel = useMenuModel()\n  const { data, loading } = useQMenuStockList({\n    branchId: menuModel.branchId,\n  })\n\n  const filterItem = menuModel.filter.getPredicate({\n    partialMatch: ['code', 'nameLabel'],\n    exactMatch: ['plu'],\n  })\n\n  const stockItems = data ? data.stockItems.filter(filterItem) : ARRAY_EMPTY\n\n  return <StockListTable stockItems={stockItems} isLoading={loading} />\n})\n","import React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { SettingsCompanyBranchPicker } from '../../settings/organisms/SettingsCompanyBranchPicker'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { MenuCreateButton } from '../atoms/MenuCreateButton'\nimport { MenuFilterInput } from '../molecules/MenuFilterInput'\nimport { StockListLoader } from '../organisms/StockListLoader'\nimport { StyledFilterWithTableContainer } from './MenuRecipeListPage'\n\nexport const MenuStockListPage: React.FC = () => {\n  const { getStockCreateRoute } = useMenuRouting()\n  return (\n    <FullPageLayout pageTitle={i18n.t`Stock overview`} useBackButton={true}>\n      <PageLayoutFullHeightItem forcePercentHeightInMobile={100}>\n        <Card stretchToParent={true}>\n          <StyledFilterWithTableContainer>\n            <div className=\"filter\">\n              <FlexRowSingle justify=\"start\" flexWrap=\"wrap\">\n                <FlexColumn>\n                  <SettingsCompanyBranchPicker width={20} />\n                </FlexColumn>\n                <FlexColumn>\n                  <MenuFilterInput />\n                </FlexColumn>\n              </FlexRowSingle>\n              <CanMutate mutationName=\"createStockItem\">\n                <MenuCreateButton routeTo={getStockCreateRoute()} />\n              </CanMutate>\n            </div>\n            <div className=\"table\">\n              <StockListLoader />\n            </div>\n          </StyledFilterWithTableContainer>\n        </Card>\n      </PageLayoutFullHeightItem>\n    </FullPageLayout>\n  )\n}\n","import { useObjectValidation } from '@speedlo/xform'\nimport React from 'react'\n\nimport {\n  FieldStateEnum,\n  QMenuStockDefaultsDefaults,\n  QMenuStockFormStockItem,\n  useLazyQMenuStockDefaults,\n  useLazyQMenuStockForm,\n  useMMenuStockCreate,\n  useMMenuStockUpdate,\n} from '../../../graph/generated'\nimport { RM } from '../../../tools/ramda'\nimport { useMenuModel } from '../hooks/useMenu'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { ROUTE_MENU_STOCK } from '../menu.routes'\nimport { TStockFormValues } from '../menu.types'\nimport { MenuFormLoader } from '../molecules/MenuFormLoader'\n\ninterface IProps {\n  stockId: ID\n  isCreate: boolean\n  children: ReactNode\n}\n\nexport const StockFormLoader: React.FC<IProps> = ({\n  stockId,\n  isCreate,\n  children,\n}) => {\n  const menuModel = useMenuModel()\n  const { redirectToStockList } = useMenuRouting()\n\n  const validationSchema = useObjectValidation(yup => ({\n    code: yup.string().required(),\n    nameLabel: yup.string().required(),\n    wareUnit: yup.string().required(),\n    ingredients: yup.array().of(\n      yup.object({\n        quantity: yup.string().required(),\n      }),\n    ),\n  }))\n\n  const [queryDefaults] = useLazyQMenuStockDefaults()\n  const loadCreateDefaults = React.useCallback(\n    async (values: TStockFormValues) => {\n      const result = await queryDefaults({ branchId: menuModel.branchId })\n      if (result === null) {\n        return values\n      }\n      return {\n        ...values,\n        ...normalizeLoadedDefaults(result.defaults),\n      }\n    },\n    [menuModel, queryDefaults],\n  )\n\n  const [queryStock] = useLazyQMenuStockForm()\n  const loadUpdateValues = React.useCallback(\n    async (values: TStockFormValues) => {\n      const result = await queryStock({ stockId }, { fetchPolicy: 'no-cache' })\n      if (result === null) {\n        redirectToStockList()\n        return values\n      }\n      return {\n        ...normalizeUpdateValues(result.stockItem),\n      }\n    },\n    [queryStock, redirectToStockList, stockId],\n  )\n\n  const [createStock] = useMMenuStockCreate()\n  const onCreate = React.useCallback(\n    (values: TStockFormValues) =>\n      createStock({\n        stockItem: {\n          companyBranch: menuModel.branchId,\n          ...getWriteVariables(values),\n        },\n      }),\n    [createStock, menuModel],\n  )\n\n  const [updateStock] = useMMenuStockUpdate()\n  const onUpdate = React.useCallback(\n    (values: TStockFormValues) =>\n      updateStock({\n        stockId,\n        stockItem: getWriteVariables(values),\n      }),\n    [stockId, updateStock],\n  )\n\n  return (\n    <MenuFormLoader<TStockFormValues>\n      isCreate={isCreate}\n      onCreate={onCreate}\n      onUpdate={onUpdate}\n      initialValues={getDefaults()}\n      loadCreateDefaults={loadCreateDefaults}\n      loadUpdateValues={loadUpdateValues}\n      validationSchema={validationSchema}\n      successRedirectPath={ROUTE_MENU_STOCK}\n    >\n      {children}\n    </MenuFormLoader>\n  )\n}\n\nfunction getDefaults(): TStockFormValues {\n  return {\n    id: 'NEW',\n    internalNote: '',\n    nameLabel: '',\n    code: '',\n    plu: '',\n    note: '',\n    wareUnit: null,\n    quantity: 0,\n    allergens: [],\n    allowNegative: FieldStateEnum.Default,\n    allowNegativeDefault: FieldStateEnum.Default,\n  }\n}\n\nfunction normalizeLoadedDefaults(\n  defaults: QMenuStockDefaultsDefaults,\n): Partial<TStockFormValues> {\n  return {\n    allowNegativeDefault: getAllowNegativeDefault(defaults.allowNegative),\n  }\n}\n\nfunction normalizeUpdateValues(\n  stockItem: QMenuStockFormStockItem,\n): TStockFormValues {\n  return {\n    id: stockItem.id,\n    internalNote: 'TBD',\n    nameLabel: stockItem.nameLabel,\n    code: stockItem.code,\n    note: stockItem.note,\n    plu: stockItem.plu || '',\n    wareUnit: stockItem.wareUnit.enum,\n    quantity: stockItem.quantity,\n    allergens: stockItem.allergens.map(RM.prop('enum')),\n    allowNegative: stockItem.allowNegative,\n    allowNegativeDefault: getAllowNegativeDefault(\n      stockItem.companyBranch.allowNegative,\n    ),\n  }\n}\n\nfunction getAllowNegativeDefault(isEnabled: boolean) {\n  return isEnabled ? FieldStateEnum.Default : FieldStateEnum.Disabled\n}\n\nfunction getWriteVariables(formValues: TStockFormValues) {\n  return {\n    code: formValues.code,\n    label: formValues.nameLabel,\n    note: formValues.note,\n    plu: formValues.plu,\n    allergens: formValues.allergens,\n    wareUnit: formValues.wareUnit!,\n    allowNegative: formValues.allowNegative,\n  }\n}\n","import { ErrorOutline } from '@material-ui/icons'\nimport { useXField } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { AllergenEnum } from '../../../graph/generated'\nimport { RM } from '../../../tools/ramda'\nimport { MenuAllergenIndicator } from '../atoms/MenuAllergenIndicator'\n\ninterface IProps {}\n\nexport const StockAllergenField: React.FC<IProps> = () => {\n  const field = useXField<RoA<AllergenEnum>>('allergens')\n\n  const onToggle = React.useCallback(\n    (allergen: AllergenEnum) => {\n      const current = field.value\n      if (current.includes(allergen)) {\n        field.setValue(RM.without([allergen], current))\n      } else {\n        field.setValue([...current, allergen])\n      }\n    },\n    [field],\n  )\n\n  return useObserver(() => (\n    <IconLine icon={ErrorOutline} labelWidth={7}>\n      <MenuAllergenIndicator selected={field.value} onToggle={onToggle} />\n    </IconLine>\n  ))\n}\n","import { i18nMark } from '@lingui/core'\nimport { useXFormState } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormFlatSingleSelect } from '../../../components/forms/FormFlatSingleSelect'\nimport { FieldStateEnum } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { RM } from '../../../tools/ramda'\nimport { TStockFormValues } from '../menu.types'\n\nconst items = [\n  {\n    type: FieldStateEnum.Enabled,\n    label: i18nMark('Permit'),\n  },\n  {\n    type: FieldStateEnum.Disabled,\n    label: i18nMark('Forbid'),\n  },\n]\n\nexport const StockAllowNegativeField = observer(() => {\n  const { allowNegativeDefault } = useXFormState<TStockFormValues>().values\n  return (\n    <IconLine label={i18n.t`Negative stock`} labelWidth={7}>\n      <FormFlatSingleSelect\n        items={items}\n        fieldName=\"allowNegative\"\n        getItemId={RM.prop('type')}\n        formatItem={item => {\n          if (item.type === allowNegativeDefault) {\n            return (\n              <span>\n                {i18n._(item.label)}\n                <i>{` (${i18n.t`Is default setting`.toLocaleLowerCase()})`}</i>\n              </span>\n            )\n          }\n          return i18n._(item.label)\n        }}\n      />\n    </IconLine>\n  )\n})\n","import { Fingerprint } from '@material-ui/icons'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { FormInput } from '../../../components/forms/FormInput'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {}\n\nexport const StockPluField: React.FC<IProps> = () => (\n  <IconLine icon={Fingerprint} labelWidth={7}>\n    <Sizer width={9}>\n      <FormInput fieldName=\"plu\" fullWidth={true} placeholder={i18n.t`PLU`} />\n    </Sizer>\n  </IconLine>\n)\n","import { SelectAll } from '@material-ui/icons'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormDropdownSingle } from '../../../components/forms/FormDropdownSingle'\nimport {\n  QMenuWareUnitsWareUnits,\n  useQMenuWareUnits,\n} from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\nimport { i18n } from '../../../i18n'\nimport { RM } from '../../../tools/ramda'\n\ntype TWareUnits = QMenuWareUnitsWareUnits\n\nexport const StockWareUnitField: React.FC<NoChildren> = () => {\n  const { data, loading } = useQMenuWareUnits()\n  return (\n    <IconLine icon={SelectAll} labelWidth={7}>\n      <FormDropdownSingle<TWareUnits>\n        fieldName=\"wareUnit\"\n        isLoading={loading}\n        options={data ? data.wareUnits : ARRAY_EMPTY}\n        getOptionLabel={RM.prop('code')}\n        getOptionValue={RM.prop('enum')}\n        placeholder={i18n.t`Choose unit`}\n        width={12}\n      />\n    </IconLine>\n  )\n}\n","import React from 'react'\n\nimport { FormGrid } from '../../../atoms/FormGrid'\nimport { FormDeleteButton } from '../../../components/forms/FormDeleteButton'\nimport { useMMenuStockDelete } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { FormLayoutGrid } from '../atoms/FormLayoutGrid'\nimport { MenuCodeInput } from '../molecules/MenuCodeInput'\nimport { MenuInternalNoteInput } from '../molecules/MenuInternalNoteField'\nimport { MenuNameInput } from '../molecules/MenuNameInput'\nimport { StockAllergenField } from '../molecules/StockAllergenField'\nimport { StockAllowNegativeField } from '../molecules/StockAllowNegativeField'\nimport { StockPluField } from '../molecules/StockPluField'\nimport { StockWareUnitField } from '../molecules/StockWareUnitField'\n\nexport const StockFormPrimary: React.FC = () => {\n  const [deleteStockItem] = useMMenuStockDelete()\n  return (\n    <FormLayoutGrid\n      primaryColumnWidth=\"minmax(10rem, 54rem)\"\n      contentPrimary={\n        <FormGrid>\n          <MenuNameInput placeholder={i18n.t`Card name`} />\n          <MenuCodeInput placeholder={i18n.t`Card code`} />\n          <StockWareUnitField />\n          <StockPluField />\n          <MenuInternalNoteInput\n            fieldName=\"note\"\n            placeholder={i18n.t`Card note`}\n            label={i18n.t`Card note`}\n          />\n          <StockAllergenField />\n          <StockAllowNegativeField />\n        </FormGrid>\n      }\n      contentBottomRight={\n        <FormDeleteButton\n          mutationName=\"destroyStockItem\"\n          confirmText={i18n.t`Remove this card?`}\n          onDelete={stockId => deleteStockItem({ stockId })}\n        />\n      }\n    />\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { BlockLoader } from '../../../atoms/BlockLoader'\nimport { Column, ColumnRendererEdit, DataTable } from '../../../atoms/DataTable'\nimport { Headline } from '../../../atoms/Headline'\nimport { NoteText } from '../../../atoms/NoteText'\nimport { useQStockRecipes } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { ROUTE_MENU_RECIPE } from '../menu.routes'\n\ninterface IProps {\n  stockId: ID\n}\n\nexport const StockRecipesView: React.FC<IProps> = ({ stockId }) => {\n  const { getStash, loading } = useQStockRecipes({\n    stockId,\n  })\n\n  if (loading) {\n    return <BlockLoader />\n  }\n\n  const ingredients = getStash(data => data.stockItem.ingredients)\n\n  if (!ingredients || ingredients.length === 0) {\n    return (\n      <Headline>\n        <Trans>No recipes are using stock card</Trans>\n      </Headline>\n    )\n  }\n\n  return (\n    <>\n      <Headline>\n        <Trans>Recipes using this card</Trans>\n      </Headline>\n\n      <DataTable\n        items={[...ingredients]}\n        disableHeader={true}\n        fullHeight={true}\n      >\n        <Column\n          dataKey=\"\"\n          cellDataGetter={({ rowData }) => ({\n            pathname: `${ROUTE_MENU_RECIPE}/${rowData.recipe.id}`,\n            state: { recipeType: rowData.recipe.recipeType.enum },\n          })}\n          cellRenderer={ColumnRendererEdit}\n          width={100}\n        />\n        <Column\n          dataKey=\"recipe\"\n          width={300}\n          label={i18n.t`Name`}\n          cellRenderer={({ rowData }) => (\n            <>\n              {rowData.recipe.nameLabel}\n              <NoteText>{rowData.recipe.descriptionLabel}</NoteText>\n            </>\n          )}\n        />\n      </DataTable>\n    </>\n  )\n}\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router'\n\nimport { CanQuery } from '../../../atoms/CanQuery'\nimport { Card } from '../../../atoms/Card'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { TopRightButtonContainer } from '../../../molecules/TopRightButtonContainer'\nimport { MenuSubmitButton } from '../atoms/MenuSubmitButton'\nimport { useMenuRouting } from '../hooks/useMenuRouting'\nimport { StockFormLoader } from '../organisms/StockFormLoader'\nimport { StockFormPrimary } from '../organisms/StockFormPrimary'\nimport { StockRecipesView } from '../organisms/StockRecipesVIew'\n\ninterface IProps extends RouteComponentProps<{ stockId: ID }> {}\n\nexport const MenuStockPage: React.FC<IProps> = ({ match }) => {\n  const { stockId } = match.params\n  const { isCreate } = useMenuRouting(stockId)\n\n  return (\n    <FullPageLayout\n      pageTitle={i18n.t`Stock card`}\n      hideLogoutWidget={true}\n      useBackButton={true}\n    >\n      <StockFormLoader isCreate={isCreate} stockId={stockId}>\n        <>\n          <Card>\n            <StockFormPrimary />\n            {!isCreate && (\n              <CanQuery queryName=\"recipes\">\n                <StockRecipesView stockId={stockId} />\n              </CanQuery>\n            )}\n          </Card>\n          <TopRightButtonContainer>\n            <MenuSubmitButton\n              isCreate={isCreate}\n              createMutation=\"createStockItem\"\n              updateMutation=\"updateStockItem\"\n            />\n          </TopRightButtonContainer>\n        </>\n      </StockFormLoader>\n    </FullPageLayout>\n  )\n}\n","import React from 'react'\nimport { Redirect, Route, Switch } from 'react-router-dom'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { SecureRoute } from '../../../routes/SecureRoute'\nimport {\n  ROUTE_MENU,\n  ROUTE_MENU_CATEGORY,\n  ROUTE_MENU_RECIPE,\n  ROUTE_MENU_STOCK,\n} from '../menu.routes'\nimport { MenuCategoryListPage } from '../pages/MenuCategoryListPage'\nimport { MenuCategoryPage } from '../pages/MenuCategoryPage'\nimport { MenuRecipeListPage } from '../pages/MenuRecipeListPage'\nimport { MenuRecipePage } from '../pages/MenuRecipePage'\nimport { MenuStockListPage } from '../pages/MenuStockListPage'\nimport { MenuStockPage } from '../pages/MenuStockPage'\n\ninterface IProps {}\n\nexport const MenuRouting: React.FC<IProps> = () => (\n  <Switch>\n    <SecureRoute\n      path={`${ROUTE_MENU_CATEGORY}/:categoryId`}\n      component={MenuCategoryPage}\n    />\n    <SecureRoute path={ROUTE_MENU_CATEGORY} component={MenuCategoryListPage} />\n    <SecureRoute\n      path={`${ROUTE_MENU_RECIPE}/:recipeId`}\n      component={MenuRecipePage}\n    />\n    <SecureRoute path={ROUTE_MENU_RECIPE} component={MenuRecipeListPage} />\n    <SecureRoute\n      path={`${ROUTE_MENU_STOCK}/:stockId`}\n      component={MenuStockPage}\n    />\n    <SecureRoute path={ROUTE_MENU_STOCK} component={MenuStockListPage} />\n    <Redirect to={ROUTE_MENU_CATEGORY} from={ROUTE_MENU} />\n    <Route component={NotFoundPage} />\n  </Switch>\n)\n\nexport default MenuRouting\n"],"sourceRoot":""}