{"version":3,"sources":["atoms/ShowFeedbackButton.tsx","hooks/useMutationGuard.ts","atoms/VerticalGap.tsx","../node_modules/apollo-client/errors/ApolloError.js","segments/settings/organisms/UserMenuLanguage.tsx","segments/settings/pages/UserMenuPage.tsx"],"names":["ShowFeedbackButton","react_default","a","createElement","TouchButton","onClick","Raven","showReportDialog","_lingui_react","id","useMutationGuard","mutate","options","arguments","length","undefined","defaultMessage","i18n","_","_useSnackBar","useSnackBar","enqueueSnackbar","enqueueError","enqueueWarning","handleUserErrors","userErrors","forEach","handleGraphQLErrors","errors","filter","RM","pathEq","map","prop","handleError","err","isApolloError","networkError","graphQLErrors","reportError","action","React","key","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","variables","mutateOptions","result","_args","wrap","_context","prev","next","sent","abrupt","data","getUserErrors","t0","stop","this","_x","apply","__webpack_require__","d","__webpack_exports__","VerticalGap","styled","div","withConfig","displayName","componentId","_ref$size","size","_ref$sizeUnit","sizeUnit","concat","defineProperty","exports","value","tslib_1","hasOwnProperty","generateErrorMessage","message","Array","isArray","graphQLError","errorMessage","replace","ApolloError","_super","_a","extraInfo","_this","call","__proto__","prototype","__extends","Error","UserMenuLanguage","_useRoot","useRoot","auth","user","_useQUserMenuLanguage","useQUserMenuLanguages","loading","updateUserLanguage","useMUserMenuLanguage","_React$useState","useState","_React$useState2","slicedToArray","language","setLanguage","useEffect","languages","find","propEq","useObserver","node_modules_react_default","Sizer","width","margin","SelectControl","isLoading","toConsumableArray","getOptionLabel","getOptionValue","onChange","lang","_callee2","_context2","userId","enum","rawCode","color","Colors","green","react","UserMenuPage","FullPageLayout","pageTitle","Card","Headline","UserMenuLanguage_UserMenuLanguage"],"mappings":"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","file":"static/js/183.8c22ab21.chunk.js","sourcesContent":["import { Trans } from '@lingui/macro'\nimport Raven from 'raven-js'\nimport React from 'react'\n\nimport { TouchButton } from '../molecules/TouchButton'\n\nexport function ShowFeedbackButton() {\n  return (\n    <TouchButton onClick={() => Raven.showReportDialog()}>\n      <Trans> Submit feedback </Trans>\n    </TouchButton>\n  )\n}\n","import { MutationFn, MutationHookOptions } from '@speedlo/graphql'\nimport { isApolloError } from 'apollo-client/errors/ApolloError'\nimport { GraphQLError } from 'graphql'\nimport React from 'react'\n\nimport { ShowFeedbackButton } from '../atoms/ShowFeedbackButton'\nimport { RM } from '../helpers/ramda'\nimport { reportError } from '../helpers/sentry'\nimport { i18n } from '../i18n'\nimport { useSnackBar } from './useSnackBar'\n\ninterface IMutationGuardOptions<TData> {\n  getUserErrors?(data: TData): ReadonlyArray<string> | null\n}\n\nexport function useMutationGuard<TData, TVariables>(\n  mutate: MutationFn<TData, TVariables>,\n  options: IMutationGuardOptions<TData> = {},\n) {\n  const defaultMessage = i18n.t`Unexpected error occured while sending a request. Our team was notified about the issue.`\n\n  const { enqueueSnackbar, enqueueError, enqueueWarning } = useSnackBar()\n\n  const handleUserErrors = (userErrors: ReadonlyArray<string>) => {\n    userErrors.forEach(enqueueWarning)\n  }\n\n  const handleGraphQLErrors = (errors: ReadonlyArray<GraphQLError>) => {\n    const userErrors = errors.filter(\n      RM.pathEq(['extensions', 'showToUser'], true),\n    )\n    if (userErrors.length === 0) {\n      enqueueError(defaultMessage)\n    } else {\n      handleUserErrors(userErrors.map(RM.prop('message')))\n    }\n  }\n\n  const handleError = (err: Error) => {\n    if (isApolloError(err)) {\n      if (err.networkError) {\n        enqueueError(\n          i18n.t`Communication with server has failed. Please retry the operation in a moment again.`,\n        )\n        return\n      } else if (err.graphQLErrors) {\n        handleGraphQLErrors(err.graphQLErrors)\n        return\n      }\n    }\n    reportError(err)\n    enqueueSnackbar(defaultMessage, {\n      action: [React.createElement(ShowFeedbackButton, { key: 'feedback' })],\n    })\n  }\n\n  return async (\n    variables: TVariables,\n    mutateOptions: MutationHookOptions<TData, TVariables> = {},\n  ) => {\n    try {\n      const result = await mutate(variables, mutateOptions)\n      if (result.errors) {\n        handleGraphQLErrors(result.errors)\n        return null\n      }\n      if (!result.data) {\n        return null\n      }\n      if (options.getUserErrors) {\n        const userErrors = options.getUserErrors(result.data)\n        if (userErrors !== null) {\n          handleUserErrors(userErrors)\n        }\n      }\n      return result.data\n    } catch (err) {\n      handleError(err)\n      return null\n    }\n  }\n}\n","import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nfunction isApolloError(err) {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\nexports.isApolloError = isApolloError;\n\nvar generateErrorMessage = function generateErrorMessage(err) {\n  var message = '';\n\n  if (Array.isArray(err.graphQLErrors) && err.graphQLErrors.length !== 0) {\n    err.graphQLErrors.forEach(function (graphQLError) {\n      var errorMessage = graphQLError ? graphQLError.message : 'Error message not found.';\n      message += \"GraphQL error: \" + errorMessage + \"\\n\";\n    });\n  }\n\n  if (err.networkError) {\n    message += 'Network error: ' + err.networkError.message + '\\n';\n  }\n\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nvar ApolloError = function (_super) {\n  tslib_1.__extends(ApolloError, _super);\n\n  function ApolloError(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n        networkError = _a.networkError,\n        errorMessage = _a.errorMessage,\n        extraInfo = _a.extraInfo;\n\n    var _this = _super.call(this, errorMessage) || this;\n\n    _this.graphQLErrors = graphQLErrors || [];\n    _this.networkError = networkError || null;\n\n    if (!errorMessage) {\n      _this.message = generateErrorMessage(_this);\n    } else {\n      _this.message = errorMessage;\n    }\n\n    _this.extraInfo = extraInfo;\n    _this.__proto__ = ApolloError.prototype;\n    return _this;\n  }\n\n  return ApolloError;\n}(Error);\n\nexports.ApolloError = ApolloError;","import { Trans } from '@lingui/macro'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport {\n  useMUserMenuLanguage,\n  useQUserMenuLanguages,\n} from '../../../graph/generated'\nimport { QUserMenuLanguages } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { useMutationGuard } from '../../../hooks/useMutationGuard'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IProps {}\n\ntype TLang = QUserMenuLanguages.Languages\n\nexport const UserMenuLanguage: React.FC<IProps> = () => {\n  const { auth, user } = useRoot()\n  const { data, loading } = useQUserMenuLanguages()\n  const updateUserLanguage = useMutationGuard(useMUserMenuLanguage())\n\n  const [language, setLanguage] = React.useState<Maybe<TLang>>(null)\n\n  React.useEffect(\n    () => {\n      if (language === null && !loading) {\n        setLanguage(\n          data.languages.find(RM.propEq('rawCode', user.language)) || null,\n        )\n      }\n    },\n    [data, loading],\n  )\n\n  return useObserver(() => (\n    <Sizer width={20} margin=\"1rem\">\n      <SelectControl<TLang>\n        isLoading={loading}\n        options={loading ? [] : [...data.languages]}\n        getOptionLabel={RM.prop('code')}\n        getOptionValue={RM.prop('enum')}\n        value={language}\n        onChange={async lang => {\n          if (lang) {\n            setLanguage(lang as TLang)\n          }\n        }}\n      />\n      <VerticalGap />\n      <TouchButton\n        onClick={async () => {\n          if (language) {\n            await updateUserLanguage({\n              userId: auth.userId,\n              lang: language.enum,\n            })\n            user.setLanguage(language.rawCode)\n          }\n        }}\n        color={Colors.green}\n      >\n        <Trans>Change language</Trans>\n      </TouchButton>\n    </Sizer>\n  ))\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { UserMenuLanguage } from '../organisms/UserMenuLanguage'\n\nconst UserMenuPage: React.FC = () => {\n  return (\n    <FullPageLayout width={16} pageTitle={i18n.t`User`}>\n      <Card>\n        <Headline>\n          <Trans>Application language</Trans>\n        </Headline>\n        <UserMenuLanguage />\n      </Card>\n    </FullPageLayout>\n  )\n}\n\nexport default UserMenuPage\n"],"sourceRoot":""}