{"version":3,"sources":["helpers/gps.ts","atoms/PageLoader.tsx","graph/errorHandler.ts","routes/SecureRoute.tsx","molecules/TouchButton.tsx","atoms/Sizer.tsx","atoms/WithRoot.tsx","segments/menu/models/MenuBaseModel.ts","atoms/Icon.tsx","atoms/PageTitle.tsx","helpers/offline.ts","atoms/Card.tsx","molecules/FullPageLayout.tsx","hooks/useSnackBar.ts","styling.ts","pages/NotFoundPage.tsx","graph/buildQuery.tsx","routes/RedirectToLogin.tsx","helpers/formats.ts","atoms/SizerButton.tsx","helpers/ramda.ts","atoms/Loading.tsx","atoms/SoundControl.tsx","organisms/LogoutWidget.tsx","molecules/HomeButton.tsx","molecules/PageLayout.tsx","atoms/MarginBox.tsx","atoms/GridLayout.tsx","models/BaseModel.ts","segments/menu/organisms/RecipeForm.graphql.ts","segments/menu/models/MenuRecipeModel.graphql.ts","segments/menu/models/MenuRecipeModel.ts","segments/businesshours/models/BusinessHoursModel.graphql.ts","segments/businesshours/models/BusinessHoursModel.ts","segments/menu/models/MenuCategoryModel.graphql.ts","segments/menu/models/MenuCategoryModel.ts","graph/generated.ts","locale/moment.ts","i18n.tsx","helpers/logger.ts","locale/numeral.ts","segments/businesshours/organisms/SpecificBusinessHours.graphql.ts","segments/zones/Zones.graphql.ts","routes/LazyRoute.tsx","atoms/IntervalRender.tsx","atoms/SoundPlayInterval.tsx","assets/connectionWarning.mp3","segments/order/models/OrderListModel.ts","assets/loader.gif","assets/bg_antracit.jpg","enableDebug.ts","../node_modules/moment/locale lazy /^/.*$/ groupOptions: {} namespace object","../node_modules/numeral/locales lazy /^/.*$/ groupOptions: {} namespace object","../ /^/.*/messages/.po$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","config.ts","atoms/ConnectionWarning.tsx","routes/LogRoute.tsx","routes/RedirectAfterLogin.tsx","routes/RedirectAfterLogout.tsx","routes/Routing.tsx","pages/ErrorPage.tsx","pages/ServiceUnreachablePage.tsx","app/DefaultErrorHandler.tsx","app/Router.tsx","app/SnackProvider.tsx","app/UpdateHandler.tsx","app/UserBootstrap.tsx","app/AppMain.tsx","app/ThemeProvider.tsx","app/AppProvider.tsx","app/GlobalStyles.tsx","index.tsx","context/RootContext.ts","helpers/persistModel.ts","segments/login/models/PasswordLoginModel.ts","segments/login/models/LoginProviderModel.ts","models/AuthModel.ts","models/ConfigModel.ts","models/UserModel.ts","helpers/faker.ts","segments/createorder/models/CreateOrderModel.ts","models/MapModel.ts","segments/order/models/OrderMapModel.ts","segments/order/models/OrderModel.ts","segments/overview/models/StatisticsModel.ts","segments/settings/models/SettingsBaseModel.ts","segments/menu/models/MenuStockModel.graphql.ts","segments/menu/models/MenuStockModel.ts","segments/menu/models/MenuModel.ts","segments/settings/models/SettingsModel.ts","segments/zones/models/ZoneMapModel.ts","segments/zones/models/ZoneModel.graphql.ts","segments/zones/models/ZoneModel.ts","models/RootModel.ts","atoms/RootProvider.tsx","graph/createClient.ts"],"names":["__webpack_require__","d","__webpack_exports__","gpsToLatLng","gpsToLatLngLit","latLngToGps","generatePolygon","geolib__WEBPACK_IMPORTED_MODULE_0__","gps","google","maps","LatLng","Number","latitude","longitude","lat","lng","latLng","_ref","center","_ref$metersRadius","metersRadius","_ref$pointsCount","pointsCount","Array","fill","map","_","idx","degree","computeDestinationPoint","StyledPageLoader","styled","div","_templateObject","PageLoader","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","role","src","loaderGif","alt","appConfig","pageTitleSuffix","width","height","getQueryErrors","Object","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","query","result","wrap","_context","prev","next","sent","errors","abrupt","stop","_x","apply","this","arguments","SecureRoute","_ref$redirect","redirect","props","lazy","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","useRoot","auth","isAuthenticatedUser","_RedirectToLogin__WEBPACK_IMPORTED_MODULE_6__","_pages_NotFoundPage__WEBPACK_IMPORTED_MODULE_4__","component","path","exact","_LazyRoute__WEBPACK_IMPORTED_MODULE_5__","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","applyAlpha","alphaValue","applyAlphaToColor","color","TouchButtonStyled","button","Spacing","ButtonHeight","DefaultSizeUnit","_ref$width","_ref2","_ref2$height","Radiuses","Button","ButtonLabelStyled","_templateObject2","ButtonLabelNextToIconStyled","_templateObject3","TouchButton","React","forwardRef","_ref3","forwardedRef","children","iconName","_ref3$iconColor","iconColor","Colors","white","_ref3$iconSize","iconSize","_ref3$color","greyMiddle","_ref3$textNextToIcon","textNextToIcon","badge","text","react__WEBPACK_IMPORTED_MODULE_2___default","assign","ref","_atoms_Icon__WEBPACK_IMPORTED_MODULE_4__","fontSize","SizerContainer","_ref$widthUnit","widthUnit","undefined","concat","_ref2$heightUnit","heightUnit","Sizer","_ref3$widthUnit","_ref3$heightUnit","margin","className","_MarginBox__WEBPACK_IMPORTED_MODULE_5__","WithRoot","mobx_react_lite__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","n","_RootProvider__WEBPACK_IMPORTED_MODULE_2__","render","_ref$observe","observe","root","Fragment","MenuBaseModel","mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__","BaseModel","named","volatile","filterInput","actions","self","setFilterInput","input","views","branchId","getParent","settings","IconSpanStyled","span","_ref$fontSize","_ref$fontSizeUnit","fontSizeUnit","Icon","_ref2$color","TitleStyled","h1","greyLight","observableTitles","observable","array","autorun","lastTitle","from","pop","document","title","PageTitle","_React$Component","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","key","value","push","prevProps","findIndex","RM","equals","splice","remove","Component","Route","react__WEBPACK_IMPORTED_MODULE_9___default","react_router_dom__WEBPACK_IMPORTED_MODULE_10__","Display","mobx_react_lite__WEBPACK_IMPORTED_MODULE_8__","join","isNetworkOffline","whenGoingOnline","isOnline","box","navigator","onLine","window","addEventListener","set","get","cb","change","oldValue","newValue","Card","Color","alpha","lighten","string","textColor","black","_ref$padding","padding","_ref3$stretchToParent","stretchToParent","css","displayName","getLayout","i","x","y","w","h","FullPageLayout","_molecules_PageLayout__WEBPACK_IMPORTED_MODULE_2__","layouts","useSnackBar","notistack__WEBPACK_IMPORTED_MODULE_0__","successVariant","variant","errorVariant","warningVariant","infoVariant","enqueueSnackbar","useSnackbarOrig","enqueueSuccess","errorMessage","enqueueError","enqueueWarning","enqueueInfo","FontSizes","color__WEBPACK_IMPORTED_MODULE_0__","color__WEBPACK_IMPORTED_MODULE_0___default","_helpers_ramda__WEBPACK_IMPORTED_MODULE_1__","curry","MarginAroundFormComponents","Small","Middle","LayoutGridCellMargin","DefaultInputWidth","ButtonColumnWidthPx","InfoMessageFontSize","CompactCard","CompactCardBig","NotFoundPage","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","_atoms_PageTitle__WEBPACK_IMPORTED_MODULE_1__","_i18n__WEBPACK_IMPORTED_MODULE_2__","buildQuery","cleanup","useRef","executeCleanup","useCallback","current","forEach","fn","length","useEffect","renderFragment","_props$renderLoading","renderLoading","_props$refetchOnConne","renderError","refetchOnConnectionLost","rest","react_apollo__WEBPACK_IMPORTED_MODULE_2__","loading","_atoms_Loading__WEBPACK_IMPORTED_MODULE_3__","error","refetch","data","RedirectToLogin","debug__WEBPACK_IMPORTED_MODULE_0__","debug__WEBPACK_IMPORTED_MODULE_0___default","log","debug","_ref$useOrigin","useOrigin","match","location","to","pathname","state","origin","fullDateFormat","formatDateISO","formatTime","priceFormat","formatPrice","formatTimeWithoutTodayDate","formatAddress","formatFullName","date_fns__WEBPACK_IMPORTED_MODULE_0__","date_fns_fp__WEBPACK_IMPORTED_MODULE_1__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2___default","numeral__WEBPACK_IMPORTED_MODULE_3__","numeral__WEBPACK_IMPORTED_MODULE_3___default","currentLocale","csLocale","formatLocale","formatWithOptions","locale","format","formatDateTime","price","numeral","time","isSameDay","Date","address","street","houseNumber","city","user","lastName","firstName","trim","SizerButton","_Sizer__WEBPACK_IMPORTED_MODULE_3__","ramda__WEBPACK_IMPORTED_MODULE_0__","Loading","_ref$text","SoundControl","_getPrototypeOf2","_this","classCallCheck","_len","args","_key","possibleConstructorReturn","getPrototypeOf","call","playPreview","inherits","createClass","react_default","soundEnabled","green","red","onClick","controlSound","StyledLogoutWidget","LogoutWidget","observer","_useQLogoutWidget","useQLogoutWidget","id","userId","skip","isAuthenticated","i18n","now","useTimer","enabled","interval","SECOND","data-testid","react_router_dom","index_es","DF","HomeButtonStyled","HomeButton_templateObject","HomeButton","_ref$color","_ref$iconColor","_ref$goBack","goBack","backRoute","objectWithoutProperties","history","useRouterContext","TopLeftButtonContainer","PageLayout_templateObject","getPosition","scrollPageTitle","TopRightContainer","PageTitleContainer","PageHeaderItem","_templateObject4","PageLayout","_ref$pageTitle","pageTitle","_ref$layouts","_ref$hideLogoutWidget","hideLogoutWidget","_ref$showSoundControl","showSoundControl","_ref$showHomeButton","showHomeButton","_ref$useBackButton","useBackButton","_ref$scrollPageTitle","topContent","SoundControl_SoundControl","style","left","GridLayout","toConsumableArray","HomeButton_HomeButton","MarginBox","react_grid_layout__WEBPACK_IMPORTED_MODULE_1__","react_grid_layout__WEBPACK_IMPORTED_MODULE_1___default","ReactGridLayout","WidthProvider","RGL","layout","cols","rowHeight","autoSize","isDraggable","isResizable","compactType","measureBeforeMount","mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__","types","model","getPath","getRoot","client","apolloClient","MenuRecipePriceFragment","gql","FPriceFragmentDoc","MenuAssocRecipeFragment","MenuRecipeFormQuery","FMenuCategoryListItemFragmentDoc","MenuRecipeFormAssocQuery","MenuRecipeDefaults","_templateObject5","QueryMenuRecipeFormAssoc","MenuRecipeFragment","MenuRecipeVisibilityMutation","MenuRecipeCreateMutation","MenuRecipeUpdateMutation","MenuRecipeDeleteMutation","MenuRecipeModel","categoryFilterId","changeVisibility","recipeId","visible","mutate","mutation","variables","optimisticResponse","updateRecipe","__typename","setCategoryFilter","categoryId","createRecipe","formValues","recipeType","recipe","objectSpread","companyBranch","wareCategoryType","getRecipeVariables","deleteRecipe","_deleteRecipe","asyncToGenerator","regenerator_default","queryDefaults","_queryDefaults","_callee2","_data$companyBranch","vats","code","_context2","currency","reduce","vatId","priceType","enum","currencyCode","nameLabel","internalNote","descriptionLabel","prices","keys","warePriceType","vat","sideDishCategories","sideDishes","prop","wareCategories","categories","associatedRecipes","pick","ingredients","stockItem","quantity","parseFloat","replace","getRecipeRoute","ESpecificHourMode","CreateSpecificBusinessHour","SpecificBusinessHourFragment","DeleteSpecificBusinessHour","BusinessHoursModel","byIdPredicate","complement","propEq","specificMode","optional","enumeration","TIMESPAN","changeSpecificMode","mode","submitSpecificHour","values","specificDate","isoDate","date","closed","FULLDAY","openAt","closeAt","closedNote","note","updateQueries","GSpecificBusinessHours","mutationResult","businessHours","deleteSpecificHour","businessHourId","filter","SortMenuCategoryMutation","MenuCategoryCreateMutation","MenuCategoryUpdateMutation","FMenuCategoryFragmentDoc","MenuCategoryDeleteMutation","MenuCategoryModel","sortCategory","_sortCategory","offset","Boolean","success","_x2","createCategory","categoryType","getFormVariables","updateCategory","_updateCategory","_x3","_x4","deleteCategory","_deleteCategory","_callee3","_context3","_x5","_x6","internalNoteLabel","pictogram","recipes","minCount","maxCount","orderOriginCategories","origins","getCategoryRoute","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","WeekDayEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","LanguageEnum","MobilePlatformEnum","WareUnitEnum","AvailabilityTypeEnum","AllergenEnum","WarePriceTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","OrderStateEnum","OrderBillingTypeEnum","PaymentGateEnum","PaymentTypeEnum","DeliveryTypeEnum","OrderRecipeStateEnum","OrderOnlineStateEnum","OrderOriginEnum","ZoneTypeEnum","ShiftUserStateEnum","OrderOriginCategoryEnum","WareCategoryTypeEnum","SettingTypeEnum","WareRequirementEnum","SubscriptionActionType","GSpecificBusinessHourFragmentDoc","GMenuRecipeFragmentDoc","FMenuAllergenFragmentDoc","FMenuWareUnitFragmentDoc","GMenuStockItemFragmentDoc","_templateObject6","GMenuRecipePriceFragmentDoc","_templateObject7","GMenuAssocRecipeFragmentDoc","_templateObject8","FGeoPointFragmentDoc","_templateObject9","FCompanyBranchFragmentDoc","_templateObject10","FOrderStateCategoryFragmentDoc","_templateObject11","FPriceWithCurrencyFragmentDoc","_templateObject12","FRegularBusinessHourFragmentDoc","_templateObject13","FWeekdayFragmentDoc","_templateObject14","_templateObject15","FCreateOrderItemFragmentDoc","_templateObject16","FCreateOrderFragmentDoc","_templateObject17","FCreateOrderRecipeSidedishesFragmentDoc","_templateObject18","FOrderMenuRecipeFragmentDoc","_templateObject19","FOrderMenuCategoryFragmentDoc","_templateObject20","FKitchenOrderRecipeFragmentDoc","_templateObject21","FKitchenOrderBaseFragmentDoc","_templateObject22","FKitchenCompletionOrderFragmentDoc","_templateObject23","FAddressFragmentDoc","_templateObject24","FEmailFragmentDoc","_templateObject25","FPhoneFragmentDoc","_templateObject26","FCustomerFragmentDoc","_templateObject27","FKitchenOrderFragmentDoc","_templateObject28","FMenuRecipeFragmentDoc","_templateObject29","_templateObject30","_templateObject31","FOrderDetailWareFragmentDoc","_templateObject32","_templateObject33","FUserNameFragmentDoc","_templateObject34","FDriverFragmentDoc","_templateObject35","FOrderDriverFragmentDoc","_templateObject36","FOrderMapDriverFragmentDoc","_templateObject37","FOrderMapDeviceFragmentDoc","_templateObject38","FOrderMapDeliveryFragmentDoc","_templateObject39","FOrderMapOrderFragmentDoc","_templateObject40","FOrderTickerFragmentDoc","_templateObject41","FOrderTimingFragmentDoc","_templateObject42","FOrderTotalsFragmentDoc","_templateObject43","FZonePriceRangeFragmentDoc","_templateObject44","FZoneFragmentDoc","_templateObject45","_templateObject46","_templateObject47","_templateObject48","_templateObject49","_templateObject50","_templateObject51","_templateObject52","_templateObject53","_templateObject54","_templateObject55","_templateObject56","_templateObject57","_templateObject58","_templateObject59","_templateObject60","_templateObject61","_templateObject62","_templateObject63","_templateObject64","_templateObject65","_templateObject66","_templateObject67","_templateObject68","_templateObject69","_templateObject70","_templateObject71","_templateObject72","_templateObject73","_templateObject74","_templateObject75","_templateObject76","_templateObject77","QAddressSuggestDocument","_templateObject78","useQAddressSuggest","baseOptions","Hooks","MOrderStateDocument","_templateObject79","useMOrderState","MSetPriorityOrderDocument","_templateObject80","useMSetPriorityOrder","QLogoutWidgetDocument","_templateObject81","MBusinessHoursSubmitDocument","_templateObject82","useMBusinessHoursSubmit","QRegularBusinessHoursDocument","_templateObject83","useQRegularBusinessHours","MAddOrderPromoDocument","_templateObject84","useMAddOrderPromo","MCancelOrderDocument","_templateObject85","useMCancelOrder","MCreateOrderAcceptDocument","_templateObject86","useMCreateOrderAccept","MCreateOrderAddRecipeDocument","_templateObject87","useMCreateOrderAddRecipe","MCreateOrderNewDocument","_templateObject88","useMCreateOrderNew","MCreateOrderRemoveItemDocument","_templateObject89","useMCreateOrderRemoveItem","MCreateOrderUpdateDocument","_templateObject90","useMCreateOrderUpdate","MCreateOrderUpdateItemDocument","_templateObject91","useMCreateOrderUpdateItem","MRemoveOrderPromoDocument","_templateObject92","useMRemoveOrderPromo","QCreateOrderItemDocument","_templateObject93","QCreateOrderRecipeDocument","_templateObject94","QOrderCartDocument","_templateObject95","useQOrderCart","QOrderFormDeliverAtDefaultsDocument","_templateObject96","useQOrderFormDeliverAtDefaults","QOrderMenuDocument","_templateObject97","useQOrderMenu","QValidateLocationDocument","_templateObject98","MKitchenRecipeStateDocument","_templateObject99","useMKitchenRecipeState","QKitchenCompletionOrderListDocument","_templateObject100","useQKitchenCompletionOrderList","QKitchenOrderListDocument","_templateObject101","useQKitchenOrderList","SKitchenCompletionOrderListDocument","_templateObject102","useSKitchenCompletionOrderList","SKitchenOrderListDocument","_templateObject103","useSKitchenOrderList","MPasswordChangeDocument","_templateObject104","useMPasswordChange","QUserBootstrapDocument","_templateObject105","useQUserBootstrap","_templateObject106","SOrderCallDocument","_templateObject107","useSOrderCall","_templateObject108","MMenuCategoryVisibilityDocument","_templateObject109","useMMenuCategoryVisibility","MMenuStockQuantityDocument","_templateObject110","useMMenuStockQuantity","QMenuCategoryDocument","_templateObject111","QMenuCategoryFilterDocument","_templateObject112","useQMenuCategoryFilter","QMenuCategoryListDocument","_templateObject113","useQMenuCategoryList","QMenuCategoryOriginsDocument","_templateObject114","useQMenuCategoryOrigins","QMenuGuideDownloadDocument","_templateObject115","useQMenuGuideDownload","QMenuRecipeListDocument","_templateObject116","useQMenuRecipeList","QMenuStockDepositDocument","_templateObject117","useQMenuStockDeposit","QMenuStockListDocument","_templateObject118","useQMenuStockList","QStockRecipesDocument","_templateObject119","useQStockRecipes","MBranchDefaultTimeDocument","_templateObject120","useMBranchDefaultTime","MOrderChangeToPickupDocument","_templateObject121","useMOrderChangeToPickup","MOrderTimeNotificationDocument","_templateObject122","useMOrderTimeNotification","MRemoveOrderDriverDocument","_templateObject123","useMRemoveOrderDriver","MSelectOrderDriverDocument","_templateObject124","useMSelectOrderDriver","QBranchDefeaultTimesDocument","_templateObject125","useQBranchDefeaultTimes","QOrderDetailDocument","_templateObject126","useQOrderDetail","QOrderDriversDocument","_templateObject127","useQOrderDrivers","QOrderListDocument","_templateObject128","useQOrderList","QOrderListCategoriesDocument","_templateObject129","useQOrderListCategories","QOrderMapDeliveriesDocument","_templateObject130","useQOrderMapDeliveries","QOrderMapOrdersDocument","_templateObject131","useQOrderMapOrders","QOrderStateDocument","_templateObject132","useQOrderState","SOrderListDocument","_templateObject133","useSOrderList","SOrderMapDeliveriesDocument","_templateObject134","useSOrderMapDeliveries","SOrderMapOrdersDocument","_templateObject135","useSOrderMapOrders","MFinancialReportCreateDocument","_templateObject136","useMFinancialReportCreate","QAllDriversDocument","_templateObject137","useQAllDrivers","QClosureHistoryDocument","_templateObject138","QClosureReportDocument","_templateObject139","useQClosureReport","QStatsDailyDocument","_templateObject140","useQStatsDaily","QStatsOrdersDocument","_templateObject141","useQStatsOrders","QStatsOrdersCountsDocument","_templateObject142","useQStatsOrdersCounts","QStatsOrdersListDocument","_templateObject143","MUserMenuLanguageDocument","_templateObject144","useMUserMenuLanguage","QUserMenuLanguagesDocument","_templateObject145","useQUserMenuLanguages","MZoneUpdateDocument","_templateObject146","useMZoneUpdate","changeMomentLocale","_changeMomentLocale","lang","moment","updateLocale","setupI18n","I18nManager","_React$useState","useState","forceUpdate","slicedToArray","useReaction","language","_args","detectLanguage","setupLanguage","node_modules_react_default","react","Children","only","languages","LocaleResolver","DETECTORS","NavigatorDetector","TRANSFORMERS","LanguageOnlyTransformer","getLocales","logLang","find","loc","supportedLanguages","includes","fallbackLanguage","_setupLanguage","Promise","all","loadCatalog","changeNumeralLocale","activate","catalog","load","defineProperty","logMain","logDebug","logError","logAuth","logRouting","logPersistence","logForm","logUpdate","useColors","console","_changeNumeralLocale","numberRx","validateNumber","test","QuerySpecificBusinessHours","ZoneLocationQuery","ZoneColorsQuery","LazyRoute","routeProps","IntervalRender","_Component","isActive","nextTime","getNextTime","timer","executeTimer","clearTimeout","timeMs","differenceInMilliseconds","setTimeout","setState","deactivate","addSeconds","intervalSec","nextLoop","SoundPlayInterval_SoundPlayInterval","SoundPlayInterval","soundUrl","_ref$shouldPlay","shouldPlay","_ref$skipEnableChecks","skipEnableChecks","config","IntervalRender_IntervalRender","lib_default","url","playStatus","onFinishedPlaying","loop","autoLoad","volume","soundVolume","module","exports","p","setImmediate","OrderListModel","mobx__WEBPACK_IMPORTED_MODULE_0__","react_scroll__WEBPACK_IMPORTED_MODULE_2__","_graph_generated__WEBPACK_IMPORTED_MODULE_3__","branches","collapsedCategories","Finished","branchesFilter","hasBranchFilter","isSingleBranchSelected","firstBranchId","orderMap","invalidate","clear","clearBranchFilter","setBranchFilter","extend","detailOpen","isOrderDetailOpen","orderId","has","isCategoryCollapsed","categoryCode","toggleOrderDetail","delete","add","toggleCategoryCollapse","category","index","indexOf","focusOrderDetail","scroller","scrollTo","smooth","containerId","absolute","observerOrderDetail","bind","localStorage","setItem","./af","./af.js","./ar","./ar-dz","./ar-dz.js","./ar-kw","./ar-kw.js","./ar-ly","./ar-ly.js","./ar-ma","./ar-ma.js","./ar-sa","./ar-sa.js","./ar-tn","./ar-tn.js","./ar.js","./az","./az.js","./be","./be.js","./bg","./bg.js","./bm","./bm.js","./bn","./bn.js","./bo","./bo.js","./br","./br.js","./bs","./bs.js","./ca","./ca.js","./cs","./cs.js","./cv","./cv.js","./cy","./cy.js","./da","./da.js","./de","./de-at","./de-at.js","./de-ch","./de-ch.js","./de.js","./dv","./dv.js","./el","./el.js","./en-SG","./en-SG.js","./en-au","./en-au.js","./en-ca","./en-ca.js","./en-gb","./en-gb.js","./en-ie","./en-ie.js","./en-il","./en-il.js","./en-nz","./en-nz.js","./eo","./eo.js","./es","./es-do","./es-do.js","./es-us","./es-us.js","./es.js","./et","./et.js","./eu","./eu.js","./fa","./fa.js","./fi","./fi.js","./fo","./fo.js","./fr","./fr-ca","./fr-ca.js","./fr-ch","./fr-ch.js","./fr.js","./fy","./fy.js","./ga","./ga.js","./gd","./gd.js","./gl","./gl.js","./gom-latn","./gom-latn.js","./gu","./gu.js","./he","./he.js","./hi","./hi.js","./hr","./hr.js","./hu","./hu.js","./hy-am","./hy-am.js","./id","./id.js","./is","./is.js","./it","./it-ch","./it-ch.js","./it.js","./ja","./ja.js","./jv","./jv.js","./ka","./ka.js","./kk","./kk.js","./km","./km.js","./kn","./kn.js","./ko","./ko.js","./ku","./ku.js","./ky","./ky.js","./lb","./lb.js","./lo","./lo.js","./lt","./lt.js","./lv","./lv.js","./me","./me.js","./mi","./mi.js","./mk","./mk.js","./ml","./ml.js","./mn","./mn.js","./mr","./mr.js","./ms","./ms-my","./ms-my.js","./ms.js","./mt","./mt.js","./my","./my.js","./nb","./nb.js","./ne","./ne.js","./nl","./nl-be","./nl-be.js","./nl.js","./nn","./nn.js","./pa-in","./pa-in.js","./pl","./pl.js","./pt","./pt-br","./pt-br.js","./pt.js","./ro","./ro.js","./ru","./ru.js","./sd","./sd.js","./se","./se.js","./si","./si.js","./sk","./sk.js","./sl","./sl.js","./sq","./sq.js","./sr","./sr-cyrl","./sr-cyrl.js","./sr.js","./ss","./ss.js","./sv","./sv.js","./sw","./sw.js","./ta","./ta.js","./te","./te.js","./tet","./tet.js","./tg","./tg.js","./th","./th.js","./tl-ph","./tl-ph.js","./tlh","./tlh.js","./tr","./tr.js","./tzl","./tzl.js","./tzm","./tzm-latn","./tzm-latn.js","./tzm.js","./ug-cn","./ug-cn.js","./uk","./uk.js","./ur","./ur.js","./uz","./uz-latn","./uz-latn.js","./uz.js","./vi","./vi.js","./x-pseudo","./x-pseudo.js","./yo","./yo.js","./zh-cn","./zh-cn.js","./zh-hk","./zh-hk.js","./zh-tw","./zh-tw.js","webpackAsyncContext","req","ids","e","then","t","resolve","Error","./chs","./chs.js","./da-dk","./da-dk.js","./en-za","./en-za.js","./es-es","./es-es.js","./nl-nl","./nl-nl.js","./no","./no.js","./pt-pt","./pt-pt.js","./ru-ua","./ru-ua.js","./uk-ua","./uk-ua.js","./cs/messages.po","./de/messages.po","./en-dev/messages.po","./en/messages.po","./pl/messages.po","./sk/messages.po","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","endpoint","persistenceKey","sentryDSN","MessageStyled","ConnectionWarning","connectionWarningSound","open","disableBackdropClick","disableEscapeKeyDown","icons_index_es","_lingui_react","LogRoute","react_router","RedirectAfterLogin","route","when","RedirectAfterLogout","_useRoot","order","createOrder","zone","PasswordLoginRoute","PasswordChangeRoute","PasswordResetRoute","MainDashboardPage","OrderRoutes","KitchenRoutes","SettingsRoutes","OverviewRoutes","SupportPage","Routing","Suspense","fallback","LogRoute_LogRoute","RedirectAfterLogin_RedirectAfterLogin","IconStyled","ErrorPage_templateObject","orange","Center","ErrorPage","onFeedback","reload","ServiceUnreachablePage_templateObject","ServiceUnreachablePage_templateObject2","ServiceUnreachablePage","onRetry","components","href","ServiceUnreachablePage_Center","ServiceUnreachablePage_IconStyled","makeError","message","DefaultErrorHandler","_useSnackBar","_React$useState2","errorKind","setErrorKind","onUnhandledError","isChunkError","Sentry","withScope","scope","setLevel","Severity","Debug","captureException","flushSentry","isApolloError","isNetworkUnreachableError","onNetworkError","isUnreachable","onOperationError","onUserErrors","messages","dist","tools_dist","onError","ServiceUnreachablePage_ServiceUnreachablePage","ErrorPage_ErrorPage","showFeedback","showReportDialog","labelClose","Router","dist_index_es","handleGetUserConfirm","getUserConfirmation","successStyle","SnackProvider_templateObject","snackStyles","variantSuccess","variantInfo","variantError","SnackProvider_templateObject2","variantWarning","SnackProvider","build","maxSnack","classes","anchorOrigin","horizontal","vertical","UpdateHandler","_ref$onRestart","onRestart","_ref$autoUpdateDelay","autoUpdateDelay","_ref$postponeTimeout","postponeTimeout","MINUTE","_ref$updateCheckInter","updateCheckInterval","HOUR","_ref$serviceWorker","serviceWorker","registrationWorkerRef","updateWorkerRef","useObservable","updatePending","applyingUpdate","useInterval","update","catch","onMessage","event","removeEventListener","updateWorker","register","onInit","reg","onUpdate","sw","init","onCancel","onConfirm","postMessage","useObserver","UpdateSnack","autoHideDuration","addMilliseconds","endTime","remainingSeconds","formatDistanceStrict","disableWindowBlurListener","action","size","UserBootstrap","_useQUserBootstrap","finishBootstrap","configureScope","setUser","username","setExtra","applyUserData","applyAccess","access","applyPermissions","permissions","setExtras","roles","AppMain","useReleaseCabinet","DefaultErrorHandler_DefaultErrorHandler","UpdateHandler_UpdateHandler","Router_Router","index_module","isReady","Routing_Routing","ThemeProvider","theme","createMuiTheme","typography","useNextVariants","core_styles","AppProvider","useSentryInit","ThemeProvider_ThemeProvider","RootProvider","SnackProvider_SnackProvider","GlobalStyles","createGlobalStyle","GlobalStyles_templateObject","backgroundImage","rootElement","getElementById","AppProvider_AppProvider","AppMain_AppMain","RootContext","createContext","persistModel","_persistModel","modelName","stateKey","writeState","getType","name","snapshot","localforage","getItem","applySnapshot","getSnapshot","t0","removeItem","onSnapshot","getLoginUrl","password","PasswordLoginModel","errorCode","hasFailed","setFailure","setSuccess","token","authenticate","requestToken","_requestToken","fetch","response","payload","headers","Accept","json","status","String","LoginProviderModel","passwordLogin","AuthModel","provider","cache","reset","ConfigModel","orderListPollIntervalSec","orderListSoundIntervalSec","UserModel","maybe","number","soundIgnore","isLoaded","brands","canCancelOrders","canCreateOrder","branchesId","R","defaultBranch","hasSingleBranch","filterBranches","predicate","canQuery","queryName","queries","toLowerCase","canMutate","mutationName","mutations","rawCode","uniqBy","makeSet","fields","Set","compose","toLower","subscriptions","setLanguage","ignore","setSoundVolume","faker","fakerCZ","CreateOrderModel","getDefaultProps","currentBranch","deliveryType","isDelivery","Messenger","deliverAt","deliverAtIso","startOfMinute","hasAddress","deliveryAddress","fakeAddress","clearGps","phone","phonePrefix","prefix","country","customer","emails","email","phones","vamCustomer","isFound","_self$vamCustomer","lastOrder","defaults","fakeValues","hasOrder","createOrderVariables","callEventId","eventId","updateOrderVariables","acceptOrderVariables","resetOrder","resetModel","setOrder","useLocation","clearLocation","setMinimalPrice","minimalPrice","selectBranch","userIsCalling","setDeliveryMinutes","minutes","deliveryMinutes","updateFormValues","touched","updateFromVam","updateFormWithFakeValues","internet","phoneNumberFormat","lorem","sentence","slice","resolver","makeResolver","selectSidedishesForRecipe","sidedishMode","sidedishRootId","selectSidedishesForItem","itemId","sidedishSelectionConfirmed","sidedishes","isConfirmed","sidedishSelectionCancel","notDeliveryLocation","sidedishSelection","GPSCzechia","MapModel","zoom","mapRef","setMapRef","updateZoom","getZoom","updatePosition","getCenter","OrderMapModel","activeDriverId","activateDriver","driverId","position","panTo","OrderModel","list","StatisticsModel","drivers","closureBranch","maybeNull","dateTimeFrom","startOfDay","dateTimeTo","endOfDay","updateFilter","setDriversFilter","setClosureBranch","branch","setTodayOrdersFilter","SettingsBaseModel","MenuStockItemFragment","MenuStockCreateMutation","MenuStockUpdateMutation","MenuStockDeleteMutation","MenuStockModel","createItem","updateItem","stockId","deleteItem","_deleteItem","label","plu","allergens","wareUnit","allowNegative","MenuModel","stock","SettingsModel","selectedBranchId","menu","head","ZoneMapModel","currentZonePoints","updateZonePoints","points","clearZonePoints","panToZone","_panToZone","zoneId","panToBranch","_panToBranch","CreateZoneMutation","ZoneModel_graphql_templateObject","UpdateZonePriorityMutation","ZoneModel_graphql_templateObject2","DestroyZoneMutation","ZoneModel_graphql_templateObject3","ZoneModel","brandId","brand","branchFilterId","branchFilterPredicate","zoneFilterPredicate","getZoneVariables","zoneColor","minimalOrderPrice","priceRangeRules","normalizePriceRangeRule","geoPolygon","setBrandFilter","brandBranches","clearBrandFilter","createZone","flow","onZoneCreate","GZones","zones","destroyZone","changeZonePriority","oldIndex","newIndex","updateZonePriority","priority","numberOrNull","num","isNaN","range","toPrice","RootModel","statistics","persistedModels","setClient","isInit","setInit","_React$useState3","create","_React$useState5","newClient","createDefaultApolloClient","createAuthLink","enableTokenCache","getToken","onInvalidToken","createLogLink","createRetryLink","createOfflineLink","createNetworkLink","createApolloClient","useAsyncEffect","Provider","useContext"],"mappings":"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aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,gBAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aaAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,YAAA,CACA,IACA,IAEAC,eAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,gBAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,YAAA,CACA,IACA,IAEAC,eAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,gBAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,KAGA,SAAAC,EAAAC,GACA,IAAAC,EAAA5wC,EAAA2wC,GACA,OAAAC,EAOAtyC,EAAAuyC,EAAAD,EAAA,IAAAE,KAAA,WACA,IAAAp7B,EAAAk7B,EAAA,GACA,OAAAtyC,EAAAyyC,EAAAr7B,EAAA,KARA0kB,QAAA4W,UAAAF,KAAA,WACA,IAAAD,EAAA,IAAAI,MAAA,uBAAAN,EAAA,KAEA,MADAE,EAAA5zB,KAAA,mBACA4zB,IAQAH,EAAA7yB,KAAA,WACA,OAAAvc,OAAAuc,KAAA7d,IAEA0wC,EAAAh7B,GAAA,KACAsoB,EAAAC,QAAAyS,wBC5gCA,IAAA1wC,EAAA,CACAgiC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAiP,QAAA,CACA,IACA,KAEAC,WAAA,CACA,IACA,KAEArO,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAqO,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA/N,OAAA,CACA,IACA,KAEAG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAO,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA+M,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAvM,OAAA,CACA,IACA,KAEAwM,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEApM,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAK,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAG,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAmB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAO,OAAA,CACA,IACA,KAEAG,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAuB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEA0B,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAkG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEA/F,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAE,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA4F,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAzF,OAAA,CACA,IACA,KAEA0F,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA1F,UAAA,CACA,IACA,KAEAO,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAqB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAK,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAqD,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEArC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,MAGA,SAAAW,EAAAC,GACA,IAAAC,EAAA5wC,EAAA2wC,GACA,OAAAC,EAOAtyC,EAAAuyC,EAAAD,EAAA,IAAAE,KAAA,WACA,IAAAp7B,EAAAk7B,EAAA,GACA,OAAAtyC,EAAAyyC,EAAAr7B,EAAA,KARA0kB,QAAA4W,UAAAF,KAAA,WACA,IAAAD,EAAA,IAAAI,MAAA,uBAAAN,EAAA,KAEA,MADAE,EAAA5zB,KAAA,mBACA4zB,IAQAH,EAAA7yB,KAAA,WACA,OAAAvc,OAAAuc,KAAA7d,IAEA0wC,EAAAh7B,GAAA,KACAsoB,EAAAC,QAAAyS,wBCpSA,IAAA1wC,EAAA,CACAoyC,mBAAA,CACA,KACA,KAEAC,mBAAA,CACA,KACA,KAEAC,uBAAA,CACA,KACA,KAEAC,mBAAA,CACA,KACA,KAEAC,mBAAA,CACA,KACA,KAEAC,mBAAA,CACA,KACA,MAGA,SAAA/B,EAAAC,GACA,IAAAC,EAAA5wC,EAAA2wC,GACA,OAAAC,EAOAtyC,EAAAuyC,EAAAD,EAAA,IAAAE,KAAA,WACA,IAAAp7B,EAAAk7B,EAAA,GACA,OAAAtyC,EAAAyyC,EAAAr7B,EAAA,KARA0kB,QAAA4W,UAAAF,KAAA,WACA,IAAAD,EAAA,IAAAI,MAAA,uBAAAN,EAAA,KAEA,MADAE,EAAA5zB,KAAA,mBACA4zB,IAQAH,EAAA7yB,KAAA,WACA,OAAAvc,OAAAuc,KAAA7d,IAEA0wC,EAAAh7B,GAAA,KACAsoB,EAAAC,QAAAyS,wBC5CA,IAAA1wC,EAAA,CACA0yC,mBAAA,CACA,KACA,KAEAC,mBAAA,CACA,KACA,KAEAC,uBAAA,CACA,KACA,KAEAC,mBAAA,CACA,KACA,KAEAC,mBAAA,CACA,KACA,KAEAC,mBAAA,CACA,KACA,MAGA,SAAArC,EAAAC,GACA,IAAAC,EAAA5wC,EAAA2wC,GACA,OAAAC,EAOAtyC,EAAAuyC,EAAAD,EAAA,IAAAE,KAAA,WACA,IAAAp7B,EAAAk7B,EAAA,GACA,OAAAtyC,EAAAyyC,EAAAr7B,EAAA,KARA0kB,QAAA4W,UAAAF,KAAA,WACA,IAAAD,EAAA,IAAAI,MAAA,uBAAAN,EAAA,KAEA,MADAE,EAAA5zB,KAAA,mBACA4zB,IAQAH,EAAA7yB,KAAA,WACA,OAAAvc,OAAAuc,KAAA7d,IAEA0wC,EAAAh7B,GAAA,KACAsoB,EAAAC,QAAAyS,mCC5CApyC,EAAAC,EAAAC,EAAA,sBAAAyC,IAAO,IAAMA,EAAY,CACvBi5B,iBAAkB,KAClBF,mBAAoB,CAAC,KAAM,KAAM,KAAM,KAAM,MAC7CgZ,SAAU,6CACVC,eAAgB,cAChB/xC,gBAAiB,QACjBgyC,UAAW,IAaX5xC,OAAOyE,OAAO9E,EAAW,CACvB+xC,SAAU,mCACVC,eAAgB,aAChB/xC,gBAAiB,eACjBgyC,UAAW,ufCXf,IAAMC,EAAgB7yC,UAAOC,IAAVC,IAEG4E,IAAO8P,KAUhBk+B,EAAoB79B,mBAAS,WACxC,OACER,EAAApU,EAAAC,cAAAmU,EAAApU,EAAA8G,SAAA,KACEsN,EAAApU,EAAAC,cAACo8B,EAAA,EAAD,CACEG,WAAYjyB,cACZ2xB,YAAa,GACbI,SAAUoW,MAGZt+B,EAAApU,EAAAC,cAAC0V,EAAA,EAAD,CACEg9B,KAAMpoC,cACNqoC,sBAAsB,EACtBC,sBAAsB,GAEtBz+B,EAAApU,EAAAC,cAACuyC,EAAD,KACEp+B,EAAApU,EAAAC,cAAC6yC,EAAA,EAAD,CAAgBvtC,SAAS,UACzB6O,EAAApU,EAAAC,cAAC8yC,EAAA,MAAD,CAAAh+B,GAAA,iGCnCGi+B,EAAqB,WAE9B,OACE5+B,EAAApU,EAAAC,cAACgzC,EAAA,MAAD,KACG,SAAAp0C,GAAkB,IAAf8R,EAAe9R,EAAf8R,SAEF,OADA0pB,YAAW,QAAS1pB,EAASE,UACtB,0CCJXP,EAAMC,IAAM,WAEL2iC,EAAqB,kBAChC9+B,EAAApU,EAAAC,cAACgzC,EAAA,MAAD,CACE5uC,SAAU,SAAAxF,GAAA,IAAG8R,EAAH9R,EAAG8R,SAAU2F,EAAbzX,EAAayX,QAAb,OACRlC,EAAApU,EAAAC,cAACoG,EAAA,EAAD,CACEK,OAAQ,SAAAG,GACN,IAAKA,EAAKxE,KAAKC,oBAAqB,CAClC,IAAM6wC,EAASxiC,EAASG,OAASH,EAASG,MAAMC,QAAW,IAK3DqiC,eAJ8B,kBAAMvsC,EAAKxE,KAAK6S,iBACnB,WACzBoB,EAAQ0H,QAAQm1B,KAGlB7iC,EAAI,gCAAiC6iC,GAEvC,OAAO,qBCjBJE,EAAsB,WAAM,IAAAC,EACoBlxC,cAAnDC,EAD+BixC,EAC/BjxC,KAAMyQ,EADyBwgC,EACzBxgC,KAAMygC,EADmBD,EACnBC,MAAOC,EADYF,EACZE,YAAa5rC,EADD0rC,EACC1rC,SAAU6rC,EADXH,EACWG,KAClD,OAAIpxC,EAAK6S,iBACP7S,EAAKg8B,aACLvrB,EAAKurB,aACLkV,EAAMlV,aACNmV,EAAYnV,aACZz2B,EAASy2B,aACToV,EAAKpV,aACEjqB,EAAApU,EAAAC,cAACkQ,EAAA,EAAD,CAAiBM,WAAW,KAE9B2D,EAAApU,EAAAC,cAACgzC,EAAA,SAAD,CAAUriC,GAAG,gBCPhB8iC,EAAqBzvC,IAAM/B,KAAK,kBACpCu3B,QAAAC,IAAA,CAAA/7B,EAAAuyC,EAAA,GAAAvyC,EAAAuyC,EAAA,OAAAC,KAAAxyC,EAAAmiC,KAAA,aAGI6T,EAAsB1vC,IAAM/B,KAAK,kBACrCvE,EAAAuyC,EAAA,KAAAC,KAAAxyC,EAAAmiC,KAAA,cAGI8T,EAAqB3vC,IAAM/B,KAAK,kBACpCvE,EAAAuyC,EAAA,KAAAC,KAAAxyC,EAAAmiC,KAAA,cAGI+T,EAAoB5vC,IAAM/B,KAAK,kBACnCvE,EAAAuyC,EAAA,KAAAC,KAAAxyC,EAAAmiC,KAAA,cAGIgU,EAAc7vC,IAAM/B,KAAK,kBAC7Bu3B,QAAAC,IAAA,CAAA/7B,EAAAuyC,EAAA,GAAAvyC,EAAAuyC,EAAA,GAAAvyC,EAAAuyC,EAAA,GAAAvyC,EAAAuyC,EAAA,GAAAvyC,EAAAuyC,EAAA,OAAAC,KAAAxyC,EAAAmiC,KAAA,cAGIiU,EAAgB9vC,IAAM/B,KAAK,kBAC/Bu3B,QAAAC,IAAA,CAAA/7B,EAAAuyC,EAAA,GAAAvyC,EAAAuyC,EAAA,OAAAC,KAAAxyC,EAAAmiC,KAAA,cAGIkU,EAAiB/vC,IAAM/B,KAAK,kBAChCu3B,QAAAC,IAAA,CAAA/7B,EAAAuyC,EAAA,GAAAvyC,EAAAuyC,EAAA,GAAAvyC,EAAAuyC,EAAA,GAAAvyC,EAAAuyC,EAAA,OAAAC,KAAAxyC,EAAAmiC,KAAA,cAGImU,EAAiBhwC,IAAM/B,KAAK,kBAChCu3B,QAAAC,IAAA,CAAA/7B,EAAAuyC,EAAA,GAAAvyC,EAAAuyC,EAAA,GAAAvyC,EAAAuyC,EAAA,GAAAvyC,EAAAuyC,EAAA,GAAAvyC,EAAAuyC,EAAA,OAAAC,KAAAxyC,EAAAmiC,KAAA,cAGIoU,EAAcjwC,IAAM/B,KAAK,kBAC7BvE,EAAAuyC,EAAA,KAAAC,KAAAxyC,EAAAmiC,KAAA,cAGWqU,EAAU,kBACrB//B,EAAApU,EAAAC,cAACmU,EAAApU,EAAMo0C,SAAP,CAAgBC,SAAUjgC,EAAApU,EAAAC,cAACH,EAAA,EAAD,OACxBsU,EAAApU,EAAAC,cAACq0C,EAAD,MACAlgC,EAAApU,EAAAC,cAACs0C,EAAD,MACAngC,EAAApU,EAAAC,cAACgzC,EAAA,OAAD,KACE7+B,EAAApU,EAAAC,cAACgzC,EAAA,MAAD,CAAOvwC,KAAK,SAASC,OAAO,EAAMF,UAAWixC,IAC7Ct/B,EAAApU,EAAAC,cAACgzC,EAAA,MAAD,CAAOvwC,KAAK,SAASC,OAAO,EAAMF,UAAWmxC,IAC7Cx/B,EAAApU,EAAAC,cAACgzC,EAAA,MAAD,CACEvwC,KAAK,mBACLC,OAAO,EACPF,UAAWkxC,IAEbv/B,EAAApU,EAAAC,cAACgzC,EAAA,MAAD,CACEvwC,KAAK,mBACLC,OAAO,EACPF,UAAWkxC,IAEbv/B,EAAApU,EAAAC,cAAC6B,EAAA,EAAD,CAAaY,KAAK,IAAIC,OAAO,EAAMF,UAAWoxC,IAC9Cz/B,EAAApU,EAAAC,cAAC6B,EAAA,EAAD,CAAaY,KAAK,SAASD,UAAWqxC,IACtC1/B,EAAApU,EAAAC,cAAC6B,EAAA,EAAD,CAAaY,KAAK,WAAWD,UAAWsxC,IACxC3/B,EAAApU,EAAAC,cAAC6B,EAAA,EAAD,CAAaY,KAAK,YAAYD,UAAWuxC,IACzC5/B,EAAApU,EAAAC,cAAC6B,EAAA,EAAD,CAAaY,KAAK,YAAYD,UAAWwxC,IACzC7/B,EAAApU,EAAAC,cAACgzC,EAAA,MAAD,CAAOvwC,KAAK,WAAWD,UAAWyxC,IAClC9/B,EAAApU,EAAAC,cAACgzC,EAAA,MAAD,CAAOvwC,KAAK,UAAUD,UAAW4wC,IACjCj/B,EAAApU,EAAAC,cAACgzC,EAAA,MAAD,CAAOxwC,UAAW8L,sUC1DxB,IAAMimC,GAAa70C,UAAOC,IAAV60C,KACLhwC,IAAOiwC,QAGZC,GAASh1C,UAAOC,IAAViE,MAUC+wC,GAA8B,SAAA/1C,GAAA,IAAGg2C,EAAHh2C,EAAGg2C,WAAH,OACzCzgC,EAAApU,EAAAC,cAACuM,GAAA,EAAD,CACEhM,MAAO,GACP0W,UAAW/B,EAAA,EAAI7V,EAAA,qBACf+X,kBAAkB,EAClBI,gBAAgB,GAEhBrD,EAAApU,EAAAC,cAACoL,EAAA,EAAD,KACE+I,EAAApU,EAAAC,cAAA,UACEmU,EAAApU,EAAAC,cAAC8yC,EAAA,MAAD,CAAAh+B,GAAA,gHAKFX,EAAApU,EAAAC,cAAC00C,GAAD,KACEvgC,EAAApU,EAAAC,cAACu0C,GAAD,KACEpgC,EAAApU,EAAAC,cAAC6yC,EAAA,EAAD,CAAS/6B,MAAO,CAAExS,SAAU,WAE9B6O,EAAApU,EAAAC,cAAC8F,GAAA,EAAD,CAAOvF,MAAO,IACZ4T,EAAApU,EAAAC,cAAC+D,GAAA,EAAD,CAAawQ,QAASqgC,GACpBzgC,EAAApU,EAAAC,cAAC6yC,EAAA,EAAD,MACA1+B,EAAApU,EAAAC,cAAC8yC,EAAA,MAAD,CAAAh+B,GAAA,oBAGJX,EAAApU,EAAAC,cAAC8F,GAAA,EAAD,CAAOvF,MAAO,IACZ4T,EAAApU,EAAAC,cAAC+D,GAAA,EAAD,CAAawQ,QAAS,kBAAM3J,OAAO8F,SAASmkC,WAC1C1gC,EAAApU,EAAAC,cAAC6yC,EAAA,EAAD,MACA1+B,EAAApU,EAAAC,cAAC8yC,EAAA,MAAD,CAAAh+B,GAAA,yRCzCZ,IAAMy/B,GAAa70C,UAAOC,IAAVm1C,KAELtwC,IAAO8P,KAGZogC,GAASh1C,UAAOC,IAAVo1C,MAUCC,GAA2C,SAAAp2C,GAAA,IAAGq2C,EAAHr2C,EAAGq2C,QAAH,OACtD9gC,EAAApU,EAAAC,cAACuM,GAAA,EAAD,CACEhM,MAAO,GACP0W,UAAW/B,EAAA,EAAI7V,EAAA,uBACfqY,eAAe,EACfN,kBAAkB,EAClBI,gBAAgB,GAEhBrD,EAAApU,EAAAC,cAACoL,EAAA,EAAD,KACE+I,EAAApU,EAAAC,cAAA,UACEmU,EAAApU,EAAAC,cAAC8yC,EAAA,MAAD,CAAAh+B,GAAA,sHAAAogC,WAAA,CAEqB/gC,EAAApU,EAAAC,cAAA,KAAGm1C,KAAK,iBAG/BhhC,EAAApU,EAAAC,cAACo1C,GAAD,KACEjhC,EAAApU,EAAAC,cAACq1C,GAAD,KACElhC,EAAApU,EAAAC,cAAC6yC,EAAA,EAAD,CAAa/6B,MAAO,CAAExS,SAAU,WAElC6O,EAAApU,EAAAC,cAAC8F,GAAA,EAAD,CAAOvF,MAAO,IACZ4T,EAAApU,EAAAC,cAAC+D,GAAA,EAAD,CAAawQ,QAAS0gC,EAAS5wC,SAAS,UACrC,IACD8P,EAAApU,EAAAC,cAAC8yC,EAAA,MAAD,CAAAh+B,GAAA,+BChCNwgC,GAAY,SAACC,GAAD,SAAA5vC,OACb4vC,EADa,KAAA5vC,OACFuP,EAAA,EAAI7V,EAAA,4CAEPm2C,GAAgC,SAAA52C,GAAkB,IAAfwF,EAAexF,EAAfwF,SAAeqxC,EACpB/oC,cAAjCY,EADqDmoC,EACrDnoC,eAAgBD,EADqCooC,EACrCpoC,aADqCwqB,EAG3B7zB,IAAM8zB,SAAoB,QAHC4d,EAAAh1C,OAAAs3B,EAAA,EAAAt3B,CAAAm3B,EAAA,GAGtD8d,EAHsDD,EAAA,GAG3CE,EAH2CF,EAAA,GAKvDT,EAAUjxC,IAAM+K,YAAY,WAChC6mC,EAAa,SACZ,IAEGC,EAAmB7xC,IAAM+K,YAAY,SAACgB,GAC1C,GAAI+lC,uBAAa/lC,GAMf,OALAgmC,SAAOC,UAAU,SAAAC,GACfA,EAAMC,SAASH,SAAOI,SAASC,OAC/BL,SAAOM,iBAAiBtmC,UAE1BumC,wBAAcpG,KAAK,kBAAMtlC,OAAO8F,SAASmkC,WAGvC0B,wBAAcxmC,IAAUymC,oCAA0BzmC,GACpD6lC,EAAa,uBAGfG,SAAOM,iBAAiBtmC,GACxB6lC,EAAa,gBACZ,IAEGa,EAAiBzyC,IAAM+K,YAC3B,SAACgB,EAAc2mC,GACTA,EACFd,EAAa,sBAEbvoC,EACEioC,GACEpgC,EAAA,EAAI7V,EAAA,8DAKZ,IAGIs3C,EAAmB3yC,IAAM+K,YAAY,WACzC1B,EACEioC,GAAUpgC,EAAA,EAAI7V,EAAA,wDAEf,IAEGu3C,EAAe5yC,IAAM+K,YAAY,SAAC8nC,GACtCA,EAAS5nC,QAAQ3B,IAChB,IAgBH,OACE6G,EAAApU,EAAAC,cAAC82C,EAAA,eAAD,CACEL,eAAgBA,EAChBG,aAAcA,EACdD,iBAAkBA,GAElBxiC,EAAApU,EAAAC,cAAC+2C,EAAA,mBAAD,CAAoBC,QAASnB,GApBlB,WACb,OAAQF,GACN,IAAK,qBACH,OAAOxhC,EAAApU,EAAAC,cAACi3C,GAAD,CAAwBhC,QAASA,IAE1C,IAAK,aACH,OAAO9gC,EAAApU,EAAAC,cAACk3C,GAAD,CAAWtC,WAAYuC,KAEhC,QACE,OAAO/yC,GAYNqC,MAMT,SAAS0wC,KACPpB,SAAOqB,iBAAiB,CACtBC,WAAYniC,EAAA,EAAI7V,EAAA,SAChByJ,MAAOoM,EAAA,EAAI7V,EAAA,wDC/FFi4C,GAA2B,SAAA14C,GAAA,IAAGwF,EAAHxF,EAAGwF,SAAH,OACtC+P,EAAApU,EAAAC,cAACu3C,GAAA,EAAD,KACG,SAAAh0C,GAAA,IAAGi0C,EAAHj0C,EAAGi0C,qBAAH,OACCrjC,EAAApU,EAAAC,cAACyV,GAAA,EAAD,CAAegiC,oBAAqBD,GACjCpzC,ibCFT,IAAMszC,GAAe3rC,aAAH4rC,KACFnzC,IAAO6P,MACRlR,IAAQgL,qBAUVypC,GAAc,CACzBC,eAAgBH,GAChBI,YAAaJ,GACbK,aAXiBhsC,aAAHisC,KACAxzC,IAAO8P,IACRnR,IAAQgL,qBAUrB8pC,eARmBlsC,aAAHjI,KACFU,IAAOiwC,OACRtxC,IAAQgL,sBASV+pC,GAAkC,SAAAt5C,GAAA,IAAGwF,EAAHxF,EAAGwF,SAAH,OAC7C+P,EAAApU,EAAAC,cAACm4C,GAAA,iBAAD,CACEC,SAAU,EACVC,QAAST,GACTU,aAAc,CAAEC,WAAY,SAAUC,SAAU,QAE/Cp0C,ICbQq0C,GAAkC,SAAA75C,GAQzC,IAAA85C,EAAA95C,EAPJ+5C,iBAOI,IAAAD,EAPQ,kBAAM9tC,OAAO8F,SAASmkC,UAO9B6D,EAAAE,EAAAh6C,EANJi6C,uBAMI,IAAAD,EANc,GAAKrjC,UAMnBqjC,EAAAE,EAAAl6C,EALJm6C,uBAKI,IAAAD,EALc,EAAIE,UAKlBF,EAAAG,EAAAr6C,EAJJs6C,2BAII,IAAAD,EAHA,EAAIE,QAGJF,EAAAG,EAAAx6C,EADJy6C,qBACI,IAAAD,EADYxuC,OAAOF,UAAU2uC,cAC7BD,EACEE,EAAwBt1C,IAAM6K,OAClC,MAEI0qC,EAAkBv1C,IAAM6K,OAA6B,MAErDgC,EAAQ2oC,wBAAc,CAAEC,eAAe,EAAOC,gBAAgB,IAEpEC,uBAAY,WACNL,EAAsBtqC,UACxBurB,YAAU,eACV+e,EAAsBtqC,QAAQ4qC,SAASC,MAAM,gBAI9CX,GAEHl1C,IAAMoL,UAAU,WACd,IAAM0qC,EAAY,SAACC,GACE,mBAAfA,EAAM9pC,OACRsqB,YAAU,0BACVoe,MAGJ,OAAIU,GACFA,EAAcxuC,iBAAiB,UAAWivC,GACnC,WACLT,EAAcW,oBAAoB,UAAWF,MAG/Cvf,YAAU,kCACH,eAIR,CAACoe,EAAWU,IAEfr1C,IAAMoL,UAAU,WACD6qC,eAAaC,SAAS,CACjCC,OAAQ,SAAAC,GACNd,EAAsBtqC,QAAUorC,GAElCC,SAAU,SAAAC,GACRf,EAAgBvqC,QAAUsrC,EAC1BzpC,EAAM4oC,eAAgB,EACtBlf,YAAU,6BAKdggB,IACC,IAEH,IAAMC,EAAW,WACfjgB,YAAU,kBACV1pB,EAAM4oC,eAAgB,EACtB5d,WAAW,WACTtB,YAAU,kCACV1pB,EAAM4oC,eAAgB,GACrBV,IAGC0B,EAAY,WAChB5pC,EAAM4oC,eAAgB,EAClBF,EAAgBvqC,UAClBurB,YAAU,kBACV1pB,EAAM6oC,gBAAiB,EACvBH,EAAgBvqC,QAAQ0rC,YAAY,kBAIxC,GAAI7pC,EAAM6oC,eACR,MAAM,IAAIlgB,QAAQ,cAKpB,OAAOmhB,sBAAY,kBACjB9pC,EAAM4oC,cACJtlC,EAAApU,EAAAC,cAAC46C,GAAD,CACEC,iBAAkBhC,EAClB2B,SAAUA,EACVC,UAAWA,IAEX,QAUD,SAASG,GAAY54C,GAA0B,IAC5Cy4C,EAAiCz4C,EAAjCy4C,UAAWD,EAAsBx4C,EAAtBw4C,SAAa7qC,EADoBjP,OAAA0V,GAAA,EAAA1V,CACXsB,EADW,0BAE9CmT,EAAMC,oBAAS,CAAEE,SAAUC,UAAQF,SAAS,IAFEwiB,EAGlC7zB,IAAM8zB,SAAS,kBAC/BgjB,2BAAgB3lC,EAAKnT,EAAM64C,oBADtBE,EAH6Cr6C,OAAAs3B,EAAA,EAAAt3B,CAAAm3B,EAAA,MAM9CmjB,EAAmBC,gCAAqBF,EAAS5lC,GAQvD,OANAnR,IAAMoL,UAAU,WACV+F,GAAO4lC,GACTN,KAED,CAACtlC,EAAK4lC,IAGP5mC,EAAApU,EAAAC,cAAC0V,EAAA,EAADhV,OAAAyE,OAAA,CACEutC,MAAM,EACN4F,aAAc,CACZE,SAAU,MACVD,WAAY,UAEdryC,UAAW0xC,GAAYE,YACvBvC,QACEphC,EAAApU,EAAAC,cAAA,QAAMwV,cAAY,WAAWN,EAAA,EAAI7V,EAAA,kFAAsC27C,sBAEzEE,2BAA2B,EAC3BC,OAAQ,CACNhnC,EAAApU,EAAAC,cAAC0V,EAAA,EAAD,CACEpM,IAAI,QACJtG,MAAM,YACNo4C,KAAK,QACLn7C,KAAK,SACLuV,cAAY,kBACZjB,QAASimC,GAERtlC,EAAA,EAAI7V,EAAA,oBAEP8U,EAAApU,EAAAC,cAAC0V,EAAA,EAAD,CACEpM,IAAI,UACJtG,MAAM,UACNo4C,KAAK,QACLn7C,KAAK,SACLuV,cAAY,iBACZjB,QAASkmC,GAERvlC,EAAA,EAAI7V,EAAA,kBAGLsQ,0BClKG0rC,GAAgB1mC,mBAAS,WAAM,IAAA0+B,EACnBlxC,cAAfC,EADkCixC,EAClCjxC,KAAMyQ,EAD4BwgC,EAC5BxgC,KAD4ByoC,EAGhBrrB,cACxB,CAAElb,OAAQ3S,EAAK2S,QACf,CAAEC,MAAO5S,EAAKC,sBAFR4N,EAHkCqrC,EAGlCrrC,KAAMJ,EAH4ByrC,EAG5BzrC,QAsCd,OAjCA7L,IAAMoL,UAAU,WACThN,EAAK2S,SACRlC,EAAK0oC,kBACLxF,SAAOyF,eAAe,SAAAvF,GACpBA,EAAMwF,QAAQ,CACZ3mC,QAAIpP,EACJg2C,cAAUh2C,IAEZuwC,EAAM0F,SAAS,QAAS,IACxB1F,EAAM0F,SAAS,WAAY,SAKjC33C,IAAMoL,UAAU,WACVhN,EAAKC,sBAAwBwN,IAC/BgD,EAAK+oC,cAAc3rC,EAAK4C,MACxBA,EAAKgpC,YAAY5rC,EAAK6rC,QACtBjpC,EAAKkpC,iBAAiB9rC,EAAK+rC,aAC3BnpC,EAAK0oC,kBACLxF,SAAOyF,eAAe,SAAAvF,GACpBA,EAAMwF,QAAQ,CACZ3mC,GAAI1S,EAAK2S,OACT2mC,SAAQ,GAAA/1C,OAAKsK,EAAK4C,KAAKE,UAAf,KAAApN,OAA4BsK,EAAK4C,KAAKC,YAEhDmjC,EAAMgG,UAAU,CACdC,MAAOjsC,EAAK4C,KAAKqpC,MAAM98C,IAAIuK,KAAG2T,KAAK,SACnCsgB,SAAU3tB,EAAK4C,KAAK+qB,SAASx+B,IAAIuK,KAAG2T,KAAK,cAM1C,OC/BI6+B,GAAoB,WAAM,IAC7BtpC,EAAS1Q,cAAT0Q,KAEAtF,EAAgBb,cAAhBa,YAGR,OAFA6uC,4BAAkB7uC,GAGhB4G,EAAApU,EAAAC,cAACq8C,GAAD,KACEloC,EAAApU,EAAAC,cAACq7C,GAAD,MACAlnC,EAAApU,EAAAC,cAACs8C,GAAD,MACAnoC,EAAApU,EAAAC,cAACwyC,EAAD,MACAr+B,EAAApU,EAAAC,cAACmU,EAAApU,EAAMo0C,SAAP,CAAgBC,SAAUjgC,EAAApU,EAAAC,cAACH,EAAA,EAAD,OACxBsU,EAAApU,EAAAC,cAACu8C,GAAD,KACEpoC,EAAApU,EAAAC,cAACw8C,EAAA,SAAD,KACG,kBAAO3pC,EAAK4pC,QAAUtoC,EAAApU,EAAAC,cAAC08C,EAAD,MAAcvoC,EAAApU,EAAAC,cAACH,EAAA,EAAD,+BC3BpC88C,GAAkC,SAAA/9C,GAAkB,IAAfwF,EAAexF,EAAfwF,SAC1Cw4C,EAAQC,0BAAe,CAC3BC,WAAY,CACVC,iBAAiB,KAIrB,OAAO5oC,EAAApU,EAAAC,cAACg9C,GAAA,iBAAD,CAAkBJ,MAAOA,GAAQx4C,ICH7B64C,GAAwB,SAAAr+C,GAAkB,IAAfwF,EAAexF,EAAfwF,SAEtC,OADA84C,wBAAc78C,KAAUiyC,WAEtBn+B,EAAApU,EAAAC,cAACm9C,GAAD,KACEhpC,EAAApU,EAAAC,cAACo9C,EAAA,EAAD,KACEjpC,EAAApU,EAAAC,cAACkV,EAAA,EAAD,KACEf,EAAApU,EAAAC,cAACq9C,GAAD,KAAgBj5C,s1BCXnB,IAAMk5C,GAAeC,4BAAHC,KAcGC,MCKtBC,GAAc70C,SAAS80C,eAAe,QAC5Cl3C,iBAAO0N,EAAApU,EAAAC,cAdM,WACX,OACEmU,EAAApU,EAAAC,cAACmU,EAAApU,EAAMo0C,SAAP,CAAgBC,SAAUjgC,EAAApU,EAAAC,cAACH,EAAA,EAAD,OACxBsU,EAAApU,EAAAC,cAAAmU,EAAApU,EAAA8G,SAAA,KACEsN,EAAApU,EAAAC,cAACs9C,GAAD,MACAnpC,EAAApU,EAAAC,cAAC49C,GAAD,KACEzpC,EAAApU,EAAAC,cAAC69C,GAAD,UAQH,MAAUH,yGCpBJI,EAAcC,6BAAsCr4C,iDCQ3D2sC,EAAiBhyC,IAAUgyC,eAE1B,SAAe2L,EAAtBv8C,GAAA,OAAAw8C,EAAAv8C,MAAAC,KAAAC,sDAAO,SAAAd,EAA4BqY,GAA5B,IAAA+kC,EAAAC,EAAAC,EAAAvtC,EAAA,OAAAkL,EAAAhc,EAAAkB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACC88C,EAAYG,YAAQllC,GAAOmlC,KAC3BH,EAFD,GAAAx4C,OAEe0sC,EAFf,KAAA1sC,OAEiCu4C,GAEhCE,EAAa,SAACG,GAAD,OACjBC,IAAYze,QAAQoe,EAAUI,IAL3Br9C,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAQiBo9C,IAAYC,QAAQN,GARrC,UASW,QADRttC,EARH3P,EAAAG,MAAA,CAAAH,EAAAE,KAAA,SAUDs9C,YAAcvlC,EAAOtI,GACrBwpB,YAAe,oBAAqB8jB,GAXnCj9C,EAAAE,KAAA,wBAAAF,EAAAE,KAAA,GAaKg9C,EAAWO,YAAYxlC,IAb5B,QAcDkhB,YAAe,uBAAwB8jB,GAdtC,QAAAj9C,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA09C,GAAA19C,EAAA,SAiBHm5B,YAAe,qBAADn5B,EAAA09C,IACdJ,IAAYK,WAAWV,GAlBpB,QAqBLW,YAAW3lC,EAAOilC,GArBb,yBAAAl9C,EAAAM,SAAAV,EAAA,qECNDi+C,EAAc,SAAAngD,GAAA,IAAG88C,EAAH98C,EAAG88C,SAAUsD,EAAbpgD,EAAaogD,SAAb,SAAAr5C,OACftF,IAAU+xC,SADK,0BAAAzsC,OAC4B+1C,EAD5B,cAAA/1C,OACiDq5C,IAExDC,EAAqBj4C,IAAUC,MAAM,iBAC/CC,SAAS,SAAAG,GAAI,MAAK,CACjB63C,UAAW,GACX9xC,aAAc,MAEf5F,MAAM,SAAAH,GAAI,MAAK,CACd83C,gBACE,OAAOz+B,QAAQrZ,EAAK63C,eAGvB93C,QAAQ,SAAAC,GAAI,MAAK,CAChB+3C,WADgB,SACL/iC,EAAck5B,GACvBluC,EAAK63C,UAAY7iC,EACjBhV,EAAK+F,aAAemoC,GAEtB8J,WALgB,SAKLC,EAAevqC,GACPrN,YAA+BL,GACvCk4C,aAAaD,EAAOvqC,OAGhC3N,QAAQ,SAAAC,GAAI,MAAK,CACVm4C,aADU,eAAAC,EAAA/+C,OAAAob,EAAA,EAAApb,CAAAqb,EAAAhc,EAAAc,KAAA,SAAAC,EACG46C,EAAkBsD,GADrB,IAAAniB,EAAA6iB,EAAAC,EAAAC,EAAA,OAAA7jC,EAAAhc,EAAAkB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAERy7B,EAAMkiB,EAAY,CAAErD,WAAUsD,aAC9BU,EAAgB90C,OAAO80C,MAHfx+C,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAKWs+C,EAAM7iB,EAAK,CAChCgjB,QAAS,CACPC,OAAQ,sBAPA,cAKNH,EALMz+C,EAAAG,KAAAH,EAAAE,KAAA,EAUUu+C,EAASI,OAVnB,OAUNH,EAVM1+C,EAAAG,KAWZgG,EAAKgJ,IAAI,sBAAuBuvC,GAER,MAApBD,EAASK,QACX34C,EAAK+3C,WAAWQ,EAAQvjC,KAAMujC,EAAQ7vC,OACtC1I,EAAKgJ,IAAI,uCAAwCqrC,KAEjDr0C,EAAKg4C,WAAWO,EAAQN,MAAOW,OAAOL,EAAQ7qC,SAC9C1N,EAAKgJ,IACH,6CACAqrC,EACAkE,EAAQ7qC,SArBA7T,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA09C,GAAA19C,EAAA,SAyBZmG,EAAK+3C,WACH,OACAlqC,EAAA,EAAI7V,EAAA,mDAEN02C,SAAOC,UAAU,SAAAC,GACfA,EAAM0F,SAAS,WAAYD,GAC3BzF,EAAMC,SAASH,SAAOI,SAASC,OAC/BL,SAAOM,iBAAPn1C,EAAA09C,MAhCU,yBAAA19C,EAAAM,SAAAV,EAAA,kCAAAW,EAAAmf,GAAA,OAAA6+B,EAAA/9C,MAAAC,KAAAC,YAAA,MCzBPs+C,EAAqBl5C,IAAUC,MAAM,iBAC/CjF,MAAM,CACLm+C,cAAejnC,IAAMwF,SAASugC,EAAoB,MAEnD73C,QAAQ,SAAAC,GAAI,MAAK,CAChBk4C,aADgB,SACHD,EAAevqC,GACbrN,YAAsBL,GAC9Bk4C,aAAaD,EAAOvqC,OCRlBqrC,EAAYp5C,IAAUC,MAAM,QACtCjF,MAAM,CACL+S,OAAQmE,IAAMwF,SAASxF,IAAM1N,OAAQ,IACrC8zC,MAAOpmC,IAAMwF,SAASxF,IAAM1N,OAAQ,IACpC60C,SAAUnnC,IAAMwF,SAASwhC,EAAoB,MAE9C14C,MAAM,SAAAH,GAAI,MAAK,CACd4N,sBACE,OAAO5N,EAAKi4C,MAAMnwC,OAAS,GAE7B9M,0BACE,OAAOV,KAAKsT,iBAAmB5N,EAAK0N,OAAO5F,OAAS,MAGvD/H,QAAQ,SAAAC,GAAI,MAAK,CAChBk4C,aADgB,SACHD,EAAevqC,GAC1B1N,EAAKi4C,MAAQA,EACbj4C,EAAK0N,OAASA,EACd1N,EAAKgJ,IAAI,2BAA4B0E,IAEvCqpB,WANgB,WAOd/2B,EAAKi4C,MAAQ,GACbj4C,EAAK0N,OAAS,GACV1N,EAAKiS,QACPjS,EAAKiS,OAAOgnC,MAAMC,QAEpBl5C,EAAKgJ,IAAI,kCC7BFmwC,EAAcx5C,IAAUC,MAAM,UAAUjF,MAAM,CACzDoS,cAAc,EACdqsC,yBAA0B,GAC1BC,0BAA2B,sBCkBhBC,EAAY35C,IAAUC,MAAM,QACtCjF,MAAM,CACLk2B,SAAUhf,IAAM0nC,MAAM1nC,IAAM1N,QAC5B2xB,YAAajkB,IAAMwF,SAASxF,IAAM2nC,OAAQ,IAC1CC,aAAa,IAEd55C,SAAyB,iBAAO,CAC/B65C,UAAU,EACVnjB,SAAU,GACVojB,OAAQ,GACR5sC,cAAc,EACd0nC,OAAQ,KACRE,YAAa,CACXiF,iBAAiB,EACjBC,gBAAgB,MAGnB15C,MAAM,SAAAH,GAAI,MAAK,CACd85C,iBACE,OAAO95C,EAAKu2B,SAASx+B,IAAIgiD,IAAO,QAElCC,oBACE,GAA6B,IAAzBh6C,EAAKu2B,SAASzuB,OAChB,MAAM,IAAIkhC,MAAM,qDAElB,OAAOhpC,EAAKu2B,SAAS,IAEvB0jB,sBACE,OAAgC,IAAzBj6C,EAAKu2B,SAASzuB,QAEvBoyC,eAbc,SAaCC,GACb,OAAOn6C,EAAKu2B,SAAS5d,OAAOwhC,IAE9BC,SAhBc,SAgBLC,GACP,OACkB,OAAhBr6C,EAAKy0C,QAAmBz0C,EAAKy0C,OAAO6F,QAAQ/iB,IAAI8iB,EAAUE,gBAG9DC,UArBc,SAqBJC,GACR,OACkB,OAAhBz6C,EAAKy0C,QACLz0C,EAAKy0C,OAAOiG,UAAUnjB,IAAIkjB,EAAaF,gBAG3CnF,cACE,OAAOp1C,EAAK05C,WAAa15C,EAAKT,KAAKxE,KAAK6S,oBAG3C7N,QAAQ,SAAAC,GAAI,MAAK,CAChB+2B,WADgB,WAEd/2B,EAAK05C,UAAW,EAChB15C,EAAKu2B,SAAW,GAChBv2B,EAAK25C,OAAS,GACd35C,EAAKy0C,OAAS,MAEhBF,cAPgB,SAOF/oC,GACZxL,EAAK6wB,SAAWrlB,EAAKqlB,SAAS8pB,QAC9B36C,EAAKu2B,SAAW/qB,EAAK+qB,SACrBv2B,EAAK25C,OAASr3C,IAAGs4C,OACft4C,IAAG2T,KAAK,MACRzK,EAAK+qB,SAASx+B,IAAIuK,IAAG2T,KAAK,YAG9By+B,iBAfgB,SAeCC,GACf30C,EAAK20C,YAAcA,GAErBH,YAlBgB,SAkBJC,GACV,IAAMoG,EAAU,SAACC,GAAD,OACd,IAAIC,IACFD,EAAO/iD,IACLuK,IAAG04C,QACD14C,IAAG24C,QACH34C,IAAG2T,KAAK,YAKhBjW,EAAKy0C,OAAS,CACZ6F,QAASO,EAAQpG,EAAO6F,QAAQQ,OAASrG,EAAO6F,QAAQQ,OAAS,IACjEJ,UAAWG,EACTpG,EAAOiG,WAAajG,EAAOiG,UAAUI,OACjCrG,EAAOiG,UAAUI,OACjB,IAENI,cAAeL,EACbpG,EAAOyG,eAAiBzG,EAAOyG,cAAcJ,OACzCrG,EAAOyG,cAAcJ,OACrB,MAIV5G,gBA3CgB,WA4Cdl0C,EAAK05C,UAAW,GAElByB,YA9CgB,SA8CJhrB,GACVnwB,EAAK6wB,SAAWV,GAElBhjB,aAjDgB,WAiD+C,IAAlDa,IAAkDzT,UAAAuN,OAAA,QAAAzJ,IAAA9D,UAAA,KAAAA,UAAA,GAAzB6gD,EAAyB7gD,UAAAuN,OAAA,QAAAzJ,IAAA9D,UAAA,IAAAA,UAAA,GAC7DyF,EAAK+M,aAAeiB,EACpBhO,EAAKy5C,YAAc2B,GAErBC,eArDgB,SAqDDxlB,GACb71B,EAAK81B,YAAcD,gDC3HZylB,SAAQC,QCmDRC,EAAmB77C,IAAUC,MAAM,eAC7CjF,MAAM,CACLyF,SAAUyR,IAAM0nC,MAAM1nC,IAAM1N,UAE7BtE,SAAyB47C,GACzB17C,QAAQ,SAAAC,GAAI,MAAK,CAChB+2B,WADgB,WAEd/2B,EAAKI,cAAW/B,EAChBhF,OAAOyE,OAAOkC,EAAMy7C,SAGvBt7C,MAAM,SAAAH,GAAI,MAAK,CACd07C,oBACE,OACE17C,EAAKT,KAAKiM,KAAK+qB,SAAS1E,KAAKvvB,IAAG6U,OAAO,KAAMnX,EAAKI,YAClDJ,EAAKT,KAAKiM,KAAKwuC,kBAIpB75C,MAAM,SAAAH,GAAI,MAAK,CACd27C,mBACE,OAAO37C,EAAK2X,OAAOgkC,cAErBC,iBACE,OAAO57C,EAAK2X,OAAOgkC,eAAiB3/B,IAAiB6/B,WAEvDC,gBACE,OAAQ97C,EAAK2X,OAAOmkC,WAAa,IAAI3wC,KAAKnL,EAAK2X,OAAOmkC,YAAe,MAEvEC,mBACE,OAAQzhD,KAAKwhD,WAAajkC,kBAAQmkC,wBAAc1hD,KAAKwhD,aAAgB,MAEvEG,iBACE,OAAO5iC,QAAQrZ,EAAKk8C,iBAAmBl8C,EAAKm8C,cAE9CtlD,UACE,GAAIyD,KAAKshD,YAActhD,KAAK2hD,WAAY,CACtC,GAAIj8C,EAAKk8C,iBAAmBl8C,EAAKk8C,gBAAgBrlD,IAC/C,OAAOulD,EAASp8C,EAAKk8C,gBAAgBrlD,KAChC,GAAImJ,EAAKm8C,aAAen8C,EAAKm8C,YAAYtlD,IAC9C,OAAOulD,EAASp8C,EAAKm8C,YAAYtlD,KAGrC,OAAOwC,OAAA8a,EAAA,EAAA9a,CAAA,GAAK+iD,EAASp8C,EAAK07C,cAAc7kD,OAE1CwlD,YACE,YAA0Bh+C,IAAtB2B,EAAK2X,OAAO0kC,MACPr8C,EAAK2X,OAAO0kC,MAEdr8C,EAAK0M,KAAO1M,EAAK0M,KAAK2vC,MAAQ,IAEvCC,kBACE,YAAgCj+C,IAA5B2B,EAAK2X,OAAO2kC,YACPt8C,EAAK2X,OAAO2kC,YAEjBt8C,EAAK0M,KACA1M,EAAK0M,KAAK6vC,OAEfv8C,EAAK07C,cAActwC,QAAQoxC,QACtBx8C,EAAK07C,cAActwC,QAAQoxC,QAAQF,YAErC,KAETG,eACE,IAAMzoC,EAAa1Z,KAAK0Z,WACxB,MAAO,CACLtI,UAAWsI,EAAWtI,UACtBD,SAAUuI,EAAWvI,SACrBixC,OAAQ1oC,EAAW2oC,MAAQ,CAAC,CAAEA,MAAO3oC,EAAW2oC,QAAW,KAC3DC,OAAQ5oC,EAAWqoC,MACf,CACE,CACEA,MAAK,GAAA/9C,OAAK0V,EAAWsoC,aAAhBh+C,OAA8B0V,EAAWqoC,SAGlD,OAGRroC,iBACE,GAAyB,OAArBhU,EAAK68C,aAAwB78C,EAAK68C,YAAYC,QAAS,KAAAC,EACP/8C,EAAK68C,YAA/CnxC,EADiDqxC,EACjDrxC,UAAWD,EADsCsxC,EACtCtxC,SAAUkxC,EAD4BI,EAC5BJ,MAAOK,EADqBD,EACrBC,UACpC,OAAOhlD,IAAEilD,SAAF5jD,OAAA8a,EAAA,EAAA9a,CAAA,GACA2G,EAAK2X,QACV,CACE0kC,MAAO/hD,KAAK+hD,MACZC,YAAahiD,KAAKgiD,YAClB5wC,YACAD,WACAkxC,QACAvkC,KAAO4kC,GAAaA,EAAU5kC,MAAS,KAI7C,OAAIpY,EAAKk9C,WACAllD,IAAEilD,SAAF5jD,OAAA8a,EAAA,EAAA9a,CAAA,GAAgB2G,EAAK2X,QAArBte,OAAA8a,EAAA,EAAA9a,CAAA,GAAoC2G,EAAKk9C,aAE3CllD,IAAEilD,SAAF5jD,OAAA8a,EAAA,EAAA9a,CAAA,GACA2G,EAAK2X,QACV,CAAE0kC,MAAO/hD,KAAK+hD,MAAOC,YAAahiD,KAAKgiD,eAG3Ca,eACE,OAAwB,OAAjBn9C,EAAKs3B,YAGfn3B,MAAM,SAAAH,GAAI,MAAK,CACdo9C,2BACE,MAAO,CACLh9C,SAAUJ,EAAK07C,cAAcjuC,GAC7BkuC,aAAc37C,EAAK2X,OAAOgkC,aAC1BG,UAAW97C,EAAK+7C,aAChBsB,YAAar9C,EAAK0M,MAAQ1M,EAAK0M,KAAK4wC,QACpCzmD,IAAKmJ,EAAKnJ,MAGd0mD,2BACE,MAAO,CACLjmB,QAASt3B,EAAKs3B,QACdqkB,aAAc37C,EAAK27C,aACnBG,UAAW97C,EAAK+7C,aAChBU,SAAUz8C,EAAKy8C,SACf5lD,IAAKmJ,EAAKnJ,MAGd2mD,2BACE,MAAO,CACLlmB,QAASt3B,EAAKs3B,QACdmlB,SAAUz8C,EAAKy8C,SACfX,UAAW97C,EAAK+7C,aAChB3jC,KAAMpY,EAAKgU,WAAWoE,UAI3BrY,QAAQ,SAAAC,GAAI,MAAK,CAChBy9C,WADgB,WAEdz9C,EAAKs3B,QAAU,MAEjBomB,WAJgB,WAKdrkD,OAAOyE,OAAOkC,EAAMy7C,MAEtBkC,SAPgB,SAOPrmB,GAEP,OADAt3B,EAAKs3B,QAAUA,EACRA,MAGVv3B,QAAQ,SAAAC,GAAI,MAAK,CAChB49C,YADgB,SACJxyC,GACVpL,EAAKk8C,gBAAkB9wC,GAEzByyC,cAJgB,WAKd79C,EAAKk8C,qBAAkB79C,GAEzBy/C,gBAPgB,SAOA/yC,GACd/K,EAAK+9C,aAAehzC,MAGvBhL,QAAQ,SAAAC,GAAI,MAAK,CAChBg+C,aADgB,SACH59C,GACXJ,EAAKI,SAAWA,GAElB69C,cAJgB,SAIFvxC,GACZ1M,EAAK0M,KAAOA,GAEdwxC,mBAPgB,SAOGC,GACjBn+C,EAAKo+C,gBAAkBD,GAEzBE,iBAVgB,SAWd1mC,EACA2mC,GAEAt+C,EAAK2X,OAALte,OAAA8a,EAAA,EAAA9a,CAAA,CACEsiD,aAAchkC,EAAOgkC,cAClB3jD,IAAEqe,KAAKsB,EAAQte,OAAOuc,KAAK0oC,IAFhC,CAGExC,UAAWnkC,EAAOmkC,YAEpB97C,EAAKgJ,IAAI,qBAAsBhJ,EAAK2X,SAEtC4mC,cArBgB,SAqBF1B,GACZ78C,EAAK68C,YAAcA,EACnB78C,EAAKgJ,IAAI,mBAAoB6zC,IAE/B2B,yBAzBgB,WA0Bdx+C,EAAKk9C,WAAa,CAChBxxC,UAAW4vC,EAAMrE,KAAKvrC,YACtBD,SAAU6vC,EAAMrE,KAAKxrC,WACrBkxC,MAAOrB,EAAMmD,SAAS9B,QACtBN,MAAOf,EAAMe,MAAMqC,kBAAkB,GAAGhoC,QAAQ,MAAO,IACvD4lC,YAAa,OACblkC,KAAMkjC,EAAMqD,MAAMC,WAAWC,MAAM,EAAG,KAExC7+C,EAAKm8C,YAAc,CACjB3yC,MAAO,GACP+B,KAAM,uBACNF,OAAQ,aACRC,YAAa,QACbzU,IAAK,CACHK,SAAU,WACVC,UAAW,iBAKlB4I,QAAQ,SAAAC,GACP,IAAI8+C,EAAiE,KAC/DC,EAAe,WACnB,OAAO,IAAI5sB,QAAqC,SAAA4W,GAC9C+V,EAAW/V,KAGf,MAAO,CACLiW,0BADK,SACqB3rC,GAGxB,OAFArT,EAAKi/C,aAAe,SACpBj/C,EAAKk/C,eAAiB7rC,EACf0rC,KAETI,wBANK,SAMmBC,GAGtB,OAFAp/C,EAAKi/C,aAAe,OACpBj/C,EAAKk/C,eAAiBE,EACfL,KAETM,2BAXK,SAWsBC,GACzBt/C,EAAKi/C,aAAe,OACpBj/C,EAAKk/C,oBAAiB7gD,EAClBygD,IACFA,EAAS,CACPS,aAAa,EACbD,eAEFR,EAAW,OAGfU,wBAtBK,WAuBHx/C,EAAKi/C,aAAe,OACpBj/C,EAAKk/C,oBAAiB7gD,EAClBygD,IACFA,EAAS,CACPS,aAAa,EACbD,WAAY,KAEdR,EAAW,UAMrB,SAASrD,IACP,MAAO,CACLnkB,QAAS,KACT5qB,UAAMrO,EACNsZ,OAAQ,CACNgkC,aAAc3/B,IAAiB6/B,UAC/BC,eAAWz9C,EACXg+C,WAAOh+C,EACPs+C,WAAOt+C,EACPqN,eAAWrN,EACXoN,cAAUpN,EACV+Z,UAAM/Z,GAER89C,iBAAa99C,EACb6+C,gBAAY7+C,EACZ69C,qBAAiB79C,EACjB+/C,qBAAiB//C,EACjB0/C,kBAAc1/C,EACdw+C,YAAa,KACb4C,qBAAqB,EACrBR,aAAc,OACdC,oBAAgB7gD,EAChBqhD,uBAAmBrhD,GAIvB,SAAS+9C,EAAT7kD,GACE,MAAO,CAAEL,SAD0CK,EAAjCL,SACCC,UADgCI,EAAvBJ,iCC3TxBwoD,EACM,WADNA,EAEO,WAGAC,EAAWjgD,IAAUC,MAAM,OACrCjF,MAAM,CACLklD,KAAMhuC,IAAMwF,SAASxF,IAAM2nC,OAAQ,IACnCtiD,SAAU2a,IAAMwF,SAASxF,IAAM2nC,OAAQmG,GACvCxoD,UAAW0a,IAAMwF,SAASxF,IAAM2nC,OAAQmG,KAEzC9/C,SAAyB,SAAAG,GAAI,MAAK,CACjC8/C,OAAQ,QAET3/C,MAAM,SAAAH,GAAI,MAAK,CACdo1C,cACE,OAAuB,OAAhBp1C,EAAK8/C,QAEdtoD,aACE,OAAOf,YAAeuJ,OAGzBD,QAAQ,SAAAC,GAAI,MAAK,CAChB+/C,UADgB,SACNhiD,GACRiC,EAAK8/C,OAAS/hD,GAEhBiiD,WAJgB,WAKVhgD,EAAK8/C,SACP9/C,EAAK6/C,KAAO7/C,EAAK8/C,OAAOG,YAG5BC,eATgB,WAUd,GAAIlgD,EAAK8/C,OAAQ,CACf,IAAMtoD,EAASwI,EAAK8/C,OAAOK,YAC3BngD,EAAK9I,SAAWM,EAAOJ,MACvB4I,EAAK7I,UAAYK,EAAOH,WCrCnB+oD,EAAgBR,EAAShgD,MAAM,YACzCC,SAAyB,iBAAO,CAC/BwgD,eAAgB,QAEjBtgD,QAAQ,SAAAC,GAAI,MAAK,CAChBsgD,eADgB,SACDC,EAAcC,GAC3BxgD,EAAKqgD,eAAiBE,EAClBvgD,EAAK8/C,QACP9/C,EAAK8/C,OAAOW,MAAMjqD,YAAYgqD,QCVzBE,EAAa7uC,IACvBC,MAAM,QAAS,CACd6uC,KAAM9uC,IAAMwF,SAAS8e,IAAgB,IACrCp+B,IAAK8Z,IAAMwF,SAAS+oC,EAAe,MAEpCrgD,QAAQ,SAAAC,GAAI,MAAK,CAChB+2B,WADgB,WAEd/2B,EAAK2gD,KAAK1pB,wBCFH2pB,EAAkBjhD,IAAUC,MAAM,cAC5CjF,MAAM,CACL47B,SAAU1kB,IAAMwF,SAASxF,IAAM1Q,MAAM0Q,IAAM1N,QAAS,IACpD08C,QAAShvC,IAAMwF,SAASxF,IAAM1Q,MAAM0Q,IAAM1N,QAAS,IACnD28C,cAAejvC,IAAMkvC,UAAUlvC,IAAM1N,UAEtCtE,SAAgC,iBAAO,CACtCmhD,aAAcC,qBAAW,IAAI91C,MAC7B+1C,WAAYC,mBAAS,IAAIh2C,SAE1BhL,MAAM,SAAAH,GAAI,MAAK,CACd02B,qBACE,OAAO12B,EAAKu2B,SAASzuB,OAAS,EAC1BjQ,MAAMyJ,KAAKtB,EAAKu2B,UAChBv2B,EAAKT,KAAKiM,KAAKsuC,YAErBnjB,sBACE,OAAO32B,EAAKu2B,SAASzuB,OAAS,MAGjC/H,QAAQ,SAAAC,GAAI,MAAK,CAChB+2B,WADgB,WAEd/2B,EAAKu2B,SAASS,QACdh3B,EAAK6gD,QAAQ7pB,QACbh3B,EAAK8gD,cAAgB,MAEvBM,aANgB,SAMHptC,GACXhU,EAAKghD,aAAe,IAAI71C,KAAK6I,EAAWgtC,cACxChhD,EAAKkhD,WAAa,IAAI/1C,KAAK6I,EAAWktC,aAExCjqB,kBAVgB,WAWdj3B,EAAKu2B,SAASS,SAEhBE,gBAbgB,SAaAX,GACdv2B,EAAKu2B,SAAS7f,QAAQ6f,IAExB8qB,iBAhBgB,SAgBCR,GACf7gD,EAAK6gD,QAAQnqC,QAAQmqC,IAEvBS,iBAnBgB,SAmBCC,GACfvhD,EAAK8gD,cAAgBS,GAEvBC,qBAtBgB,WAuBdxhD,EAAKghD,aAAeC,qBAAW,IAAI91C,MACnCnL,EAAKkhD,WAAaC,mBAAS,IAAIh2C,MAC/BnL,EAAKu2B,SAAS7f,QAAQ1W,EAAKT,KAAK0sC,MAAM0U,KAAKjqB,6BClDpC+qB,EAAoB9hD,IAAUC,MAAM,gBAAgBO,MAC/D,SAAAH,GAAI,MAAK,CACPM,eACE,OAAOD,YAA0BL,yjCCDhC,IAAM0hD,GAAwBtvC,KAAH7Z,KAgB9BukB,IACAD,KAGS8kC,GAA0BvvC,KAAH7V,KAMhCmlD,IAGSE,GAA0BxvC,KAAH3V,KAMhCilD,IAGSG,GAA0BzvC,KAAH3C,MC/BvBqyC,GAAiBriD,IAAcG,MAAM,aAAaG,QAC7D,SAAAC,GAAI,MAAK,CACP+hD,WADO,SACI/tC,GACT,IAAMP,EAAwC,CAC5C8C,UAAUld,OAAA8a,EAAA,EAAA9a,CAAA,CACR+a,cAAepU,EAAKI,UACjBsZ,GAAiB1F,KAGxB,OAAO5a,YACL4G,EAAKiS,OAAOsB,OAAO,CACjBC,SAAUmuC,GACVluC,gBAINuuC,WAfO,SAeIhuC,GACT,IAAMP,EAAwC,CAC5CwuC,QAASjuC,EAAWvG,GACpB8I,UAAUld,OAAA8a,EAAA,EAAA9a,CAAA,GACLqgB,GAAiB1F,KAGxB,OAAO5a,YACL4G,EAAKiS,OAAOsB,OAAO,CACjBC,SAAUouC,GACVnuC,gBAIAyuC,WA7BC,eAAAC,EAAA9oD,OAAAob,EAAA,EAAApb,CAAAqb,EAAAhc,EAAAc,KAAA,SAAAC,EA6BUwoD,GA7BV,IAAAxuC,EAAA,OAAAiB,EAAAhc,EAAAkB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cA8BC0Z,EAAwC,CAC5CwuC,WA/BGpoD,EAAAE,KAAA,EAiCCiG,EAAKiS,OAAOsB,OAAO,CACvBC,SAAUquC,GACVpuC,cAnCG,wBAAA5Z,EAAAM,SAAAV,MAAA,gBAAAW,GAAA,OAAA+nD,EAAA9nD,MAAAC,KAAAC,YAAA,MAyCX,SAASmf,GAAiB1F,GACxB,MAAO,CACLgB,KAAMhB,EAAWgB,KACjBotC,MAAOpuC,EAAWwB,UAClB4C,KAAMpE,EAAWoE,KACjBiqC,IAAKruC,EAAWquC,IAChBC,UAAWtuC,EAAWsuC,UACtBC,SAAUvuC,EAAWuuC,SACrBC,cAAexuC,EAAWwuC,eCzDvB,IAAMC,GAAYhB,EAAkB7hD,MAAM,QAAQjF,MAAM,CAC7Dm9B,SAAUjmB,IAAMwF,SAAS4B,IAAmB,IAC5C/E,OAAQrC,IAAMwF,SAASnE,IAAiB,IACxCwvC,MAAO7wC,IAAMwF,SAASyqC,GAAgB,MCH3Ba,GAAgBhjD,IAAUC,MAAM,YAC1CjF,MAAM,CACLioD,iBAAkB/wC,IAAM0nC,MAAM1nC,IAAM1N,QACpCqU,cAAe3G,IAAMwF,SAASL,IAAoB,IAClD6rC,KAAMhxC,IAAMwF,SAASorC,GAAW,MAEjCtiD,MAAM,SAAAH,GAAI,MAAK,CACdI,eACE,OAAOJ,EAAK4iD,kBAAoBtgD,IAAGwgD,KAAK9iD,EAAKT,KAAKiM,KAAKwuC,cAAcvsC,QAGxE1N,QAAQ,SAAAC,GAAI,MAAK,CAChB+2B,WADgB,WAEd/2B,EAAK4iD,sBAAmBvkD,GAE1B2/C,aAJgB,SAIH59C,GACXJ,EAAK4iD,iBAAmBxiD,iECbjB2iD,GAAenD,EAAShgD,MAAM,WACxCC,SAAyB,iBAAO,CAC/BmjD,kBAAmB,QAEpBjjD,QAAQ,SAAAC,GAAI,MAAK,CAChBijD,iBADgB,SACCC,GACfljD,EAAKgjD,kBAAoBE,GAE3BC,gBAJgB,WAKdnjD,EAAKgjD,kBAAoB,MAErBI,UAPU,eAAAC,EAAAhqD,OAAAob,EAAA,EAAApb,CAAAqb,EAAAhc,EAAAc,KAAA,SAAAC,EAOA6pD,GAPA,IAAA/rD,EAAAqR,EAAA/R,EAAA,OAAA6d,EAAAhc,EAAAkB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAQSiG,EAAKiS,OAAOvY,MAAM,CACvCA,MAAOg6B,KACPjgB,UAAW,CAAE6vC,YAVD,OAAA/rD,EAAAsC,EAAAG,MAQN4O,EARMrR,EAQNqR,QAOe/R,EAEjB+R,EAHFujC,KACE/3B,cAAiBvd,IAGjBmJ,EAAK8/C,QACP9/C,EAAK8/C,OAAOW,MAAMjqD,YAAYK,KAnBpB,wBAAAgD,EAAAM,SAAAV,MAAA,gBAAAW,GAAA,OAAAipD,EAAAhpD,MAAAC,KAAAC,YAAA,GAuBVgpD,YAvBU,eAAAC,EAAAnqD,OAAAob,EAAA,EAAApb,CAAAqb,EAAAhc,EAAAc,KAAA,SAAAqb,EAuBE0sC,GAvBF,OAAA7sC,EAAAhc,EAAAkB,KAAA,SAAAqb,GAAA,cAAAA,EAAAnb,KAAAmb,EAAAlb,MAAA,OAwBViG,EAAK8/C,QACP9/C,EAAK8/C,OAAOW,MAAMjqD,YAAY+qD,EAAO1qD,MAzBzB,wBAAAoe,EAAA9a,SAAA0a,MAAA,gBAAA0E,GAAA,OAAAiqC,EAAAnpD,MAAAC,KAAAC,YAAA,2pBCVb,IAAMkpD,GAAqBrxC,KAAHsxC,KAM3BjiC,KAGSkiC,GAA6BvxC,KAAHwxC,MAS1BC,GAAsBzxC,KAAH0xC,MCUnBC,GAAYpkD,IAAUC,MAAM,QACtCjF,MAAM,CACL5C,IAAK8Z,IAAMwF,SAAS0rC,GAAc,IAClCiB,QAASnyC,IAAMkvC,UAAUlvC,IAAM1N,UAEhCtE,SAAyB,iBAAO,CAC/B0hD,OAAQ,QAETxhD,QAAQ,SAAAC,GAAI,MAAK,CAChB+2B,WADgB,WAEd/2B,EAAKgkD,QAAU,KACfhkD,EAAKuhD,OAAS,SAGjBphD,MAAM,SAAAH,GAAI,MAAK,CACdikD,YACE,OACGjkD,EAAKgkD,SACJhkD,EAAKT,KAAKiM,KAAKmuC,OAAO9nB,KAAKvvB,IAAG6U,OAAO,KAAMnX,EAAKgkD,WAClD,MAGJrtB,sBACE,OAAuB,OAAhB32B,EAAKuhD,QAEd2C,qBACE,OAAuB,OAAhBlkD,EAAKuhD,OAAkB,KAAOvhD,EAAKuhD,OAAO9zC,IAEnD02C,4BACE,OAAInkD,EAAKuhD,OACAxH,KAAS,KAAM/5C,EAAKuhD,OAAO9zC,IAEd,OAAfnT,KAAK2pD,MACR,kBAAM,GACNlK,KAAgBA,KAASz/C,KAAK2pD,MAAMx2C,IAAK,CAAC,QAAS,QAEzD22C,0BACE,OAAoB,OAAhBpkD,EAAKuhD,OACAxH,KAAgBA,KAAS/5C,EAAKuhD,OAAO9zC,IAAK,CAC/C,gBACA,OAGkB,OAAfnT,KAAK2pD,MACR,kBAAM,GACNlK,KAAgBA,KAASz/C,KAAK2pD,MAAMx2C,IAAK,CACvC,gBACA,QACA,QAGR8oB,eACE,OAAOv2B,EAAKT,KAAKiM,KAAK+qB,aAGzBp2B,MAAM,SAAAH,GAAI,MAAK,CACdqkD,iBADc,SACGf,EAAY3rC,GAC3B,MAAO,CACL2rC,SACA/Q,OAAQ,CACN0E,KAAMt/B,EAAOs/B,KACbjpC,QAAS2J,EAAO3J,QAChBoG,cAAeuD,EAAOvD,cAAc3G,GACpC62C,UAAW3sC,EAAO2sC,UAAU72C,GAC5B82C,kBAAmB,CACjBriD,MAAOjL,OAAO0gB,EAAO4sC,kBAAkBriD,QAAU,GAEnDsiD,gBAAiB7sC,EAAO6sC,gBACrBzsD,IAAI0sD,IACJ9rC,OAAOohC,KAASA,KAAS,CAAC,QAAS,SAAU,QAChD2K,WAAY1kD,EAAKjI,IAAIirD,wBAAqB3kD,QAKjD0B,QAAQ,SAAAC,GAAI,MAAK,CAChBk3B,gBADgB,SACAqqB,GACdvhD,EAAKuhD,OAASA,EACdvhD,EAAKgkD,QAAUzC,EAAO0C,MAAMx2C,IAE9Bk3C,eALgB,SAKDV,EAAeW,GAC5B5kD,EAAKgkD,QAAUC,EAAMx2C,GAChBzN,EAAKuhD,QAAUvhD,EAAKuhD,OAAO0C,MAAMx2C,KAAOw2C,EAAMx2C,KACjDzN,EAAKuhD,OACuB,IAAzBqD,EAAc98C,QAAgBxF,IAAGwgD,KAAK8B,IAAmB,OAGhE3tB,kBAZgB,WAadj3B,EAAKuhD,OAAS,MAEhBsD,iBAfgB,WAgBd7kD,EAAKgkD,QAAU,KACfhkD,EAAKuhD,OAAS,SAGjBxhD,QAAQ,SAAAC,GAAI,MAAK,CAChB8kD,WAAYC,YAAIrwC,EAAAhc,EAAAc,KAAC,SAAAC,EAAUurD,GAAV,IAAA9B,EAAAzvC,EAAAlc,EAAAqR,EAAAujC,EAAA,OAAAz3B,EAAAhc,EAAAkB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACK,OAAhBiG,EAAKuhD,OADM,CAAA1nD,EAAAE,KAAA,cAEP,IAAIivC,MAAM,8CAFH,OAaE,OATXka,EAASvsD,YAAgB,CAC7Ba,OAAQwI,EAAKuhD,OAAO1qD,IACpBa,aAAc,IACdE,YAAa,IAET6b,EAAmC,CACvCrT,SAAUJ,EAAKuhD,OAAO9zC,GACtBy1C,UAXarpD,EAAAE,KAAA,EAaQiG,EAAKiS,OAAOsB,OAAO,CACxCC,SAAUiwC,GACVhwC,YACA4E,cAAe,CACb4sC,OAAQ,SAACnrD,EAADoC,GAA8B,IAC9BiwC,EAD8BjwC,EAArBqc,eACc3P,KAC1Bk8C,WACH,OAAI3Y,EACK9yC,OAAA8a,EAAA,EAAA9a,CAAA,GACFS,EADL,CAEEorD,MAAOprD,EAAKorD,MAAM5mD,OAAO6tC,KAGtBryC,MA1BE,OAAAvC,EAAAsC,EAAAG,MAaP4O,EAbOrR,EAaPqR,QAkBAujC,EAAQvjC,EAA8Bk8C,WAC5CE,EAAa7Y,EAAK1+B,KAhCL,wBAAA5T,EAAAM,SAAAV,MAmCjB0rD,YApCgB,SAoCJ7B,GACV,GAAKA,EAAL,CAGA,IAAM7vC,EAAoC,CACxC6vC,UAEF,OAAOtjD,EAAKiS,OAAOsB,OAAO,CACxBC,SAAUqwC,GACVpwC,YACA4E,cAAe,CACb4sC,OAAQ,SAAAnrD,GACN,OAAOT,OAAA8a,EAAA,EAAA9a,CAAA,GACFS,EADL,CAEEorD,MAAOnL,KAASA,KAAS,KAAMuJ,GAASxpD,EAAKorD,eAMvDE,mBAAoBL,YAAIrwC,EAAAhc,EAAAc,KAAC,SAAAqb,EACvBs3B,EACAkZ,EACAC,GAHuB,IAAAlsC,EAAA3F,EAAA,OAAAiB,EAAAhc,EAAAkB,KAAA,SAAAqb,GAAA,cAAAA,EAAAnb,KAAAmb,EAAAlb,MAAA,UAKlBoyC,GAAQkZ,IAAaC,EALH,CAAArwC,EAAAlb,KAAA,eAAAkb,EAAA/a,OAAA,iBAcvB,OANMkf,EAASisC,EAAWC,EAEpB7xC,EAA2C,CAC/C6vC,OAAQnX,EAAK1+B,GACb2L,UAZqBnE,EAAAlb,KAAA,EAcjBiG,EAAKiS,OAAOsB,OAAO,CACvBC,SAAUmwC,GACVlwC,YACAC,mBAAoB,CAClBE,WAAY,WACZ2xC,mBAAoB,CAClB3xC,WAAY,OACZnG,GAAI0+B,EAAK1+B,GACT+3C,SAAUrZ,EAAKqZ,SAAWpsC,MAtBT,wBAAAnE,EAAA9a,SAAA0a,SA6B7B,SAAS4wC,GAAavjD,GACpB,GAAc,OAAVA,EACF,OAAO,KAET,IAAMwjD,EAAMzuD,OAAOiL,GACnB,OAAOjL,OAAO0uD,MAAMD,GAAO,KAAOA,EAGpC,SAASjB,GAAwBmB,GAC/B,MAAO,CACL76C,MAAO,CAAE7I,MAAOujD,GAAaG,EAAM76C,MAAM7I,QACzC2jD,QAAS,CAAE3jD,MAAOujD,GAAaG,EAAMC,QAAQ3jD,SAAW,IClNrD,IAAM4jD,GAAYnmD,IAAUC,MAAM,QACtCjF,MAAM,CACLI,KAAM8W,IAAMwF,SAAS0hC,EAAW,IAChCvtC,KAAMqG,IAAMwF,SAASiiC,EAAW,IAChCrN,MAAOp6B,IAAMwF,SAASqpC,EAAY,IAClCxU,YAAar6B,IAAMwF,SAASmkC,EAAkB,IAC9CrP,KAAMt6B,IAAMwF,SAAS0sC,GAAW,IAChCzjD,SAAUuR,IAAMwF,SAASsrC,GAAe,IACxCttB,OAAQxjB,IAAMwF,SAAS8hC,EAAa,IACpC4M,WAAYl0C,IAAMwF,SAASupC,EAAiB,MAE7CzgD,MAAM,SAAAH,GAAI,MAAK,CACdgmD,sBACE,MAAO,CACLhmD,EAAKjF,KACLiF,EAAKwL,KACLxL,EAAKM,SACLN,EAAKmsC,KACLnsC,EAAKisC,MACLjsC,EAAK+lD,WACL/lD,EAAKksC,iBAIVrsC,SAAS,iBAAO,CACfqS,aAAe,QAEhBnS,QAAQ,SAAAC,GAAI,MAAK,CAChBimD,UADgB,SACNh0C,GACRjS,EAAKkS,aAAeD,kFChCnB,IAAM8jC,GAAyB,SAAAx+C,GAAkB,IAAfwF,EAAexF,EAAfwF,SAAeyzB,EAC5B7zB,IAAM8zB,UAAS,GADa4d,EAAAh1C,OAAAs3B,EAAA,EAAAt3B,CAAAm3B,EAAA,GAC/C01B,EAD+C7X,EAAA,GACvC8X,EADuC9X,EAAA,GAAA+X,EAGvCzpD,IAAM8zB,SAAS,kBAAMq1B,GAAUO,WAAvC9mD,EAH+ClG,OAAAs3B,EAAA,EAAAt3B,CAAA+sD,EAAA,MAAAE,EAIrC3pD,IAAM8zB,SAAS,WAC9B,IAAM81B,ECHH,SAA4BhnD,GACjC,OAAOinD,oCACLC,yBAAe,CACbC,kBAAkB,EAClBC,SAAU,kBAAMpnD,EAAKxE,KAAKk9C,OAC1B2O,eAAgB,kBAAMrnD,EAAKxE,KAAKg8B,gBAElC8vB,0BACAC,4BACAC,8BACAC,4BAAkBhuD,IAAU+xC,WDPVkc,CAAmB1nD,GAGrC,OADAA,EAAK0mD,UAAUM,GACRA,IAJFt0C,EAJ+C5Y,OAAAs3B,EAAA,EAAAt3B,CAAAitD,EAAA,MAoBtD,OATAY,yBAAc7tD,OAAAob,EAAA,EAAApb,CAAAqb,EAAAhc,EAAAc,KAAC,SAAAC,IAAA,OAAAib,EAAAhc,EAAAkB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAKPo4B,QAAQC,IAAI7yB,EAAKymD,gBAAgBjuD,IAAI4+C,IAL9B,OAMbwP,GAAQ,GANK,wBAAAtsD,EAAAM,SAAAV,MAOZ,CAAC8F,IAEC2mD,EAKHp5C,EAAApU,EAAAC,cAAC82C,EAAA,eAAD,CAAgBx9B,OAAQA,GACtBnF,EAAApU,EAAAC,cAAC89C,EAAY0Q,SAAb,CAAsBjlD,MAAO3C,GAC1B5C,IAAMw0B,SAASC,KAAKr0B,KANlB+P,EAAApU,EAAAC,cAACH,GAAA,EAAD,OAYEsC,GAAU,WACrB,IAAMyE,EAAO5C,IAAMyqD,WAAW3Q,GAC9B,IAAKl3C,EACH,MAAM,IAAIypC,MAAM,oCAElB,OAAOzpC","file":"static/js/main.7be0e091.chunk.js","sourcesContent":["import { computeDestinationPoint, getBounds } from 'geolib'\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLng =>\n  new google.maps.LatLng(Number(gps.latitude), Number(gps.longitude))\n\nexport const gpsToLatLngLit = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n\ninterface IGeneratePolygonInput {\n  center: GeoPoint\n  metersRadius?: number\n  pointsCount?: number\n}\n\nexport const generatePolygon = ({\n  center,\n  metersRadius = 1000,\n  pointsCount = 15,\n}: IGeneratePolygonInput) => {\n  return new Array(pointsCount).fill(null).map((_, idx) => {\n    const degree = (360 / pointsCount) * idx\n    return computeDestinationPoint(center, metersRadius, degree)\n  })\n}\n\nexport const getBoundsOfPoints = (points: GeoPoint[]) => {\n  const bounds = getBounds(points)\n  if (!bounds) {\n    return null\n  }\n  return new google.maps.LatLngBounds(\n    {\n      lat: bounds.minLat,\n      lng: bounds.minLng,\n    },\n    {\n      lat: bounds.maxLat,\n      lng: bounds.maxLng,\n    },\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport loaderGif from '../assets/loader.gif'\nimport { appConfig } from '../config'\n\nconst StyledPageLoader = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n`\n\nconst PageLoader: React.FC = () => (\n  <StyledPageLoader role=\"banner\">\n    <img\n      src={loaderGif}\n      alt={appConfig.pageTitleSuffix}\n      width={200}\n      height={200}\n    />\n  </StyledPageLoader>\n)\n\nexport default PageLoader\n","export interface IQueryError extends Error {\n  showToUser: boolean\n}\n\nexport type TQueryErrors = IQueryError[] | null\n\n// tslint:disable-next-line:no-any\nexport const getQueryErrors = async (query: Promise<any>) => {\n  const result = await query\n  if (result && result.errors) {\n    return result.errors as IQueryError[]\n  }\n  return null\n}\n","import React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { RedirectToLogin } from './RedirectToLogin'\n\ninterface ISecureRouteProps extends RouteProps {\n  redirect?: boolean\n  lazy?: boolean\n}\n\nexport const SecureRoute: React.FC<ISecureRouteProps> = ({\n  redirect = true,\n  lazy = true,\n  ...props\n}) => {\n  const { auth } = useRoot()\n  if (!auth.isAuthenticatedUser) {\n    return redirect ? <RedirectToLogin /> : <NotFoundPage />\n  }\n  if (props.component && typeof props.component === 'object') {\n    const { component, path, exact } = props\n    return <LazyRoute path={path} exact={exact} component={component} />\n  }\n  return <Route {...props} />\n}\n","import React, { MouseEvent } from 'react'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { applyAlphaToColor, Colors, Radiuses, Spacing } from '../styling'\n\nexport interface ITouchButtonProps\n  extends React.HTMLAttributes<HTMLButtonElement> {\n  iconName?: string\n  iconColor?: Colors\n  iconSize?: number\n  text?: string\n  color?: Colors\n  badge?: ReactNode\n  disabled?: boolean\n  textNextToIcon?: boolean\n  className?: string\n  width?: string\n  height?: string\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n}\n\nconst applyAlpha = (alphaValue: number) => (props: ITouchButtonProps) =>\n  applyAlphaToColor(props.color!, alphaValue)\n\nconst TouchButtonStyled = styled.button`\n  min-height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  min-width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  width: ${({ width = '100%' }: ITouchButtonProps) => width};\n  height: ${({ height = '100%' }: ITouchButtonProps) => height};\n  margin: 0;\n  padding: 0 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  /* fallback font size for incompatible browsers */\n  font-size: 1rem;\n  font-size: calc(0.6rem + 0.5vw);\n  transition-duration: 0.2s;\n\n  & .material-icons {\n    vertical-align: middle;\n  }\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nconst ButtonLabelStyled = styled.div`\n  color: white;\n  text-align: center;\n  width: 100%;\n  overflow: hidden;\n`\nconst ButtonLabelNextToIconStyled = styled(ButtonLabelStyled)`\n  width: calc(100% - 4rem);\n  margin: 0 0 0 1rem;\n  text-align: left;\n  display: inline-block;\n  vertical-align: top;\n  overflow: hidden;\n`\n\nexport const TouchButton = React.forwardRef<\n  HTMLButtonElement,\n  ITouchButtonProps\n>(\n  (\n    {\n      children,\n      iconName,\n      iconColor = Colors.white,\n      iconSize = 3,\n      color = Colors.greyMiddle,\n      textNextToIcon = false,\n      badge,\n      text,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    return (\n      <TouchButtonStyled color={color} {...props} ref={forwardedRef}>\n        {iconName && (\n          <Icon iconName={iconName} color={iconColor} fontSize={iconSize} />\n        )}\n\n        {text &&\n          textNextToIcon && (\n            <ButtonLabelNextToIconStyled>{text}</ButtonLabelNextToIconStyled>\n          )}\n\n        {text &&\n          !textNextToIcon && <ButtonLabelStyled>{text}</ButtonLabelStyled>}\n\n        {badge}\n        {children}\n      </TouchButtonStyled>\n    )\n  },\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Spacing } from '../styling'\nimport { MarginBox } from './MarginBox'\n\ninterface IProps {\n  width?: number\n  widthUnit?: string\n  height?: number\n  heightUnit?: string\n  margin?: string\n  className?: string\n}\n\nconst widthProperty = ({\n  width: width,\n  widthUnit: widthUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (width === undefined) {\n    return ''\n  } else {\n    return `width: ${width}${widthUnit}`\n  }\n}\n\nconst heightProperty = ({\n  height: height,\n  heightUnit: heightUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (height === undefined) {\n    return ''\n  } else {\n    return `height: ${height}${heightUnit}`\n  }\n}\n\nconst SizerContainer = styled('div')`\n  ${widthProperty};\n  ${heightProperty};\n`\n\nexport const Sizer: React.FC<IProps> = ({\n  width,\n  widthUnit = Spacing.DefaultSizeUnit,\n  height,\n  heightUnit = Spacing.DefaultSizeUnit,\n  margin,\n  children,\n  className,\n  ...props\n}) => {\n  const wrap = (\n    <SizerContainer\n      width={width}\n      widthUnit={widthUnit}\n      height={height}\n      heightUnit={heightUnit}\n      className={className}\n      {...props}\n    >\n      {children}\n    </SizerContainer>\n  )\n\n  return margin === undefined ? (\n    wrap\n  ) : (\n    <MarginBox margin={margin}>{wrap}</MarginBox>\n  )\n}\n","import { Observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { TRootModel } from '../models/RootModel'\nimport { useRoot } from './RootProvider'\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.FC<IProps> = ({ render, observe = true }) => {\n  const root = useRoot()\n  return observe === true ? (\n    <Observer>{() => <>{render(root)}</>}</Observer>\n  ) : (\n    render(root)\n  )\n}\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TMenuModel } from './MenuModel'\n\nexport const MenuBaseModel = BaseModel.named('MenuBase')\n  .volatile(() => ({\n    filterInput: '',\n  }))\n  .actions(self => ({\n    setFilterInput(input: string) {\n      self.filterInput = input\n    },\n  }))\n  .views(self => ({\n    get branchId() {\n      return getParent<TMenuModel>(self).settings.branchId\n    },\n  }))\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface IProps {\n  iconName: string\n  color?: string\n  fontSize?: number\n  fontSizeUnit?: string\n}\n\nconst getFontSize = ({ fontSize = 1.5, fontSizeUnit = 'rem' }: IProps) => {\n  return fontSize + fontSizeUnit\n}\n\nconst IconSpanStyled = styled.span`\n  font-size: ${getFontSize} !important;\n  color: ${(props: IProps) => props.color};\n`\n\nexport const Icon: React.FC<IProps> = ({\n  iconName,\n  color = Colors.white,\n  fontSize,\n  fontSizeUnit,\n}) =>\n  iconName ? (\n    <IconSpanStyled\n      color={color}\n      fontSize={fontSize}\n      fontSizeUnit={fontSizeUnit}\n      iconName={iconName}\n      className=\"material-icons\"\n    >\n      {iconName}\n    </IconSpanStyled>\n  ) : null\n","import { autorun, observable } from 'mobx'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { appConfig } from '../config'\nimport { RM } from '../helpers/ramda'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  title: string\n}\n\nconst TitleStyled = styled.h1`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  margin: 0.5rem 0.5rem 0 0.5rem;\n  white-space: nowrap;\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.9);\n`\n\nconst observableTitles = observable.array<string>([])\n\nautorun(() => {\n  const lastTitle = Array.from(observableTitles).pop()\n  if (lastTitle) {\n    document.title = `${lastTitle} :: ${appConfig.pageTitleSuffix}`\n  } else {\n    document.title = appConfig.pageTitleSuffix\n  }\n})\n\nconst PageTitleDisplay: React.FC = () => (\n  <Observer>\n    {() => <TitleStyled>{observableTitles.join(' - ')}</TitleStyled>}\n  </Observer>\n)\n\nexport class PageTitle extends React.Component<IProps> {\n  static Route = PageTitleRoute\n  static Display = PageTitleDisplay\n  componentDidMount() {\n    observableTitles.push(this.props.title)\n  }\n  componentDidUpdate(prevProps: IProps) {\n    const idx = observableTitles.findIndex(RM.equals(prevProps.title))\n    if (idx >= 0) {\n      observableTitles.splice(idx, 1, this.props.title)\n    }\n  }\n  componentWillUnmount() {\n    observableTitles.remove(this.props.title)\n  }\n  render() {\n    return null\n  }\n}\n\nfunction PageTitleRoute({ title, ...props }: IProps & RouteProps) {\n  return <Route {...props} render={() => <PageTitle title={title} />} />\n}\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import Color from 'color'\nimport styled, { css } from 'styled-components'\n\nimport { Colors, Radiuses } from '../styling'\n\ninterface IProps {\n  color?: string\n  textColor?: string\n  padding?: number\n  stretchToParent?: boolean\n}\n\nexport const Card = styled.div`\n  background: ${getBackgroundColor};\n  color: ${getTextColor};\n  border-radius: ${Radiuses.Card};\n  padding: ${getPadding}rem;\n  margin: 0 0 0.5rem 0;\n  position: relative;\n  ${applyStretchToParentStyle};\n`\n\nCard.displayName = 'Card'\n\nfunction getPadding({ padding = 0.5 }: IProps) {\n  return padding\n}\n\nfunction getBackgroundColor({ color }: IProps) {\n  return Color(color || Colors.greyLight)\n    .alpha(0.8)\n    .lighten(0.4)\n    .string()\n}\n\nfunction getTextColor(props: IProps) {\n  return props.textColor || Colors.black\n}\n\nfunction applyStretchToParentStyle({ stretchToParent = false }: IProps) {\n  if (!stretchToParent) {\n    return ''\n  }\n  return css`\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  `\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\n\nimport { IPageLayoutProps, PageLayout } from '../molecules/PageLayout'\n\ninterface IFullPageLayoutProps extends IPageLayoutProps {\n  width?: number\n}\n\nfunction getLayout(width: number): Layout[] {\n  return [{ i: 'full', x: 0, y: 1, w: width, h: 10 }]\n}\n\nexport const FullPageLayout: React.FC<IFullPageLayoutProps> = ({\n  children,\n  width = 16,\n  ...props\n}) => (\n  <PageLayout layouts={getLayout(width)} {...props}>\n    <div key=\"full\">{children}</div>\n  </PageLayout>\n)\n","import { useSnackbar as useSnackbarOrig, VariantType } from 'notistack'\n\nconst successVariant = { variant: 'success' as VariantType }\nconst errorVariant = { variant: 'error' as VariantType }\nconst warningVariant = { variant: 'warning' as VariantType }\nconst infoVariant = { variant: 'info' as VariantType }\n\nexport function useSnackBar() {\n  const { enqueueSnackbar } = useSnackbarOrig()\n  return {\n    enqueueSnackbar,\n    enqueueSuccess: (errorMessage: string) =>\n      enqueueSnackbar(errorMessage, successVariant),\n    enqueueError: (errorMessage: string) =>\n      enqueueSnackbar(errorMessage, errorVariant),\n    enqueueWarning: (errorMessage: string) =>\n      enqueueSnackbar(errorMessage, warningVariant),\n    enqueueInfo: (errorMessage: string) =>\n      enqueueSnackbar(errorMessage, infoVariant),\n  }\n}\n","import Color from 'color'\n\nimport { RM } from './helpers/ramda'\n\nexport enum Colors {\n  yellow = '#FFDB2B',\n  pink = '#FF2B95',\n  blue = '#2441FF',\n  red = '#FF1C1C',\n  green = '#179B12',\n  turquoise = '#2BFFFF',\n  orange = '#FF862B',\n  violet = '#6D4F8C',\n  black = '#000000',\n  greyDarkest = '#080808',\n  greyDark = '#2C2C2C',\n  greyMiddle = '#939393',\n  greyLight = '#EDEDED',\n  white = '#FFFFFF',\n}\n\nexport const applyAlphaToColor = RM.curry((color: Colors, alphaValue: number) =>\n  Color(color)\n    .alpha(alphaValue)\n    .string(),\n)\n\nexport enum Radiuses {\n  Card = '0.5rem',\n  Button = '0.5rem',\n  TextComponent = '0.25rem',\n}\n\nexport const Spacing = {\n  MarginAroundFormComponents: '0.1rem',\n  Small: '0.25rem',\n  Middle: '0.5rem',\n  LayoutGridCellMargin: '0.5rem',\n  ButtonHeight: 3.4375,\n  DefaultInputWidth: 20,\n  DefaultSizeUnit: 'rem',\n  ButtonColumnWidthPx: 55,\n  InfoMessageFontSize: '1.375rem',\n}\n\nexport const FontSizes = {\n  CompactCard: '0.95rem',\n  CompactCardBig: '1rem',\n}\n","import React from 'react'\n\nimport { PageTitle } from '../atoms/PageTitle'\nimport { i18n } from '../i18n'\n\nexport const NotFoundPage: React.FC = () => (\n  <>\n    <PageTitle title={i18n.t`Not found`} />\n    <h1>{i18n.t`There is nothing here, sorry!`}</h1>\n  </>\n)\n","import { DocumentNode } from 'graphql'\nimport { Lambda } from 'mobx'\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\n\nimport { Loading } from '../atoms/Loading'\nimport { whenGoingOnline } from '../helpers/offline'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean\n    refetchOnConnectionLost?: boolean\n  }\n  const GQuery: React.FC<IProps> = props => {\n    const cleanup = useRef<Lambda[]>([])\n    const executeCleanup = useCallback(() => {\n      cleanup.current.forEach(fn => fn())\n      cleanup.current.length = 0\n    }, [])\n\n    useEffect(\n      () => {\n        return executeCleanup\n      },\n      [cleanup.current.length],\n    )\n\n    const {\n      render,\n      renderFragment,\n      renderLoading = true,\n      renderError = true,\n      refetchOnConnectionLost = false,\n      children,\n      ...rest\n    } = props\n\n    return (\n      // @ts-ignore Some weird changes in @types/react\n      <Query query={query} {...rest}>\n        {result => {\n          if (result.loading) {\n            if (typeof renderLoading === 'function') {\n              return renderLoading(result)\n            } else if (renderLoading === true) {\n              return <Loading />\n            }\n          }\n          if (result.error) {\n            throw result.error\n          }\n          if (refetchOnConnectionLost) {\n            cleanup.current.push(whenGoingOnline(result.refetch))\n          }\n          if (result.data) {\n            if (renderFragment) {\n              return <>{renderFragment(result.data, result)}</>\n            }\n            if (render) {\n              return render(result.data, result)\n            }\n          }\n          return children || null\n        }}\n      </Query>\n    )\n  }\n  return GQuery\n}\n","import debug from 'debug'\nimport React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\n\ninterface IRedirectToLoginProps {\n  useOrigin?: boolean\n}\n\nconst log = debug('routing')\n\nexport const RedirectToLogin: React.FC<IRedirectToLoginProps> = ({\n  useOrigin = true,\n}) => (\n  <Route\n    path=\"/login\"\n    children={({ match, location }) => {\n      if (match) {\n        return null\n      }\n      log('redirecting to login...')\n      return (\n        <Redirect\n          to={{\n            pathname: '/login',\n            state: { origin: useOrigin ? location.pathname : '/' },\n          }}\n        />\n      )\n    }}\n  />\n)\n","import { isSameDay } from 'date-fns'\nimport { format, formatWithOptions } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\nimport numeral from 'numeral'\n\nimport { FAddressFragment, FUserNameFragment } from '../graph/generated'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const fullDateFormat = 'dddd LL'\nexport const formatFullDate = formatLocale(fullDateFormat)\n\nexport const dateFormat = 'D.M.YYYY'\nexport const formatDate = formatLocale(dateFormat)\n\nexport const dateFormatISO = 'YYYY-MM-DD'\nexport const formatDateISO = format(dateFormatISO)\n\nexport const timeFormat = 'H:mm'\nexport const formatTime = formatLocale(timeFormat)\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const priceFormat = '0,0.[00]'\nexport const formatPrice = price => numeral(price).format(priceFormat)\n\nexport const formatTimeWithoutTodayDate = (time: string) =>\n  isSameDay(time, new Date()) ? formatTime(time) : formatDateTime(time)\n\nexport const formatAddress = (address: FAddressFragment) => {\n  if (!address) {\n    return ''\n  }\n  if (!address.street) {\n    if (address.city && address.houseNumber) {\n      return `${address.city} ${address.houseNumber}, ${address.state}`\n    }\n    if (address.city) {\n      if (address.state) {\n        return `${address.city}, ${address.state}`\n      }\n      return address.city\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n\nexport function formatFullName(user: FUserNameFragment) {\n  return `${user.lastName} ${user.firstName}`.trim()\n}\n","import React from 'react'\n\nimport { Spacing } from '../styling'\nimport { Sizer } from './Sizer'\n\ninterface IProps {\n  className?: string\n}\n\nexport const SizerButton: React.FC<IProps> = ({ children, ...props }) => {\n  return (\n    <Sizer\n      width={Spacing.ButtonHeight}\n      height={Spacing.ButtonHeight}\n      {...props}\n    >\n      {children}\n    </Sizer>\n  )\n}\n","import * as RM from 'ramda'\n\nexport { RM }\n","import React from 'react'\n\ninterface ILoadingProps {\n  text?: string\n}\n\nexport const Loading: React.FC<ILoadingProps> = ({ text = '...' }) => (\n  <h1>{text}</h1>\n)\n","import React from 'react'\n\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\nimport { SizerButton } from './SizerButton'\nimport { WithRoot } from './WithRoot'\n\nexport class SoundControl extends React.Component {\n  state = { playPreview: false }\n  render() {\n    return (\n      <WithRoot\n        observe={true}\n        render={({ user }) => (\n          <SizerButton>\n            <TouchButton\n              color={user.soundEnabled ? Colors.green : Colors.red}\n              iconName={user.soundEnabled ? 'volume_up' : 'volume_off'}\n              iconSize={2}\n              onClick={() => {\n                user.controlSound(!user.soundEnabled)\n              }}\n            />\n          </SizerButton>\n        )}\n      />\n    )\n  }\n}\n","import { ExitToApp } from '@material-ui/icons'\nimport { SECOND, useTimer } from '@speedlo/hooks'\nimport { DF } from '@speedlo/tools'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { useQLogoutWidget } from '../graph/generated'\nimport { i18n } from '../i18n'\nimport { Colors } from '../styling'\n\nconst StyledLogoutWidget = styled.div`\n  margin-left: 1rem;\n  color: ${Colors.greyLight};\n  &:hover {\n    color: ${Colors.white};\n  }\n\n  & span.name {\n    color: ${Colors.greyLight};\n    text-decoration: none;\n    font-weight: lighter;\n    position: relative;\n    top: 0.6rem;\n    display: inline-block;\n    max-width: 10rem;\n    text-align: right;\n  }\n\n  & svg {\n    color: ${Colors.greyLight};\n    vertical-align: top;\n    margin: 0.4rem;\n  }\n\n  & div.time {\n    font-weight: bold;\n    font-size: 1.3rem;\n  }\n`\n\nexport const LogoutWidget = observer(() => {\n  const { auth } = useRoot()\n  const { data, loading } = useQLogoutWidget(\n    { id: auth.userId },\n    { skip: !auth.isAuthenticated },\n  )\n\n  let displayName\n  if (loading) {\n    displayName = i18n.t`Not logged in`\n  } else {\n    displayName = `${data.user.firstName} ${data.user.lastName}`\n  }\n\n  const now = useTimer({ enabled: true, interval: SECOND })\n\n  return (\n    <StyledLogoutWidget data-testid=\"logout-widget\">\n      <Link to=\"/logout\">\n        <span className=\"name\">{displayName}</span>\n        <ExitToApp />\n      </Link>\n      <div className=\"time\">{DF.format(now, 'H:mm:ss')}</div>\n    </StyledLogoutWidget>\n  )\n})\n","import { useRouterContext } from '@speedlo/hooks'\nimport Color from 'color'\nimport React, { MouseEvent } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { Colors, Radiuses, Spacing } from '../styling'\n\ninterface IHomeButtonProps {\n  iconColor?: Colors\n  color?: Colors\n  disabled?: boolean\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n  goBack?: boolean\n  backRoute?: string\n}\n\nconst applyAlpha = (alphaValue: number) => (props: IHomeButtonProps) =>\n  Color(props.color)\n    .alpha(alphaValue)\n    .string()\n\nconst HomeButtonStyled = styled.button`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 0 0 ${Radiuses.Button} 0 !important;\n  height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  margin: 0;\n  padding: 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  font-size: 1rem;\n  transition-duration: 0.2s;\n\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nexport const HomeButton: React.FC<IHomeButtonProps> = ({\n  color = Colors.greyMiddle,\n  iconColor = Colors.white,\n  goBack = false,\n  backRoute,\n  ...props\n}) => {\n  const { history } = useRouterContext()\n  if (goBack) {\n    return (\n      <HomeButtonStyled\n        color={color}\n        onClick={() => {\n          if (backRoute) {\n            history.push(backRoute)\n          } else {\n            history.goBack()\n          }\n        }}\n        {...props}\n      >\n        <Icon iconName=\"chevron_left\" color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    )\n  }\n  return (\n    <Link to=\"/\">\n      <HomeButtonStyled color={color} {...props}>\n        <Icon iconName=\"home\" color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    </Link>\n  )\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\nimport styled from 'styled-components'\n\nimport { GridLayout } from '../atoms/GridLayout'\nimport { PageTitle } from '../atoms/PageTitle'\nimport { SoundControl } from '../atoms/SoundControl'\nimport { LogoutWidget } from '../organisms/LogoutWidget'\nimport { SecureRoute } from '../routes/SecureRoute'\nimport { HomeButton } from './HomeButton'\n\nexport interface IPageLayoutProps {\n  pageTitle?: string\n  layouts?: Layout[]\n  hideLogoutWidget?: boolean\n  showSoundControl?: boolean\n  showHomeButton?: boolean\n  useBackButton?: boolean\n  backRoute?: string\n  scrollPageTitle?: boolean\n  topContent?: React.ReactNode\n}\n\nconst TopLeftButtonContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n`\n\nconst getPosition = (props: IPageLayoutProps) =>\n  props.scrollPageTitle ? 'absolute' : 'fixed'\n\nconst TopRightContainer = styled.div`\n  position: ${getPosition};\n  top: 0;\n  right: 0;\n  z-index: 100;\n  display: flex;\n  justify-content: flex-end;\n`\nconst PageTitleContainer = styled.div`\n  position: ${getPosition};\n  top: 0rem;\n  left: 4rem;\n`\nconst PageHeaderItem = styled.div`\n  margin: 0.5rem;\n`\n\nexport const PageLayout: React.FC<IPageLayoutProps> = ({\n  pageTitle = '',\n  layouts = [],\n  hideLogoutWidget = false,\n  showSoundControl = false,\n  showHomeButton = true,\n  useBackButton = false,\n  scrollPageTitle = true,\n  backRoute,\n  children,\n  topContent,\n}) => (\n  <>\n    {pageTitle && <PageTitle title={pageTitle} />}\n\n    <TopRightContainer scrollPageTitle={scrollPageTitle}>\n      <PageHeaderItem>{topContent}</PageHeaderItem>\n      {showSoundControl && (\n        <PageHeaderItem>\n          <SoundControl />\n        </PageHeaderItem>\n      )}\n\n      {!hideLogoutWidget && (\n        <SecureRoute path=\"/\" component={LogoutWidget} redirect={false} />\n      )}\n    </TopRightContainer>\n\n    <PageTitleContainer\n      scrollPageTitle={scrollPageTitle}\n      style={{ left: showHomeButton ? '4rem' : 0 }}\n    >\n      <PageTitle.Display />\n    </PageTitleContainer>\n\n    <GridLayout layouts={[...layouts]}>{children}</GridLayout>\n\n    <TopLeftButtonContainer>\n      {showHomeButton ? (\n        <HomeButton goBack={useBackButton} backRoute={backRoute} />\n      ) : null}\n    </TopLeftButtonContainer>\n  </>\n)\n","import styled from 'styled-components'\n\nexport interface IProps {\n  margin: string\n  className?: string\n}\n\nexport const MarginBox = styled('div')`\n  margin: ${(props: IProps) => props.margin};\n`\n","import React from 'react'\nimport RGL, { Layout, WidthProvider } from 'react-grid-layout'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\ninterface IGridLayoutProps {\n  layouts: Layout[]\n}\n\nexport const GridLayout: React.FC<IGridLayoutProps> = ({\n  children,\n  layouts,\n}) => (\n  <ReactGridLayout\n    className=\"layout\"\n    layout={layouts}\n    cols={16}\n    rowHeight={55}\n    margin={[8, 8]}\n    autoSize={false}\n    isDraggable={false}\n    isResizable={false}\n    compactType={null}\n    measureBeforeMount={true}\n  >\n    {children}\n  </ReactGridLayout>\n)\n","import { DefaultApolloClient } from '@speedlo/graphql'\nimport debug from 'debug'\nimport { getPath, getRoot, types } from 'mobx-state-tree'\n\nimport { TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    return debug(`model${getPath(self)}`)\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n  get client() {\n    return this.root.apolloClient as DefaultApolloClient\n  },\n}))\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport {\n  FMenuCategoryListItemFragmentDoc,\n  FPriceFragmentDoc,\n} from '../../../graph/generated'\nimport { GMenuRecipeFormAssoc } from '../../../graph/types'\n\nexport const MenuRecipePriceFragment = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n  ${FPriceFragmentDoc}\n`\n\nexport const MenuAssocRecipeFragment = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const MenuRecipeFormQuery = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...FMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...FMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n  ${MenuRecipePriceFragment}\n  ${FMenuCategoryListItemFragmentDoc}\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeFormAssocQuery = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeDefaults = gql`\n  query GMenuRecipeDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport const QueryMenuRecipeFormAssoc = buildQuery<\n  GMenuRecipeFormAssoc.Query,\n  GMenuRecipeFormAssoc.Variables\n>(MenuRecipeFormAssocQuery)\n","import gql from 'graphql-tag'\n\nimport { FPriceFragmentDoc } from '../../../graph/generated'\n\nexport const MenuRecipeFragment = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n  ${FPriceFragmentDoc}\n`\n\nexport const MenuRecipeVisibilityMutation = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport const MenuRecipeCreateMutation = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeUpdateMutation = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeDeleteMutation = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n","import { LocationDescriptorObject } from 'history'\nimport numeral from 'numeral'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  WareCategoryTypeEnum,\n  WarePriceTypeEnum,\n} from '../../../graph/generated'\nimport {\n  GMenuRecipeCreate,\n  GMenuRecipeDefaults,\n  GMenuRecipeDelete,\n  GMenuRecipeUpdate,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TRecipeFormValues } from '../menutypes'\nimport { MenuRecipeDefaults } from '../organisms/RecipeForm.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuRecipeCreateMutation,\n  MenuRecipeDeleteMutation,\n  MenuRecipeUpdateMutation,\n  MenuRecipeVisibilityMutation,\n} from './MenuRecipeModel.graphql'\n\nexport const MenuRecipeModel = MenuBaseModel.named('MenuRecipe')\n  .volatile(() => ({\n    categoryFilterId: null as MaybeID,\n  }))\n  .actions(self => ({\n    changeVisibility(recipeId: ID, visible: boolean) {\n      self.client.mutate({\n        mutation: MenuRecipeVisibilityMutation,\n        variables: { recipeId, visible },\n        optimisticResponse: {\n          updateRecipe: {\n            __typename: 'Recipe',\n            id: recipeId,\n            visible,\n          },\n        },\n      })\n    },\n    setCategoryFilter(categoryId: MaybeID) {\n      self.categoryFilterId = categoryId\n    },\n    createRecipe(\n      formValues: TRecipeFormValues,\n      recipeType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuRecipeCreate.Variables = {\n        recipe: {\n          companyBranch: self.branchId,\n          wareCategoryType: recipeType,\n          ...getRecipeVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeCreateMutation,\n          variables,\n        }),\n      )\n    },\n    updateRecipe(formValues: TRecipeFormValues) {\n      const variables: GMenuRecipeUpdate.Variables = {\n        recipeId: formValues.id,\n        recipe: {\n          ...getRecipeVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteRecipe(recipeId: ID) {\n      const variables: GMenuRecipeDelete.Variables = {\n        recipeId,\n      }\n      await self.client.mutate({\n        mutation: MenuRecipeDeleteMutation,\n        variables,\n      })\n    },\n    async queryDefaults() {\n      const { data } = await self.client.query<GMenuRecipeDefaults.Query>({\n        query: MenuRecipeDefaults,\n        variables: { branchId: self.branchId },\n      })\n      const {\n        companyBranch: {\n          vats,\n          currency: { code },\n        },\n      } = data\n      return {\n        vats: vats.reduce((result, { vatId, priceType }) => {\n          result[priceType.enum] = vatId\n          return result\n        }, {}),\n        currencyCode: code,\n      }\n    },\n  }))\n\nfunction getRecipeVariables(formValues: TRecipeFormValues) {\n  return {\n    code: formValues.code,\n    nameLabel: formValues.nameLabel,\n    internalNote: formValues.internalNote,\n    descriptionLabel: formValues.descriptionLabel,\n    enabled: formValues.visible,\n    prices: Object.keys(formValues.prices).map(priceType => ({\n      warePriceType: (priceType as unknown) as WarePriceTypeEnum,\n      price: { value: numeral(formValues.prices[priceType].value).value() },\n      vat: formValues.prices[priceType].vatId,\n    })),\n    sideDishCategories: formValues.sideDishes.map(RM.prop('id')),\n    wareCategories: formValues.categories.map(RM.prop('id')),\n    associatedRecipes: formValues.associatedRecipes.map(\n      RM.pick(['associatedRecipe', 'warePriceType']),\n    ),\n    ingredients: formValues.ingredients.map(({ stockItem, quantity }) => {\n      return { stockItem, quantity: parseNumber(quantity) }\n    }),\n  }\n}\n\nfunction parseNumber(value: string | number) {\n  return typeof value === 'number'\n    ? value\n    : Number.parseFloat(value.replace(',', '.'))\n}\n\nexport const getRecipeRoute = (\n  recipeId: ID,\n  recipeType: WareCategoryTypeEnum,\n): LocationDescriptorObject<any> => ({\n  pathname: recipeId,\n  state: { recipeType },\n})\n","import gql from 'graphql-tag'\n\nimport { SpecificBusinessHourFragment } from '../organisms/SpecificBusinessHours.graphql'\n\nexport const CreateSpecificBusinessHour = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`\n\nexport const DeleteSpecificBusinessHour = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n","import { isoDate } from '@speedlo/graphql'\nimport { types } from 'mobx-state-tree'\n\nimport {\n  GCreateSpecificBusinessHour,\n  GDeleteSpecificBusinessHour,\n} from '../../../graph/types'\nimport { formatTime } from '../../../helpers/formats'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  CreateSpecificBusinessHour,\n  DeleteSpecificBusinessHour,\n} from './BusinessHoursModel.graphql'\n\nexport enum ESpecificHourMode {\n  TIMESPAN = 'TIMESPAN',\n  FULLDAY = 'FULLDAY',\n}\n\nexport interface ISpecificFormData {\n  date: Date\n  openAt: Date\n  closeAt: Date\n  note: string\n}\n\nconst byIdPredicate = RM.complement(RM.propEq('id'))\n\nexport const BusinessHoursModel = BaseModel.named('BusinessHours')\n  .props({\n    specificMode: types.optional(\n      types.enumeration(['TIMESPAN', 'FULLDAY']),\n      ESpecificHourMode.TIMESPAN,\n    ),\n  })\n  .actions(self => ({\n    changeSpecificMode(mode: ESpecificHourMode) {\n      self.specificMode = mode\n    },\n    submitSpecificHour(values: ISpecificFormData) {\n      const variables: GCreateSpecificBusinessHour.Variables = {\n        input: {\n          companyBranch: self.root.settings.branchId,\n          specificDate: isoDate(values.date),\n          closed: self.specificMode === ESpecificHourMode.FULLDAY,\n          openAt: values.openAt && formatTime(values.openAt),\n          closeAt: values.closeAt && formatTime(values.closeAt),\n          closedNote: values.note,\n        },\n      }\n      self.client.mutate<GCreateSpecificBusinessHour.Mutation>({\n        mutation: CreateSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.concat(\n                  mutationResult.data.result,\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n    deleteSpecificHour(businessHourId: ID) {\n      const variables: GDeleteSpecificBusinessHour.Variables = {\n        id: businessHourId,\n      }\n      self.client.mutate({\n        mutation: DeleteSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.filter(\n                  byIdPredicate(mutationResult.data.result.id),\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n  }))\n","import gql from 'graphql-tag'\n\nimport { FMenuCategoryFragmentDoc } from '../../../graph/generated'\n\nexport const SortMenuCategoryMutation = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport const MenuCategoryCreateMutation = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport const MenuCategoryUpdateMutation = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...FMenuCategory\n    }\n  }\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport const MenuCategoryDeleteMutation = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n","import { LocationDescriptor } from 'history'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  FMenuCategoryFragment,\n  OrderOriginCategoryEnum,\n  WareCategoryTypeEnum,\n} from '../../../graph/generated'\nimport {\n  GMenuCategoryCreate,\n  GMenuCategoryDelete,\n  GMenuCategoryUpdate,\n  GSortMenuCategory,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuCategoryCreateMutation,\n  MenuCategoryDeleteMutation,\n  MenuCategoryUpdateMutation,\n  SortMenuCategoryMutation,\n} from './MenuCategoryModel.graphql'\n\nexport interface TCategoryFormValues\n  extends Omit<FMenuCategoryFragment, 'origins'> {\n  origins: OrderOriginCategoryEnum[]\n}\n\nexport const MenuCategoryModel = MenuBaseModel.named('MenuCategory').actions(\n  self => ({\n    async sortCategory(categoryId: ID, offset: number) {\n      const variables: GSortMenuCategory.Variables = {\n        categoryId,\n        offset,\n      }\n      const result = await self.client.mutate({\n        mutation: SortMenuCategoryMutation,\n        variables,\n      })\n      return Boolean(result.data && result.data.success)\n    },\n    createCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryCreate.Variables = {\n        input: {\n          companyBranch: self.branchId,\n          wareCategoryType: categoryType,\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryCreateMutation,\n          variables,\n        }),\n      )\n    },\n    async updateCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryUpdate.Variables = {\n        categoryId: formValues.id,\n        input: {\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteCategory(categoryId: ID, categoryType: WareCategoryTypeEnum) {\n      const variables: GMenuCategoryDelete.Variables = {\n        categoryId,\n      }\n      await self.client.mutate({\n        mutation: MenuCategoryDeleteMutation,\n        variables,\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(\n  formValues: TCategoryFormValues,\n  categoryType: WareCategoryTypeEnum,\n) {\n  return Object.assign({\n    nameLabel: formValues.nameLabel,\n    internalNoteLabel: formValues.internalNoteLabel,\n    enabled: formValues.visible,\n    pictogram: formValues.pictogram,\n    recipes: formValues.recipes.map(RM.prop('id')),\n    minCount: formValues.minCount,\n    maxCount: formValues.maxCount,\n    orderOriginCategories: formValues.origins,\n  })\n}\n\nexport const getCategoryRoute = (\n  recipeId: ID,\n  categoryType: WareCategoryTypeEnum,\n): LocationDescriptor => ({\n  pathname: recipeId,\n  state: { categoryType },\n})\n","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<string>\n\n  readonly includeOldFinished?: boolean\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputStatisticCreate {\n  readonly dateFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly dateTimeFrom?: Maybe<string>\n\n  readonly dateTimeTo?: Maybe<string>\n\n  readonly branches: ReadonlyArray<string>\n\n  readonly drivers?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly internalNumber?: Maybe<string>\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: string\n\n  readonly closed?: boolean\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly minCount?: number\n\n  readonly maxCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly minCount?: Maybe<number>\n\n  readonly maxCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityCreate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityUpdate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment method used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<string>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderStaffImport {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly companyBranch: string\n\n  readonly acceptedAt?: Maybe<string>\n\n  readonly orderRecipes: ReadonlyArray<InputOrderRecipeCreates>\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly invoice: string\n\n  readonly invoiceNumber: number\n\n  readonly paymentMethods: ReadonlyArray<InputOrderPaymentMethodsCreate>\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: number\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n  Pln = 'PLN',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  Driver = 'DRIVER',\n  FeAdmin = 'FE_ADMIN',\n  FeCompletion = 'FE_COMPLETION',\n  FeKitchen = 'FE_KITCHEN',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n  Pl = 'PL',\n  De = 'DE',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n  Specific = 'SPECIFIC',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n  HighPriority = 'HIGH_PRIORITY',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n  Pwa = 'PWA',\n  WebMenu = 'WEB_MENU',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible order origin categories */\nexport enum OrderOriginCategoryEnum {\n  Website = 'WEBSITE',\n  Wifi = 'WIFI',\n  Staff = 'STAFF',\n  Doveze = 'DOVEZE',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type GCreateSpecificBusinessHourVariables = {\n  readonly input: InputBusinessHourSpecificDateCreate\n}\n\nexport type GCreateSpecificBusinessHourMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GCreateSpecificBusinessHourResult\n}\n\nexport type GCreateSpecificBusinessHourResult = GSpecificBusinessHourFragment\n\nexport type GDeleteSpecificBusinessHourVariables = {\n  readonly id: string\n}\n\nexport type GDeleteSpecificBusinessHourMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GDeleteSpecificBusinessHourResult\n}\n\nexport type GDeleteSpecificBusinessHourResult = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n}\n\nexport type GSpecificBusinessHoursVariables = {\n  readonly branchId: string\n}\n\nexport type GSpecificBusinessHoursQuery = {\n  readonly __typename?: 'Query'\n\n  readonly businessHours: ReadonlyArray<GSpecificBusinessHoursBusinessHours>\n}\n\nexport type GSpecificBusinessHoursBusinessHours = GSpecificBusinessHourFragment\n\nexport type GOrderVamVariables = {\n  readonly branchId: string\n  readonly phone: string\n}\n\nexport type GOrderVamQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vamCustomer: GOrderVamVamCustomer\n}\n\nexport type GOrderVamVamCustomer = {\n  readonly __typename?: 'CustomerInformation'\n\n  readonly isFound: boolean\n\n  readonly email: string\n\n  readonly firstName: string\n\n  readonly lastName: string\n\n  readonly lastOrder: Maybe<GOrderVamLastOrder>\n\n  readonly locations: ReadonlyArray<GOrderVamLocations>\n}\n\nexport type GOrderVamLastOrder = {\n  readonly __typename?: 'Order'\n\n  readonly note: Maybe<string>\n}\n\nexport type GOrderVamLocations = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly state: Maybe<string>\n\n  readonly gps: Maybe<GOrderVamGps>\n}\n\nexport type GOrderVamGps = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type GOrderPromoVariables = {\n  readonly branchId: string\n}\n\nexport type GOrderPromoQuery = {\n  readonly __typename?: 'Query'\n\n  readonly promoCodes: ReadonlyArray<GOrderPromoPromoCodes>\n}\n\nexport type GOrderPromoPromoCodes = {\n  readonly __typename?: 'PromoCode'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type GSortMenuCategoryVariables = {\n  readonly categoryId: string\n  readonly offset: number\n}\n\nexport type GSortMenuCategoryMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly success: boolean\n}\n\nexport type GMenuCategoryCreateVariables = {\n  readonly input: InputWareCategoryCreate\n}\n\nexport type GMenuCategoryCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createWareCategory: GMenuCategoryCreateCreateWareCategory\n}\n\nexport type GMenuCategoryCreateCreateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type GMenuCategoryUpdateVariables = {\n  readonly categoryId: string\n  readonly input: InputWareCategoryUpdate\n}\n\nexport type GMenuCategoryUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: GMenuCategoryUpdateUpdateWareCategory\n}\n\nexport type GMenuCategoryUpdateUpdateWareCategory = FMenuCategoryFragment\n\nexport type GMenuCategoryDeleteVariables = {\n  readonly categoryId: string\n}\n\nexport type GMenuCategoryDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyWareCategory: GMenuCategoryDeleteDestroyWareCategory\n}\n\nexport type GMenuCategoryDeleteDestroyWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type GMenuRecipeVisibilityVariables = {\n  readonly recipeId: string\n  readonly visible: boolean\n}\n\nexport type GMenuRecipeVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateRecipe: GMenuRecipeVisibilityUpdateRecipe\n}\n\nexport type GMenuRecipeVisibilityUpdateRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type GMenuRecipeCreateVariables = {\n  readonly recipe: InputRecipeCreate\n}\n\nexport type GMenuRecipeCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createRecipe: GMenuRecipeCreateCreateRecipe\n}\n\nexport type GMenuRecipeCreateCreateRecipe = GMenuRecipeFragment\n\nexport type GMenuRecipeUpdateVariables = {\n  readonly recipeId: string\n  readonly recipe: InputRecipeUpdate\n}\n\nexport type GMenuRecipeUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateRecipe: GMenuRecipeUpdateUpdateRecipe\n}\n\nexport type GMenuRecipeUpdateUpdateRecipe = GMenuRecipeFragment\n\nexport type GMenuRecipeDeleteVariables = {\n  readonly recipeId: string\n}\n\nexport type GMenuRecipeDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyRecipe: GMenuRecipeDeleteDestroyRecipe\n}\n\nexport type GMenuRecipeDeleteDestroyRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type GMenuStockCreateVariables = {\n  readonly stockItem: InputStockItemCreate\n}\n\nexport type GMenuStockCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createStockItem: GMenuStockCreateCreateStockItem\n}\n\nexport type GMenuStockCreateCreateStockItem = GMenuStockItemFragment\n\nexport type GMenuStockUpdateVariables = {\n  readonly stockId: string\n  readonly stockItem: InputStockItemUpdate\n}\n\nexport type GMenuStockUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateStockItem: GMenuStockUpdateUpdateStockItem\n}\n\nexport type GMenuStockUpdateUpdateStockItem = GMenuStockItemFragment\n\nexport type GMenuStockDeleteVariables = {\n  readonly stockId: string\n}\n\nexport type GMenuStockDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyStockItem: GMenuStockDeleteDestroyStockItem\n}\n\nexport type GMenuStockDeleteDestroyStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n}\n\nexport type GAllergensVariables = {}\n\nexport type GAllergensQuery = {\n  readonly __typename?: 'Query'\n\n  readonly allergens: ReadonlyArray<GAllergensAllergens>\n}\n\nexport type GAllergensAllergens = FMenuAllergenFragment\n\nexport type GCurrenciesVariables = {\n  readonly branchId: string\n}\n\nexport type GCurrenciesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly currencies: ReadonlyArray<GCurrenciesCurrencies>\n\n  readonly companyBranch: GCurrenciesCompanyBranch\n}\n\nexport type GCurrenciesCurrencies = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n\n  readonly code: string\n}\n\nexport type GCurrenciesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly address: GCurrenciesAddress\n}\n\nexport type GCurrenciesAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<GCurrenciesCountry>\n}\n\nexport type GCurrenciesCountry = {\n  readonly __typename?: 'Country'\n\n  readonly currency: GCurrenciesCurrency\n}\n\nexport type GCurrenciesCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n}\n\nexport type GVatsVariables = {\n  readonly branchId: string\n}\n\nexport type GVatsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vats: ReadonlyArray<GVatsVats>\n}\n\nexport type GVatsVats = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n\n  readonly vat: number\n}\n\nexport type GWareUnitsVariables = {}\n\nexport type GWareUnitsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareUnits: ReadonlyArray<GWareUnitsWareUnits>\n}\n\nexport type GWareUnitsWareUnits = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: WareUnitEnum\n}\n\nexport type GMenuRecipeFormVariables = {\n  readonly recipeId: string\n}\n\nexport type GMenuRecipeFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: GMenuRecipeFormRecipe\n}\n\nexport type GMenuRecipeFormRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly image: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly visible: boolean\n\n  readonly recipeType: GMenuRecipeFormRecipeType\n\n  readonly sourcePrices: ReadonlyArray<GMenuRecipeFormSourcePrices>\n\n  readonly sideDishes: ReadonlyArray<GMenuRecipeFormSideDishes>\n\n  readonly categories: ReadonlyArray<GMenuRecipeFormCategories>\n\n  readonly sourceAssociatedRecipes: ReadonlyArray<\n    GMenuRecipeFormSourceAssociatedRecipes\n  >\n\n  readonly sourceIngredients: ReadonlyArray<GMenuRecipeFormSourceIngredients>\n}\n\nexport type GMenuRecipeFormRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuRecipeFormSourcePrices = GMenuRecipePriceFragment\n\nexport type GMenuRecipeFormSideDishes = FMenuCategoryListItemFragment\n\nexport type GMenuRecipeFormCategories = FMenuCategoryListItemFragment\n\nexport type GMenuRecipeFormSourceAssociatedRecipes = {\n  readonly __typename?: 'RecipeRelation'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipeFormPriceType\n\n  readonly recipe: GMenuRecipeForm_Recipe\n}\n\nexport type GMenuRecipeFormPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipeForm_Recipe = GMenuAssocRecipeFragment\n\nexport type GMenuRecipeFormSourceIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly quantity: number\n\n  readonly stockItem: GMenuRecipeFormStockItem\n}\n\nexport type GMenuRecipeFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly label: string\n\n  readonly wareUnit: GMenuRecipeFormWareUnit\n\n  readonly allergens: ReadonlyArray<GMenuRecipeFormAllergens>\n}\n\nexport type GMenuRecipeFormWareUnit = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type GMenuRecipeFormAllergens = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly enum: AllergenEnum\n}\n\nexport type GMenuRecipeFormAssocVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuRecipeFormAssocQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<GMenuRecipeFormAssocRecipes>\n}\n\nexport type GMenuRecipeFormAssocRecipes = GMenuAssocRecipeFragment\n\nexport type GMenuRecipeDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuRecipeDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GMenuRecipeDefaultsCompanyBranch\n}\n\nexport type GMenuRecipeDefaultsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly vats: ReadonlyArray<GMenuRecipeDefaultsVats>\n\n  readonly currency: GMenuRecipeDefaultsCurrency\n}\n\nexport type GMenuRecipeDefaultsVats = {\n  readonly __typename?: 'VatPriceType'\n\n  readonly vatId: string\n\n  readonly priceType: GMenuRecipeDefaultsPriceType\n}\n\nexport type GMenuRecipeDefaultsPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipeDefaultsCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GMenuStockFormVariables = {\n  readonly stockId: string\n}\n\nexport type GMenuStockFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: GMenuStockFormStockItem\n}\n\nexport type GMenuStockFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly note: string\n\n  readonly nameLabel: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly wareUnit: GMenuStockFormWareUnit\n\n  readonly allergens: ReadonlyArray<GMenuStockFormAllergens>\n\n  readonly companyBranch: GMenuStockFormCompanyBranch\n}\n\nexport type GMenuStockFormWareUnit = FMenuWareUnitFragment\n\nexport type GMenuStockFormAllergens = FMenuAllergenFragment\n\nexport type GMenuStockFormCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuStockDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GMenuStockDefaultsCompanyBranch\n}\n\nexport type GMenuStockDefaultsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type GCreateZoneVariables = {\n  readonly branchId: string\n  readonly points?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n}\n\nexport type GCreateZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createZone: GCreateZoneCreateZone\n}\n\nexport type GCreateZoneCreateZone = FZoneFragment\n\nexport type GUpdateZonePriorityVariables = {\n  readonly zoneId: string\n  readonly offset: number\n}\n\nexport type GUpdateZonePriorityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZonePriority: ReadonlyArray<\n    GUpdateZonePriorityUpdateZonePriority\n  >\n}\n\nexport type GUpdateZonePriorityUpdateZonePriority = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly priority: number\n}\n\nexport type GDestroyZoneVariables = {\n  readonly zoneId: string\n}\n\nexport type GDestroyZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyZone: GDestroyZoneDestroyZone\n}\n\nexport type GDestroyZoneDestroyZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n}\n\nexport type GZonesVariables = {\n  readonly branchesId: ReadonlyArray<string>\n}\n\nexport type GZonesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zones: ReadonlyArray<GZonesZones>\n}\n\nexport type GZonesZones = FZoneFragment\n\nexport type GZoneLocationVariables = {\n  readonly zoneId: string\n}\n\nexport type GZoneLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zone: GZoneLocationZone\n}\n\nexport type GZoneLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly companyBranch: GZoneLocationCompanyBranch\n}\n\nexport type GZoneLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GZoneLocationGps\n}\n\nexport type GZoneLocationGps = FGeoPointFragment\n\nexport type GZoneBranchLocationVariables = {\n  readonly branchId: string\n}\n\nexport type GZoneBranchLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GZoneBranchLocationCompanyBranch\n}\n\nexport type GZoneBranchLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GZoneBranchLocationGps\n}\n\nexport type GZoneBranchLocationGps = FGeoPointFragment\n\nexport type GZoneColorsVariables = {}\n\nexport type GZoneColorsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zoneColors: ReadonlyArray<GZoneColorsZoneColors>\n}\n\nexport type GZoneColorsZoneColors = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type QAddressSuggestVariables = {\n  readonly search: string\n}\n\nexport type QAddressSuggestQuery = {\n  readonly __typename?: 'Query'\n\n  readonly suggest: ReadonlyArray<QAddressSuggestSuggest>\n}\n\nexport type QAddressSuggestSuggest = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly gps: Maybe<QAddressSuggestGps>\n} & FAddressFragment\n\nexport type QAddressSuggestGps = FGeoPointFragment\n\nexport type MOrderStateVariables = {\n  readonly orderId: string\n  readonly state: OrderStateEnum\n}\n\nexport type MOrderStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MOrderStateAddOrderState\n}\n\nexport type MOrderStateAddOrderState = FOrderStateCategoryFragment &\n  FOrderTimingFragment\n\nexport type MSetPriorityOrderVariables = {\n  readonly orderId: string\n  readonly isPriority: boolean\n}\n\nexport type MSetPriorityOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly setPriorityOrder: MSetPriorityOrderSetPriorityOrder\n}\n\nexport type MSetPriorityOrderSetPriorityOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly isPriority: boolean\n}\n\nexport type QLogoutWidgetVariables = {\n  readonly id: string\n}\n\nexport type QLogoutWidgetQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: QLogoutWidgetUser\n}\n\nexport type QLogoutWidgetUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type MBusinessHoursSubmitVariables = {\n  readonly branchId: string\n  readonly hours: ReadonlyArray<InputBusinessHourCreate>\n}\n\nexport type MBusinessHoursSubmitMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createBusinessHours: ReadonlyArray<\n    MBusinessHoursSubmitCreateBusinessHours\n  >\n}\n\nexport type MBusinessHoursSubmitCreateBusinessHours = FRegularBusinessHourFragment\n\nexport type QRegularBusinessHoursVariables = {\n  readonly branchId: string\n}\n\nexport type QRegularBusinessHoursQuery = {\n  readonly __typename?: 'Query'\n\n  readonly businessHours: ReadonlyArray<QRegularBusinessHoursBusinessHours>\n\n  readonly weekDays: ReadonlyArray<QRegularBusinessHoursWeekDays>\n}\n\nexport type QRegularBusinessHoursBusinessHours = FRegularBusinessHourFragment\n\nexport type QRegularBusinessHoursWeekDays = FWeekdayFragment\n\nexport type MAddOrderPromoVariables = {\n  readonly orderId: string\n  readonly code: string\n}\n\nexport type MAddOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderPromoCode: MAddOrderPromoAddOrderPromoCode\n}\n\nexport type MAddOrderPromoAddOrderPromoCode = {\n  readonly __typename?: 'OrderWithErrors'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MAddOrderPromoOrder\n}\n\nexport type MAddOrderPromoOrder = FCreateOrderFragment\n\nexport type MCancelOrderVariables = {\n  readonly orderId: string\n}\n\nexport type MCancelOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MCancelOrderAddOrderState\n}\n\nexport type MCancelOrderAddOrderState = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FOrderStateCategoryFragment\n\nexport type MCreateOrderAcceptVariables = {\n  readonly orderId: string\n  readonly customer: InputCustomerCreate\n  readonly deliverAt?: Maybe<string>\n  readonly note?: Maybe<string>\n}\n\nexport type MCreateOrderAcceptMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: MCreateOrderAcceptFinishOrder\n}\n\nexport type MCreateOrderAcceptFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MCreateOrderAcceptOrder\n}\n\nexport type MCreateOrderAcceptOrder = FCreateOrderFragment\n\nexport type MCreateOrderAddRecipeVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderAddRecipeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrderRecipe: MCreateOrderAddRecipeCreateOrderRecipe\n}\n\nexport type MCreateOrderAddRecipeCreateOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderNewVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly callEventId?: Maybe<string>\n}\n\nexport type MCreateOrderNewMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrder: MCreateOrderNewCreateOrder\n}\n\nexport type MCreateOrderNewCreateOrder = FCreateOrderFragment\n\nexport type MCreateOrderRemoveItemVariables = {\n  readonly itemId: string\n}\n\nexport type MCreateOrderRemoveItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyOrderRecipe: MCreateOrderRemoveItemDestroyOrderRecipe\n}\n\nexport type MCreateOrderRemoveItemDestroyOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderUpdateVariables = {\n  readonly orderId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport type MCreateOrderUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MCreateOrderUpdateUpdateOrder\n}\n\nexport type MCreateOrderUpdateUpdateOrder = FCreateOrderFragment\n\nexport type MCreateOrderUpdateItemVariables = {\n  readonly itemId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderUpdateItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipe: MCreateOrderUpdateItemUpdateOrderRecipe\n}\n\nexport type MCreateOrderUpdateItemUpdateOrderRecipe = FCreateOrderFragment\n\nexport type MRemoveOrderPromoVariables = {\n  readonly orderId: string\n  readonly codeId: string\n}\n\nexport type MRemoveOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly removeOrderPromoCode: MRemoveOrderPromoRemoveOrderPromoCode\n}\n\nexport type MRemoveOrderPromoRemoveOrderPromoCode = FCreateOrderFragment\n\nexport type QCreateOrderItemVariables = {\n  readonly itemId: string\n}\n\nexport type QCreateOrderItemQuery = {\n  readonly __typename?: 'Query'\n\n  readonly item: QCreateOrderItemItem\n}\n\nexport type QCreateOrderItemItem = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItemRecipe\n\n  readonly selectedSidedishes: ReadonlyArray<QCreateOrderItemSelectedSidedishes>\n}\n\nexport type QCreateOrderItemRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QCreateOrderItemSelectedSidedishes = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItem_Recipe\n}\n\nexport type QCreateOrderItem_Recipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type QCreateOrderRecipeVariables = {\n  readonly recipeId: string\n}\n\nexport type QCreateOrderRecipeQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QCreateOrderRecipeRecipe\n}\n\nexport type QCreateOrderRecipeRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QOrderCartVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderCartQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderCartOrder\n}\n\nexport type QOrderCartOrder = FCreateOrderFragment\n\nexport type QOrderFormDeliverAtDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderFormDeliverAtDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly times: QOrderFormDeliverAtDefaultsTimes\n}\n\nexport type QOrderFormDeliverAtDefaultsTimes = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly deliveryTime: number\n\n  readonly pickupTime: number\n}\n\nexport type QOrderMenuVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderMenuQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orderMenu: ReadonlyArray<QOrderMenuOrderMenu>\n}\n\nexport type QOrderMenuOrderMenu = FOrderMenuCategoryFragment\n\nexport type QValidateLocationVariables = {\n  readonly branchId: string\n  readonly latitude: number\n  readonly longitude: number\n}\n\nexport type QValidateLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly resolveLocation: QValidateLocationResolveLocation\n}\n\nexport type QValidateLocationResolveLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly inDeliveryLocation: boolean\n\n  readonly zone: Maybe<QValidateLocationZone>\n}\n\nexport type QValidateLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly minimalOrderPrice: QValidateLocationMinimalOrderPrice\n}\n\nexport type QValidateLocationMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type MKitchenRecipeStateVariables = {\n  readonly recipeId: string\n  readonly state: OrderRecipeStateEnum\n}\n\nexport type MKitchenRecipeStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipeState: MKitchenRecipeStateUpdateOrderRecipeState\n}\n\nexport type MKitchenRecipeStateUpdateOrderRecipeState = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly orderRecipeState: MKitchenRecipeStateOrderRecipeState\n\n  readonly order: MKitchenRecipeStateOrder\n}\n\nexport type MKitchenRecipeStateOrderRecipeState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type MKitchenRecipeStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type QKitchenCompletionOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QKitchenCompletionOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QKitchenCompletionOrderListOrders>\n}\n\nexport type QKitchenCompletionOrderListOrders = FKitchenCompletionOrderFragment\n\nexport type QKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QKitchenOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QKitchenOrderListOrders>\n}\n\nexport type QKitchenOrderListOrders = FKitchenOrderFragment\n\nexport type SKitchenCompletionOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SKitchenCompletionOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SKitchenCompletionOrderListUpdatedOrder\n}\n\nexport type SKitchenCompletionOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SKitchenCompletionOrderListOrder>\n}\n\nexport type SKitchenCompletionOrderListOrder = FKitchenCompletionOrderFragment\n\nexport type SKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SKitchenOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SKitchenOrderListUpdatedOrder\n}\n\nexport type SKitchenOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SKitchenOrderListOrder>\n}\n\nexport type SKitchenOrderListOrder = FKitchenOrderFragment\n\nexport type MPasswordChangeVariables = {\n  readonly password: string\n}\n\nexport type MPasswordChangeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly change: MPasswordChangeChange\n}\n\nexport type MPasswordChangeChange = {\n  readonly __typename?: 'UserUpdatedPassword'\n\n  readonly userId: string\n\n  readonly newToken: string\n}\n\nexport type QUserBootstrapVariables = {\n  readonly userId: string\n}\n\nexport type QUserBootstrapQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: QUserBootstrapUser\n\n  readonly permissions: QUserBootstrapPermissions\n\n  readonly access: QUserBootstrapAccess\n}\n\nexport type QUserBootstrapUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly language: QUserBootstrapLanguage\n\n  readonly roles: ReadonlyArray<QUserBootstrapRoles>\n\n  readonly branches: ReadonlyArray<QUserBootstrapBranches>\n}\n\nexport type QUserBootstrapLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly rawCode: string\n}\n\nexport type QUserBootstrapRoles = {\n  readonly __typename?: 'Role'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type QUserBootstrapBranches = FCompanyBranchFragment\n\nexport type QUserBootstrapPermissions = {\n  readonly __typename?: 'UserPermission'\n\n  readonly canCancelOrders: boolean\n\n  readonly canCreateOrder: boolean\n}\n\nexport type QUserBootstrapAccess = {\n  readonly __typename?: '__Schema'\n\n  readonly queries: QUserBootstrapQueries\n\n  readonly mutations: Maybe<QUserBootstrapMutations>\n\n  readonly subscriptions: Maybe<QUserBootstrapSubscriptions>\n}\n\nexport type QUserBootstrapQueries = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrapFields>>\n}\n\nexport type QUserBootstrapFields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QUserBootstrapMutations = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrap_Fields>>\n}\n\nexport type QUserBootstrap_Fields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QUserBootstrapSubscriptions = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrap__Fields>>\n}\n\nexport type QUserBootstrap__Fields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QOrderCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n  readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type QOrderCountQuery = {\n  readonly __typename?: 'Query'\n\n  readonly ordersCategoryCount: ReadonlyArray<QOrderCountOrdersCategoryCount>\n}\n\nexport type QOrderCountOrdersCategoryCount = {\n  readonly __typename?: 'OrderStateCategoryCount'\n\n  readonly orderStateCategory: QOrderCountOrderStateCategory\n\n  readonly ordersCount: number\n}\n\nexport type QOrderCountOrderStateCategory = {\n  readonly __typename?: 'OrderStateCategory'\n\n  readonly enum: OrderStateCategoryEnum\n}\n\nexport type SOrderCallVariables = {}\n\nexport type SOrderCallSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly call: SOrderCallCall\n}\n\nexport type SOrderCallCall = {\n  readonly __typename?: 'UserCallingCustomerSubscription'\n\n  readonly eventId: string\n\n  readonly phone: string\n\n  readonly prefix: string\n\n  readonly isRinging: boolean\n}\n\nexport type SOrderCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n}\n\nexport type SOrderCountSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrdersCount: SOrderCountUpdatedOrdersCount\n}\n\nexport type SOrderCountUpdatedOrdersCount = {\n  readonly __typename?: 'OrderCountSubscription'\n\n  readonly ordersCount: number\n}\n\nexport type MMenuCategoryVisibilityVariables = {\n  readonly categoryId: string\n  readonly visible: boolean\n}\n\nexport type MMenuCategoryVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: MMenuCategoryVisibilityUpdateWareCategory\n}\n\nexport type MMenuCategoryVisibilityUpdateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type MMenuStockQuantityVariables = {\n  readonly stockItem: string\n  readonly quantityChange: number\n}\n\nexport type MMenuStockQuantityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly changeAmountStockItem: MMenuStockQuantityChangeAmountStockItem\n}\n\nexport type MMenuStockQuantityChangeAmountStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly quantity: number\n}\n\nexport type QMenuCategoryVariables = {\n  readonly categoryId: string\n}\n\nexport type QMenuCategoryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly category: QMenuCategoryCategory\n}\n\nexport type QMenuCategoryCategory = FMenuCategoryFragment\n\nexport type QMenuCategoryFilterVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuCategoryFilterQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryFilterCategories>\n}\n\nexport type QMenuCategoryFilterCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly countRecipes: number\n\n  readonly categoryType: QMenuCategoryFilterCategoryType\n}\n\nexport type QMenuCategoryFilterCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type QMenuCategoryListVariables = {\n  readonly branchId: string\n  readonly categoryType: WareCategoryTypeEnum\n}\n\nexport type QMenuCategoryListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryListCategories>\n}\n\nexport type QMenuCategoryListCategories = FMenuCategoryListItemFragment\n\nexport type QMenuCategoryOriginsVariables = {}\n\nexport type QMenuCategoryOriginsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly origins: ReadonlyArray<QMenuCategoryOriginsOrigins>\n}\n\nexport type QMenuCategoryOriginsOrigins = {\n  readonly __typename?: 'OrderOriginCategory'\n\n  readonly enum: OrderOriginCategoryEnum\n\n  readonly code: string\n}\n\nexport type QMenuGuideDownloadVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuGuideDownloadQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QMenuGuideDownloadCompanyBranch\n}\n\nexport type QMenuGuideDownloadCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly foodMenuUrl: Maybe<string>\n}\n\nexport type QMenuRecipeListVariables = {\n  readonly branchId: string\n  readonly categoryId?: Maybe<string>\n  readonly categoryType?: Maybe<WareCategoryTypeEnum>\n}\n\nexport type QMenuRecipeListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<QMenuRecipeListRecipes>\n}\n\nexport type QMenuRecipeListRecipes = FMenuRecipeFragment\n\nexport type QMenuStockDepositVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockDepositQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QMenuStockDepositStockItems>\n}\n\nexport type QMenuStockDepositStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly note: string\n\n  readonly quantity: number\n\n  readonly wareUnit: QMenuStockDepositWareUnit\n}\n\nexport type QMenuStockDepositWareUnit = FMenuWareUnitFragment\n\nexport type QMenuStockListVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QMenuStockListStockItems>\n}\n\nexport type QMenuStockListStockItems = GMenuStockItemFragment\n\nexport type QStockRecipesVariables = {\n  readonly stockId: string\n}\n\nexport type QStockRecipesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: QStockRecipesStockItem\n}\n\nexport type QStockRecipesStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly ingredients: ReadonlyArray<QStockRecipesIngredients>\n}\n\nexport type QStockRecipesIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly recipe: QStockRecipesRecipe\n}\n\nexport type QStockRecipesRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly recipeType: QStockRecipesRecipeType\n}\n\nexport type QStockRecipesRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type MBranchDefaultTimeVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly time: number\n}\n\nexport type MBranchDefaultTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateDefaultOrderProcessTime: MBranchDefaultTimeUpdateDefaultOrderProcessTime\n}\n\nexport type MBranchDefaultTimeUpdateDefaultOrderProcessTime = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type MOrderChangeToPickupVariables = {\n  readonly orderId: string\n}\n\nexport type MOrderChangeToPickupMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderDeliveryToPickup: MOrderChangeToPickupUpdateOrderDeliveryToPickup\n}\n\nexport type MOrderChangeToPickupUpdateOrderDeliveryToPickup = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliveryType: Maybe<MOrderChangeToPickupDeliveryType>\n}\n\nexport type MOrderChangeToPickupDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type MOrderTimeNotificationVariables = {\n  readonly orderId: string\n  readonly minutes: number\n}\n\nexport type MOrderTimeNotificationMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly orderNotifyCustomer: MOrderTimeNotificationOrderNotifyCustomer\n}\n\nexport type MOrderTimeNotificationOrderNotifyCustomer = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n}\n\nexport type MRemoveOrderDriverVariables = {\n  readonly orderDriverId: string\n}\n\nexport type MRemoveOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyUserDeliveringOrder: MRemoveOrderDriverDestroyUserDeliveringOrder\n}\n\nexport type MRemoveOrderDriverDestroyUserDeliveringOrder = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: MRemoveOrderDriverOrder\n}\n\nexport type MRemoveOrderDriverOrder = FOrderDriverFragment\n\nexport type MSelectOrderDriverVariables = {\n  readonly driverId: string\n  readonly orderId: string\n}\n\nexport type MSelectOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MSelectOrderDriverResult\n}\n\nexport type MSelectOrderDriverResult = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: MSelectOrderDriverOrder\n}\n\nexport type MSelectOrderDriverOrder = FOrderDriverFragment\n\nexport type QBranchDefeaultTimesVariables = {\n  readonly branchId: string\n}\n\nexport type QBranchDefeaultTimesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QBranchDefeaultTimesCompanyBranch\n}\n\nexport type QBranchDefeaultTimesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type QOrderDetailVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderDetailQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderDetailOrder\n}\n\nexport type QOrderDetailOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly companyBranch: QOrderDetailCompanyBranch\n\n  readonly customer: QOrderDetailCustomer\n\n  readonly customerOrdersCountCurrent: number\n\n  readonly customerOrdersCountTotal: number\n\n  readonly note: Maybe<string>\n\n  readonly previousNote: Maybe<string>\n\n  readonly allAppliedRules: ReadonlyArray<string>\n\n  readonly items: ReadonlyArray<QOrderDetailItems>\n\n  readonly orderOrigin: QOrderDetailOrderOrigin\n} & (FOrderTotalsFragment & FOrderTimingFragment & FOrderDriverFragment)\n\nexport type QOrderDetailCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type QOrderDetailCustomer = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly emails: ReadonlyArray<QOrderDetailEmails>\n\n  readonly phones: ReadonlyArray<QOrderDetailPhones>\n}\n\nexport type QOrderDetailEmails = FEmailFragment\n\nexport type QOrderDetailPhones = FPhoneFragment\n\nexport type QOrderDetailItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<QOrderDetailSidedishes>\n} & FOrderDetailWareFragment\n\nexport type QOrderDetailSidedishes = FOrderDetailWareFragment\n\nexport type QOrderDetailOrderOrigin = {\n  readonly __typename?: 'OrderOrigin'\n\n  readonly code: string\n\n  readonly enum: OrderOriginEnum\n}\n\nexport type QOrderDriversVariables = {\n  readonly orderId: string\n  readonly branchId: ReadonlyArray<string>\n}\n\nexport type QOrderDriversQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderDriversOrder\n\n  readonly drivers: ReadonlyArray<QOrderDriversDrivers>\n}\n\nexport type QOrderDriversOrder = FOrderDriverFragment\n\nexport type QOrderDriversDrivers = FDriverFragment\n\nexport type QOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QOrderListOrders>\n}\n\nexport type QOrderListOrders = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (FOrderStateCategoryFragment & FOrderTickerFragment)\n\nexport type QOrderListCategoriesVariables = {}\n\nexport type QOrderListCategoriesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QOrderListCategoriesCategories>\n}\n\nexport type QOrderListCategoriesCategories = {\n  readonly __typename?: 'OrderStateCategory'\n\n  readonly label: string\n\n  readonly enum: OrderStateCategoryEnum\n}\n\nexport type QOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QOrderMapDeliveriesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly deliveries: ReadonlyArray<QOrderMapDeliveriesDeliveries>\n}\n\nexport type QOrderMapDeliveriesDeliveries = FOrderMapDeliveryFragment\n\nexport type QOrderMapOrdersVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QOrderMapOrdersQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QOrderMapOrdersOrders>\n}\n\nexport type QOrderMapOrdersOrders = FOrderMapOrderFragment\n\nexport type QOrderStateVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type QOrderStateQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderStateOrder\n\n  readonly companyBranch: QOrderStateCompanyBranch\n}\n\nexport type QOrderStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly deliveryType: Maybe<QOrderStateDeliveryType>\n\n  readonly isCancelable: boolean\n\n  readonly isPriority: boolean\n} & FOrderStateCategoryFragment\n\nexport type QOrderStateDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type QOrderStateCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowedCategories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type SOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SOrderListUpdatedOrder\n}\n\nexport type SOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SOrderListOrder>\n}\n\nexport type SOrderListOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (FOrderStateCategoryFragment & FOrderTickerFragment)\n\nexport type SOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type SOrderMapDeliveriesSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly update: SOrderMapDeliveriesUpdate\n}\n\nexport type SOrderMapDeliveriesUpdate = {\n  readonly __typename?: 'TransportationDeviceUserUpdateSubscription'\n\n  readonly device: Maybe<SOrderMapDeliveriesDevice>\n}\n\nexport type SOrderMapDeliveriesDevice = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly user: SOrderMapDeliveriesUser\n} & FOrderMapDeviceFragment\n\nexport type SOrderMapDeliveriesUser = FOrderMapDriverFragment\n\nexport type SOrderMapOrdersVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SOrderMapOrdersSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SOrderMapOrdersUpdatedOrder\n}\n\nexport type SOrderMapOrdersUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SOrderMapOrdersOrder>\n}\n\nexport type SOrderMapOrdersOrder = FOrderMapOrderFragment\n\nexport type MFinancialReportCreateVariables = {\n  readonly branchId: string\n}\n\nexport type MFinancialReportCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MFinancialReportCreateResult\n}\n\nexport type MFinancialReportCreateResult = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n}\n\nexport type QAllDriversVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QAllDriversQuery = {\n  readonly __typename?: 'Query'\n\n  readonly drivers: ReadonlyArray<QAllDriversDrivers>\n}\n\nexport type QAllDriversDrivers = FDriverFragment\n\nexport type QClosureHistoryVariables = {\n  readonly branchId: string\n  readonly dateFrom: string\n  readonly dateTo: string\n}\n\nexport type QClosureHistoryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly history: ReadonlyArray<QClosureHistoryHistory>\n}\n\nexport type QClosureHistoryHistory = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QClosureReportVariables = {\n  readonly branchId: string\n  readonly reportId: string\n  readonly showReport: boolean\n}\n\nexport type QClosureReportQuery = {\n  readonly __typename?: 'Query'\n\n  readonly lastReport: QClosureReportLastReport\n\n  readonly report: Maybe<QClosureReportReport>\n}\n\nexport type QClosureReportLastReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QClosureReportReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QStatsDailyVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsDailyQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsDailyStats\n}\n\nexport type QStatsDailyStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly category: string\n\n  readonly daily: string\n\n  readonly delivery: string\n\n  readonly drivers: string\n}\n\nexport type QStatsOrdersVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsOrdersQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersStats\n}\n\nexport type QStatsOrdersStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly finishedOrders: QStatsOrdersFinishedOrders\n\n  readonly orderStatisticsPlain: string\n}\n\nexport type QStatsOrdersFinishedOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly fees: QStatsOrdersFees\n\n  readonly onlinePayments: QStatsOrdersOnlinePayments\n\n  readonly total: QStatsOrdersTotal\n\n  readonly finishedCount: number\n\n  readonly cancelledCount: number\n}\n\nexport type QStatsOrdersFees = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersOnlinePayments = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersTotal = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersCountsVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsOrdersCountsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersCountsStats\n}\n\nexport type QStatsOrdersCountsStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly counts: QStatsOrdersCountsCounts\n}\n\nexport type QStatsOrdersCountsCounts = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly finished: number\n\n  readonly cancelled: number\n}\n\nexport type QStatsOrdersListVariables = {\n  readonly filter: InputStatisticCreate\n  readonly pagination?: Maybe<InputPaginationParams>\n}\n\nexport type QStatsOrdersListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersListStats\n}\n\nexport type QStatsOrdersListStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly orders: QStatsOrdersListOrders\n}\n\nexport type QStatsOrdersListOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly list: ReadonlyArray<QStatsOrdersListList>\n}\n\nexport type QStatsOrdersListList = FOrderTickerFragment &\n  FOrderStateCategoryFragment\n\nexport type MUserMenuLanguageVariables = {\n  readonly userId: string\n  readonly lang: LanguageEnum\n}\n\nexport type MUserMenuLanguageMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateUser: MUserMenuLanguageUpdateUser\n}\n\nexport type MUserMenuLanguageUpdateUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly language: MUserMenuLanguageLanguage\n}\n\nexport type MUserMenuLanguageLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly enum: LanguageEnum\n}\n\nexport type QUserMenuLanguagesVariables = {}\n\nexport type QUserMenuLanguagesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly languages: ReadonlyArray<QUserMenuLanguagesLanguages>\n}\n\nexport type QUserMenuLanguagesLanguages = {\n  readonly __typename?: 'Language'\n\n  readonly code: string\n\n  readonly enum: LanguageEnum\n\n  readonly rawCode: string\n}\n\nexport type MZoneUpdateVariables = {\n  readonly zoneId: string\n  readonly update: InputZoneUpdate\n}\n\nexport type MZoneUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZone: MZoneUpdateUpdateZone\n}\n\nexport type MZoneUpdateUpdateZone = FZoneFragment\n\nexport type GSpecificBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly companyBranch: GSpecificBusinessHourCompanyBranch\n\n  readonly specificDate: Maybe<string>\n\n  readonly specificDateLocalized: Maybe<string>\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n\n  readonly openAt: string\n\n  readonly closeAt: string\n}\n\nexport type GSpecificBusinessHourCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type GMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly visible: boolean\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly availableAmount: number\n\n  readonly prices: ReadonlyArray<GMenuRecipePrices>\n\n  readonly recipeType: GMenuRecipeRecipeType\n}\n\nexport type GMenuRecipePrices = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipePriceType\n\n  readonly price: GMenuRecipePrice\n}\n\nexport type GMenuRecipePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n} & FPriceFragment\n\nexport type GMenuRecipeRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuStockItemFragment = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly note: string\n\n  readonly plu: Maybe<string>\n\n  readonly quantity: number\n\n  readonly nameLabel: string\n\n  readonly allergens: ReadonlyArray<GMenuStockItemAllergens>\n\n  readonly wareUnit: GMenuStockItemWareUnit\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockItemAllergens = FMenuAllergenFragment\n\nexport type GMenuStockItemWareUnit = FMenuWareUnitFragment\n\nexport type GMenuRecipePriceFragment = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipePricePriceType\n\n  readonly price: GMenuRecipePricePrice\n\n  readonly vat: GMenuRecipePriceVat\n}\n\nexport type GMenuRecipePricePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipePricePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly currency: GMenuRecipePriceCurrency\n} & FPriceFragment\n\nexport type GMenuRecipePriceCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GMenuRecipePriceVat = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n}\n\nexport type GMenuAssocRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n}\n\nexport type FAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly state: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n}\n\nexport type FCompanyBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly address: FCompanyBranchAddress\n\n  readonly gps: FCompanyBranchGps\n\n  readonly brand: FCompanyBranchBrand\n}\n\nexport type FCompanyBranchAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<FCompanyBranchCountry>\n}\n\nexport type FCompanyBranchCountry = {\n  readonly __typename?: 'Country'\n\n  readonly phonePrefix: string\n}\n\nexport type FCompanyBranchGps = FGeoPointFragment\n\nexport type FCompanyBranchBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FCustomerFragment = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly defaultEmail: Maybe<FCustomerDefaultEmail>\n\n  readonly defaultPhone: Maybe<FCustomerDefaultPhone>\n}\n\nexport type FCustomerDefaultEmail = FEmailFragment\n\nexport type FCustomerDefaultPhone = FPhoneFragment\n\nexport type FEmailFragment = {\n  readonly __typename?: 'Email'\n\n  readonly email: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FGeoPointFragment = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type FOrderStateCategoryFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type FPhoneFragment = {\n  readonly __typename?: 'Phone'\n\n  readonly phone: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n}\n\nexport type FPriceWithCurrencyFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FPriceWithCurrencyCurrency\n}\n\nexport type FPriceWithCurrencyCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FUserNameFragment = {\n  readonly __typename?: 'User'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type FRegularBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly weekDay: Maybe<FRegularBusinessHourWeekDay>\n}\n\nexport type FRegularBusinessHourWeekDay = {\n  readonly __typename?: 'WeekDay'\n\n  readonly enum: WeekDayEnum\n}\n\nexport type FSpecificBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly companyBranch: FSpecificBusinessHourCompanyBranch\n\n  readonly specificDate: Maybe<string>\n\n  readonly specificDateLocalized: Maybe<string>\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n\n  readonly openAt: string\n\n  readonly closeAt: string\n}\n\nexport type FSpecificBusinessHourCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type FWeekdayFragment = {\n  readonly __typename?: 'WeekDay'\n\n  readonly enum: WeekDayEnum\n\n  readonly code: string\n}\n\nexport type FCreateOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly items: ReadonlyArray<FCreateOrderItems>\n\n  readonly coverPrice: FCreateOrderCoverPrice\n\n  readonly transportFee: FCreateOrderTransportFee\n\n  readonly discounts: ReadonlyArray<FCreateOrderDiscounts>\n\n  readonly minimalOrderPrice: Maybe<FCreateOrderMinimalOrderPrice>\n\n  readonly totalDiscount: FCreateOrderTotalDiscount\n\n  readonly totalSum: FCreateOrderTotalSum\n}\n\nexport type FCreateOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly recipe: FCreateOrderRecipe\n\n  readonly priceWithSidedishes: FCreateOrderPriceWithSidedishes\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderSidedishes>\n} & FCreateOrderItemFragment\n\nexport type FCreateOrderRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly sidedishCount: number\n}\n\nexport type FCreateOrderPriceWithSidedishes = FPriceFragment\n\nexport type FCreateOrderSidedishes = FCreateOrderItemFragment\n\nexport type FCreateOrderCoverPrice = FPriceFragment\n\nexport type FCreateOrderTransportFee = FPriceFragment\n\nexport type FCreateOrderDiscounts = {\n  readonly __typename?: 'PriceWithDescription'\n\n  readonly code: string\n\n  readonly description: string\n\n  readonly price: FCreateOrderPrice\n}\n\nexport type FCreateOrderPrice = FPriceFragment\n\nexport type FCreateOrderMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type FCreateOrderTotalDiscount = FPriceFragment\n\nexport type FCreateOrderTotalSum = FPriceFragment\n\nexport type FCreateOrderItemFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly price: FCreateOrderItemPrice\n\n  readonly recipe: FCreateOrderItemRecipe\n}\n\nexport type FCreateOrderItemPrice = FPriceFragment\n\nexport type FCreateOrderItemRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FCreateOrderRecipeSidedishesFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly sidedishCategories: ReadonlyArray<\n    FCreateOrderRecipeSidedishesSidedishCategories\n  >\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderRecipeSidedishesSidedishes>\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly price: FCreateOrderRecipeSidedishesPrice\n}\n\nexport type FCreateOrderRecipeSidedishesPrice = FPriceFragment\n\nexport type FOrderMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly pictogram: Maybe<string>\n\n  readonly recipes: ReadonlyArray<FOrderMenuCategoryRecipes>\n}\n\nexport type FOrderMenuCategoryRecipes = FOrderMenuRecipeFragment\n\nexport type FOrderMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly price: FOrderMenuRecipePrice\n\n  readonly sidedishCount: number\n}\n\nexport type FOrderMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FOrderMenuRecipeCurrency\n}\n\nexport type FOrderMenuRecipeCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FKitchenCompletionOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly cashBox: Maybe<FKitchenCompletionOrderCashBox>\n\n  readonly orderNumber: Maybe<number>\n\n  readonly orderOrigin: FKitchenCompletionOrderOrderOrigin\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n} & FKitchenOrderBaseFragment\n\nexport type FKitchenCompletionOrderCashBox = {\n  readonly __typename?: 'CashBox'\n\n  readonly id: string\n}\n\nexport type FKitchenCompletionOrderOrderOrigin = {\n  readonly __typename?: 'OrderOrigin'\n\n  readonly code: string\n}\n\nexport type FKitchenOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly address: FKitchenOrderAddress\n\n  readonly customer: FKitchenOrderCustomer\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly note: Maybe<string>\n\n  readonly previousNote: Maybe<string>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n} & FKitchenOrderBaseFragment\n\nexport type FKitchenOrderAddress = FAddressFragment\n\nexport type FKitchenOrderCustomer = FCustomerFragment\n\nexport type FKitchenOrderBaseFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliveryType: Maybe<FKitchenOrderBaseDeliveryType>\n\n  readonly companyBranch: FKitchenOrderBaseCompanyBranch\n\n  readonly isPriority: boolean\n\n  readonly items: ReadonlyArray<FKitchenOrderBaseItems>\n}\n\nexport type FKitchenOrderBaseDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FKitchenOrderBaseCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FKitchenOrderBaseItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<FKitchenOrderBaseSidedishes>\n} & FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderBaseSidedishes = FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderRecipeFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly orderRecipeState: FKitchenOrderRecipeOrderRecipeState\n\n  readonly recipe: FKitchenOrderRecipeRecipe\n}\n\nexport type FKitchenOrderRecipeOrderRecipeState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type FKitchenOrderRecipeRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FMenuAllergenFragment = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: AllergenEnum\n\n  readonly category: number\n}\n\nexport type FMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly visible: boolean\n\n  readonly categoryType: FMenuCategoryCategoryType\n\n  readonly origins: ReadonlyArray<OrderOriginCategoryEnum>\n\n  readonly pictogram: Maybe<string>\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly recipes: ReadonlyArray<FMenuCategoryRecipes>\n}\n\nexport type FMenuCategoryCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuCategoryRecipes = FMenuRecipeFragment\n\nexport type FMenuCategoryListItemFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly countRecipes: number\n\n  readonly visible: boolean\n\n  readonly categoryType: FMenuCategoryListItemCategoryType\n\n  readonly origins: ReadonlyArray<OrderOriginCategoryEnum>\n}\n\nexport type FMenuCategoryListItemCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly visible: boolean\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly availableAmount: number\n\n  readonly prices: ReadonlyArray<FMenuRecipePrices>\n\n  readonly recipeType: FMenuRecipeRecipeType\n}\n\nexport type FMenuRecipePrices = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: FMenuRecipePriceType\n\n  readonly price: FMenuRecipePrice\n}\n\nexport type FMenuRecipePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type FMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n} & FPriceFragment\n\nexport type FMenuRecipeRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuRecipePricingFragment = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: FMenuRecipePricingPriceType\n\n  readonly price: FMenuRecipePricingPrice\n\n  readonly vat: FMenuRecipePricingVat\n}\n\nexport type FMenuRecipePricingPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type FMenuRecipePricingPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly currency: FMenuRecipePricingCurrency\n} & FPriceFragment\n\nexport type FMenuRecipePricingCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FMenuRecipePricingVat = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n}\n\nexport type FMenuWareUnitFragment = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly enum: WareUnitEnum\n\n  readonly code: string\n}\n\nexport type FDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n} & FUserNameFragment\n\nexport type FOrderDetailWareFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FOrderDetailWareRecipe\n\n  readonly price: FOrderDetailWarePrice\n}\n\nexport type FOrderDetailWareRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FOrderDetailWarePrice = FPriceFragment\n\nexport type FOrderDriverFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly driver: Maybe<FOrderDriverDriver>\n}\n\nexport type FOrderDriverDriver = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly id: string\n\n  readonly user: FOrderDriverUser\n}\n\nexport type FOrderDriverUser = FDriverFragment\n\nexport type FOrderMapDeliveryFragment = {\n  readonly __typename?: 'User'\n\n  readonly device: Maybe<FOrderMapDeliveryDevice>\n} & FOrderMapDriverFragment\n\nexport type FOrderMapDeliveryDevice = FOrderMapDeviceFragment\n\nexport type FOrderMapDeviceFragment = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly id: string\n\n  readonly lastPosition: Maybe<FOrderMapDeviceLastPosition>\n\n  readonly isFinalized: boolean\n}\n\nexport type FOrderMapDeviceLastPosition = {\n  readonly __typename?: 'GeoPositionWithTimestamp'\n\n  readonly gps: FOrderMapDeviceGps\n\n  readonly timestamp: string\n}\n\nexport type FOrderMapDeviceGps = FGeoPointFragment\n\nexport type FOrderMapDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n\n  readonly countUndeliveredOrders: number\n}\n\nexport type FOrderMapOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliveryType: Maybe<FOrderMapOrderDeliveryType>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n\n  readonly gps: Maybe<FOrderMapOrderGps>\n}\n\nexport type FOrderMapOrderDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FOrderMapOrderGps = FGeoPointFragment\n\nexport type FOrderTickerFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly isPaidWithCard: boolean\n\n  readonly isPriority: boolean\n\n  readonly deliveryType: Maybe<FOrderTickerDeliveryType>\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliverAtWorst: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly companyBranch: FOrderTickerCompanyBranch\n\n  readonly address: FOrderTickerAddress\n\n  readonly customer: FOrderTickerCustomer\n\n  readonly totalSum: FOrderTickerTotalSum\n}\n\nexport type FOrderTickerDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FOrderTickerCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly oldOrderThreshold: number\n}\n\nexport type FOrderTickerAddress = FAddressFragment\n\nexport type FOrderTickerCustomer = FCustomerFragment\n\nexport type FOrderTickerTotalSum = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type FOrderTimingFragment = {\n  readonly __typename?: 'Order'\n\n  readonly orderTiming: ReadonlyArray<FOrderTimingOrderTiming>\n}\n\nexport type FOrderTimingOrderTiming = {\n  readonly __typename?: 'OrderStateCategoryRelation'\n\n  readonly createdAt: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type FOrderTotalsFragment = {\n  readonly __typename?: 'Order'\n\n  readonly totalSum: FOrderTotalsTotalSum\n\n  readonly transportFee: FOrderTotalsTransportFee\n\n  readonly coverPrice: FOrderTotalsCoverPrice\n\n  readonly totalDiscount: FOrderTotalsTotalDiscount\n\n  readonly tip: FOrderTotalsTip\n}\n\nexport type FOrderTotalsTotalSum = FPriceFragment\n\nexport type FOrderTotalsTransportFee = FPriceFragment\n\nexport type FOrderTotalsCoverPrice = FPriceFragment\n\nexport type FOrderTotalsTotalDiscount = FPriceFragment\n\nexport type FOrderTotalsTip = FPriceFragment\n\nexport type FZoneFragment = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly enabled: boolean\n\n  readonly priority: number\n\n  readonly companyBranch: FZoneCompanyBranch\n\n  readonly geoPolygon: ReadonlyArray<FZoneGeoPolygon>\n\n  readonly priceRangeRules: ReadonlyArray<FZonePriceRangeRules>\n\n  readonly minimalOrderPrice: FZoneMinimalOrderPrice\n\n  readonly zoneColor: FZoneZoneColor\n}\n\nexport type FZoneCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly brand: FZoneBrand\n}\n\nexport type FZoneBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type FZoneGeoPolygon = FGeoPointFragment\n\nexport type FZonePriceRangeRules = FZonePriceRangeFragment\n\nexport type FZoneMinimalOrderPrice = FPriceFragment\n\nexport type FZoneZoneColor = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type FZonePriceRangeFragment = {\n  readonly __typename?: 'ZonePriceRangeRule'\n\n  readonly toPrice: FZonePriceRangeToPrice\n\n  readonly price: FZonePriceRangePrice\n}\n\nexport type FZonePriceRangeToPrice = FPriceFragment\n\nexport type FZonePriceRangePrice = FPriceFragment\n\nimport * as Hooks from '@speedlo/graphql'\nimport gql from 'graphql-tag'\n\n// ====================================================\n// Fragments\n// ====================================================\n\nexport const GSpecificBusinessHourFragmentDoc = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const FPriceFragmentDoc = gql`\n  fragment FPrice on PriceConverted {\n    value\n  }\n`\n\nexport const GMenuRecipeFragmentDoc = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FMenuAllergenFragmentDoc = gql`\n  fragment FMenuAllergen on Allergen {\n    id\n    code\n    enum\n    category\n  }\n`\n\nexport const FMenuWareUnitFragmentDoc = gql`\n  fragment FMenuWareUnit on WareUnit {\n    id\n    enum\n    code\n  }\n`\n\nexport const GMenuStockItemFragmentDoc = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...FMenuAllergen\n    }\n    wareUnit {\n      ...FMenuWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n\n  ${FMenuAllergenFragmentDoc}\n  ${FMenuWareUnitFragmentDoc}\n`\n\nexport const GMenuRecipePriceFragmentDoc = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const GMenuAssocRecipeFragmentDoc = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const FGeoPointFragmentDoc = gql`\n  fragment FGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const FCompanyBranchFragmentDoc = gql`\n  fragment FCompanyBranch on CompanyBranch {\n    id\n    name\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    gps {\n      ...FGeoPoint\n    }\n    brand {\n      id\n      name\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderStateCategoryFragmentDoc = gql`\n  fragment FOrderStateCategory on Order {\n    id\n    orderStateCategory\n  }\n`\n\nexport const FPriceWithCurrencyFragmentDoc = gql`\n  fragment FPriceWithCurrency on PriceConverted {\n    value\n    currency {\n      code\n    }\n  }\n`\n\nexport const FRegularBusinessHourFragmentDoc = gql`\n  fragment FRegularBusinessHour on BusinessHour {\n    id\n    openAt\n    closeAt\n    weekDay {\n      enum\n    }\n  }\n`\n\nexport const FSpecificBusinessHourFragmentDoc = gql`\n  fragment FSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const FWeekdayFragmentDoc = gql`\n  fragment FWeekday on WeekDay {\n    enum\n    code\n  }\n`\n\nexport const FCreateOrderItemFragmentDoc = gql`\n  fragment FCreateOrderItem on OrderRecipe {\n    id\n    price {\n      ...FPrice\n    }\n    recipe {\n      id\n      code\n      nameLabel\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderFragmentDoc = gql`\n  fragment FCreateOrder on Order {\n    id\n    countWares\n    items {\n      ...FCreateOrderItem\n      recipe {\n        sidedishCount: sideDishesWareCategoriesCount\n      }\n      priceWithSidedishes: priceWithSideDishes {\n        ...FPrice\n      }\n      sidedishes: sideDishes {\n        ...FCreateOrderItem\n      }\n    }\n    coverPrice {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...FPrice\n      }\n    }\n    minimalOrderPrice {\n      formattedValue\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    totalSum {\n      ...FPrice\n    }\n  }\n\n  ${FCreateOrderItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderRecipeSidedishesFragmentDoc = gql`\n  fragment FCreateOrderRecipeSidedishes on Recipe {\n    id\n    nameLabel\n    sidedishCategories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sidedishes: sideDishes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderMenuRecipeFragmentDoc = gql`\n  fragment FOrderMenuRecipe on Recipe {\n    id\n    code\n    nameLabel\n    descriptionLabel\n    price(warePriceType: DELIVERY) {\n      value\n      currency {\n        code\n      }\n    }\n    sidedishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const FOrderMenuCategoryFragmentDoc = gql`\n  fragment FOrderMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n    recipes(enabled: true, isAvailable: true) {\n      ...FOrderMenuRecipe\n    }\n  }\n\n  ${FOrderMenuRecipeFragmentDoc}\n`\n\nexport const FKitchenOrderRecipeFragmentDoc = gql`\n  fragment FKitchenOrderRecipe on OrderRecipe {\n    id\n    orderRecipeState {\n      enum\n    }\n    recipe {\n      id\n      code\n      nameLabel\n    }\n  }\n`\n\nexport const FKitchenOrderBaseFragmentDoc = gql`\n  fragment FKitchenOrderBase on Order {\n    id\n    createdAt\n    deliverAt\n    deliveryType {\n      enum\n    }\n    companyBranch {\n      id\n      name\n    }\n    isPriority\n    items {\n      ...FKitchenOrderRecipe\n      sidedishes: sideDishes {\n        ...FKitchenOrderRecipe\n      }\n    }\n  }\n\n  ${FKitchenOrderRecipeFragmentDoc}\n`\n\nexport const FKitchenCompletionOrderFragmentDoc = gql`\n  fragment FKitchenCompletionOrder on Order {\n    ...FKitchenOrderBase\n    cashBox {\n      id\n    }\n    orderNumber: invoiceSequenceResettable\n    orderOrigin {\n      code\n    }\n    orderStateCategory(target: FE_COMPLETION)\n  }\n\n  ${FKitchenOrderBaseFragmentDoc}\n`\n\nexport const FAddressFragmentDoc = gql`\n  fragment FAddress on JsonAddress {\n    state\n    city\n    street\n    houseNumber\n  }\n`\n\nexport const FEmailFragmentDoc = gql`\n  fragment FEmail on Email {\n    email\n    description\n    default\n  }\n`\n\nexport const FPhoneFragmentDoc = gql`\n  fragment FPhone on Phone {\n    phone\n    description\n    default\n  }\n`\n\nexport const FCustomerFragmentDoc = gql`\n  fragment FCustomer on JsonCustomer {\n    firstName\n    lastName\n    defaultEmail {\n      ...FEmail\n    }\n    defaultPhone {\n      ...FPhone\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n`\n\nexport const FKitchenOrderFragmentDoc = gql`\n  fragment FKitchenOrder on Order {\n    ...FKitchenOrderBase\n    address {\n      ...FAddress\n    }\n    customer {\n      ...FCustomer\n    }\n    deliverAt\n    deliveredAt\n    delayedDeliveryTime\n    note\n    previousNote\n    orderStateCategory(target: FE_KITCHEN)\n  }\n\n  ${FKitchenOrderBaseFragmentDoc}\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n`\n\nexport const FMenuRecipeFragmentDoc = gql`\n  fragment FMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FMenuCategoryFragmentDoc = gql`\n  fragment FMenuCategory on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    origins: orderOriginCategories\n    pictogram\n    minCount\n    maxCount\n    recipes {\n      ...FMenuRecipe\n    }\n  }\n\n  ${FMenuRecipeFragmentDoc}\n`\n\nexport const FMenuCategoryListItemFragmentDoc = gql`\n  fragment FMenuCategoryListItem on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    countRecipes\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    origins: orderOriginCategories\n  }\n`\n\nexport const FMenuRecipePricingFragmentDoc = gql`\n  fragment FMenuRecipePricing on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderDetailWareFragmentDoc = gql`\n  fragment FOrderDetailWare on OrderRecipe {\n    id\n    recipe {\n      id\n      code\n      nameLabel\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FUserNameFragmentDoc = gql`\n  fragment FUserName on User {\n    firstName\n    lastName\n  }\n`\n\nexport const FDriverFragmentDoc = gql`\n  fragment FDriver on User {\n    id\n    initials\n    ...FUserName\n  }\n\n  ${FUserNameFragmentDoc}\n`\n\nexport const FOrderDriverFragmentDoc = gql`\n  fragment FOrderDriver on Order {\n    id\n    driver: userDeliveringOrder {\n      id\n      user {\n        ...FDriver\n      }\n    }\n  }\n\n  ${FDriverFragmentDoc}\n`\n\nexport const FOrderMapDriverFragmentDoc = gql`\n  fragment FOrderMapDriver on User {\n    id\n    initials\n    countUndeliveredOrders\n  }\n`\n\nexport const FOrderMapDeviceFragmentDoc = gql`\n  fragment FOrderMapDevice on TransportationDeviceUser {\n    id\n    lastPosition {\n      gps: geoPosition {\n        ...FGeoPoint\n      }\n      timestamp\n    }\n    isFinalized\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderMapDeliveryFragmentDoc = gql`\n  fragment FOrderMapDelivery on User {\n    ...FOrderMapDriver\n    device: usedTransportationDevice {\n      ...FOrderMapDevice\n    }\n  }\n\n  ${FOrderMapDriverFragmentDoc}\n  ${FOrderMapDeviceFragmentDoc}\n`\n\nexport const FOrderMapOrderFragmentDoc = gql`\n  fragment FOrderMapOrder on Order {\n    id\n    deliverAt\n    deliveryType {\n      enum\n    }\n    delayedDeliveryTime\n    orderStateCategory\n    gps {\n      ...FGeoPoint\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderTickerFragmentDoc = gql`\n  fragment FOrderTicker on Order {\n    id\n    createdAt\n    isPaidWithCard\n    isPriority\n    deliveryType {\n      enum\n    }\n    deliverAt\n    deliverAtWorst\n    deliveredAt\n    delayedDeliveryTime\n    companyBranch {\n      id\n      name\n      oldOrderThreshold\n    }\n    address {\n      ...FAddress\n    }\n    customer {\n      ...FCustomer\n    }\n    totalSum {\n      formattedValue\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n`\n\nexport const FOrderTimingFragmentDoc = gql`\n  fragment FOrderTiming on Order {\n    orderTiming: orderStateCategoryRelations {\n      createdAt\n      orderStateCategory\n    }\n  }\n`\n\nexport const FOrderTotalsFragmentDoc = gql`\n  fragment FOrderTotals on Order {\n    totalSum {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    coverPrice {\n      ...FPrice\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    tip {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FZonePriceRangeFragmentDoc = gql`\n  fragment FZonePriceRange on ZonePriceRangeRule {\n    toPrice {\n      ...FPrice\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FZoneFragmentDoc = gql`\n  fragment FZone on Zone {\n    id\n    name\n    enabled\n    priority\n    companyBranch {\n      id\n      brand {\n        id\n      }\n    }\n    geoPolygon {\n      ...FGeoPoint\n    }\n    priceRangeRules {\n      ...FZonePriceRange\n    }\n    minimalOrderPrice {\n      ...FPrice\n    }\n    zoneColor {\n      id\n      code\n      color\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n  ${FZonePriceRangeFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\n// ====================================================\n// Hooks\n// ====================================================\n\nexport const GCreateSpecificBusinessHourDocument = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n\n  ${GSpecificBusinessHourFragmentDoc}\n`\n\nexport function useGCreateSpecificBusinessHour(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateSpecificBusinessHourMutation,\n    GCreateSpecificBusinessHourVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreateSpecificBusinessHourMutation,\n    GCreateSpecificBusinessHourVariables\n  >(GCreateSpecificBusinessHourDocument, baseOptions)\n}\n\nexport const GDeleteSpecificBusinessHourDocument = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n\nexport function useGDeleteSpecificBusinessHour(\n  baseOptions?: Hooks.MutationHookOptions<\n    GDeleteSpecificBusinessHourMutation,\n    GDeleteSpecificBusinessHourVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GDeleteSpecificBusinessHourMutation,\n    GDeleteSpecificBusinessHourVariables\n  >(GDeleteSpecificBusinessHourDocument, baseOptions)\n}\n\nexport const GSpecificBusinessHoursDocument = gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n\n  ${GSpecificBusinessHourFragmentDoc}\n`\n\nexport function useGSpecificBusinessHours(\n  variables?: GSpecificBusinessHoursVariables,\n  baseOptions?: Hooks.QueryHookOptions<GSpecificBusinessHoursVariables>,\n) {\n  return Hooks.useQuery<\n    GSpecificBusinessHoursQuery,\n    GSpecificBusinessHoursVariables\n  >(GSpecificBusinessHoursDocument, variables, baseOptions)\n}\n\nexport const GOrderVamDocument = gql`\n  query GOrderVam($branchId: ID!, $phone: String!) {\n    vamCustomer: vamInformation(companyBranchId: $branchId, phone: $phone) {\n      isFound\n      email\n      firstName\n      lastName\n      lastOrder {\n        note\n      }\n      locations {\n        street\n        houseNumber\n        city\n        state\n        gps {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n`\n\nexport function useGOrderVam(\n  variables?: GOrderVamVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderVamVariables>,\n) {\n  return Hooks.useQuery<GOrderVamQuery, GOrderVamVariables>(\n    GOrderVamDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderPromoDocument = gql`\n  query GOrderPromo($branchId: ID!) {\n    promoCodes(promoCode: { companyBranch: $branchId, enabled: true }) {\n      id\n      code\n    }\n  }\n`\n\nexport function useGOrderPromo(\n  variables?: GOrderPromoVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderPromoVariables>,\n) {\n  return Hooks.useQuery<GOrderPromoQuery, GOrderPromoVariables>(\n    GOrderPromoDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GSortMenuCategoryDocument = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport function useGSortMenuCategory(\n  baseOptions?: Hooks.MutationHookOptions<\n    GSortMenuCategoryMutation,\n    GSortMenuCategoryVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GSortMenuCategoryMutation,\n    GSortMenuCategoryVariables\n  >(GSortMenuCategoryDocument, baseOptions)\n}\n\nexport const GMenuCategoryCreateDocument = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport function useGMenuCategoryCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryCreateMutation,\n    GMenuCategoryCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryCreateMutation,\n    GMenuCategoryCreateVariables\n  >(GMenuCategoryCreateDocument, baseOptions)\n}\n\nexport const GMenuCategoryUpdateDocument = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...FMenuCategory\n    }\n  }\n\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport function useGMenuCategoryUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryUpdateMutation,\n    GMenuCategoryUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryUpdateMutation,\n    GMenuCategoryUpdateVariables\n  >(GMenuCategoryUpdateDocument, baseOptions)\n}\n\nexport const GMenuCategoryDeleteDocument = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuCategoryDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryDeleteMutation,\n    GMenuCategoryDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryDeleteMutation,\n    GMenuCategoryDeleteVariables\n  >(GMenuCategoryDeleteDocument, baseOptions)\n}\n\nexport const GMenuRecipeVisibilityDocument = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useGMenuRecipeVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeVisibilityMutation,\n    GMenuRecipeVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeVisibilityMutation,\n    GMenuRecipeVisibilityVariables\n  >(GMenuRecipeVisibilityDocument, baseOptions)\n}\n\nexport const GMenuRecipeCreateDocument = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeCreateMutation,\n    GMenuRecipeCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeCreateMutation,\n    GMenuRecipeCreateVariables\n  >(GMenuRecipeCreateDocument, baseOptions)\n}\n\nexport const GMenuRecipeUpdateDocument = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeUpdateMutation,\n    GMenuRecipeUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeUpdateMutation,\n    GMenuRecipeUpdateVariables\n  >(GMenuRecipeUpdateDocument, baseOptions)\n}\n\nexport const GMenuRecipeDeleteDocument = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuRecipeDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeDeleteMutation,\n    GMenuRecipeDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeDeleteMutation,\n    GMenuRecipeDeleteVariables\n  >(GMenuRecipeDeleteDocument, baseOptions)\n}\n\nexport const GMenuStockCreateDocument = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockCreateMutation,\n    GMenuStockCreateVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockCreateMutation, GMenuStockCreateVariables>(\n    GMenuStockCreateDocument,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockUpdateDocument = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockUpdateMutation,\n    GMenuStockUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockUpdateMutation, GMenuStockUpdateVariables>(\n    GMenuStockUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockDeleteDocument = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuStockDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockDeleteMutation,\n    GMenuStockDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockDeleteMutation, GMenuStockDeleteVariables>(\n    GMenuStockDeleteDocument,\n    baseOptions,\n  )\n}\n\nexport const GAllergensDocument = gql`\n  query GAllergens {\n    allergens {\n      ...FMenuAllergen\n    }\n  }\n\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport function useGAllergens(\n  variables?: GAllergensVariables,\n  baseOptions?: Hooks.QueryHookOptions<GAllergensVariables>,\n) {\n  return Hooks.useQuery<GAllergensQuery, GAllergensVariables>(\n    GAllergensDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCurrenciesDocument = gql`\n  query GCurrencies($branchId: ID!) {\n    currencies {\n      enum\n      code\n    }\n    companyBranch(id: $branchId) {\n      address {\n        country {\n          currency {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useGCurrencies(\n  variables?: GCurrenciesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GCurrenciesVariables>,\n) {\n  return Hooks.useQuery<GCurrenciesQuery, GCurrenciesVariables>(\n    GCurrenciesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GVatsDocument = gql`\n  query GVats($branchId: ID!) {\n    vats(companyBranch: $branchId) {\n      id\n      vat\n    }\n  }\n`\n\nexport function useGVats(\n  variables?: GVatsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GVatsVariables>,\n) {\n  return Hooks.useQuery<GVatsQuery, GVatsVariables>(\n    GVatsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GWareUnitsDocument = gql`\n  query GWareUnits {\n    wareUnits {\n      id\n      code\n      enum\n    }\n  }\n`\n\nexport function useGWareUnits(\n  variables?: GWareUnitsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GWareUnitsVariables>,\n) {\n  return Hooks.useQuery<GWareUnitsQuery, GWareUnitsVariables>(\n    GWareUnitsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuRecipeFormDocument = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...FMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...FMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n\n  ${GMenuRecipePriceFragmentDoc}\n  ${FMenuCategoryListItemFragmentDoc}\n  ${GMenuAssocRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeForm(\n  variables?: GMenuRecipeFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeFormVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeFormQuery, GMenuRecipeFormVariables>(\n    GMenuRecipeFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuRecipeFormAssocDocument = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n\n  ${GMenuAssocRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeFormAssoc(\n  variables?: GMenuRecipeFormAssocVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeFormAssocVariables>,\n) {\n  return Hooks.useQuery<\n    GMenuRecipeFormAssocQuery,\n    GMenuRecipeFormAssocVariables\n  >(GMenuRecipeFormAssocDocument, variables, baseOptions)\n}\n\nexport const GMenuRecipeDefaultsDocument = gql`\n  query GMenuRecipeDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport function useGMenuRecipeDefaults(\n  variables?: GMenuRecipeDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeDefaultsVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeDefaultsQuery, GMenuRecipeDefaultsVariables>(\n    GMenuRecipeDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockFormDocument = gql`\n  query GMenuStockForm($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      code\n      plu\n      note\n      nameLabel: label\n      allowNegative\n      wareUnit {\n        ...FMenuWareUnit\n      }\n      allergens {\n        ...FMenuAllergen\n      }\n      companyBranch {\n        id\n        allowNegative: stockItemsCanBeNegative\n      }\n    }\n  }\n\n  ${FMenuWareUnitFragmentDoc}\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport function useGMenuStockForm(\n  variables?: GMenuStockFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockFormVariables>,\n) {\n  return Hooks.useQuery<GMenuStockFormQuery, GMenuStockFormVariables>(\n    GMenuStockFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockDefaultsDocument = gql`\n  query GMenuStockDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      allowNegative: stockItemsCanBeNegative\n    }\n  }\n`\n\nexport function useGMenuStockDefaults(\n  variables?: GMenuStockDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockDefaultsVariables>,\n) {\n  return Hooks.useQuery<GMenuStockDefaultsQuery, GMenuStockDefaultsVariables>(\n    GMenuStockDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCreateZoneDocument = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useGCreateZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateZoneMutation,\n    GCreateZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GCreateZoneMutation, GCreateZoneVariables>(\n    GCreateZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GUpdateZonePriorityDocument = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport function useGUpdateZonePriority(\n  baseOptions?: Hooks.MutationHookOptions<\n    GUpdateZonePriorityMutation,\n    GUpdateZonePriorityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GUpdateZonePriorityMutation,\n    GUpdateZonePriorityVariables\n  >(GUpdateZonePriorityDocument, baseOptions)\n}\n\nexport const GDestroyZoneDocument = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n\nexport function useGDestroyZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GDestroyZoneMutation,\n    GDestroyZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GDestroyZoneMutation, GDestroyZoneVariables>(\n    GDestroyZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GZonesDocument = gql`\n  query GZones($branchesId: [ID!]!) {\n    zones(companyBranches: $branchesId) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useGZones(\n  variables?: GZonesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZonesVariables>,\n) {\n  return Hooks.useQuery<GZonesQuery, GZonesVariables>(\n    GZonesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneLocationDocument = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...FGeoPoint\n        }\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGZoneLocation(\n  variables?: GZoneLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneLocationVariables>,\n) {\n  return Hooks.useQuery<GZoneLocationQuery, GZoneLocationVariables>(\n    GZoneLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneBranchLocationDocument = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGZoneBranchLocation(\n  variables?: GZoneBranchLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneBranchLocationVariables>,\n) {\n  return Hooks.useQuery<GZoneBranchLocationQuery, GZoneBranchLocationVariables>(\n    GZoneBranchLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneColorsDocument = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n\nexport function useGZoneColors(\n  variables?: GZoneColorsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneColorsVariables>,\n) {\n  return Hooks.useQuery<GZoneColorsQuery, GZoneColorsVariables>(\n    GZoneColorsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QAddressSuggestDocument = gql`\n  query QAddressSuggest($search: String!) {\n    suggest: suggestGeolocation(address: $search) {\n      ...FAddress\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useQAddressSuggest(\n  variables?: QAddressSuggestVariables,\n  baseOptions?: Hooks.QueryHookOptions<QAddressSuggestVariables>,\n) {\n  return Hooks.useQuery<QAddressSuggestQuery, QAddressSuggestVariables>(\n    QAddressSuggestDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MOrderStateDocument = gql`\n  mutation MOrderState($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...FOrderStateCategory\n      ...FOrderTiming\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTimingFragmentDoc}\n`\n\nexport function useMOrderState(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderStateMutation,\n    MOrderStateVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderStateMutation, MOrderStateVariables>(\n    MOrderStateDocument,\n    baseOptions,\n  )\n}\n\nexport const MSetPriorityOrderDocument = gql`\n  mutation MSetPriorityOrder($orderId: ID!, $isPriority: Boolean!) {\n    setPriorityOrder(order: $orderId, isPriority: $isPriority) {\n      id\n      isPriority\n    }\n  }\n`\n\nexport function useMSetPriorityOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSetPriorityOrderMutation,\n    MSetPriorityOrderVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSetPriorityOrderMutation,\n    MSetPriorityOrderVariables\n  >(MSetPriorityOrderDocument, baseOptions)\n}\n\nexport const QLogoutWidgetDocument = gql`\n  query QLogoutWidget($id: ID!) {\n    user(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n`\n\nexport function useQLogoutWidget(\n  variables?: QLogoutWidgetVariables,\n  baseOptions?: Hooks.QueryHookOptions<QLogoutWidgetVariables>,\n) {\n  return Hooks.useQuery<QLogoutWidgetQuery, QLogoutWidgetVariables>(\n    QLogoutWidgetDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MBusinessHoursSubmitDocument = gql`\n  mutation MBusinessHoursSubmit(\n    $branchId: ID!\n    $hours: [InputBusinessHourCreate!]!\n  ) {\n    createBusinessHours(companyBranch: $branchId, businessHours: $hours) {\n      ...FRegularBusinessHour\n    }\n  }\n\n  ${FRegularBusinessHourFragmentDoc}\n`\n\nexport function useMBusinessHoursSubmit(\n  baseOptions?: Hooks.MutationHookOptions<\n    MBusinessHoursSubmitMutation,\n    MBusinessHoursSubmitVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MBusinessHoursSubmitMutation,\n    MBusinessHoursSubmitVariables\n  >(MBusinessHoursSubmitDocument, baseOptions)\n}\n\nexport const QRegularBusinessHoursDocument = gql`\n  query QRegularBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId) {\n      ...FRegularBusinessHour\n    }\n    weekDays {\n      ...FWeekday\n    }\n  }\n\n  ${FRegularBusinessHourFragmentDoc}\n  ${FWeekdayFragmentDoc}\n`\n\nexport function useQRegularBusinessHours(\n  variables?: QRegularBusinessHoursVariables,\n  baseOptions?: Hooks.QueryHookOptions<QRegularBusinessHoursVariables>,\n) {\n  return Hooks.useQuery<\n    QRegularBusinessHoursQuery,\n    QRegularBusinessHoursVariables\n  >(QRegularBusinessHoursDocument, variables, baseOptions)\n}\n\nexport const MAddOrderPromoDocument = gql`\n  mutation MAddOrderPromo($orderId: ID!, $code: String!) {\n    addOrderPromoCode(order: $orderId, promoCode: $code) {\n      userErrors: errors\n      order {\n        ...FCreateOrder\n      }\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMAddOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddOrderPromoMutation,\n    MAddOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<MAddOrderPromoMutation, MAddOrderPromoVariables>(\n    MAddOrderPromoDocument,\n    baseOptions,\n  )\n}\n\nexport const MCancelOrderDocument = gql`\n  mutation MCancelOrder($orderId: ID!) {\n    addOrderState(order: $orderId, orderState: CANCELED) {\n      id\n      ...FOrderStateCategory\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useMCancelOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCancelOrderMutation,\n    MCancelOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MCancelOrderMutation, MCancelOrderVariables>(\n    MCancelOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderAcceptDocument = gql`\n  mutation MCreateOrderAccept(\n    $orderId: ID!\n    $customer: InputCustomerCreate!\n    $deliverAt: DateTime\n    $note: String\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        customer: $customer\n        note: $note\n        deliverAt: $deliverAt\n        paymentMethod: CASH\n        paymentGate: CASH\n      }\n    ) {\n      userErrors\n      order {\n        ...FCreateOrder\n      }\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderAccept(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >(MCreateOrderAcceptDocument, baseOptions)\n}\n\nexport const MCreateOrderAddRecipeDocument = gql`\n  mutation MCreateOrderAddRecipe(\n    $orderId: ID!\n    $recipeId: ID!\n    $sidedishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sidedishes\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderAddRecipe(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >(MCreateOrderAddRecipeDocument, baseOptions)\n}\n\nexport const MCreateOrderNewDocument = gql`\n  mutation MCreateOrderNew(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $callEventId: ID\n  ) {\n    createOrder(\n      order: {\n        companyBranch: $branchId\n        deliveryType: $deliveryType\n        callEventId: $callEventId\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: {}\n        warePriceType: DELIVERY\n        orderOrigin: STAFF\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderNew(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderNewMutation,\n    MCreateOrderNewVariables\n  >,\n) {\n  return Hooks.useMutation<MCreateOrderNewMutation, MCreateOrderNewVariables>(\n    MCreateOrderNewDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderRemoveItemDocument = gql`\n  mutation MCreateOrderRemoveItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderRemoveItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >(MCreateOrderRemoveItemDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateDocument = gql`\n  mutation MCreateOrderUpdate(\n    $orderId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $customer: InputCustomerCreate\n  ) {\n    updateOrder(\n      id: $orderId\n      order: {\n        deliveryType: $deliveryType\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: $customer\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >(MCreateOrderUpdateDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateItemDocument = gql`\n  mutation MCreateOrderUpdateItem($itemId: ID!, $sidedishes: [ID!]) {\n    updateOrderRecipe(id: $itemId, orderRecipe: { sideDishes: $sidedishes }) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderUpdateItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >(MCreateOrderUpdateItemDocument, baseOptions)\n}\n\nexport const MRemoveOrderPromoDocument = gql`\n  mutation MRemoveOrderPromo($orderId: ID!, $codeId: ID!) {\n    removeOrderPromoCode(order: $orderId, promoCode: $codeId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMRemoveOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >(MRemoveOrderPromoDocument, baseOptions)\n}\n\nexport const QCreateOrderItemDocument = gql`\n  query QCreateOrderItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...FCreateOrderRecipeSidedishes\n      }\n      selectedSidedishes: sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderItem(\n  variables?: QCreateOrderItemVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCreateOrderItemVariables>,\n) {\n  return Hooks.useQuery<QCreateOrderItemQuery, QCreateOrderItemVariables>(\n    QCreateOrderItemDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QCreateOrderRecipeDocument = gql`\n  query QCreateOrderRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...FCreateOrderRecipeSidedishes\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderRecipe(\n  variables?: QCreateOrderRecipeVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCreateOrderRecipeVariables>,\n) {\n  return Hooks.useQuery<QCreateOrderRecipeQuery, QCreateOrderRecipeVariables>(\n    QCreateOrderRecipeDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderCartDocument = gql`\n  query QOrderCart($orderId: ID!) {\n    order(id: $orderId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useQOrderCart(\n  variables?: QOrderCartVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderCartVariables>,\n) {\n  return Hooks.useQuery<QOrderCartQuery, QOrderCartVariables>(\n    QOrderCartDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderFormDeliverAtDefaultsDocument = gql`\n  query QOrderFormDeliverAtDefaults($branchId: ID!) {\n    times: companyBranch(id: $branchId) {\n      id\n      deliveryTime: defaultDeliveryTime\n      pickupTime: defaultPickupTime\n    }\n  }\n`\n\nexport function useQOrderFormDeliverAtDefaults(\n  variables?: QOrderFormDeliverAtDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFormDeliverAtDefaultsVariables>,\n) {\n  return Hooks.useQuery<\n    QOrderFormDeliverAtDefaultsQuery,\n    QOrderFormDeliverAtDefaultsVariables\n  >(QOrderFormDeliverAtDefaultsDocument, variables, baseOptions)\n}\n\nexport const QOrderMenuDocument = gql`\n  query QOrderMenu($branchId: ID!) {\n    orderMenu: wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n      orderOriginCategory: STAFF\n      enabled: true\n      isAvailable: true\n    ) {\n      ...FOrderMenuCategory\n    }\n  }\n\n  ${FOrderMenuCategoryFragmentDoc}\n`\n\nexport function useQOrderMenu(\n  variables?: QOrderMenuVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMenuVariables>,\n) {\n  return Hooks.useQuery<QOrderMenuQuery, QOrderMenuVariables>(\n    QOrderMenuDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QValidateLocationDocument = gql`\n  query QValidateLocation(\n    $branchId: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    resolveLocation(\n      companyBranch: $branchId\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      inDeliveryLocation\n      zone {\n        minimalOrderPrice {\n          formattedValue\n        }\n      }\n    }\n  }\n`\n\nexport function useQValidateLocation(\n  variables?: QValidateLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<QValidateLocationVariables>,\n) {\n  return Hooks.useQuery<QValidateLocationQuery, QValidateLocationVariables>(\n    QValidateLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MKitchenRecipeStateDocument = gql`\n  mutation MKitchenRecipeState($recipeId: ID!, $state: OrderRecipeStateEnum!) {\n    updateOrderRecipeState(id: $recipeId, orderRecipeState: $state) {\n      id\n      orderRecipeState {\n        enum\n      }\n      order {\n        id\n        orderStateCategory(target: FE_KITCHEN)\n      }\n    }\n  }\n`\n\nexport function useMKitchenRecipeState(\n  baseOptions?: Hooks.MutationHookOptions<\n    MKitchenRecipeStateMutation,\n    MKitchenRecipeStateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MKitchenRecipeStateMutation,\n    MKitchenRecipeStateVariables\n  >(MKitchenRecipeStateDocument, baseOptions)\n}\n\nexport const QKitchenCompletionOrderListDocument = gql`\n  query QKitchenCompletionOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoryTarget: FE_COMPLETION\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      ...FKitchenCompletionOrder\n    }\n  }\n\n  ${FKitchenCompletionOrderFragmentDoc}\n`\n\nexport function useQKitchenCompletionOrderList(\n  variables?: QKitchenCompletionOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QKitchenCompletionOrderListVariables>,\n) {\n  return Hooks.useQuery<\n    QKitchenCompletionOrderListQuery,\n    QKitchenCompletionOrderListVariables\n  >(QKitchenCompletionOrderListDocument, variables, baseOptions)\n}\n\nexport const QKitchenOrderListDocument = gql`\n  query QKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoryTarget: FE_KITCHEN\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      ...FKitchenOrder\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useQKitchenOrderList(\n  variables?: QKitchenOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QKitchenOrderListVariables>,\n) {\n  return Hooks.useQuery<QKitchenOrderListQuery, QKitchenOrderListVariables>(\n    QKitchenOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SKitchenCompletionOrderListDocument = gql`\n  subscription SKitchenCompletionOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n      orderStateCategoryTarget: FE_COMPLETION\n    ) {\n      order {\n        ...FKitchenCompletionOrder\n      }\n    }\n  }\n\n  ${FKitchenCompletionOrderFragmentDoc}\n`\n\nexport function useSKitchenCompletionOrderList(\n  variables?: SKitchenCompletionOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SKitchenCompletionOrderListSubscription,\n    SKitchenCompletionOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SKitchenCompletionOrderListSubscription,\n    SKitchenCompletionOrderListVariables\n  >(SKitchenCompletionOrderListDocument, variables, baseOptions)\n}\n\nexport const SKitchenOrderListDocument = gql`\n  subscription SKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n      orderStateCategoryTarget: FE_KITCHEN\n    ) {\n      order {\n        ...FKitchenOrder\n      }\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useSKitchenOrderList(\n  variables?: SKitchenOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >(SKitchenOrderListDocument, variables, baseOptions)\n}\n\nexport const MPasswordChangeDocument = gql`\n  mutation MPasswordChange($password: String!) {\n    change: updateUserPassword(newPassword: $password) {\n      userId: id\n      newToken: token\n    }\n  }\n`\n\nexport function useMPasswordChange(\n  baseOptions?: Hooks.MutationHookOptions<\n    MPasswordChangeMutation,\n    MPasswordChangeVariables\n  >,\n) {\n  return Hooks.useMutation<MPasswordChangeMutation, MPasswordChangeVariables>(\n    MPasswordChangeDocument,\n    baseOptions,\n  )\n}\n\nexport const QUserBootstrapDocument = gql`\n  query QUserBootstrap($userId: ID!) {\n    user(id: $userId) {\n      id\n      firstName\n      lastName\n      language {\n        rawCode\n      }\n      roles {\n        id\n        name\n      }\n      branches: accessibleBranches {\n        ...FCompanyBranch\n      }\n    }\n    permissions: permissions {\n      canCancelOrders\n      canCreateOrder\n    }\n    access: __schema {\n      queries: queryType {\n        fields {\n          name\n        }\n      }\n      mutations: mutationType {\n        fields {\n          name\n        }\n      }\n      subscriptions: subscriptionType {\n        fields {\n          name\n        }\n      }\n    }\n  }\n\n  ${FCompanyBranchFragmentDoc}\n`\n\nexport function useQUserBootstrap(\n  variables?: QUserBootstrapVariables,\n  baseOptions?: Hooks.QueryHookOptions<QUserBootstrapVariables>,\n) {\n  return Hooks.useQuery<QUserBootstrapQuery, QUserBootstrapVariables>(\n    QUserBootstrapDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderCountDocument = gql`\n  query QOrderCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    ordersCategoryCount(\n      companyBranches: $branchesId\n      orderStateCategoriesOR: $categories\n    ) {\n      orderStateCategory {\n        enum\n      }\n      ordersCount\n    }\n  }\n`\n\nexport function useQOrderCount(\n  variables?: QOrderCountVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderCountVariables>,\n) {\n  return Hooks.useQuery<QOrderCountQuery, QOrderCountVariables>(\n    QOrderCountDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderCallDocument = gql`\n  subscription SOrderCall {\n    call: updatedUserCallingCustomer {\n      eventId\n      phone\n      prefix\n      isRinging\n    }\n  }\n`\n\nexport function useSOrderCall(\n  variables?: SOrderCallVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderCallSubscription,\n    SOrderCallVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderCallSubscription, SOrderCallVariables>(\n    SOrderCallDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderCountDocument = gql`\n  subscription SOrderCount($branchesId: [ID!]!) {\n    updatedOrdersCount(companyBranches: $branchesId) {\n      ordersCount\n    }\n  }\n`\n\nexport function useSOrderCount(\n  variables?: SOrderCountVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderCountSubscription,\n    SOrderCountVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderCountSubscription, SOrderCountVariables>(\n    SOrderCountDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MMenuCategoryVisibilityDocument = gql`\n  mutation MMenuCategoryVisibility($categoryId: ID!, $visible: Boolean!) {\n    updateWareCategory(id: $categoryId, wareCategory: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useMMenuCategoryVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >(MMenuCategoryVisibilityDocument, baseOptions)\n}\n\nexport const MMenuStockQuantityDocument = gql`\n  mutation MMenuStockQuantity($stockItem: ID!, $quantityChange: Float!) {\n    changeAmountStockItem(id: $stockItem, amountOffset: $quantityChange) {\n      id\n      quantity\n    }\n  }\n`\n\nexport function useMMenuStockQuantity(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >(MMenuStockQuantityDocument, baseOptions)\n}\n\nexport const QMenuCategoryDocument = gql`\n  query QMenuCategory($categoryId: ID!) {\n    category: wareCategory(id: $categoryId) {\n      ...FMenuCategory\n    }\n  }\n\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport function useQMenuCategory(\n  variables?: QMenuCategoryVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryQuery, QMenuCategoryVariables>(\n    QMenuCategoryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuCategoryFilterDocument = gql`\n  query QMenuCategoryFilter($branchId: ID!) {\n    categories: wareCategories(companyBranch: $branchId) {\n      id\n      nameLabel\n      countRecipes\n      categoryType: wareCategoryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useQMenuCategoryFilter(\n  variables?: QMenuCategoryFilterVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryFilterVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryFilterQuery, QMenuCategoryFilterVariables>(\n    QMenuCategoryFilterDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuCategoryListDocument = gql`\n  query QMenuCategoryList(\n    $branchId: ID!\n    $categoryType: WareCategoryTypeEnum!\n  ) {\n    categories: wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: $categoryType\n    ) {\n      ...FMenuCategoryListItem\n    }\n  }\n\n  ${FMenuCategoryListItemFragmentDoc}\n`\n\nexport function useQMenuCategoryList(\n  variables?: QMenuCategoryListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryListVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryListQuery, QMenuCategoryListVariables>(\n    QMenuCategoryListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuCategoryOriginsDocument = gql`\n  query QMenuCategoryOrigins {\n    origins: orderOriginCategories {\n      enum\n      code\n    }\n  }\n`\n\nexport function useQMenuCategoryOrigins(\n  variables?: QMenuCategoryOriginsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryOriginsVariables>,\n) {\n  return Hooks.useQuery<\n    QMenuCategoryOriginsQuery,\n    QMenuCategoryOriginsVariables\n  >(QMenuCategoryOriginsDocument, variables, baseOptions)\n}\n\nexport const QMenuGuideDownloadDocument = gql`\n  query QMenuGuideDownload($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      foodMenuUrl\n    }\n  }\n`\n\nexport function useQMenuGuideDownload(\n  variables?: QMenuGuideDownloadVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuGuideDownloadVariables>,\n) {\n  return Hooks.useQuery<QMenuGuideDownloadQuery, QMenuGuideDownloadVariables>(\n    QMenuGuideDownloadDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuRecipeListDocument = gql`\n  query QMenuRecipeList(\n    $branchId: ID!\n    $categoryId: ID\n    $categoryType: WareCategoryTypeEnum\n  ) {\n    recipes(\n      companyBranch: $branchId\n      wareCategory: $categoryId\n      wareCategoryType: $categoryType\n    ) {\n      ...FMenuRecipe\n    }\n  }\n\n  ${FMenuRecipeFragmentDoc}\n`\n\nexport function useQMenuRecipeList(\n  variables?: QMenuRecipeListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuRecipeListVariables>,\n) {\n  return Hooks.useQuery<QMenuRecipeListQuery, QMenuRecipeListVariables>(\n    QMenuRecipeListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuStockDepositDocument = gql`\n  query QMenuStockDeposit($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      id\n      code\n      plu\n      nameLabel: label\n      note\n      quantity\n      wareUnit {\n        ...FMenuWareUnit\n      }\n    }\n  }\n\n  ${FMenuWareUnitFragmentDoc}\n`\n\nexport function useQMenuStockDeposit(\n  variables?: QMenuStockDepositVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuStockDepositVariables>,\n) {\n  return Hooks.useQuery<QMenuStockDepositQuery, QMenuStockDepositVariables>(\n    QMenuStockDepositDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuStockListDocument = gql`\n  query QMenuStockList($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useQMenuStockList(\n  variables?: QMenuStockListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuStockListVariables>,\n) {\n  return Hooks.useQuery<QMenuStockListQuery, QMenuStockListVariables>(\n    QMenuStockListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStockRecipesDocument = gql`\n  query QStockRecipes($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      ingredients {\n        id\n        recipe {\n          id\n          nameLabel\n          descriptionLabel\n          recipeType: wareCategoryType {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useQStockRecipes(\n  variables?: QStockRecipesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStockRecipesVariables>,\n) {\n  return Hooks.useQuery<QStockRecipesQuery, QStockRecipesVariables>(\n    QStockRecipesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MBranchDefaultTimeDocument = gql`\n  mutation MBranchDefaultTime(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $time: Int!\n  ) {\n    updateDefaultOrderProcessTime(\n      companyBranch: $branchId\n      deliveryType: $deliveryType\n      defaultTime: $time\n    ) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useMBranchDefaultTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >(MBranchDefaultTimeDocument, baseOptions)\n}\n\nexport const MOrderChangeToPickupDocument = gql`\n  mutation MOrderChangeToPickup($orderId: ID!) {\n    updateOrderDeliveryToPickup(id: $orderId) {\n      id\n      deliveryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMOrderChangeToPickup(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderChangeToPickupMutation,\n    MOrderChangeToPickupVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderChangeToPickupMutation,\n    MOrderChangeToPickupVariables\n  >(MOrderChangeToPickupDocument, baseOptions)\n}\n\nexport const MOrderTimeNotificationDocument = gql`\n  mutation MOrderTimeNotification($orderId: ID!, $minutes: Int!) {\n    orderNotifyCustomer(id: $orderId, minutes: $minutes) {\n      id\n      deliverAt\n    }\n  }\n`\n\nexport function useMOrderTimeNotification(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderTimeNotificationMutation,\n    MOrderTimeNotificationVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderTimeNotificationMutation,\n    MOrderTimeNotificationVariables\n  >(MOrderTimeNotificationDocument, baseOptions)\n}\n\nexport const MRemoveOrderDriverDocument = gql`\n  mutation MRemoveOrderDriver($orderDriverId: ID!) {\n    destroyUserDeliveringOrder(id: $orderDriverId) {\n      order {\n        ...FOrderDriver\n      }\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useMRemoveOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderDriverMutation,\n    MRemoveOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderDriverMutation,\n    MRemoveOrderDriverVariables\n  >(MRemoveOrderDriverDocument, baseOptions)\n}\n\nexport const MSelectOrderDriverDocument = gql`\n  mutation MSelectOrderDriver($driverId: ID!, $orderId: ID!) {\n    result: createUserDeliveringOrder(user: $driverId, order: $orderId) {\n      order {\n        ...FOrderDriver\n      }\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useMSelectOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSelectOrderDriverMutation,\n    MSelectOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSelectOrderDriverMutation,\n    MSelectOrderDriverVariables\n  >(MSelectOrderDriverDocument, baseOptions)\n}\n\nexport const QBranchDefeaultTimesDocument = gql`\n  query QBranchDefeaultTimes($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useQBranchDefeaultTimes(\n  variables?: QBranchDefeaultTimesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QBranchDefeaultTimesVariables>,\n) {\n  return Hooks.useQuery<\n    QBranchDefeaultTimesQuery,\n    QBranchDefeaultTimesVariables\n  >(QBranchDefeaultTimesDocument, variables, baseOptions)\n}\n\nexport const QOrderDetailDocument = gql`\n  query QOrderDetail($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      createdAt\n      deliverAt\n      delayedDeliveryTime\n      companyBranch {\n        id\n      }\n      customer {\n        emails {\n          ...FEmail\n        }\n        phones {\n          ...FPhone\n        }\n      }\n      customerOrdersCountCurrent\n      customerOrdersCountTotal\n      note\n      previousNote\n      allAppliedRules\n      items {\n        ...FOrderDetailWare\n        sidedishes: sideDishes {\n          ...FOrderDetailWare\n        }\n      }\n      orderOrigin {\n        code\n        enum\n      }\n      ...FOrderTotals\n      ...FOrderTiming\n      ...FOrderDriver\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n  ${FOrderDetailWareFragmentDoc}\n  ${FOrderTotalsFragmentDoc}\n  ${FOrderTimingFragmentDoc}\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useQOrderDetail(\n  variables?: QOrderDetailVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderDetailVariables>,\n) {\n  return Hooks.useQuery<QOrderDetailQuery, QOrderDetailVariables>(\n    QOrderDetailDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderDriversDocument = gql`\n  query QOrderDrivers($orderId: ID!, $branchId: [ID!]!) {\n    order(id: $orderId) {\n      ...FOrderDriver\n    }\n    drivers(companyBranches: $branchId, onlyAvailable: true) {\n      ...FDriver\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n  ${FDriverFragmentDoc}\n`\n\nexport function useQOrderDrivers(\n  variables?: QOrderDriversVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderDriversVariables>,\n) {\n  return Hooks.useQuery<QOrderDriversQuery, QOrderDriversVariables>(\n    QOrderDriversDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderListDocument = gql`\n  query QOrderList($branches: [ID!], $categories: [OrderStateCategoryEnum!]) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      id\n      ...FOrderStateCategory\n      ...FOrderTicker\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTickerFragmentDoc}\n`\n\nexport function useQOrderList(\n  variables?: QOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderListVariables>,\n) {\n  return Hooks.useQuery<QOrderListQuery, QOrderListVariables>(\n    QOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderListCategoriesDocument = gql`\n  query QOrderListCategories {\n    categories: orderStateCategories {\n      label: code\n      enum\n    }\n  }\n`\n\nexport function useQOrderListCategories(\n  variables?: QOrderListCategoriesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderListCategoriesVariables>,\n) {\n  return Hooks.useQuery<\n    QOrderListCategoriesQuery,\n    QOrderListCategoriesVariables\n  >(QOrderListCategoriesDocument, variables, baseOptions)\n}\n\nexport const QOrderMapDeliveriesDocument = gql`\n  query QOrderMapDeliveries($branches: [ID!]!) {\n    deliveries: drivers(companyBranches: $branches, onlyAvailable: true) {\n      ...FOrderMapDelivery\n    }\n  }\n\n  ${FOrderMapDeliveryFragmentDoc}\n`\n\nexport function useQOrderMapDeliveries(\n  variables?: QOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMapDeliveriesVariables>,\n) {\n  return Hooks.useQuery<QOrderMapDeliveriesQuery, QOrderMapDeliveriesVariables>(\n    QOrderMapDeliveriesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderMapOrdersDocument = gql`\n  query QOrderMapOrders(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      ...FOrderMapOrder\n    }\n  }\n\n  ${FOrderMapOrderFragmentDoc}\n`\n\nexport function useQOrderMapOrders(\n  variables?: QOrderMapOrdersVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMapOrdersVariables>,\n) {\n  return Hooks.useQuery<QOrderMapOrdersQuery, QOrderMapOrdersVariables>(\n    QOrderMapOrdersDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderStateDocument = gql`\n  query QOrderState($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      deliveryType {\n        enum\n      }\n      isCancelable\n      isPriority\n      ...FOrderStateCategory\n    }\n    companyBranch(id: $branchId) {\n      id\n      allowedCategories\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useQOrderState(\n  variables?: QOrderStateVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderStateVariables>,\n) {\n  return Hooks.useQuery<QOrderStateQuery, QOrderStateVariables>(\n    QOrderStateDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderListDocument = gql`\n  subscription SOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        id\n        ...FOrderStateCategory\n        ...FOrderTicker\n      }\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTickerFragmentDoc}\n`\n\nexport function useSOrderList(\n  variables?: SOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderListSubscription,\n    SOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderListSubscription, SOrderListVariables>(\n    SOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderMapDeliveriesDocument = gql`\n  subscription SOrderMapDeliveries($branches: [ID!]!) {\n    update: updatedTransportationDeviceUser(companyBranches: $branches) {\n      device: transportationDeviceUser {\n        ...FOrderMapDevice\n        user {\n          ...FOrderMapDriver\n        }\n      }\n    }\n  }\n\n  ${FOrderMapDeviceFragmentDoc}\n  ${FOrderMapDriverFragmentDoc}\n`\n\nexport function useSOrderMapDeliveries(\n  variables?: SOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >(SOrderMapDeliveriesDocument, variables, baseOptions)\n}\n\nexport const SOrderMapOrdersDocument = gql`\n  subscription SOrderMapOrders(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        ...FOrderMapOrder\n      }\n    }\n  }\n\n  ${FOrderMapOrderFragmentDoc}\n`\n\nexport function useSOrderMapOrders(\n  variables?: SOrderMapOrdersVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderMapOrdersSubscription,\n    SOrderMapOrdersVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrderMapOrdersSubscription,\n    SOrderMapOrdersVariables\n  >(SOrderMapOrdersDocument, variables, baseOptions)\n}\n\nexport const MFinancialReportCreateDocument = gql`\n  mutation MFinancialReportCreate($branchId: ID!) {\n    result: createFinancialReport(companyBranchId: $branchId) {\n      id\n    }\n  }\n`\n\nexport function useMFinancialReportCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MFinancialReportCreateMutation,\n    MFinancialReportCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MFinancialReportCreateMutation,\n    MFinancialReportCreateVariables\n  >(MFinancialReportCreateDocument, baseOptions)\n}\n\nexport const QAllDriversDocument = gql`\n  query QAllDrivers($branches: [ID!]!) {\n    drivers(companyBranches: $branches, onlyAvailable: false) {\n      ...FDriver\n    }\n  }\n\n  ${FDriverFragmentDoc}\n`\n\nexport function useQAllDrivers(\n  variables?: QAllDriversVariables,\n  baseOptions?: Hooks.QueryHookOptions<QAllDriversVariables>,\n) {\n  return Hooks.useQuery<QAllDriversQuery, QAllDriversVariables>(\n    QAllDriversDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QClosureHistoryDocument = gql`\n  query QClosureHistory($branchId: ID!, $dateFrom: Date!, $dateTo: Date!) {\n    history: financialReports(\n      companyBranchId: $branchId\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n    ) {\n      id\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useQClosureHistory(\n  variables?: QClosureHistoryVariables,\n  baseOptions?: Hooks.QueryHookOptions<QClosureHistoryVariables>,\n) {\n  return Hooks.useQuery<QClosureHistoryQuery, QClosureHistoryVariables>(\n    QClosureHistoryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QClosureReportDocument = gql`\n  query QClosureReport($branchId: ID!, $reportId: ID!, $showReport: Boolean!) {\n    lastReport: lastFinancialReport(companyBranchId: $branchId)\n      @skip(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n    report: financialReport(report: $reportId) @include(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useQClosureReport(\n  variables?: QClosureReportVariables,\n  baseOptions?: Hooks.QueryHookOptions<QClosureReportVariables>,\n) {\n  return Hooks.useQuery<QClosureReportQuery, QClosureReportVariables>(\n    QClosureReportDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsDailyDocument = gql`\n  query QStatsDaily($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      category: categoryStatisticsPlain\n      daily: dailyStatisticsPlain\n      delivery: deliveryStatisticsPlain\n      drivers: driversStatisticsPlain\n    }\n  }\n`\n\nexport function useQStatsDaily(\n  variables?: QStatsDailyVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsDailyVariables>,\n) {\n  return Hooks.useQuery<QStatsDailyQuery, QStatsDailyVariables>(\n    QStatsDailyDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsOrdersDocument = gql`\n  query QStatsOrders($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      finishedOrders {\n        fees {\n          ...FPriceWithCurrency\n        }\n        onlinePayments {\n          ...FPriceWithCurrency\n        }\n        total {\n          ...FPriceWithCurrency\n        }\n        finishedCount: ordersCount\n        cancelledCount: ordersCanceledCount\n      }\n      orderStatisticsPlain\n    }\n  }\n\n  ${FPriceWithCurrencyFragmentDoc}\n`\n\nexport function useQStatsOrders(\n  variables?: QStatsOrdersVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersQuery, QStatsOrdersVariables>(\n    QStatsOrdersDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsOrdersCountsDocument = gql`\n  query QStatsOrdersCounts($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      counts: finishedOrders {\n        finished: ordersCount\n        cancelled: ordersCanceledCount\n      }\n    }\n  }\n`\n\nexport function useQStatsOrdersCounts(\n  variables?: QStatsOrdersCountsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersCountsVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersCountsQuery, QStatsOrdersCountsVariables>(\n    QStatsOrdersCountsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsOrdersListDocument = gql`\n  query QStatsOrdersList(\n    $filter: InputStatisticCreate!\n    $pagination: InputPaginationParams\n  ) {\n    stats: statistics(statisticsInput: $filter) {\n      orders: finishedOrders {\n        list: orders(includeCanceled: true, pagination: $pagination) {\n          ...FOrderTicker\n          ...FOrderStateCategory\n        }\n      }\n    }\n  }\n\n  ${FOrderTickerFragmentDoc}\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useQStatsOrdersList(\n  variables?: QStatsOrdersListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersListVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersListQuery, QStatsOrdersListVariables>(\n    QStatsOrdersListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MUserMenuLanguageDocument = gql`\n  mutation MUserMenuLanguage($userId: ID!, $lang: LanguageEnum!) {\n    updateUser(id: $userId, user: { language: $lang }) {\n      id\n      language {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMUserMenuLanguage(\n  baseOptions?: Hooks.MutationHookOptions<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >(MUserMenuLanguageDocument, baseOptions)\n}\n\nexport const QUserMenuLanguagesDocument = gql`\n  query QUserMenuLanguages {\n    languages {\n      code\n      enum\n      rawCode\n    }\n  }\n`\n\nexport function useQUserMenuLanguages(\n  variables?: QUserMenuLanguagesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QUserMenuLanguagesVariables>,\n) {\n  return Hooks.useQuery<QUserMenuLanguagesQuery, QUserMenuLanguagesVariables>(\n    QUserMenuLanguagesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MZoneUpdateDocument = gql`\n  mutation MZoneUpdate($zoneId: ID!, $update: InputZoneUpdate!) {\n    updateZone(id: $zoneId, zone: $update) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useMZoneUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MZoneUpdateMutation,\n    MZoneUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<MZoneUpdateMutation, MZoneUpdateVariables>(\n    MZoneUpdateDocument,\n    baseOptions,\n  )\n}\n\n// Generated in 2019-06-03T17:16:45+02:00\n","import moment from 'moment'\n\nexport async function changeMomentLocale(lang: string) {\n  if (lang === 'en') {\n    moment.locale(lang)\n    return\n  }\n  const locale = await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"moment-[index]\" */\n    `moment/locale/${lang}`\n  )\n  moment.updateLocale(lang, locale)\n}\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { useReaction } from '@speedlo/hooks'\nimport { DETECTORS, LocaleResolver, TRANSFORMERS } from 'locales-detector'\nimport React from 'react'\n\nimport { useRoot } from './atoms/RootProvider'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\nimport { changeMomentLocale } from './locale/moment'\nimport { changeNumeralLocale } from './locale/numeral'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC = ({ children }) => {\n  const { user } = useRoot()\n  const [, forceUpdate] = React.useState(0)\n\n  useReaction(\n    () => user.language,\n    async (lang = detectLanguage()) => {\n      await setupLanguage(lang)\n      user.log('setup for language %s done', lang)\n      forceUpdate(i => i + 1)\n    },\n  )\n\n  return (\n    <I18nProvider i18n={i18n}>{React.Children.only(children)}</I18nProvider>\n  )\n}\n\nexport function detectLanguage() {\n  const resolver = new LocaleResolver(\n    [new DETECTORS.NavigatorDetector()],\n    [new TRANSFORMERS.LanguageOnlyTransformer()],\n  )\n  const languages = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nexport async function setupLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await Promise.all([\n    loadCatalog(lang),\n    changeNumeralLocale(lang),\n    changeMomentLocale(lang),\n  ])\n  i18n.activate(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","import debug from 'debug'\n\n// @ts-ignore\ndebug.useColors = () => !process.env.REACT_APP_STAGE\n\nexport const logMain = debug('main')\nexport const logDebug = debug('debug')\nexport const logError = debug('error')\nexport const logAuth = debug('auth')\nexport const logRouting = debug('routing')\nexport const logPersistence = debug('persistence')\nexport const logBootstrap = debug('bootstrap')\nexport const logAccess = debug('access')\nexport const logGraph = debug('graph')\nexport const logForm = debug('form')\nexport const logSentry = debug('sentry')\nexport const logLang = debug('lang')\nexport const logUpdate = debug('update')\n// tslint:disable-next-line:no-console\nexport const logTest = console.log\n","import numeral from 'numeral'\n\nexport async function changeNumeralLocale(lang: string) {\n  if (lang === 'en') {\n    numeral.locale(lang)\n    return\n  }\n  await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"numeral-[index]\" */\n    `numeral/locales/${lang}`\n  )\n  numeral.locale(lang)\n}\n\nconst numberRx = /[\\d\\.,\\s]+/\n\nexport function validateNumber(input: string) {\n  return numberRx.test(input)\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GSpecificBusinessHours } from '../../../graph/types'\n\nexport const SpecificBusinessHourFragment = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const QuerySpecificBusinessHours = buildQuery<\n  GSpecificBusinessHours.Query,\n  GSpecificBusinessHours.Variables\n>(gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`)\n","import gql from 'graphql-tag'\n\nimport { FGeoPointFragmentDoc } from '../../graph/generated'\n\nexport const ZoneLocationQuery = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...FGeoPoint\n        }\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n\nexport const ZoneBranchLocationQuery = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n\nexport const ZoneColorsQuery = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n","import React from 'react'\nimport { Route, RouteComponentProps, RouteProps } from 'react-router-dom'\n\ninterface IProps<Params> extends Omit<RouteProps, 'render' | 'children'> {\n  component: React.ComponentType<RouteComponentProps<Params>>\n}\n\nexport function LazyRoute<Params = {}>({\n  component: Component,\n  ...props\n}: IProps<Params>) {\n  return (\n    <Route {...props} render={routeProps => <Component {...routeProps} />} />\n  )\n}\n","import { addSeconds, differenceInMilliseconds } from 'date-fns'\nimport { Component } from 'react'\n\ninterface IRenderProps {\n  isActive: boolean\n  nextLoop(): void\n}\n\ninterface IProps {\n  intervalSec: number\n  enabled?: boolean\n  render(props: IRenderProps): ReactNode\n}\n\ninterface IState {\n  isActive: boolean\n  nextTime: Date\n}\n\nexport class IntervalRender extends Component<IProps, IState> {\n  state: IState = { isActive: false, nextTime: this.getNextTime() }\n  timer = 0\n  componentDidMount() {\n    this.executeTimer()\n  }\n  componentDidUpdate() {\n    this.executeTimer()\n  }\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer)\n    }\n  }\n  getNextTime() {\n    return addSeconds(new Date(), this.props.intervalSec)\n  }\n  executeTimer = () => {\n    if (this.timer) {\n      clearTimeout(this.timer)\n      this.timer = 0\n    }\n    if (this.props.enabled === false) {\n      return\n    }\n    const timeMs = differenceInMilliseconds(this.state.nextTime, new Date())\n    // @ts-ignore (setTimeout returning NodeJS.Timer) for some weird reason\n    this.timer = setTimeout(this.activate, timeMs)\n  }\n  activate = () => {\n    if (this.props.enabled !== false) {\n      this.setState({\n        isActive: true,\n        nextTime: this.getNextTime(),\n      })\n    }\n  }\n  deactivate = () => {\n    this.setState({ isActive: false })\n    this.executeTimer()\n  }\n  render() {\n    const { isActive } = this.state\n    return this.props.render({\n      isActive,\n      nextLoop: this.deactivate,\n    })\n  }\n}\n","import React from 'react'\nimport Sound from 'react-sound'\n\nimport { logMain } from '../helpers/logger'\nimport { IntervalRender } from './IntervalRender'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {\n  intervalSec: number\n  soundUrl: string\n  shouldPlay?: boolean\n  skipEnableChecks?: boolean\n}\n\nexport const SoundPlayInterval: React.FC<IProps> = ({\n  intervalSec,\n  soundUrl,\n  shouldPlay = true,\n  skipEnableChecks = false,\n}) => (\n  <WithRoot\n    observe={true}\n    render={({ config, user }) => {\n      if (!skipEnableChecks) {\n        if (!config.soundEnabled) {\n          logMain('sound is disabled')\n          return null\n        }\n        if (!user.soundEnabled) {\n          logMain('sound not enabled by user')\n          return null\n        }\n      }\n      logMain('sound play status: %s', shouldPlay)\n      return (\n        <IntervalRender\n          intervalSec={intervalSec}\n          enabled={shouldPlay}\n          render={({ isActive, nextLoop }) => (\n            <Sound\n              url={soundUrl}\n              playStatus={isActive ? 'PLAYING' : 'STOPPED'}\n              onFinishedPlaying={nextLoop}\n              loop={false}\n              autoLoad={true}\n              volume={user.soundVolume}\n            />\n          )}\n        />\n      )\n    }}\n  />\n)\n","module.exports = __webpack_public_path__ + \"static/media/connectionWarning.ac6fe03b.mp3\";","import { ISetDidChange, Lambda, observable } from 'mobx'\nimport { getParent, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { scroller } from 'react-scroll'\n\nimport { OrderStateCategoryEnum } from '../../../graph/generated'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TOrderModel } from './OrderModel'\n\nexport const OrderListModel = BaseModel.named('OrderList')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    collapsedCategories: types.optional(types.array(types.string), [\n      OrderStateCategoryEnum.Finished,\n    ]),\n  })\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length ? Array.from(self.branches) : []\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n    get isSingleBranchSelected() {\n      return self.branches.length === 1\n    },\n    get firstBranchId() {\n      if (self.branches.length === 1) {\n        return self.branches[0]\n      }\n      return null\n    },\n    get orderMap() {\n      return getParent<TOrderModel>(self).map\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.branches.clear()\n    },\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n  }))\n  .extend(self => {\n    const detailOpen = observable.set<ID>()\n\n    return {\n      views: {\n        isOrderDetailOpen(orderId: ID) {\n          return detailOpen.has(orderId)\n        },\n        isCategoryCollapsed(categoryCode: OrderStateCategoryEnum) {\n          return self.collapsedCategories.includes(categoryCode)\n        },\n      },\n      actions: {\n        toggleOrderDetail(orderId: ID) {\n          if (detailOpen.has(orderId)) {\n            detailOpen.delete(orderId)\n          } else {\n            detailOpen.add(orderId)\n          }\n        },\n        toggleCategoryCollapse(category: OrderStateCategoryEnum) {\n          const index = self.collapsedCategories.indexOf(category)\n          if (index >= 0) {\n            self.collapsedCategories.splice(index, 1)\n          } else {\n            self.collapsedCategories.push(category)\n          }\n        },\n        focusOrderDetail(orderId: ID) {\n          if (!detailOpen.has(orderId)) {\n            detailOpen.add(orderId)\n          }\n          setImmediate(() => {\n            scroller.scrollTo(`order-${orderId}`, {\n              smooth: 'easeInOutQuart',\n              containerId: 'order-list',\n              absolute: true,\n              offset: -140,\n            })\n          })\n        },\n        observerOrderDetail: detailOpen.observe.bind(detailOpen) as (\n          listener: (changes: ISetDidChange<ID>) => void,\n        ) => Lambda,\n      },\n    }\n  })\n\nexport interface TOrderListModel extends Instance<typeof OrderListModel> {}\nexport interface TOrderListModelProps\n  extends SnapshotIn<typeof OrderListModel> {}\n","module.exports = __webpack_public_path__ + \"static/media/loader.533cace4.gif\";","module.exports = __webpack_public_path__ + \"static/media/bg_antracit.edb33205.jpg\";","// @ts-ignore temporary before figuring out a logging solution that works in prod\nwindow.localStorage.setItem('debug', '*,-sockjs*')\n","var map = {\n\t\"./af\": [\n\t\t616,\n\t\t4\n\t],\n\t\"./af.js\": [\n\t\t616,\n\t\t4\n\t],\n\t\"./ar\": [\n\t\t623,\n\t\t27\n\t],\n\t\"./ar-dz\": [\n\t\t617,\n\t\t60\n\t],\n\t\"./ar-dz.js\": [\n\t\t617,\n\t\t60\n\t],\n\t\"./ar-kw\": [\n\t\t618,\n\t\t98\n\t],\n\t\"./ar-kw.js\": [\n\t\t618,\n\t\t98\n\t],\n\t\"./ar-ly\": [\n\t\t619,\n\t\t109\n\t],\n\t\"./ar-ly.js\": [\n\t\t619,\n\t\t109\n\t],\n\t\"./ar-ma\": [\n\t\t620,\n\t\t120\n\t],\n\t\"./ar-ma.js\": [\n\t\t620,\n\t\t120\n\t],\n\t\"./ar-sa\": [\n\t\t621,\n\t\t5\n\t],\n\t\"./ar-sa.js\": [\n\t\t621,\n\t\t5\n\t],\n\t\"./ar-tn\": [\n\t\t622,\n\t\t16\n\t],\n\t\"./ar-tn.js\": [\n\t\t622,\n\t\t16\n\t],\n\t\"./ar.js\": [\n\t\t623,\n\t\t27\n\t],\n\t\"./az\": [\n\t\t624,\n\t\t38\n\t],\n\t\"./az.js\": [\n\t\t624,\n\t\t38\n\t],\n\t\"./be\": [\n\t\t625,\n\t\t49\n\t],\n\t\"./be.js\": [\n\t\t625,\n\t\t49\n\t],\n\t\"./bg\": [\n\t\t626,\n\t\t61\n\t],\n\t\"./bg.js\": [\n\t\t626,\n\t\t61\n\t],\n\t\"./bm\": [\n\t\t627,\n\t\t72\n\t],\n\t\"./bm.js\": [\n\t\t627,\n\t\t72\n\t],\n\t\"./bn\": [\n\t\t628,\n\t\t83\n\t],\n\t\"./bn.js\": [\n\t\t628,\n\t\t83\n\t],\n\t\"./bo\": [\n\t\t629,\n\t\t91\n\t],\n\t\"./bo.js\": [\n\t\t629,\n\t\t91\n\t],\n\t\"./br\": [\n\t\t630,\n\t\t92\n\t],\n\t\"./br.js\": [\n\t\t630,\n\t\t92\n\t],\n\t\"./bs\": [\n\t\t631,\n\t\t93\n\t],\n\t\"./bs.js\": [\n\t\t631,\n\t\t93\n\t],\n\t\"./ca\": [\n\t\t632,\n\t\t94\n\t],\n\t\"./ca.js\": [\n\t\t632,\n\t\t94\n\t],\n\t\"./cs\": [\n\t\t633,\n\t\t95\n\t],\n\t\"./cs.js\": [\n\t\t633,\n\t\t95\n\t],\n\t\"./cv\": [\n\t\t634,\n\t\t96\n\t],\n\t\"./cv.js\": [\n\t\t634,\n\t\t96\n\t],\n\t\"./cy\": [\n\t\t635,\n\t\t97\n\t],\n\t\"./cy.js\": [\n\t\t635,\n\t\t97\n\t],\n\t\"./da\": [\n\t\t636,\n\t\t99\n\t],\n\t\"./da.js\": [\n\t\t636,\n\t\t99\n\t],\n\t\"./de\": [\n\t\t639,\n\t\t102\n\t],\n\t\"./de-at\": [\n\t\t637,\n\t\t100\n\t],\n\t\"./de-at.js\": [\n\t\t637,\n\t\t100\n\t],\n\t\"./de-ch\": [\n\t\t638,\n\t\t101\n\t],\n\t\"./de-ch.js\": [\n\t\t638,\n\t\t101\n\t],\n\t\"./de.js\": [\n\t\t639,\n\t\t102\n\t],\n\t\"./dv\": [\n\t\t640,\n\t\t103\n\t],\n\t\"./dv.js\": [\n\t\t640,\n\t\t103\n\t],\n\t\"./el\": [\n\t\t641,\n\t\t104\n\t],\n\t\"./el.js\": [\n\t\t641,\n\t\t104\n\t],\n\t\"./en-SG\": [\n\t\t642,\n\t\t105\n\t],\n\t\"./en-SG.js\": [\n\t\t642,\n\t\t105\n\t],\n\t\"./en-au\": [\n\t\t643,\n\t\t106\n\t],\n\t\"./en-au.js\": [\n\t\t643,\n\t\t106\n\t],\n\t\"./en-ca\": [\n\t\t644,\n\t\t107\n\t],\n\t\"./en-ca.js\": [\n\t\t644,\n\t\t107\n\t],\n\t\"./en-gb\": [\n\t\t645,\n\t\t108\n\t],\n\t\"./en-gb.js\": [\n\t\t645,\n\t\t108\n\t],\n\t\"./en-ie\": [\n\t\t646,\n\t\t110\n\t],\n\t\"./en-ie.js\": [\n\t\t646,\n\t\t110\n\t],\n\t\"./en-il\": [\n\t\t647,\n\t\t111\n\t],\n\t\"./en-il.js\": [\n\t\t647,\n\t\t111\n\t],\n\t\"./en-nz\": [\n\t\t648,\n\t\t112\n\t],\n\t\"./en-nz.js\": [\n\t\t648,\n\t\t112\n\t],\n\t\"./eo\": [\n\t\t649,\n\t\t113\n\t],\n\t\"./eo.js\": [\n\t\t649,\n\t\t113\n\t],\n\t\"./es\": [\n\t\t652,\n\t\t116\n\t],\n\t\"./es-do\": [\n\t\t650,\n\t\t114\n\t],\n\t\"./es-do.js\": [\n\t\t650,\n\t\t114\n\t],\n\t\"./es-us\": [\n\t\t651,\n\t\t115\n\t],\n\t\"./es-us.js\": [\n\t\t651,\n\t\t115\n\t],\n\t\"./es.js\": [\n\t\t652,\n\t\t116\n\t],\n\t\"./et\": [\n\t\t653,\n\t\t117\n\t],\n\t\"./et.js\": [\n\t\t653,\n\t\t117\n\t],\n\t\"./eu\": [\n\t\t654,\n\t\t118\n\t],\n\t\"./eu.js\": [\n\t\t654,\n\t\t118\n\t],\n\t\"./fa\": [\n\t\t655,\n\t\t119\n\t],\n\t\"./fa.js\": [\n\t\t655,\n\t\t119\n\t],\n\t\"./fi\": [\n\t\t656,\n\t\t121\n\t],\n\t\"./fi.js\": [\n\t\t656,\n\t\t121\n\t],\n\t\"./fo\": [\n\t\t657,\n\t\t122\n\t],\n\t\"./fo.js\": [\n\t\t657,\n\t\t122\n\t],\n\t\"./fr\": [\n\t\t660,\n\t\t125\n\t],\n\t\"./fr-ca\": [\n\t\t658,\n\t\t123\n\t],\n\t\"./fr-ca.js\": [\n\t\t658,\n\t\t123\n\t],\n\t\"./fr-ch\": [\n\t\t659,\n\t\t124\n\t],\n\t\"./fr-ch.js\": [\n\t\t659,\n\t\t124\n\t],\n\t\"./fr.js\": [\n\t\t660,\n\t\t125\n\t],\n\t\"./fy\": [\n\t\t661,\n\t\t126\n\t],\n\t\"./fy.js\": [\n\t\t661,\n\t\t126\n\t],\n\t\"./ga\": [\n\t\t662,\n\t\t127\n\t],\n\t\"./ga.js\": [\n\t\t662,\n\t\t127\n\t],\n\t\"./gd\": [\n\t\t663,\n\t\t128\n\t],\n\t\"./gd.js\": [\n\t\t663,\n\t\t128\n\t],\n\t\"./gl\": [\n\t\t664,\n\t\t129\n\t],\n\t\"./gl.js\": [\n\t\t664,\n\t\t129\n\t],\n\t\"./gom-latn\": [\n\t\t665,\n\t\t130\n\t],\n\t\"./gom-latn.js\": [\n\t\t665,\n\t\t130\n\t],\n\t\"./gu\": [\n\t\t666,\n\t\t6\n\t],\n\t\"./gu.js\": [\n\t\t666,\n\t\t6\n\t],\n\t\"./he\": [\n\t\t667,\n\t\t7\n\t],\n\t\"./he.js\": [\n\t\t667,\n\t\t7\n\t],\n\t\"./hi\": [\n\t\t668,\n\t\t8\n\t],\n\t\"./hi.js\": [\n\t\t668,\n\t\t8\n\t],\n\t\"./hr\": [\n\t\t669,\n\t\t9\n\t],\n\t\"./hr.js\": [\n\t\t669,\n\t\t9\n\t],\n\t\"./hu\": [\n\t\t670,\n\t\t10\n\t],\n\t\"./hu.js\": [\n\t\t670,\n\t\t10\n\t],\n\t\"./hy-am\": [\n\t\t671,\n\t\t11\n\t],\n\t\"./hy-am.js\": [\n\t\t671,\n\t\t11\n\t],\n\t\"./id\": [\n\t\t672,\n\t\t12\n\t],\n\t\"./id.js\": [\n\t\t672,\n\t\t12\n\t],\n\t\"./is\": [\n\t\t673,\n\t\t13\n\t],\n\t\"./is.js\": [\n\t\t673,\n\t\t13\n\t],\n\t\"./it\": [\n\t\t675,\n\t\t15\n\t],\n\t\"./it-ch\": [\n\t\t674,\n\t\t14\n\t],\n\t\"./it-ch.js\": [\n\t\t674,\n\t\t14\n\t],\n\t\"./it.js\": [\n\t\t675,\n\t\t15\n\t],\n\t\"./ja\": [\n\t\t676,\n\t\t17\n\t],\n\t\"./ja.js\": [\n\t\t676,\n\t\t17\n\t],\n\t\"./jv\": [\n\t\t677,\n\t\t18\n\t],\n\t\"./jv.js\": [\n\t\t677,\n\t\t18\n\t],\n\t\"./ka\": [\n\t\t678,\n\t\t19\n\t],\n\t\"./ka.js\": [\n\t\t678,\n\t\t19\n\t],\n\t\"./kk\": [\n\t\t679,\n\t\t20\n\t],\n\t\"./kk.js\": [\n\t\t679,\n\t\t20\n\t],\n\t\"./km\": [\n\t\t680,\n\t\t21\n\t],\n\t\"./km.js\": [\n\t\t680,\n\t\t21\n\t],\n\t\"./kn\": [\n\t\t681,\n\t\t22\n\t],\n\t\"./kn.js\": [\n\t\t681,\n\t\t22\n\t],\n\t\"./ko\": [\n\t\t682,\n\t\t23\n\t],\n\t\"./ko.js\": [\n\t\t682,\n\t\t23\n\t],\n\t\"./ku\": [\n\t\t683,\n\t\t24\n\t],\n\t\"./ku.js\": [\n\t\t683,\n\t\t24\n\t],\n\t\"./ky\": [\n\t\t684,\n\t\t25\n\t],\n\t\"./ky.js\": [\n\t\t684,\n\t\t25\n\t],\n\t\"./lb\": [\n\t\t685,\n\t\t26\n\t],\n\t\"./lb.js\": [\n\t\t685,\n\t\t26\n\t],\n\t\"./lo\": [\n\t\t686,\n\t\t28\n\t],\n\t\"./lo.js\": [\n\t\t686,\n\t\t28\n\t],\n\t\"./lt\": [\n\t\t687,\n\t\t29\n\t],\n\t\"./lt.js\": [\n\t\t687,\n\t\t29\n\t],\n\t\"./lv\": [\n\t\t688,\n\t\t30\n\t],\n\t\"./lv.js\": [\n\t\t688,\n\t\t30\n\t],\n\t\"./me\": [\n\t\t689,\n\t\t31\n\t],\n\t\"./me.js\": [\n\t\t689,\n\t\t31\n\t],\n\t\"./mi\": [\n\t\t690,\n\t\t32\n\t],\n\t\"./mi.js\": [\n\t\t690,\n\t\t32\n\t],\n\t\"./mk\": [\n\t\t691,\n\t\t33\n\t],\n\t\"./mk.js\": [\n\t\t691,\n\t\t33\n\t],\n\t\"./ml\": [\n\t\t692,\n\t\t34\n\t],\n\t\"./ml.js\": [\n\t\t692,\n\t\t34\n\t],\n\t\"./mn\": [\n\t\t693,\n\t\t35\n\t],\n\t\"./mn.js\": [\n\t\t693,\n\t\t35\n\t],\n\t\"./mr\": [\n\t\t694,\n\t\t36\n\t],\n\t\"./mr.js\": [\n\t\t694,\n\t\t36\n\t],\n\t\"./ms\": [\n\t\t696,\n\t\t39\n\t],\n\t\"./ms-my\": [\n\t\t695,\n\t\t37\n\t],\n\t\"./ms-my.js\": [\n\t\t695,\n\t\t37\n\t],\n\t\"./ms.js\": [\n\t\t696,\n\t\t39\n\t],\n\t\"./mt\": [\n\t\t697,\n\t\t40\n\t],\n\t\"./mt.js\": [\n\t\t697,\n\t\t40\n\t],\n\t\"./my\": [\n\t\t698,\n\t\t41\n\t],\n\t\"./my.js\": [\n\t\t698,\n\t\t41\n\t],\n\t\"./nb\": [\n\t\t699,\n\t\t42\n\t],\n\t\"./nb.js\": [\n\t\t699,\n\t\t42\n\t],\n\t\"./ne\": [\n\t\t700,\n\t\t43\n\t],\n\t\"./ne.js\": [\n\t\t700,\n\t\t43\n\t],\n\t\"./nl\": [\n\t\t702,\n\t\t45\n\t],\n\t\"./nl-be\": [\n\t\t701,\n\t\t44\n\t],\n\t\"./nl-be.js\": [\n\t\t701,\n\t\t44\n\t],\n\t\"./nl.js\": [\n\t\t702,\n\t\t45\n\t],\n\t\"./nn\": [\n\t\t703,\n\t\t46\n\t],\n\t\"./nn.js\": [\n\t\t703,\n\t\t46\n\t],\n\t\"./pa-in\": [\n\t\t704,\n\t\t47\n\t],\n\t\"./pa-in.js\": [\n\t\t704,\n\t\t47\n\t],\n\t\"./pl\": [\n\t\t705,\n\t\t48\n\t],\n\t\"./pl.js\": [\n\t\t705,\n\t\t48\n\t],\n\t\"./pt\": [\n\t\t707,\n\t\t51\n\t],\n\t\"./pt-br\": [\n\t\t706,\n\t\t50\n\t],\n\t\"./pt-br.js\": [\n\t\t706,\n\t\t50\n\t],\n\t\"./pt.js\": [\n\t\t707,\n\t\t51\n\t],\n\t\"./ro\": [\n\t\t708,\n\t\t52\n\t],\n\t\"./ro.js\": [\n\t\t708,\n\t\t52\n\t],\n\t\"./ru\": [\n\t\t709,\n\t\t53\n\t],\n\t\"./ru.js\": [\n\t\t709,\n\t\t53\n\t],\n\t\"./sd\": [\n\t\t710,\n\t\t54\n\t],\n\t\"./sd.js\": [\n\t\t710,\n\t\t54\n\t],\n\t\"./se\": [\n\t\t711,\n\t\t55\n\t],\n\t\"./se.js\": [\n\t\t711,\n\t\t55\n\t],\n\t\"./si\": [\n\t\t712,\n\t\t56\n\t],\n\t\"./si.js\": [\n\t\t712,\n\t\t56\n\t],\n\t\"./sk\": [\n\t\t713,\n\t\t57\n\t],\n\t\"./sk.js\": [\n\t\t713,\n\t\t57\n\t],\n\t\"./sl\": [\n\t\t714,\n\t\t58\n\t],\n\t\"./sl.js\": [\n\t\t714,\n\t\t58\n\t],\n\t\"./sq\": [\n\t\t715,\n\t\t59\n\t],\n\t\"./sq.js\": [\n\t\t715,\n\t\t59\n\t],\n\t\"./sr\": [\n\t\t717,\n\t\t63\n\t],\n\t\"./sr-cyrl\": [\n\t\t716,\n\t\t62\n\t],\n\t\"./sr-cyrl.js\": [\n\t\t716,\n\t\t62\n\t],\n\t\"./sr.js\": [\n\t\t717,\n\t\t63\n\t],\n\t\"./ss\": [\n\t\t718,\n\t\t64\n\t],\n\t\"./ss.js\": [\n\t\t718,\n\t\t64\n\t],\n\t\"./sv\": [\n\t\t719,\n\t\t65\n\t],\n\t\"./sv.js\": [\n\t\t719,\n\t\t65\n\t],\n\t\"./sw\": [\n\t\t720,\n\t\t66\n\t],\n\t\"./sw.js\": [\n\t\t720,\n\t\t66\n\t],\n\t\"./ta\": [\n\t\t721,\n\t\t67\n\t],\n\t\"./ta.js\": [\n\t\t721,\n\t\t67\n\t],\n\t\"./te\": [\n\t\t722,\n\t\t68\n\t],\n\t\"./te.js\": [\n\t\t722,\n\t\t68\n\t],\n\t\"./tet\": [\n\t\t723,\n\t\t69\n\t],\n\t\"./tet.js\": [\n\t\t723,\n\t\t69\n\t],\n\t\"./tg\": [\n\t\t724,\n\t\t70\n\t],\n\t\"./tg.js\": [\n\t\t724,\n\t\t70\n\t],\n\t\"./th\": [\n\t\t725,\n\t\t71\n\t],\n\t\"./th.js\": [\n\t\t725,\n\t\t71\n\t],\n\t\"./tl-ph\": [\n\t\t726,\n\t\t73\n\t],\n\t\"./tl-ph.js\": [\n\t\t726,\n\t\t73\n\t],\n\t\"./tlh\": [\n\t\t727,\n\t\t74\n\t],\n\t\"./tlh.js\": [\n\t\t727,\n\t\t74\n\t],\n\t\"./tr\": [\n\t\t728,\n\t\t75\n\t],\n\t\"./tr.js\": [\n\t\t728,\n\t\t75\n\t],\n\t\"./tzl\": [\n\t\t729,\n\t\t76\n\t],\n\t\"./tzl.js\": [\n\t\t729,\n\t\t76\n\t],\n\t\"./tzm\": [\n\t\t731,\n\t\t78\n\t],\n\t\"./tzm-latn\": [\n\t\t730,\n\t\t77\n\t],\n\t\"./tzm-latn.js\": [\n\t\t730,\n\t\t77\n\t],\n\t\"./tzm.js\": [\n\t\t731,\n\t\t78\n\t],\n\t\"./ug-cn\": [\n\t\t732,\n\t\t79\n\t],\n\t\"./ug-cn.js\": [\n\t\t732,\n\t\t79\n\t],\n\t\"./uk\": [\n\t\t733,\n\t\t80\n\t],\n\t\"./uk.js\": [\n\t\t733,\n\t\t80\n\t],\n\t\"./ur\": [\n\t\t734,\n\t\t81\n\t],\n\t\"./ur.js\": [\n\t\t734,\n\t\t81\n\t],\n\t\"./uz\": [\n\t\t736,\n\t\t84\n\t],\n\t\"./uz-latn\": [\n\t\t735,\n\t\t82\n\t],\n\t\"./uz-latn.js\": [\n\t\t735,\n\t\t82\n\t],\n\t\"./uz.js\": [\n\t\t736,\n\t\t84\n\t],\n\t\"./vi\": [\n\t\t737,\n\t\t85\n\t],\n\t\"./vi.js\": [\n\t\t737,\n\t\t85\n\t],\n\t\"./x-pseudo\": [\n\t\t738,\n\t\t86\n\t],\n\t\"./x-pseudo.js\": [\n\t\t738,\n\t\t86\n\t],\n\t\"./yo\": [\n\t\t739,\n\t\t87\n\t],\n\t\"./yo.js\": [\n\t\t739,\n\t\t87\n\t],\n\t\"./zh-cn\": [\n\t\t740,\n\t\t88\n\t],\n\t\"./zh-cn.js\": [\n\t\t740,\n\t\t88\n\t],\n\t\"./zh-hk\": [\n\t\t741,\n\t\t89\n\t],\n\t\"./zh-hk.js\": [\n\t\t741,\n\t\t89\n\t],\n\t\"./zh-tw\": [\n\t\t742,\n\t\t90\n\t],\n\t\"./zh-tw.js\": [\n\t\t742,\n\t\t90\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6468;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./bg\": [\n\t\t743,\n\t\t131\n\t],\n\t\"./bg.js\": [\n\t\t743,\n\t\t131\n\t],\n\t\"./chs\": [\n\t\t744,\n\t\t137\n\t],\n\t\"./chs.js\": [\n\t\t744,\n\t\t137\n\t],\n\t\"./cs\": [\n\t\t745,\n\t\t148\n\t],\n\t\"./cs.js\": [\n\t\t745,\n\t\t148\n\t],\n\t\"./da-dk\": [\n\t\t746,\n\t\t159\n\t],\n\t\"./da-dk.js\": [\n\t\t746,\n\t\t159\n\t],\n\t\"./de\": [\n\t\t748,\n\t\t132\n\t],\n\t\"./de-ch\": [\n\t\t747,\n\t\t164\n\t],\n\t\"./de-ch.js\": [\n\t\t747,\n\t\t164\n\t],\n\t\"./de.js\": [\n\t\t748,\n\t\t132\n\t],\n\t\"./en-au\": [\n\t\t749,\n\t\t133\n\t],\n\t\"./en-au.js\": [\n\t\t749,\n\t\t133\n\t],\n\t\"./en-gb\": [\n\t\t750,\n\t\t134\n\t],\n\t\"./en-gb.js\": [\n\t\t750,\n\t\t134\n\t],\n\t\"./en-za\": [\n\t\t751,\n\t\t135\n\t],\n\t\"./en-za.js\": [\n\t\t751,\n\t\t135\n\t],\n\t\"./es\": [\n\t\t753,\n\t\t138\n\t],\n\t\"./es-es\": [\n\t\t752,\n\t\t136\n\t],\n\t\"./es-es.js\": [\n\t\t752,\n\t\t136\n\t],\n\t\"./es.js\": [\n\t\t753,\n\t\t138\n\t],\n\t\"./et\": [\n\t\t754,\n\t\t139\n\t],\n\t\"./et.js\": [\n\t\t754,\n\t\t139\n\t],\n\t\"./fi\": [\n\t\t755,\n\t\t140\n\t],\n\t\"./fi.js\": [\n\t\t755,\n\t\t140\n\t],\n\t\"./fr\": [\n\t\t758,\n\t\t143\n\t],\n\t\"./fr-ca\": [\n\t\t756,\n\t\t141\n\t],\n\t\"./fr-ca.js\": [\n\t\t756,\n\t\t141\n\t],\n\t\"./fr-ch\": [\n\t\t757,\n\t\t142\n\t],\n\t\"./fr-ch.js\": [\n\t\t757,\n\t\t142\n\t],\n\t\"./fr.js\": [\n\t\t758,\n\t\t143\n\t],\n\t\"./hu\": [\n\t\t759,\n\t\t144\n\t],\n\t\"./hu.js\": [\n\t\t759,\n\t\t144\n\t],\n\t\"./it\": [\n\t\t760,\n\t\t145\n\t],\n\t\"./it.js\": [\n\t\t760,\n\t\t145\n\t],\n\t\"./ja\": [\n\t\t761,\n\t\t146\n\t],\n\t\"./ja.js\": [\n\t\t761,\n\t\t146\n\t],\n\t\"./lv\": [\n\t\t762,\n\t\t147\n\t],\n\t\"./lv.js\": [\n\t\t762,\n\t\t147\n\t],\n\t\"./nl-be\": [\n\t\t763,\n\t\t149\n\t],\n\t\"./nl-be.js\": [\n\t\t763,\n\t\t149\n\t],\n\t\"./nl-nl\": [\n\t\t764,\n\t\t150\n\t],\n\t\"./nl-nl.js\": [\n\t\t764,\n\t\t150\n\t],\n\t\"./no\": [\n\t\t765,\n\t\t151\n\t],\n\t\"./no.js\": [\n\t\t765,\n\t\t151\n\t],\n\t\"./pl\": [\n\t\t766,\n\t\t152\n\t],\n\t\"./pl.js\": [\n\t\t766,\n\t\t152\n\t],\n\t\"./pt-br\": [\n\t\t767,\n\t\t153\n\t],\n\t\"./pt-br.js\": [\n\t\t767,\n\t\t153\n\t],\n\t\"./pt-pt\": [\n\t\t768,\n\t\t154\n\t],\n\t\"./pt-pt.js\": [\n\t\t768,\n\t\t154\n\t],\n\t\"./ru\": [\n\t\t770,\n\t\t156\n\t],\n\t\"./ru-ua\": [\n\t\t769,\n\t\t155\n\t],\n\t\"./ru-ua.js\": [\n\t\t769,\n\t\t155\n\t],\n\t\"./ru.js\": [\n\t\t770,\n\t\t156\n\t],\n\t\"./sk\": [\n\t\t771,\n\t\t157\n\t],\n\t\"./sk.js\": [\n\t\t771,\n\t\t157\n\t],\n\t\"./sl\": [\n\t\t772,\n\t\t158\n\t],\n\t\"./sl.js\": [\n\t\t772,\n\t\t158\n\t],\n\t\"./th\": [\n\t\t773,\n\t\t160\n\t],\n\t\"./th.js\": [\n\t\t773,\n\t\t160\n\t],\n\t\"./tr\": [\n\t\t774,\n\t\t161\n\t],\n\t\"./tr.js\": [\n\t\t774,\n\t\t161\n\t],\n\t\"./uk-ua\": [\n\t\t775,\n\t\t162\n\t],\n\t\"./uk-ua.js\": [\n\t\t775,\n\t\t162\n\t],\n\t\"./vi\": [\n\t\t776,\n\t\t163\n\t],\n\t\"./vi.js\": [\n\t\t776,\n\t\t163\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6469;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.po\": [\n\t\t6819,\n\t\t166\n\t],\n\t\"./de/messages.po\": [\n\t\t6820,\n\t\t167\n\t],\n\t\"./en-dev/messages.po\": [\n\t\t6822,\n\t\t169\n\t],\n\t\"./en/messages.po\": [\n\t\t6821,\n\t\t168\n\t],\n\t\"./pl/messages.po\": [\n\t\t6823,\n\t\t170\n\t],\n\t\"./sk/messages.po\": [\n\t\t6824,\n\t\t171\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6476;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t6825,\n\t\t166\n\t],\n\t\"./de/messages.js\": [\n\t\t6826,\n\t\t167\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t6828,\n\t\t169\n\t],\n\t\"./en/messages.js\": [\n\t\t6827,\n\t\t168\n\t],\n\t\"./pl/messages.js\": [\n\t\t6829,\n\t\t170\n\t],\n\t\"./sk/messages.js\": [\n\t\t6830,\n\t\t171\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6477;\nmodule.exports = webpackAsyncContext;","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n  persistenceKey: 'admin@local',\n  pageTitleSuffix: 'LOCAL',\n  sentryDSN: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'admin@dev',\n    pageTitleSuffix: 'DEV',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'admin@prod',\n    pageTitleSuffix: 'Speɘdlo',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n","import { Trans } from '@lingui/macro'\nimport { Dialog } from '@material-ui/core'\nimport { WarningTwoTone } from '@material-ui/icons'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport connectionWarningSound from '../assets/connectionWarning.mp3'\nimport { isNetworkOffline } from '../helpers/offline'\nimport { Colors } from '../styling'\nimport { SoundPlayInterval } from './SoundPlayInterval'\n\nconst MessageStyled = styled.div`\n  padding: 1rem;\n  background-color: ${Colors.red} !important;\n  font-size: 2rem;\n\n  & svg {\n    position: relative;\n    top: 0.3rem;\n    padding-right: 0.5rem;\n  }\n`\n\nexport const ConnectionWarning = observer(() => {\n  return (\n    <>\n      <SoundPlayInterval\n        shouldPlay={isNetworkOffline()}\n        intervalSec={30}\n        soundUrl={connectionWarningSound}\n      />\n\n      <Dialog\n        open={isNetworkOffline()}\n        disableBackdropClick={true}\n        disableEscapeKeyDown={true}\n      >\n        <MessageStyled>\n          <WarningTwoTone fontSize=\"large\" />\n          <Trans>Internet connection is not available</Trans>\n        </MessageStyled>\n      </Dialog>\n    </>\n  )\n})\n","import React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { logRouting } from '../helpers/logger'\n\nexport const LogRoute: React.FC = () => {\n  if (process.env.NODE_ENV !== 'development') {\n    return (\n      <Route>\n        {({ location }) => {\n          logRouting('at %s', location.pathname)\n          return null\n        }}\n      </Route>\n    )\n  } else {\n    return null\n  }\n}\n","import debug from 'debug'\nimport { when } from 'mobx'\nimport React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { WithRoot } from '../atoms/WithRoot'\n\nconst log = debug('routing')\n\nexport const RedirectAfterLogin = () => (\n  <Route\n    children={({ location, history }) => (\n      <WithRoot\n        render={root => {\n          if (!root.auth.isAuthenticatedUser) {\n            const route = (location.state && location.state.origin) || '/'\n            const waitForAuthentication = () => root.auth.isAuthenticated\n            const redirectAfterLogin = () => {\n              history.replace(route)\n            }\n            when(waitForAuthentication, redirectAfterLogin)\n            log('will redirect to %s when auth', route)\n          }\n          return null\n        }}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { RedirectToLogin } from './RedirectToLogin'\n\nexport const RedirectAfterLogout = () => {\n  const { auth, user, order, createOrder, settings, zone } = useRoot()\n  if (auth.isAuthenticated) {\n    auth.invalidate()\n    user.invalidate()\n    order.invalidate()\n    createOrder.invalidate()\n    settings.invalidate()\n    zone.invalidate()\n    return <RedirectToLogin useOrigin={false} />\n  }\n  return <Redirect to=\"/\" />\n}\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport PageLoader from '../atoms/PageLoader'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LogRoute } from './LogRoute'\nimport { RedirectAfterLogin } from './RedirectAfterLogin'\nimport { RedirectAfterLogout } from './RedirectAfterLogout'\nimport { SecureRoute } from './SecureRoute'\n\nconst PasswordLoginRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordLoginRoute'),\n)\n\nconst PasswordChangeRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordChangeRoute'),\n)\n\nconst PasswordResetRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordResetRoute'),\n)\n\nconst MainDashboardPage = React.lazy(() =>\n  import('../segments/main/pages/MainDashboardPage'),\n)\n\nconst OrderRoutes = React.lazy(() =>\n  import('../segments/order/routes/OrderRoutes'),\n)\n\nconst KitchenRoutes = React.lazy(() =>\n  import('../segments/kitchen/routes/KitchenRoutes'),\n)\n\nconst SettingsRoutes = React.lazy(() =>\n  import('../segments/settings/routes/SettingsRoutes'),\n)\n\nconst OverviewRoutes = React.lazy(() =>\n  import('../segments/overview/routes/OverviewRoutes'),\n)\n\nconst SupportPage = React.lazy(() =>\n  import('../segments/main/pages/SupportPage'),\n)\n\nexport const Routing = () => (\n  <React.Suspense fallback={<PageLoader />}>\n    <LogRoute />\n    <RedirectAfterLogin />\n    <Switch>\n      <Route path=\"/login\" exact={true} component={PasswordLoginRoute} />\n      <Route path=\"/reset\" exact={true} component={PasswordResetRoute} />\n      <Route\n        path=\"/recovery/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <Route\n        path=\"/register/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <SecureRoute path=\"/\" exact={true} component={MainDashboardPage} />\n      <SecureRoute path=\"/order\" component={OrderRoutes} />\n      <SecureRoute path=\"/kitchen\" component={KitchenRoutes} />\n      <SecureRoute path=\"/settings\" component={SettingsRoutes} />\n      <SecureRoute path=\"/overview\" component={OverviewRoutes} />\n      <Route path=\"/support\" component={SupportPage} />\n      <Route path=\"/logout\" component={RedirectAfterLogout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </React.Suspense>\n)\n","import { Trans } from '@lingui/macro'\nimport { Autorenew, ContactSupport, Warning } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { Sizer } from '../atoms/Sizer'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\nconst IconStyled = styled.div`\n  color: ${Colors.orange};\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ninterface IProps {\n  onFeedback(): void\n}\n\nexport const ErrorPage: React.FC<IProps> = ({ onFeedback }) => (\n  <FullPageLayout\n    width={15}\n    pageTitle={i18n.t`Application error`}\n    hideLogoutWidget={true}\n    showHomeButton={false}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          We are sorry, but there is an unexpected problem in the app. Our team\n          was notified and will fix this soon.\n        </Trans>\n      </h3>\n      <Center>\n        <IconStyled>\n          <Warning style={{ fontSize: '5rem' }} />\n        </IconStyled>\n        <Sizer width={20}>\n          <TouchButton onClick={onFeedback}>\n            <ContactSupport />\n            <Trans>Send feedback</Trans>\n          </TouchButton>\n        </Sizer>\n        <Sizer width={20}>\n          <TouchButton onClick={() => window.location.reload()}>\n            <Autorenew />\n            <Trans>Restart application</Trans>\n          </TouchButton>\n        </Sizer>\n      </Center>\n    </Card>\n  </FullPageLayout>\n)\n","import { Trans } from '@lingui/macro'\nimport { OfflineBolt } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { Sizer } from '../atoms/Sizer'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\nconst IconStyled = styled.div`\n  margin-top: 2rem;\n  color: ${Colors.red};\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ninterface IProps {\n  onRetry(): void\n}\n\nexport const ServiceUnreachablePage: React.FC<IProps> = ({ onRetry }) => (\n  <FullPageLayout\n    width={15}\n    pageTitle={i18n.t`Service unreachable`}\n    useBackButton={false}\n    hideLogoutWidget={true}\n    showHomeButton={false}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          Connection to external service is not possible at the moment. Please\n          try again later or <a href=\"/support\">contact our support</a>.\n        </Trans>\n      </h3>\n      <Center>\n        <IconStyled>\n          <OfflineBolt style={{ fontSize: '5rem' }} />\n        </IconStyled>\n        <Sizer width={20}>\n          <TouchButton onClick={onRetry} iconName=\"cached\">\n            {' '}\n            <Trans>Retry the connection</Trans>\n          </TouchButton>\n        </Sizer>\n      </Center>\n    </Card>\n  </FullPageLayout>\n)\n","import {\n  ApolloDefender,\n  isChunkError,\n  isNetworkUnreachableError,\n} from '@speedlo/graphql'\nimport { flushSentry, Sentry } from '@speedlo/sentry'\nimport { SillyErrorBoundary } from '@speedlo/tools'\nimport { isApolloError } from 'apollo-client'\nimport React from 'react'\n\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { i18n } from '../i18n'\nimport { ErrorPage } from '../pages/ErrorPage'\nimport { ServiceUnreachablePage } from '../pages/ServiceUnreachablePage'\n\nexport type ErrorKind = 'none' | 'serviceUnreachable' | 'otherError'\n\nconst makeError = (message: string) =>\n  `${message} ${i18n.t`Our team was notified about the issue.`}`\n\nexport const DefaultErrorHandler: React.FC = ({ children }) => {\n  const { enqueueWarning, enqueueError } = useSnackBar()\n\n  const [errorKind, setErrorKind] = React.useState<ErrorKind>('none')\n\n  const onRetry = React.useCallback(() => {\n    setErrorKind('none')\n  }, [])\n\n  const onUnhandledError = React.useCallback((error: Error) => {\n    if (isChunkError(error)) {\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Debug)\n        Sentry.captureException(error)\n      })\n      flushSentry().then(() => window.location.reload())\n      return\n    }\n    if (isApolloError(error) && isNetworkUnreachableError(error)) {\n      setErrorKind('serviceUnreachable')\n      return\n    }\n    Sentry.captureException(error)\n    setErrorKind('otherError')\n  }, [])\n\n  const onNetworkError = React.useCallback(\n    (error: Error, isUnreachable: boolean) => {\n      if (isUnreachable) {\n        setErrorKind('serviceUnreachable')\n      } else {\n        enqueueError(\n          makeError(\n            i18n.t`Unexpected error occured in communication with service.`,\n          ),\n        )\n      }\n    },\n    [],\n  )\n\n  const onOperationError = React.useCallback(() => {\n    enqueueError(\n      makeError(i18n.t`Unexpected error occured while sending a request.`),\n    )\n  }, [])\n\n  const onUserErrors = React.useCallback((messages: ReadonlyArray<string>) => {\n    messages.forEach(enqueueWarning)\n  }, [])\n\n  const render = () => {\n    switch (errorKind) {\n      case 'serviceUnreachable': {\n        return <ServiceUnreachablePage onRetry={onRetry} />\n      }\n      case 'otherError': {\n        return <ErrorPage onFeedback={showFeedback} />\n      }\n      default: {\n        return children\n      }\n    }\n  }\n\n  return (\n    <ApolloDefender\n      onNetworkError={onNetworkError}\n      onUserErrors={onUserErrors}\n      onOperationError={onOperationError}\n    >\n      <SillyErrorBoundary onError={onUnhandledError}>\n        {render()}\n      </SillyErrorBoundary>\n    </ApolloDefender>\n  )\n}\n\nfunction showFeedback() {\n  Sentry.showReportDialog({\n    labelClose: i18n.t`Close`,\n    title: i18n.t`Unexpected error in the app`,\n  })\n}\n","import React from 'react'\nimport { Provider as GoodByeProvider } from 'react-goodbye'\nimport { BrowserRouter } from 'react-router-dom'\n\ninterface IProps {}\n\nexport const Router: React.FC<IProps> = ({ children }) => (\n  <GoodByeProvider>\n    {({ handleGetUserConfirm }) => (\n      <BrowserRouter getUserConfirmation={handleGetUserConfirm}>\n        {children}\n      </BrowserRouter>\n    )}\n  </GoodByeProvider>\n)\n","import { css } from 'emotion'\nimport { SnackbarProvider } from 'notistack'\nimport React from 'react'\n\nimport { Colors, Spacing } from '../styling'\n\ninterface IProps {}\n\nconst successStyle = css`\n  background: ${Colors.green} !important;\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nconst errorStyle = css`\n  background: ${Colors.red};\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nconst warningStyle = css`\n  background: ${Colors.orange};\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nexport const snackStyles = {\n  variantSuccess: successStyle,\n  variantInfo: successStyle,\n  variantError: errorStyle,\n  variantWarning: warningStyle,\n}\n\nexport const SnackProvider: React.FC<IProps> = ({ children }) => (\n  <SnackbarProvider\n    maxSnack={3}\n    classes={snackStyles}\n    anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\n  >\n    {children}\n  </SnackbarProvider>\n)\n","import { Button, Snackbar } from '@material-ui/core'\nimport { SnackbarProps } from '@material-ui/core/Snackbar'\nimport { HOUR, MINUTE, SECOND, useInterval, useTimer } from '@speedlo/hooks'\nimport { updateWorker } from '@speedlo/tools'\nimport { addMilliseconds, formatDistanceStrict } from 'date-fns'\nimport { useObservable, useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { logUpdate } from '../helpers/logger'\nimport { i18n } from '../i18n'\nimport { snackStyles } from './SnackProvider'\n\nexport interface IProps {\n  onRestart?(): void\n  autoUpdateDelay?: number\n  postponeTimeout?: number\n  updateCheckInterval?: number\n  serviceWorker?: ServiceWorkerContainer\n}\n\nexport const UpdateHandler: React.FC<IProps> = ({\n  onRestart = () => window.location.reload(),\n  autoUpdateDelay = 20 * SECOND,\n  postponeTimeout = 2 * MINUTE,\n  updateCheckInterval = process.env.REACT_APP_STAGE === 'prod'\n    ? 1 * HOUR\n    : 5 * MINUTE,\n  serviceWorker = window.navigator.serviceWorker,\n}) => {\n  const registrationWorkerRef = React.useRef<ServiceWorkerRegistration | null>(\n    null,\n  )\n  const updateWorkerRef = React.useRef<ServiceWorker | null>(null)\n\n  const state = useObservable({ updatePending: false, applyingUpdate: false })\n\n  useInterval(() => {\n    if (registrationWorkerRef.current) {\n      logUpdate('checking...')\n      registrationWorkerRef.current.update().catch(() => {\n        // don't really care if check fails\n      })\n    }\n  }, updateCheckInterval)\n\n  React.useEffect(() => {\n    const onMessage = (event: MessageEvent) => {\n      if (event.data === 'update-applied') {\n        logUpdate('restarting to apply...')\n        onRestart()\n      }\n    }\n    if (serviceWorker) {\n      serviceWorker.addEventListener('message', onMessage)\n      return () => {\n        serviceWorker.removeEventListener('message', onMessage)\n      }\n    } else {\n      logUpdate('serviceWorker is not supported')\n      return () => {\n        /* noop */\n      }\n    }\n  }, [onRestart, serviceWorker])\n\n  React.useEffect(() => {\n    const init = updateWorker.register({\n      onInit: reg => {\n        registrationWorkerRef.current = reg\n      },\n      onUpdate: sw => {\n        updateWorkerRef.current = sw\n        state.updatePending = true\n        logUpdate('new update is available')\n      },\n    })\n    // service worker is normally using load event, but since this\n    // done after the load, it has to be triggered manually\n    init()\n  }, [])\n\n  const onCancel = () => {\n    logUpdate('user postponed')\n    state.updatePending = false\n    setTimeout(() => {\n      logUpdate('reminding update to user again')\n      state.updatePending = true\n    }, postponeTimeout)\n  }\n\n  const onConfirm = () => {\n    state.updatePending = false\n    if (updateWorkerRef.current) {\n      logUpdate('user confirmed')\n      state.applyingUpdate = true\n      updateWorkerRef.current.postMessage('apply-update')\n    }\n  }\n\n  if (state.applyingUpdate && process.env.NODE_ENV !== 'test') {\n    throw new Promise(() => {\n      // Suspense will catch it and show loader while the update is being applied\n    })\n  }\n\n  return useObserver(() =>\n    state.updatePending ? (\n      <UpdateSnack\n        autoHideDuration={autoUpdateDelay}\n        onCancel={onCancel}\n        onConfirm={onConfirm}\n      />\n    ) : null,\n  )\n}\n\ninterface IUpdateSnackProps extends Omit<SnackbarProps, 'open'> {\n  autoHideDuration: number\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport function UpdateSnack(props: IUpdateSnackProps) {\n  const { onConfirm, onCancel, ...rest } = props\n  const now = useTimer({ interval: SECOND, enabled: true })\n  const [endTime] = React.useState(() =>\n    addMilliseconds(now, props.autoHideDuration),\n  )\n  const remainingSeconds = formatDistanceStrict(endTime, now)\n\n  React.useEffect(() => {\n    if (now >= endTime) {\n      onConfirm()\n    }\n  }, [now, endTime])\n\n  return (\n    <Snackbar\n      open={true}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center',\n      }}\n      className={snackStyles.variantInfo}\n      message={\n        <span data-testid=\"message\">{i18n.t`Application will be restarted in ${remainingSeconds} to apply available update.`}</span>\n      }\n      disableWindowBlurListener={true}\n      action={[\n        <Button\n          key=\"later\"\n          color=\"secondary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"postpone-button\"\n          onClick={onCancel}\n        >\n          {i18n.t`Postpone update`}\n        </Button>,\n        <Button\n          key=\"confirm\"\n          color=\"primary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"confirm-button\"\n          onClick={onConfirm}\n        >\n          {i18n.t`Restart now`}\n        </Button>,\n      ]}\n      {...rest}\n    />\n  )\n}\n","import { Sentry } from '@speedlo/sentry'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { useQUserBootstrap } from '../graph/generated'\nimport { RM } from '../helpers/ramda'\n\nexport const UserBootstrap = observer(() => {\n  const { auth, user } = useRoot()\n\n  const { data, loading } = useQUserBootstrap(\n    { userId: auth.userId },\n    { skip: !auth.isAuthenticatedUser },\n  )\n\n  React.useEffect(() => {\n    if (!auth.userId) {\n      user.finishBootstrap()\n      Sentry.configureScope(scope => {\n        scope.setUser({\n          id: undefined,\n          username: undefined,\n        })\n        scope.setExtra('roles', [])\n        scope.setExtra('branches', [])\n      })\n    }\n  })\n\n  React.useEffect(() => {\n    if (auth.isAuthenticatedUser && !loading) {\n      user.applyUserData(data.user)\n      user.applyAccess(data.access)\n      user.applyPermissions(data.permissions)\n      user.finishBootstrap()\n      Sentry.configureScope(scope => {\n        scope.setUser({\n          id: auth.userId,\n          username: `${data.user.firstName} ${data.user.lastName}`,\n        })\n        scope.setExtras({\n          roles: data.user.roles.map(RM.prop('name')),\n          branches: data.user.branches.map(RM.prop('id')),\n        })\n      })\n    }\n  })\n\n  return null\n})\n","import '@speedlo/assets/Flaticon.css'\nimport 'material-design-icons/iconfont/material-icons.css'\nimport 'react-grid-layout/css/styles.css'\n\nimport { useReleaseCabinet } from '@speedlo/tools/dist/useReleaseCabinet'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ConnectionWarning } from '../atoms/ConnectionWarning'\nimport PageLoader from '../atoms/PageLoader'\nimport { useRoot } from '../atoms/RootProvider'\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { Routing } from '../routes/Routing'\nimport { DefaultErrorHandler } from './DefaultErrorHandler'\nimport { Router } from './Router'\nimport { UpdateHandler } from './UpdateHandler'\nimport { UserBootstrap } from './UserBootstrap'\n\nexport const AppMain: React.FC = () => {\n  const { user } = useRoot()\n\n  const { enqueueInfo } = useSnackBar()\n  useReleaseCabinet(enqueueInfo)\n\n  return (\n    <DefaultErrorHandler>\n      <UserBootstrap />\n      <UpdateHandler />\n      <ConnectionWarning />\n      <React.Suspense fallback={<PageLoader />}>\n        <Router>\n          <Observer>\n            {() => (user.isReady ? <Routing /> : <PageLoader />)}\n          </Observer>\n        </Router>\n      </React.Suspense>\n    </DefaultErrorHandler>\n  )\n}\n","import { createMuiTheme, MuiThemeProvider } from '@material-ui/core'\nimport React from 'react'\n\ninterface IProps {}\n\nexport const ThemeProvider: React.FC<IProps> = ({ children }) => {\n  const theme = createMuiTheme({\n    typography: {\n      useNextVariants: true,\n    },\n  })\n\n  return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>\n}\n","import { useSentryInit } from '@speedlo/sentry'\nimport React from 'react'\n\nimport { RootProvider } from '../atoms/RootProvider'\nimport { appConfig } from '../config'\nimport { I18nManager } from '../i18n'\nimport { SnackProvider } from './SnackProvider'\nimport { ThemeProvider } from './ThemeProvider'\n\nexport const AppProvider: React.FC = ({ children }) => {\n  useSentryInit(appConfig.sentryDSN)\n  return (\n    <ThemeProvider>\n      <RootProvider>\n        <I18nManager>\n          <SnackProvider>{children}</SnackProvider>\n        </I18nManager>\n      </RootProvider>\n    </ThemeProvider>\n  )\n}\n","import { createGlobalStyle } from 'styled-components'\n\nimport backgroundImage from '../assets/bg_antracit.jpg'\n\nexport const GlobalStyles = createGlobalStyle`\n  body,\n  input,\n  textarea,\n  select,\n  button {\n    margin: 0;\n    padding: 0;\n    font-family: 'Open Sans', sans-serif;\n    font-size: 16px;\n  }\n  body {\n    background-color: #322e2d;\n    color: white;\n    background-image: url(${backgroundImage});\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-size: cover;\n  }\n\n  input {\n    padding: 0.5rem;\n    border: 1px solid #95989a;\n    border-radius: 0.25rem;\n  }\n\n  /* react-grid disabling animation */\n  .react-grid-item {\n    transition: all 0s;\n  }\n\n  /* apply a natural box layout model to all elements, but allowing components to change */\n  html {\n    box-sizing: border-box;\n  }\n  *,\n  *:before,\n  *:after {\n    box-sizing: inherit;\n  }\n`\n","import './enableDebug'\n\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport { AppMain } from './app/AppMain'\nimport { AppProvider } from './app/AppProvider'\nimport { GlobalStyles } from './app/GlobalStyles'\nimport PageLoader from './atoms/PageLoader'\n\nconst Main = () => {\n  return (\n    <React.Suspense fallback={<PageLoader />}>\n      <>\n        <GlobalStyles />\n        <AppProvider>\n          <AppMain />\n        </AppProvider>\n      </>\n    </React.Suspense>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nrender(<Main />, rootElement)\n","import { createContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const RootContext = createContext<TRootModel | undefined>(undefined)\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersistence } from './logger'\n\nconst persistenceKey = appConfig.persistenceKey\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = (snapshot: object) =>\n    localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersistence('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersistence('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersistence('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { Sentry } from '@speedlo/sentry'\nimport { getParent, Instance } from 'mobx-state-tree'\n\nimport { appConfig } from '../../../config'\nimport { i18n } from '../../../i18n'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TLoginProviderModel } from './LoginProviderModel'\n\nconst getLoginUrl = ({ username, password }: Dictionary<string>) =>\n  `${appConfig.endpoint}/users/token?username=${username}&password=${password}`\n\nexport const PasswordLoginModel = BaseModel.named('PasswordLogin')\n  .volatile(self => ({\n    errorCode: '',\n    errorMessage: '',\n  }))\n  .views(self => ({\n    get hasFailed() {\n      return Boolean(self.errorCode)\n    },\n  }))\n  .actions(self => ({\n    setFailure(code: string, message: string) {\n      self.errorCode = code\n      self.errorMessage = message\n    },\n    setSuccess(token: string, userId: string) {\n      const provider = getParent<TLoginProviderModel>(self)\n      provider.authenticate(token, userId)\n    },\n  }))\n  .actions(self => ({\n    async requestToken(username: string, password: string) {\n      const url = getLoginUrl({ username, password })\n      const fetch: TFetch = window.fetch\n      try {\n        const response = await fetch(url, {\n          headers: {\n            Accept: 'application/json',\n          },\n        })\n        const payload = await response.json()\n        self.log('received payload %j', payload)\n\n        if (response.status !== 200) {\n          self.setFailure(payload.code, payload.error)\n          self.log('token request failed for username %s', username)\n        } else {\n          self.setSuccess(payload.token, String(payload.userId))\n          self.log(\n            'token request success for username %s [%s]',\n            username,\n            payload.userId,\n          )\n        }\n      } catch (err) {\n        self.setFailure(\n          'FAIL',\n          i18n.t`Cannot login right now, please try again later`,\n        )\n        Sentry.withScope(scope => {\n          scope.setExtra('username', username)\n          scope.setLevel(Sentry.Severity.Debug)\n          Sentry.captureException(err)\n        })\n      }\n    },\n  }))\n\nexport interface TPasswordLoginModel\n  extends Instance<typeof PasswordLoginModel> {}\n","import { getParent, Instance, types } from 'mobx-state-tree'\n\nimport { TAuthModel } from '../../../models/AuthModel'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { PasswordLoginModel } from './PasswordLoginModel'\n\nexport const LoginProviderModel = BaseModel.named('LoginProvider')\n  .props({\n    passwordLogin: types.optional(PasswordLoginModel, {}),\n  })\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      const auth = getParent<TAuthModel>(self)\n      auth.authenticate(token, userId)\n    },\n  }))\n\nexport interface TLoginProviderModel\n  extends Instance<typeof LoginProviderModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { LoginProviderModel } from '../segments/login/models/LoginProviderModel'\nimport { BaseModel } from './BaseModel'\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    userId: types.optional(types.string, ''),\n    token: types.optional(types.string, ''),\n    provider: types.optional(LoginProviderModel, {}),\n  })\n  .views(self => ({\n    get isAuthenticated() {\n      return self.token.length > 0\n    },\n    get isAuthenticatedUser() {\n      return this.isAuthenticated && self.userId.length > 0\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      self.log('authenticated with id %s', userId)\n    },\n    invalidate() {\n      self.token = ''\n      self.userId = ''\n      if (self.client) {\n        self.client.cache.reset()\n      }\n      self.log('invalidated authentication')\n    },\n  }))\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { BaseModel } from '../models/BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  soundEnabled: true,\n  orderListPollIntervalSec: 60,\n  orderListSoundIntervalSec: 60,\n})\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\n\nimport {\n  FCompanyBranchBrand,\n  FCompanyBranchFragment,\n  QUserBootstrapAccess,\n  QUserBootstrapFields,\n  QUserBootstrapPermissions,\n  QUserBootstrapUser,\n} from '../graph/generated'\nimport { RM } from '../helpers/ramda'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  isLoaded: boolean\n  branches: ReadonlyArray<FCompanyBranchFragment>\n  brands: ReadonlyArray<FCompanyBranchBrand>\n  soundEnabled: boolean\n  access: Maybe<IUserAccess>\n  permissions: QUserBootstrapPermissions\n}\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    language: types.maybe(types.string),\n    soundVolume: types.optional(types.number, 25),\n    soundIgnore: false,\n  })\n  .volatile<IVolatileProps>(() => ({\n    isLoaded: false,\n    branches: [],\n    brands: [],\n    soundEnabled: false,\n    access: null,\n    permissions: {\n      canCancelOrders: false,\n      canCreateOrder: false,\n    },\n  }))\n  .views(self => ({\n    get branchesId() {\n      return self.branches.map(R.prop('id'))\n    },\n    get defaultBranch() {\n      if (self.branches.length === 0) {\n        throw new Error('No user branches available to get defaultBranchId')\n      }\n      return self.branches[0]\n    },\n    get hasSingleBranch() {\n      return self.branches.length === 1\n    },\n    filterBranches(predicate: (value: FCompanyBranchFragment) => boolean) {\n      return self.branches.filter(predicate)\n    },\n    canQuery(queryName: string) {\n      return (\n        self.access !== null && self.access.queries.has(queryName.toLowerCase())\n      )\n    },\n    canMutate(mutationName: string) {\n      return (\n        self.access !== null &&\n        self.access.mutations.has(mutationName.toLowerCase())\n      )\n    },\n    get isReady() {\n      return self.isLoaded || !self.root.auth.isAuthenticated\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.isLoaded = false\n      self.branches = []\n      self.brands = []\n      self.access = null\n    },\n    applyUserData(user: QUserBootstrapUser) {\n      self.language = user.language.rawCode\n      self.branches = user.branches\n      self.brands = RM.uniqBy(\n        RM.prop('id'),\n        user.branches.map(RM.prop('brand')),\n      )\n    },\n    applyPermissions(permissions: QUserBootstrapPermissions) {\n      self.permissions = permissions\n    },\n    applyAccess(access: QUserBootstrapAccess) {\n      const makeSet = (fields: ReadonlyArray<QUserBootstrapFields>) =>\n        new Set(\n          fields.map(\n            RM.compose(\n              RM.toLower,\n              RM.prop('name'),\n            ),\n          ),\n        )\n\n      self.access = {\n        queries: makeSet(access.queries.fields ? access.queries.fields : []),\n        mutations: makeSet(\n          access.mutations && access.mutations.fields\n            ? access.mutations.fields\n            : [],\n        ),\n        subscriptions: makeSet(\n          access.subscriptions && access.subscriptions.fields\n            ? access.subscriptions.fields\n            : [],\n        ),\n      }\n    },\n    finishBootstrap() {\n      self.isLoaded = true\n    },\n    setLanguage(lang: string) {\n      self.language = lang\n    },\n    controlSound(enabled: boolean = true, ignore: boolean = false) {\n      self.soundEnabled = enabled\n      self.soundIgnore = ignore\n    },\n    setSoundVolume(volume: number) {\n      self.soundVolume = volume\n    },\n  }))\n\ninterface IUserAccess {\n  queries: Set<string>\n  mutations: Set<string>\n  subscriptions: Set<string>\n}\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import { fakerCZ } from '@speedlo/testing/dist/faker'\n\nexport const faker = fakerCZ\n","import { isoDate } from '@speedlo/graphql'\nimport { startOfMinute } from 'date-fns'\nimport _ from 'lodash'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { ISuggestion } from '../../../components/AddressSuggest'\nimport {\n  DeliveryTypeEnum,\n  MCreateOrderAcceptVariables,\n  MCreateOrderNewVariables,\n  MCreateOrderUpdateVariables,\n} from '../../../graph/generated'\nimport { GOrderVam, SOrderCall } from '../../../graph/types'\nimport { faker } from '../../../helpers/faker'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\n\nexport interface IOrderSidedishControlResult {\n  sidedishes: ReadonlyArray<ID>\n  isConfirmed: boolean\n}\n\nexport interface ICall extends Omit<SOrderCall.Call, 'isRinging' | 'eventId'> {\n  eventId?: ID\n}\n\nexport interface IOrderFormValues {\n  deliveryType: DeliveryTypeEnum.Messenger | DeliveryTypeEnum.Pickup\n  deliverAt?: Date\n  phone?: string\n  phonePrefix?: string\n  firstName?: string\n  lastName?: string\n  email?: string\n  note?: string\n}\n\ninterface IVolatileProps {\n  orderId: MaybeID\n  call?: ICall\n  deliveryAddress?: ISuggestion\n  deliveryMinutes?: number\n  minimalPrice?: string\n  notDeliveryLocation: boolean\n  values: IOrderFormValues\n  fakeValues?: Partial<IOrderFormValues>\n  fakeAddress?: ISuggestion\n  vamCustomer: Maybe<GOrderVam.VamCustomer>\n  sidedishMode: 'none' | 'recipe' | 'item'\n  sidedishRootId?: ID\n  sidedishSelection?: ReadonlyArray<ID>\n}\n\nexport const CreateOrderModel = BaseModel.named('CreateOrder')\n  .props({\n    branchId: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(getDefaultProps)\n  .actions(self => ({\n    invalidate() {\n      self.branchId = undefined\n      Object.assign(self, getDefaultProps())\n    },\n  }))\n  .views(self => ({\n    get currentBranch() {\n      return (\n        self.root.user.branches.find(RM.propEq('id', self.branchId)) ||\n        self.root.user.defaultBranch\n      )\n    },\n  }))\n  .views(self => ({\n    get deliveryType() {\n      return self.values.deliveryType\n    },\n    get isDelivery() {\n      return self.values.deliveryType === DeliveryTypeEnum.Messenger\n    },\n    get deliverAt() {\n      return (self.values.deliverAt && new Date(self.values.deliverAt)) || null\n    },\n    get deliverAtIso() {\n      return (this.deliverAt && isoDate(startOfMinute(this.deliverAt))) || null\n    },\n    get hasAddress() {\n      return Boolean(self.deliveryAddress || self.fakeAddress)\n    },\n    get gps() {\n      if (this.isDelivery && this.hasAddress) {\n        if (self.deliveryAddress && self.deliveryAddress.gps) {\n          return clearGps(self.deliveryAddress.gps)\n        } else if (self.fakeAddress && self.fakeAddress.gps) {\n          return clearGps(self.fakeAddress.gps)\n        }\n      }\n      return { ...clearGps(self.currentBranch.gps) }\n    },\n    get phone() {\n      if (self.values.phone !== undefined) {\n        return self.values.phone\n      }\n      return self.call ? self.call.phone : ''\n    },\n    get phonePrefix() {\n      if (self.values.phonePrefix !== undefined) {\n        return self.values.phonePrefix\n      }\n      if (self.call) {\n        return self.call.prefix\n      }\n      if (self.currentBranch.address.country) {\n        return self.currentBranch.address.country.phonePrefix\n      }\n      return '+'\n    },\n    get customer() {\n      const formValues = this.formValues as IOrderFormValues\n      return {\n        firstName: formValues.firstName,\n        lastName: formValues.lastName,\n        emails: formValues.email ? [{ email: formValues.email }] : null,\n        phones: formValues.phone\n          ? [\n              {\n                phone: `${formValues.phonePrefix}${formValues.phone}`,\n              },\n            ]\n          : null,\n      }\n    },\n    get formValues() {\n      if (self.vamCustomer !== null && self.vamCustomer.isFound) {\n        const { firstName, lastName, email, lastOrder } = self.vamCustomer\n        return _.defaults(\n          { ...self.values },\n          {\n            phone: this.phone,\n            phonePrefix: this.phonePrefix,\n            firstName,\n            lastName,\n            email,\n            note: (lastOrder && lastOrder.note) || '',\n          },\n        )\n      }\n      if (self.fakeValues) {\n        return _.defaults({ ...self.values }, { ...self.fakeValues })\n      }\n      return _.defaults(\n        { ...self.values },\n        { phone: this.phone, phonePrefix: this.phonePrefix },\n      )\n    },\n    get hasOrder() {\n      return self.orderId !== null\n    },\n  }))\n  .views(self => ({\n    get createOrderVariables(): MCreateOrderNewVariables {\n      return {\n        branchId: self.currentBranch.id,\n        deliveryType: self.values.deliveryType,\n        deliverAt: self.deliverAtIso,\n        callEventId: self.call && self.call.eventId,\n        gps: self.gps,\n      }\n    },\n    get updateOrderVariables(): MCreateOrderUpdateVariables {\n      return {\n        orderId: self.orderId!,\n        deliveryType: self.deliveryType,\n        deliverAt: self.deliverAtIso,\n        customer: self.customer,\n        gps: self.gps,\n      }\n    },\n    get acceptOrderVariables(): MCreateOrderAcceptVariables {\n      return {\n        orderId: self.orderId!,\n        customer: self.customer,\n        deliverAt: self.deliverAtIso,\n        note: self.formValues.note,\n      }\n    },\n  }))\n  .actions(self => ({\n    resetOrder() {\n      self.orderId = null\n    },\n    resetModel() {\n      Object.assign(self, getDefaultProps())\n    },\n    setOrder(orderId: ID) {\n      self.orderId = orderId\n      return orderId\n    },\n  }))\n  .actions(self => ({\n    useLocation(address: ISuggestion) {\n      self.deliveryAddress = address\n    },\n    clearLocation() {\n      self.deliveryAddress = undefined\n    },\n    setMinimalPrice(price: string | undefined) {\n      self.minimalPrice = price\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    userIsCalling(call: ICall | undefined) {\n      self.call = call\n    },\n    setDeliveryMinutes(minutes: number | undefined) {\n      self.deliveryMinutes = minutes\n    },\n    updateFormValues(\n      values: IOrderFormValues,\n      touched: { [K in keyof IOrderFormValues]?: boolean },\n    ) {\n      self.values = {\n        deliveryType: values.deliveryType,\n        ..._.pick(values, Object.keys(touched)),\n        deliverAt: values.deliverAt,\n      }\n      self.log('updated values: %j', self.values)\n    },\n    updateFromVam(vamCustomer: Maybe<GOrderVam.VamCustomer>) {\n      self.vamCustomer = vamCustomer\n      self.log('vam customer: %j', vamCustomer)\n    },\n    updateFormWithFakeValues() {\n      self.fakeValues = {\n        firstName: faker.name.firstName(),\n        lastName: faker.name.lastName(),\n        email: faker.internet.email(),\n        phone: faker.phone.phoneNumberFormat(3).replace(/\\s/g, ''),\n        phonePrefix: '+420',\n        note: faker.lorem.sentence().slice(0, 50 - 1),\n      }\n      self.fakeAddress = {\n        state: '',\n        city: 'Hradec Králové',\n        street: 'Opletalova',\n        houseNumber: '334/2',\n        gps: {\n          latitude: 50.2129839,\n          longitude: 15.8342836,\n        },\n      }\n    },\n  }))\n  .actions(self => {\n    let resolver: Maybe<(result: IOrderSidedishControlResult) => void> = null\n    const makeResolver = () => {\n      return new Promise<IOrderSidedishControlResult>(resolve => {\n        resolver = resolve\n      })\n    }\n    return {\n      selectSidedishesForRecipe(recipeId: ID) {\n        self.sidedishMode = 'recipe'\n        self.sidedishRootId = recipeId\n        return makeResolver()\n      },\n      selectSidedishesForItem(itemId: ID) {\n        self.sidedishMode = 'item'\n        self.sidedishRootId = itemId\n        return makeResolver()\n      },\n      sidedishSelectionConfirmed(sidedishes: ReadonlyArray<ID>) {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: true,\n            sidedishes,\n          })\n          resolver = null\n        }\n      },\n      sidedishSelectionCancel() {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: false,\n            sidedishes: [],\n          })\n          resolver = null\n        }\n      },\n    }\n  })\n\nfunction getDefaultProps(): IVolatileProps {\n  return {\n    orderId: null,\n    call: undefined,\n    values: {\n      deliveryType: DeliveryTypeEnum.Messenger,\n      deliverAt: undefined,\n      phone: undefined,\n      email: undefined,\n      firstName: undefined,\n      lastName: undefined,\n      note: undefined,\n    },\n    fakeAddress: undefined,\n    fakeValues: undefined,\n    deliveryAddress: undefined,\n    deliveryMinutes: undefined,\n    minimalPrice: undefined,\n    vamCustomer: null,\n    notDeliveryLocation: false,\n    sidedishMode: 'none',\n    sidedishRootId: undefined,\n    sidedishSelection: undefined,\n  }\n}\n\nfunction clearGps({ latitude, longitude }: GeoPoint) {\n  return { latitude, longitude }\n}\n\nexport interface TCreateOrderModel extends Instance<typeof CreateOrderModel> {}\nexport interface TCreateOrderModelProps\n  extends SnapshotIn<typeof CreateOrderModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { gpsToLatLngLit } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<google.maps.Map>\n}\n\nconst GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 12),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLngLit(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: google.maps.Map) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\n","import { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\n\ninterface IVolatileProps {\n  activeDriverId: MaybeID\n}\n\nexport const OrderMapModel = MapModel.named('OrderMap')\n  .volatile<IVolatileProps>(() => ({\n    activeDriverId: null,\n  }))\n  .actions(self => ({\n    activateDriver(driverId: ID, position: GeoPoint) {\n      self.activeDriverId = driverId\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(position))\n      }\n    },\n  }))\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { OrderListModel } from './OrderListModel'\nimport { OrderMapModel } from './OrderMapModel'\n\nexport const OrderModel = types\n  .model('Order', {\n    list: types.optional(OrderListModel, {}),\n    map: types.optional(OrderMapModel, {}),\n  })\n  .actions(self => ({\n    invalidate() {\n      self.list.clearBranchFilter()\n    },\n  }))\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\n","import { endOfDay, startOfDay } from 'date-fns'\nimport { types } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\n\nexport interface IStatisticsDateFilter {\n  dateTimeFrom: Date\n  dateTimeTo: Date\n}\n\nexport const StatisticsModel = BaseModel.named('Statistics')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    drivers: types.optional(types.array(types.string), []),\n    closureBranch: types.maybeNull(types.string),\n  })\n  .volatile<IStatisticsDateFilter>(() => ({\n    dateTimeFrom: startOfDay(new Date()),\n    dateTimeTo: endOfDay(new Date()),\n  }))\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length > 0\n        ? Array.from(self.branches)\n        : self.root.user.branchesId\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.branches.clear()\n      self.drivers.clear()\n      self.closureBranch = null\n    },\n    updateFilter(formValues: IStatisticsDateFilter) {\n      self.dateTimeFrom = new Date(formValues.dateTimeFrom)\n      self.dateTimeTo = new Date(formValues.dateTimeTo)\n    },\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    setDriversFilter(drivers: ID[]) {\n      self.drivers.replace(drivers)\n    },\n    setClosureBranch(branch: MaybeID) {\n      self.closureBranch = branch\n    },\n    setTodayOrdersFilter() {\n      self.dateTimeFrom = startOfDay(new Date())\n      self.dateTimeTo = endOfDay(new Date())\n      self.branches.replace(self.root.order.list.branchesFilter)\n    },\n  }))\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TSettingsModel } from './SettingsModel'\n\nexport const SettingsBaseModel = BaseModel.named('SettingsBase').views(\n  self => ({\n    get settings() {\n      return getParent<TSettingsModel>(self)\n    },\n  }),\n)\n","import gql from 'graphql-tag'\n\nimport {\n  FMenuAllergenFragmentDoc,\n  FMenuWareUnitFragmentDoc,\n} from '../../../graph/generated'\n\nexport const MenuStockItemFragment = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...FMenuAllergen\n    }\n    wareUnit {\n      ...FMenuWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n  ${FMenuWareUnitFragmentDoc}\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport const MenuStockCreateMutation = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockUpdateMutation = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockDeleteMutation = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n","import { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuStockCreate,\n  GMenuStockDelete,\n  GMenuStockUpdate,\n} from '../../../graph/types'\nimport { TStockFormValues } from '../organisms/StockFormLoader'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuStockCreateMutation,\n  MenuStockDeleteMutation,\n  MenuStockUpdateMutation,\n} from './MenuStockModel.graphql'\n\nexport const MenuStockModel = MenuBaseModel.named('MenuStock').actions(\n  self => ({\n    createItem(formValues: TStockFormValues) {\n      const variables: GMenuStockCreate.Variables = {\n        stockItem: {\n          companyBranch: self.branchId,\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockCreateMutation,\n          variables,\n        }),\n      )\n    },\n    updateItem(formValues: TStockFormValues) {\n      const variables: GMenuStockUpdate.Variables = {\n        stockId: formValues.id,\n        stockItem: {\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteItem(stockId: ID) {\n      const variables: GMenuStockDelete.Variables = {\n        stockId,\n      }\n      await self.client.mutate({\n        mutation: MenuStockDeleteMutation,\n        variables,\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(formValues: TStockFormValues) {\n  return {\n    code: formValues.code,\n    label: formValues.nameLabel,\n    note: formValues.note,\n    plu: formValues.plu,\n    allergens: formValues.allergens,\n    wareUnit: formValues.wareUnit!,\n    allowNegative: formValues.allowNegative,\n  }\n}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { SettingsBaseModel } from '../../settings/models/SettingsBaseModel'\nimport { MenuCategoryModel } from './MenuCategoryModel'\nimport { MenuRecipeModel } from './MenuRecipeModel'\nimport { MenuStockModel } from './MenuStockModel'\n\nexport const MenuModel = SettingsBaseModel.named('Menu').props({\n  category: types.optional(MenuCategoryModel, {}),\n  recipe: types.optional(MenuRecipeModel, {}),\n  stock: types.optional(MenuStockModel, {}),\n})\n\nexport interface TMenuModel extends Instance<typeof MenuModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { BusinessHoursModel } from '../../businesshours/models/BusinessHoursModel'\nimport { MenuModel } from '../../menu/models/MenuModel'\n\nexport const SettingsModel = BaseModel.named('Settings')\n  .props({\n    selectedBranchId: types.maybe(types.string),\n    businessHours: types.optional(BusinessHoursModel, {}),\n    menu: types.optional(MenuModel, {}),\n  })\n  .views(self => ({\n    get branchId() {\n      return self.selectedBranchId || RM.head(self.root.user.defaultBranch.id)\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.selectedBranchId = undefined\n    },\n    selectBranch(branchId: ID) {\n      self.selectedBranchId = branchId\n    },\n  }))\n\nexport interface TSettingsModel extends Instance<typeof SettingsModel> {}\n","import { FCompanyBranchFragment } from '../../../graph/generated'\nimport { GZoneLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport { ZoneLocationQuery } from '../Zones.graphql'\n\ninterface IVolatileProps {\n  currentZonePoints: Maybe<GeoPoint[]>\n}\n\nexport const ZoneMapModel = MapModel.named('ZoneMap')\n  .volatile<IVolatileProps>(() => ({\n    currentZonePoints: null,\n  }))\n  .actions(self => ({\n    updateZonePoints(points: GeoPoint[]) {\n      self.currentZonePoints = points\n    },\n    clearZonePoints() {\n      self.currentZonePoints = null\n    },\n    async panToZone(zoneId: ID) {\n      const { data } = await self.client.query({\n        query: ZoneLocationQuery,\n        variables: { zoneId },\n      })\n      if (data) {\n        const {\n          zone: {\n            companyBranch: { gps },\n          },\n        } = data as GZoneLocation.Query\n        if (self.mapRef) {\n          self.mapRef.panTo(gpsToLatLng(gps))\n        }\n      }\n    },\n    async panToBranch(branch: FCompanyBranchFragment) {\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(branch.gps))\n      }\n    },\n  }))\n","import gql from 'graphql-tag'\n\nimport { FZoneFragmentDoc } from '../../../graph/generated'\n\nexport const CreateZoneMutation = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...FZone\n    }\n  }\n  ${FZoneFragmentDoc}\n`\n\nexport const UpdateZonePriorityMutation = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport const DestroyZoneMutation = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n","import { flow, Instance, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\n\nimport {\n  FCompanyBranchBrand,\n  FCompanyBranchFragment,\n  FZoneFragment,\n  FZonePriceRangeFragment,\n  MZoneUpdateVariables,\n} from '../../../graph/generated'\nimport {\n  GCreateZone,\n  GDestroyZone,\n  GUpdateZonePriority,\n} from '../../../graph/types'\nimport { generatePolygon } from '../../../helpers/gps'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { ZoneMapModel } from '../models/ZoneMapModel'\nimport {\n  CreateZoneMutation,\n  DestroyZoneMutation,\n  UpdateZonePriorityMutation,\n} from './ZoneModel.graphql'\n\ntype TBranch = FCompanyBranchFragment\ntype TBrand = FCompanyBranchBrand\n\ninterface IVolatileProps {\n  branch: Maybe<TBranch>\n}\n\nexport const ZoneModel = BaseModel.named('Zone')\n  .props({\n    map: types.optional(ZoneMapModel, {}),\n    brandId: types.maybeNull(types.string),\n  })\n  .volatile<IVolatileProps>(() => ({\n    branch: null,\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.brandId = null\n      self.branch = null\n    },\n  }))\n  .views(self => ({\n    get brand(): Maybe<TBrand> {\n      return (\n        (self.brandId &&\n          self.root.user.brands.find(RM.propEq('id', self.brandId))) ||\n        null\n      )\n    },\n    get hasBranchFilter() {\n      return self.branch !== null\n    },\n    get branchFilterId(): MaybeID {\n      return self.branch === null ? null : self.branch.id\n    },\n    get branchFilterPredicate() {\n      if (self.branch) {\n        return R.propEq('id', self.branch.id)\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), ['brand', 'id'])\n    },\n    get zoneFilterPredicate() {\n      if (self.branch !== null) {\n        return R.pathSatisfies(R.equals(self.branch.id), [\n          'companyBranch',\n          'id',\n        ])\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), [\n            'companyBranch',\n            'brand',\n            'id',\n          ])\n    },\n    get branches() {\n      return self.root.user.branches\n    },\n  }))\n  .views(self => ({\n    getZoneVariables(zoneId: ID, values: any): MZoneUpdateVariables {\n      return {\n        zoneId,\n        update: {\n          name: values.name,\n          enabled: values.enabled,\n          companyBranch: values.companyBranch.id,\n          zoneColor: values.zoneColor.id,\n          minimalOrderPrice: {\n            value: Number(values.minimalOrderPrice.value) || 0,\n          },\n          priceRangeRules: values.priceRangeRules\n            .map(normalizePriceRangeRule)\n            .filter(R.reject(R.pathEq(['price', 'value'], null))),\n          geoPolygon: self.map.currentZonePoints || undefined,\n        },\n      }\n    },\n  }))\n  .actions(self => ({\n    setBranchFilter(branch: TBranch) {\n      self.branch = branch\n      self.brandId = branch.brand.id\n    },\n    setBrandFilter(brand: TBrand, brandBranches: TBranch[]) {\n      self.brandId = brand.id\n      if (!self.branch || self.branch.brand.id !== brand.id) {\n        self.branch =\n          (brandBranches.length === 1 && RM.head(brandBranches)) || null\n      }\n    },\n    clearBranchFilter() {\n      self.branch = null\n    },\n    clearBrandFilter() {\n      self.brandId = null\n      self.branch = null\n    },\n  }))\n  .actions(self => ({\n    createZone: flow(function*(onZoneCreate: (zoneId: ID) => void) {\n      if (self.branch === null) {\n        throw new Error('Called createZone without branch being set')\n      }\n      const points = generatePolygon({\n        center: self.branch.gps,\n        metersRadius: 1000,\n        pointsCount: 5,\n      })\n      const variables: GCreateZone.Variables = {\n        branchId: self.branch.id,\n        points,\n      }\n      const { data } = yield self.client.mutate({\n        mutation: CreateZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: (prev, { mutationResult }) => {\n            const zone = (mutationResult.data as GCreateZone.Mutation)\n              .createZone\n            if (zone) {\n              return {\n                ...prev,\n                zones: prev.zones.concat(zone),\n              }\n            }\n            return prev\n          },\n        },\n      })\n      if (data) {\n        const zone = (data as GCreateZone.Mutation).createZone\n        onZoneCreate(zone.id)\n      }\n    }),\n    destroyZone(zoneId: ID) {\n      if (!zoneId) {\n        return\n      }\n      const variables: GDestroyZone.Variables = {\n        zoneId,\n      }\n      return self.client.mutate({\n        mutation: DestroyZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: prev => {\n            return {\n              ...prev,\n              zones: R.reject(R.propEq('id', zoneId), prev.zones),\n            }\n          },\n        },\n      })\n    },\n    changeZonePriority: flow(function*(\n      zone: FZoneFragment,\n      oldIndex: number,\n      newIndex: number,\n    ) {\n      if (!zone || oldIndex === newIndex) {\n        return\n      }\n      const offset = oldIndex - newIndex\n\n      const variables: GUpdateZonePriority.Variables = {\n        zoneId: zone.id,\n        offset,\n      }\n      yield self.client.mutate({\n        mutation: UpdateZonePriorityMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          updateZonePriority: {\n            __typename: 'Zone',\n            id: zone.id,\n            priority: zone.priority + offset,\n          },\n        },\n      })\n    }),\n  }))\n\nfunction numberOrNull(value: string | number | null) {\n  if (value === null) {\n    return null\n  }\n  const num = Number(value)\n  return Number.isNaN(num) ? null : num\n}\n\nfunction normalizePriceRangeRule(range: FZonePriceRangeFragment) {\n  return {\n    price: { value: numberOrNull(range.price.value) },\n    toPrice: { value: numberOrNull(range.toPrice.value) || -1 },\n  }\n}\n\nexport interface TZoneModel extends Instance<typeof ZoneModel> {}\n","import { DefaultApolloClient } from '@speedlo/graphql'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { AuthModel } from '../models/AuthModel'\nimport { ConfigModel } from '../models/ConfigModel'\nimport { UserModel } from '../models/UserModel'\nimport { CreateOrderModel } from '../segments/createorder/models/CreateOrderModel'\nimport { OrderModel } from '../segments/order/models/OrderModel'\nimport { StatisticsModel } from '../segments/overview/models/StatisticsModel'\nimport { SettingsModel } from '../segments/settings/models/SettingsModel'\nimport { ZoneModel } from '../segments/zones/models/ZoneModel'\nimport { BaseModel } from './BaseModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    user: types.optional(UserModel, {}),\n    order: types.optional(OrderModel, {}),\n    createOrder: types.optional(CreateOrderModel, {}),\n    zone: types.optional(ZoneModel, {}),\n    settings: types.optional(SettingsModel, {}),\n    config: types.optional(ConfigModel, {}),\n    statistics: types.optional(StatisticsModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.settings,\n        self.zone,\n        self.order,\n        self.statistics,\n        self.createOrder,\n      ]\n    },\n  }))\n  .volatile(() => ({\n    apolloClient: (null as unknown) as DefaultApolloClient,\n  }))\n  .actions(self => ({\n    setClient(client: DefaultApolloClient) {\n      self.apolloClient = client\n    },\n  }))\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import { ApolloProvider } from '@speedlo/graphql'\nimport { useAsyncEffect } from '@speedlo/hooks'\nimport React from 'react'\n\nimport { RootContext } from '../context/RootContext'\nimport { createApolloClient } from '../graph/createClient'\nimport { persistModel } from '../helpers/persistModel'\nimport { RootModel } from '../models/RootModel'\nimport PageLoader from './PageLoader'\n\nexport const RootProvider: React.FC = ({ children }) => {\n  const [isInit, setInit] = React.useState(false)\n\n  const [root] = React.useState(() => RootModel.create())\n  const [client] = React.useState(() => {\n    const newClient = createApolloClient(root)\n    // TODO: Required for legacy code of calling GraphQL from models\n    root.setClient(newClient)\n    return newClient\n  })\n\n  useAsyncEffect(async () => {\n    if (process.env.REACT_APP_STAGE === 'dev') {\n      // @ts-ignore\n      window.root = root\n    }\n    await Promise.all(root.persistedModels.map(persistModel))\n    setInit(true)\n  }, [root])\n\n  if (!isInit) {\n    return <PageLoader />\n  }\n\n  return (\n    <ApolloProvider client={client}>\n      <RootContext.Provider value={root}>\n        {React.Children.only(children)}\n      </RootContext.Provider>\n    </ApolloProvider>\n  )\n}\n\nexport const useRoot = () => {\n  const root = React.useContext(RootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n","import {\n  createAuthLink,\n  createDefaultApolloClient,\n  createLogLink,\n  createNetworkLink,\n  createOfflineLink,\n  createRetryLink,\n} from '@speedlo/graphql'\n\nimport { appConfig } from '../config'\nimport { TRootModel } from '../models/RootModel'\n\nexport function createApolloClient(root: TRootModel) {\n  return createDefaultApolloClient(\n    createAuthLink({\n      enableTokenCache: false,\n      getToken: () => root.auth.token,\n      onInvalidToken: () => root.auth.invalidate(),\n    }),\n    createLogLink(),\n    createRetryLink(),\n    createOfflineLink(),\n    createNetworkLink(appConfig.endpoint),\n  )\n}\n"],"sourceRoot":""}