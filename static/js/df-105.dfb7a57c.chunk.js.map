{"version":3,"sources":["../node_modules/date-fns/locale/fi/_lib/formatDistance/index.js"],"names":["futureSeconds","text","replace","futureMinutes","futureHours","futureMonths","futureYears","Object","defineProperty","exports","value","default","token","count","options","distance","formatDistanceLocale","result","one","other","addSuffix","comparison","futureTense","lessThanXSeconds","xSeconds","halfAMinute","_text","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","module"],"mappings":"sGAOA,SAASA,EAAcC,GACrB,OAAOA,EAAKC,QAAQ,YAAa,YAGnC,SAASC,EAAcF,GACrB,OAAOA,EAAKC,QAAQ,aAAc,YAGpC,SAASE,EAAYH,GACnB,OAAOA,EAAKC,QAAQ,UAAW,UAOjC,SAASG,EAAaJ,GACpB,OAAOA,EAAKC,QAAQ,uBAAwB,aAG9C,SAASI,EAAYL,GACnB,OAAOA,EAAKC,QAAQ,iBAAkB,UA1BxCK,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,QAqGR,SAAwBC,EAAOC,EAAOC,GACpCA,EAAUA,GAAW,GACrB,IAAIC,EAAWC,EAAqBJ,GAChCK,EAAmB,IAAVJ,EAAcE,EAASG,IAAMH,EAASI,MAAMjB,QAAQ,YAAaW,GAE9E,GAAIC,EAAQM,UACV,OAAIN,EAAQO,WAAa,EAChBN,EAASO,YAAYL,GAAU,YAE/BA,EAAS,UAIpB,OAAOA,GAxFT,IAAID,EAAuB,CACzBO,iBAAkB,CAChBL,IAAK,eACLC,MAAO,0BACPG,YAAatB,GAEfwB,SAAU,CACRN,IAAK,UACLC,MAAO,qBACPG,YAAatB,GAEfyB,YAAa,CACXP,IAAK,kBACLC,MAAO,kBACPG,YAAa,SAAUI,GACrB,MAAO,oBAGXC,iBAAkB,CAChBT,IAAK,gBACLC,MAAO,2BACPG,YAAanB,GAEfyB,SAAU,CACRV,IAAK,WACLC,MAAO,sBACPG,YAAanB,GAEf0B,YAAa,CACXX,IAAK,aACLC,MAAO,wBACPG,YAAalB,GAEf0B,OAAQ,CACNZ,IAAK,QACLC,MAAO,mBACPG,YAAalB,GAEf2B,MAAO,CACLb,IAAK,cACLC,MAAO,4BACPG,YArDJ,SAAoBrB,GAClB,OAAOA,EAAKC,QAAQ,mBAAW,kBAsD/B8B,aAAc,CACZd,IAAK,gBACLC,MAAO,2BACPG,YAAajB,GAEf4B,QAAS,CACPf,IAAK,WACLC,MAAO,sBACPG,YAAajB,GAEf6B,YAAa,CACXhB,IAAK,aACLC,MAAO,wBACPG,YAAahB,GAEf6B,OAAQ,CACNjB,IAAK,QACLC,MAAO,mBACPG,YAAahB,GAEf8B,WAAY,CACVlB,IAAK,YACLC,MAAO,uBACPG,YAAahB,GAEf+B,aAAc,CACZnB,IAAK,iBACLC,MAAO,4BACPG,YAAahB,IAoBjBgC,EAAO7B,QAAUA,EAAQE","file":"static/js/df-105.dfb7a57c.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatDistance;\n\nfunction futureSeconds(text) {\n  return text.replace(/sekuntia?/, 'sekunnin');\n}\n\nfunction futureMinutes(text) {\n  return text.replace(/minuuttia?/, 'minuutin');\n}\n\nfunction futureHours(text) {\n  return text.replace(/tuntia?/, 'tunnin');\n}\n\nfunction futureDays(text) {\n  return text.replace(/päivää?/, 'päivän');\n}\n\nfunction futureMonths(text) {\n  return text.replace(/(kuukausi|kuukautta)/, 'kuukauden');\n}\n\nfunction futureYears(text) {\n  return text.replace(/(vuosi|vuotta)/, 'vuoden');\n}\n\nvar formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'alle sekunti',\n    other: 'alle {{count}} sekuntia',\n    futureTense: futureSeconds\n  },\n  xSeconds: {\n    one: 'sekunti',\n    other: '{{count}} sekuntia',\n    futureTense: futureSeconds\n  },\n  halfAMinute: {\n    one: 'puoli minuuttia',\n    other: 'puoli minuuttia',\n    futureTense: function (_text) {\n      return 'puolen minuutin';\n    }\n  },\n  lessThanXMinutes: {\n    one: 'alle minuutti',\n    other: 'alle {{count}} minuuttia',\n    futureTense: futureMinutes\n  },\n  xMinutes: {\n    one: 'minuutti',\n    other: '{{count}} minuuttia',\n    futureTense: futureMinutes\n  },\n  aboutXHours: {\n    one: 'noin tunti',\n    other: 'noin {{count}} tuntia',\n    futureTense: futureHours\n  },\n  xHours: {\n    one: 'tunti',\n    other: '{{count}} tuntia',\n    futureTense: futureHours\n  },\n  xDays: {\n    one: 'päivä',\n    other: '{{count}} päivää',\n    futureTense: futureDays\n  },\n  aboutXMonths: {\n    one: 'noin kuukausi',\n    other: 'noin {{count}} kuukautta',\n    futureTense: futureMonths\n  },\n  xMonths: {\n    one: 'kuukausi',\n    other: '{{count}} kuukautta',\n    futureTense: futureMonths\n  },\n  aboutXYears: {\n    one: 'noin vuosi',\n    other: 'noin {{count}} vuotta',\n    futureTense: futureYears\n  },\n  xYears: {\n    one: 'vuosi',\n    other: '{{count}} vuotta',\n    futureTense: futureYears\n  },\n  overXYears: {\n    one: 'yli vuosi',\n    other: 'yli {{count}} vuotta',\n    futureTense: futureYears\n  },\n  almostXYears: {\n    one: 'lähes vuosi',\n    other: 'lähes {{count}} vuotta',\n    futureTense: futureYears\n  }\n};\n\nfunction formatDistance(token, count, options) {\n  options = options || {};\n  var distance = formatDistanceLocale[token];\n  var result = count === 1 ? distance.one : distance.other.replace('{{count}}', count);\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return distance.futureTense(result) + ' kuluttua';\n    } else {\n      return result + ' sitten';\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = exports.default;"],"sourceRoot":""}