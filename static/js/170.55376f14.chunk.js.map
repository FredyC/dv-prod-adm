{"version":3,"sources":["segments/login/routes/PasswordLoginRoute.tsx","atoms/FormInputTextBox.tsx","atoms/FormInputStyled.tsx","molecules/FormSubmit.tsx","helpers/form.ts","atoms/LoginPageBackground.tsx","assets/bg_login.jpg","assets/bg_login@2x.jpg","segments/login/pages/PasswordLoginPage.tsx","segments/login/molecules/PasswordLoginError.tsx","atoms/NotifyMessage.tsx","segments/login/organisms/PasswordLoginForm.tsx"],"names":["_react","__webpack_require__","_reactRouterDom","_RootProvider","_PasswordLoginPage","PasswordLoginRoute","auth","useRoot","isAuthenticatedUser","default","createElement","Redirect","to","PasswordLoginPage","model","provider","passwordLogin","_reactForm","_validator","_i18n","_FormInputStyled","FormInputTextBox","forwardRef","_a","inputRef","field","inputFullWidth","isRequired","validatioName","validationMessage","validate","props","__rest","Field","value","isEmpty","i18n","_","fieldApi","FormInputStyled","_extends","onChange","ev","setTouched","setValue","target","invalid","Boolean","error","ref","_styledComponents","_interopRequireWildcard","_styling","invalidInputStyle","css","fullWidthStyle","input","withConfig","displayName","Spacing","MarginAroundFormComponents","_form","_TouchButton","children","FormApi","form","TouchButton","color","Colors","green","disabled","isFormValid","submitting","onClick","e","preventDefault","submitForm","formState","errors","Object","keys","length","fieldName","_interopRequireDefault","_bg_login","_bg_login2x","LoginPageBackground","div","module","exports","p","_GridLayout","_LoginPageBackground","_PageTitle","_PasswordLoginError","_PasswordLoginForm","PageTitle","title","GridLayout","layouts","i","x","y","w","h","key","Display","PasswordLoginForm","PasswordLoginError","_mobxReactLite","_NotifyMessage","observer","hasFailed","NotifyMessage","isVisible","isError","errorMessage","NotifyMessageContainerStyled","red","NotifyMessageStyled","InfoMessageFontSize","data-testid","_react2","_FormInputTextBox","_FormSubmit","LoginContainerStyled","PasswordContainerStyled","SubmitButtonContainerStyled","Form","onSubmit","username","password","requestToken","render","formApi","name","autoFocus","placeholder","type","FormSubmit","Trans","id"],"mappings":"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","file":"static/js/170.55376f14.chunk.js","sourcesContent":["import React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { PasswordLoginPage } from '../pages/PasswordLoginPage'\n\nexport const PasswordLoginRoute: React.FC = () => {\n  const { auth } = useRoot()\n  return auth.isAuthenticatedUser ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <PasswordLoginPage model={auth.provider.passwordLogin} />\n  )\n}\n\nexport default PasswordLoginRoute\n","import React from 'react'\nimport { Field, FieldType, ValidationResult } from 'react-form'\nimport { isEmpty } from 'validator'\n\nimport { i18n } from '../i18n'\nimport { FormInputStyled } from './FormInputStyled'\n\ninterface IProps extends React.InputHTMLAttributes<never> {\n  field: FieldType\n  defaultValue?: string\n  isRequired?: boolean\n  validatioName?: string\n  validationMessage?: string\n  inputFullWidth?: boolean\n  validate?(value: string): ValidationResult\n}\n\nexport type TFormInputTextBoxProps = IProps\n\nexport const FormInputTextBox = React.forwardRef<HTMLInputElement, IProps>(\n  (\n    {\n      field,\n      inputFullWidth = false,\n      isRequired,\n      validatioName,\n      validationMessage,\n      validate,\n      ...props\n    },\n    inputRef,\n  ) => (\n    <Field\n      field={field}\n      validate={\n        validate ||\n        (value => {\n          if (isRequired && isEmpty(value + '')) {\n            if (validationMessage) {\n              return validationMessage\n            }\n            return i18n.t`${validatioName} is required`\n          }\n          return null\n        })\n      }\n    >\n      {fieldApi => (\n        <FormInputStyled\n          value={!fieldApi.value && fieldApi.value !== 0 ? '' : fieldApi.value}\n          onChange={ev => {\n            fieldApi.setTouched(true)\n            fieldApi.setValue(ev.target.value)\n          }}\n          inputFullWidth={inputFullWidth}\n          invalid={Boolean(fieldApi.error)}\n          // @ts-ignore\n          ref={inputRef}\n          {...props}\n        />\n      )}\n    </Field>\n  ),\n)\n","import styled, { css } from 'styled-components'\n\nimport { Spacing } from '../styling'\n\ninterface IFormInputStyled {\n  invalid?: boolean\n  inputFullWidth?: boolean\n}\n\nconst invalidInputStyle = css`\n  border: 1px red solid;\n`\nconst fullWidthStyle = css`\n  width: 100%;\n`\nexport const FormInputStyled = styled.input`\n  margin: ${Spacing.MarginAroundFormComponents};\n  ${({ inputFullWidth }: IFormInputStyled) => inputFullWidth && fullWidthStyle};\n  ${({ invalid }: IFormInputStyled) => invalid && invalidInputStyle};\n`\n","import React from 'react'\nimport { FormApi } from 'react-form'\n\nimport { isFormValid } from '../helpers/form'\nimport { ITouchButtonProps, TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\ninterface IProps extends ITouchButtonProps {}\n\nexport const FormSubmit: React.SFC<IProps> = ({ children, ...props }) => (\n  <FormApi>\n    {form => (\n      <TouchButton\n        color={Colors.green}\n        disabled={!isFormValid(form) || form.submitting}\n        onClick={e => {\n          e.preventDefault()\n          form.submitForm(e)\n        }}\n        {...props}\n      >\n        {children}\n      </TouchButton>\n    )}\n  </FormApi>\n)\n","import { IFormState } from 'react-form'\nimport { isEmpty } from 'validator'\n\nimport { i18n } from '../i18n'\n\nexport function isFormValid(formState: IFormState) {\n  return !formState.errors || Object.keys(formState.errors).length === 0\n}\n\nexport function validateIsRequired(fieldName: string) {\n  return (value: string) =>\n    isEmpty(value + '') ? i18n.t`${fieldName} must be entered` : null\n}\n","import styled from 'styled-components'\n\nimport backgroundImage from '../assets/bg_login.jpg'\nimport backgroundImage2x from '../assets/bg_login@2x.jpg'\n\nexport const LoginPageBackground = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-image: url(${backgroundImage});\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n\n  @media only screen and (-webkit-min-device-pixel-ratio: 1.3),\n    only screen and (min--moz-device-pixel-ratio: 1.3),\n    only screen and (-o-min-device-pixel-ratio: 2.6/2),\n    only screen and (min-device-pixel-ratio: 1.3),\n    only screen and (min-width: 1024px) {\n    background-image: url(${backgroundImage2x});\n  }\n`\n","module.exports = __webpack_public_path__ + \"static/media/bg_login.382d98be.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_login@2x.35ab1818.jpg\";","import React from 'react'\n\nimport { GridLayout } from '../../../atoms/GridLayout'\nimport { LoginPageBackground } from '../../../atoms/LoginPageBackground'\nimport { PageTitle } from '../../../atoms/PageTitle'\nimport { i18n } from '../../../i18n'\nimport { TPasswordLoginModel } from '../models/PasswordLoginModel'\nimport { PasswordLoginError } from '../molecules/PasswordLoginError'\nimport { PasswordLoginForm } from '../organisms/PasswordLoginForm'\n\ninterface IPasswordLoginPageProps {\n  model: TPasswordLoginModel\n}\n\nfunction getLayout() {\n  return [\n    { i: 'title', x: 6, y: 2, w: 8, h: 1 },\n    { i: 'loginform', x: 6, y: 3, w: 8, h: 4 },\n  ]\n}\n\nexport const PasswordLoginPage: React.SFC<IPasswordLoginPageProps> = ({\n  model,\n}) => (\n  <LoginPageBackground>\n    <PageTitle title={i18n.t`Login page`} />\n    <GridLayout layouts={getLayout()}>\n      <div key=\"title\">\n        <PageTitle.Display />\n      </div>\n      <div key=\"loginform\">\n        <PasswordLoginForm model={model} />\n      </div>\n    </GridLayout>\n    <PasswordLoginError model={model} />\n  </LoginPageBackground>\n)\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { NotifyMessage } from '../../../atoms/NotifyMessage'\nimport { TPasswordLoginModel } from '../models/PasswordLoginModel'\n\ninterface IPasswordLoginErrorProps {\n  model: TPasswordLoginModel\n}\n\nexport const PasswordLoginError = observer<IPasswordLoginErrorProps>(\n  ({ model }) =>\n    model.hasFailed ? (\n      <NotifyMessage isVisible={true} isError={true}>\n        {model.errorMessage}\n      </NotifyMessage>\n    ) : null,\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors, Spacing } from '../styling'\n\ninterface INotifyMessageProps {\n  isError?: Boolean\n  isVisible: Boolean\n  onClick?(): void\n}\n\nconst backgroundProperty = (props: INotifyMessageProps) =>\n  props.isError ? Colors.red : Colors.green\n\nconst NotifyMessageContainerStyled = styled.div`\n  position: relative;\n  border-radius: 1rem;\n  width: 60%;\n  height: 3.9rem;\n  opacity: 0.85;\n  left: 20%;\n  background: ${backgroundProperty};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst NotifyMessageStyled = styled.div`\n  color: white;\n  text-align: center;\n  margin: 0 0.5rem 0.4rem 0.5rem;\n  font-size: ${Spacing.InfoMessageFontSize};\n`\n\nexport const NotifyMessage: React.SFC<INotifyMessageProps> = ({\n  children,\n  isVisible,\n  isError = false,\n  onClick,\n  ...props\n}) =>\n  isVisible ? (\n    <NotifyMessageContainerStyled\n      onClick={onClick}\n      isVisible={isVisible}\n      isError={isError}\n      {...props}\n    >\n      <NotifyMessageStyled data-testid={`notify${isError ? '-error' : ''}`}>\n        {children}\n      </NotifyMessageStyled>\n    </NotifyMessageContainerStyled>\n  ) : null\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport { Form } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { i18n } from '../../../i18n'\nimport { FormSubmit } from '../../../molecules/FormSubmit'\nimport { TPasswordLoginModel } from '../models/PasswordLoginModel'\n\ninterface IPasswordLoginFormProps {\n  model: TPasswordLoginModel\n}\n\nconst LoginContainerStyled = styled.div`\n  display: inline-block;\n  margin: 0.5rem;\n`\nconst PasswordContainerStyled = styled.div`\n  margin: 0.5rem;\n`\nconst SubmitButtonContainerStyled = styled.div`\n  display: inline-block;\n  width: 14rem;\n  margin: 0.5rem;\n`\n\ninterface IFormValues {\n  username: string\n  password: string\n}\n\nexport const PasswordLoginForm: React.SFC<IPasswordLoginFormProps> = ({\n  model,\n}) => (\n  <Form\n    onSubmit={({ username, password }: IFormValues) =>\n      model.requestToken(username, password)\n    }\n    render={formApi => (\n      <form onSubmit={formApi.submitForm}>\n        <LoginContainerStyled>\n          <FormInputTextBox\n            field=\"username\"\n            name=\"username\"\n            isRequired={true}\n            validatioName={i18n.t`username`}\n            autoFocus={true}\n            placeholder={i18n.t`username`}\n          />\n        </LoginContainerStyled>\n\n        <PasswordContainerStyled>\n          <FormInputTextBox\n            field=\"password\"\n            name=\"password\"\n            isRequired={true}\n            validatioName={i18n.t`password`}\n            type=\"password\"\n            placeholder={i18n.t`password`}\n          />\n        </PasswordContainerStyled>\n\n        <SubmitButtonContainerStyled>\n          <FormSubmit>\n            <Trans>Sign-in</Trans>\n          </FormSubmit>\n        </SubmitButtonContainerStyled>\n      </form>\n    )}\n  />\n)\n"],"sourceRoot":""}