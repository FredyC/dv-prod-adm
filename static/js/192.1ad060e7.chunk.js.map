{"version":3,"sources":["atoms/VerticalGap.tsx","segments/settings/organisms/UserMenuLanguage.tsx","segments/settings/pages/UserMenuPage.tsx"],"names":["VerticalGap","styled","div","size","sizeUnit","displayName","UserMenuLanguage","useRoot","auth","user","useQUserMenuLanguages","data","loading","refetch","useMUserMenuLanguage","updateUserLanguage","React","useState","language","setLanguage","useEffect","langCode","languages","find","RM","propEq","isUpdating","setUpdating","useObserver","Sizer","width","margin","SelectControl","isLoading","options","getOptionLabel","prop","getOptionValue","value","onChange","lang","a","TouchButton","onClick","userId","enum","rawCode","color","Colors","green","disabled","UserMenuPage","FullPageLayout","pageTitle","i18n","Card","Headline"],"mappings":"6OAOO,IAAMA,E,MAAcC,QAAOC,IAAV,IACZ,oBAAGC,YAAH,MAAU,EAAV,MAAaC,gBAAb,MAAwB,MAAxB,kBACLD,GADK,OACEC,KAGdJ,EAAYK,YAAc,e,iOCSbC,EAAqC,WAAO,IAAD,EAC/BC,cAAfC,EAD8C,EAC9CA,KAAMC,EADwC,EACxCA,KADwC,EAEnBC,eAA3BC,EAF8C,EAE9CA,KAAMC,EAFwC,EAExCA,QAASC,EAF+B,EAE/BA,QAF+B,EAGzBC,eAAtBC,EAH+C,sBAKtBC,IAAMC,SAAuB,MALP,mBAK/CC,EAL+C,KAKrCC,EALqC,KAOtDH,IAAMI,UAAU,WACd,GAAiB,OAAbF,IAAsBN,EAAS,CACjC,IAAMS,EAAWV,EAAKW,UAAUC,KAAKC,IAAGC,OAAO,UAAWhB,EAAKS,WAC3DG,GACFF,EAAYE,KAGf,CAACV,EAAMO,EAAUN,EAASH,IAdyB,MAgBpBO,IAAMC,UAAS,GAhBK,mBAgB/CS,EAhB+C,KAgBnCC,EAhBmC,KAkBtD,OAAOC,sBAAY,kBACjB,kBAACC,EAAA,EAAD,CAAOC,MAAO,GAAIC,OAAO,QACvB,kBAACC,EAAA,EAAD,CACEC,UAAWrB,EACXsB,QAAStB,EAAU,GAAH,YAAYD,EAAKW,WACjCa,eAAgBX,IAAGY,KAAK,QACxBC,eAAgBb,IAAGY,KAAK,QACxBE,MAAOpB,EACPqB,SAAQ,sCAAE,WAAMC,GAAN,SAAAC,EAAA,qDACJD,GACFrB,EAAYqB,GAFN,yCAAF,wDAMV,kBAACxC,EAAA,EAAD,MACA,kBAAC0C,EAAA,EAAD,CACEC,QAAO,qBAAE,sBAAAF,EAAA,yDACHvB,EADG,wBAELS,GAAY,GAFP,SAGoBZ,EAAmB,CAC1C6B,OAAQpC,EAAKoC,OACbJ,KAAMtB,EAAS2B,OALZ,kDAQGhC,IARH,OASHJ,EAAKU,YAAYD,EAAS4B,SATvB,OAcLnB,GAAY,GAdP,0CAiBToB,MAAOC,IAAOC,MACdC,SAAUxB,GAETA,EACC,kBAAC,QAAD,6BAEA,kBAAC,QAAD,6BCxDKyB,UAbgB,WAC7B,OACE,kBAACC,EAAA,EAAD,CAAgBC,UAAWC,EAAA,EAAK,EAAD,SAC7B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,QAAD,8BAEF,kBAAC,EAAD","file":"static/js/192.1ad060e7.chunk.js","sourcesContent":["import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import { Trans } from '@lingui/macro'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport {\n  useMUserMenuLanguage,\n  useQUserMenuLanguages,\n} from '../../../graph/generated'\nimport { QUserMenuLanguages } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IProps {}\n\ntype TLang = QUserMenuLanguages.Languages\n\nexport const UserMenuLanguage: React.FC<IProps> = () => {\n  const { auth, user } = useRoot()\n  const { data, loading, refetch } = useQUserMenuLanguages()\n  const [updateUserLanguage] = useMUserMenuLanguage()\n\n  const [language, setLanguage] = React.useState<Maybe<TLang>>(null)\n\n  React.useEffect(() => {\n    if (language === null && !loading) {\n      const langCode = data.languages.find(RM.propEq('rawCode', user.language))\n      if (langCode) {\n        setLanguage(langCode)\n      }\n    }\n  }, [data, language, loading, user])\n\n  const [isUpdating, setUpdating] = React.useState(false)\n\n  return useObserver(() => (\n    <Sizer width={20} margin=\"1rem\">\n      <SelectControl<TLang>\n        isLoading={loading}\n        options={loading ? [] : [...data.languages]}\n        getOptionLabel={RM.prop('code')}\n        getOptionValue={RM.prop('enum')}\n        value={language}\n        onChange={async lang => {\n          if (lang) {\n            setLanguage(lang as TLang)\n          }\n        }}\n      />\n      <VerticalGap />\n      <TouchButton\n        onClick={async () => {\n          if (language) {\n            setUpdating(true)\n            const updateData = await updateUserLanguage({\n              userId: auth.userId!,\n              lang: language.enum,\n            })\n            if (updateData) {\n              await refetch()\n              user.setLanguage(language.rawCode)\n              // Not possible to do because new language won't be loaded yet\n              // and message would be shown with old language\n              // enqueueSuccess(i18n.t`Language has been changed`)\n            }\n            setUpdating(false)\n          }\n        }}\n        color={Colors.green}\n        disabled={isUpdating}\n      >\n        {isUpdating ? (\n          <Trans>Changing language...</Trans>\n        ) : (\n          <Trans>Change language</Trans>\n        )}\n      </TouchButton>\n    </Sizer>\n  ))\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { UserMenuLanguage } from '../organisms/UserMenuLanguage'\n\nconst UserMenuPage: React.FC = () => {\n  return (\n    <FullPageLayout pageTitle={i18n.t`User`}>\n      <Card>\n        <Headline>\n          <Trans>Application language</Trans>\n        </Headline>\n        <UserMenuLanguage />\n      </Card>\n    </FullPageLayout>\n  )\n}\n\nexport default UserMenuPage\n"],"sourceRoot":""}