{"version":3,"sources":["helpers/form.ts","atoms/FormInputStyled.tsx","../node_modules/@speedlo/assets/flags sync /^/.*/.svg$","../node_modules/@speedlo/assets/logos sync /^/logo/-.*/.svg$","atoms/FormInputTextBox.tsx","atoms/LoginPageBackground.tsx","assets/bg_login.jpg","assets/bg_login@2x.jpg","segments/login/molecules/PasswordPageGrid.tsx","atoms/NotifyMessage.tsx","segments/login/molecules/PasswordLoginError.tsx","segments/login/molecules/PasswordResetLink.tsx","molecules/FormSubmit.tsx","segments/login/organisms/PasswordLoginForm.tsx","segments/login/pages/PasswordLoginPage.tsx","segments/login/routes/PasswordLoginRoute.tsx"],"names":["isFormValid","formState","errors","Object","keys","length","fieldIsRequiredMsg","fieldDescription","fieldIsPositiveNumberMsg","validateAsNumberField","yup","number","default","transform","_","origValue","parseNumber","test","fieldIsNumberMsg","value","isNaN","ARRAY_EMPTY","FormInputStyled","styled","input","attrs","invalid","inputFullWidth","className","cn","fullWidth","Spacing","MarginAroundFormComponents","Colors","red","errorBackground","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","resolve","module","exports","FormInputTextBox","React","forwardRef","inputRef","field","isRequired","validatioName","validationMessage","validate","props","isEmpty","fieldApi","onChange","ev","target","validity","valid","setTouched","setValue","Boolean","error","ref","LoginPageBackground","div","backgroundImage","backgroundImage2x","PasswordPageGrid","Middle","Small","backgroundProperty","isError","green","StyledNotifyMessage","mediaDesktop","mediaMobile","white","FontSizes","InfoMessageFontSize","NotifyMessage","children","isVisible","onClick","data-testid","PasswordLoginError","observer","model","hasFailed","errorMessage","PasswordResetLink","to","ROUTE_AUTH_RESET_PASSWORD","TouchButton","color","greyMiddle","FormSubmit","form","type","disabled","submitting","preventDefault","submitForm","PasswordLoginForm","onSubmit","username","password","requestToken","render","formApi","name","i18n","autoFocus","autoCorrect","autoCapitalize","spellCheck","placeholder","MarginBox","margin","StyledPasswordLoginPage","PasswordLoginPage","PageTitle","title","PageLayoutGridItem","gridRow","gridRowSpan","gridColumn","gridColumnInMobile","gridColumnSpan","gridRowInMobile","gridColumnSpanInMobile","Display","gridRowSpanInMobile","PasswordLoginRoute","auth","useRoot","params","useRouteParams","ROUTE_AUTH_LOGIN","useEffect","authenticate","window","atob","token","userId","isAuthenticatedUser","ROUTE_MAIN","provider","passwordLogin"],"mappings":"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","file":"static/js/384.5f193f5f.chunk.js","sourcesContent":["import { yup } from '@speedlo/xform'\nimport { IFormState } from 'react-form'\n\nimport { i18n } from '../i18n'\nimport { parseNumber } from './numeral'\n\nexport function isFormValid(formState: IFormState) {\n  return !formState.errors || Object.keys(formState.errors).length === 0\n}\n\nexport function fieldIsRequiredMsg(fieldDescription: string) {\n  return i18n.t`Field ${fieldDescription} cannot be empty`\n}\n\nexport function fieldIsNumberMsg(fieldDescription: string) {\n  return i18n.t`Field ${fieldDescription} must be a number`\n}\n\nexport function fieldIsPositiveNumberMsg(fieldDescription: string) {\n  return i18n.t`Field ${fieldDescription} must be a positive number`\n}\n\nexport const validateAsNumberField = (fieldDescription: string) =>\n  yup\n    .number()\n    .default(0)\n    .transform((_, origValue) => parseNumber(origValue))\n    .test(\n      'number-field',\n      fieldIsNumberMsg(fieldDescription),\n      value => !isNaN(value),\n    )\n\nexport const ARRAY_EMPTY: RoA<any> = []\n","import { cn } from '@speedlo/ui'\nimport styled from 'styled-components/macro'\n\nimport { Colors, Spacing } from '../styling'\n\ninterface IProps {\n  invalid?: boolean\n  inputFullWidth?: boolean\n}\n\nexport const FormInputStyled = styled.input.attrs<IProps>(\n  ({ invalid = false, inputFullWidth = false }) => ({\n    className: cn({ invalid, fullWidth: inputFullWidth }),\n  }),\n)<IProps>`\n  margin: ${Spacing.MarginAroundFormComponents};\n  &.invalid {\n    border: 1px ${Colors.red} solid;\n    background-color: ${Colors.errorBackground};\n  }\n  &.fullWidth {\n    width: 100%;\n  }\n`\n\n// TODO: Rename all uses in separate commit\nexport { FormInputStyled as StyledFormInput }\n","var map = {\n\t\"./cs.svg\": 1400,\n\t\"./de.svg\": 1401,\n\t\"./en.svg\": 1402,\n\t\"./pl.svg\": 1403,\n\t\"./sk.svg\": 1404\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1399;","var map = {\n\t\"./logo-doveze.svg\": 1406,\n\t\"./logo-gopay.svg\": 1407,\n\t\"./logo-mastercard.svg\": 1408,\n\t\"./logo-visa.svg\": 1409\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1405;","import React from 'react'\nimport { Field, FieldType, ValidationResult } from 'react-form'\nimport { isEmpty } from 'validator'\n\nimport { i18n } from '../i18n'\nimport { FormInputStyled } from './FormInputStyled'\n\ninterface IProps extends React.InputHTMLAttributes<never> {\n  field: FieldType\n  defaultValue?: string\n  isRequired?: boolean\n  validatioName?: string\n  validationMessage?: string\n  inputFullWidth?: boolean\n  validate?(value: string): ValidationResult\n}\n\nexport type TFormInputTextBoxProps = IProps\n\nexport const FormInputTextBox = React.forwardRef<HTMLInputElement, IProps>(\n  (\n    {\n      field,\n      inputFullWidth = false,\n      isRequired,\n      validatioName,\n      validationMessage,\n      validate,\n      ...props\n    },\n    inputRef,\n  ) => (\n    <Field\n      field={field}\n      validate={\n        validate ||\n        (value => {\n          if (isRequired && isEmpty(value + '')) {\n            if (validationMessage) {\n              return validationMessage\n            }\n            return i18n.t`${validatioName} is required`\n          }\n          return null\n        })\n      }\n    >\n      {fieldApi => (\n        <FormInputStyled\n          value={!fieldApi.value && fieldApi.value !== 0 ? '' : fieldApi.value}\n          onChange={ev => {\n            if (ev.target.validity.valid) {\n              fieldApi.setTouched(true)\n              fieldApi.setValue(ev.target.value)\n            }\n          }}\n          inputFullWidth={inputFullWidth}\n          invalid={Boolean(fieldApi.error)}\n          ref={inputRef}\n          {...props}\n        />\n      )}\n    </Field>\n  ),\n)\n","import styled from 'styled-components'\n\nimport backgroundImage from '../assets/bg_login.jpg'\nimport backgroundImage2x from '../assets/bg_login@2x.jpg'\n\nexport const LoginPageBackground = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-image: url(${backgroundImage});\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n\n  @media only screen and (-webkit-min-device-pixel-ratio: 1.3),\n    only screen and (min--moz-device-pixel-ratio: 1.3),\n    only screen and (-o-min-device-pixel-ratio: 2.6/2),\n    only screen and (min-device-pixel-ratio: 1.3),\n    only screen and (min-width: 1024px) {\n    background-image: url(${backgroundImage2x});\n  }\n`\n","module.exports = __webpack_public_path__ + \"static/media/bg_login.382d98be.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_login@2x.35ab1818.jpg\";","import styled from 'styled-components/macro'\n\nimport { Spacing } from '../../../styling'\n\nexport const PasswordPageGrid = styled.div`\n  display: grid;\n  width: 100vw;\n  height: 100vh;\n  grid-gap: ${Spacing.Middle};\n  grid-template-columns: repeat(16, 1fr);\n  grid-template-rows: repeat(7, 3rem);\n  padding: 0 ${Spacing.Small} 0 ${Spacing.Small};\n`\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile } from '../app/Responsive'\nimport { Colors, FontSizes } from '../styling'\n\ninterface INotifyMessageProps {\n  isError?: boolean\n  isVisible: boolean\n  onClick?(): void\n}\n\nconst backgroundProperty = (props: INotifyMessageProps) =>\n  props.isError ? Colors.red : Colors.green\n\nconst StyledNotifyMessage = styled.div`\n  position: fixed;\n  border-radius: 1rem;\n  top: 0;\n  ${mediaDesktop`\n  width: 60%;\n  left: 20%;\n  `};\n  ${mediaMobile`\n  width: 90%;\n  left: 5%;\n  `};\n  height: 3.9rem;\n  opacity: 0.85;\n  background: ${backgroundProperty};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  & .notify-message {\n    color: ${Colors.white};\n    text-align: center;\n    margin: 0 0.5rem 0.4rem 0.5rem;\n    font-size: ${FontSizes.InfoMessageFontSize};\n  }\n`\n\nexport const NotifyMessage: React.FC<INotifyMessageProps> = ({\n  children,\n  isVisible,\n  isError = false,\n  onClick,\n  ...props\n}) =>\n  isVisible ? (\n    <StyledNotifyMessage\n      onClick={onClick}\n      isVisible={isVisible}\n      isError={isError}\n      {...props}\n    >\n      <div\n        className=\"notify-message\"\n        data-testid={`notify${isError ? '-error' : ''}`}\n      >\n        {children}\n      </div>\n    </StyledNotifyMessage>\n  ) : null\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { NotifyMessage } from '../../../atoms/NotifyMessage'\nimport { TPasswordLoginModel } from '../models/PasswordLoginModel'\n\ninterface IPasswordLoginErrorProps {\n  model: TPasswordLoginModel\n}\n\nexport const PasswordLoginError = observer<IPasswordLoginErrorProps>(\n  ({ model }) =>\n    model.hasFailed ? (\n      <NotifyMessage isVisible={true} isError={true}>\n        {model.errorMessage}\n      </NotifyMessage>\n    ) : null,\n)\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\nimport { ROUTE_AUTH_RESET_PASSWORD } from '../login.routes'\n\ninterface IProps {}\n\nexport const PasswordResetLink: React.FC<IProps> = props => {\n  return (\n    <Link to={ROUTE_AUTH_RESET_PASSWORD}>\n      <TouchButton color={Colors.greyMiddle}>\n        <Trans>Forgotten password</Trans>\n      </TouchButton>\n    </Link>\n  )\n}\n","import React from 'react'\nimport { FormApi } from 'react-form'\n\nimport { isFormValid } from '../helpers/form'\nimport { ITouchButtonProps, TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\ninterface IProps extends ITouchButtonProps {}\n\nexport const FormSubmit: React.FC<IProps> = ({ children, ...props }) => (\n  <FormApi>\n    {form => (\n      <TouchButton\n        type=\"submit\"\n        color={Colors.green}\n        disabled={!isFormValid(form) || form.submitting}\n        onClick={e => {\n          e.preventDefault()\n          form.submitForm(e)\n        }}\n        {...props}\n      >\n        {children}\n      </TouchButton>\n    )}\n  </FormApi>\n)\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { Form } from 'react-form'\n\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { MarginBox } from '../../../atoms/MarginBox'\nimport { i18n } from '../../../i18n'\nimport { FormSubmit } from '../../../molecules/FormSubmit'\nimport { Spacing } from '../../../styling'\nimport { TPasswordLoginModel } from '../models/PasswordLoginModel'\n\ninterface IPasswordLoginFormProps {\n  model: TPasswordLoginModel\n}\n\ninterface IFormValues {\n  username: string\n  password: string\n}\n\nexport const PasswordLoginForm: React.FC<IPasswordLoginFormProps> = ({\n  model,\n}) => (\n  <Form\n    onSubmit={({ username, password }: IFormValues) =>\n      model.requestToken(username, password)\n    }\n    render={formApi => (\n      <form onSubmit={formApi.submitForm}>\n        <FormInputTextBox\n          field=\"username\"\n          name=\"username\"\n          isRequired={true}\n          inputFullWidth={true}\n          validatioName={i18n.t`username`}\n          autoFocus={true}\n          autoCorrect=\"off\"\n          autoCapitalize=\"off\"\n          spellCheck={false}\n          placeholder={i18n.t`username`}\n        />\n\n        <FormInputTextBox\n          field=\"password\"\n          name=\"password\"\n          isRequired={true}\n          inputFullWidth={true}\n          validatioName={i18n.t`password`}\n          type=\"password\"\n          placeholder={i18n.t`password`}\n        />\n\n        <MarginBox margin={`${Spacing.Middle} -0.1rem 0 0.1rem`}>\n          <FormSubmit>\n            <Trans>Sign-in</Trans>\n          </FormSubmit>\n        </MarginBox>\n      </form>\n    )}\n  />\n)\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { LoginPageBackground } from '../../../atoms/LoginPageBackground'\nimport { PageLayoutGridItem } from '../../../atoms/PageLayoutGridItem'\nimport { PageTitle } from '../../../atoms/PageTitle'\nimport { i18n } from '../../../i18n'\nimport { TPasswordLoginModel } from '../models/PasswordLoginModel'\nimport { PasswordLoginError } from '../molecules/PasswordLoginError'\nimport { PasswordPageGrid } from '../molecules/PasswordPageGrid'\nimport { PasswordResetLink } from '../molecules/PasswordResetLink'\nimport { PasswordLoginForm } from '../organisms/PasswordLoginForm'\n\ninterface IPasswordLoginPageProps {\n  model: TPasswordLoginModel\n}\n\nconst StyledPasswordLoginPage = styled(LoginPageBackground)`\n  h1 {\n    text-align: center;\n  }\n`\n\nexport const PasswordLoginPage: React.FC<IPasswordLoginPageProps> = ({\n  model,\n}) => (\n  <StyledPasswordLoginPage>\n    <PageTitle title={i18n.t`Login page`} />\n    <PasswordPageGrid>\n      <PageLayoutGridItem\n        gridRow={2}\n        gridRowSpan={2}\n        gridColumn={6}\n        gridColumnInMobile={2}\n        gridColumnSpan={6}\n        gridRowInMobile={2}\n        gridColumnSpanInMobile={14}\n      >\n        <PageTitle.Display />\n      </PageLayoutGridItem>\n      <PageLayoutGridItem\n        gridRow={4}\n        gridRowSpan={6}\n        gridColumn={6}\n        gridColumnSpan={6}\n        gridRowInMobile={3}\n        gridRowSpanInMobile={3}\n        gridColumnInMobile={2}\n        gridColumnSpanInMobile={14}\n      >\n        <PasswordLoginForm model={model} />\n      </PageLayoutGridItem>\n      <PageLayoutGridItem\n        gridRow={1}\n        gridRowInMobile={6}\n        gridColumn={14}\n        gridColumnSpan={3}\n        gridColumnInMobile={2}\n        gridColumnSpanInMobile={14}\n      >\n        <PasswordResetLink />\n      </PageLayoutGridItem>\n    </PasswordPageGrid>\n    <PasswordLoginError model={model} />\n  </StyledPasswordLoginPage>\n)\n","import { useRouteParams } from '@speedlo/hooks'\nimport React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { ROUTE_MAIN } from '../../dashboard/dashboard.routes'\nimport { ROUTE_AUTH_LOGIN } from '../login.routes'\nimport { PasswordLoginPage } from '../pages/PasswordLoginPage'\n\nexport const PasswordLoginRoute: React.FC = () => {\n  const { auth } = useRoot()\n\n  const params = useRouteParams<{ token: string; userId: ID }>(\n    `${ROUTE_AUTH_LOGIN}/:token/:userId`,\n  )\n\n  React.useEffect(() => {\n    if (params) {\n      auth.authenticate(window.atob(params.token), params.userId)\n    }\n  }, [auth, params])\n\n  return auth.isAuthenticatedUser ? (\n    <Redirect to={ROUTE_MAIN} />\n  ) : (\n    <PasswordLoginPage model={auth.provider.passwordLogin} />\n  )\n}\n\nexport default PasswordLoginRoute\n"],"sourceRoot":""}