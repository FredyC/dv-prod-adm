{"version":3,"sources":["segments/menu/models/MenuBaseModel.ts","segments/menu/models/MenuStockModel.graphql.ts","atoms/PageTitle.tsx","models/BaseModel.ts","segments/order/models/OrderStateModel.graphql.ts","segments/menu/organisms/CategoryList.graphql.ts","segments/zones/Zones.graphql.ts","pages/NotFoundPage.tsx","helpers/ramda.ts","routes/RedirectToLogin.tsx","helpers/formats.ts","segments/order/molecules/OrderStateDeliver.graphql.ts","helpers/logger.ts","segments/menu/organisms/RecipeList.graphql.ts","segments/menu/organisms/StockList.graphql.ts","context/RootContext.ts","molecules/TouchButton.tsx","atoms/Card.tsx","molecules/FullPageLayout.tsx","atoms/SoundControl.tsx","organisms/LogoutWidget.graphql.ts","organisms/LogoutWidget.tsx","molecules/HomeButton.tsx","molecules/PageLayout.tsx","hooks/useEffectOnce.ts","atoms/Loading.tsx","segments/menu/models/MenuRecipeModel.ts","segments/menu/organisms/RecipeForm.graphql.ts","segments/menu/graph/AllergenFragment.graphql.ts","segments/menu/graph/WareUnitFragment.graphql.ts","atoms/GridLayout.tsx","segments/menu/models/MenuCategoryModel.graphql.ts","segments/menu/models/MenuCategoryModel.ts","segments/businesshours/models/BusinessHoursModel.graphql.ts","segments/businesshours/models/BusinessHoursModel.ts","graph/buildQuery.tsx","helpers/sentry.ts","segments/overview/models/StatisticsModel.graphql.ts","locale/numeral.ts","i18n.tsx","graph/fragments/AddressFragment.graphql.ts","graph/fragments/GeoPointFragment.graphql.ts","graph/fragments/CompanyBranchFragment.graphql.ts","graph/fragments/EmailFragment.graphql.ts","graph/fragments/PhoneFragment.graphql.ts","graph/fragments/CustomerFragment.graphql.ts","graph/fragments/PriceFragment.graphql.ts","graph/fragments/index.ts","config.ts","segments/businesshours/organisms/SpecificBusinessHours.graphql.ts","segments/menu/organisms/CategoryForm.graphql.ts","atoms/IntervalRender.tsx","atoms/SoundPlayInterval.tsx","assets/connectionWarning.mp3","segments/order/models/OrderListModel.ts","graph/errorHandler.ts","atoms/WithRoot.tsx","graph/SubscriptionLink.ts","graph/createClient.ts","graph/AuthLink.ts","helpers/persistModel.ts","segments/login/models/PasswordLoginModel.ts","segments/login/models/LoginProviderModel.ts","models/AuthModel.graphql.ts","models/AuthModel.ts","models/ConfigModel.ts","models/TimingModel.ts","models/UserModel.graphql.ts","models/UserModel.ts","helpers/faker.ts","segments/createorder/models/CreateOrderModel.graphql.ts","segments/createorder/models/CreateOrderModel.ts","models/MapModel.ts","segments/order/models/OrderMapModel.graphql.ts","segments/order/models/OrderMapModel.ts","segments/order/models/OrderStateModel.ts","segments/order/models/OrderModel.ts","segments/overview/models/StatisticsModel.ts","segments/settings/models/SettingsBaseModel.ts","segments/menu/models/MenuStockModel.ts","segments/menu/models/MenuModel.ts","segments/settings/models/SettingsModel.ts","segments/zones/models/ZoneMapModel.ts","segments/zones/models/ZoneModel.graphql.ts","segments/zones/models/ZoneModel.ts","models/RootModel.ts","atoms/RootProvider.tsx","atoms/Pacman.tsx","helpers/gps.ts","segments/menu/models/MenuRecipeModel.graphql.ts","enableDebug.ts","graph/types.ts","../node_modules/numeral/locales lazy /^/.*$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.ts$/ groupOptions: {} namespace object","atoms/Icon.tsx","routes/SecureRoute.tsx","atoms/ConnectionWarning.tsx","atoms/ErrorContainer.tsx","atoms/WithUser.tsx","pages/ErrorPage.tsx","routes/LogRoute.tsx","routes/RedirectAfterLogin.tsx","routes/RedirectAfterLogout.tsx","routes/Routing.tsx","App.tsx","atoms/Router.tsx","index.tsx","helpers/offline.ts","routes/LazyRoute.tsx","styling.ts"],"names":["__webpack_require__","d","__webpack_exports__","MenuBaseModel","mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__","named","views","self","branchId","Object","settings","MenuStockItemFragment","MenuStockCreateMutation","MenuStockUpdateMutation","MenuStockDeleteMutation","graphql_tag__WEBPACK_IMPORTED_MODULE_0__","graphql_tag__WEBPACK_IMPORTED_MODULE_0___default","n","_graph_AllergenFragment_graphql__WEBPACK_IMPORTED_MODULE_1__","_graph_WareUnitFragment_graphql__WEBPACK_IMPORTED_MODULE_2__","a","TitleStyled","styled_components__WEBPACK_IMPORTED_MODULE_4__","h1","withConfig","displayName","_styling__WEBPACK_IMPORTED_MODULE_7__","greyLight","observableTitles","mobx__WEBPACK_IMPORTED_MODULE_0__","array","lastTitle","Array","from","pop","document","title","_config__WEBPACK_IMPORTED_MODULE_5__","pageTitleSuffix","PageTitle","react__WEBPACK_IMPORTED_MODULE_2___default","Component","[object Object]","push","this","props","prevProps","idx","findIndex","_helpers_ramda__WEBPACK_IMPORTED_MODULE_6__","equals","splice","remove","Route","_a","__rest","createElement","react_router__WEBPACK_IMPORTED_MODULE_3__","_extends","render","Display","mobx_react__WEBPACK_IMPORTED_MODULE_1__","join","BaseModel","debug__WEBPACK_IMPORTED_MODULE_0__","debug__WEBPACK_IMPORTED_MODULE_0___default","mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__","verror__WEBPACK_IMPORTED_MODULE_2__","model","log","client","apolloClient","root","OrderStateCategoryFragment","UpdateOrderStateMutation","SendOrderNotificationMutation","SelectOrderDriverMutation","RemoveOrderDriverMutation","_molecules_OrderStateDeliver_graphql__WEBPACK_IMPORTED_MODULE_1__","MenuCategoryListFragment","CategoryListQuery","QueryCategoryList","_graph_buildQuery__WEBPACK_IMPORTED_MODULE_1__","ZoneFragment","ZoneLocationQuery","ZoneColorsQuery","_graph_fragments__WEBPACK_IMPORTED_MODULE_1__","NotFoundPage","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","_atoms_PageTitle__WEBPACK_IMPORTED_MODULE_1__","_i18n__WEBPACK_IMPORTED_MODULE_2__","Fragment","_","ramda__WEBPACK_IMPORTED_MODULE_0__","RedirectToLogin","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","react_router__WEBPACK_IMPORTED_MODULE_2__","useOrigin","path","children","match","location","to","pathname","state","origin","fullDateFormat","formatDateISO","formatTime","formatPrice","formatTimeWithoutTodayDate","date_fns__WEBPACK_IMPORTED_MODULE_0__","date_fns_fp__WEBPACK_IMPORTED_MODULE_1__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2___default","numeral__WEBPACK_IMPORTED_MODULE_3__","numeral__WEBPACK_IMPORTED_MODULE_3___default","formatLocale","locale","formatDateTime","price","format","time","Date","OrderDriverFragment","QueryDriverSelection","DriverFragment","OrderDriverSelection","logMain","logDebug","logError","logAuth","logRouting","logPersistence","logBootstrap","logGraph","logForm","logSentry","logLang","useColors","console","MenuRecipeListQuery","QueryRecipeList","_models_MenuRecipeModel_graphql__WEBPACK_IMPORTED_MODULE_2__","MenuStockListQuery","QueryMenuStockList","_models_MenuStockModel_graphql__WEBPACK_IMPORTED_MODULE_2__","RootContext","undefined","applyAlpha","alphaValue","_styling__WEBPACK_IMPORTED_MODULE_3__","color","TouchButtonStyled","styled_components__WEBPACK_IMPORTED_MODULE_1__","button","ButtonHeight","width","height","Button","ButtonLabelStyled","div","ButtonLabelNextToIconStyled","TouchButton","iconName","iconColor","white","iconSize","greyMiddle","textNextToIcon","badge","text","_atoms_Icon__WEBPACK_IMPORTED_MODULE_2__","fontSize","Card","color__WEBPACK_IMPORTED_MODULE_0__","color__WEBPACK_IMPORTED_MODULE_0___default","_styling__WEBPACK_IMPORTED_MODULE_2__","alpha","lighten","string","textColor","black","padding","stretchToParent","FullPageLayout","_molecules_PageLayout__WEBPACK_IMPORTED_MODULE_1__","layouts","i","x","y","w","h","getLayout","key","SoundControlContainerStyled","styled_components_browser_esm","SoundButtonStyled","styling","SoundControl_SoundControl","react_default","playPreview","WithRoot","observe","user","soundEnabled","green","red","onClick","controlSound","QueryLogoutWidget","buildQuery","src_default","LogoutWidgetStyled","LoggedUserNameStyled","span","IconStyled","LogoutWidget","auth","variables","id","userId","renderLoading","data-testid","react_router_dom","firstName","lastName","i18n","getNameDisplay","Icon","color_default","HomeButtonStyled","HomeButton","goBack","react_router","history","PageLayout","TopLeftButtonContainer","getPosition","scrollPageTitle","TopRightContainer","PageTitleContainer","SoundControlContainer","pageTitle","hideLogoutWidget","showSoundControl","useBackButton","SecureRoute","component","redirect","GridLayout","useEffectOnce","effect","Loading","MenuRecipeModel","_MenuBaseModel__WEBPACK_IMPORTED_MODULE_6__","actions","recipeId","visible","mutate","mutation","_MenuRecipeModel_graphql__WEBPACK_IMPORTED_MODULE_7__","optimisticResponse","updateRecipe","__typename","formValues","recipeType","recipe","assign","companyBranch","wareCategoryType","getFormVariables","_graph_errorHandler__WEBPACK_IMPORTED_MODULE_1__","refetchQueries","query","_organisms_RecipeList_graphql__WEBPACK_IMPORTED_MODULE_5__","data","_organisms_RecipeForm_graphql__WEBPACK_IMPORTED_MODULE_4__","defaultVats","reduce","result","vatId","priceType","enum","code","nameLabel","internalNote","descriptionLabel","enabled","prices","keys","map","warePriceType","_graph_types__WEBPACK_IMPORTED_MODULE_2__","value","numeral__WEBPACK_IMPORTED_MODULE_0___default","vat","sideDishCategories","sideDishes","_helpers_ramda__WEBPACK_IMPORTED_MODULE_3__","prop","wareCategories","categories","associatedRecipes","pick","ingredients","stockItem","quantity","Number","parseFloat","replace","parseNumber","getRecipeRoute","MenuRecipeFormQuery","MenuRecipeDefaultVat","QueryMenuRecipeFormAssoc","_graph_fragments__WEBPACK_IMPORTED_MODULE_2__","_CategoryList_graphql__WEBPACK_IMPORTED_MODULE_3__","MenuRecipePriceFragment","MenuAssocRecipeFragment","MenuRecipeFormAssocQuery","AllergenFragment","WareUnitFragment","react_grid_layout__WEBPACK_IMPORTED_MODULE_1__","react_grid_layout__WEBPACK_IMPORTED_MODULE_1___default","ReactGridLayout","className","layout","cols","rowHeight","margin","autoSize","isDraggable","isResizable","compactType","measureBeforeMount","SortMenuCategoryMutation","MenuCategoryCreateMutation","MenuCategoryUpdateMutation","CategoryForm_graphql","MenuCategoryVisibility","MenuCategoryDeleteMutation","MenuCategoryModel","categoryId","offset","Boolean","success","categoryType","input","errorHandler","CategoryList_graphql","internalNoteLabel","pictogram","recipes","ramda","getCategoryRoute","CreateSpecificBusinessHour","SpecificBusinessHours_graphql","DeleteSpecificBusinessHour","ESpecificHourMode","BusinessHoursModel","byIdPredicate","complement","propEq","specificMode","mobx_state_tree_module","optional","enumeration","TIMESPAN","mode","values","specificDate","date","closed","FULLDAY","openAt","formats","closeAt","closedNote","note","updateQueries","GSpecificBusinessHours","prev","mutationResult","businessHours","concat","businessHourId","filter","cleanup","forEach","fn","renderFragment","renderError","refetchOnConnectionLost","react_apollo__WEBPACK_IMPORTED_MODULE_1__","loading","_atoms_Loading__WEBPACK_IMPORTED_MODULE_4__","error","_helpers_sentry__WEBPACK_IMPORTED_MODULE_7__","_helpers_logger__WEBPACK_IMPORTED_MODULE_5__","_helpers_offline__WEBPACK_IMPORTED_MODULE_6__","refetch","installSentry","identifyUser","reportRenderingError","reportFailingQuery","reportError","raven_js__WEBPACK_IMPORTED_MODULE_0__","raven_js__WEBPACK_IMPORTED_MODULE_0___default","verror__WEBPACK_IMPORTED_MODULE_1__","_config__WEBPACK_IMPORTED_MODULE_2__","_logger__WEBPACK_IMPORTED_MODULE_3__","_ramda__WEBPACK_IMPORTED_MODULE_4__","cb","sentryDSN","config","environment","install","context","setUserContext","info","isSetup","captureException","extra","showReportDialog","errors","captureBreadcrumb","category","level","message","err","Error","userErrors","length","lastEventId","head","cause","CreateFinancialReport","QueryStatistics","StatisticsQuery","aliasLocales","en","core","fallbackLanguage","supportedLanguages","I18nManager","index_module","RootProvider","language","node_modules_react_default","react","Children","only","Pacman","detectLanguage","languages","dist","getLocales","logger","find","loc","includes","changeLanguage","lang","catalog","load","loadCatalog","activate","numeral_default","changeNumeralLocale","AddressFragment","GeoPointFragment","CompanyBranchFragment","EmailFragment","PhoneFragment","CustomerFragment","PriceFragment","appConfig","endpoint","persistenceKey","SpecificBusinessHourFragment","QuerySpecificBusinessHours","MenuCategoryFormFragment","MenuCategoryFormQuery","_models_MenuRecipeModel_graphql__WEBPACK_IMPORTED_MODULE_1__","IntervalRender_IntervalRender","isActive","nextTime","getNextTime","timer","executeTimer","clearTimeout","timeMs","esm","setTimeout","setState","deactivate","intervalSec","nextLoop","SoundPlayInterval","soundUrl","shouldPlay","skipEnableChecks","lib_default","url","playStatus","onFinishedPlaying","loop","autoLoad","volume","soundVolume","module","exports","p","setImmediate","OrderListModel","react_scroll__WEBPACK_IMPORTED_MODULE_2__","branches","branchesFilter","hasBranchFilter","isSingleBranchSelected","orderMap","clear","order","panToOrder","extend","detailOpen","Map","isOrderDetailOpen","orderId","has","delete","set","panMapToOrder","scrollTo","smooth","containerId","absolute","debug__WEBPACK_IMPORTED_MODULE_1___default","graphQLErrors","networkError","operation","_helpers_sentry__WEBPACK_IMPORTED_MODULE_2__","operationName","locations","createErrorLink","apollo_link_error__WEBPACK_IMPORTED_MODULE_0__","getQueryErrors","__awaiter","_RootProvider__WEBPACK_IMPORTED_MODULE_1__","getChannelId","Math","round","now","random","toString","isSubscriptionOperation","getFromAST","createApolloClient","cache","inMemoryCache","dataIdFromObject","o","authLink","headers","mobx_module","Authorization","communicationToken","lib","forward","canCommunicate","verror_default","getContext","setContext","get","observer","sub","subscribe","invalidate","next","bind","complete","unsubscribe","createAuthLink","retryLink","apollo_link_retry_lib","delay","initial","max","Infinity","jitter","attempts","retryIf","_operation","offlineLink","dist_default","offline","open","close","createOfflineLink","errorLink","httpLink","apollo_link_batch_http_lib","uri","credentials","subscriptionLink","cableUrl","token","cable","connectionParams","isAuthenticated","verror","action_cable_default","createConsumer","channelId","subscriptions","create","channel","connected","perform","graphql_language","operationId","received","payload","more","createSubscriptionLink","ApolloClient","link","split","persistModel","modelName","name","stateKey","writeState","snapshot","localforage_default","setItem","getItem","removeItem","PasswordLoginModel","volatile","errorCode","errorMessage","hasFailed","authenticate","username","password","getLoginUrl","fetch","window","response","Accept","json","status","setFailure","setSuccess","String","LoginProviderModel","passwordLogin","PasswordChangeMutation","AuthModel","provider","isAuthenticatedUser","tokenForPasswordChange","sentry","reset","temporaryB64EncodedToken","base64","decode","fetchPolicy","updateUserPassword","preProcessSnapshot","ConfigModel","orderListPollIntervalSec","orderListSoundIntervalSec","TimingModel","bySecond","number","byMinute","autoStart","timeoutId","getNow","executeUpdate","updateBySecond","updateByMinute","timeResolver","start","UserModelBootstrapQuery","fragments","UserModel","maybe","soundIgnore","currentBranchId","maybeNull","isLoaded","brands","permissions","branchesId","es","filterBranches","predicate","currentBranch","currentBranchGps","branch","latitude","longitude","gps","canQuery","queryName","queries","toLowerCase","canMutate","mutationName","mutations","isReady","uniqBy","lodash_default","mapValues","fields","Set","compose","toLower","setLanguage","ignore","initUser","UserModel_awaiter","rawCode","applyUserData","applyUserPermissions","finishBootstrap","queryUser","faker_default","ValidateLocationQuery","CreateOrderMutation","UpdateOrderMutation","AcceptOrderMutation","CancelOrderMutation","CreateOrderModel","getDefaultProps","deliveryType","types","MESSENGER","phone","callingPhone","vamCustomer","isFound","email","lastOrder","defaults","fakeValues","isDelivery","hasMultipleVamLocations","canSubmit","isSubmitting","hasSubmitErrors","submitErrors","askForCancel","cartRefreshKey","submitFailed","updatesWatch","resetModel","ensureOrder","callEventId","callingEventId","createOrder","acceptOrder","customer","emails","phones","submitResult","finishOrder","cancelOrder","resetOrder","validateLocation","notDeliveryLocation","resolveLocation","inDeliveryLocation","eventId","scrollMenuToCategoryId","touched","internet","phoneNumberFormat","lorem","sentence","slice","fakeAddress","GPSCzechia","MapModel","zoom","mapRef","center","helpers_gps","ref","getZoom","getCenter","lat","lng","OrderBranchLocationQuery","OrderLocationQuery","OrderMapModel","panTo","OrderStateModel","OrderStateModel_graphql","deliverOrder","updateOrderState","ON_WAY","minutes","driverId","orderDriverId","OrderModel","list","StatisticsModel","dateFrom","dateTo","singleBranchFilter","formState","companyBranchId","StatisticsModel_graphql","SettingsBaseModel","MenuStockModel","MenuStockModel_graphql","StockList_graphql","stockId","label","plu","allergens","wareUnit","allowNegative","MenuModel","stock","SettingsModel","selectedBranchId","menu","queryProps","skip","otherVariables","ZoneMapModel","currentZonePoints","points","zoneId","Zones_graphql","zone","CreateZoneMutation","UpdateZoneMutation","UpdateZonePriorityMutation","DestroyZoneMutation","ZoneModel","route","brandId","brand","branchFilterId","branchFilterPredicate","zoneFilterPredicate","getRouteToZone","panToBranch","brandBranches","createZone","onZoneCreate","metersRadius","pointsCount","GZones","zones","update","zoneColor","minimalOrderPrice","priceRangeRules","normalizePriceRangeRule","geoPolygon","zoneIdx","updateZone","clearZonePoints","changeZonePriority","oldIndex","newIndex","updateZonePriority","priority","numberOrNull","num","isNaN","range","toPrice","RootModel","timing","statistics","persistedModels","setRoot","RootProvider_awaiter","rootModel","Promise","all","react_apollo_browser_umd","Provider","useRoot","react_spinkit__WEBPACK_IMPORTED_MODULE_1__","react_spinkit__WEBPACK_IMPORTED_MODULE_1___default","noMargin","style","display","alignSelf","justifyContent","marginTop","orange","gpsToLatLng","latLngToGps","generatePolygon","geolib__WEBPACK_IMPORTED_MODULE_0__","latLng","fill","degree","MenuRecipeFragment","MenuRecipeVisibilityMutation","MenuRecipeCreateMutation","MenuRecipeUpdateMutation","MenuRecipeDeleteMutation","localStorage","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","WeekDayEnum","AllergenEnum","WarePriceTypeEnum","AvailabilityTypeEnum","FieldStateEnum","LanguageEnum","ShiftUserStateEnum","DeviceStateEnum","DeviceTypeEnum","WareUnitEnum","PaymentGateEnum","PaymentTypeEnum","WareCategoryTypeEnum","WareRequirementEnum","MobilePlatformEnum","OrderOriginEnum","ZoneTypeEnum","OrderBillingTypeEnum","OrderOnlineStateEnum","OrderStateEnum","DeliveryTypeEnum","OrderRecipeStateEnum","SettingTypeEnum","SubscriptionActionType","./bg","./bg.js","./chs","./chs.js","./cs","./cs.js","./da-dk","./da-dk.js","./de","./de-ch","./de-ch.js","./de.js","./en-au","./en-au.js","./en-gb","./en-gb.js","./en-za","./en-za.js","./es","./es-es","./es-es.js","./es.js","./et","./et.js","./fi","./fi.js","./fr","./fr-ca","./fr-ca.js","./fr-ch","./fr-ch.js","./fr.js","./hu","./hu.js","./it","./it.js","./ja","./ja.js","./lv","./lv.js","./nl-be","./nl-be.js","./nl-nl","./nl-nl.js","./no","./no.js","./pl","./pl.js","./pt-br","./pt-br.js","./pt-pt","./pt-pt.js","./ru","./ru-ua","./ru-ua.js","./ru.js","./sk","./sk.js","./sl","./sl.js","./th","./th.js","./tr","./tr.js","./uk-ua","./uk-ua.js","./vi","./vi.js","webpackAsyncContext","req","ids","e","then","t","resolve","./cs/messages.ts","./de/messages.ts","./en-dev/messages.ts","./en/messages.ts","./pl/messages.ts","./sk/messages.ts","IconSpanStyled","fontSizeUnit","lazy","_atoms_RootProvider__WEBPACK_IMPORTED_MODULE_2__","_RedirectToLogin__WEBPACK_IMPORTED_MODULE_5__","_pages_NotFoundPage__WEBPACK_IMPORTED_MODULE_3__","exact","_LazyRoute__WEBPACK_IMPORTED_MODULE_4__","react_router__WEBPACK_IMPORTED_MODULE_1__","MessageStyled","ConnectionWarning","connectionWarning_default","index_es","disableBackdropClick","disableEscapeKeyDown","icons_index_es","_lingui_react","ErrorContainer","prod","dispatchErrorReporting","WithUser","ErrorPage","LogRoute","browser_default","RedirectAfterLogin","waitForAuthentication","redirectAfterLogin","RedirectAfterLogout","Routing","Suspense","fallback","LazyRoute","App_App","build","maxSnack","anchorOrigin","horizontal","vertical","Router","dist_index_es","handleGetUserConfirm","getUserConfirmation","Main","rootElement","getElementById","react_dom","isNetworkOnline","isNetworkOffline","whenGoingOnline","isOnline","box","navigator","onLine","addEventListener","change","oldValue","newValue","routeProps","_atoms_Pacman__WEBPACK_IMPORTED_MODULE_2__","Colors","applyAlphaToColor","Radiuses","Spacing","_helpers_ramda__WEBPACK_IMPORTED_MODULE_1__","curry"],"mappings":"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","file":"static/js/main.7b912599.chunk.js","sourcesContent":["import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TMenuModel } from './MenuModel'\n\nexport const MenuBaseModel = BaseModel.named('MenuBase').views(self => ({\n  get branchId() {\n    return getParent<TMenuModel>(self).settings.branchId!\n  },\n}))\n\nexport type TMenuBaseModel = typeof MenuBaseModel.Type\nexport type TMenuBaseModelProps = typeof MenuBaseModel.SnapshotType\n","import gql from 'graphql-tag'\n\nimport { AllergenFragment } from '../graph/AllergenFragment.graphql'\nimport { WareUnitFragment } from '../graph/WareUnitFragment.graphql'\n\nexport const MenuStockItemFragment = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...GAllergen\n    }\n    wareUnit {\n      ...GWareUnit\n    }\n  }\n  ${WareUnitFragment}\n  ${AllergenFragment}\n`\n\nexport const MenuStockCreateMutation = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockUpdateMutation = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockDeleteMutation = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n","import { autorun, observable } from 'mobx'\nimport { Observer } from 'mobx-react'\nimport React from 'react'\nimport { Route, RouteProps } from 'react-router'\nimport styled from 'styled-components'\n\nimport { appConfig } from '../config'\nimport { RM } from '../helpers/ramda'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  title: string\n}\n\nconst TitleStyled = styled.h1`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  margin: 0.5rem 0.5rem 0 0.5rem;\n  white-space: nowrap;\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.9);\n`\n\nconst observableTitles = observable.array<string>([])\n\nautorun(() => {\n  const lastTitle = Array.from(observableTitles).pop()\n  if (lastTitle) {\n    document.title = `${lastTitle} :: ${appConfig.pageTitleSuffix}`\n  } else {\n    document.title = appConfig.pageTitleSuffix\n  }\n})\n\nconst PageTitleRoute: React.SFC<IProps & RouteProps> = ({\n  title,\n  ...props\n}) => <Route {...props} render={() => <PageTitle title={title} />} />\n\nconst PageTitleDisplay: React.SFC = () => (\n  <Observer>\n    {() => <TitleStyled>{observableTitles.join(' - ')}</TitleStyled>}\n  </Observer>\n)\n\nexport class PageTitle extends React.Component<IProps> {\n  static Route = PageTitleRoute\n  static Display = PageTitleDisplay\n  componentDidMount() {\n    observableTitles.push(this.props.title)\n  }\n  componentDidUpdate(prevProps: IProps) {\n    const idx = observableTitles.findIndex(RM.equals(prevProps.title))\n    if (idx >= 0) {\n      observableTitles.splice(idx, 1, this.props.title)\n    }\n  }\n  componentWillUnmount() {\n    observableTitles.remove(this.props.title)\n  }\n  render() {\n    return null\n  }\n}\n","import debug from 'debug'\nimport { getEnv, getPath, getRoot, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { IRootEnvironment } from '../atoms/RootProvider'\nimport { TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    return debug(`model/${getPath(self)}`)\n  },\n  get client() {\n    const client = getEnv<IRootEnvironment>(self).apolloClient\n    if (!client) {\n      throw new VError('Apollo client is missing from environment setup')\n    }\n    return client\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n}))\n","import gql from 'graphql-tag'\n\nimport { OrderDriverFragment } from '../molecules/OrderStateDeliver.graphql'\n\nexport const OrderStateCategoryFragment = gql`\n  fragment GOrderStateCategory on Order {\n    id\n    orderStateCategory\n  }\n`\n\nexport const UpdateOrderStateMutation = gql`\n  mutation GUpdateOrderState($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...GOrderStateCategory\n      orderTiming: orderStateCategoryRelations {\n        createdAt\n        orderStateCategory\n      }\n    }\n  }\n  ${OrderStateCategoryFragment}\n`\n\nexport const SendOrderNotificationMutation = gql`\n  mutation GSendOrderNotification($orderId: ID!, $minutes: Int!) {\n    orderNotifyCustomer(id: $orderId, minutes: $minutes) {\n      id\n      deliverAt\n    }\n  }\n`\n\nexport const SelectOrderDriverMutation = gql`\n  mutation GSelectOrderDriver($driverId: ID!, $orderId: ID!) {\n    createUserDeliveringOrder(user: $driverId, order: $orderId) {\n      order {\n        ...GOrderDriver\n      }\n    }\n  }\n  ${OrderDriverFragment}\n`\n\nexport const RemoveOrderDriverMutation = gql`\n  mutation GRemoveOrderDriver($orderDriverId: ID!) {\n    destroyUserDeliveringOrder(id: $orderDriverId) {\n      order {\n        ...GOrderDriver\n      }\n    }\n  }\n  ${OrderDriverFragment}\n`\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GCategoryList } from '../../../graph/types'\n\nexport const MenuCategoryListFragment = gql`\n  fragment GMenuCategoryListItem on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    countRecipes\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n  }\n`\n\nexport const CategoryListQuery = gql`\n  query GCategoryList($branchId: ID!, $categoryType: WareCategoryTypeEnum!) {\n    wareCategories(companyBranch: $branchId, wareCategoryType: $categoryType) {\n      ...GMenuCategoryListItem\n    }\n  }\n  ${MenuCategoryListFragment}\n`\n\nexport const QueryCategoryList = buildQuery<\n  GCategoryList.Query,\n  GCategoryList.Variables\n>(CategoryListQuery)\n","import gql from 'graphql-tag'\n\nimport { GeoPointFragment, PriceFragment } from '../../graph/fragments'\n\nexport const ZoneFragment = gql`\n  fragment GZone on Zone {\n    id\n    name\n    enabled\n    priority\n    companyBranch {\n      id\n      brand {\n        id\n      }\n    }\n    geoPolygon {\n      ...GGeoPoint\n    }\n    priceRangeRules {\n      ...GZonePriceRange\n    }\n    minimalOrderPrice {\n      ...GPrice\n    }\n    zoneColor {\n      id\n      code\n      color\n    }\n  }\n\n  fragment GZonePriceRange on ZonePriceRangeRule {\n    toPrice {\n      ...GPrice\n    }\n    price {\n      ...GPrice\n    }\n  }\n\n  ${PriceFragment}\n  ${GeoPointFragment}\n`\n\nexport const ZoneLocationQuery = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...GGeoPoint\n        }\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n\nexport const ZoneBranchLocationQuery = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n\nexport const ZoneColorsQuery = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n","import React from 'react'\n\nimport { PageTitle } from '../atoms/PageTitle'\nimport { i18n } from '../i18n'\n\nexport const NotFoundPage: React.SFC = () => (\n  <>\n    <PageTitle title={i18n.t`Not found`} />\n    <h1>{i18n.t`There is nothing here, sorry!`}</h1>\n  </>\n)\n","import * as RM from 'ramda'\n\nexport { RM }\n","import debug from 'debug'\nimport React from 'react'\nimport { Redirect, Route } from 'react-router'\n\ninterface IRedirectToLoginProps {\n  useOrigin?: boolean\n}\n\nconst log = debug('routing')\n\nexport const RedirectToLogin: React.SFC<IRedirectToLoginProps> = ({\n  useOrigin = true,\n}) => (\n  <Route\n    path=\"/login\"\n    children={({ match, location }) => {\n      if (match) {\n        return null\n      }\n      log('redirecting to login...')\n      return (\n        <Redirect\n          to={{\n            pathname: '/login',\n            state: { origin: useOrigin ? location.pathname : '/' },\n          }}\n        />\n      )\n    }}\n  />\n)\n","import { isSameDay } from 'date-fns'\nimport { format, formatWithOptions } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\nimport numeral from 'numeral'\n\nexport const formatLocale = formatWithOptions({ locale: csLocale })\n\nexport const fullDateFormat = 'dddd LL'\nexport const formatFullDate = formatLocale(fullDateFormat)\n\nexport const dateFormat = 'D.M.YYYY'\nexport const formatDate = formatLocale(dateFormat)\n\nexport const dateFormatISO = 'YYYY-MM-DD'\nexport const formatDateISO = format(dateFormatISO)\n\nexport const timeFormat = 'H:mm'\nexport const formatTime = formatLocale(timeFormat)\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const priceFormat = '0,0.[00]'\nexport const formatPrice = price => numeral(price).format(priceFormat)\n\nexport const formatTimeWithoutTodayDate = (time: string) =>\n  isSameDay(time, new Date()) ? formatTime(time) : formatDateTime(time)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GOrderDriverSelection } from '../../../graph/types'\n\nconst DriverFragment = gql`\n  fragment GDriver on User {\n    id\n    firstName\n    lastName\n  }\n`\n\nexport const OrderDriverFragment = gql`\n  fragment GOrderDriver on Order {\n    id\n    driver: userDeliveringOrder {\n      id\n      user {\n        ...GDriver\n      }\n    }\n  }\n  ${DriverFragment}\n`\n\nconst OrderDriverSelection = gql`\n  query GOrderDriverSelection($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      ...GOrderDriver\n    }\n    drivers(companyBranch: $branchId, onlyAvailable: false) {\n      ...GDriver\n    }\n  }\n  ${OrderDriverFragment}\n`\n\nexport const QueryDriverSelection = buildQuery<\n  GOrderDriverSelection.Query,\n  GOrderDriverSelection.Variables\n>(OrderDriverSelection)\n","import debug from 'debug'\n\n// @ts-ignore\ndebug.useColors = () => process.env.REACT_APP_STAGE === 'local'\n\nexport const logMain = debug('main')\nexport const logDebug = debug('debug')\nexport const logError = debug('error')\nexport const logAuth = debug('auth')\nexport const logRouting = debug('routing')\nexport const logPersistence = debug('persistence')\nexport const logBootstrap = debug('bootstrap')\nexport const logAccess = debug('access')\nexport const logGraph = debug('graph')\nexport const logForm = debug('form')\nexport const logSentry = debug('sentry')\nexport const logLang = debug('lang')\n// tslint:disable-next-line:no-console\nexport const logTest = console.log\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GMenuRecipeList } from '../../../graph/types'\nimport { MenuRecipeFragment } from '../models/MenuRecipeModel.graphql'\n\nexport const MenuRecipeListQuery = gql`\n  query GMenuRecipeList(\n    $branchId: ID!\n    $categoryId: ID\n    $categoryType: WareCategoryTypeEnum\n  ) {\n    recipes(\n      companyBranch: $branchId\n      wareCategory: $categoryId\n      wareCategoryType: $categoryType\n    ) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const QueryRecipeList = buildQuery<\n  GMenuRecipeList.Query,\n  GMenuRecipeList.Variables\n>(MenuRecipeListQuery)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GMenuStockList } from '../../../graph/types'\nimport { MenuStockItemFragment } from '../models/MenuStockModel.graphql'\n\nexport const MenuStockListQuery = gql`\n  query GMenuStockList($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const QueryMenuStockList = buildQuery<\n  GMenuStockList.Query,\n  GMenuStockList.Variables\n>(MenuStockListQuery)\n","import { createContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const RootContext = createContext<TRootModel | undefined>(undefined)\n","import React, { MouseEvent } from 'react'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { applyAlphaToColor, Colors, Radiuses, Spacing } from '../styling'\n\nexport interface ITouchButtonProps\n  extends React.HTMLAttributes<HTMLButtonElement> {\n  iconName?: string\n  iconColor?: Colors\n  iconSize?: number\n  text?: string\n  color?: Colors\n  badge?: ReactNode\n  disabled?: boolean\n  textNextToIcon?: boolean\n  className?: string\n  width?: string | number\n  height?: string | number\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n}\n\nconst applyAlpha = (alphaValue: number) => (props: ITouchButtonProps) =>\n  applyAlphaToColor(props.color!, alphaValue)\n\nconst TouchButtonStyled = styled.button`\n  min-height: ${Spacing.ButtonHeight};\n  min-width: ${Spacing.ButtonHeight};\n  width: ${({ width = '100%' }: ITouchButtonProps) => width};\n  height: ${({ height = '100%' }: ITouchButtonProps) => height};\n  margin: 0;\n  padding: 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  /* fallback font size for incompatible browsers */\n  font-size: 1rem;\n  font-size: calc(0.6rem + 0.5vw);\n  transition-duration: 0.2s;\n\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nconst ButtonLabelStyled = styled.div`\n  color: white;\n  text-align: center;\n  width: 100%;\n  overflow: hidden;\n`\nconst ButtonLabelNextToIconStyled = styled(ButtonLabelStyled)`\n  width: calc(100% - 4rem);\n  margin: 0 0 0 1rem;\n  text-align: left;\n  display: inline-block;\n  vertical-align: top;\n  overflow: hidden;\n`\n\nexport const TouchButton: React.SFC<ITouchButtonProps> = ({\n  children,\n  iconName,\n  iconColor = Colors.white,\n  iconSize = 3,\n  color = Colors.greyMiddle,\n  textNextToIcon = false,\n  badge,\n  text,\n  ...props\n}) => (\n  <TouchButtonStyled color={color} {...props}>\n    {iconName && (\n      <Icon iconName={iconName} color={iconColor} fontSize={iconSize} />\n    )}\n\n    {text &&\n      textNextToIcon && (\n        <ButtonLabelNextToIconStyled>{text}</ButtonLabelNextToIconStyled>\n      )}\n\n    {text && !textNextToIcon && <ButtonLabelStyled>{text}</ButtonLabelStyled>}\n\n    {badge}\n    {children}\n  </TouchButtonStyled>\n)\n","import Color from 'color'\nimport styled, { css } from 'styled-components'\n\nimport { Colors, Radiuses } from '../styling'\n\ninterface IProps {\n  color?: string\n  textColor?: string\n  padding?: number\n  stretchToParent?: boolean\n}\n\nexport const Card = styled.div`\n  background: ${getBackgroundColor};\n  color: ${getTextColor};\n  border-radius: ${Radiuses.Card};\n  padding: ${getPadding}rem;\n  margin: 0 0 0.5rem 0;\n  ${applyStretchToParentStyle};\n`\n\nCard.displayName = 'Card'\n\nfunction getPadding({ padding = 0.5 }: IProps) {\n  return padding\n}\n\nfunction getBackgroundColor({ color }: IProps) {\n  return Color(color || Colors.greyLight)\n    .alpha(0.8)\n    .lighten(0.4)\n    .string()\n}\n\nfunction getTextColor(props: IProps) {\n  return props.textColor || Colors.black\n}\n\nfunction applyStretchToParentStyle({ stretchToParent = false }: IProps) {\n  if (!stretchToParent) {\n    return ''\n  }\n  return css`\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  `\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\n\nimport { IPageLayoutProps, PageLayout } from '../molecules/PageLayout'\n\ninterface IFullPageLayoutProps extends IPageLayoutProps {\n  width?: number\n}\n\nfunction getLayout(width: number): Layout[] {\n  return [{ i: 'full', x: 0, y: 1, w: width, h: 10 }]\n}\n\nexport const FullPageLayout: React.SFC<IFullPageLayoutProps> = ({\n  children,\n  width = 16,\n  ...props\n}) => (\n  <PageLayout layouts={getLayout(width)} {...props}>\n    <div key=\"full\">{children}</div>\n  </PageLayout>\n)\n","import 'rc-slider/assets/index.css'\n\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors, Spacing } from '../styling'\nimport { WithRoot } from './WithRoot'\n\nconst SoundControlContainerStyled = styled.div`\n  position: relative;\n`\n\nconst SoundButtonStyled = styled(TouchButton)`\n  height: ${Spacing.ButtonHeight};\n  width: ${Spacing.ButtonHeight};\n  position: absolute;\n  right: 0;\n  top: 0;\n`\n\nexport class SoundControl extends React.Component {\n  state = { playPreview: false }\n  render() {\n    return (\n      <WithRoot\n        observe={true}\n        render={({ user }) => (\n          <SoundControlContainerStyled>\n            <SoundButtonStyled\n              color={user.soundEnabled ? Colors.green : Colors.red}\n              iconName={user.soundEnabled ? 'volume_up' : 'volume_off'}\n              iconSize={2}\n              onClick={() => {\n                user.controlSound(!user.soundEnabled)\n              }}\n            />\n          </SoundControlContainerStyled>\n        )}\n      />\n    )\n  }\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../graph/buildQuery'\nimport { GLogoutWidget } from '../graph/types'\n\nexport const QueryLogoutWidget = buildQuery<\n  GLogoutWidget.Query,\n  GLogoutWidget.Variables\n>(gql`\n  query GLogoutWidget($id: ID!) {\n    user(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n`)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { WithRoot } from '../atoms/WithRoot'\nimport { GLogoutWidget } from '../graph/types'\nimport { i18n } from '../i18n'\nimport { Colors } from '../styling'\nimport { QueryLogoutWidget } from './LogoutWidget.graphql'\n\nconst LogoutWidgetStyled = styled.div`\n  margin-left: 1rem;\n  color: ${Colors.greyLight};\n  &:hover {\n    color: ${Colors.white};\n  }\n`\nconst LoggedUserNameStyled = styled.span`\n  color: ${Colors.greyLight};\n  text-decoration: none;\n  font-weight: lighter;\n  position: relative;\n  top: 0.6rem;\n  display: inline-block;\n  max-width: 10rem;\n  text-align: right;\n`\n\nconst IconStyled = styled.span`\n  padding: 0.5rem 0.5rem 0 0.5rem;\n  display: inline-block;\n  vertical-align: top;\n`\n\nexport const LogoutWidget: React.SFC = () => (\n  <WithRoot\n    render={({ auth }) => (\n      <QueryLogoutWidget\n        variables={{ id: auth.userId }}\n        renderLoading={() => null}\n        render={({ user }) => (\n          <LogoutWidgetStyled data-testid=\"logout-widget\">\n            <Link to=\"/logout\">\n              <LoggedUserNameStyled>\n                {getNameDisplay(user)}\n              </LoggedUserNameStyled>\n              <IconStyled>\n                <Icon iconName=\"exit_to_app\" />\n              </IconStyled>\n            </Link>\n          </LogoutWidgetStyled>\n        )}\n      />\n    )}\n  />\n)\n\nfunction getNameDisplay(user: GLogoutWidget.User) {\n  if (user) {\n    return `${user.firstName} ${user.lastName}`\n  } else {\n    return i18n.t`Not logged in`\n  }\n}\n","import Color from 'color'\nimport React, { MouseEvent } from 'react'\nimport { Route } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { Colors, Radiuses, Spacing } from '../styling'\n\ninterface IHomeButtonProps {\n  iconColor?: Colors\n  color?: Colors\n  disabled?: boolean\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n  goBack?: boolean\n}\n\nconst applyAlpha = (alphaValue: number) => (props: IHomeButtonProps) =>\n  Color(props.color)\n    .alpha(alphaValue)\n    .string()\n\nconst HomeButtonStyled = styled.button`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 0 0 ${Radiuses.Button} 0 !important;\n  height: ${Spacing.ButtonHeight};\n  width: ${Spacing.ButtonHeight};\n  margin: 0;\n  padding: 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  font-size: 1rem;\n  transition-duration: 0.2s;\n\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nexport const HomeButton: React.SFC<IHomeButtonProps> = ({\n  color = Colors.greyMiddle,\n  iconColor = Colors.white,\n  goBack = false,\n  ...props\n}) => {\n  if (goBack) {\n    return (\n      <Route>\n        {({ history }) => (\n          <HomeButtonStyled\n            color={color}\n            onClick={() => history.goBack()}\n            {...props}\n          >\n            <Icon iconName=\"chevron_left\" color={iconColor} fontSize={2.2} />\n          </HomeButtonStyled>\n        )}\n      </Route>\n    )\n  }\n  return (\n    <Link to=\"/\">\n      <HomeButtonStyled color={color} {...props}>\n        <Icon iconName=\"home\" color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    </Link>\n  )\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\nimport styled from 'styled-components'\n\nimport { GridLayout } from '../atoms/GridLayout'\nimport { PageTitle } from '../atoms/PageTitle'\nimport { SoundControl } from '../atoms/SoundControl'\nimport { LogoutWidget } from '../organisms/LogoutWidget'\nimport { SecureRoute } from '../routes/SecureRoute'\nimport { HomeButton } from './HomeButton'\n\nexport interface IPageLayoutProps {\n  pageTitle?: string\n  layouts?: Layout[]\n  hideLogoutWidget?: boolean\n  showSoundControl?: boolean\n  useBackButton?: boolean\n  scrollPageTitle?: boolean\n}\n\nconst TopLeftButtonContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n`\n\nconst getPosition = (props: IPageLayoutProps) =>\n  props.scrollPageTitle ? 'absolute' : 'fixed'\n\nconst TopRightContainer = styled.div`\n  position: ${getPosition};\n  top: 0;\n  right: 0;\n  z-index: 100;\n`\n\nconst PageTitleContainer = styled.div`\n  position: ${getPosition};\n  top: 0rem;\n  left: 4rem;\n`\n\nconst SoundControlContainer = styled.div`\n  position: fixed;\n  top: 0rem;\n  right: 15rem;\n`\n\nexport const PageLayout: React.SFC<IPageLayoutProps> = ({\n  pageTitle = '',\n  layouts = [],\n  hideLogoutWidget = false,\n  showSoundControl = false,\n  useBackButton = false,\n  scrollPageTitle = true,\n  children,\n}) => (\n  <>\n    {pageTitle && <PageTitle title={pageTitle} />}\n    {showSoundControl && (\n      <SoundControlContainer>\n        <SoundControl />\n      </SoundControlContainer>\n    )}\n\n    {!hideLogoutWidget && (\n      <TopRightContainer scrollPageTitle={scrollPageTitle}>\n        <SecureRoute path=\"/\" component={LogoutWidget} redirect={false} />\n      </TopRightContainer>\n    )}\n\n    <PageTitleContainer scrollPageTitle={scrollPageTitle}>\n      <PageTitle.Display />\n    </PageTitleContainer>\n\n    <GridLayout layouts={[...layouts]}>{children}</GridLayout>\n\n    <TopLeftButtonContainer>\n      <HomeButton goBack={useBackButton} />\n    </TopLeftButtonContainer>\n  </>\n)\n","import { useEffect } from 'react'\n\nexport const useEffectOnce = (effect: () => unknown | (() => unknown)) => {\n  return useEffect(effect, [])\n}\n","import React from 'react'\n\ninterface ILoadingProps {\n  text?: string\n}\n\nexport const Loading: React.SFC<ILoadingProps> = ({ text = '...' }) => (\n  <h1>{text}</h1>\n)\n","import { LocationDescriptor } from 'history'\nimport numeral from 'numeral'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuRecipeCreate,\n  GMenuRecipeDefaultVat,\n  GMenuRecipeDelete,\n  GMenuRecipeUpdate,\n  WareCategoryTypeEnum,\n  WarePriceTypeEnum,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TRecipeFormValues } from '../menutypes'\nimport { MenuRecipeDefaultVat } from '../organisms/RecipeForm.graphql'\nimport { MenuRecipeListQuery } from '../organisms/RecipeList.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuRecipeCreateMutation,\n  MenuRecipeDeleteMutation,\n  MenuRecipeUpdateMutation,\n  MenuRecipeVisibilityMutation,\n} from './MenuRecipeModel.graphql'\n\nexport const MenuRecipeModel = MenuBaseModel.named('MenuRecipe').actions(\n  self => ({\n    changeVisibility(recipeId: ID, visible: boolean) {\n      self.client.mutate({\n        mutation: MenuRecipeVisibilityMutation,\n        variables: { recipeId, visible },\n        optimisticResponse: {\n          updateRecipe: {\n            __typename: 'Recipe',\n            id: recipeId,\n            visible,\n          },\n        },\n      })\n    },\n    createRecipe(\n      formValues: TRecipeFormValues,\n      recipeType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuRecipeCreate.Variables = {\n        recipe: {\n          companyBranch: self.branchId,\n          wareCategoryType: recipeType,\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeCreateMutation,\n          variables,\n          refetchQueries: [\n            {\n              query: MenuRecipeListQuery,\n              variables: {\n                branchId: self.branchId,\n              },\n            },\n          ],\n        }),\n      )\n    },\n    updateRecipe(formValues: TRecipeFormValues) {\n      const variables: GMenuRecipeUpdate.Variables = {\n        recipeId: formValues.id,\n        recipe: {\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteRecipe(recipeId: ID) {\n      const variables: GMenuRecipeDelete.Variables = {\n        recipeId,\n      }\n      await self.client.mutate({\n        mutation: MenuRecipeDeleteMutation,\n        variables,\n        refetchQueries: [\n          {\n            query: MenuRecipeListQuery,\n            variables: {\n              branchId: self.branchId,\n            },\n          },\n        ],\n      })\n    },\n    async getDefaultVat() {\n      const { data } = await self.client.query<GMenuRecipeDefaultVat.Query>({\n        query: MenuRecipeDefaultVat,\n        variables: { branchId: self.branchId },\n      })\n      if (data) {\n        const {\n          companyBranch: { defaultVats },\n        } = data\n        return defaultVats.reduce((result, { vatId, priceType }) => {\n          result[priceType.enum] = vatId\n          return result\n        }, {})\n      }\n      return {}\n    },\n  }),\n)\n\nfunction getFormVariables(formValues: TRecipeFormValues) {\n  return {\n    code: formValues.code,\n    nameLabel: formValues.nameLabel,\n    internalNote: formValues.internalNote,\n    descriptionLabel: formValues.descriptionLabel,\n    enabled: formValues.visible,\n    prices: Object.keys(formValues.prices).map(\n      (priceType: WarePriceTypeEnum, idx) => ({\n        warePriceType: WarePriceTypeEnum[priceType],\n        price: { value: numeral(formValues.prices[priceType].value).value() },\n        vat: formValues.prices[priceType].vatId!,\n      }),\n    ),\n    sideDishCategories: formValues.sideDishes.map(RM.prop('id')),\n    wareCategories: formValues.categories.map(RM.prop('id')),\n    associatedRecipes: formValues.associatedRecipes.map(\n      RM.pick(['associatedRecipe', 'warePriceType']),\n    ),\n    ingredients: formValues.ingredients.map(({ stockItem, quantity }) => {\n      return { stockItem, quantity: parseNumber(quantity) }\n    }),\n  }\n}\n\nfunction parseNumber(value: string | number) {\n  return typeof value === 'number'\n    ? value\n    : Number.parseFloat(value.replace(',', '.'))\n}\n\nexport const getRecipeRoute = (\n  recipeId: ID,\n  recipeType: WareCategoryTypeEnum,\n): LocationDescriptor => ({\n  pathname: recipeId,\n  state: { recipeType },\n})\n\nexport type TMenuRecipeModel = typeof MenuRecipeModel.Type\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { PriceFragment } from '../../../graph/fragments'\nimport { GMenuRecipeFormAssoc } from '../../../graph/types'\nimport { MenuCategoryListFragment } from './CategoryList.graphql'\n\nexport const MenuRecipePriceFragment = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      ...GPrice\n    }\n    vat {\n      id\n    }\n  }\n  ${PriceFragment}\n`\n\nexport const MenuAssocRecipeFragment = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const MenuRecipeFormQuery = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...GMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...GMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n  ${MenuRecipePriceFragment}\n  ${MenuCategoryListFragment}\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeFormAssocQuery = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeDefaultVat = gql`\n  query GMenuRecipeDefaultVat($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n    }\n  }\n`\n\nexport const QueryMenuRecipeFormAssoc = buildQuery<\n  GMenuRecipeFormAssoc.Query,\n  GMenuRecipeFormAssoc.Variables\n>(MenuRecipeFormAssocQuery)\n","import gql from 'graphql-tag'\n\nexport const AllergenFragment = gql`\n  fragment GAllergen on Allergen {\n    id\n    code\n    enum\n    category\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const WareUnitFragment = gql`\n  fragment GWareUnit on WareUnit {\n    id\n    enum\n    code\n  }\n`\n","import React from 'react'\nimport RGL, { Layout, WidthProvider } from 'react-grid-layout'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\ninterface IGridLayoutProps {\n  layouts: Layout[]\n}\n\nexport const GridLayout: React.SFC<IGridLayoutProps> = ({\n  children,\n  layouts,\n}) => (\n  <ReactGridLayout\n    className=\"layout\"\n    layout={layouts}\n    cols={16}\n    rowHeight={55}\n    margin={[8, 8]}\n    autoSize={false}\n    isDraggable={false}\n    isResizable={false}\n    compactType={null}\n    measureBeforeMount={true}\n  >\n    {children}\n  </ReactGridLayout>\n)\n","import gql from 'graphql-tag'\n\nimport { MenuCategoryFormFragment } from '../organisms/CategoryForm.graphql'\n\nexport const SortMenuCategoryMutation = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport const MenuCategoryCreateMutation = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport const MenuCategoryUpdateMutation = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...GMenuCategoryForm\n    }\n  }\n  ${MenuCategoryFormFragment}\n`\n\nexport const MenuCategoryVisibility = gql`\n  mutation GMenuCategoryVisibility($categoryId: ID!, $visible: Boolean!) {\n    updateWareCategory(id: $categoryId, wareCategory: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport const MenuCategoryDeleteMutation = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n","import { LocationDescriptor } from 'history'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuCategoryCreate,\n  GMenuCategoryDelete,\n  GMenuCategoryUpdate,\n  GSortMenuCategory,\n  WareCategoryTypeEnum,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TCategoryFormValues } from '../organisms/CategoryFormLoader'\nimport { CategoryListQuery } from '../organisms/CategoryList.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuCategoryCreateMutation,\n  MenuCategoryDeleteMutation,\n  MenuCategoryUpdateMutation,\n  MenuCategoryVisibility,\n  SortMenuCategoryMutation,\n} from './MenuCategoryModel.graphql'\n\nexport const MenuCategoryModel = MenuBaseModel.named('MenuCategory').actions(\n  self => ({\n    async sortCategory(categoryId: ID, offset: number) {\n      const variables: GSortMenuCategory.Variables = {\n        categoryId,\n        offset,\n      }\n      const result = await self.client.mutate({\n        mutation: SortMenuCategoryMutation,\n        variables,\n      })\n      return Boolean(result.data && result.data.success)\n    },\n    changeVisibility(categoryId: ID, visible: boolean) {\n      self.client.mutate({\n        mutation: MenuCategoryVisibility,\n        variables: { categoryId, visible },\n        optimisticResponse: {\n          updateRecipe: {\n            __typename: 'Recipe',\n            id: categoryId,\n            visible,\n          },\n        },\n      })\n    },\n    createCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryCreate.Variables = {\n        input: {\n          companyBranch: self.branchId,\n          wareCategoryType: categoryType,\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryCreateMutation,\n          variables,\n          refetchQueries: [\n            {\n              query: CategoryListQuery,\n              variables: {\n                branchId: self.branchId,\n                categoryType,\n              },\n            },\n          ],\n        }),\n      )\n    },\n    async updateCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryUpdate.Variables = {\n        categoryId: formValues.id,\n        input: {\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteCategory(categoryId: ID, categoryType: WareCategoryTypeEnum) {\n      const variables: GMenuCategoryDelete.Variables = {\n        categoryId,\n      }\n      await self.client.mutate({\n        mutation: MenuCategoryDeleteMutation,\n        variables,\n        refetchQueries: [\n          {\n            query: CategoryListQuery,\n            variables: {\n              branchId: self.branchId,\n              categoryType,\n            },\n          },\n        ],\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(\n  formValues: TCategoryFormValues,\n  categoryType: WareCategoryTypeEnum,\n) {\n  return Object.assign({\n    nameLabel: formValues.nameLabel,\n    internalNoteLabel: formValues.internalNoteLabel,\n    enabled: formValues.visible,\n    pictogram: formValues.pictogram,\n    recipes: formValues.recipes.map(RM.prop('id')),\n  })\n}\n\nexport const getCategoryRoute = (\n  recipeId: ID,\n  categoryType: WareCategoryTypeEnum,\n): LocationDescriptor => ({\n  pathname: recipeId,\n  state: { categoryType },\n})\n\nexport type TMenuCategoryModel = typeof MenuCategoryModel.Type\n","import gql from 'graphql-tag'\n\nimport { SpecificBusinessHourFragment } from '../organisms/SpecificBusinessHours.graphql'\n\nexport const CreateSpecificBusinessHour = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`\n\nexport const DeleteSpecificBusinessHour = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n","import { types } from 'mobx-state-tree'\n\nimport {\n  DateTime,\n  GCreateSpecificBusinessHour,\n  GDeleteSpecificBusinessHour,\n  Time,\n} from '../../../graph/types'\nimport { formatTime } from '../../../helpers/formats'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  CreateSpecificBusinessHour,\n  DeleteSpecificBusinessHour,\n} from './BusinessHoursModel.graphql'\n\nexport enum ESpecificHourMode {\n  TIMESPAN = 'TIMESPAN',\n  FULLDAY = 'FULLDAY',\n}\n\nexport interface ISpecificFormData {\n  date: DateTime\n  openAt: Time\n  closeAt: Time\n  note: string\n}\n\nconst byIdPredicate = RM.complement(RM.propEq('id'))\n\nexport const BusinessHoursModel = BaseModel.named('BusinessHours')\n  .props({\n    specificMode: types.optional(\n      types.enumeration(['TIMESPAN', 'FULLDAY']),\n      ESpecificHourMode.TIMESPAN,\n    ),\n  })\n  .actions(self => ({\n    changeSpecificMode(mode: ESpecificHourMode) {\n      self.specificMode = mode\n    },\n    submitSpecificHour(values: ISpecificFormData) {\n      const variables: GCreateSpecificBusinessHour.Variables = {\n        input: {\n          companyBranch: self.root.settings.branchId!,\n          specificDate: values.date,\n          closed: self.specificMode === ESpecificHourMode.FULLDAY,\n          openAt: values.openAt && formatTime(values.openAt),\n          closeAt: values.closeAt && formatTime(values.closeAt),\n          closedNote: values.note,\n        },\n      }\n      self.client.mutate<GCreateSpecificBusinessHour.Mutation>({\n        mutation: CreateSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.concat(\n                  mutationResult.data.result,\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n    deleteSpecificHour(businessHourId: ID) {\n      const variables: GDeleteSpecificBusinessHour.Variables = {\n        id: businessHourId,\n      }\n      self.client.mutate({\n        mutation: DeleteSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.filter(\n                  byIdPredicate(mutationResult.data.result.id),\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n  }))\n\nexport type TBusinessHoursModel = typeof BusinessHoursModel.Type\nexport type TBusinessHoursModelProps = typeof BusinessHoursModel.SnapshotType\n","import { DocumentNode } from 'graphql'\nimport { Lambda } from 'mobx'\nimport React from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\nimport { Redirect } from 'react-router'\nimport RedBox from 'redbox-react'\n\nimport { Loading } from '../atoms/Loading'\nimport { logError } from '../helpers/logger'\nimport { whenGoingOnline } from '../helpers/offline'\nimport { reportError } from '../helpers/sentry'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean | ((result: TResult) => ReactNode)\n    refetchOnConnectionLost?: boolean\n  }\n  class GQuery extends React.Component<IProps> {\n    private cleanup: Lambda[] = []\n    componentWillUnmount() {\n      this.cleanup.forEach(fn => fn())\n    }\n    componentDidUpdate() {\n      this.cleanup.forEach(fn => fn())\n    }\n    render() {\n      const {\n        render,\n        renderFragment,\n        renderLoading = true,\n        renderError = true,\n        refetchOnConnectionLost = false,\n        children,\n        ...props\n      } = this.props\n      return (\n        <Query query={query} {...props}>\n          {result => {\n            if (result.loading || !result.data) {\n              if (typeof renderLoading === 'function') {\n                return renderLoading(result)\n              } else if (renderLoading === true) {\n                return <Loading />\n              }\n            }\n            if (result.error) {\n              reportError(result.error)\n              logError(result.error)\n              if (typeof renderError === 'function') {\n                return renderError(result)\n              } else if (renderError === true) {\n                return process.env.NODE_ENV === 'production' ? (\n                  <Redirect to=\"/error\" />\n                ) : (\n                  <RedBox error={result.error} />\n                )\n              } else {\n                return null\n              }\n            }\n            if (refetchOnConnectionLost) {\n              this.cleanup.push(whenGoingOnline(result.refetch))\n            }\n            if (result.data) {\n              if (renderFragment) {\n                return <>{renderFragment(result.data, result)}</>\n              }\n              if (render) {\n                return render(result.data, result)\n              }\n            }\n            return children || null\n          }}\n        </Query>\n      )\n    }\n  }\n  return GQuery\n}\n","import { GraphQLError } from 'graphql'\nimport Raven from 'raven-js'\nimport { ErrorInfo } from 'react'\nimport { VError } from 'verror'\n\nimport { appConfig } from '../config'\nimport { logSentry } from './logger'\nimport { RM } from './ramda'\n\nexport const installSentry = (cb: () => void) => {\n  const { sentryDSN } = appConfig\n  if (sentryDSN) {\n    logSentry('enabled with DSN %s', sentryDSN)\n    Raven.config(sentryDSN, {\n      environment: process.env.REACT_APP_STAGE,\n    }).install()\n    Raven.context(cb)\n  } else {\n    cb()\n  }\n}\n\nexport const identifyUser = (userId: string | null) => {\n  Raven.setUserContext({\n    userId,\n  })\n}\n\nexport const reportRenderingError = (error: Error, info: ErrorInfo) => {\n  if (Raven.isSetup()) {\n    Raven.captureException(error, {\n      extra: info,\n    })\n    Raven.showReportDialog()\n  }\n}\n\nexport const reportFailingQuery = (\n  errors: ReadonlyArray<GraphQLError>,\n  data: object,\n) => {\n  Raven.captureBreadcrumb({\n    category: 'graphql',\n    level: 'debug',\n    message: 'query',\n    data: {\n      ...data,\n      errors,\n    },\n  })\n  errors.forEach(err => {\n    Raven.captureException(new Error(err.message), { extra: err })\n  })\n  const userErrors = errors.filter(RM.propEq('showToUser', true))\n  if (userErrors.length && Raven.lastEventId()) {\n    Raven.showReportDialog({\n      title: RM.head(userErrors)!.message,\n    })\n  }\n}\n\nexport const reportError = (error: Error) => {\n  let extra = {}\n  if (error instanceof VError) {\n    extra = {\n      cause: VError.cause(error),\n      ...VError.info(error),\n    }\n  }\n  Raven.captureException(error, { extra })\n  return error\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { Statistics } from '../../../graph/types'\n\nexport const StatisticsQuery = gql`\n  query Statistics($branches: [ID!]!, $dateFrom: Date!, $dateTo: Date!) {\n    stats: statistics(\n      branches: $branches\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n    ) {\n      categoryStatisticsPlain\n      dailyStatisticsPlain\n      deliveryStatisticsPlain\n    }\n  }\n`\n\nexport const CreateFinancialReport = gql`\n  mutation GCreateFinancialReport($companyBranchId: ID!) {\n    result: createFinancialReport(companyBranchId: $companyBranchId) {\n      id\n    }\n  }\n`\n\nexport const QueryStatistics = buildQuery<\n  Statistics.Query,\n  Statistics.Variables\n>(StatisticsQuery)\n","import numeral from 'numeral'\n\nconst aliasLocales = {\n  en: 'en-gb'\n}\n\nexport async function changeNumeralLocale(lang: string) {\n  await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"numeral-[index]\" */\n    `numeral/locales/${aliasLocales[lang] || lang}`\n  )\n  numeral.locale(aliasLocales[lang] || lang)\n}\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport * as detector from 'locales-detector'\nimport { observer } from 'mobx-react'\nimport React from 'react'\n\nimport Pacman from './atoms/Pacman'\nimport { useRoot } from './atoms/RootProvider'\nimport { logLang } from './helpers/logger'\nimport { changeNumeralLocale } from './locale/numeral'\n\nexport const i18n = setupI18n()\n\nexport const fallbackLanguage = 'en'\nexport const supportedLanguages = ['cs', 'sk', 'en']\n\nexport const I18nManager = observer(({ children }) => {\n  const { user } = useRoot()\n  if (!user.language) {\n    return <Pacman />\n  }\n  return (\n    <I18nProvider language={user.language} i18n={i18n}>\n      {React.Children.only(children)}\n    </I18nProvider>\n  )\n})\n\nexport function detectLanguage() {\n  const resolver = new detector.LocaleResolver(\n    [new detector.NavigatorDetector()],\n    [new detector.LanguageOnlyTransformer()],\n  )\n  const languages = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc => supportedLanguages.includes(loc))\n  return supported || fallbackLanguage\n}\n\nexport async function changeLanguage(lang: string) {\n  if (!supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await loadCatalog(lang)\n  i18n.activate(lang)\n  await changeNumeralLocale(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.ts`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","import gql from 'graphql-tag'\n\nexport const AddressFragment = gql`\n  fragment GAddress on JsonAddress {\n    city\n    street\n    houseNumber\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const GeoPointFragment = gql`\n  fragment GGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n","import gql from 'graphql-tag'\n\nimport { GeoPointFragment } from './GeoPointFragment.graphql'\n\nexport const CompanyBranchFragment = gql`\n  fragment GCompanyBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...GGeoPoint\n    }\n    brand {\n      id\n      name\n    }\n  }\n  ${GeoPointFragment}\n`\n","import gql from 'graphql-tag'\n\nexport const EmailFragment = gql`\n  fragment GEmail on Email {\n    email\n    description\n    default\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const PhoneFragment = gql`\n  fragment GPhone on Phone {\n    phone\n    description\n    default\n  }\n`\n","import gql from 'graphql-tag'\n\nimport { EmailFragment } from './EmailFragment.graphql'\nimport { PhoneFragment } from './PhoneFragment.graphql'\n\nexport const CustomerFragment = gql`\n  fragment GCustomer on JsonCustomer {\n    firstName\n    lastName\n    defaultEmail {\n      ...GEmail\n    }\n    defaultPhone {\n      ...GPhone\n    }\n  }\n  ${EmailFragment}\n  ${PhoneFragment}\n`\n","import gql from 'graphql-tag'\n\nexport const PriceFragment = gql`\n  fragment GPrice on PriceConverted {\n    value\n  }\n`\n","export { AddressFragment } from './AddressFragment.graphql'\nexport { CompanyBranchFragment } from './CompanyBranchFragment.graphql'\nexport { CustomerFragment } from './CustomerFragment.graphql'\nexport { EmailFragment } from './EmailFragment.graphql'\nexport { GeoPointFragment } from './GeoPointFragment.graphql'\nexport { PhoneFragment } from './PhoneFragment.graphql'\nexport { PriceFragment } from './PriceFragment.graphql'\n","export const appConfig = {\n  endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n  persistenceKey: 'admin@local',\n  pageTitleSuffix: 'LOCAL',\n  sentryDSN: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'admin@dev',\n    pageTitleSuffix: 'DEV',\n    sentryDSN: 'https://1017631ac60a4ee0bfea56d5857dcc46@sentry.io/1232073',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'admin@prod',\n    pageTitleSuffix: 'Speɘdlo',\n    sentryDSN: 'https://1017631ac60a4ee0bfea56d5857dcc46@sentry.io/1232073',\n  })\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GSpecificBusinessHours } from '../../../graph/types'\n\nexport const SpecificBusinessHourFragment = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const QuerySpecificBusinessHours = buildQuery<\n  GSpecificBusinessHours.Query,\n  GSpecificBusinessHours.Variables\n>(gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`)\n","import gql from 'graphql-tag'\n\nimport { MenuRecipeFragment } from '../models/MenuRecipeModel.graphql'\n\nexport const MenuCategoryFormFragment = gql`\n  fragment GMenuCategoryForm on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    pictogram\n    recipes {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuCategoryFormQuery = gql`\n  query GMenuCategoryForm($categoryId: ID!) {\n    wareCategory(id: $categoryId) {\n      ...GMenuCategoryForm\n    }\n  }\n  ${MenuCategoryFormFragment}\n`\n","import { addSeconds, differenceInMilliseconds } from 'date-fns'\nimport { Component } from 'react'\n\ninterface IRenderProps {\n  isActive: boolean\n  nextLoop(): void\n}\n\ninterface IProps {\n  intervalSec: number\n  enabled?: boolean\n  render(props: IRenderProps): ReactNode\n}\n\ninterface IState {\n  isActive: boolean\n  nextTime: Date\n}\n\nexport class IntervalRender extends Component<IProps, IState> {\n  state: IState = { isActive: false, nextTime: this.getNextTime() }\n  timer = 0\n  componentDidMount() {\n    this.executeTimer()\n  }\n  componentDidUpdate() {\n    this.executeTimer()\n  }\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer)\n    }\n  }\n  getNextTime() {\n    return addSeconds(new Date(), this.props.intervalSec)\n  }\n  executeTimer = () => {\n    if (this.timer) {\n      clearTimeout(this.timer)\n      this.timer = 0\n    }\n    if (this.props.enabled === false) {\n      return\n    }\n    const timeMs = differenceInMilliseconds(this.state.nextTime, new Date())\n    // @ts-ignore (setTimeout returning NodeJS.Timer) for some weird reason\n    this.timer = setTimeout(this.activate, timeMs)\n  }\n  activate = () => {\n    if (this.props.enabled !== false) {\n      this.setState({\n        isActive: true,\n        nextTime: this.getNextTime(),\n      })\n    }\n  }\n  deactivate = () => {\n    this.setState({ isActive: false })\n    this.executeTimer()\n  }\n  render() {\n    const { isActive } = this.state\n    return this.props.render({\n      isActive,\n      nextLoop: this.deactivate,\n    })\n  }\n}\n","import React from 'react'\nimport Sound from 'react-sound'\n\nimport { logMain } from '../helpers/logger'\nimport { IntervalRender } from './IntervalRender'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {\n  intervalSec: number\n  soundUrl: string\n  shouldPlay?: boolean\n  skipEnableChecks?: boolean\n}\n\nexport const SoundPlayInterval: React.SFC<IProps> = ({\n  intervalSec,\n  soundUrl,\n  shouldPlay = true,\n  skipEnableChecks = false,\n}) => (\n  <WithRoot\n    observe={true}\n    render={({ config, user }) => {\n      if (!skipEnableChecks) {\n        if (!config.soundEnabled) {\n          logMain('sound is disabled')\n          return null\n        }\n        if (!user.soundEnabled) {\n          logMain('sound not enabled by user')\n          return null\n        }\n      }\n      logMain('sound play status: %s', shouldPlay)\n      return (\n        <IntervalRender\n          intervalSec={intervalSec}\n          enabled={shouldPlay}\n          render={({ isActive, nextLoop }) => (\n            <Sound\n              url={soundUrl}\n              playStatus={isActive ? 'PLAYING' : 'STOPPED'}\n              onFinishedPlaying={nextLoop}\n              loop={false}\n              autoLoad={true}\n              volume={user.soundVolume}\n            />\n          )}\n        />\n      )\n    }}\n  />\n)\n","module.exports = __webpack_public_path__ + \"static/media/connectionWarning.ac6fe03b.mp3\";","import { observable } from 'mobx'\nimport { getParent, types } from 'mobx-state-tree'\nimport { scroller } from 'react-scroll'\n\nimport { GOrderList } from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TOrderModel } from './OrderModel'\n\nexport const OrderListModel = BaseModel.named('OrderList')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n  })\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length ? Array.from(self.branches) : []\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n    get isSingleBranchSelected() {\n      return self.branches.length === 1\n    },\n    get orderMap() {\n      return getParent<TOrderModel>(self).map\n    },\n  }))\n  .actions(self => ({\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    panMapToOrder(order: GOrderList.Orders) {\n      self.orderMap.panToOrder(order.id)\n    },\n  }))\n  .extend(self => {\n    const detailOpen = observable(new Map())\n\n    return {\n      views: {\n        isOrderDetailOpen(orderId: string) {\n          return detailOpen.has(orderId)\n        },\n      },\n      actions: {\n        toggleOrderDetail(order: GOrderList.Orders) {\n          const orderId = order.id\n          if (detailOpen.has(orderId)) {\n            detailOpen.delete(orderId)\n          } else {\n            detailOpen.set(orderId, true)\n            self.panMapToOrder(order)\n          }\n        },\n        focusOrderDetail(orderId: ID) {\n          if (!detailOpen.has(orderId)) {\n            detailOpen.set(orderId, true)\n          }\n          setImmediate(() => {\n            scroller.scrollTo(`order-${orderId}`, {\n              smooth: 'easeInOutQuart',\n              containerId: 'order-list',\n              absolute: true,\n              offset: -140,\n            })\n          })\n        },\n      },\n    }\n  })\n\nexport type TOrderListModel = typeof OrderListModel.Type\n","import { ErrorResponse, onError } from 'apollo-link-error'\nimport debug from 'debug'\n\nimport { reportFailingQuery } from '../helpers/sentry'\n\nconst log = debug('graph:error')\n\nexport const errorHandler = ({\n  graphQLErrors,\n  networkError,\n  operation,\n}: ErrorResponse) => {\n  if (graphQLErrors) {\n    reportFailingQuery(graphQLErrors, {\n      query: operation.operationName,\n      variables: operation.variables,\n    })\n    graphQLErrors.map(({ message, locations, path }) =>\n      log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    )\n  }\n  if (networkError) {\n    log(`[Network error]: ${networkError}`)\n  }\n}\n\nexport const createErrorLink = () => onError(errorHandler)\n\nexport interface IQueryError extends Error {\n  showToUser: boolean\n}\n\nexport type TQueryErrors = IQueryError[] | null\n\n// tslint:disable-next-line:no-any\nexport const getQueryErrors = async (query: Promise<any>) => {\n  const result = await query\n  if (result && result.errors) {\n    return result.errors as IQueryError[]\n  }\n  return null\n}\n","import React from 'react'\n\nimport { TRootModel } from '../models/RootModel'\nimport { WithRoot as RealWithRoot } from './RootProvider'\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.SFC<IProps> = ({ render, observe }) => (\n  <RealWithRoot children={render} observe={observe} />\n)\n","import ActionCable from 'actioncable'\nimport { ApolloLink, Observable, Operation } from 'apollo-link'\nimport { getOperationDefinitionOrDie } from 'apollo-utilities'\nimport { print } from 'graphql/language'\nimport { computed } from 'mobx'\nimport { VError } from 'verror'\n\nimport { appConfig } from '../config'\nimport { TAuthModel } from '../models/AuthModel'\n\nconst getChannelId = () =>\n  Math.round(Date.now() + Math.random() * 100000).toString(16)\n\nexport default function createSubscriptionLink(auth: TAuthModel) {\n  const cableUrl = computed(\n    () => `${appConfig.endpoint}/cable?token=${auth.token}`,\n  )\n\n  let cable\n  const channelName = 'GraphqlChannel'\n  const actionName = 'execute'\n  const connectionParams = {}\n\n  return new ApolloLink(operation => {\n    if (!auth.isAuthenticated) {\n      throw new VError(\n        `Executing operation ${operation.operationName} before authenticated`,\n        { operation },\n      )\n    }\n    if (!cable) {\n      cable = ActionCable.createConsumer(cableUrl.get())\n    }\n    return new Observable(observer => {\n      const channelId = getChannelId()\n\n      const subscription = cable.subscriptions.create(\n        Object.assign(\n          {},\n          {\n            channel: channelName,\n            channelId: channelId,\n          },\n          connectionParams,\n        ),\n        {\n          connected: function() {\n            this.perform(actionName, {\n              query: operation.query ? print(operation.query) : null,\n              variables: operation.variables,\n              // @ts-ignore\n              operationId: operation.operationId,\n              operationName: operation.operationName,\n            })\n          },\n          received: function(payload: {\n            result: { data: object }\n            more: boolean\n          }) {\n            if (payload.result.data) {\n              observer.next(payload.result)\n            }\n\n            if (!payload.more) {\n              this.unsubscribe()\n              observer.complete()\n            }\n          },\n        },\n      )\n\n      return subscription\n    })\n  })\n}\n\nexport function isSubscriptionOperation({ query }: Operation) {\n  const { operation } = getOperationDefinitionOrDie(query)\n  return operation === 'subscription'\n}\n","import { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { BatchHttpLink } from 'apollo-link-batch-http'\nimport QueueLink from 'apollo-link-queue'\nimport { RetryLink } from 'apollo-link-retry'\nimport { autorun } from 'mobx'\n\nimport { appConfig } from '../config'\nimport { logGraph } from '../helpers/logger'\nimport { isNetworkOnline } from '../helpers/offline'\nimport { TAuthModel } from '../models/AuthModel'\nimport createAuthLink from './AuthLink'\nimport { createErrorLink } from './errorHandler'\nimport createSubscriptionLink, {\n  isSubscriptionOperation,\n} from './SubscriptionLink'\n\nexport function createApolloClient(auth: TAuthModel) {\n  const cache = new InMemoryCache({\n    dataIdFromObject: (o: { __typename?: string; id?: string }) => {\n      if (o.__typename != null && o.id != null) {\n        return `${o.__typename}-${o.id}`\n      }\n      return null\n    },\n  })\n\n  const authLink = createAuthLink(auth)\n  const retryLink = createRetryLink()\n  const offlineLink = createOfflineLink()\n  const errorLink = createErrorLink()\n  const httpLink = createHttpLink()\n  const subscriptionLink = createSubscriptionLink(auth)\n\n  const client = new ApolloClient({\n    link: ApolloLink.from([authLink, retryLink, offlineLink, errorLink]).split(\n      isSubscriptionOperation,\n      subscriptionLink,\n      httpLink,\n    ),\n    cache,\n  })\n\n  return client\n}\n\nfunction createHttpLink() {\n  return new BatchHttpLink({\n    uri: `${appConfig.endpoint}/graphql`,\n    credentials: 'same-origin',\n  })\n}\n\nfunction createRetryLink() {\n  return new RetryLink({\n    delay: {\n      initial: 300,\n      max: Infinity,\n      jitter: true,\n    },\n    attempts: {\n      max: 5,\n      retryIf: (error, _operation) => !!error,\n    },\n  })\n}\n\nfunction createOfflineLink() {\n  const offlineLink = new QueueLink()\n  autorun(() => {\n    if (isNetworkOnline()) {\n      logGraph('client is online')\n      offlineLink.open()\n    } else {\n      logGraph('client is offline')\n      offlineLink.close()\n    }\n  })\n  return offlineLink\n}\n","import { ApolloLink, FetchResult, Observable } from 'apollo-link'\nimport { computed } from 'mobx'\nimport VError from 'verror'\n\nimport { TAuthModel } from '../models/AuthModel'\n\nexport default function createAuthLink(auth: TAuthModel) {\n  const headers = computed(() => ({\n    Authorization: `Bearer ${auth.communicationToken}`,\n  }))\n\n  return new ApolloLink((operation, forward) => {\n    if (!auth.canCommunicate) {\n      throw new VError(\n        `Executing operation ${operation.operationName} before authenticated`,\n        { operation },\n      )\n    }\n\n    const context = operation.getContext()\n    operation.setContext({ ...context, headers: headers.get() })\n\n    return new Observable<FetchResult>(observer => {\n      const sub = forward!(operation).subscribe({\n        error: networkError => {\n          if (\n            networkError.result &&\n            networkError.result.code === 'INVALID_TOKEN'\n          ) {\n            auth.invalidate()\n            return\n          }\n          observer.error(networkError)\n        },\n        next: observer.next.bind(observer),\n        complete: observer.complete.bind(observer),\n      })\n      return () => sub.unsubscribe()\n    })\n  })\n}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersistence } from './logger'\n\nconst persistenceKey = appConfig.persistenceKey\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = (snapshot: object) =>\n    localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersistence('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersistence('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersistence('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { getParent } from 'mobx-state-tree'\n\nimport { IRootEnvironment } from '../../../atoms/RootProvider'\nimport { appConfig } from '../../../config'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TLoginProviderModel } from './LoginProviderModel'\n\nconst getLoginUrl = ({ username, password }: Dictionary<string>) =>\n  `${appConfig.endpoint}/users/token?username=${username}&password=${password}`\n\nexport const PasswordLoginModel = BaseModel.named('PasswordLogin')\n  .volatile(self => ({\n    errorCode: '',\n    errorMessage: '',\n  }))\n  .views(self => ({\n    get hasFailed() {\n      return Boolean(self.errorCode)\n    },\n  }))\n  .actions(self => ({\n    setFailure(code: string, message: string) {\n      self.errorCode = code\n      self.errorMessage = message\n    },\n    setSuccess(token: string, userId: string) {\n      const provider = getParent(self) as TLoginProviderModel\n      provider.authenticate(token, userId)\n    },\n  }))\n  .actions(self => ({\n    async requestToken(username: string, password: string) {\n      const url = getLoginUrl({ username, password })\n      const fetch: TFetch = window.fetch\n      const response = await fetch(url, {\n        headers: {\n          Accept: 'application/json',\n        },\n      })\n      const payload = await response.json()\n      self.log('received payload %j', payload)\n\n      if (response.status !== 200) {\n        self.setFailure(payload.code, payload.error)\n        self.log('token request failed for username %s', username)\n      } else {\n        self.setSuccess(payload.token, String(payload.userId))\n        self.log(\n          'token request success for username %s [%s]',\n          username,\n          payload.userId,\n        )\n      }\n    },\n  }))\n\nexport type TPasswordLoginModel = typeof PasswordLoginModel.Type\n\nexport const createPasswordLoginModelMock = (\n  overrides = {},\n  env: IRootEnvironment,\n) => PasswordLoginModel.create({ ...overrides }, env)\n","import { getParent, Instance, types } from 'mobx-state-tree'\n\nimport { TAuthModel } from '../../../models/AuthModel'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { PasswordLoginModel } from './PasswordLoginModel'\n\nexport const LoginProviderModel = BaseModel.named('LoginProvider')\n  .props({\n    passwordLogin: types.optional(PasswordLoginModel, {}),\n  })\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      const auth = getParent<TAuthModel>(self)\n      auth.authenticate(token, userId)\n    },\n  }))\n\nexport interface TLoginProviderModel\n  extends Instance<typeof LoginProviderModel> {}\n","import gql from 'graphql-tag'\n\nexport const PasswordChangeMutation = gql`\n  mutation MPasswordChange($password: String!) {\n    updateUserPassword(newPassword: $password) {\n      id\n      token\n    }\n  }\n`\n","import { Base64 } from 'js-base64'\nimport { Instance, types } from 'mobx-state-tree'\n\nimport { MPasswordChange } from '../graph/types'\nimport { identifyUser } from '../helpers/sentry'\nimport { LoginProviderModel } from '../segments/login/models/LoginProviderModel'\nimport { PasswordChangeMutation } from './AuthModel.graphql'\nimport { BaseModel } from './BaseModel'\n\ninterface IVolatileProps {\n  tokenForPasswordChange?: string\n}\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    userId: types.optional(types.string, ''),\n    token: types.optional(types.string, ''),\n    provider: types.optional(LoginProviderModel, {}),\n  })\n  .volatile<IVolatileProps>(() => ({}))\n  .views(self => ({\n    get isAuthenticated() {\n      return self.token.length > 0\n    },\n    get isAuthenticatedUser() {\n      return this.isAuthenticated && self.userId.length > 0\n    },\n    get communicationToken() {\n      return self.tokenForPasswordChange || self.token\n    },\n    get canCommunicate() {\n      return this.isAuthenticated || self.tokenForPasswordChange !== undefined\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      self.tokenForPasswordChange = undefined\n      self.log('authenticated with id %s', userId)\n      identifyUser(userId)\n    },\n    invalidate() {\n      self.token = ''\n      self.userId = ''\n      self.tokenForPasswordChange = undefined\n      self.client.cache.reset()\n      self.log('invalidated authentication')\n      identifyUser(null)\n    },\n  }))\n  .actions(self => ({\n    setForPasswordChange(temporaryB64EncodedToken: string) {\n      self.invalidate()\n      self.log('encoded token %s', temporaryB64EncodedToken)\n      self.tokenForPasswordChange = Base64.decode(temporaryB64EncodedToken)\n      self.log('using temp token %s', self.tokenForPasswordChange)\n    },\n    async changePassword(password: string) {\n      const variables: MPasswordChange.Variables = {\n        password,\n      }\n      const result = await self.client.mutate({\n        mutation: PasswordChangeMutation,\n        variables,\n        fetchPolicy: 'no-cache',\n      })\n\n      const {\n        updateUserPassword: { id, token },\n      } = result.data as MPasswordChange.Mutation\n\n      if (token && id) {\n        self.invalidate()\n        self.authenticate(token, id)\n      }\n    },\n  }))\n  .preProcessSnapshot(snapshot => {\n    if (snapshot.userId) {\n      identifyUser(snapshot.userId)\n    }\n    return snapshot\n  })\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\n","import { BaseModel } from '../models/BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  soundEnabled: true,\n  orderListPollIntervalSec: 60,\n  orderListSoundIntervalSec: 60,\n})\n\nexport type TConfigModel = typeof ConfigModel.Type\nexport type TConfigModelProps = typeof ConfigModel.SnapshotType\n","import { types } from 'mobx-state-tree'\n\nconst SECOND = 1 * 1000\nconst MINUTE = 60 * SECOND\n\nexport const TimingModel = types\n  .model('Timing', {\n    bySecond: types.optional(types.number, Infinity),\n    byMinute: types.optional(types.number, Infinity),\n    autoStart: true,\n  })\n  .actions(self => ({\n    updateBySecond(now: number) {\n      if (self.bySecond === Infinity || now - self.bySecond >= SECOND) {\n        self.bySecond = now\n      }\n    },\n    updateByMinute(now: number) {\n      if (self.byMinute === Infinity || now - self.byMinute >= MINUTE) {\n        self.byMinute = now\n      }\n    },\n  }))\n  .extend(self => {\n    let timeoutId = -1\n    let getNow = Date.now\n\n    const executeUpdate = () => {\n      const now = getNow()\n      self.updateBySecond(now)\n      self.updateByMinute(now)\n      timeoutId = window.setTimeout(executeUpdate, SECOND)\n    }\n\n    return {\n      actions: {\n        start(timeResolver?: () => number) {\n          if (timeResolver) {\n            getNow = timeResolver\n          }\n          executeUpdate()\n        },\n        stop() {\n          if (timeoutId >= 0) {\n            window.clearTimeout(timeoutId)\n            timeoutId = -1\n          }\n        },\n      },\n    }\n  })\n  .actions(self => ({\n    afterAttach() {\n      if (self.autoStart) {\n        self.start()\n      }\n    },\n  }))\n\nexport type TTimingModel = typeof TimingModel.Type\n","import gql from 'graphql-tag'\n\nimport { CompanyBranchFragment } from '../graph/fragments'\n\nexport const UserModelBootstrapQuery = gql`\n  query GUserModelBootstrap($userId: ID!) {\n    user(id: $userId) {\n      id\n      language {\n        rawCode\n      }\n      branches: accessibleBranches {\n        ...GCompanyBranch\n      }\n    }\n    permissions: __schema {\n      queries: queryType {\n        fields {\n          name\n        }\n      }\n      mutations: mutationType {\n        fields {\n          name\n        }\n      }\n      subscriptions: subscriptionType {\n        fields {\n          name\n        }\n      }\n    }\n  }\n\n  ${CompanyBranchFragment}\n`\n","import _ from 'lodash'\nimport { autorun } from 'mobx'\nimport { flow, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\n\nimport { GCompanyBranch, GUserModelBootstrap } from '../graph/types'\nimport { logBootstrap, logLang } from '../helpers/logger'\nimport { RM } from '../helpers/ramda'\nimport { changeLanguage, detectLanguage } from '../i18n'\nimport { BaseModel } from '../models/BaseModel'\nimport { UserModelBootstrapQuery } from './UserModel.graphql'\n\ninterface IVolatileProps {\n  isLoaded: boolean\n  branches: Maybe<GCompanyBranch.Fragment[]>\n  brands: Maybe<GCompanyBranch.Brand[]>\n  soundEnabled: boolean\n  permissions: Maybe<IUserPermisssions>\n}\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    language: types.maybe(types.string),\n    soundVolume: types.optional(types.number, 25),\n    soundIgnore: false,\n    currentBranchId: types.maybeNull(types.string),\n  })\n  .volatile<IVolatileProps>(() => ({\n    isLoaded: false,\n    branches: null,\n    brands: null,\n    soundEnabled: false,\n    permissions: null,\n  }))\n  .views(self => ({\n    get branchesId() {\n      if (self.branches === null) {\n        return []\n      }\n      return self.branches.map(R.prop('id'))\n    },\n    filterBranches(predicate: (value: GCompanyBranch.Fragment) => boolean) {\n      if (self.branches === null) {\n        return []\n      }\n      return self.branches.filter(predicate)\n    },\n    get currentBranch() {\n      if (self.currentBranchId === null || self.branches === null) {\n        return null\n      }\n      return self.branches.find(RM.propEq('id', self.currentBranchId)) || null\n    },\n    get currentBranchGps() {\n      const branch = this.currentBranch\n      if (!branch) {\n        return null\n      }\n      const { latitude, longitude } = branch.gps\n      return { latitude, longitude }\n    },\n    canQuery(queryName: string) {\n      return (\n        self.permissions !== null &&\n        self.permissions.queries.has(queryName.toLowerCase())\n      )\n    },\n    canMutate(mutationName: string) {\n      return (\n        self.permissions !== null &&\n        self.permissions.mutations.has(mutationName.toLowerCase())\n      )\n    },\n    get isReady() {\n      return self.isLoaded || !self.root.auth.isAuthenticated\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.currentBranchId = branchId\n    },\n    applyUserData(user: GUserModelBootstrap.User) {\n      self.branches = user.branches\n      self.brands = RM.uniqBy(\n        RM.prop('id'),\n        user.branches.map(RM.prop('brand')),\n      )\n      if (self.currentBranchId === null || self.branches.length === 1) {\n        self.currentBranchId = self.branchesId[0]\n      }\n    },\n    applyUserPermissions(permissions: IPermisssions) {\n      self.permissions = _.mapValues(\n        permissions,\n        ({ fields }) =>\n          new Set(\n            fields.map(\n              RM.compose(\n                RM.toLower,\n                RM.prop('name'),\n              ),\n            ),\n          ),\n      )\n    },\n    setLanguage: flow(function*(language: string) {\n      logLang('changing to language %s from user profile', language)\n      yield changeLanguage(language)\n      self.language = language\n    }),\n    finishBootstrap() {\n      self.isLoaded = true\n    },\n    controlSound(enabled: boolean = true, ignore: boolean = false) {\n      self.soundEnabled = enabled\n      self.soundIgnore = ignore\n    },\n    setSoundVolume(volume: number) {\n      self.soundVolume = volume\n    },\n  }))\n  .actions(self => {\n    const queryUser = async (userId: ID) => {\n      const variables: GUserModelBootstrap.Variables = {\n        userId,\n      }\n      const { data } = await self.client.query<GUserModelBootstrap.Query>({\n        query: UserModelBootstrapQuery,\n        variables,\n      })\n      self.setLanguage(data.user.language.rawCode)\n      self.applyUserData(data.user)\n      // @ts-ignore https://github.com/dotansimha/graphql-code-generator/issues/643\n      self.applyUserPermissions(data.permissions)\n      self.finishBootstrap()\n    }\n\n    const initUser = () => {\n      autorun(() => {\n        if (self.root.auth.userId) {\n          logBootstrap('query user')\n          queryUser(self.root.auth.userId)\n        } else {\n          logBootstrap('user not authenticated')\n          self.setLanguage(detectLanguage())\n        }\n      })\n    }\n\n    return { initUser }\n  })\n\ninterface IUserPermisssions {\n  queries: Set<string>\n  mutations: Set<string>\n  subscriptions: Set<string>\n}\n\ninterface IPermissionType {\n  fields: ReadonlyArray<{ name: string }>\n}\n\ninterface IPermisssions {\n  queries: IPermissionType\n  mutations: IPermissionType\n  subscriptions: IPermissionType\n}\n\nexport type TUserModel = typeof UserModel.Type\n","import faker from 'faker'\n\nfaker.locale = 'cz'\n\nexport { faker }\n","import gql from 'graphql-tag'\n\nexport const ValidateLocationQuery = gql`\n  query GValidateLocation(\n    $branchId: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    resolveLocation(\n      companyBranch: $branchId\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      inDeliveryLocation\n    }\n  }\n`\n\nexport const CreateOrderMutation = gql`\n  mutation GCreateOrder(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $gps: InputGeoPointCreate!\n    $callEventId: ID\n  ) {\n    createOrder(\n      order: {\n        companyBranch: $branchId\n        deliveryType: $deliveryType\n        callEventId: $callEventId\n        gps: $gps\n        customer: {}\n        warePriceType: DELIVERY\n        orderOrigin: STAFF\n      }\n    ) {\n      id\n    }\n  }\n`\n\nexport const UpdateOrderMutation = gql`\n  mutation GUpdateOrder(\n    $orderId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $gps: InputGeoPointCreate!\n  ) {\n    updateOrder(\n      id: $orderId\n      order: { deliveryType: $deliveryType, gps: $gps }\n    ) {\n      id\n    }\n  }\n`\n\nexport const AcceptOrderMutation = gql`\n  mutation MAcceptOrder(\n    $orderId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $customer: InputCustomerCreate!\n    $gps: InputGeoPointCreate!\n    $note: String\n  ) {\n    updateOrder(\n      id: $orderId\n      order: { deliveryType: $deliveryType, gps: $gps }\n    ) {\n      id\n    }\n    finishOrder(\n      id: $orderId\n      order: {\n        customer: $customer\n        note: $note\n        paymentMethod: CASH\n        paymentGate: CASH\n      }\n    ) {\n      userErrors\n    }\n  }\n`\n\nexport const CancelOrderMutation = gql`\n  mutation MCancelOrder($orderId: ID!) {\n    addOrderState(order: $orderId, orderState: CANCELED) {\n      id\n    }\n  }\n`\n","import { ApolloQueryResult } from 'apollo-client'\nimport { FetchResult } from 'apollo-link'\nimport _ from 'lodash'\nimport { autorun, IReactionDisposer } from 'mobx'\nimport { flow, Instance } from 'mobx-state-tree'\nimport { ExecutionResult } from 'react-apollo'\nimport { VError } from 'verror'\n\nimport {\n  DeliveryTypeEnum,\n  GCreateOrder,\n  GOrderVam,\n  GUpdateOrder,\n  GValidateLocation,\n  MAcceptOrder,\n  MCancelOrder,\n} from '../../../graph/types'\nimport { faker } from '../../../helpers/faker'\nimport { reportError } from '../../../helpers/sentry'\nimport { i18n } from '../../../i18n'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  AcceptOrderMutation,\n  CancelOrderMutation,\n  CreateOrderMutation,\n  UpdateOrderMutation,\n  ValidateLocationQuery,\n} from './CreateOrderModel.graphql'\n\nexport interface IOrderFormValues {\n  deliveryType: DeliveryTypeEnum.MESSENGER | DeliveryTypeEnum.PICKUP\n  phone?: string\n  firstName?: string\n  lastName?: string\n  email?: string\n  note?: string\n}\n\ninterface IVolatileProps {\n  orderId: MaybeID\n  callingPhone?: string\n  callingEventId?: ID\n  location?: GeoPoint\n  values: IOrderFormValues\n  fakeValues?: Partial<IOrderFormValues>\n  fakeAddress?: string\n  vamCustomer: Maybe<GOrderVam.VamCustomer>\n  notDeliveryLocation: boolean\n  isSubmitting: boolean\n  submitErrors: Maybe<ReadonlyArray<string>>\n  scrollMenuToCategoryId: MaybeID\n}\n\nexport const CreateOrderModel = BaseModel.named('CreateOrder')\n  .volatile<IVolatileProps>(getDefaultProps)\n  .views(self => ({\n    get branchId() {\n      return self.root.user.currentBranchId!\n    },\n    get gps() {\n      return self.location &&\n        self.values.deliveryType === DeliveryTypeEnum.MESSENGER\n        ? { ...self.location }\n        : { ...self.root.user.currentBranchGps! }\n    },\n    get phone() {\n      return self.values.phone || self.callingPhone\n    },\n    get formValues() {\n      if (self.vamCustomer !== null && self.vamCustomer.isFound) {\n        const {\n          firstName,\n          lastName,\n          email,\n          phone,\n          lastOrder,\n        } = self.vamCustomer\n        return _.defaults(\n          { ...self.values },\n          {\n            phone,\n            firstName,\n            lastName,\n            email,\n            note: (lastOrder && lastOrder.note) || '',\n          },\n        )\n      }\n      if (self.fakeValues) {\n        const { firstName, lastName, email, phone, note } = self.fakeValues\n        return _.defaults(\n          { ...self.values },\n          {\n            phone,\n            firstName,\n            lastName,\n            email,\n            note,\n          },\n        )\n      }\n      return _.defaults({ ...self.values }, { phone: self.callingPhone || '' })\n    },\n    get deliveryType() {\n      return self.values.deliveryType\n    },\n    get isDelivery() {\n      return self.values.deliveryType === DeliveryTypeEnum.MESSENGER\n    },\n    get hasMultipleVamLocations() {\n      return self.vamCustomer !== null && self.vamCustomer.locations.length > 1\n    },\n    get canSubmit() {\n      return Boolean(self.orderId && !self.isSubmitting)\n    },\n    get hasSubmitErrors() {\n      return Boolean(self.submitErrors && self.submitErrors.length > 0)\n    },\n    get askForCancel() {\n      return self.orderId !== null\n    },\n    get cartRefreshKey() {\n      if (self.orderId === null) {\n        return self.values.deliveryType\n      }\n      return `${self.orderId}-${self.values.deliveryType}`\n    },\n  }))\n  .actions(self => {\n    const submitFailed = (errors?: string[]) => {\n      self.isSubmitting = false\n      self.submitErrors = errors || [\n        i18n.t`Order submit has failed. Please try again later.`,\n      ]\n    }\n    let updatesWatch: Maybe<IReactionDisposer>\n    const resetOrder = () => {\n      self.orderId = null\n      if (updatesWatch) {\n        updatesWatch()\n        updatesWatch = null\n      }\n    }\n    const resetModel = () => {\n      Object.assign(self, getDefaultProps())\n    }\n    const ensureOrder = flow<ID>(function*() {\n      if (self.orderId === null) {\n        const variables: GCreateOrder.Variables = {\n          branchId: self.branchId,\n          deliveryType: self.values.deliveryType,\n          gps: self.gps,\n          callEventId: self.callingEventId,\n        }\n        const result: ExecutionResult<\n          GCreateOrder.Mutation\n        > = yield self.client.mutate({\n          mutation: CreateOrderMutation,\n          variables,\n        })\n        if (result.data) {\n          self.orderId = result.data.createOrder.id\n        }\n      }\n      return self.orderId\n    })\n    const acceptOrder = flow(function*(formValues: IOrderFormValues) {\n      const variables: MAcceptOrder.Variables = {\n        orderId: self.orderId!,\n        customer: {\n          firstName: formValues.firstName,\n          lastName: formValues.lastName,\n          emails: formValues.email ? [{ email: formValues.email }] : null,\n          phones: formValues.phone ? [{ phone: formValues.phone }] : null,\n        },\n        deliveryType: formValues.deliveryType,\n        gps: self.gps,\n        note: formValues.note,\n      }\n\n      self.log('submit order: ', variables)\n\n      self.isSubmitting = true\n      let result: FetchResult\n\n      try {\n        result = yield self.client.mutate({\n          mutation: AcceptOrderMutation,\n          variables,\n        })\n      } catch (err) {\n        submitFailed()\n        throw reportError(new VError('order create submit failed: %j', err))\n      }\n\n      if ((result.errors && result.errors.length) || !result.data) {\n        submitFailed()\n        throw reportError(\n          new VError('order create submit failed: %j', result.errors),\n        )\n      }\n\n      const submitResult: MAcceptOrder.FinishOrder = result.data.finishOrder\n      if (submitResult.userErrors && submitResult.userErrors.length) {\n        submitFailed(submitResult.userErrors)\n        throw reportError(\n          new VError(\n            'order create validation errors: %j',\n            submitResult.userErrors,\n          ),\n        )\n      }\n\n      resetModel()\n    })\n    const cancelOrder = flow(function*() {\n      if (!self.orderId) {\n        resetModel()\n        return\n      }\n      const variables: MCancelOrder.Variables = {\n        orderId: self.orderId,\n      }\n      self.client.mutate({ mutation: CancelOrderMutation, variables })\n      resetModel()\n    })\n\n    autorun(() => {\n      if (self.orderId === null) {\n        return\n      }\n      const variables: GUpdateOrder.Variables = {\n        orderId: self.orderId,\n        deliveryType: self.formValues.deliveryType,\n        gps: self.gps,\n      }\n      self.client.mutate({\n        mutation: UpdateOrderMutation,\n        variables,\n      })\n    })\n\n    return {\n      submitFailed,\n      ensureOrder,\n      acceptOrder,\n      cancelOrder,\n      resetOrder,\n    }\n  })\n  .actions(self => {\n    const validateLocation = flow(function*() {\n      if (!self.location) {\n        self.notDeliveryLocation = false\n        return\n      }\n      const { latitude, longitude } = self.location\n      const variables: GValidateLocation.Variables = {\n        branchId: self.branchId,\n        latitude,\n        longitude,\n      }\n      const result: ApolloQueryResult<\n        GValidateLocation.Query\n      > = yield self.client.query({ query: ValidateLocationQuery, variables })\n\n      self.notDeliveryLocation = !result.data.resolveLocation.inDeliveryLocation\n    })\n    return {\n      useLocation({ latitude, longitude }: GeoPoint) {\n        self.location = { latitude, longitude }\n        validateLocation()\n      },\n    }\n  })\n  .actions(self => ({\n    userIsCalling(phone: string, eventId: MaybeID) {\n      self.callingPhone = phone\n      if (eventId) {\n        self.callingEventId = eventId\n      }\n    },\n    scrollToCategory(categoryId: ID) {\n      self.scrollMenuToCategoryId = categoryId\n    },\n    updateFormValues(\n      values: IOrderFormValues,\n      touched: { [K in keyof IOrderFormValues]?: boolean },\n    ) {\n      self.log('touched', touched)\n      self.values = {\n        deliveryType: values.deliveryType,\n        ..._.pick(values, Object.keys(touched)),\n      }\n      self.log('updated values: ', self.values)\n    },\n    updateFromVam(vamCustomer: Maybe<GOrderVam.VamCustomer>) {\n      self.vamCustomer = vamCustomer\n      self.log('vam customer: ', vamCustomer)\n    },\n    updateFormWithFakeValues() {\n      self.fakeValues = {\n        firstName: faker.name.firstName(),\n        lastName: faker.name.lastName(),\n        email: faker.internet.email(),\n        phone: faker.phone.phoneNumberFormat(4),\n        note: faker.lorem.sentence().slice(0, 50 - 1),\n      }\n      self.fakeAddress = 'Opletalova 334, Hradec Králové, Česko'\n    },\n  }))\n\nfunction getDefaultProps(): IVolatileProps {\n  return {\n    orderId: null,\n    callingPhone: undefined,\n    callingEventId: undefined,\n    values: {\n      deliveryType: DeliveryTypeEnum.MESSENGER,\n      phone: undefined,\n      email: undefined,\n      firstName: undefined,\n      lastName: undefined,\n      note: undefined,\n    },\n    fakeAddress: undefined,\n    fakeValues: undefined,\n    location: undefined,\n    vamCustomer: null,\n    notDeliveryLocation: false,\n    isSubmitting: false,\n    submitErrors: null,\n    scrollMenuToCategoryId: null,\n  }\n}\n\nexport interface TCreateOrderModel extends Instance<typeof CreateOrderModel> {}\n","import { types } from 'mobx-state-tree'\nimport GoogleMap from 'react-google-maps/lib/components/GoogleMap'\n\nimport { gpsToLatLng } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<GoogleMap>\n}\n\nconst GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 12),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n  }))\n  .views(self => ({\n    get center() {\n      return gpsToLatLng(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<GoogleMap>) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n  }))\n\nexport type TMapModel = typeof MapModel.Type\n","import gql from 'graphql-tag'\n\nimport { GeoPointFragment } from '../../../graph/fragments'\n\nexport const OrderBranchLocationQuery = gql`\n  query GOrderBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n\nexport const OrderLocationQuery = gql`\n  query GOrderLocation($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n","import { GOrderBranchLocation, GOrderLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport {\n  OrderBranchLocationQuery,\n  OrderLocationQuery,\n} from './OrderMapModel.graphql'\n\nexport const OrderMapModel = MapModel.named('OrderMap').actions(self => ({\n  async panToOrder(orderId: ID) {\n    if (!self.mapRef) {\n      return\n    }\n    const { data } = await self.client.query<GOrderLocation.Query>({\n      query: OrderLocationQuery,\n      variables: { orderId },\n    })\n    if (data && data.order.gps) {\n      self.mapRef.panTo(gpsToLatLng(data.order.gps))\n    }\n  },\n  async panToBranch(branchId: ID) {\n    const { data } = await self.client.query<GOrderBranchLocation.Query>({\n      query: OrderBranchLocationQuery,\n      variables: { branchId },\n    })\n    if (!self.mapRef) {\n      return\n    }\n    if (data) {\n      self.mapRef.panTo(gpsToLatLng(data.companyBranch.gps))\n    }\n  },\n}))\n\nexport type TOrderMapModel = typeof OrderMapModel.Type\n","import {\n  GRemoveOrderDriver,\n  GSelectOrderDriver,\n  GSendOrderNotification,\n  GUpdateOrderState,\n  OrderStateEnum,\n} from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  RemoveOrderDriverMutation,\n  SelectOrderDriverMutation,\n  SendOrderNotificationMutation,\n  UpdateOrderStateMutation,\n} from './OrderStateModel.graphql'\n\nexport const OrderStateModel = BaseModel.named('OrderState')\n  .views(self => ({}))\n  .actions(self => ({\n    async updateOrderState(orderId: ID, state: OrderStateEnum) {\n      const variables: GUpdateOrderState.Variables = {\n        orderId,\n        state,\n      }\n      await self.client.mutate({\n        mutation: UpdateOrderStateMutation,\n        variables,\n      })\n    },\n  }))\n  .actions(self => ({\n    deliverOrder(orderId: ID) {\n      return self.updateOrderState(orderId, OrderStateEnum.ON_WAY)\n    },\n    async sendTimeNotification(orderId: ID, minutes: number) {\n      const variables: GSendOrderNotification.Variables = {\n        orderId,\n        minutes,\n      }\n      await self.client.mutate({\n        mutation: SendOrderNotificationMutation,\n        variables,\n      })\n    },\n    async selectDriver(orderId: ID, driverId: ID) {\n      const variables: GSelectOrderDriver.Variables = {\n        orderId,\n        driverId,\n      }\n      await self.client.mutate({\n        mutation: SelectOrderDriverMutation,\n        variables,\n      })\n    },\n    async removeDriver(orderDriverId: ID) {\n      const variables: GRemoveOrderDriver.Variables = {\n        orderDriverId,\n      }\n      await self.client.mutate({\n        mutation: RemoveOrderDriverMutation,\n        variables,\n      })\n    },\n  }))\n\nexport type TOrderStateModel = typeof OrderStateModel.Type\nexport type TOrderStateModelProps = typeof OrderStateModel.SnapshotType\n","import { types } from 'mobx-state-tree'\n\nimport { OrderListModel } from './OrderListModel'\nimport { OrderMapModel } from './OrderMapModel'\nimport { OrderStateModel } from './OrderStateModel'\n\nexport const OrderModel = types.model('Order', {\n  list: types.optional(OrderListModel, {}),\n  map: types.optional(OrderMapModel, {}),\n  state: types.optional(OrderStateModel, {}),\n})\n\nexport type TOrderModel = typeof OrderModel.Type\n","import { types } from 'mobx-state-tree'\nimport { IFormState } from 'react-form'\n\nimport { GCreateFinancialReport } from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { CreateFinancialReport } from './StatisticsModel.graphql'\n\ninterface IDateFilter {\n  dateFrom: Date\n  dateTo: Date\n}\n\nexport const StatisticsModel = BaseModel.named('Statistics')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n  })\n  .volatile<IDateFilter>(self => ({\n    dateFrom: new Date(),\n    dateTo: new Date(),\n  }))\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length ? Array.from(self.branches) : []\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n    get isSingleBranchSelected() {\n      return self.branches.length === 1\n    },\n    get singleBranchFilter() {\n      return self.branches[0]!\n    },\n  }))\n  .actions(self => ({\n    submitFilter(formState: IFormState<IDateFilter>) {\n      self.dateFrom = new Date(formState.values.dateFrom)\n      self.dateTo = new Date(formState.values.dateTo)\n    },\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branchId: ID) {\n      self.branches.clear()\n      self.branches.push(branchId)\n    },\n    createClosure() {\n      if (self.isSingleBranchSelected) {\n        const variables: GCreateFinancialReport.Variables = {\n          companyBranchId: self.singleBranchFilter,\n        }\n        self.client.mutate({\n          mutation: CreateFinancialReport,\n          variables,\n          refetchQueries: [`FinancialReportsCompanyBranch`],\n        })\n      }\n    },\n  }))\n\nexport type TStatisticsModel = typeof StatisticsModel.Type\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TSettingsModel } from './SettingsModel'\n\nexport const SettingsBaseModel = BaseModel.named('SettingsBase').views(\n  self => ({\n    get settings() {\n      return getParent<TSettingsModel>(self)\n    },\n  }),\n)\n\nexport type TSettingsBaseModel = typeof SettingsBaseModel.Type\nexport type TSettingsBaseModelProps = typeof SettingsBaseModel.SnapshotType\n","import { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuStockCreate,\n  GMenuStockDelete,\n  GMenuStockUpdate,\n} from '../../../graph/types'\nimport { TStockFormValues } from '../organisms/StockFormLoader'\nimport { MenuStockListQuery } from '../organisms/StockList.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuStockCreateMutation,\n  MenuStockDeleteMutation,\n  MenuStockUpdateMutation,\n} from './MenuStockModel.graphql'\n\nexport const MenuStockModel = MenuBaseModel.named('MenuStock').actions(\n  self => ({\n    createItem(formValues: TStockFormValues) {\n      const variables: GMenuStockCreate.Variables = {\n        stockItem: {\n          companyBranch: self.branchId,\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockCreateMutation,\n          variables,\n          refetchQueries: [\n            {\n              query: MenuStockListQuery,\n              variables: {\n                branchId: self.branchId,\n              },\n            },\n          ],\n        }),\n      )\n    },\n    updateItem(formValues: TStockFormValues) {\n      const variables: GMenuStockUpdate.Variables = {\n        stockId: formValues.id,\n        stockItem: {\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteItem(stockId: ID) {\n      const variables: GMenuStockDelete.Variables = {\n        stockId,\n      }\n      await self.client.mutate({\n        mutation: MenuStockDeleteMutation,\n        variables,\n        refetchQueries: [\n          {\n            query: MenuStockListQuery,\n            variables: {\n              branchId: self.branchId,\n            },\n          },\n        ],\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(formValues: TStockFormValues) {\n  return {\n    code: formValues.code,\n    label: formValues.nameLabel,\n    note: formValues.note,\n    plu: formValues.plu,\n    allergens: formValues.allergens,\n    wareUnit: formValues.wareUnit!,\n    allowNegative: formValues.allowNegative,\n  }\n}\n\nexport type TMenuStockModel = typeof MenuStockModel.Type\n","import { types } from 'mobx-state-tree'\n\nimport { SettingsBaseModel } from '../../settings/models/SettingsBaseModel'\nimport { MenuCategoryModel } from './MenuCategoryModel'\nimport { MenuRecipeModel } from './MenuRecipeModel'\nimport { MenuStockModel } from './MenuStockModel'\n\nexport const MenuModel = SettingsBaseModel.named('Menu').props({\n  category: types.optional(MenuCategoryModel, {}),\n  recipe: types.optional(MenuRecipeModel, {}),\n  stock: types.optional(MenuStockModel, {}),\n})\n\nexport type TMenuModel = typeof MenuModel.Type\nexport type TMenuModelProps = typeof MenuModel.SnapshotType\n","import { types } from 'mobx-state-tree'\n\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { BusinessHoursModel } from '../../businesshours/models/BusinessHoursModel'\nimport { MenuModel } from '../../menu/models/MenuModel'\n\nexport const SettingsModel = BaseModel.named('Settings')\n  .props({\n    selectedBranchId: types.maybe(types.string),\n    businessHours: types.optional(BusinessHoursModel, {}),\n    menu: types.optional(MenuModel, {}),\n  })\n  .views(self => ({\n    get branchId() {\n      return self.selectedBranchId || RM.head(self.root.user.branchesId)\n    },\n    get queryProps() {\n      const branchId = this.branchId\n      if (!branchId) {\n        return { skip: true }\n      }\n      return {\n        variables: { branchId },\n      }\n    },\n    getQueryProps<T extends Dictionary>(otherVariables: T) {\n      const branchId = this.branchId\n      if (!branchId) {\n        return { skip: true }\n      }\n      return {\n        variables: Object.assign({ branchId }, otherVariables),\n      }\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.selectedBranchId = branchId\n    },\n  }))\n\nexport type TSettingsModel = typeof SettingsModel.Type\nexport type TSettingsModelProps = typeof SettingsModel.SnapshotType\n","import { GCompanyBranch, GZoneLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport { ZoneLocationQuery } from '../Zones.graphql'\n\ninterface IVolatileProps {\n  currentZonePoints: Maybe<GeoPoint[]>\n}\n\nexport const ZoneMapModel = MapModel.named('ZoneMap')\n  .volatile<IVolatileProps>(() => ({\n    currentZonePoints: null,\n  }))\n  .actions(self => ({\n    updateZonePoints(points: GeoPoint[]) {\n      self.currentZonePoints = points\n    },\n    clearZonePoints() {\n      self.currentZonePoints = null\n    },\n    async panToZone(zoneId: ID) {\n      const { data } = await self.client.query({\n        query: ZoneLocationQuery,\n        variables: { zoneId },\n      })\n      if (data) {\n        const {\n          zone: {\n            companyBranch: { gps },\n          },\n        } = data as GZoneLocation.Query\n        if (self.mapRef) {\n          self.mapRef.panTo(gpsToLatLng(gps))\n        }\n      }\n    },\n    async panToBranch(branch: GCompanyBranch.Fragment) {\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(branch.gps))\n      }\n    },\n  }))\n\nexport type TZoneMapModel = typeof ZoneMapModel.Type\n","import gql from 'graphql-tag'\n\nimport { ZoneFragment } from '../Zones.graphql'\n\nexport const CreateZoneMutation = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...GZone\n    }\n  }\n  ${ZoneFragment}\n`\n\nexport const UpdateZoneMutation = gql`\n  mutation GUpdateZone($zoneId: ID!, $update: InputZoneUpdate!) {\n    updateZone(id: $zoneId, zone: $update) {\n      ...GZone\n    }\n  }\n  ${ZoneFragment}\n`\n\nexport const UpdateZonePriorityMutation = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport const DestroyZoneMutation = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n","import { flow, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\nimport { VError } from 'verror'\n\nimport {\n  GCompanyBranch,\n  GCreateZone,\n  GDestroyZone,\n  GUpdateZone,\n  GUpdateZonePriority,\n  GZone,\n  GZonePriceRange,\n} from '../../../graph/types'\nimport { generatePolygon } from '../../../helpers/gps'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { ZoneMapModel } from '../models/ZoneMapModel'\nimport {\n  CreateZoneMutation,\n  DestroyZoneMutation,\n  UpdateZoneMutation,\n  UpdateZonePriorityMutation,\n} from './ZoneModel.graphql'\n\ninterface IVolatileProps {\n  branch: Maybe<GCompanyBranch.Fragment>\n}\n\nexport const ZoneModel = BaseModel.named('Zone')\n  .props({\n    route: '/settings/zones',\n    map: types.optional(ZoneMapModel, {}),\n    brandId: types.maybeNull(types.string),\n  })\n  .volatile<IVolatileProps>(() => ({\n    branch: null,\n  }))\n  .views(self => ({\n    get brand(): Maybe<GCompanyBranch.Brand> {\n      return (\n        (self.brandId &&\n          self.root.user.brands!.find(RM.propEq('id', self.brandId))) ||\n        null\n      )\n    },\n    get hasBranchFilter() {\n      return self.branch !== null\n    },\n    get branchFilterId(): MaybeID {\n      return self.branch === null ? null : self.branch.id\n    },\n    get branchFilterPredicate() {\n      if (self.branch !== null) {\n        return R.propEq('id', self.branch.id)\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), ['brand', 'id'])\n    },\n    get zoneFilterPredicate() {\n      if (self.branch !== null) {\n        return R.pathSatisfies(R.equals(self.branch.id), [\n          'companyBranch',\n          'id',\n        ])\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), [\n            'companyBranch',\n            'brand',\n            'id',\n          ])\n    },\n    getRouteToZone(zoneId: ID) {\n      return `${self.route}/${zoneId}`\n    },\n    get branches() {\n      if (!self.root.user.isReady) {\n        return []\n      }\n      return self.root.user.branches!\n    },\n  }))\n  .actions(self => ({\n    setBranchFilter(branch: GCompanyBranch.Fragment) {\n      self.branch = branch\n      self.brandId = branch.brand.id\n      self.map.panToBranch(branch)\n    },\n    setBrandFilter(\n      brand: GCompanyBranch.Brand,\n      brandBranches: GCompanyBranch.Fragment[],\n    ) {\n      self.brandId = brand.id\n      if (!self.branch || self.branch.brand.id !== brand.id) {\n        self.branch =\n          (brandBranches.length === 1 && RM.head(brandBranches)) || null\n      }\n    },\n    clearBranchFilter() {\n      self.branch = null\n    },\n    clearBrandFilter() {\n      self.brandId = null\n      self.branch = null\n    },\n  }))\n  .actions(self => ({\n    createZone: flow(function*(onZoneCreate: (zoneId: ID) => void) {\n      if (self.branch === null) {\n        throw new VError('Called createZone without branch being set')\n      }\n      const points = generatePolygon({\n        center: self.branch.gps,\n        metersRadius: 1000,\n        pointsCount: 5,\n      })\n      const variables: GCreateZone.Variables = {\n        branchId: self.branch.id,\n        points,\n      }\n      const { data } = yield self.client.mutate({\n        mutation: CreateZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: (prev, { mutationResult }) => {\n            const zone = (mutationResult.data as GCreateZone.Mutation)\n              .createZone\n            if (zone) {\n              return {\n                ...prev,\n                zones: prev.zones.concat(zone),\n              }\n            }\n            return prev\n          },\n        },\n      })\n      if (data) {\n        const zone = (data as GCreateZone.Mutation).createZone\n        onZoneCreate(zone.id)\n      }\n    }),\n    // tslint:disable-next-line:no-any\n    async saveZone(zoneId: ID, values: any) {\n      const variables: GUpdateZone.Variables = {\n        zoneId,\n        update: {\n          name: values.name,\n          enabled: values.enabled,\n          companyBranch: values.companyBranch.id,\n          zoneColor: values.zoneColor.id,\n          minimalOrderPrice: {\n            value: Number(values.minimalOrderPrice.value) || 0,\n          },\n          priceRangeRules: values.priceRangeRules\n            .map(normalizePriceRangeRule)\n            .filter(R.reject(R.pathEq(['price', 'value'], null))),\n          geoPolygon: self.map.currentZonePoints || undefined,\n        },\n      }\n      await self.client.mutate({\n        mutation: UpdateZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: (prev, { mutationResult }) => {\n            const zoneIdx = prev.zones.findIndex(R.propEq('id', zoneId))\n            const zone = (mutationResult.data as GUpdateZone.Mutation)\n              .updateZone\n            return {\n              ...prev,\n              zones: R.update(zoneIdx, zone, prev.zones),\n            }\n          },\n        },\n      })\n      self.map.clearZonePoints()\n    },\n    destroyZone(zoneId: ID) {\n      if (!zoneId) {\n        return\n      }\n      const variables: GDestroyZone.Variables = {\n        zoneId,\n      }\n      self.client.mutate({\n        mutation: DestroyZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: prev => {\n            return {\n              ...prev,\n              zones: R.reject(R.propEq('id', zoneId), prev.zones),\n            }\n          },\n        },\n      })\n    },\n    changeZonePriority: flow(function*(\n      zone: GZone.Fragment,\n      oldIndex: number,\n      newIndex: number,\n    ) {\n      if (!zone || oldIndex === newIndex) {\n        return\n      }\n      const offset = oldIndex - newIndex\n\n      const variables: GUpdateZonePriority.Variables = {\n        zoneId: zone.id,\n        offset,\n      }\n      yield self.client.mutate({\n        mutation: UpdateZonePriorityMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          updateZonePriority: {\n            __typename: 'Zone',\n            id: zone.id,\n            priority: zone.priority + offset,\n          },\n        },\n      })\n    }),\n  }))\n\nfunction numberOrNull(value: string | number | null) {\n  if (value === null) {\n    return null\n  }\n  const num = Number(value)\n  return Number.isNaN(num) ? null : num\n}\n\nfunction normalizePriceRangeRule(range: GZonePriceRange.Fragment) {\n  return {\n    price: { value: numberOrNull(range.price.value) },\n    toPrice: { value: numberOrNull(range.toPrice.value) || -1 },\n  }\n}\n\nexport type TZoneModel = typeof ZoneModel.Type\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { AuthModel } from '../models/AuthModel'\nimport { ConfigModel } from '../models/ConfigModel'\nimport { TimingModel } from '../models/TimingModel'\nimport { UserModel } from '../models/UserModel'\nimport { CreateOrderModel } from '../segments/createorder/models/CreateOrderModel'\nimport { OrderModel } from '../segments/order/models/OrderModel'\nimport { StatisticsModel } from '../segments/overview/models/StatisticsModel'\nimport { SettingsModel } from '../segments/settings/models/SettingsModel'\nimport { ZoneModel } from '../segments/zones/models/ZoneModel'\nimport { BaseModel } from './BaseModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    user: types.optional(UserModel, {}),\n    order: types.optional(OrderModel, {}),\n    createOrder: types.optional(CreateOrderModel, {}),\n    zone: types.optional(ZoneModel, {}),\n    timing: types.optional(TimingModel, {}),\n    settings: types.optional(SettingsModel, {}),\n    config: types.optional(ConfigModel, {}),\n    statistics: types.optional(StatisticsModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.settings,\n        self.zone,\n        self.order,\n        self.statistics,\n      ]\n    },\n  }))\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\n","import { NormalizedCacheObject } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { Observer } from 'mobx-react'\nimport React, { Children, useContext, useState } from 'react'\nimport { ApolloProvider } from 'react-apollo'\n\nimport { RootContext } from '../context/RootContext'\nimport { createApolloClient } from '../graph/createClient'\nimport { persistModel } from '../helpers/persistModel'\nimport { useEffectOnce } from '../hooks/useEffectOnce'\nimport { AuthModel } from '../models/AuthModel'\nimport { RootModel, TRootModel } from '../models/RootModel'\nimport Pacman from './Pacman'\n\nexport const RootProvider: React.SFC = ({ children }) => {\n  const [root, setRoot] = useState<TRootModel | undefined>(undefined)\n\n  useEffectOnce(async () => {\n    const auth = AuthModel.create({})\n    const apolloClient = createApolloClient(auth)\n\n    const rootModel = RootModel.create(\n      { auth },\n      {\n        fetch: window.fetch,\n        apolloClient,\n      },\n    )\n\n    await Promise.all(rootModel.persistedModels.map(persistModel))\n    await rootModel.user.initUser()\n\n    setRoot(rootModel)\n  })\n\n  return root ? (\n    <ApolloProvider client={root.client}>\n      <RootContext.Provider value={root}>\n        {Children.only(children)}\n      </RootContext.Provider>\n    </ApolloProvider>\n  ) : (\n    <Pacman />\n  )\n}\n\nexport const useRoot = () => {\n  const root = useContext(RootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\nexport const useApolloClient = () => {\n  const root = useRoot()\n  return root.client\n}\n\ninterface IWithRootProps {\n  children(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.SFC<IWithRootProps> = ({\n  children,\n  observe = true,\n}) => {\n  const root = useRoot()\n  return observe === true ? (\n    <Observer>{() => children(root)}</Observer>\n  ) : (\n    children(root)\n  )\n}\n\nexport type RootApolloClient = ApolloClient<NormalizedCacheObject>\n\nexport interface IRootEnvironment {\n  fetch: TFetch\n  apolloClient: RootApolloClient\n}\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nimport { Colors } from '../styling'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.SFC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n  >\n    <Spinner\n      name=\"pacman\"\n      style={noMargin ? {} : { marginTop: '45vh', color: Colors.orange }}\n    />\n  </div>\n)\n\nexport default Pacman\n","import { computeDestinationPoint, getBounds } from 'geolib'\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n\ninterface IGeneratePolygonInput {\n  center: GeoPoint\n  metersRadius?: number\n  pointsCount?: number\n}\n\nexport const generatePolygon = ({\n  center,\n  metersRadius = 1000,\n  pointsCount = 15,\n}: IGeneratePolygonInput) => {\n  return new Array(pointsCount).fill(null).map((_, idx) => {\n    const degree = 360 / pointsCount * idx\n    return computeDestinationPoint(center, metersRadius, degree)\n  })\n}\n\nexport const getBoundsOfPoints = (points: GeoPoint[]) => {\n  const bounds = getBounds(points)\n  if (!bounds) {\n    return null\n  }\n  return new google.maps.LatLngBounds(\n    {\n      lat: bounds.minLat,\n      lng: bounds.minLng,\n    },\n    {\n      lat: bounds.maxLat,\n      lng: bounds.maxLng,\n    },\n  )\n}\n","import gql from 'graphql-tag'\n\nimport { PriceFragment } from '../../../graph/fragments'\n\nexport const MenuRecipeFragment = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...GPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n  ${PriceFragment}\n`\n\nexport const MenuRecipeVisibilityMutation = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport const MenuRecipeCreateMutation = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeUpdateMutation = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeDeleteMutation = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n","// temporary before figuring out a logging solution that works in prod\nlocalStorage.setItem('debug', '*,-sockjs*')\n","/* tslint:disable */\n\n/** Date in format YYYY-MM-DD */\nexport type Date = any\n\n/** Time without date (HH:MM:SS) */\nexport type Time = any\n\n/** Date in format iso 8601 format */\nexport type DateTime = any\n\n/** Data in json format */\nexport type Json = any\n\nexport interface InputOrderIndex {\n  companyBranches?: string[] | null\n  user?: string | null\n  orderStatesAND?: OrderStateEnum[] | null\n  orderStatesOR?: OrderStateEnum[] | null\n  orderStateCategoriesOR?: OrderStateCategoryEnum[] | null\n  orderStateCategoryTarget?: OrderStateCategoryTargetEnum | null\n  currency?: CurrencyEnum | null\n  location?: InputLocationIndex | null\n  stateChangeSince?: DateTime | null\n  includeOldFinished?: boolean | null\n}\n\nexport interface InputLocationIndex {\n  tableNumber?: number | null\n}\n\nexport interface InputPaginationParams {\n  fromIndex: number\n  toIndex: number\n}\n\nexport interface InputPaymentMethodIndex {\n  companyBranch: string\n  orderOrigin: OrderOriginEnum\n  warePriceType: WarePriceTypeEnum\n  paymentType: PaymentTypeEnum\n  paymentGate: PaymentGateEnum\n  enabled?: boolean | null\n}\n\nexport interface InputVamStatus {\n  email?: string | null\n  phone?: string | null\n  firstname?: string | null\n  lastname?: string | null\n  orderId: string\n}\n\nexport interface InputCompanyCreate {\n  name: string\n  number: string\n  vatIdent: string\n  account: string\n  companyType: CompanyTypeEnum\n}\n\nexport interface InputCompanyBranchCreate {\n  currencies?: CurrencyEnum[] | null\n  name: string\n  enabled?: boolean | null\n  brand: string\n  internalNumber: string\n}\n\nexport interface InputTransportationDeviceCreate {\n  companyBranch: string\n  deviceType: string\n  deviceState: string\n  idNumber: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  companyBranch: string\n  openAt?: Time | null\n  closeAt?: Time | null\n  specificDate: Date\n  closed?: boolean | null\n  smsLabel?: InputLabelCreate | null\n  webLabel?: InputLabelCreate | null\n  closedNote?: string | null\n}\n\nexport interface InputLabelCreate {\n  translations: InputLabelTranslation[]\n  enabled?: boolean | null\n}\n\nexport interface InputLabelTranslation {\n  language: LanguageEnum\n  content: string\n}\n\nexport interface InputBusinessHourCreate {\n  weekDay: WeekDayEnum\n  openAt: Time\n  closeAt: Time\n  smsLabel?: InputLabelCreate | null\n  webLabel?: InputLabelCreate | null\n}\n\nexport interface InputWareCreate {\n  companyBranch: string\n  nameLabel: InputLabelCreate\n  descriptionLabel: InputLabelCreate\n  code?: string | null\n  internalCode?: string | null\n  enabled?: boolean | null\n  availabilities?: InputAvailabilityCreate[] | null\n}\n\nexport interface InputAvailabilityCreate {\n  availabilityType?: string | null\n  dateFrom?: Date | null\n  timeFrom?: Time | null\n  dateTo?: Date | null\n  timeTo?: Time | null\n  available?: boolean | null\n  periodic?: boolean | null\n  weekDay?: WeekDayEnum | null\n}\n\nexport interface InputWareUpdate {\n  code?: string | null\n  internalCode?: string | null\n  companyBranch?: string | null\n  nameLabel?: InputLabelUpdate | null\n  descriptionLabel?: InputLabelUpdate | null\n  enabled?: boolean | null\n}\n\nexport interface InputLabelUpdate {\n  translations?: InputLabelTranslation[] | null\n  enabled?: boolean | null\n}\n\nexport interface InputWareCategoryCreate {\n  companyBranch: string\n  wareCategoryType: WareCategoryTypeEnum\n  pictogram?: string | null\n  nameLabel: string\n  internalNoteLabel?: string | null\n  wareRequirement?: WareRequirementEnum | null\n  enabled?: boolean | null\n  public?: boolean | null\n  availabilities?: InputAvailabilityCreate[] | null\n  maxRecipesCount?: number | null\n  recipes?: string[] | null\n}\n\nexport interface InputWareCategoryUpdate {\n  companyBranch?: string | null\n  pictogram?: string | null\n  nameLabel?: string | null\n  internalNoteLabel?: string | null\n  wareRequirement?: WareRequirementEnum | null\n  wareCategoryType?: WareCategoryTypeEnum | null\n  enabled?: boolean | null\n  public?: boolean | null\n  maxRecipesCount?: number | null\n  recipes?: string[] | null\n}\n\nexport interface InputShiftCreate {\n  companyBranch: string\n  beginAt: DateTime\n  endAt: DateTime\n  capacity?: number | null\n  placeCode: string\n}\n\nexport interface InputIngredientCreate {\n  recipe: string\n  stockItem: string\n  quantity: number\n}\n\nexport interface InputRecipeCreate {\n  companyBranch: string\n  nameLabel: string\n  descriptionLabel?: string | null\n  internalNote?: string | null\n  wareCategoryType: WareCategoryTypeEnum\n  enabled?: boolean | null\n  ingredients?: InputRecipeIngredient[] | null\n  wareCategories?: string[] | null\n  sideDishCategories?: string[] | null\n  availabilities?: InputAvailabilityCreate[] | null\n  video?: string | null\n  code?: string | null\n  ware?: string | null\n  prices: InputRecipePriceCreate[]\n  associatedRecipes?: InputRecipeRelationCreate[] | null\n}\n\nexport interface InputRecipeIngredient {\n  stockItem: string\n  quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  warePriceType: WarePriceTypeEnum\n  price: InputCurrencyCreate\n  vat: string\n}\n\nexport interface InputCurrencyCreate {\n  value: number\n  currency?: CurrencyEnum | null\n}\n\nexport interface InputRecipeRelationCreate {\n  associatedRecipe: string\n  warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  ware?: string | null\n  nameLabel?: string | null\n  descriptionLabel?: string | null\n  enabled?: boolean | null\n  internalNote?: string | null\n  video?: string | null\n  code?: string | null\n  ingredients?: InputRecipeIngredient[] | null\n  wareCategories?: string[] | null\n  sideDishCategories?: string[] | null\n  prices?: InputRecipePriceCreate[] | null\n  associatedRecipes?: InputRecipeRelationCreate[] | null\n}\n\nexport interface InputOrderRecipeCreate {\n  order: string\n  recipe: string\n  orderRecipeState?: OrderRecipeStateEnum | null\n  parent?: string | null\n  sideDishes?: string[] | null\n  associatedRecipes?: string[] | null\n  amount?: number | null\n}\n\nexport interface InputOrderRecipeUpdate {\n  order?: string | null\n  recipe?: string | null\n  orderRecipeState?: string | null\n  parent?: string | null\n  sideDishes?: string[] | null\n}\n\nexport interface InputZoneCreate {\n  companyBranch: string\n  name?: string | null\n  zoneType?: ZoneTypeEnum | null\n  zoneColor?: string | null\n  enabled?: boolean | null\n  geoPolygon?: InputGeoPointCreate[] | null\n  availability?: InputAvailabilityCreate | null\n  priceRangeRules?: PriceRangeRuleCreate[] | null\n  minimalOrderPrice?: InputCurrencyCreate | null\n}\n\nexport interface InputGeoPointCreate {\n  latitude: number\n  longitude: number\n}\n\nexport interface PriceRangeRuleCreate {\n  price: InputCurrencyCreate\n  toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  companyBranch?: string | null\n  name?: string | null\n  zoneColor?: string | null\n  enabled?: boolean | null\n  geoPolygon?: InputGeoPointCreate[] | null\n  availability?: InputAvailabilityUpdate | null\n  priceRangeRules?: PriceRangeRuleCreate[] | null\n  minimalOrderPrice?: InputCurrencyCreate | null\n}\n\nexport interface InputAvailabilityUpdate {\n  availabilityType?: string | null\n  dateFrom?: Date | null\n  timeFrom?: Time | null\n  dateTo?: Date | null\n  timeTo?: Time | null\n  available?: boolean | null\n  periodic?: boolean | null\n  weekDay?: WeekDayEnum | null\n}\n\nexport interface InputOrderDeliveryCreate {\n  companyBranch?: string | null\n  brand?: string | null\n  orderOrigin: OrderOriginEnum\n  gps: InputGeoPointCreate\n  deliveryType?: DeliveryTypeEnum | null\n}\n\nexport interface InputExternalOrderCreate {\n  companyBranch: string\n  orderOrigin: OrderOriginEnum\n  deliverAt: DateTime\n  gps?: InputGeoPointCreate | null\n  warePriceType?: WarePriceTypeEnum | null\n  deliveryType?: DeliveryTypeEnum | null\n  orderRecipes?: InputOrderRecipeCreates[] | null\n  customer?: InputCustomerCreate | null\n}\n\nexport interface InputOrderRecipeCreates {\n  recipe: string\n  sideDishes?: string[] | null\n  associatedRecipes?: string[] | null\n  amount?: number | null\n}\n\nexport interface InputCustomerCreate {\n  firstName?: string | null\n  lastName?: string | null\n  emails?: InputEmailCreate[] | null\n  phones?: InputPhoneCreate[] | null\n}\n\nexport interface InputEmailCreate {\n  email: string\n  description?: string | null\n  default?: boolean | null\n}\n\nexport interface InputPhoneCreate {\n  phone: string\n  description?: string | null\n  default?: boolean | null\n}\n\nexport interface InputOrderCreate {\n  companyBranch: string\n  orderOrigin: OrderOriginEnum\n  warePriceType: WarePriceTypeEnum\n  deliveryType?: DeliveryTypeEnum | null\n  language?: LanguageEnum | null\n  customer: InputCustomerCreate\n  gps?: InputGeoPointCreate | null\n  notification?: InputNotificationCreate | null\n  note?: string | null\n  deliverAt?: DateTime | null\n  location?: InputLocationCreate | null\n  callEventId?: string | null\n}\n\nexport interface InputNotificationCreate {\n  sms?: string | null\n  chrome?: Json | null\n  firebase?: Json | null\n}\n\nexport interface InputLocationCreate {\n  tableNumber?: number | null\n}\n\nexport interface InputOrderPickupCreate {\n  companyBranch: string\n  orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  paymentType: PaymentTypeEnum\n  paymentGate: PaymentGateEnum\n  price: InputCurrencyCreate\n}\n\nexport interface InputOrderFinish {\n  customer?: InputCustomerCreate | null\n  paymentMethod?: PaymentTypeEnum | null /** payment method used to finalize order */\n  paymentGate?: PaymentGateEnum | null /** payment gate used to finalize order */\n  deliverAt?: DateTime | null\n  note?: string | null\n  confirmedAgreements?: string[] | null\n}\n\nexport interface InputOrderUpdate {\n  deliveryType?: DeliveryTypeEnum | null\n  language?: LanguageEnum | null\n  customer?: InputCustomerCreate | null\n  gps?: InputGeoPointCreate | null\n  notification?: InputNotificationCreate | null\n  note?: string | null\n  deliverAt?: DateTime | null\n  location?: InputLocationCreate | null\n  warePriceType?: WarePriceTypeEnum | null\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  order: string\n  paymentMethod: string\n  price: InputCurrencyCreate\n}\n\nexport interface InputStockItemCreate {\n  companyBranch: string\n  wareUnit: WareUnitEnum\n  label: string\n  code: string\n  allowNegative: FieldStateEnum\n  plu?: string | null\n  quantity?: number | null\n  allergens?: AllergenEnum[] | null\n  note?: string | null\n}\n\nexport interface InputStockItemUpdate {\n  quantity?: number | null\n  label?: string | null\n  code?: string | null\n  plu?: string | null\n  wareUnit?: WareUnitEnum | null\n  allergens?: AllergenEnum[] | null\n  note?: string | null\n  allowNegative?: FieldStateEnum | null\n}\n\nexport interface InputUserUpdate {\n  language?: LanguageEnum | null\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  CLIENT = 'CLIENT',\n  AFFILIATE = 'AFFILIATE',\n  BRAND = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  BUSINESS = 'BUSINESS',\n  PREMISES = 'PREMISES',\n  MAIN_ADDRESS = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  CZK = 'CZK',\n  HOP = 'HOP',\n  EUR = 'EUR',\n  USD = 'USD',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  BACKEND = 'BACKEND',\n  FE_ADMIN = 'FE_ADMIN',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  PAYMENT = 'PAYMENT',\n  NOTIFICATION = 'NOTIFICATION',\n  RECLAMATION = 'RECLAMATION',\n  DELIVERY = 'DELIVERY',\n  CANCEL = 'CANCEL',\n  MAIN = 'MAIN',\n  PRODUCTION = 'PRODUCTION',\n  NEW_ORDERS = 'NEW_ORDERS',\n  PREPARING = 'PREPARING',\n  ON_WAY = 'ON_WAY',\n  FINISHED = 'FINISHED',\n  READY_TO_DELIVER = 'READY_TO_DELIVER',\n  IN_CART = 'IN_CART',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  MONDAY = 'MONDAY',\n  TUESDAY = 'TUESDAY',\n  WEDNESDAY = 'WEDNESDAY',\n  THURSDAY = 'THURSDAY',\n  FRIDAY = 'FRIDAY',\n  SATURDAY = 'SATURDAY',\n  SUNDAY = 'SUNDAY',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CEREALS_WITH_GLUTTEN = 'CEREALS_WITH_GLUTTEN',\n  SHELLFISH = 'SHELLFISH',\n  EGG = 'EGG',\n  FISH = 'FISH',\n  PEANUT = 'PEANUT',\n  SOYBEANS = 'SOYBEANS',\n  MILK = 'MILK',\n  NUT = 'NUT',\n  CELERY = 'CELERY',\n  MUSTARD = 'MUSTARD',\n  SESAME = 'SESAME',\n  SULFUROUS = 'SULFUROUS',\n  LUPIN = 'LUPIN',\n  MOLLUSCS = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  DELIVERY = 'DELIVERY',\n  INHOUSE = 'INHOUSE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  MAIN = 'MAIN',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  DEFAULT = 'DEFAULT',\n  ENABLED = 'ENABLED',\n  DISABLED = 'DISABLED',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  CS = 'CS',\n  SK = 'SK',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  ACCEPTED = 'ACCEPTED',\n  REJECTED = 'REJECTED',\n  WAITING_FOR_RESPONSE = 'WAITING_FOR_RESPONSE',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  WORKING = 'WORKING',\n  BROKEN = 'BROKEN',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  CAR = 'CAR',\n  PLANE = 'PLANE',\n  DRON = 'DRON',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  KILOGRAM = 'KILOGRAM',\n  GRAM = 'GRAM',\n  LITRE = 'LITRE',\n  PIECE = 'PIECE',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  GOPAY = 'GOPAY',\n  PAYPAL = 'PAYPAL',\n  CREDIT = 'CREDIT',\n  CASH = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  CASH = 'CASH',\n  CREDIT = 'CREDIT',\n  VOUCHER = 'VOUCHER',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  MAIN = 'MAIN',\n  SIDE_DISH = 'SIDE_DISH',\n  COVER = 'COVER',\n  MIXIN = 'MIXIN',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NO_LIMIT = 'NO_LIMIT',\n  OPTIONAL = 'OPTIONAL',\n  MAX_ONE = 'MAX_ONE',\n  MANDATORY = 'MANDATORY',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  ANDROID = 'ANDROID',\n  IOS = 'IOS',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  WEB = 'WEB',\n  DAME_JIDLO = 'DAME_JIDLO',\n  MOBIL_ANDROID = 'MOBIL_ANDROID',\n  MOBIL_IOS = 'MOBIL_IOS',\n  STAFF = 'STAFF',\n  WIFI = 'WIFI',\n  BAKER = 'BAKER',\n  WEB_PARTNER = 'WEB_PARTNER',\n  ENIGOO = 'ENIGOO',\n  MPIZZA = 'MPIZZA',\n  MINISITE = 'MINISITE',\n  AFFILIATE_PIZZA_ROZVOZ = 'AFFILIATE_PIZZA_ROZVOZ',\n  AFFILIATE_ROZVOZ_PIZZY_ZDARMA = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AFFILIATE_ROZVOZ_JIDLA = 'AFFILIATE_ROZVOZ_JIDLA',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  AREA = 'AREA',\n  TABLE = 'TABLE',\n  SECTOR = 'SECTOR',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PRICE_SUM = 'PRICE_SUM',\n  COMMISSION = 'COMMISSION',\n  FEE = 'FEE',\n  REWARD_RESULT = 'REWARD_RESULT',\n  AFFILIATE = 'AFFILIATE',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  CREATED = 'CREATED',\n  PENDING = 'PENDING',\n  PAID = 'PAID',\n  CANCELED = 'CANCELED',\n  COMPLETED = 'COMPLETED',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  IN_CART = 'IN_CART',\n  RECEIVED = 'RECEIVED',\n  IN_PROGRESS = 'IN_PROGRESS',\n  FINISHED = 'FINISHED',\n  RECLAMATION = 'RECLAMATION',\n  RECLAMATION_HANDLED = 'RECLAMATION_HANDLED',\n  UNPAID = 'UNPAID',\n  PAID = 'PAID',\n  BY_CREDIT_CARD = 'BY_CREDIT_CARD',\n  REFUND = 'REFUND',\n  SHOULD_BE_PAID = 'SHOULD_BE_PAID',\n  CUSTOMER_NOTIFIED = 'CUSTOMER_NOTIFIED',\n  NEW = 'NEW',\n  ONLINE = 'ONLINE',\n  EVALUATED = 'EVALUATED',\n  NOT_EVALUATED = 'NOT_EVALUATED',\n  SHOWN = 'SHOWN',\n  ACCEPTED = 'ACCEPTED',\n  READY_TO_PRODUCE = 'READY_TO_PRODUCE',\n  IN_PRODUCE = 'IN_PRODUCE',\n  MADE = 'MADE',\n  READY_TO_DELIVER = 'READY_TO_DELIVER',\n  ON_WAY = 'ON_WAY',\n  STUCK_ON_ROAD = 'STUCK_ON_ROAD',\n  LATE = 'LATE',\n  DELIVERED = 'DELIVERED',\n  CAUSE = 'CAUSE',\n  HANDOVER = 'HANDOVER',\n  WAITING_FOR_CUSTOMER = 'WAITING_FOR_CUSTOMER',\n  CUSTOMER_DID_NOT_COME = 'CUSTOMER_DID_NOT_COME',\n  DELIVER_REJECTED = 'DELIVER_REJECTED',\n  CANCEL_ON_WAY = 'CANCEL_ON_WAY',\n  CANCELED = 'CANCELED',\n  BRANCH_CANCEL = 'BRANCH_CANCEL',\n  CUSTOMER_CANCEL = 'CUSTOMER_CANCEL',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  PICKUP = 'PICKUP',\n  MESSENGER = 'MESSENGER',\n  DRON = 'DRON',\n  MAIL = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  FRESH = 'FRESH',\n  PREPARING = 'PREPARING',\n  COOKED = 'COOKED',\n  CANCELED = 'CANCELED',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  CONFIRMATION = 'CONFIRMATION',\n  ADMIN_ORDER_LISTING = 'ADMIN_ORDER_LISTING',\n  RULES = 'RULES',\n  URL = 'URL',\n  GRAPHIC = 'GRAPHIC',\n  OPTIONS = 'OPTIONS',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  CREATE = 'CREATE',\n  UPDATE = 'UPDATE',\n  DESTROY = 'DESTROY',\n  REMOVE = 'REMOVE',\n}\nexport namespace MPasswordChange {\n  export type Variables = {\n    password: string\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    updateUserPassword: UpdateUserPassword\n  }\n\n  export type UpdateUserPassword = {\n    __typename?: 'UserUpdatedPassword'\n    id: string\n    token: string\n  }\n}\nexport namespace GUserModelBootstrap {\n  export type Variables = {\n    userId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    user: User\n  }\n\n  export type User = {\n    __typename?: 'User'\n    id: string\n    language: Language\n    branches: Branches[]\n  }\n\n  export type Language = {\n    __typename?: 'Language'\n    rawCode: string\n  }\n\n  export type Branches = GCompanyBranch.Fragment\n}\nexport namespace GLogoutWidget {\n  export type Variables = {\n    id: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    user: User\n  }\n\n  export type User = {\n    __typename?: 'User'\n    id: string\n    firstName?: string | null\n    lastName?: string | null\n  }\n}\nexport namespace GCreateSpecificBusinessHour {\n  export type Variables = {\n    input: InputBusinessHourSpecificDateCreate\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    result: Result\n  }\n\n  export type Result = GSpecificBusinessHour.Fragment\n}\nexport namespace GDeleteSpecificBusinessHour {\n  export type Variables = {\n    id: string\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    result: Result\n  }\n\n  export type Result = {\n    __typename?: 'BusinessHour'\n    id: string\n  }\n}\nexport namespace GSpecificBusinessHours {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    businessHours: BusinessHours[]\n  }\n\n  export type BusinessHours = GSpecificBusinessHour.Fragment\n}\nexport namespace GValidateLocation {\n  export type Variables = {\n    branchId: string\n    latitude: number\n    longitude: number\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    resolveLocation: ResolveLocation\n  }\n\n  export type ResolveLocation = {\n    __typename?: 'AddressResolvedLocation'\n    inDeliveryLocation: boolean\n  }\n}\nexport namespace GCreateOrder {\n  export type Variables = {\n    branchId: string\n    deliveryType: DeliveryTypeEnum\n    gps: InputGeoPointCreate\n    callEventId?: string | null\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    createOrder: CreateOrder\n  }\n\n  export type CreateOrder = {\n    __typename?: 'Order'\n    id: string\n  }\n}\nexport namespace GUpdateOrder {\n  export type Variables = {\n    orderId: string\n    deliveryType: DeliveryTypeEnum\n    gps: InputGeoPointCreate\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    updateOrder: UpdateOrder\n  }\n\n  export type UpdateOrder = {\n    __typename?: 'Order'\n    id: string\n  }\n}\nexport namespace MAcceptOrder {\n  export type Variables = {\n    orderId: string\n    deliveryType: DeliveryTypeEnum\n    customer: InputCustomerCreate\n    gps: InputGeoPointCreate\n    note?: string | null\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    updateOrder: UpdateOrder\n    finishOrder: FinishOrder\n  }\n\n  export type UpdateOrder = {\n    __typename?: 'Order'\n    id: string\n  }\n\n  export type FinishOrder = {\n    __typename?: 'FinishedOrder'\n    userErrors: string[]\n  }\n}\nexport namespace MCancelOrder {\n  export type Variables = {\n    orderId: string\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    addOrderState: AddOrderState\n  }\n\n  export type AddOrderState = {\n    __typename?: 'Order'\n    id: string\n  }\n}\nexport namespace GOrderVam {\n  export type Variables = {\n    branchId: string\n    phone: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    vamCustomer: VamCustomer\n  }\n\n  export type VamCustomer = {\n    __typename?: 'CustomerInformation'\n    isFound: boolean\n    phone: string\n    email: string\n    firstName: string\n    lastName: string\n    lastOrder?: LastOrder | null\n    locations: Locations[]\n  }\n\n  export type LastOrder = {\n    __typename?: 'Order'\n    note?: string | null\n  }\n\n  export type Locations = {\n    __typename?: 'JsonAddress'\n    street?: string | null\n    houseNumber?: string | null\n    city?: string | null\n    gps?: Gps | null\n  }\n\n  export type Gps = {\n    __typename?: 'GeoPoint'\n    latitude: number\n    longitude: number\n  }\n}\nexport namespace GOrderMenu {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    orderMenu: OrderMenu[]\n  }\n\n  export type OrderMenu = GOrderMenuCategory.Fragment\n}\nexport namespace SOrderCall {\n  export type Variables = {}\n\n  export type Subscription = {\n    __typename?: 'Subscription'\n    updatedUserCallingCustomer: UpdatedUserCallingCustomer\n  }\n\n  export type UpdatedUserCallingCustomer = {\n    __typename?: 'UserCallingCustomerSubscription'\n    eventId: string\n    phone: string\n    isRinging: boolean\n  }\n}\nexport namespace GOrderCount {\n  export type Variables = {\n    branchesId: string[]\n    categories: OrderStateCategoryEnum[]\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    ordersCount: number\n  }\n}\nexport namespace SOrderCount {\n  export type Variables = {\n    branchesId: string[]\n    categories: OrderStateCategoryEnum[]\n  }\n\n  export type Subscription = {\n    __typename?: 'Subscription'\n    updatedOrdersCount: UpdatedOrdersCount\n  }\n\n  export type UpdatedOrdersCount = {\n    __typename?: 'OrderCountSubscription'\n    ordersCount: number\n  }\n}\nexport namespace GSortMenuCategory {\n  export type Variables = {\n    categoryId: string\n    offset: number\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    success: boolean\n  }\n}\nexport namespace GMenuCategoryCreate {\n  export type Variables = {\n    input: InputWareCategoryCreate\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    createWareCategory: CreateWareCategory\n  }\n\n  export type CreateWareCategory = {\n    __typename?: 'WareCategory'\n    id: string\n  }\n}\nexport namespace GMenuCategoryUpdate {\n  export type Variables = {\n    categoryId: string\n    input: InputWareCategoryUpdate\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    updateWareCategory: UpdateWareCategory\n  }\n\n  export type UpdateWareCategory = GMenuCategoryForm.Fragment\n}\nexport namespace GMenuCategoryVisibility {\n  export type Variables = {\n    categoryId: string\n    visible: boolean\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    updateWareCategory: UpdateWareCategory\n  }\n\n  export type UpdateWareCategory = {\n    __typename?: 'WareCategory'\n    id: string\n    visible: boolean\n  }\n}\nexport namespace GMenuCategoryDelete {\n  export type Variables = {\n    categoryId: string\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    destroyWareCategory: DestroyWareCategory\n  }\n\n  export type DestroyWareCategory = {\n    __typename?: 'WareCategory'\n    id: string\n  }\n}\nexport namespace GMenuRecipeVisibility {\n  export type Variables = {\n    recipeId: string\n    visible: boolean\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    updateRecipe: UpdateRecipe\n  }\n\n  export type UpdateRecipe = {\n    __typename?: 'Recipe'\n    id: string\n    visible: boolean\n  }\n}\nexport namespace GMenuRecipeCreate {\n  export type Variables = {\n    recipe: InputRecipeCreate\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    createRecipe: CreateRecipe\n  }\n\n  export type CreateRecipe = GMenuRecipe.Fragment\n}\nexport namespace GMenuRecipeUpdate {\n  export type Variables = {\n    recipeId: string\n    recipe: InputRecipeUpdate\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    updateRecipe: UpdateRecipe\n  }\n\n  export type UpdateRecipe = GMenuRecipe.Fragment\n}\nexport namespace GMenuRecipeDelete {\n  export type Variables = {\n    recipeId: string\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    destroyRecipe: DestroyRecipe\n  }\n\n  export type DestroyRecipe = {\n    __typename?: 'Recipe'\n    id: string\n  }\n}\nexport namespace GMenuStockCreate {\n  export type Variables = {\n    stockItem: InputStockItemCreate\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    createStockItem: CreateStockItem\n  }\n\n  export type CreateStockItem = GMenuStockItem.Fragment\n}\nexport namespace GMenuStockUpdate {\n  export type Variables = {\n    stockId: string\n    stockItem: InputStockItemUpdate\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    updateStockItem: UpdateStockItem\n  }\n\n  export type UpdateStockItem = GMenuStockItem.Fragment\n}\nexport namespace GMenuStockDelete {\n  export type Variables = {\n    stockId: string\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    destroyStockItem: DestroyStockItem\n  }\n\n  export type DestroyStockItem = {\n    __typename?: 'StockItem'\n    id: string\n  }\n}\nexport namespace GAllergens {\n  export type Variables = {}\n\n  export type Query = {\n    __typename?: 'Query'\n    allergens: Allergens[]\n  }\n\n  export type Allergens = GAllergen.Fragment\n}\nexport namespace GCurrencies {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    currencies: Currencies[]\n    companyBranch: CompanyBranch\n  }\n\n  export type Currencies = {\n    __typename?: 'Currency'\n    enum: CurrencyEnum\n    code: string\n  }\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    address: Address\n  }\n\n  export type Address = {\n    __typename?: 'Address'\n    country?: Country | null\n  }\n\n  export type Country = {\n    __typename?: 'Country'\n    currency: Currency\n  }\n\n  export type Currency = {\n    __typename?: 'Currency'\n    enum: CurrencyEnum\n  }\n}\nexport namespace GVats {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    vats: Vats[]\n  }\n\n  export type Vats = {\n    __typename?: 'Vat'\n    id: string\n    vat: number\n  }\n}\nexport namespace GWareUnits {\n  export type Variables = {}\n\n  export type Query = {\n    __typename?: 'Query'\n    wareUnits: WareUnits[]\n  }\n\n  export type WareUnits = {\n    __typename?: 'WareUnit'\n    id: string\n    code: string\n    enum: WareUnitEnum\n  }\n}\nexport namespace GMenuCategoryForm {\n  export type Variables = {\n    categoryId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    wareCategory: WareCategory\n  }\n\n  export type WareCategory = GMenuCategoryForm.Fragment\n}\nexport namespace GCategoryList {\n  export type Variables = {\n    branchId: string\n    categoryType: WareCategoryTypeEnum\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    wareCategories: WareCategories[]\n  }\n\n  export type WareCategories = GMenuCategoryListItem.Fragment\n}\nexport namespace GMenuRecipeForm {\n  export type Variables = {\n    recipeId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    recipe: Recipe\n  }\n\n  export type Recipe = {\n    __typename?: 'Recipe'\n    id: string\n    code: string\n    image?: string | null\n    nameLabel: string\n    internalNote?: string | null\n    descriptionLabel?: string | null\n    visible: boolean\n    recipeType: RecipeType\n    sourcePrices: SourcePrices[]\n    sideDishes: SideDishes[]\n    categories: Categories[]\n    sourceAssociatedRecipes: SourceAssociatedRecipes[]\n    sourceIngredients: SourceIngredients[]\n  }\n\n  export type RecipeType = {\n    __typename?: 'WareCategoryType'\n    enum: WareCategoryTypeEnum\n  }\n\n  export type SourcePrices = GMenuRecipePrice.Fragment\n\n  export type SideDishes = GMenuCategoryListItem.Fragment\n\n  export type Categories = GMenuCategoryListItem.Fragment\n\n  export type SourceAssociatedRecipes = {\n    __typename?: 'RecipeRelation'\n    id: string\n    priceType: PriceType\n    recipe: _Recipe\n  }\n\n  export type PriceType = {\n    __typename?: 'WarePriceType'\n    enum: WarePriceTypeEnum\n  }\n\n  export type _Recipe = GMenuAssocRecipe.Fragment\n\n  export type SourceIngredients = {\n    __typename?: 'Ingredient'\n    id: string\n    quantity: number\n    stockItem: StockItem\n  }\n\n  export type StockItem = {\n    __typename?: 'StockItem'\n    id: string\n    label: string\n    wareUnit: WareUnit\n    allergens: Allergens[]\n  }\n\n  export type WareUnit = {\n    __typename?: 'WareUnit'\n    id: string\n    code: string\n  }\n\n  export type Allergens = {\n    __typename?: 'Allergen'\n    id: string\n    enum: AllergenEnum\n  }\n}\nexport namespace GMenuRecipeFormAssoc {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    recipes: Recipes[]\n  }\n\n  export type Recipes = GMenuAssocRecipe.Fragment\n}\nexport namespace GMenuRecipeDefaultVat {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    id: string\n    defaultVats: DefaultVats[]\n  }\n\n  export type DefaultVats = {\n    __typename?: 'VatPriceType'\n    vatId: string\n    priceType: PriceType\n  }\n\n  export type PriceType = {\n    __typename?: 'WarePriceType'\n    enum: WarePriceTypeEnum\n  }\n}\nexport namespace GMenuRecipeList {\n  export type Variables = {\n    branchId: string\n    categoryId?: string | null\n    categoryType?: WareCategoryTypeEnum | null\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    recipes: Recipes[]\n  }\n\n  export type Recipes = GMenuRecipe.Fragment\n}\nexport namespace GMenuStockDeposit {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    stockItems: StockItems[]\n  }\n\n  export type StockItems = {\n    __typename?: 'StockItem'\n    id: string\n    code: string\n    plu?: string | null\n    nameLabel: string\n    note: string\n    quantity: number\n    wareUnit: WareUnit\n  }\n\n  export type WareUnit = GWareUnit.Fragment\n}\nexport namespace GChangeMenuStockQuantity {\n  export type Variables = {\n    stockItem: string\n    quantityChange: number\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    changeAmountStockItem: ChangeAmountStockItem\n  }\n\n  export type ChangeAmountStockItem = {\n    __typename?: 'StockItem'\n    id: string\n    quantity: number\n  }\n}\nexport namespace GMenuStockForm {\n  export type Variables = {\n    stockId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    stockItem: StockItem\n  }\n\n  export type StockItem = {\n    __typename?: 'StockItem'\n    id: string\n    code: string\n    plu?: string | null\n    note: string\n    nameLabel: string\n    allowNegative: FieldStateEnum\n    wareUnit: WareUnit\n    allergens: Allergens[]\n    companyBranch: CompanyBranch\n  }\n\n  export type WareUnit = GWareUnit.Fragment\n\n  export type Allergens = GAllergen.Fragment\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    id: string\n    stockItemsCanBeNegative: boolean\n  }\n}\nexport namespace GMenuStockList {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    stockItems: StockItems[]\n  }\n\n  export type StockItems = GMenuStockItem.Fragment\n}\nexport namespace GStockRecipes {\n  export type Variables = {\n    stockId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    stockItem: StockItem\n  }\n\n  export type StockItem = {\n    __typename?: 'StockItem'\n    id: string\n    ingredients: Ingredients[]\n  }\n\n  export type Ingredients = {\n    __typename?: 'Ingredient'\n    id: string\n    recipe: Recipe\n  }\n\n  export type Recipe = {\n    __typename?: 'Recipe'\n    id: string\n    nameLabel: string\n    descriptionLabel?: string | null\n  }\n}\nexport namespace GOrderBranchLocation {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    id: string\n    gps: Gps\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\nexport namespace GOrderLocation {\n  export type Variables = {\n    orderId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    order: Order\n  }\n\n  export type Order = {\n    __typename?: 'Order'\n    id: string\n    gps?: Gps | null\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\nexport namespace GUpdateOrderState {\n  export type Variables = {\n    orderId: string\n    state: OrderStateEnum\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    addOrderState: AddOrderState\n  }\n\n  export type AddOrderState = {\n    __typename?: 'Order'\n    orderTiming: OrderTiming[]\n  } & GOrderStateCategory.Fragment\n\n  export type OrderTiming = {\n    __typename?: 'OrderStateCategoryRelation'\n    createdAt: DateTime\n    orderStateCategory: OrderStateCategoryEnum\n  }\n}\nexport namespace GSendOrderNotification {\n  export type Variables = {\n    orderId: string\n    minutes: number\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    orderNotifyCustomer: OrderNotifyCustomer\n  }\n\n  export type OrderNotifyCustomer = {\n    __typename?: 'Order'\n    id: string\n    deliverAt?: DateTime | null\n  }\n}\nexport namespace GSelectOrderDriver {\n  export type Variables = {\n    driverId: string\n    orderId: string\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    createUserDeliveringOrder: CreateUserDeliveringOrder\n  }\n\n  export type CreateUserDeliveringOrder = {\n    __typename?: 'UserDeliveringOrder'\n    order: Order\n  }\n\n  export type Order = GOrderDriver.Fragment\n}\nexport namespace GRemoveOrderDriver {\n  export type Variables = {\n    orderDriverId: string\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    destroyUserDeliveringOrder: DestroyUserDeliveringOrder\n  }\n\n  export type DestroyUserDeliveringOrder = {\n    __typename?: 'UserDeliveringOrder'\n    order: Order\n  }\n\n  export type Order = GOrderDriver.Fragment\n}\nexport namespace GOrderDriverSelection {\n  export type Variables = {\n    orderId: string\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    order: Order\n    drivers: Drivers[]\n  }\n\n  export type Order = GOrderDriver.Fragment\n\n  export type Drivers = GDriver.Fragment\n}\nexport namespace GOrderDetail {\n  export type Variables = {\n    id: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    order: Order\n  }\n\n  export type Order = {\n    __typename?: 'Order'\n    id: string\n    createdAt: DateTime\n    deliverAt?: DateTime | null\n    companyBranch: CompanyBranch\n    customer: Customer\n    customerOrdersCountCurrent: number\n    customerOrdersCountTotal: number\n    note?: string | null\n    previousNote?: string | null\n    allAppliedRules: string[]\n    items: Items[]\n    totalSum: TotalSum\n    transportFee: TransportFee\n    coverPrice: CoverPrice\n    totalDiscount: TotalDiscount\n    orderTiming: OrderTiming[]\n  } & GOrderDriver.Fragment\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    id: string\n  }\n\n  export type Customer = {\n    __typename?: 'JsonCustomer'\n    emails: Emails[]\n    phones: Phones[]\n  }\n\n  export type Emails = GEmail.Fragment\n\n  export type Phones = GPhone.Fragment\n\n  export type Items = {\n    __typename?: 'OrderRecipe'\n    sidedishes: Sidedishes[]\n  } & GOrderDetailWare.Fragment\n\n  export type Sidedishes = GOrderDetailWare.Fragment\n\n  export type TotalSum = GPrice.Fragment\n\n  export type TransportFee = GPrice.Fragment\n\n  export type CoverPrice = GPrice.Fragment\n\n  export type TotalDiscount = GPrice.Fragment\n\n  export type OrderTiming = {\n    __typename?: 'OrderStateCategoryRelation'\n    createdAt: DateTime\n    orderStateCategory: OrderStateCategoryEnum\n  }\n}\nexport namespace GOrderList {\n  export type Variables = {\n    branches?: string[] | null\n    categories?: OrderStateCategoryEnum[] | null\n    includeOldFinished?: boolean | null\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    orders: Orders[]\n    orderStateCategories: OrderStateCategories[]\n  }\n\n  export type Orders = {\n    __typename?: 'Order'\n    id: string\n  } & GOrderStateCategory.Fragment &\n    GOrderListTicker.Fragment &\n    GOrderMapMarker.Fragment\n\n  export type OrderStateCategories = {\n    __typename?: 'OrderStateCategory'\n    code: string\n    enum: OrderStateCategoryEnum\n  }\n}\nexport namespace SOrderList {\n  export type Variables = {\n    branches?: string[] | null\n    categories?: OrderStateCategoryEnum[] | null\n  }\n\n  export type Subscription = {\n    __typename?: 'Subscription'\n    updatedOrder: UpdatedOrder\n  }\n\n  export type UpdatedOrder = {\n    __typename?: 'OrderUpdateSubscription'\n    order?: Order | null\n  }\n\n  export type Order = {\n    __typename?: 'Order'\n    id: string\n  } & GOrderStateCategory.Fragment &\n    GOrderListTicker.Fragment &\n    GOrderMapMarker.Fragment\n}\nexport namespace GOrderState {\n  export type Variables = {\n    orderId: string\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    order: Order\n    companyBranch: CompanyBranch\n  }\n\n  export type Order = {\n    __typename?: 'Order'\n    deliveryType?: DeliveryType | null\n  } & GOrderStateCategory.Fragment\n\n  export type DeliveryType = {\n    __typename?: 'DeliveryType'\n    enum: DeliveryTypeEnum\n  }\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    id: string\n    allowedCategories: OrderStateCategoryEnum[]\n  }\n}\nexport namespace Statistics {\n  export type Variables = {\n    branches: string[]\n    dateFrom: Date\n    dateTo: Date\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    stats: Stats\n  }\n\n  export type Stats = {\n    __typename?: 'Statistics'\n    categoryStatisticsPlain: string\n    dailyStatisticsPlain: string\n    deliveryStatisticsPlain: string\n  }\n}\nexport namespace GCreateFinancialReport {\n  export type Variables = {\n    companyBranchId: string\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    result: Result\n  }\n\n  export type Result = {\n    __typename?: 'FinancialReport'\n    id: string\n  }\n}\nexport namespace GClosureHistory {\n  export type Variables = {\n    branchId: string\n    dateFrom: Date\n    dateTo: Date\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    financialReports: FinancialReports[]\n  }\n\n  export type FinancialReports = {\n    __typename?: 'FinancialReport'\n    id: string\n    reportDatetime: DateTime\n    reportSequence: number\n  }\n}\nexport namespace GClosureReportQuery {\n  export type Variables = {\n    branchId: string\n    reportId: string\n    showReport: boolean\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    lastReport: LastReport\n    report?: Report | null\n  }\n\n  export type LastReport = {\n    __typename?: 'FinancialReport'\n    plainData: string\n    reportDatetime: DateTime\n    reportSequence: number\n  }\n\n  export type Report = {\n    __typename?: 'FinancialReport'\n    plainData: string\n    reportDatetime: DateTime\n    reportSequence: number\n  }\n}\nexport namespace GOrdersStatistics {\n  export type Variables = {\n    branches: string[]\n    dateFrom: Date\n    dateTo: Date\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    stats: Stats\n  }\n\n  export type Stats = {\n    __typename?: 'Statistics'\n    finishedOrders: FinishedOrders\n  }\n\n  export type FinishedOrders = {\n    __typename?: 'StatisticsOrders'\n    fees: Fees\n    onlinePayments: OnlinePayments\n    total: Total\n    ordersCount: number\n    orders: Orders[]\n  }\n\n  export type Fees = GStatsPrice.Fragment\n\n  export type OnlinePayments = GStatsPrice.Fragment\n\n  export type Total = GStatsPrice.Fragment\n\n  export type Orders = GOrderListTicker.Fragment\n}\nexport namespace GCreateZone {\n  export type Variables = {\n    branchId: string\n    points?: InputGeoPointCreate[] | null\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    createZone: CreateZone\n  }\n\n  export type CreateZone = GZone.Fragment\n}\nexport namespace GUpdateZone {\n  export type Variables = {\n    zoneId: string\n    update: InputZoneUpdate\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    updateZone: UpdateZone\n  }\n\n  export type UpdateZone = GZone.Fragment\n}\nexport namespace GUpdateZonePriority {\n  export type Variables = {\n    zoneId: string\n    offset: number\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    updateZonePriority: UpdateZonePriority[]\n  }\n\n  export type UpdateZonePriority = {\n    __typename?: 'Zone'\n    id: string\n    priority: number\n  }\n}\nexport namespace GDestroyZone {\n  export type Variables = {\n    zoneId: string\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    destroyZone: DestroyZone\n  }\n\n  export type DestroyZone = {\n    __typename?: 'Zone'\n    id: string\n  }\n}\nexport namespace GZones {\n  export type Variables = {\n    branchesId: string[]\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    zones: Zones[]\n  }\n\n  export type Zones = GZone.Fragment\n}\nexport namespace GZoneLocation {\n  export type Variables = {\n    zoneId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    zone: Zone\n  }\n\n  export type Zone = {\n    __typename?: 'Zone'\n    id: string\n    companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    id: string\n    gps: Gps\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\nexport namespace GZoneBranchLocation {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    id: string\n    gps: Gps\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\nexport namespace GZoneColors {\n  export type Variables = {}\n\n  export type Query = {\n    __typename?: 'Query'\n    zoneColors: ZoneColors[]\n  }\n\n  export type ZoneColors = {\n    __typename?: 'ZoneColor'\n    id: string\n    code: string\n    color: string\n  }\n}\n\nexport namespace GAddress {\n  export type Fragment = {\n    __typename?: 'JsonAddress'\n    city?: string | null\n    street?: string | null\n    houseNumber?: string | null\n  }\n}\n\nexport namespace GCompanyBranch {\n  export type Fragment = {\n    __typename?: 'CompanyBranch'\n    id: string\n    name: string\n    gps: Gps\n    brand: Brand\n  }\n\n  export type Gps = GGeoPoint.Fragment\n\n  export type Brand = {\n    __typename?: 'Company'\n    id: string\n    name: string\n  }\n}\n\nexport namespace GCustomer {\n  export type Fragment = {\n    __typename?: 'JsonCustomer'\n    firstName?: string | null\n    lastName?: string | null\n    defaultEmail?: DefaultEmail | null\n    defaultPhone?: DefaultPhone | null\n  }\n\n  export type DefaultEmail = GEmail.Fragment\n\n  export type DefaultPhone = GPhone.Fragment\n}\n\nexport namespace GEmail {\n  export type Fragment = {\n    __typename?: 'Email'\n    email: string\n    description?: string | null\n    default: boolean\n  }\n}\n\nexport namespace GGeoPoint {\n  export type Fragment = {\n    __typename?: 'GeoPoint'\n    latitude: number\n    longitude: number\n  }\n}\n\nexport namespace GPhone {\n  export type Fragment = {\n    __typename?: 'Phone'\n    phone: string\n    description?: string | null\n    default: boolean\n  }\n}\n\nexport namespace GPrice {\n  export type Fragment = {\n    __typename?: 'PriceConverted'\n    value: number\n  }\n}\n\nexport namespace GSpecificBusinessHour {\n  export type Fragment = {\n    __typename?: 'BusinessHour'\n    id: string\n    companyBranch: CompanyBranch\n    specificDate?: Date | null\n    specificDateLocalized?: string | null\n    closed: boolean\n    closedNote?: string | null\n    openAt: Time\n    closeAt: Time\n  }\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    id: string\n  }\n}\n\nexport namespace GOrderMenuRecipe {\n  export type Fragment = {\n    __typename?: 'Recipe'\n    id: string\n    nameLabel: string\n    descriptionLabel?: string | null\n    image?: string | null\n    price: Price\n    sidedishCount: number\n  }\n\n  export type Price = {\n    __typename?: 'PriceConverted'\n    value: number\n    currency: Currency\n  }\n\n  export type Currency = {\n    __typename?: 'Currency'\n    code: string\n  }\n}\n\nexport namespace GOrderMenuCategory {\n  export type Fragment = {\n    __typename?: 'WareCategory'\n    id: string\n    nameLabel: string\n    pictogram?: string | null\n    recipes: Recipes[]\n  }\n\n  export type Recipes = GOrderMenuRecipe.Fragment\n}\n\nexport namespace GAllergen {\n  export type Fragment = {\n    __typename?: 'Allergen'\n    id: string\n    code: string\n    enum: AllergenEnum\n    category: number\n  }\n}\n\nexport namespace GWareUnit {\n  export type Fragment = {\n    __typename?: 'WareUnit'\n    id: string\n    enum: WareUnitEnum\n    code: string\n  }\n}\n\nexport namespace GMenuRecipe {\n  export type Fragment = {\n    __typename?: 'Recipe'\n    id: string\n    code: string\n    visible: boolean\n    nameLabel: string\n    internalNote?: string | null\n    availableAmount: number\n    prices: Prices[]\n    recipeType: RecipeType\n  }\n\n  export type Prices = {\n    __typename?: 'RecipePrice'\n    id: string\n    priceType: PriceType\n    price: Price\n  }\n\n  export type PriceType = {\n    __typename?: 'WarePriceType'\n    enum: WarePriceTypeEnum\n  }\n\n  export type Price = {\n    __typename?: 'PriceConverted'\n    formattedValue: string\n  } & GPrice.Fragment\n\n  export type RecipeType = {\n    __typename?: 'WareCategoryType'\n    enum: WareCategoryTypeEnum\n  }\n}\n\nexport namespace GMenuStockItem {\n  export type Fragment = {\n    __typename?: 'StockItem'\n    id: string\n    code: string\n    note: string\n    plu?: string | null\n    quantity: number\n    nameLabel: string\n    allergens: Allergens[]\n    wareUnit: WareUnit\n  }\n\n  export type Allergens = GAllergen.Fragment\n\n  export type WareUnit = GWareUnit.Fragment\n}\n\nexport namespace GMenuCategoryForm {\n  export type Fragment = {\n    __typename?: 'WareCategory'\n    id: string\n    nameLabel: string\n    internalNoteLabel?: string | null\n    visible: boolean\n    categoryType: CategoryType\n    pictogram?: string | null\n    recipes: Recipes[]\n  }\n\n  export type CategoryType = {\n    __typename?: 'WareCategoryType'\n    enum: WareCategoryTypeEnum\n  }\n\n  export type Recipes = GMenuRecipe.Fragment\n}\n\nexport namespace GMenuCategoryListItem {\n  export type Fragment = {\n    __typename?: 'WareCategory'\n    id: string\n    nameLabel: string\n    internalNoteLabel?: string | null\n    countRecipes: number\n    visible: boolean\n    categoryType: CategoryType\n  }\n\n  export type CategoryType = {\n    __typename?: 'WareCategoryType'\n    enum: WareCategoryTypeEnum\n  }\n}\n\nexport namespace GMenuRecipePrice {\n  export type Fragment = {\n    __typename?: 'RecipePrice'\n    id: string\n    priceType: PriceType\n    price: Price\n    vat: Vat\n  }\n\n  export type PriceType = {\n    __typename?: 'WarePriceType'\n    enum: WarePriceTypeEnum\n  }\n\n  export type Price = GPrice.Fragment\n\n  export type Vat = {\n    __typename?: 'Vat'\n    id: string\n  }\n}\n\nexport namespace GMenuAssocRecipe {\n  export type Fragment = {\n    __typename?: 'Recipe'\n    id: string\n    nameLabel: string\n  }\n}\n\nexport namespace GOrderStateCategory {\n  export type Fragment = {\n    __typename?: 'Order'\n    id: string\n    orderStateCategory: OrderStateCategoryEnum\n  }\n}\n\nexport namespace GOrderMapMarker {\n  export type Fragment = {\n    __typename?: 'Order'\n    id: string\n    deliverAt?: DateTime | null\n    gps?: Gps | null\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\n\nexport namespace GDriver {\n  export type Fragment = {\n    __typename?: 'User'\n    id: string\n    firstName?: string | null\n    lastName?: string | null\n  }\n}\n\nexport namespace GOrderDriver {\n  export type Fragment = {\n    __typename?: 'Order'\n    id: string\n    driver?: Driver | null\n  }\n\n  export type Driver = {\n    __typename?: 'UserDeliveringOrder'\n    id: string\n    user: User\n  }\n\n  export type User = GDriver.Fragment\n}\n\nexport namespace GOrderListTicker {\n  export type Fragment = {\n    __typename?: 'Order'\n    id: string\n    createdAt: DateTime\n    isPaidWithCard: boolean\n    deliverAt?: DateTime | null\n    deliverAtWorst?: DateTime | null\n    deliveredAt?: DateTime | null\n    companyBranch: CompanyBranch\n    address: Address\n    customer: Customer\n    totalSum: TotalSum\n  }\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    id: string\n    name: string\n    oldOrderThreshold: number\n  }\n\n  export type Address = GAddress.Fragment\n\n  export type Customer = GCustomer.Fragment\n\n  export type TotalSum = {\n    __typename?: 'PriceConverted'\n    value: number\n  }\n}\n\nexport namespace GOrderDetailWare {\n  export type Fragment = {\n    __typename?: 'OrderRecipe'\n    id: string\n    recipe: Recipe\n    price: Price\n  }\n\n  export type Recipe = {\n    __typename?: 'Recipe'\n    id: string\n    code: string\n    nameLabel: string\n  }\n\n  export type Price = GPrice.Fragment\n}\n\nexport namespace GStatsPrice {\n  export type Fragment = {\n    __typename?: 'PriceConverted'\n    formattedValue: string\n  }\n}\n\nexport namespace GZone {\n  export type Fragment = {\n    __typename?: 'Zone'\n    id: string\n    name: string\n    enabled: boolean\n    priority: number\n    companyBranch: CompanyBranch\n    geoPolygon: GeoPolygon[]\n    priceRangeRules: PriceRangeRules[]\n    minimalOrderPrice: MinimalOrderPrice\n    zoneColor: ZoneColor\n  }\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    id: string\n    brand: Brand\n  }\n\n  export type Brand = {\n    __typename?: 'Company'\n    id: string\n  }\n\n  export type GeoPolygon = GGeoPoint.Fragment\n\n  export type PriceRangeRules = GZonePriceRange.Fragment\n\n  export type MinimalOrderPrice = GPrice.Fragment\n\n  export type ZoneColor = {\n    __typename?: 'ZoneColor'\n    id: string\n    code: string\n    color: string\n  }\n}\n\nexport namespace GZonePriceRange {\n  export type Fragment = {\n    __typename?: 'ZonePriceRangeRule'\n    toPrice: ToPrice\n    price: Price\n  }\n\n  export type ToPrice = GPrice.Fragment\n\n  export type Price = GPrice.Fragment\n}\n","var map = {\n\t\"./bg\": [\n\t\t508,\n\t\t3\n\t],\n\t\"./bg.js\": [\n\t\t508,\n\t\t3\n\t],\n\t\"./chs\": [\n\t\t509,\n\t\t4\n\t],\n\t\"./chs.js\": [\n\t\t509,\n\t\t4\n\t],\n\t\"./cs\": [\n\t\t510,\n\t\t5\n\t],\n\t\"./cs.js\": [\n\t\t510,\n\t\t5\n\t],\n\t\"./da-dk\": [\n\t\t511,\n\t\t6\n\t],\n\t\"./da-dk.js\": [\n\t\t511,\n\t\t6\n\t],\n\t\"./de\": [\n\t\t513,\n\t\t8\n\t],\n\t\"./de-ch\": [\n\t\t512,\n\t\t7\n\t],\n\t\"./de-ch.js\": [\n\t\t512,\n\t\t7\n\t],\n\t\"./de.js\": [\n\t\t513,\n\t\t8\n\t],\n\t\"./en-au\": [\n\t\t514,\n\t\t9\n\t],\n\t\"./en-au.js\": [\n\t\t514,\n\t\t9\n\t],\n\t\"./en-gb\": [\n\t\t515,\n\t\t10\n\t],\n\t\"./en-gb.js\": [\n\t\t515,\n\t\t10\n\t],\n\t\"./en-za\": [\n\t\t516,\n\t\t11\n\t],\n\t\"./en-za.js\": [\n\t\t516,\n\t\t11\n\t],\n\t\"./es\": [\n\t\t518,\n\t\t13\n\t],\n\t\"./es-es\": [\n\t\t517,\n\t\t12\n\t],\n\t\"./es-es.js\": [\n\t\t517,\n\t\t12\n\t],\n\t\"./es.js\": [\n\t\t518,\n\t\t13\n\t],\n\t\"./et\": [\n\t\t519,\n\t\t14\n\t],\n\t\"./et.js\": [\n\t\t519,\n\t\t14\n\t],\n\t\"./fi\": [\n\t\t520,\n\t\t15\n\t],\n\t\"./fi.js\": [\n\t\t520,\n\t\t15\n\t],\n\t\"./fr\": [\n\t\t523,\n\t\t18\n\t],\n\t\"./fr-ca\": [\n\t\t521,\n\t\t16\n\t],\n\t\"./fr-ca.js\": [\n\t\t521,\n\t\t16\n\t],\n\t\"./fr-ch\": [\n\t\t522,\n\t\t17\n\t],\n\t\"./fr-ch.js\": [\n\t\t522,\n\t\t17\n\t],\n\t\"./fr.js\": [\n\t\t523,\n\t\t18\n\t],\n\t\"./hu\": [\n\t\t524,\n\t\t19\n\t],\n\t\"./hu.js\": [\n\t\t524,\n\t\t19\n\t],\n\t\"./it\": [\n\t\t525,\n\t\t20\n\t],\n\t\"./it.js\": [\n\t\t525,\n\t\t20\n\t],\n\t\"./ja\": [\n\t\t526,\n\t\t21\n\t],\n\t\"./ja.js\": [\n\t\t526,\n\t\t21\n\t],\n\t\"./lv\": [\n\t\t527,\n\t\t22\n\t],\n\t\"./lv.js\": [\n\t\t527,\n\t\t22\n\t],\n\t\"./nl-be\": [\n\t\t528,\n\t\t23\n\t],\n\t\"./nl-be.js\": [\n\t\t528,\n\t\t23\n\t],\n\t\"./nl-nl\": [\n\t\t529,\n\t\t24\n\t],\n\t\"./nl-nl.js\": [\n\t\t529,\n\t\t24\n\t],\n\t\"./no\": [\n\t\t530,\n\t\t25\n\t],\n\t\"./no.js\": [\n\t\t530,\n\t\t25\n\t],\n\t\"./pl\": [\n\t\t531,\n\t\t26\n\t],\n\t\"./pl.js\": [\n\t\t531,\n\t\t26\n\t],\n\t\"./pt-br\": [\n\t\t532,\n\t\t27\n\t],\n\t\"./pt-br.js\": [\n\t\t532,\n\t\t27\n\t],\n\t\"./pt-pt\": [\n\t\t533,\n\t\t28\n\t],\n\t\"./pt-pt.js\": [\n\t\t533,\n\t\t28\n\t],\n\t\"./ru\": [\n\t\t535,\n\t\t30\n\t],\n\t\"./ru-ua\": [\n\t\t534,\n\t\t29\n\t],\n\t\"./ru-ua.js\": [\n\t\t534,\n\t\t29\n\t],\n\t\"./ru.js\": [\n\t\t535,\n\t\t30\n\t],\n\t\"./sk\": [\n\t\t536,\n\t\t31\n\t],\n\t\"./sk.js\": [\n\t\t536,\n\t\t31\n\t],\n\t\"./sl\": [\n\t\t537,\n\t\t32\n\t],\n\t\"./sl.js\": [\n\t\t537,\n\t\t32\n\t],\n\t\"./th\": [\n\t\t538,\n\t\t33\n\t],\n\t\"./th.js\": [\n\t\t538,\n\t\t33\n\t],\n\t\"./tr\": [\n\t\t539,\n\t\t34\n\t],\n\t\"./tr.js\": [\n\t\t539,\n\t\t34\n\t],\n\t\"./uk-ua\": [\n\t\t540,\n\t\t35\n\t],\n\t\"./uk-ua.js\": [\n\t\t540,\n\t\t35\n\t],\n\t\"./vi\": [\n\t\t541,\n\t\t36\n\t],\n\t\"./vi.js\": [\n\t\t541,\n\t\t36\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6069;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.ts\": [\n\t\t7481,\n\t\t42\n\t],\n\t\"./de/messages.ts\": [\n\t\t7482,\n\t\t43\n\t],\n\t\"./en-dev/messages.ts\": [\n\t\t7484,\n\t\t45\n\t],\n\t\"./en/messages.ts\": [\n\t\t7483,\n\t\t44\n\t],\n\t\"./pl/messages.ts\": [\n\t\t7485,\n\t\t46\n\t],\n\t\"./sk/messages.ts\": [\n\t\t7486,\n\t\t47\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6070;\nmodule.exports = webpackAsyncContext;","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface IProps {\n  iconName: string\n  color?: string\n  fontSize?: number\n  fontSizeUnit?: string\n}\n\nconst getFontSize = ({ fontSize = 1.5, fontSizeUnit = 'rem' }: IProps) => {\n  return fontSize + fontSizeUnit\n}\n\nconst IconSpanStyled = styled.span`\n  font-size: ${getFontSize} !important;\n  color: ${(props: IProps) => props.color};\n`\n\nexport const Icon: React.SFC<IProps> = ({\n  iconName,\n  color = Colors.white,\n  fontSize,\n  fontSizeUnit,\n}) =>\n  iconName ? (\n    <IconSpanStyled\n      color={color}\n      fontSize={fontSize}\n      fontSizeUnit={fontSizeUnit}\n      iconName={iconName}\n      className=\"material-icons\"\n    >\n      {iconName}\n    </IconSpanStyled>\n  ) : null\n","import React from 'react'\nimport { Route, RouteProps } from 'react-router'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { RedirectToLogin } from './RedirectToLogin'\n\ninterface ISecureRouteProps extends RouteProps {\n  redirect?: boolean\n  lazy?: boolean\n}\n\nexport const SecureRoute: React.SFC<ISecureRouteProps> = ({\n  redirect = true,\n  lazy = true,\n  ...props\n}) => {\n  const { auth } = useRoot()\n  if (!auth.isAuthenticatedUser) {\n    return redirect ? <RedirectToLogin /> : <NotFoundPage />\n  }\n  if (props.component && typeof props.component === 'object') {\n    const { component, path, exact } = props\n    return <LazyRoute path={path} exact={exact} component={component} />\n  }\n  return <Route {...props} />\n}\n","import { Trans } from '@lingui/react'\nimport { Dialog } from '@material-ui/core'\nimport { WarningTwoTone } from '@material-ui/icons'\nimport { observer } from 'mobx-react'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport connectionWarningSound from '../assets/connectionWarning.mp3'\nimport { isNetworkOffline } from '../helpers/offline'\nimport { Colors } from '../styling'\nimport { SoundPlayInterval } from './SoundPlayInterval'\n\nconst MessageStyled = styled.div`\n  padding: 1rem;\n  background-color: ${Colors.red} !important;\n  font-size: 2rem;\n\n  & svg {\n    position: relative;\n    top: 0.3rem;\n    padding-right: 0.5rem;\n  }\n`\n\nexport const ConnectionWarning = observer(() => {\n  return (\n    <>\n      <SoundPlayInterval\n        shouldPlay={isNetworkOffline()}\n        intervalSec={30}\n        soundUrl={connectionWarningSound}\n      />\n\n      <Dialog\n        open={isNetworkOffline()}\n        disableBackdropClick={true}\n        disableEscapeKeyDown={true}\n      >\n        <MessageStyled>\n          <WarningTwoTone fontSize=\"large\" />\n          <Trans>Internet connection is not available</Trans>\n        </MessageStyled>\n      </Dialog>\n    </>\n  )\n})\n","import React, { ErrorInfo } from 'react'\nimport {\n  DeveloperErrorBoundary,\n  ProductionErrorBoundary,\n} from 'react-error-guard'\n\nimport { reportRenderingError } from '../helpers/sentry'\n\ninterface IProps {\n  prod: boolean\n}\n\nexport const ErrorContainer: React.SFC<IProps> = ({\n  children,\n  prod = false,\n}) => {\n  if (prod) {\n    return (\n      <ProductionErrorBoundary\n        dispatchErrorReporting={(data: { error: Error; info: ErrorInfo }) => {\n          reportRenderingError(data.error, data.info)\n        }}\n      >\n        {children}\n      </ProductionErrorBoundary>\n    )\n  } else {\n    return <DeveloperErrorBoundary>{children}</DeveloperErrorBoundary>\n  }\n}\n","import React from 'react'\n\nimport { TUserModel } from '../models/UserModel'\nimport { WithRoot } from './RootProvider'\n\ninterface IProps {\n  render(user: TUserModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithUser: React.SFC<IProps> = ({ render, observe = true }) => (\n  <WithRoot observe={observe} children={root => render(root.user)} />\n)\n","import { Trans } from '@lingui/react'\nimport { Warning } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\n\nconst IconStyled = styled.div`\n  margin-top: 2rem;\n  color: #d39f40;\n  text-align: center;\n`\n\nexport const ErrorPage: React.SFC = props => (\n  <FullPageLayout\n    width={15}\n    pageTitle={i18n.t`Application error`}\n    useBackButton={true}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          We are sorry, but there is an internal error in the app. Our team was\n          notified and will fix this soon.\n        </Trans>\n        <IconStyled>\n          <Warning style={{ fontSize: '5rem' }} />\n        </IconStyled>\n      </h3>\n    </Card>\n  </FullPageLayout>\n)\n","import React from 'react'\nimport { Route } from 'react-router'\n\nimport { logRouting } from '../helpers/logger'\n\ninterface IProps {}\n\nexport const LogRoute: React.SFC<IProps> = props => (\n  <Route>\n    {({ location }) => {\n      logRouting('at %s', location.pathname)\n      return null\n    }}\n  </Route>\n)\n","import debug from 'debug'\nimport { when } from 'mobx'\nimport React from 'react'\nimport { Route } from 'react-router'\n\nimport { WithRoot } from '../atoms/WithRoot'\n\nconst log = debug('routing')\n\nexport const RedirectAfterLogin = () => (\n  <Route\n    children={({ location, history }) => (\n      <WithRoot\n        render={root => {\n          if (!root.auth.isAuthenticatedUser) {\n            const route = (location.state && location.state.origin) || '/'\n            const waitForAuthentication = () => root.auth.isAuthenticated\n            const redirectAfterLogin = () => {\n              history.replace(route)\n            }\n            when(waitForAuthentication, redirectAfterLogin)\n            log('will redirect to %s when auth', route)\n          }\n          return null\n        }}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { Redirect } from 'react-router'\n\nimport { WithRoot } from '../atoms/WithRoot'\nimport { RedirectToLogin } from './RedirectToLogin'\n\nexport const RedirectAfterLogout = () => (\n  <WithRoot\n    observe={false}\n    render={root => {\n      if (root.auth.isAuthenticated) {\n        root.auth.invalidate()\n        return <RedirectToLogin useOrigin={false} />\n      }\n      return <Redirect to=\"/\" />\n    }}\n  />\n)\n","import React from 'react'\nimport { Route, Switch } from 'react-router'\n\nimport Pacman from '../atoms/Pacman'\nimport { ErrorPage } from '../pages/ErrorPage'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { LogRoute } from './LogRoute'\nimport { RedirectAfterLogin } from './RedirectAfterLogin'\nimport { RedirectAfterLogout } from './RedirectAfterLogout'\nimport { SecureRoute } from './SecureRoute'\n\nexport const Routing = () => (\n  <React.Suspense fallback={<Pacman />}>\n    <LogRoute />\n    <RedirectAfterLogin />\n    <Switch>\n      <LazyRoute\n        path=\"/login\"\n        exact={true}\n        component={React.lazy(() =>\n          import('../segments/login/routes/PasswordLoginRoute'),\n        )}\n      />\n      <LazyRoute\n        path=\"/recovery/:token\"\n        exact={true}\n        component={React.lazy(() =>\n          import('../segments/login/routes/PasswordChangeRoute'),\n        )}\n      />\n      <LazyRoute\n        path=\"/register/:token\"\n        exact={true}\n        component={React.lazy(() =>\n          import('../segments/login/routes/PasswordChangeRoute'),\n        )}\n      />\n      <SecureRoute\n        path=\"/\"\n        exact={true}\n        component={React.lazy(() =>\n          import('../segments/main/pages/MainDashboardPage'),\n        )}\n      />\n      <SecureRoute\n        path=\"/order\"\n        component={React.lazy(() =>\n          import('../segments/order/routes/OrderRoutes'),\n        )}\n      />\n      <SecureRoute\n        path=\"/settings\"\n        component={React.lazy(() =>\n          import('../segments/settings/routes/SettingsRoutes'),\n        )}\n      />\n      <SecureRoute\n        path=\"/overview\"\n        component={React.lazy(() =>\n          import('../segments/overview/routes/OverviewRoutes'),\n        )}\n      />\n      <LazyRoute\n        path=\"/support\"\n        component={React.lazy(() =>\n          import('../segments/main/pages/SupportPage'),\n        )}\n      />\n      <Route path=\"/error\" component={ErrorPage} />\n      <Route path=\"/logout\" component={RedirectAfterLogout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </React.Suspense>\n)\n","import './App.css'\n\nimport { SnackbarProvider } from 'notistack'\nimport React from 'react'\n\nimport { ConnectionWarning } from './atoms/ConnectionWarning'\nimport { ErrorContainer } from './atoms/ErrorContainer'\nimport Pacman from './atoms/Pacman'\nimport { WithUser } from './atoms/WithUser'\nimport { Routing } from './routes/Routing'\n\nexport const App: React.SFC = () => (\n  <ErrorContainer prod={process.env.NODE_ENV === 'production'}>\n    <>\n      <ConnectionWarning />\n      <SnackbarProvider\n        maxSnack={3}\n        anchorOrigin={{ horizontal: 'right', vertical: 'top' }}\n      >\n        <WithUser render={user => (user.isReady ? <Routing /> : <Pacman />)} />\n      </SnackbarProvider>\n    </>\n  </ErrorContainer>\n)\n","import React from 'react'\nimport { Provider as GoodByeProvider } from 'react-goodbye'\nimport { BrowserRouter } from 'react-router-dom'\n\ninterface IProps {}\n\nexport const Router: React.SFC<IProps> = ({ children }) => (\n  <GoodByeProvider>\n    {({ handleGetUserConfirm }) => (\n      <BrowserRouter getUserConfirmation={handleGetUserConfirm}>\n        {children}\n      </BrowserRouter>\n    )}\n  </GoodByeProvider>\n)\n","import './enableDebug'\n\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport { App } from './App'\nimport { RootProvider } from './atoms/RootProvider'\nimport { Router } from './atoms/Router'\nimport { installSentry } from './helpers/sentry'\nimport { I18nManager } from './i18n'\n\nconst Main = () => (\n  <RootProvider>\n    <I18nManager>\n      <Router>\n        <App />\n      </Router>\n    </I18nManager>\n  </RootProvider>\n)\n\ninstallSentry(() => {\n  const rootElement = document.getElementById('root')\n  render(<Main />, rootElement)\n  // render(<StrictMode><Main /></StrictMode>, rootElement)\n})\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import React from 'react'\nimport { Route, RouteComponentProps, RouteProps } from 'react-router'\n\nimport Pacman from '../atoms/Pacman'\n\ninterface IProps extends Omit<RouteProps, 'render' | 'children'> {\n  component: React.ComponentType<RouteComponentProps> | React.ComponentType\n}\n\nexport const LazyRoute = ({ component, ...props }: IProps) => (\n  <Route\n    {...props}\n    render={routeProps => (\n      <React.Suspense fallback={<Pacman />}>\n        {React.createElement<RouteComponentProps | {}>(component, routeProps)}\n      </React.Suspense>\n    )}\n  />\n)\n","import Color from 'color'\n\nimport { RM } from './helpers/ramda'\n\nexport enum Colors {\n  yellow = '#FFDB2B',\n  pink = '#FF2B95',\n  blue = '#2441FF',\n  red = '#FF1C1C',\n  green = '#179B12',\n  turquoise = '#2BFFFF',\n  orange = '#FF862B',\n  violet = '#6D4F8C',\n  black = '#000000',\n  greyDarkest = '#080808',\n  greyDark = '#2C2C2C',\n  greyMiddle = '#939393',\n  greyLight = '#EDEDED',\n  white = '#FFFFFF',\n}\n\nexport const applyAlphaToColor = RM.curry((color: Colors, alphaValue: number) =>\n  Color(color)\n    .alpha(alphaValue)\n    .string(),\n)\n\nexport enum Radiuses {\n  Card = '0.5rem',\n  Button = '0.5rem',\n  TextComponent = '0.25rem',\n}\n\nexport enum Spacing {\n  MarginAroundFormComponents = '0.1rem',\n  Small = '0.25rem',\n  Middle = '0.5rem',\n  LayoutGridCellMargin = '0.5rem',\n  ButtonHeight = '3.4375rem',\n  DefaultInputWidth = 20,\n  DefaultSizeUnit = 'rem',\n}\n"],"sourceRoot":""}