{"version":3,"sources":["helpers/sentry.ts","graph/fragments/index.ts","atoms/WithRoot.tsx","atoms/Pacman.tsx","helpers/gps.ts","graph/errorHandler.ts","graph/types.ts","atoms/Icon.tsx","helpers/offline.ts","segments/menu/models/MenuBaseModel.ts","segments/menu/models/MenuRecipeModel.graphql.ts","atoms/SnackProvider.tsx","pages/NotFoundPage.tsx","routes/SecureRoute.tsx","atoms/PageTitle.tsx","segments/menu/organisms/CategoryList.graphql.ts","segments/zones/Zones.graphql.ts","models/BaseModel.ts","routes/LazyRoute.tsx","styling.ts","helpers/ramda.ts","helpers/logger.ts","models/AuthModel.ts","graph/fragments/GeoPointFragment.graphql.ts","graph/fragments/EmailFragment.graphql.ts","graph/fragments/PhoneFragment.graphql.ts","models/MapModel.ts","segments/menu/models/MenuStockModel.graphql.ts","routes/RedirectToLogin.tsx","molecules/TouchButton.tsx","atoms/Card.tsx","helpers/formats.ts","molecules/FullPageLayout.tsx","molecules/PageLayout.tsx","segments/order/models/OrderStateModel.graphql.ts","atoms/Loading.tsx","segments/order/molecules/OrderStateDeliver.graphql.ts","hooks/useEffectOnce.ts","hooks/useTimer.ts","segments/createorder/models/CreateOrderModel.graphql.ts","segments/businesshours/models/BusinessHoursModel.ts","segments/menu/models/MenuCategoryModel.ts","segments/menu/models/MenuRecipeModel.ts","segments/menu/organisms/RecipeForm.graphql.ts","segments/menu/organisms/RecipeList.graphql.ts","segments/menu/organisms/StockList.graphql.ts","segments/menu/graph/AllergenFragment.graphql.ts","segments/menu/graph/WareUnitFragment.graphql.ts","atoms/GridLayout.tsx","atoms/SoundPlayInterval.tsx","segments/overview/organisms/ClosureStatisticsControl.graphql.ts","segments/businesshours/organisms/SpecificBusinessHours.graphql.ts","segments/menu/organisms/CategoryForm.graphql.ts","hooks/useStateRef.ts","index.tsx","enableDebug.ts","App.tsx","atoms/ConnectionWarning.tsx","assets/connectionWarning.mp3","atoms/IntervalRender.tsx","context/RootContext.ts","graph/createClient.ts","graph/AuthLink.ts","graph/SubscriptionLink.ts","helpers/persistModel.ts","segments/login/models/LoginProviderModel.ts","segments/login/models/PasswordLoginModel.ts","models/AuthModel.graphql.ts","models/RootModel.ts","models/ConfigModel.ts","models/UserModel.ts","locale/moment.ts","../node_modules/moment/locale lazy /^/.*$/ groupOptions: {} namespace object","locale/numeral.ts","../node_modules/numeral/locales lazy /^/.*$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","models/UserModel.graphql.ts","graph/fragments/AddressFragment.graphql.ts","graph/fragments/CompanyBranchFragment.graphql.ts","graph/fragments/CustomerFragment.graphql.ts","graph/fragments/PriceFragment.graphql.ts","segments/createorder/models/CreateOrderModel.ts","helpers/faker.ts","config.ts","segments/order/models/OrderModel.ts","segments/order/models/OrderListModel.ts","segments/order/models/OrderMapModel.ts","segments/order/models/OrderMapModel.graphql.ts","segments/order/models/OrderStateModel.ts","segments/overview/models/StatisticsModel.ts","segments/settings/models/SettingsModel.ts","segments/businesshours/models/BusinessHoursModel.graphql.ts","segments/menu/models/MenuModel.ts","segments/settings/models/SettingsBaseModel.ts","segments/menu/models/MenuCategoryModel.graphql.ts","segments/menu/models/MenuStockModel.ts","segments/zones/models/ZoneModel.ts","segments/zones/models/ZoneMapModel.ts","segments/zones/models/ZoneModel.graphql.ts","atoms/ErrorContainer.tsx","i18n.tsx","routes/Routing.tsx","pages/ErrorPage.tsx","atoms/SoundControl.tsx","organisms/LogoutWidget.tsx","organisms/LogoutWidget.graphql.ts","molecules/HomeButton.tsx","routes/LogRoute.tsx","routes/RedirectAfterLogin.tsx","routes/RedirectAfterLogout.tsx","atoms/Router.tsx","atoms/ThemeProvider.tsx","atoms/UpdateHandler.tsx","graph/buildQuery.tsx","atoms/RootProvider.tsx"],"names":["_ravenJs","__webpack_require__","_verror","_config","_logger","cb","sentryDSN","appConfig","logSentry","default","config","environment","install","context","userId","setUserContext","error","info","isSetup","captureException","extra","errors","data","forEach","err","captureMessage","message","Error","VError","Object","assign","cause","_AddressFragment","_CompanyBranchFragment","_CustomerFragment","_EmailFragment","_GeoPointFragment","_PhoneFragment","_PriceFragment","_react","_RootProvider","render","observe","createElement","WithRoot","children","_interopRequireDefault","_reactSpinkit","_styling","noMargin","style","display","alignSelf","justifyContent","name","marginTop","color","Colors","orange","_geolib","gps","lat","Number","latitude","lng","longitude","latLng","center","metersRadius","pointsCount","Array","fill","map","_","idx","degree","computeDestinationPoint","points","bounds","getBounds","google","maps","LatLngBounds","minLat","minLng","maxLat","maxLng","_apolloLinkError","_sentry","errorHandler","graphQLErrors","operation","reportFailingQuery","query","operationName","variables","onError","__awaiter","result","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","WeekDayEnum","AllergenEnum","WarePriceTypeEnum","AvailabilityTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","OrderBillingTypeEnum","DeliveryTypeEnum","OrderRecipeStateEnum","LanguageEnum","OrderOnlineStateEnum","OrderOriginEnum","PaymentGateEnum","PaymentTypeEnum","OrderStateEnum","ZoneTypeEnum","ShiftUserStateEnum","WareUnitEnum","WareCategoryTypeEnum","WareRequirementEnum","MobilePlatformEnum","SettingTypeEnum","SubscriptionActionType","exports","_styledComponents","IconSpanStyled","span","withConfig","displayName","fontSize","fontSizeUnit","props","iconName","white","className","isOnline","change","oldValue","newValue","observable","box","navigator","onLine","window","addEventListener","set","get","_mobxStateTree","MenuBaseModel","BaseModel","named","volatile","filterInput","actions","self","[object Object]","input","views","branchId","getParent","settings","_graphqlTag","_fragments","MenuRecipeFragment","PriceFragment","MenuRecipeVisibilityMutation","MenuRecipeCreateMutation","MenuRecipeUpdateMutation","MenuRecipeDeleteMutation","_emotion","_notistack","successStyle","css","green","Spacing","InfoMessageFontSize","snackStyles","variantSuccess","variantInfo","variantError","red","variantWarning","SnackbarProvider","maxSnack","classes","anchorOrigin","horizontal","vertical","_PageTitle","_i18n","Fragment","PageTitle","title","i18n","_reactRouter","_NotFoundPage","_LazyRoute","_RedirectToLogin","_a","redirect","lazy","__rest","auth","useRoot","isAuthenticatedUser","RedirectToLogin","NotFoundPage","component","path","exact","LazyRoute","Route","_mobx","_mobxReactLite","_ramda","TitleStyled","h1","greyLight","observableTitles","array","autorun","lastTitle","from","pop","document","pageTitleSuffix","Component","push","this","prevProps","findIndex","RM","equals","splice","remove","_extends","Display","Observer","join","MenuCategoryListFragment","CategoryListQuery","ZoneFragment","GeoPointFragment","ZoneLocationQuery","ZoneBranchLocationQuery","ZoneColorsQuery","_debug","types","model","log","getPath","client","getEnv","apolloClient","root","getRoot","routeProps","Suspense","fallback","_Pacman","_color","applyAlphaToColor","curry","alphaValue","alpha","string","Radiuses","MarginAroundFormComponents","Small","Middle","LayoutGridCellMargin","ButtonHeight","DefaultInputWidth","DefaultSizeUnit","ButtonColumnWidthPx","_interopRequireWildcard","useColors","logMain","logDebug","logError","logAuth","logRouting","logPersistence","logBootstrap","logAccess","logGraph","logForm","logLang","logTest","console","_jsBase","_LoginProviderModel","_AuthModel","_BaseModel","AuthModel","optional","token","provider","LoginProviderModel","isAuthenticated","length","communicationToken","tokenForPasswordChange","canCommunicate","undefined","identifyUser","cache","reset","temporaryB64EncodedToken","invalidate","Base64","decode","password","mutate","mutation","PasswordChangeMutation","fetchPolicy","updateUserPassword","id","authenticate","preProcessSnapshot","snapshot","EmailFragment","PhoneFragment","_gps","GPSCzechia","MapModel","zoom","number","mapRef","isReady","gpsToLatLng","ref","getZoom","getCenter","_AllergenFragment","_WareUnitFragment","MenuStockItemFragment","WareUnitFragment","AllergenFragment","MenuStockCreateMutation","MenuStockUpdateMutation","MenuStockDeleteMutation","useOrigin","match","location","Redirect","to","pathname","state","origin","_Icon","applyAlpha","TouchButtonStyled","button","width","height","Button","ButtonLabelStyled","div","ButtonLabelNextToIconStyled","TouchButton","forwardRef","forwardedRef","iconColor","iconSize","greyMiddle","textNextToIcon","badge","text","Icon","Card","lighten","textColor","black","padding","stretchToParent","_dateFns","_fp","_cs","_numeral","currentLocale","formatLocale","formatWithOptions","locale","formatFullDate","formatDate","formatDateISO","format","formatTime","formatDateTime","price","time","isSameDay","Date","address","street","houseNumber","city","_PageLayout","PageLayout","layouts","i","x","y","w","h","getLayout","key","_GridLayout","_SoundControl","_LogoutWidget","_SecureRoute","_HomeButton","TopLeftButtonContainer","getPosition","scrollPageTitle","TopRightContainer","PageTitleContainer","SoundControlContainer","pageTitle","hideLogoutWidget","showSoundControl","useBackButton","backRoute","SoundControl","SecureRoute","LogoutWidget","GridLayout","HomeButton","goBack","_OrderStateDeliver","OrderStateCategoryFragment","UpdateOrderStateMutation","SendOrderNotificationMutation","SelectOrderDriverMutation","OrderDriverFragment","RemoveOrderDriverMutation","ChangeOrderToPickupMutation","_buildQuery","DriverFragment","OrderDriverSelection","QueryDriverSelection","buildQuery","effect","useEffect","_raf","_useStateRef","interval","enabled","getNow","now","nextTick","cancelTick","cancel","getLastUpdate","setLastUpdate","useStateRef","handleRef","useRef","onFrame","loop","onStop","current","ValidateLocationQuery","CreateOrderMutation","CancelOrderMutation","ESpecificHourMode","_formats","_BusinessHoursModel","byIdPredicate","complement","propEq","BusinessHoursModel","specificMode","enumeration","TIMESPAN","mode","values","companyBranch","specificDate","date","closed","FULLDAY","openAt","closeAt","closedNote","note","CreateSpecificBusinessHour","updateQueries","GSpecificBusinessHours","prev","mutationResult","businessHours","concat","businessHourId","DeleteSpecificBusinessHour","filter","_errorHandler","_CategoryList","_MenuBaseModel","_MenuCategoryModel","MenuCategoryModel","categoryId","offset","SortMenuCategoryMutation","Boolean","success","visible","MenuCategoryVisibility","optimisticResponse","updateRecipe","__typename","formValues","categoryType","wareCategoryType","getFormVariables","getQueryErrors","MenuCategoryCreateMutation","refetchQueries","MenuCategoryUpdateMutation","MenuCategoryDeleteMutation","nameLabel","internalNoteLabel","pictogram","recipes","prop","recipeId","_RecipeForm","_RecipeList","_MenuRecipeModel","MenuRecipeModel","categoryFilterId","recipeType","recipe","MenuRecipeListQuery","MenuRecipeDefaults","vats","currency","code","reduce","vatId","priceType","enum","currencyCode","internalNote","descriptionLabel","prices","keys","warePriceType","value","vat","sideDishCategories","sideDishes","wareCategories","categories","associatedRecipes","pick","ingredients","stockItem","quantity","parseFloat","replace","parseNumber","MenuRecipePriceFragment","MenuAssocRecipeFragment","MenuRecipeFormQuery","MenuRecipeFormAssocQuery","QueryMenuRecipeFormAssoc","QueryRecipeList","_MenuStockModel","MenuStockListQuery","QueryMenuStockList","_reactGridLayout","ReactGridLayout","WidthProvider","layout","cols","rowHeight","margin","autoSize","isDraggable","isResizable","compactType","measureBeforeMount","_reactSound","_IntervalRender","_WithRoot","intervalSec","soundUrl","shouldPlay","skipEnableChecks","user","soundEnabled","IntervalRender","isActive","nextLoop","url","playStatus","onFinishedPlaying","autoLoad","volume","soundVolume","CreateFinancialReport","SpecificBusinessHourFragment","QuerySpecificBusinessHours","MenuCategoryFormFragment","MenuCategoryFormQuery","initialState","setState","useState","_reactDom","_App","_Router","_ThemeProvider","_UpdateHandler","Main","ThemeProvider","RootProvider","I18nManager","UpdateHandler","Router","App","installSentry","rootElement","getElementById","localStorage","setItem","_ConnectionWarning","_ErrorContainer","_SnackProvider","_Routing","ErrorContainer","prod","ConnectionWarning","SnackProvider","Routing","_core","_icons","_react2","_connectionWarning","_offline","_SoundPlayInterval","MessageStyled","observer","SoundPlayInterval","isNetworkOffline","Dialog","open","disableBackdropClick","disableEscapeKeyDown","WarningTwoTone","Trans","module","p","nextTime","getNextTime","timer","executeTimer","clearTimeout","timeMs","differenceInMilliseconds","setTimeout","activate","deactivate","addSeconds","RootContext","createContext","_apolloCacheInmemory","InMemoryCache","dataIdFromObject","o","authLink","_AuthLink","retryLink","_apolloLinkRetry","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","_operation","offlineLink","_apolloLinkQueue","isNetworkOnline","close","createOfflineLink","errorLink","createErrorLink","httpLink","_apolloLinkBatchHttp","BatchHttpLink","uri","endpoint","credentials","subscriptionLink","_SubscriptionLink","_apolloClient","ApolloClient","link","_apolloLink","ApolloLink","split","isSubscriptionOperation","headers","computed","Authorization","forward","getContext","setContext","Observable","sub","subscribe","networkError","next","bind","complete","unsubscribe","cableUrl","cable","connectionParams","_actioncable","createConsumer","channelId","getChannelId","subscription","subscriptions","create","channel","connected","perform","_language","print","operationId","received","payload","more","_apolloUtilities","getOperationDefinitionOrDie","Math","round","random","toString","modelName","getType","stateKey","persistenceKey","writeState","_localforage","getItem","applySnapshot","getSnapshot","removeItem","onSnapshot","_PasswordLoginModel","passwordLogin","PasswordLoginModel","errorCode","errorMessage","hasFailed","username","getLoginUrl","fetch","response","Accept","json","status","setFailure","setSuccess","String","overrides","env","_ConfigModel","_UserModel","_CreateOrderModel","_OrderModel","_StatisticsModel","_SettingsModel","_ZoneModel","RootModel","UserModel","order","OrderModel","createOrder","CreateOrderModel","zone","ZoneModel","SettingsModel","ConfigModel","statistics","StatisticsModel","persistedModels","orderListPollIntervalSec","orderListSoundIntervalSec","_lodash","R","_ramda2","language","maybe","soundIgnore","isLoaded","branches","brands","access","permissions","canCancelOrders","canCreateOrder","branchesId","defaultBranch","filterBranches","predicate","canQuery","queryName","queries","has","toLowerCase","canMutate","mutationName","mutations","uniqBy","mapValues","fields","Set","compose","toLower","setLanguage","flow","changeLanguage","ignore","initUser","Promise","resolve","detectLanguage","UserModelBootstrapQuery","rawCode","applyUserData","applyUserAccess","userAccess","applyUserPermissions","userPermissions","finishBootstrap","queryUser","lang","_moment","updateLocale","./af","./af.js","./ar","./ar-dz","./ar-dz.js","./ar-kw","./ar-kw.js","./ar-ly","./ar-ly.js","./ar-ma","./ar-ma.js","./ar-sa","./ar-sa.js","./ar-tn","./ar-tn.js","./ar.js","./az","./az.js","./be","./be.js","./bg","./bg.js","./bm","./bm.js","./bn","./bn.js","./bo","./bo.js","./br","./br.js","./bs","./bs.js","./ca","./ca.js","./cs","./cs.js","./cv","./cv.js","./cy","./cy.js","./da","./da.js","./de","./de-at","./de-at.js","./de-ch","./de-ch.js","./de.js","./dv","./dv.js","./el","./el.js","./en-au","./en-au.js","./en-ca","./en-ca.js","./en-gb","./en-gb.js","./en-ie","./en-ie.js","./en-il","./en-il.js","./en-nz","./en-nz.js","./eo","./eo.js","./es","./es-do","./es-do.js","./es-us","./es-us.js","./es.js","./et","./et.js","./eu","./eu.js","./fa","./fa.js","./fi","./fi.js","./fo","./fo.js","./fr","./fr-ca","./fr-ca.js","./fr-ch","./fr-ch.js","./fr.js","./fy","./fy.js","./gd","./gd.js","./gl","./gl.js","./gom-latn","./gom-latn.js","./gu","./gu.js","./he","./he.js","./hi","./hi.js","./hr","./hr.js","./hu","./hu.js","./hy-am","./hy-am.js","./id","./id.js","./is","./is.js","./it","./it.js","./ja","./ja.js","./jv","./jv.js","./ka","./ka.js","./kk","./kk.js","./km","./km.js","./kn","./kn.js","./ko","./ko.js","./ky","./ky.js","./lb","./lb.js","./lo","./lo.js","./lt","./lt.js","./lv","./lv.js","./me","./me.js","./mi","./mi.js","./mk","./mk.js","./ml","./ml.js","./mn","./mn.js","./mr","./mr.js","./ms","./ms-my","./ms-my.js","./ms.js","./mt","./mt.js","./my","./my.js","./nb","./nb.js","./ne","./ne.js","./nl","./nl-be","./nl-be.js","./nl.js","./nn","./nn.js","./pa-in","./pa-in.js","./pl","./pl.js","./pt","./pt-br","./pt-br.js","./pt.js","./ro","./ro.js","./ru","./ru.js","./sd","./sd.js","./se","./se.js","./si","./si.js","./sk","./sk.js","./sl","./sl.js","./sq","./sq.js","./sr","./sr-cyrl","./sr-cyrl.js","./sr.js","./ss","./ss.js","./sv","./sv.js","./sw","./sw.js","./ta","./ta.js","./te","./te.js","./tet","./tet.js","./tg","./tg.js","./th","./th.js","./tl-ph","./tl-ph.js","./tlh","./tlh.js","./tr","./tr.js","./tzl","./tzl.js","./tzm","./tzm-latn","./tzm-latn.js","./tzm.js","./ug-cn","./ug-cn.js","./uk","./uk.js","./ur","./ur.js","./uz","./uz-latn","./uz-latn.js","./uz.js","./vi","./vi.js","./x-pseudo","./x-pseudo.js","./yo","./yo.js","./zh-cn","./zh-cn.js","./zh-hk","./zh-hk.js","./zh-tw","./zh-tw.js","webpackAsyncContext","req","ids","e","then","t","./chs","./chs.js","./da-dk","./da-dk.js","./en-za","./en-za.js","./es-es","./es-es.js","./nl-nl","./nl-nl.js","./no","./no.js","./pt-pt","./pt-pt.js","./ru-ua","./ru-ua.js","./uk-ua","./uk-ua.js","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","CompanyBranchFragment","AddressFragment","CustomerFragment","_types","_faker","getDefaultProps","currentBranch","find","deliveryType","isDelivery","Messenger","hasAddress","deliveryAddress","fakeAddress","clearGps","phone","call","phonePrefix","prefix","country","vamCustomer","isFound","firstName","lastName","email","lastOrder","defaults","fakeValues","hasOrder","orderId","cartRefreshKey","acceptOrderVariables","customer","emails","phones","resetModel","ensureOrder","callEventId","eventId","cancelOrder","resetOrder","validateLocation","notDeliveryLocation","resolveLocation","inDeliveryLocation","touched","faker","internet","phoneNumberFormat","lorem","sentence","slice","fallbackLanguage","supportedLanguages","_OrderListModel","_OrderMapModel","_OrderStateModel","list","OrderListModel","OrderMapModel","OrderStateModel","_reactScroll","collapsedCategories","Finished","branchesFilter","hasBranchFilter","isSingleBranchSelected","firstBranchId","orderMap","clear","panToOrder","extend","detailOpen","isOrderDetailOpen","isCategoryCollapsed","categoryCode","includes","delete","add","category","index","indexOf","setImmediate","scroller","scrollTo","smooth","containerId","absolute","observerOrderDetail","_MapModel","activeDriverId","OrderLocationQuery","panTo","OrderBranchLocationQuery","driverId","position","alert","deliverOrder","updateOrderState","OnWay","minutes","orderDriverId","_ClosureStatisticsControl","closureBranch","maybeNull","dateTimeFrom","startOfDay","dateTimeTo","endOfDay","branch","companyBranchId","_MenuModel","selectedBranchId","menu","MenuModel","head","queryProps","skip","otherVariables","_SpecificBusinessHours","_SettingsBaseModel","SettingsBaseModel","stock","MenuStockModel","_CategoryForm","_StockList","stockId","label","plu","allergens","wareUnit","allowNegative","_ZoneMapModel","ZoneMapModel","brandId","brand","branchFilterId","branchFilterPredicate","pathSatisfies","zoneFilterPredicate","panToBranch","brandBranches","createZone","onZoneCreate","generatePolygon","CreateZoneMutation","GZones","zones","zoneId","update","zoneColor","minimalOrderPrice","priceRangeRules","normalizePriceRangeRule","reject","pathEq","geoPolygon","currentZonePoints","UpdateZoneMutation","zoneIdx","updateZone","clearZonePoints","DestroyZoneMutation","changeZonePriority","oldIndex","newIndex","UpdateZonePriorityMutation","updateZonePriority","priority","numberOrNull","num","isNaN","range","toPrice","_Zones","_reactErrorGuard","ProductionErrorBoundary","dispatchErrorReporting","reportRenderingError","DeveloperErrorBoundary","languages","detector","LocaleResolver","NavigatorDetector","LanguageOnlyTransformer","getLocales","loc","all","catalog","load","loadCatalog","changeNumeralLocale","changeMomentLocale","setupI18n","useObserver","I18nProvider","Children","only","_ErrorPage","_LogRoute","_RedirectAfterLogin","_RedirectAfterLogout","PasswordLoginRoute","PasswordChangeRoute","MainDashboardPage","OrderRoutes","SettingsRoutes","OverviewRoutes","SupportPage","LogRoute","RedirectAfterLogin","Switch","ErrorPage","RedirectAfterLogout","_Card","_FullPageLayout","IconStyled","FullPageLayout","Warning","_TouchButton","SoundControlContainerStyled","SoundButtonStyled","playPreview","onClick","controlSound","_reactRouterDom","LogoutWidgetStyled","LoggedUserNameStyled","QueryLogoutWidget","renderLoading","data-testid","Link","getNameDisplay","HomeButtonStyled","history","route","waitForAuthentication","redirectAfterLogin","when","_reactGoodbye","Provider","handleGetUserConfirm","BrowserRouter","getUserConfirmation","theme","createMuiTheme","typography","useNextVariants","MuiThemeProvider","_tools","_useEffectOnce","_useTimer","UpdateSnack","onConfirm","onCancel","rest","endTime","autoHideDuration","useTimer","SECOND","remainingSeconds","formatDistanceStrict","Snackbar","disableWindowBlurListener","action","size","role","onClose","onRestart","reload","autoUpdateDelay","postponeTimeout","MINUTE","updateCheckInterval","HOUR","updateWorker","useObservable","updatePending","postponedAt","onMessage","useCallback","event","useEffectOnce","checkIntervalRef","serviceWorker","register","onInit","reg","setInterval","onUpdate","sw","init","removeEventListener","clearInterval","postMessage","cleanup","executeCleanup","fn","renderFragment","renderError","refetchOnConnectionLost","_reactApollo","Query","loading","_Loading","Loading","reportError","whenGoingOnline","refetch","_reactApolloHooks","useQuery","_hooks","_mobxReact","_RootContext","_createClient","_persistModel","_RootModel","setRoot","hasNetworkError","setNetworkError","useAsyncEffect","createApolloClient","rootModel","persistModel","SnackbarContent","ApolloProvider","useContext"],"mappings":"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EAC,UAAA,CACA,KACA,GAEAC,aAAA,CACA,KACA,GAEAC,UAAA,CACA,KACA,GAEAC,aAAA,CACA,KACA,GAEAC,UAAA,CACA,KACA,GAEAC,aAAA,CACA,KACA,GAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,gBAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,KAEAC,YAAA,CACA,KACA,IAEAC,eAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,KAEAC,OAAA,CACA,KACA,KAEAC,UAAA,CACA,KACA,KAEAC,OAAA,CACA,KACA,KAEAC,UAAA,CACA,KACA,KAEAC,OAAA,CACA,KACA,KAEAC,UAAA,CACA,KACA,KAEAC,OAAA,CACA,KACA,KAEAC,UAAA,CACA,KACA,KAEAC,OAAA,CACA,KACA,KAEAC,UAAA,CACA,KACA,KAEAC,QAAA,CACA,KACA,KAEAC,WAAA,CACA,KACA,KAEAC,OAAA,CACA,KACA,KAEAC,UAAA,CACA,KACA,KAEAC,OAAA,CACA,KACA,KAEAC,UAAA,CACA,KACA,KAEAC,UAAA,CACA,KACA,KAEAC,aAAA,CACA,KACA,KAEAC,QAAA,CACA,KACA,KAEAC,WAAA,CACA,KACA,KAEAC,OAAA,CACA,KACA,KAEAC,UAAA,CACA,KACA,KAEAC,QAAA,CACA,KACA,KAEAC,WAAA,CACA,KACA,KAEAC,QAAA,CACA,KACA,KAEAC,aAAA,CACA,KACA,KAEAC,gBAAA,CACA,KACA,KAEAC,WAAA,CACA,KACA,KAEAC,UAAA,CACA,KACA,KAEAC,aAAA,CACA,KACA,KAEAC,OAAA,CACA,KACA,KAEAC,UAAA,CACA,KACA,KAEAC,OAAA,CACA,KACA,KAEAC,UAAA,CACA,KACA,KAEAC,OAAA,CACA,KACA,KAEAC,YAAA,CACA,KACA,KAEAC,eAAA,CACA,KACA,KAEAC,UAAA,CACA,KACA,KAEAC,OAAA,CACA,KACA,KAEAC,UAAA,CACA,KACA,KAEAC,aAAA,CACA,KACA,KAEAC,gBAAA,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","file":"static/js/main.c93adec0.chunk.js","sourcesContent":["import { GraphQLError } from 'graphql'\nimport Raven from 'raven-js'\nimport { ErrorInfo } from 'react'\nimport { VError } from 'verror'\n\nimport { appConfig } from '../config'\nimport { logSentry } from './logger'\n\nexport const installSentry = (cb: () => void) => {\n  const { sentryDSN } = appConfig\n  if (sentryDSN) {\n    logSentry('enabled with DSN %s', sentryDSN)\n    Raven.config(sentryDSN, {\n      environment: process.env.REACT_APP_STAGE,\n    }).install()\n    Raven.context(cb)\n  } else {\n    cb()\n  }\n}\n\nexport const identifyUser = (userId: string | null) => {\n  Raven.setUserContext({\n    userId,\n  })\n}\n\nexport const reportRenderingError = (error: Error, info: ErrorInfo) => {\n  if (Raven.isSetup()) {\n    Raven.captureException(error, {\n      extra: info,\n    })\n  }\n}\n\nexport const reportFailingQuery = (\n  errors: ReadonlyArray<GraphQLError>,\n  data: object,\n) => {\n  errors.forEach(err => {\n    Raven.captureMessage(err.message, { extra: err })\n  })\n  Raven.captureException(new Error('Failed running a query'), { extra: data })\n}\n\nexport const reportError = (error: Error) => {\n  let extra = {}\n  if (error instanceof VError) {\n    extra = {\n      cause: VError.cause(error),\n      ...VError.info(error),\n    }\n  }\n  Raven.captureException(error, { extra })\n  return error\n}\n","export { AddressFragment } from './AddressFragment.graphql'\nexport { CompanyBranchFragment } from './CompanyBranchFragment.graphql'\nexport { CustomerFragment } from './CustomerFragment.graphql'\nexport { EmailFragment } from './EmailFragment.graphql'\nexport { GeoPointFragment } from './GeoPointFragment.graphql'\nexport { PhoneFragment } from './PhoneFragment.graphql'\nexport { PriceFragment } from './PriceFragment.graphql'\n","import React from 'react'\n\nimport { TRootModel } from '../models/RootModel'\nimport { WithRoot as RealWithRoot } from './RootProvider'\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.SFC<IProps> = ({ render, observe }) => (\n  <RealWithRoot children={render} observe={observe} />\n)\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nimport { Colors } from '../styling'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.SFC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n  >\n    <Spinner\n      name=\"pacman\"\n      style={noMargin ? {} : { marginTop: '45vh', color: Colors.orange }}\n    />\n  </div>\n)\n\nexport default Pacman\n","import { computeDestinationPoint, getBounds } from 'geolib'\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n\ninterface IGeneratePolygonInput {\n  center: GeoPoint\n  metersRadius?: number\n  pointsCount?: number\n}\n\nexport const generatePolygon = ({\n  center,\n  metersRadius = 1000,\n  pointsCount = 15,\n}: IGeneratePolygonInput) => {\n  return new Array(pointsCount).fill(null).map((_, idx) => {\n    const degree = 360 / pointsCount * idx\n    return computeDestinationPoint(center, metersRadius, degree)\n  })\n}\n\nexport const getBoundsOfPoints = (points: GeoPoint[]) => {\n  const bounds = getBounds(points)\n  if (!bounds) {\n    return null\n  }\n  return new google.maps.LatLngBounds(\n    {\n      lat: bounds.minLat,\n      lng: bounds.minLng,\n    },\n    {\n      lat: bounds.maxLat,\n      lng: bounds.maxLng,\n    },\n  )\n}\n","import { ErrorResponse, onError } from 'apollo-link-error'\n\nimport { reportFailingQuery } from '../helpers/sentry'\n\nexport const errorHandler = ({ graphQLErrors, operation }: ErrorResponse) => {\n  if (graphQLErrors) {\n    reportFailingQuery(graphQLErrors, {\n      query: operation.operationName,\n      variables: operation.variables,\n    })\n  }\n}\n\nexport const createErrorLink = () => onError(errorHandler)\n\nexport interface IQueryError extends Error {\n  showToUser: boolean\n}\n\nexport type TQueryErrors = IQueryError[] | null\n\n// tslint:disable-next-line:no-any\nexport const getQueryErrors = async (query: Promise<any>) => {\n  const result = await query\n  if (result && result.errors) {\n    return result.errors as IQueryError[]\n  }\n  return null\n}\n","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<string>\n\n  readonly includeOldFinished?: boolean\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: string\n\n  readonly closed?: Maybe<boolean>\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityCreate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityUpdate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment method used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<string>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: Maybe<number>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  FeAdmin = 'FE_ADMIN',\n  FeKitchen = 'FE_KITCHEN',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport namespace MPasswordChange {\n  export type Variables = {\n    readonly password: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateUserPassword: UpdateUserPassword\n  }\n\n  export type UpdateUserPassword = {\n    readonly __typename?: 'UserUpdatedPassword'\n\n    readonly id: string\n\n    readonly token: string\n  }\n}\n\nexport namespace GUserModelBootstrap {\n  export type Variables = {\n    readonly userId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly user: User\n\n    readonly userPermissions: UserPermissions\n  }\n\n  export type User = {\n    readonly __typename?: 'User'\n\n    readonly id: string\n\n    readonly language: Language\n\n    readonly branches: ReadonlyArray<Branches>\n  }\n\n  export type Language = {\n    readonly __typename?: 'Language'\n\n    readonly rawCode: string\n  }\n\n  export type Branches = GCompanyBranch.Fragment\n\n  export type UserPermissions = {\n    readonly __typename?: 'UserPermission'\n\n    readonly canCancelOrders: boolean\n\n    readonly canCreateOrder: boolean\n  }\n}\n\nexport namespace GAddressSuggest {\n  export type Variables = {\n    readonly search: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly suggest: ReadonlyArray<Suggest>\n  }\n\n  export type Suggest = {\n    readonly __typename?: 'JsonAddress'\n\n    readonly state: Maybe<string>\n\n    readonly city: Maybe<string>\n\n    readonly street: Maybe<string>\n\n    readonly houseNumber: Maybe<string>\n\n    readonly gps: Maybe<Gps>\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\n\nexport namespace GLogoutWidget {\n  export type Variables = {\n    readonly id: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly user: User\n  }\n\n  export type User = {\n    readonly __typename?: 'User'\n\n    readonly id: string\n\n    readonly firstName: Maybe<string>\n\n    readonly lastName: Maybe<string>\n  }\n}\n\nexport namespace GCreateSpecificBusinessHour {\n  export type Variables = {\n    readonly input: InputBusinessHourSpecificDateCreate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly result: Result\n  }\n\n  export type Result = GSpecificBusinessHour.Fragment\n}\n\nexport namespace GDeleteSpecificBusinessHour {\n  export type Variables = {\n    readonly id: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly result: Result\n  }\n\n  export type Result = {\n    readonly __typename?: 'BusinessHour'\n\n    readonly id: string\n  }\n}\n\nexport namespace GSpecificBusinessHours {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly businessHours: ReadonlyArray<BusinessHours>\n  }\n\n  export type BusinessHours = GSpecificBusinessHour.Fragment\n}\n\nexport namespace MAcceptOrder {\n  export type Variables = {\n    readonly orderId: string\n    readonly customer: InputCustomerCreate\n    readonly note?: Maybe<string>\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly finishOrder: FinishOrder\n  }\n\n  export type FinishOrder = {\n    readonly __typename?: 'FinishedOrder'\n\n    readonly userErrors: ReadonlyArray<string>\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  }\n}\n\nexport namespace MSetOrderDeliveryTime {\n  export type Variables = {\n    readonly orderId: string\n    readonly time: number\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly orderNotifyCustomer: OrderNotifyCustomer\n  }\n\n  export type OrderNotifyCustomer = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly deliverAt: Maybe<string>\n  }\n}\n\nexport namespace MUpdateOrder {\n  export type Variables = {\n    readonly orderId: string\n    readonly deliveryType: DeliveryTypeEnum\n    readonly gps: InputGeoPointCreate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateOrder: UpdateOrder\n  }\n\n  export type UpdateOrder = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  }\n}\n\nexport namespace GValidateLocation {\n  export type Variables = {\n    readonly branchId: string\n    readonly latitude: number\n    readonly longitude: number\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly resolveLocation: ResolveLocation\n  }\n\n  export type ResolveLocation = {\n    readonly __typename?: 'AddressResolvedLocation'\n\n    readonly inDeliveryLocation: boolean\n  }\n}\n\nexport namespace GCreateOrder {\n  export type Variables = {\n    readonly branchId: string\n    readonly deliveryType: DeliveryTypeEnum\n    readonly gps: InputGeoPointCreate\n    readonly callEventId?: Maybe<string>\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createOrder: CreateOrder\n  }\n\n  export type CreateOrder = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  }\n}\n\nexport namespace MCancelOrder {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly addOrderState: AddOrderState\n  }\n\n  export type AddOrderState = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  }\n}\n\nexport namespace GOrderVam {\n  export type Variables = {\n    readonly branchId: string\n    readonly phone: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly vamCustomer: VamCustomer\n  }\n\n  export type VamCustomer = {\n    readonly __typename?: 'CustomerInformation'\n\n    readonly isFound: boolean\n\n    readonly email: string\n\n    readonly firstName: string\n\n    readonly lastName: string\n\n    readonly lastOrder: Maybe<LastOrder>\n\n    readonly locations: ReadonlyArray<Locations>\n  }\n\n  export type LastOrder = {\n    readonly __typename?: 'Order'\n\n    readonly note: Maybe<string>\n  }\n\n  export type Locations = {\n    readonly __typename?: 'JsonAddress'\n\n    readonly street: Maybe<string>\n\n    readonly houseNumber: Maybe<string>\n\n    readonly city: Maybe<string>\n\n    readonly state: Maybe<string>\n\n    readonly gps: Maybe<Gps>\n  }\n\n  export type Gps = {\n    readonly __typename?: 'GeoPoint'\n\n    readonly latitude: number\n\n    readonly longitude: number\n  }\n}\n\nexport namespace GOrderPromo {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly promoCodes: ReadonlyArray<PromoCodes>\n  }\n\n  export type PromoCodes = {\n    readonly __typename?: 'PromoCode'\n\n    readonly id: string\n\n    readonly code: string\n  }\n}\n\nexport namespace MAddOrderPromo {\n  export type Variables = {\n    readonly orderId: string\n    readonly code: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly addOrderPromoCode: AddOrderPromoCode\n  }\n\n  export type AddOrderPromoCode = {\n    readonly __typename?: 'OrderWithErrors'\n\n    readonly userErrors: ReadonlyArray<string>\n  }\n}\n\nexport namespace MRemoveOrderPromo {\n  export type Variables = {\n    readonly orderId: string\n    readonly codeId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly removeOrderPromoCode: RemoveOrderPromoCode\n  }\n\n  export type RemoveOrderPromoCode = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  }\n}\n\nexport namespace GOrderMenu {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly orderMenu: ReadonlyArray<OrderMenu>\n  }\n\n  export type OrderMenu = GOrderMenuCategory.Fragment\n}\n\nexport namespace SOrderCall {\n  export type Variables = {}\n\n  export type Subscription = {\n    readonly __typename?: 'Subscription'\n\n    readonly call: Call\n  }\n\n  export type Call = {\n    readonly __typename?: 'UserCallingCustomerSubscription'\n\n    readonly eventId: string\n\n    readonly phone: string\n\n    readonly prefix: string\n\n    readonly isRinging: boolean\n  }\n}\n\nexport namespace GOrderCount {\n  export type Variables = {\n    readonly branchesId: ReadonlyArray<string>\n    readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly ordersCount: number\n  }\n}\n\nexport namespace SOrderCount {\n  export type Variables = {\n    readonly branchesId: ReadonlyArray<string>\n    readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n  }\n\n  export type Subscription = {\n    readonly __typename?: 'Subscription'\n\n    readonly updatedOrdersCount: UpdatedOrdersCount\n  }\n\n  export type UpdatedOrdersCount = {\n    readonly __typename?: 'OrderCountSubscription'\n\n    readonly ordersCount: number\n  }\n}\n\nexport namespace GSortMenuCategory {\n  export type Variables = {\n    readonly categoryId: string\n    readonly offset: number\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly success: boolean\n  }\n}\n\nexport namespace GMenuCategoryCreate {\n  export type Variables = {\n    readonly input: InputWareCategoryCreate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createWareCategory: CreateWareCategory\n  }\n\n  export type CreateWareCategory = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n  }\n}\n\nexport namespace GMenuCategoryUpdate {\n  export type Variables = {\n    readonly categoryId: string\n    readonly input: InputWareCategoryUpdate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateWareCategory: UpdateWareCategory\n  }\n\n  export type UpdateWareCategory = GMenuCategoryForm.Fragment\n}\n\nexport namespace GMenuCategoryVisibility {\n  export type Variables = {\n    readonly categoryId: string\n    readonly visible: boolean\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateWareCategory: UpdateWareCategory\n  }\n\n  export type UpdateWareCategory = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n\n    readonly visible: boolean\n  }\n}\n\nexport namespace GMenuCategoryDelete {\n  export type Variables = {\n    readonly categoryId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly destroyWareCategory: DestroyWareCategory\n  }\n\n  export type DestroyWareCategory = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n  }\n}\n\nexport namespace GMenuRecipeVisibility {\n  export type Variables = {\n    readonly recipeId: string\n    readonly visible: boolean\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateRecipe: UpdateRecipe\n  }\n\n  export type UpdateRecipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly visible: boolean\n  }\n}\n\nexport namespace GMenuRecipeCreate {\n  export type Variables = {\n    readonly recipe: InputRecipeCreate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createRecipe: CreateRecipe\n  }\n\n  export type CreateRecipe = GMenuRecipe.Fragment\n}\n\nexport namespace GMenuRecipeUpdate {\n  export type Variables = {\n    readonly recipeId: string\n    readonly recipe: InputRecipeUpdate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateRecipe: UpdateRecipe\n  }\n\n  export type UpdateRecipe = GMenuRecipe.Fragment\n}\n\nexport namespace GMenuRecipeDelete {\n  export type Variables = {\n    readonly recipeId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly destroyRecipe: DestroyRecipe\n  }\n\n  export type DestroyRecipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n  }\n}\n\nexport namespace GMenuStockCreate {\n  export type Variables = {\n    readonly stockItem: InputStockItemCreate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createStockItem: CreateStockItem\n  }\n\n  export type CreateStockItem = GMenuStockItem.Fragment\n}\n\nexport namespace GMenuStockUpdate {\n  export type Variables = {\n    readonly stockId: string\n    readonly stockItem: InputStockItemUpdate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateStockItem: UpdateStockItem\n  }\n\n  export type UpdateStockItem = GMenuStockItem.Fragment\n}\n\nexport namespace GMenuStockDelete {\n  export type Variables = {\n    readonly stockId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly destroyStockItem: DestroyStockItem\n  }\n\n  export type DestroyStockItem = {\n    readonly __typename?: 'StockItem'\n\n    readonly id: string\n  }\n}\n\nexport namespace GAllergens {\n  export type Variables = {}\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly allergens: ReadonlyArray<Allergens>\n  }\n\n  export type Allergens = GAllergen.Fragment\n}\n\nexport namespace GCurrencies {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly currencies: ReadonlyArray<Currencies>\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type Currencies = {\n    readonly __typename?: 'Currency'\n\n    readonly enum: CurrencyEnum\n\n    readonly code: string\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly address: Address\n  }\n\n  export type Address = {\n    readonly __typename?: 'Address'\n\n    readonly country: Maybe<Country>\n  }\n\n  export type Country = {\n    readonly __typename?: 'Country'\n\n    readonly currency: Currency\n  }\n\n  export type Currency = {\n    readonly __typename?: 'Currency'\n\n    readonly enum: CurrencyEnum\n  }\n}\n\nexport namespace GVats {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly vats: ReadonlyArray<Vats>\n  }\n\n  export type Vats = {\n    readonly __typename?: 'Vat'\n\n    readonly id: string\n\n    readonly vat: number\n  }\n}\n\nexport namespace GWareUnits {\n  export type Variables = {}\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly wareUnits: ReadonlyArray<WareUnits>\n  }\n\n  export type WareUnits = {\n    readonly __typename?: 'WareUnit'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly enum: WareUnitEnum\n  }\n}\n\nexport namespace QMenuCategoryFilter {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly categories: ReadonlyArray<Categories>\n  }\n\n  export type Categories = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly countRecipes: number\n\n    readonly categoryType: CategoryType\n  }\n\n  export type CategoryType = {\n    readonly __typename?: 'WareCategoryType'\n\n    readonly enum: WareCategoryTypeEnum\n  }\n}\n\nexport namespace GMenuCategoryForm {\n  export type Variables = {\n    readonly categoryId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly wareCategory: WareCategory\n  }\n\n  export type WareCategory = GMenuCategoryForm.Fragment\n}\n\nexport namespace GCategoryList {\n  export type Variables = {\n    readonly branchId: string\n    readonly categoryType: WareCategoryTypeEnum\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly categories: ReadonlyArray<Categories>\n  }\n\n  export type Categories = GMenuCategoryListItem.Fragment\n}\n\nexport namespace GMenuRecipeForm {\n  export type Variables = {\n    readonly recipeId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly recipe: Recipe\n  }\n\n  export type Recipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly image: Maybe<string>\n\n    readonly nameLabel: string\n\n    readonly internalNote: Maybe<string>\n\n    readonly descriptionLabel: Maybe<string>\n\n    readonly visible: boolean\n\n    readonly recipeType: RecipeType\n\n    readonly sourcePrices: ReadonlyArray<SourcePrices>\n\n    readonly sideDishes: ReadonlyArray<SideDishes>\n\n    readonly categories: ReadonlyArray<Categories>\n\n    readonly sourceAssociatedRecipes: ReadonlyArray<SourceAssociatedRecipes>\n\n    readonly sourceIngredients: ReadonlyArray<SourceIngredients>\n  }\n\n  export type RecipeType = {\n    readonly __typename?: 'WareCategoryType'\n\n    readonly enum: WareCategoryTypeEnum\n  }\n\n  export type SourcePrices = GMenuRecipePrice.Fragment\n\n  export type SideDishes = GMenuCategoryListItem.Fragment\n\n  export type Categories = GMenuCategoryListItem.Fragment\n\n  export type SourceAssociatedRecipes = {\n    readonly __typename?: 'RecipeRelation'\n\n    readonly id: string\n\n    readonly priceType: PriceType\n\n    readonly recipe: _Recipe\n  }\n\n  export type PriceType = {\n    readonly __typename?: 'WarePriceType'\n\n    readonly enum: WarePriceTypeEnum\n  }\n\n  export type _Recipe = GMenuAssocRecipe.Fragment\n\n  export type SourceIngredients = {\n    readonly __typename?: 'Ingredient'\n\n    readonly id: string\n\n    readonly quantity: number\n\n    readonly stockItem: StockItem\n  }\n\n  export type StockItem = {\n    readonly __typename?: 'StockItem'\n\n    readonly id: string\n\n    readonly label: string\n\n    readonly wareUnit: WareUnit\n\n    readonly allergens: ReadonlyArray<Allergens>\n  }\n\n  export type WareUnit = {\n    readonly __typename?: 'WareUnit'\n\n    readonly id: string\n\n    readonly code: string\n  }\n\n  export type Allergens = {\n    readonly __typename?: 'Allergen'\n\n    readonly id: string\n\n    readonly enum: AllergenEnum\n  }\n}\n\nexport namespace GMenuRecipeFormAssoc {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly recipes: ReadonlyArray<Recipes>\n  }\n\n  export type Recipes = GMenuAssocRecipe.Fragment\n}\n\nexport namespace GMenuRecipeDefaults {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly vats: ReadonlyArray<Vats>\n\n    readonly currency: Currency\n  }\n\n  export type Vats = {\n    readonly __typename?: 'VatPriceType'\n\n    readonly vatId: string\n\n    readonly priceType: PriceType\n  }\n\n  export type PriceType = {\n    readonly __typename?: 'WarePriceType'\n\n    readonly enum: WarePriceTypeEnum\n  }\n\n  export type Currency = {\n    readonly __typename?: 'Currency'\n\n    readonly code: string\n  }\n}\n\nexport namespace GMenuRecipeList {\n  export type Variables = {\n    readonly branchId: string\n    readonly categoryId?: Maybe<string>\n    readonly categoryType?: Maybe<WareCategoryTypeEnum>\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly recipes: ReadonlyArray<Recipes>\n  }\n\n  export type Recipes = GMenuRecipe.Fragment\n}\n\nexport namespace GMenuStockDeposit {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly stockItems: ReadonlyArray<StockItems>\n  }\n\n  export type StockItems = {\n    readonly __typename?: 'StockItem'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly plu: Maybe<string>\n\n    readonly nameLabel: string\n\n    readonly note: string\n\n    readonly quantity: number\n\n    readonly wareUnit: WareUnit\n  }\n\n  export type WareUnit = GWareUnit.Fragment\n}\n\nexport namespace GChangeMenuStockQuantity {\n  export type Variables = {\n    readonly stockItem: string\n    readonly quantityChange: number\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly changeAmountStockItem: ChangeAmountStockItem\n  }\n\n  export type ChangeAmountStockItem = {\n    readonly __typename?: 'StockItem'\n\n    readonly id: string\n\n    readonly quantity: number\n  }\n}\n\nexport namespace GMenuStockForm {\n  export type Variables = {\n    readonly stockId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly stockItem: StockItem\n  }\n\n  export type StockItem = {\n    readonly __typename?: 'StockItem'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly plu: Maybe<string>\n\n    readonly note: string\n\n    readonly nameLabel: string\n\n    readonly allowNegative: FieldStateEnum\n\n    readonly wareUnit: WareUnit\n\n    readonly allergens: ReadonlyArray<Allergens>\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type WareUnit = GWareUnit.Fragment\n\n  export type Allergens = GAllergen.Fragment\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly allowNegative: boolean\n  }\n}\n\nexport namespace GMenuStockDefaults {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly allowNegative: boolean\n  }\n}\n\nexport namespace GMenuStockList {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly stockItems: ReadonlyArray<StockItems>\n  }\n\n  export type StockItems = GMenuStockItem.Fragment\n}\n\nexport namespace GStockRecipes {\n  export type Variables = {\n    readonly stockId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly stockItem: StockItem\n  }\n\n  export type StockItem = {\n    readonly __typename?: 'StockItem'\n\n    readonly id: string\n\n    readonly ingredients: ReadonlyArray<Ingredients>\n  }\n\n  export type Ingredients = {\n    readonly __typename?: 'Ingredient'\n\n    readonly id: string\n\n    readonly recipe: Recipe\n  }\n\n  export type Recipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly descriptionLabel: Maybe<string>\n\n    readonly recipeType: RecipeType\n  }\n\n  export type RecipeType = {\n    readonly __typename?: 'WareCategoryType'\n\n    readonly enum: WareCategoryTypeEnum\n  }\n}\n\nexport namespace GOrderBranchLocation {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly gps: Gps\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\n\nexport namespace GOrderLocation {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly gps: Maybe<Gps>\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\n\nexport namespace GUpdateOrderState {\n  export type Variables = {\n    readonly orderId: string\n    readonly state: OrderStateEnum\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly addOrderState: AddOrderState\n  }\n\n  export type AddOrderState = {\n    readonly __typename?: 'Order'\n\n    readonly orderTiming: ReadonlyArray<OrderTiming>\n  } & GOrderStateCategory.Fragment\n\n  export type OrderTiming = {\n    readonly __typename?: 'OrderStateCategoryRelation'\n\n    readonly createdAt: string\n\n    readonly orderStateCategory: OrderStateCategoryEnum\n  }\n}\n\nexport namespace GSendOrderNotification {\n  export type Variables = {\n    readonly orderId: string\n    readonly minutes: number\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly orderNotifyCustomer: OrderNotifyCustomer\n  }\n\n  export type OrderNotifyCustomer = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly deliverAt: Maybe<string>\n  }\n}\n\nexport namespace GSelectOrderDriver {\n  export type Variables = {\n    readonly driverId: string\n    readonly orderId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createUserDeliveringOrder: CreateUserDeliveringOrder\n  }\n\n  export type CreateUserDeliveringOrder = {\n    readonly __typename?: 'UserDeliveringOrder'\n\n    readonly order: Order\n  }\n\n  export type Order = GOrderDriver.Fragment\n}\n\nexport namespace GRemoveOrderDriver {\n  export type Variables = {\n    readonly orderDriverId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly destroyUserDeliveringOrder: DestroyUserDeliveringOrder\n  }\n\n  export type DestroyUserDeliveringOrder = {\n    readonly __typename?: 'UserDeliveringOrder'\n\n    readonly order: Order\n  }\n\n  export type Order = GOrderDriver.Fragment\n}\n\nexport namespace MChangeOrderToPickup {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateOrderDeliveryToPickup: UpdateOrderDeliveryToPickup\n  }\n\n  export type UpdateOrderDeliveryToPickup = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly deliveryType: Maybe<DeliveryType>\n  }\n\n  export type DeliveryType = {\n    readonly __typename?: 'DeliveryType'\n\n    readonly enum: DeliveryTypeEnum\n  }\n}\n\nexport namespace QOrderMapDeliveries {\n  export type Variables = {\n    readonly branches: ReadonlyArray<string>\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly deliveries: ReadonlyArray<Deliveries>\n  }\n\n  export type Deliveries = GOrderMapDelivery.Fragment\n}\n\nexport namespace SOrderMapDeliveries {\n  export type Variables = {\n    readonly branches: ReadonlyArray<string>\n  }\n\n  export type Subscription = {\n    readonly __typename?: 'Subscription'\n\n    readonly update: Update\n  }\n\n  export type Update = {\n    readonly __typename?: 'TransportationDeviceUserUpdateSubscription'\n\n    readonly actionType: SubscriptionActionType\n\n    readonly device: Maybe<Device>\n  }\n\n  export type Device = {\n    readonly __typename?: 'TransportationDeviceUser'\n\n    readonly user: User\n  } & GOrderMapDevice.Fragment\n\n  export type User = GOrderMapDriver.Fragment\n}\n\nexport namespace GOrderDriverSelection {\n  export type Variables = {\n    readonly orderId: string\n    readonly branchId: ReadonlyArray<string>\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n\n    readonly drivers: ReadonlyArray<Drivers>\n  }\n\n  export type Order = GOrderDriver.Fragment\n\n  export type Drivers = GDriver.Fragment\n}\n\nexport namespace GBranchDeliveryTime {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly defaultDeliveryTime: number\n  }\n}\n\nexport namespace MUpdateBranchDeliveryTime {\n  export type Variables = {\n    readonly branchId: string\n    readonly time: number\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateDefaultOrderProcessTime: UpdateDefaultOrderProcessTime\n  }\n\n  export type UpdateDefaultOrderProcessTime = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly defaultDeliveryTime: number\n  }\n}\n\nexport namespace GOrderDetail {\n  export type Variables = {\n    readonly id: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly createdAt: string\n\n    readonly deliverAt: Maybe<string>\n\n    readonly companyBranch: CompanyBranch\n\n    readonly customer: Customer\n\n    readonly customerOrdersCountCurrent: number\n\n    readonly customerOrdersCountTotal: number\n\n    readonly note: Maybe<string>\n\n    readonly previousNote: Maybe<string>\n\n    readonly allAppliedRules: ReadonlyArray<string>\n\n    readonly items: ReadonlyArray<Items>\n\n    readonly totalSum: TotalSum\n\n    readonly transportFee: TransportFee\n\n    readonly coverPrice: CoverPrice\n\n    readonly totalDiscount: TotalDiscount\n\n    readonly orderTiming: ReadonlyArray<OrderTiming>\n  } & GOrderDriver.Fragment\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n  }\n\n  export type Customer = {\n    readonly __typename?: 'JsonCustomer'\n\n    readonly emails: ReadonlyArray<Emails>\n\n    readonly phones: ReadonlyArray<Phones>\n  }\n\n  export type Emails = GEmail.Fragment\n\n  export type Phones = GPhone.Fragment\n\n  export type Items = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly sidedishes: ReadonlyArray<Sidedishes>\n  } & GOrderDetailWare.Fragment\n\n  export type Sidedishes = GOrderDetailWare.Fragment\n\n  export type TotalSum = GPrice.Fragment\n\n  export type TransportFee = GPrice.Fragment\n\n  export type CoverPrice = GPrice.Fragment\n\n  export type TotalDiscount = GPrice.Fragment\n\n  export type OrderTiming = {\n    readonly __typename?: 'OrderStateCategoryRelation'\n\n    readonly createdAt: string\n\n    readonly orderStateCategory: OrderStateCategoryEnum\n  }\n}\n\nexport namespace GOrderList {\n  export type Variables = {\n    readonly branches?: Maybe<ReadonlyArray<string>>\n    readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n    readonly includeOldFinished?: Maybe<boolean>\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly orders: ReadonlyArray<Orders>\n\n    readonly orderStateCategories: ReadonlyArray<OrderStateCategories>\n  }\n\n  export type Orders = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  } & (GOrderStateCategory.Fragment &\n    GOrderListTicker.Fragment &\n    GOrderMarker.Fragment)\n\n  export type OrderStateCategories = {\n    readonly __typename?: 'OrderStateCategory'\n\n    readonly code: string\n\n    readonly enum: OrderStateCategoryEnum\n  }\n}\n\nexport namespace SOrderList {\n  export type Variables = {\n    readonly branches?: Maybe<ReadonlyArray<string>>\n    readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n  }\n\n  export type Subscription = {\n    readonly __typename?: 'Subscription'\n\n    readonly updatedOrder: UpdatedOrder\n  }\n\n  export type UpdatedOrder = {\n    readonly __typename?: 'OrderUpdateSubscription'\n\n    readonly order: Maybe<Order>\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  } & (GOrderStateCategory.Fragment &\n    GOrderListTicker.Fragment &\n    GOrderMarker.Fragment)\n}\n\nexport namespace GOrderState {\n  export type Variables = {\n    readonly orderId: string\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly deliveryType: Maybe<DeliveryType>\n\n    readonly orderOrigin: OrderOrigin\n  } & GOrderStateCategory.Fragment\n\n  export type DeliveryType = {\n    readonly __typename?: 'DeliveryType'\n\n    readonly enum: DeliveryTypeEnum\n  }\n\n  export type OrderOrigin = {\n    readonly __typename?: 'OrderOrigin'\n\n    readonly enum: OrderOriginEnum\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly allowedCategories: ReadonlyArray<OrderStateCategoryEnum>\n  }\n}\n\nexport namespace GClosureHistory {\n  export type Variables = {\n    readonly branchId: string\n    readonly dateFrom: string\n    readonly dateTo: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly financialReports: ReadonlyArray<FinancialReports>\n  }\n\n  export type FinancialReports = {\n    readonly __typename?: 'FinancialReport'\n\n    readonly id: string\n\n    readonly reportDatetime: string\n\n    readonly reportSequence: number\n  }\n}\n\nexport namespace GClosureReportQuery {\n  export type Variables = {\n    readonly branchId: string\n    readonly reportId: string\n    readonly showReport: boolean\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly lastReport: LastReport\n\n    readonly report: Maybe<Report>\n  }\n\n  export type LastReport = {\n    readonly __typename?: 'FinancialReport'\n\n    readonly plainData: string\n\n    readonly reportDatetime: string\n\n    readonly reportSequence: number\n  }\n\n  export type Report = {\n    readonly __typename?: 'FinancialReport'\n\n    readonly plainData: string\n\n    readonly reportDatetime: string\n\n    readonly reportSequence: number\n  }\n}\n\nexport namespace GCreateFinancialReport {\n  export type Variables = {\n    readonly companyBranchId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly result: Result\n  }\n\n  export type Result = {\n    readonly __typename?: 'FinancialReport'\n\n    readonly id: string\n  }\n}\n\nexport namespace GDailyStatistics {\n  export type Variables = {\n    readonly branches: ReadonlyArray<string>\n    readonly dateTimeFrom: string\n    readonly dateTimeTo: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly stats: Stats\n  }\n\n  export type Stats = {\n    readonly __typename?: 'Statistics'\n\n    readonly categoryStatisticsPlain: string\n\n    readonly dailyStatisticsPlain: string\n\n    readonly deliveryStatisticsPlain: string\n\n    readonly driversStatisticsPlain: string\n  }\n}\n\nexport namespace GOrdersStatisticsList {\n  export type Variables = {\n    readonly branches: ReadonlyArray<string>\n    readonly dateTimeFrom: string\n    readonly dateTimeTo: string\n    readonly pagination: InputPaginationParams\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly stats: Stats\n  }\n\n  export type Stats = {\n    readonly __typename?: 'Statistics'\n\n    readonly orders: Orders\n  }\n\n  export type Orders = {\n    readonly __typename?: 'StatisticsOrders'\n\n    readonly list: ReadonlyArray<List>\n  }\n\n  export type List = GOrderListTicker.Fragment & GOrderStateCategory.Fragment\n}\n\nexport namespace GOrdersStatistics {\n  export type Variables = {\n    readonly branches: ReadonlyArray<string>\n    readonly dateTimeFrom: string\n    readonly dateTimeTo: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly stats: Stats\n  }\n\n  export type Stats = {\n    readonly __typename?: 'Statistics'\n\n    readonly finishedOrders: FinishedOrders\n\n    readonly orderStatisticsPlain: string\n  }\n\n  export type FinishedOrders = {\n    readonly __typename?: 'StatisticsOrders'\n\n    readonly fees: Fees\n\n    readonly onlinePayments: OnlinePayments\n\n    readonly total: Total\n\n    readonly finishedCount: number\n\n    readonly cancelledCount: number\n  }\n\n  export type Fees = GStatsPrice.Fragment\n\n  export type OnlinePayments = GStatsPrice.Fragment\n\n  export type Total = GStatsPrice.Fragment\n}\n\nexport namespace GCreateZone {\n  export type Variables = {\n    readonly branchId: string\n    readonly points?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createZone: CreateZone\n  }\n\n  export type CreateZone = GZone.Fragment\n}\n\nexport namespace GUpdateZone {\n  export type Variables = {\n    readonly zoneId: string\n    readonly update: InputZoneUpdate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateZone: UpdateZone\n  }\n\n  export type UpdateZone = GZone.Fragment\n}\n\nexport namespace GUpdateZonePriority {\n  export type Variables = {\n    readonly zoneId: string\n    readonly offset: number\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateZonePriority: ReadonlyArray<UpdateZonePriority>\n  }\n\n  export type UpdateZonePriority = {\n    readonly __typename?: 'Zone'\n\n    readonly id: string\n\n    readonly priority: number\n  }\n}\n\nexport namespace GDestroyZone {\n  export type Variables = {\n    readonly zoneId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly destroyZone: DestroyZone\n  }\n\n  export type DestroyZone = {\n    readonly __typename?: 'Zone'\n\n    readonly id: string\n  }\n}\n\nexport namespace GZones {\n  export type Variables = {\n    readonly branchesId: ReadonlyArray<string>\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly zones: ReadonlyArray<Zones>\n  }\n\n  export type Zones = GZone.Fragment\n}\n\nexport namespace GZoneLocation {\n  export type Variables = {\n    readonly zoneId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly zone: Zone\n  }\n\n  export type Zone = {\n    readonly __typename?: 'Zone'\n\n    readonly id: string\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly gps: Gps\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\n\nexport namespace GZoneBranchLocation {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly gps: Gps\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\n\nexport namespace GZoneColors {\n  export type Variables = {}\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly zoneColors: ReadonlyArray<ZoneColors>\n  }\n\n  export type ZoneColors = {\n    readonly __typename?: 'ZoneColor'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly color: string\n  }\n}\n\nexport namespace GAddress {\n  export type Fragment = {\n    readonly __typename?: 'JsonAddress'\n\n    readonly state: Maybe<string>\n\n    readonly city: Maybe<string>\n\n    readonly street: Maybe<string>\n\n    readonly houseNumber: Maybe<string>\n  }\n}\n\nexport namespace GCompanyBranch {\n  export type Fragment = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly address: Address\n\n    readonly gps: Gps\n\n    readonly brand: Brand\n  }\n\n  export type Address = {\n    readonly __typename?: 'Address'\n\n    readonly country: Maybe<Country>\n  }\n\n  export type Country = {\n    readonly __typename?: 'Country'\n\n    readonly phonePrefix: string\n  }\n\n  export type Gps = GGeoPoint.Fragment\n\n  export type Brand = {\n    readonly __typename?: 'Company'\n\n    readonly id: string\n\n    readonly name: string\n  }\n}\n\nexport namespace GCustomer {\n  export type Fragment = {\n    readonly __typename?: 'JsonCustomer'\n\n    readonly firstName: Maybe<string>\n\n    readonly lastName: Maybe<string>\n\n    readonly defaultEmail: Maybe<DefaultEmail>\n\n    readonly defaultPhone: Maybe<DefaultPhone>\n  }\n\n  export type DefaultEmail = GEmail.Fragment\n\n  export type DefaultPhone = GPhone.Fragment\n}\n\nexport namespace GEmail {\n  export type Fragment = {\n    readonly __typename?: 'Email'\n\n    readonly email: string\n\n    readonly description: Maybe<string>\n\n    readonly default: boolean\n  }\n}\n\nexport namespace GGeoPoint {\n  export type Fragment = {\n    readonly __typename?: 'GeoPoint'\n\n    readonly latitude: number\n\n    readonly longitude: number\n  }\n}\n\nexport namespace GPhone {\n  export type Fragment = {\n    readonly __typename?: 'Phone'\n\n    readonly phone: string\n\n    readonly description: Maybe<string>\n\n    readonly default: boolean\n  }\n}\n\nexport namespace GPrice {\n  export type Fragment = {\n    readonly __typename?: 'PriceConverted'\n\n    readonly value: number\n  }\n}\n\nexport namespace GSpecificBusinessHour {\n  export type Fragment = {\n    readonly __typename?: 'BusinessHour'\n\n    readonly id: string\n\n    readonly companyBranch: CompanyBranch\n\n    readonly specificDate: Maybe<string>\n\n    readonly specificDateLocalized: Maybe<string>\n\n    readonly closed: boolean\n\n    readonly closedNote: Maybe<string>\n\n    readonly openAt: string\n\n    readonly closeAt: string\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n  }\n}\n\nexport namespace GOrderMenuRecipe {\n  export type Fragment = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly nameLabel: string\n\n    readonly descriptionLabel: Maybe<string>\n\n    readonly price: Price\n\n    readonly sidedishCount: number\n  }\n\n  export type Price = {\n    readonly __typename?: 'PriceConverted'\n\n    readonly value: number\n\n    readonly currency: Currency\n  }\n\n  export type Currency = {\n    readonly __typename?: 'Currency'\n\n    readonly code: string\n  }\n}\n\nexport namespace GOrderMenuCategory {\n  export type Fragment = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly pictogram: Maybe<string>\n\n    readonly recipes: ReadonlyArray<Recipes>\n  }\n\n  export type Recipes = GOrderMenuRecipe.Fragment\n}\n\nexport namespace GAllergen {\n  export type Fragment = {\n    readonly __typename?: 'Allergen'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly enum: AllergenEnum\n\n    readonly category: number\n  }\n}\n\nexport namespace GWareUnit {\n  export type Fragment = {\n    readonly __typename?: 'WareUnit'\n\n    readonly id: string\n\n    readonly enum: WareUnitEnum\n\n    readonly code: string\n  }\n}\n\nexport namespace GMenuRecipe {\n  export type Fragment = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly visible: boolean\n\n    readonly nameLabel: string\n\n    readonly internalNote: Maybe<string>\n\n    readonly availableAmount: number\n\n    readonly prices: ReadonlyArray<Prices>\n\n    readonly recipeType: RecipeType\n  }\n\n  export type Prices = {\n    readonly __typename?: 'RecipePrice'\n\n    readonly id: string\n\n    readonly priceType: PriceType\n\n    readonly price: Price\n  }\n\n  export type PriceType = {\n    readonly __typename?: 'WarePriceType'\n\n    readonly enum: WarePriceTypeEnum\n  }\n\n  export type Price = {\n    readonly __typename?: 'PriceConverted'\n\n    readonly formattedValue: string\n  } & GPrice.Fragment\n\n  export type RecipeType = {\n    readonly __typename?: 'WareCategoryType'\n\n    readonly enum: WareCategoryTypeEnum\n  }\n}\n\nexport namespace GMenuStockItem {\n  export type Fragment = {\n    readonly __typename?: 'StockItem'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly note: string\n\n    readonly plu: Maybe<string>\n\n    readonly quantity: number\n\n    readonly nameLabel: string\n\n    readonly allergens: ReadonlyArray<Allergens>\n\n    readonly wareUnit: WareUnit\n\n    readonly allowNegative: boolean\n  }\n\n  export type Allergens = GAllergen.Fragment\n\n  export type WareUnit = GWareUnit.Fragment\n}\n\nexport namespace GMenuCategoryForm {\n  export type Fragment = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly internalNoteLabel: Maybe<string>\n\n    readonly visible: boolean\n\n    readonly categoryType: CategoryType\n\n    readonly pictogram: Maybe<string>\n\n    readonly recipes: ReadonlyArray<Recipes>\n  }\n\n  export type CategoryType = {\n    readonly __typename?: 'WareCategoryType'\n\n    readonly enum: WareCategoryTypeEnum\n  }\n\n  export type Recipes = GMenuRecipe.Fragment\n}\n\nexport namespace GMenuCategoryListItem {\n  export type Fragment = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly internalNoteLabel: Maybe<string>\n\n    readonly countRecipes: number\n\n    readonly visible: boolean\n\n    readonly categoryType: CategoryType\n  }\n\n  export type CategoryType = {\n    readonly __typename?: 'WareCategoryType'\n\n    readonly enum: WareCategoryTypeEnum\n  }\n}\n\nexport namespace GMenuRecipePrice {\n  export type Fragment = {\n    readonly __typename?: 'RecipePrice'\n\n    readonly id: string\n\n    readonly priceType: PriceType\n\n    readonly price: Price\n\n    readonly vat: Vat\n  }\n\n  export type PriceType = {\n    readonly __typename?: 'WarePriceType'\n\n    readonly enum: WarePriceTypeEnum\n  }\n\n  export type Price = {\n    readonly __typename?: 'PriceConverted'\n\n    readonly currency: Currency\n  } & GPrice.Fragment\n\n  export type Currency = {\n    readonly __typename?: 'Currency'\n\n    readonly code: string\n  }\n\n  export type Vat = {\n    readonly __typename?: 'Vat'\n\n    readonly id: string\n  }\n}\n\nexport namespace GMenuAssocRecipe {\n  export type Fragment = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly nameLabel: string\n  }\n}\n\nexport namespace GOrderStateCategory {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly orderStateCategory: OrderStateCategoryEnum\n  }\n}\n\nexport namespace GDriver {\n  export type Fragment = {\n    readonly __typename?: 'User'\n\n    readonly id: string\n\n    readonly firstName: Maybe<string>\n\n    readonly lastName: Maybe<string>\n  }\n}\n\nexport namespace GOrderDriver {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly driver: Maybe<Driver>\n  }\n\n  export type Driver = {\n    readonly __typename?: 'UserDeliveringOrder'\n\n    readonly id: string\n\n    readonly user: User\n  }\n\n  export type User = GDriver.Fragment\n}\n\nexport namespace GOrderListTicker {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly createdAt: string\n\n    readonly isPaidWithCard: boolean\n\n    readonly deliveryType: Maybe<DeliveryType>\n\n    readonly deliverAt: Maybe<string>\n\n    readonly deliverAtWorst: Maybe<string>\n\n    readonly deliveredAt: Maybe<string>\n\n    readonly companyBranch: CompanyBranch\n\n    readonly address: Address\n\n    readonly customer: Customer\n\n    readonly totalSum: TotalSum\n  }\n\n  export type DeliveryType = {\n    readonly __typename?: 'DeliveryType'\n\n    readonly enum: DeliveryTypeEnum\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly oldOrderThreshold: number\n  }\n\n  export type Address = GAddress.Fragment\n\n  export type Customer = GCustomer.Fragment\n\n  export type TotalSum = {\n    readonly __typename?: 'PriceConverted'\n\n    readonly value: number\n\n    readonly currency: Currency\n  }\n\n  export type Currency = {\n    readonly __typename?: 'Currency'\n\n    readonly code: string\n  }\n}\n\nexport namespace GOrderDetailWare {\n  export type Fragment = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly id: string\n\n    readonly recipe: Recipe\n\n    readonly price: Price\n  }\n\n  export type Recipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly nameLabel: string\n  }\n\n  export type Price = GPrice.Fragment\n}\n\nexport namespace GOrderMarker {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly deliverAt: Maybe<string>\n\n    readonly gps: Maybe<Gps>\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\n\nexport namespace GOrderMapDevice {\n  export type Fragment = {\n    readonly __typename?: 'TransportationDeviceUser'\n\n    readonly id: string\n\n    readonly lastPosition: Maybe<LastPosition>\n  }\n\n  export type LastPosition = {\n    readonly __typename?: 'GeoPositionWithTimestamp'\n\n    readonly gps: Gps\n\n    readonly timestamp: string\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\n\nexport namespace GOrderMapDriver {\n  export type Fragment = {\n    readonly __typename?: 'User'\n\n    readonly id: string\n\n    readonly initials: string\n\n    readonly countUndeliveredOrders: number\n  }\n}\n\nexport namespace GOrderMapDelivery {\n  export type Fragment = {\n    readonly __typename?: 'User'\n\n    readonly device: Maybe<Device>\n  } & GOrderMapDriver.Fragment\n\n  export type Device = GOrderMapDevice.Fragment\n}\n\nexport namespace GOrderMapActiveDriver {\n  export type Fragment = {\n    readonly __typename?: 'User'\n\n    readonly id: string\n\n    readonly firstName: Maybe<string>\n\n    readonly lastName: Maybe<string>\n\n    readonly countUndeliveredOrders: number\n\n    readonly userDeliveringOrders: ReadonlyArray<UserDeliveringOrders>\n  }\n\n  export type UserDeliveringOrders = {\n    readonly __typename?: 'UserDeliveringOrder'\n\n    readonly id: string\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  }\n}\n\nexport namespace GStatsPrice {\n  export type Fragment = {\n    readonly __typename?: 'PriceConverted'\n\n    readonly value: number\n\n    readonly currency: Currency\n  }\n\n  export type Currency = {\n    readonly __typename?: 'Currency'\n\n    readonly code: string\n  }\n}\n\nexport namespace GZone {\n  export type Fragment = {\n    readonly __typename?: 'Zone'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly enabled: boolean\n\n    readonly priority: number\n\n    readonly companyBranch: CompanyBranch\n\n    readonly geoPolygon: ReadonlyArray<GeoPolygon>\n\n    readonly priceRangeRules: ReadonlyArray<PriceRangeRules>\n\n    readonly minimalOrderPrice: MinimalOrderPrice\n\n    readonly zoneColor: ZoneColor\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly brand: Brand\n  }\n\n  export type Brand = {\n    readonly __typename?: 'Company'\n\n    readonly id: string\n  }\n\n  export type GeoPolygon = GGeoPoint.Fragment\n\n  export type PriceRangeRules = GZonePriceRange.Fragment\n\n  export type MinimalOrderPrice = GPrice.Fragment\n\n  export type ZoneColor = {\n    readonly __typename?: 'ZoneColor'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly color: string\n  }\n}\n\nexport namespace GZonePriceRange {\n  export type Fragment = {\n    readonly __typename?: 'ZonePriceRangeRule'\n\n    readonly toPrice: ToPrice\n\n    readonly price: Price\n  }\n\n  export type ToPrice = GPrice.Fragment\n\n  export type Price = GPrice.Fragment\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface IProps {\n  iconName: string\n  color?: string\n  fontSize?: number\n  fontSizeUnit?: string\n}\n\nconst getFontSize = ({ fontSize = 1.5, fontSizeUnit = 'rem' }: IProps) => {\n  return fontSize + fontSizeUnit\n}\n\nconst IconSpanStyled = styled.span`\n  font-size: ${getFontSize} !important;\n  color: ${(props: IProps) => props.color};\n`\n\nexport const Icon: React.SFC<IProps> = ({\n  iconName,\n  color = Colors.white,\n  fontSize,\n  fontSizeUnit,\n}) =>\n  iconName ? (\n    <IconSpanStyled\n      color={color}\n      fontSize={fontSize}\n      fontSizeUnit={fontSizeUnit}\n      iconName={iconName}\n      className=\"material-icons\"\n    >\n      {iconName}\n    </IconSpanStyled>\n  ) : null\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TMenuModel } from './MenuModel'\n\nexport const MenuBaseModel = BaseModel.named('MenuBase')\n  .volatile(() => ({\n    filterInput: '',\n  }))\n  .actions(self => ({\n    setFilterInput(input: string) {\n      self.filterInput = input\n    },\n  }))\n  .views(self => ({\n    get branchId() {\n      return getParent<TMenuModel>(self).settings.branchId!\n    },\n  }))\n\nexport type TMenuBaseModel = typeof MenuBaseModel.Type\nexport type TMenuBaseModelProps = typeof MenuBaseModel.SnapshotType\n","import gql from 'graphql-tag'\n\nimport { PriceFragment } from '../../../graph/fragments'\n\nexport const MenuRecipeFragment = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...GPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n  ${PriceFragment}\n`\n\nexport const MenuRecipeVisibilityMutation = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport const MenuRecipeCreateMutation = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeUpdateMutation = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeDeleteMutation = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n","import { css } from 'emotion'\nimport { SnackbarProvider } from 'notistack'\nimport React from 'react'\n\nimport { Colors, Spacing } from '../styling'\n\ninterface IProps {}\n\nconst successStyle = css`\n  background: ${Colors.green} !important;\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nconst errorStyle = css`\n  background: ${Colors.red};\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nconst warningStyle = css`\n  background: ${Colors.orange};\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nexport const snackStyles = {\n  variantSuccess: successStyle,\n  variantInfo: successStyle,\n  variantError: errorStyle,\n  variantWarning: warningStyle,\n}\n\nexport const SnackProvider: React.FC<IProps> = ({ children }) => (\n  <SnackbarProvider\n    maxSnack={3}\n    classes={snackStyles}\n    anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\n  >\n    {children}\n  </SnackbarProvider>\n)\n","import React from 'react'\n\nimport { PageTitle } from '../atoms/PageTitle'\nimport { i18n } from '../i18n'\n\nexport const NotFoundPage: React.SFC = () => (\n  <>\n    <PageTitle title={i18n.t`Not found`} />\n    <h1>{i18n.t`There is nothing here, sorry!`}</h1>\n  </>\n)\n","import React from 'react'\nimport { Route, RouteProps } from 'react-router'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { RedirectToLogin } from './RedirectToLogin'\n\ninterface ISecureRouteProps extends RouteProps {\n  redirect?: boolean\n  lazy?: boolean\n}\n\nexport const SecureRoute: React.SFC<ISecureRouteProps> = ({\n  redirect = true,\n  lazy = true,\n  ...props\n}) => {\n  const { auth } = useRoot()\n  if (!auth.isAuthenticatedUser) {\n    return redirect ? <RedirectToLogin /> : <NotFoundPage />\n  }\n  if (props.component && typeof props.component === 'object') {\n    const { component, path, exact } = props\n    return <LazyRoute path={path} exact={exact} component={component} />\n  }\n  return <Route {...props} />\n}\n","import { autorun, observable } from 'mobx'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Route, RouteProps } from 'react-router'\nimport styled from 'styled-components'\n\nimport { appConfig } from '../config'\nimport { RM } from '../helpers/ramda'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  title: string\n}\n\nconst TitleStyled = styled.h1`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  margin: 0.5rem 0.5rem 0 0.5rem;\n  white-space: nowrap;\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.9);\n`\n\nconst observableTitles = observable.array<string>([])\n\nautorun(() => {\n  const lastTitle = Array.from(observableTitles).pop()\n  if (lastTitle) {\n    document.title = `${lastTitle} :: ${appConfig.pageTitleSuffix}`\n  } else {\n    document.title = appConfig.pageTitleSuffix\n  }\n})\n\nconst PageTitleRoute: React.SFC<IProps & RouteProps> = ({\n  title,\n  ...props\n}) => <Route {...props} render={() => <PageTitle title={title} />} />\n\nconst PageTitleDisplay: React.FC = () => (\n  <Observer>\n    {() => <TitleStyled>{observableTitles.join(' - ')}</TitleStyled>}\n  </Observer>\n)\n\nexport class PageTitle extends React.Component<IProps> {\n  static Route = PageTitleRoute\n  static Display = PageTitleDisplay\n  componentDidMount() {\n    observableTitles.push(this.props.title)\n  }\n  componentDidUpdate(prevProps: IProps) {\n    const idx = observableTitles.findIndex(RM.equals(prevProps.title))\n    if (idx >= 0) {\n      observableTitles.splice(idx, 1, this.props.title)\n    }\n  }\n  componentWillUnmount() {\n    observableTitles.remove(this.props.title)\n  }\n  render() {\n    return null\n  }\n}\n","import gql from 'graphql-tag'\n\nexport const MenuCategoryListFragment = gql`\n  fragment GMenuCategoryListItem on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    countRecipes\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n  }\n`\n\nexport const CategoryListQuery = gql`\n  query GCategoryList($branchId: ID!, $categoryType: WareCategoryTypeEnum!) {\n    categories: wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: $categoryType\n    ) {\n      ...GMenuCategoryListItem\n    }\n  }\n  ${MenuCategoryListFragment}\n`\n","import gql from 'graphql-tag'\n\nimport { GeoPointFragment, PriceFragment } from '../../graph/fragments'\n\nexport const ZoneFragment = gql`\n  fragment GZone on Zone {\n    id\n    name\n    enabled\n    priority\n    companyBranch {\n      id\n      brand {\n        id\n      }\n    }\n    geoPolygon {\n      ...GGeoPoint\n    }\n    priceRangeRules {\n      ...GZonePriceRange\n    }\n    minimalOrderPrice {\n      ...GPrice\n    }\n    zoneColor {\n      id\n      code\n      color\n    }\n  }\n\n  fragment GZonePriceRange on ZonePriceRangeRule {\n    toPrice {\n      ...GPrice\n    }\n    price {\n      ...GPrice\n    }\n  }\n\n  ${PriceFragment}\n  ${GeoPointFragment}\n`\n\nexport const ZoneLocationQuery = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...GGeoPoint\n        }\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n\nexport const ZoneBranchLocationQuery = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n\nexport const ZoneColorsQuery = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n","import debug from 'debug'\nimport { getEnv, getPath, getRoot, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { IRootEnvironment } from '../atoms/RootProvider'\nimport { TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    return debug(`model/${getPath(self)}`)\n  },\n  get client() {\n    const client = getEnv<IRootEnvironment>(self).apolloClient\n    if (!client) {\n      throw new VError('Apollo client is missing from environment setup')\n    }\n    return client\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n}))\n","import React from 'react'\nimport { Route, RouteComponentProps, RouteProps } from 'react-router'\n\nimport Pacman from '../atoms/Pacman'\n\ninterface IProps<Params> extends Omit<RouteProps, 'render' | 'children'> {\n  component: React.ComponentType<RouteComponentProps<Params>>\n}\n\nexport function LazyRoute<Params = {}>({\n  component: Component,\n  ...props\n}: IProps<Params>) {\n  return (\n    <Route\n      {...props}\n      render={routeProps => (\n        <React.Suspense fallback={<Pacman />}>\n          <Component {...routeProps} />\n        </React.Suspense>\n      )}\n    />\n  )\n}\n","import Color from 'color'\n\nimport { RM } from './helpers/ramda'\n\nexport enum Colors {\n  yellow = '#FFDB2B',\n  pink = '#FF2B95',\n  blue = '#2441FF',\n  red = '#FF1C1C',\n  green = '#179B12',\n  turquoise = '#2BFFFF',\n  orange = '#FF862B',\n  violet = '#6D4F8C',\n  black = '#000000',\n  greyDarkest = '#080808',\n  greyDark = '#2C2C2C',\n  greyMiddle = '#939393',\n  greyLight = '#EDEDED',\n  white = '#FFFFFF',\n}\n\nexport const applyAlphaToColor = RM.curry((color: Colors, alphaValue: number) =>\n  Color(color)\n    .alpha(alphaValue)\n    .string(),\n)\n\nexport enum Radiuses {\n  Card = '0.5rem',\n  Button = '0.5rem',\n  TextComponent = '0.25rem',\n}\n\nexport const Spacing = {\n  MarginAroundFormComponents: '0.1rem',\n  Small: '0.25rem',\n  Middle: '0.5rem',\n  LayoutGridCellMargin: '0.5rem',\n  ButtonHeight: '3.4375rem',\n  DefaultInputWidth: 20,\n  DefaultSizeUnit: 'rem',\n  ButtonColumnWidthPx: 55,\n  InfoMessageFontSize: '1.375rem',\n}\n","import * as RM from 'ramda'\n\nexport { RM }\n","import debug from 'debug'\n\n// @ts-ignore\ndebug.useColors = () => !process.env.REACT_APP_STAGE\n\nexport const logMain = debug('main')\nexport const logDebug = debug('debug')\nexport const logError = debug('error')\nexport const logAuth = debug('auth')\nexport const logRouting = debug('routing')\nexport const logPersistence = debug('persistence')\nexport const logBootstrap = debug('bootstrap')\nexport const logAccess = debug('access')\nexport const logGraph = debug('graph')\nexport const logForm = debug('form')\nexport const logSentry = debug('sentry')\nexport const logLang = debug('lang')\n// tslint:disable-next-line:no-console\nexport const logTest = console.log\n","import { Base64 } from 'js-base64'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { MPasswordChange } from '../graph/types'\nimport { identifyUser } from '../helpers/sentry'\nimport { LoginProviderModel } from '../segments/login/models/LoginProviderModel'\nimport { PasswordChangeMutation } from './AuthModel.graphql'\nimport { BaseModel } from './BaseModel'\n\ninterface IVolatileProps {\n  tokenForPasswordChange?: string\n}\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    userId: types.optional(types.string, ''),\n    token: types.optional(types.string, ''),\n    provider: types.optional(LoginProviderModel, {}),\n  })\n  .volatile<IVolatileProps>(() => ({}))\n  .views(self => ({\n    get isAuthenticated() {\n      return self.token.length > 0\n    },\n    get isAuthenticatedUser() {\n      return this.isAuthenticated && self.userId.length > 0\n    },\n    get communicationToken() {\n      return self.tokenForPasswordChange || self.token\n    },\n    get canCommunicate() {\n      return this.isAuthenticated || self.tokenForPasswordChange !== undefined\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      self.tokenForPasswordChange = undefined\n      self.log('authenticated with id %s', userId)\n      identifyUser(userId)\n    },\n    invalidate() {\n      self.token = ''\n      self.userId = ''\n      self.tokenForPasswordChange = undefined\n      self.client.cache.reset()\n      self.log('invalidated authentication')\n      identifyUser(null)\n    },\n  }))\n  .actions(self => ({\n    setForPasswordChange(temporaryB64EncodedToken: string) {\n      self.invalidate()\n      self.log('encoded token %s', temporaryB64EncodedToken)\n      self.tokenForPasswordChange = Base64.decode(temporaryB64EncodedToken)\n      self.log('using temp token %s', self.tokenForPasswordChange)\n    },\n    async changePassword(password: string) {\n      const variables: MPasswordChange.Variables = {\n        password,\n      }\n      const result = await self.client.mutate({\n        mutation: PasswordChangeMutation,\n        variables,\n        fetchPolicy: 'no-cache',\n      })\n\n      const {\n        updateUserPassword: { id, token },\n      } = result.data as MPasswordChange.Mutation\n\n      if (token && id) {\n        self.invalidate()\n        self.authenticate(token, id)\n      }\n    },\n  }))\n  .preProcessSnapshot(snapshot => {\n    if (snapshot.userId) {\n      identifyUser(snapshot.userId)\n    }\n    return snapshot\n  })\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import gql from 'graphql-tag'\n\nexport const GeoPointFragment = gql`\n  fragment GGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const EmailFragment = gql`\n  fragment GEmail on Email {\n    email\n    description\n    default\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const PhoneFragment = gql`\n  fragment GPhone on Phone {\n    phone\n    description\n    default\n  }\n`\n","import { types } from 'mobx-state-tree'\nimport GoogleMap from 'react-google-maps/lib/components/GoogleMap'\n\nimport { gpsToLatLng } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<GoogleMap>\n}\n\nconst GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 12),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLng(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<GoogleMap>) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n  }))\n\nexport type TMapModel = typeof MapModel.Type\n","import gql from 'graphql-tag'\n\nimport { AllergenFragment } from '../graph/AllergenFragment.graphql'\nimport { WareUnitFragment } from '../graph/WareUnitFragment.graphql'\n\nexport const MenuStockItemFragment = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...GAllergen\n    }\n    wareUnit {\n      ...GWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n  ${WareUnitFragment}\n  ${AllergenFragment}\n`\n\nexport const MenuStockCreateMutation = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockUpdateMutation = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockDeleteMutation = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n","import debug from 'debug'\nimport React from 'react'\nimport { Redirect, Route } from 'react-router'\n\ninterface IRedirectToLoginProps {\n  useOrigin?: boolean\n}\n\nconst log = debug('routing')\n\nexport const RedirectToLogin: React.SFC<IRedirectToLoginProps> = ({\n  useOrigin = true,\n}) => (\n  <Route\n    path=\"/login\"\n    children={({ match, location }) => {\n      if (match) {\n        return null\n      }\n      log('redirecting to login...')\n      return (\n        <Redirect\n          to={{\n            pathname: '/login',\n            state: { origin: useOrigin ? location.pathname : '/' },\n          }}\n        />\n      )\n    }}\n  />\n)\n","import React, { MouseEvent } from 'react'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { applyAlphaToColor, Colors, Radiuses, Spacing } from '../styling'\n\nexport interface ITouchButtonProps\n  extends React.HTMLAttributes<HTMLButtonElement> {\n  iconName?: string\n  iconColor?: Colors\n  iconSize?: number\n  text?: string\n  color?: Colors\n  badge?: ReactNode\n  disabled?: boolean\n  textNextToIcon?: boolean\n  className?: string\n  width?: string\n  height?: string\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n}\n\nconst applyAlpha = (alphaValue: number) => (props: ITouchButtonProps) =>\n  applyAlphaToColor(props.color!, alphaValue)\n\nconst TouchButtonStyled = styled.button`\n  min-height: ${Spacing.ButtonHeight};\n  min-width: ${Spacing.ButtonHeight};\n  width: ${({ width = '100%' }: ITouchButtonProps) => width};\n  height: ${({ height = '100%' }: ITouchButtonProps) => height};\n  margin: 0;\n  padding: 0 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  /* fallback font size for incompatible browsers */\n  font-size: 1rem;\n  font-size: calc(0.6rem + 0.5vw);\n  transition-duration: 0.2s;\n\n  & .material-icons {\n    vertical-align: middle;\n  }\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nconst ButtonLabelStyled = styled.div`\n  color: white;\n  text-align: center;\n  width: 100%;\n  overflow: hidden;\n`\nconst ButtonLabelNextToIconStyled = styled(ButtonLabelStyled)`\n  width: calc(100% - 4rem);\n  margin: 0 0 0 1rem;\n  text-align: left;\n  display: inline-block;\n  vertical-align: top;\n  overflow: hidden;\n`\n\nexport const TouchButton = React.forwardRef<\n  HTMLButtonElement,\n  ITouchButtonProps\n>(\n  (\n    {\n      children,\n      iconName,\n      iconColor = Colors.white,\n      iconSize = 3,\n      color = Colors.greyMiddle,\n      textNextToIcon = false,\n      badge,\n      text,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    return (\n      <TouchButtonStyled color={color} {...props} ref={forwardedRef}>\n        {iconName && (\n          <Icon iconName={iconName} color={iconColor} fontSize={iconSize} />\n        )}\n\n        {text &&\n          textNextToIcon && (\n            <ButtonLabelNextToIconStyled>{text}</ButtonLabelNextToIconStyled>\n          )}\n\n        {text &&\n          !textNextToIcon && <ButtonLabelStyled>{text}</ButtonLabelStyled>}\n\n        {badge}\n        {children}\n      </TouchButtonStyled>\n    )\n  },\n)\n","import Color from 'color'\nimport styled, { css } from 'styled-components'\n\nimport { Colors, Radiuses } from '../styling'\n\ninterface IProps {\n  color?: string\n  textColor?: string\n  padding?: number\n  stretchToParent?: boolean\n}\n\nexport const Card = styled.div`\n  background: ${getBackgroundColor};\n  color: ${getTextColor};\n  border-radius: ${Radiuses.Card};\n  padding: ${getPadding}rem;\n  margin: 0 0 0.5rem 0;\n  position: relative;\n  ${applyStretchToParentStyle};\n`\n\nCard.displayName = 'Card'\n\nfunction getPadding({ padding = 0.5 }: IProps) {\n  return padding\n}\n\nfunction getBackgroundColor({ color }: IProps) {\n  return Color(color || Colors.greyLight)\n    .alpha(0.8)\n    .lighten(0.4)\n    .string()\n}\n\nfunction getTextColor(props: IProps) {\n  return props.textColor || Colors.black\n}\n\nfunction applyStretchToParentStyle({ stretchToParent = false }: IProps) {\n  if (!stretchToParent) {\n    return ''\n  }\n  return css`\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  `\n}\n","import { isSameDay } from 'date-fns'\nimport { format, formatWithOptions } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\nimport numeral from 'numeral'\n\nimport { GAddress } from '../graph/types'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const fullDateFormat = 'dddd LL'\nexport const formatFullDate = formatLocale(fullDateFormat)\n\nexport const dateFormat = 'D.M.YYYY'\nexport const formatDate = formatLocale(dateFormat)\n\nexport const dateFormatISO = 'YYYY-MM-DD'\nexport const formatDateISO = format(dateFormatISO)\n\nexport const timeFormat = 'H:mm'\nexport const formatTime = formatLocale(timeFormat)\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const priceFormat = '0,0.[00]'\nexport const formatPrice = price => numeral(price).format(priceFormat)\n\nexport const formatTimeWithoutTodayDate = (time: string) =>\n  isSameDay(time, new Date()) ? formatTime(time) : formatDateTime(time)\n\nexport const formatAddress = (address: GAddress.Fragment) => {\n  if (!address.street) {\n    if (address.city) {\n      return `${address.city} ${address.houseNumber}, ${address.state}`\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\n\nimport { IPageLayoutProps, PageLayout } from '../molecules/PageLayout'\n\ninterface IFullPageLayoutProps extends IPageLayoutProps {\n  width?: number\n}\n\nfunction getLayout(width: number): Layout[] {\n  return [{ i: 'full', x: 0, y: 1, w: width, h: 10 }]\n}\n\nexport const FullPageLayout: React.SFC<IFullPageLayoutProps> = ({\n  children,\n  width = 16,\n  ...props\n}) => (\n  <PageLayout layouts={getLayout(width)} {...props}>\n    <div key=\"full\">{children}</div>\n  </PageLayout>\n)\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\nimport styled from 'styled-components'\n\nimport { GridLayout } from '../atoms/GridLayout'\nimport { PageTitle } from '../atoms/PageTitle'\nimport { SoundControl } from '../atoms/SoundControl'\nimport { LogoutWidget } from '../organisms/LogoutWidget'\nimport { SecureRoute } from '../routes/SecureRoute'\nimport { HomeButton } from './HomeButton'\n\nexport interface IPageLayoutProps {\n  pageTitle?: string\n  layouts?: Layout[]\n  hideLogoutWidget?: boolean\n  showSoundControl?: boolean\n  useBackButton?: boolean\n  backRoute?: string\n  scrollPageTitle?: boolean\n}\n\nconst TopLeftButtonContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n`\n\nconst getPosition = (props: IPageLayoutProps) =>\n  props.scrollPageTitle ? 'absolute' : 'fixed'\n\nconst TopRightContainer = styled.div`\n  position: ${getPosition};\n  top: 0;\n  right: 0;\n  z-index: 100;\n`\n\nconst PageTitleContainer = styled.div`\n  position: ${getPosition};\n  top: 0rem;\n  left: 4rem;\n`\n\nconst SoundControlContainer = styled.div`\n  position: fixed;\n  top: 0rem;\n  right: 15rem;\n`\n\nexport const PageLayout: React.SFC<IPageLayoutProps> = ({\n  pageTitle = '',\n  layouts = [],\n  hideLogoutWidget = false,\n  showSoundControl = false,\n  useBackButton = false,\n  scrollPageTitle = true,\n  backRoute,\n  children,\n}) => (\n  <>\n    {pageTitle && <PageTitle title={pageTitle} />}\n    {showSoundControl && (\n      <SoundControlContainer>\n        <SoundControl />\n      </SoundControlContainer>\n    )}\n\n    {!hideLogoutWidget && (\n      <TopRightContainer scrollPageTitle={scrollPageTitle}>\n        <SecureRoute path=\"/\" component={LogoutWidget} redirect={false} />\n      </TopRightContainer>\n    )}\n\n    <PageTitleContainer scrollPageTitle={scrollPageTitle}>\n      <PageTitle.Display />\n    </PageTitleContainer>\n\n    <GridLayout layouts={[...layouts]}>{children}</GridLayout>\n\n    <TopLeftButtonContainer>\n      <HomeButton goBack={useBackButton} backRoute={backRoute} />\n    </TopLeftButtonContainer>\n  </>\n)\n","import gql from 'graphql-tag'\n\nimport { OrderDriverFragment } from '../molecules/OrderStateDeliver.graphql'\n\nexport const OrderStateCategoryFragment = gql`\n  fragment GOrderStateCategory on Order {\n    id\n    orderStateCategory\n  }\n`\n\nexport const UpdateOrderStateMutation = gql`\n  mutation GUpdateOrderState($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...GOrderStateCategory\n      orderTiming: orderStateCategoryRelations {\n        createdAt\n        orderStateCategory\n      }\n    }\n  }\n  ${OrderStateCategoryFragment}\n`\n\nexport const SendOrderNotificationMutation = gql`\n  mutation GSendOrderNotification($orderId: ID!, $minutes: Int!) {\n    orderNotifyCustomer(id: $orderId, minutes: $minutes) {\n      id\n      deliverAt\n    }\n  }\n`\n\nexport const SelectOrderDriverMutation = gql`\n  mutation GSelectOrderDriver($driverId: ID!, $orderId: ID!) {\n    createUserDeliveringOrder(user: $driverId, order: $orderId) {\n      order {\n        ...GOrderDriver\n      }\n    }\n  }\n  ${OrderDriverFragment}\n`\n\nexport const RemoveOrderDriverMutation = gql`\n  mutation GRemoveOrderDriver($orderDriverId: ID!) {\n    destroyUserDeliveringOrder(id: $orderDriverId) {\n      order {\n        ...GOrderDriver\n      }\n    }\n  }\n  ${OrderDriverFragment}\n`\n\nexport const ChangeOrderToPickupMutation = gql`\n  mutation MChangeOrderToPickup($orderId: ID!) {\n    updateOrderDeliveryToPickup(id: $orderId) {\n      id\n      deliveryType {\n        enum\n      }\n    }\n  }\n`\n","import React from 'react'\n\ninterface ILoadingProps {\n  text?: string\n}\n\nexport const Loading: React.SFC<ILoadingProps> = ({ text = '...' }) => (\n  <h1>{text}</h1>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GOrderDriverSelection } from '../../../graph/types'\n\nconst DriverFragment = gql`\n  fragment GDriver on User {\n    id\n    firstName\n    lastName\n  }\n`\n\nexport const OrderDriverFragment = gql`\n  fragment GOrderDriver on Order {\n    id\n    driver: userDeliveringOrder {\n      id\n      user {\n        ...GDriver\n      }\n    }\n  }\n  ${DriverFragment}\n`\n\nconst OrderDriverSelection = gql`\n  query GOrderDriverSelection($orderId: ID!, $branchId: [ID!]!) {\n    order(id: $orderId) {\n      ...GOrderDriver\n    }\n    drivers(companyBranches: $branchId, onlyAvailable: true) {\n      ...GDriver\n    }\n  }\n  ${OrderDriverFragment}\n`\n\nexport const QueryDriverSelection = buildQuery<\n  GOrderDriverSelection.Query,\n  GOrderDriverSelection.Variables\n>(OrderDriverSelection)\n","import { useEffect, EffectCallback } from 'react'\n\nexport const useEffectOnce = (effect: EffectCallback) => {\n  return useEffect(effect, [])\n}\n","import raf from 'raf'\nimport { useEffect, useRef } from 'react'\n\nimport { useStateRef } from './useStateRef'\n\nexport const SECOND = 1 * 1000\nexport const MINUTE = 60 * SECOND\nexport const HOUR = 60 * MINUTE\n\ninterface IOptions {\n  interval: number\n  enabled: boolean\n  getNow?(): number\n  nextTick?(onTick: () => void): number\n  cancelTick?(handle: number): void\n}\n\nexport const useTimer = ({\n  interval,\n  enabled,\n  getNow = Date.now,\n  nextTick = raf,\n  cancelTick = raf.cancel,\n}: IOptions) => {\n  const [getLastUpdate, setLastUpdate] = useStateRef(getNow)\n  const handleRef = useRef<number | null>(null)\n\n  useEffect(\n    () => {\n      const onFrame = () => {\n        const now = getNow()\n        const last = getLastUpdate()\n        const delta = now - last\n        if (delta >= interval) {\n          setLastUpdate(now)\n        }\n        loop()\n      }\n\n      const onStart = () => {\n        loop()\n      }\n\n      const onStop = () => {\n        if (handleRef.current) {\n          cancelTick(handleRef.current)\n          handleRef.current = null\n        }\n      }\n\n      const loop = () => {\n        if (enabled) {\n          handleRef.current = nextTick(onFrame)\n        } else {\n          onStop()\n        }\n      }\n\n      onStart()\n      return onStop\n    },\n    [interval, enabled],\n  )\n\n  return getLastUpdate()\n}\n","import gql from 'graphql-tag'\n\nexport const ValidateLocationQuery = gql`\n  query GValidateLocation(\n    $branchId: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    resolveLocation(\n      companyBranch: $branchId\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      inDeliveryLocation\n    }\n  }\n`\n\nexport const CreateOrderMutation = gql`\n  mutation GCreateOrder(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $gps: InputGeoPointCreate!\n    $callEventId: ID\n  ) {\n    createOrder(\n      order: {\n        companyBranch: $branchId\n        deliveryType: $deliveryType\n        callEventId: $callEventId\n        gps: $gps\n        customer: {}\n        warePriceType: DELIVERY\n        orderOrigin: STAFF\n      }\n    ) {\n      id\n    }\n  }\n`\n\nexport const CancelOrderMutation = gql`\n  mutation MCancelOrder($orderId: ID!) {\n    addOrderState(order: $orderId, orderState: CANCELED) {\n      id\n    }\n  }\n`\n","import { types } from 'mobx-state-tree'\n\nimport {\n  GCreateSpecificBusinessHour,\n  GDeleteSpecificBusinessHour,\n} from '../../../graph/types'\nimport { formatTime } from '../../../helpers/formats'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  CreateSpecificBusinessHour,\n  DeleteSpecificBusinessHour,\n} from './BusinessHoursModel.graphql'\n\nexport enum ESpecificHourMode {\n  TIMESPAN = 'TIMESPAN',\n  FULLDAY = 'FULLDAY',\n}\n\nexport interface ISpecificFormData {\n  date: Date\n  openAt: Date\n  closeAt: Date\n  note: string\n}\n\nconst byIdPredicate = RM.complement(RM.propEq('id'))\n\nexport const BusinessHoursModel = BaseModel.named('BusinessHours')\n  .props({\n    specificMode: types.optional(\n      types.enumeration(['TIMESPAN', 'FULLDAY']),\n      ESpecificHourMode.TIMESPAN,\n    ),\n  })\n  .actions(self => ({\n    changeSpecificMode(mode: ESpecificHourMode) {\n      self.specificMode = mode\n    },\n    submitSpecificHour(values: ISpecificFormData) {\n      const variables: GCreateSpecificBusinessHour.Variables = {\n        input: {\n          companyBranch: self.root.settings.branchId!,\n          // @ts-ignore Figure out correct typings\n          specificDate: values.date,\n          closed: self.specificMode === ESpecificHourMode.FULLDAY,\n          openAt: values.openAt && formatTime(values.openAt),\n          closeAt: values.closeAt && formatTime(values.closeAt),\n          closedNote: values.note,\n        },\n      }\n      self.client.mutate<GCreateSpecificBusinessHour.Mutation>({\n        mutation: CreateSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.concat(\n                  mutationResult.data.result,\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n    deleteSpecificHour(businessHourId: ID) {\n      const variables: GDeleteSpecificBusinessHour.Variables = {\n        id: businessHourId,\n      }\n      self.client.mutate({\n        mutation: DeleteSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.filter(\n                  byIdPredicate(mutationResult.data.result.id),\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n  }))\n","import { LocationDescriptor } from 'history'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuCategoryCreate,\n  GMenuCategoryDelete,\n  GMenuCategoryUpdate,\n  GSortMenuCategory,\n  WareCategoryTypeEnum,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TCategoryFormValues } from '../organisms/CategoryFormLoader'\nimport { CategoryListQuery } from '../organisms/CategoryList.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuCategoryCreateMutation,\n  MenuCategoryDeleteMutation,\n  MenuCategoryUpdateMutation,\n  MenuCategoryVisibility,\n  SortMenuCategoryMutation,\n} from './MenuCategoryModel.graphql'\n\nexport const MenuCategoryModel = MenuBaseModel.named('MenuCategory').actions(\n  self => ({\n    async sortCategory(categoryId: ID, offset: number) {\n      const variables: GSortMenuCategory.Variables = {\n        categoryId,\n        offset,\n      }\n      const result = await self.client.mutate({\n        mutation: SortMenuCategoryMutation,\n        variables,\n      })\n      return Boolean(result.data && result.data.success)\n    },\n    changeVisibility(categoryId: ID, visible: boolean) {\n      self.client.mutate({\n        mutation: MenuCategoryVisibility,\n        variables: { categoryId, visible },\n        optimisticResponse: {\n          updateRecipe: {\n            __typename: 'Recipe',\n            id: categoryId,\n            visible,\n          },\n        },\n      })\n    },\n    createCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryCreate.Variables = {\n        input: {\n          companyBranch: self.branchId,\n          wareCategoryType: categoryType,\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryCreateMutation,\n          variables,\n          refetchQueries: [\n            {\n              query: CategoryListQuery,\n              variables: {\n                branchId: self.branchId,\n                categoryType,\n              },\n            },\n          ],\n        }),\n      )\n    },\n    async updateCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryUpdate.Variables = {\n        categoryId: formValues.id,\n        input: {\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteCategory(categoryId: ID, categoryType: WareCategoryTypeEnum) {\n      const variables: GMenuCategoryDelete.Variables = {\n        categoryId,\n      }\n      await self.client.mutate({\n        mutation: MenuCategoryDeleteMutation,\n        variables,\n        refetchQueries: [\n          {\n            query: CategoryListQuery,\n            variables: {\n              branchId: self.branchId,\n              categoryType,\n            },\n          },\n        ],\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(\n  formValues: TCategoryFormValues,\n  categoryType: WareCategoryTypeEnum,\n) {\n  return Object.assign({\n    nameLabel: formValues.nameLabel,\n    internalNoteLabel: formValues.internalNoteLabel,\n    enabled: formValues.visible,\n    pictogram: formValues.pictogram,\n    recipes: formValues.recipes.map(RM.prop('id')),\n  })\n}\n\nexport const getCategoryRoute = (\n  recipeId: ID,\n  categoryType: WareCategoryTypeEnum,\n): LocationDescriptor => ({\n  pathname: recipeId,\n  state: { categoryType },\n})\n\nexport type TMenuCategoryModel = typeof MenuCategoryModel.Type\n","import { LocationDescriptor } from 'history'\nimport numeral from 'numeral'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuRecipeCreate,\n  GMenuRecipeDefaults,\n  GMenuRecipeDelete,\n  GMenuRecipeUpdate,\n  WareCategoryTypeEnum,\n  WarePriceTypeEnum,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TRecipeFormValues } from '../menutypes'\nimport { MenuRecipeDefaults } from '../organisms/RecipeForm.graphql'\nimport { MenuRecipeListQuery } from '../organisms/RecipeList.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuRecipeCreateMutation,\n  MenuRecipeDeleteMutation,\n  MenuRecipeUpdateMutation,\n  MenuRecipeVisibilityMutation,\n} from './MenuRecipeModel.graphql'\n\nexport const MenuRecipeModel = MenuBaseModel.named('MenuRecipe')\n  .volatile(() => ({\n    categoryFilterId: null as MaybeID,\n  }))\n  .actions(self => ({\n    changeVisibility(recipeId: ID, visible: boolean) {\n      self.client.mutate({\n        mutation: MenuRecipeVisibilityMutation,\n        variables: { recipeId, visible },\n        optimisticResponse: {\n          updateRecipe: {\n            __typename: 'Recipe',\n            id: recipeId,\n            visible,\n          },\n        },\n      })\n    },\n    setCategoryFilter(categoryId: MaybeID) {\n      self.categoryFilterId = categoryId\n    },\n    createRecipe(\n      formValues: TRecipeFormValues,\n      recipeType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuRecipeCreate.Variables = {\n        recipe: {\n          companyBranch: self.branchId,\n          wareCategoryType: recipeType,\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeCreateMutation,\n          variables,\n          refetchQueries: [\n            {\n              query: MenuRecipeListQuery,\n              variables: {\n                branchId: self.branchId,\n              },\n            },\n          ],\n        }),\n      )\n    },\n    updateRecipe(formValues: TRecipeFormValues) {\n      const variables: GMenuRecipeUpdate.Variables = {\n        recipeId: formValues.id,\n        recipe: {\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteRecipe(recipeId: ID) {\n      const variables: GMenuRecipeDelete.Variables = {\n        recipeId,\n      }\n      await self.client.mutate({\n        mutation: MenuRecipeDeleteMutation,\n        variables,\n        refetchQueries: [\n          {\n            query: MenuRecipeListQuery,\n            variables: {\n              branchId: self.branchId,\n            },\n          },\n        ],\n      })\n    },\n    async queryDefaults() {\n      const { data } = await self.client.query<GMenuRecipeDefaults.Query>({\n        query: MenuRecipeDefaults,\n        variables: { branchId: self.branchId },\n      })\n      const {\n        companyBranch: {\n          vats,\n          currency: { code },\n        },\n      } = data\n      return {\n        vats: vats.reduce((result, { vatId, priceType }) => {\n          result[priceType.enum] = vatId\n          return result\n        }, {}),\n        currencyCode: code,\n      }\n    },\n  }))\n\nfunction getFormVariables(formValues: TRecipeFormValues) {\n  return {\n    code: formValues.code,\n    nameLabel: formValues.nameLabel,\n    internalNote: formValues.internalNote,\n    descriptionLabel: formValues.descriptionLabel,\n    enabled: formValues.visible,\n    prices: Object.keys(formValues.prices).map(priceType => ({\n      warePriceType: (priceType as unknown) as WarePriceTypeEnum,\n      price: { value: numeral(formValues.prices[priceType].value).value() },\n      vat: formValues.prices[priceType].vatId!,\n    })),\n    sideDishCategories: formValues.sideDishes.map(RM.prop('id')),\n    wareCategories: formValues.categories.map(RM.prop('id')),\n    associatedRecipes: formValues.associatedRecipes.map(\n      RM.pick(['associatedRecipe', 'warePriceType']),\n    ),\n    ingredients: formValues.ingredients.map(({ stockItem, quantity }) => {\n      return { stockItem, quantity: parseNumber(quantity) }\n    }),\n  }\n}\n\nfunction parseNumber(value: string | number) {\n  return typeof value === 'number'\n    ? value\n    : Number.parseFloat(value.replace(',', '.'))\n}\n\nexport const getRecipeRoute = (\n  recipeId: ID,\n  recipeType: WareCategoryTypeEnum,\n): LocationDescriptor => ({\n  pathname: recipeId,\n  state: { recipeType },\n})\n\nexport type TMenuRecipeModel = typeof MenuRecipeModel.Type\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { PriceFragment } from '../../../graph/fragments'\nimport { GMenuRecipeFormAssoc } from '../../../graph/types'\nimport { MenuCategoryListFragment } from './CategoryList.graphql'\n\nexport const MenuRecipePriceFragment = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...GPrice\n    }\n    vat {\n      id\n    }\n  }\n  ${PriceFragment}\n`\n\nexport const MenuAssocRecipeFragment = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const MenuRecipeFormQuery = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...GMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...GMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n  ${MenuRecipePriceFragment}\n  ${MenuCategoryListFragment}\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeFormAssocQuery = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeDefaults = gql`\n  query GMenuRecipeDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport const QueryMenuRecipeFormAssoc = buildQuery<\n  GMenuRecipeFormAssoc.Query,\n  GMenuRecipeFormAssoc.Variables\n>(MenuRecipeFormAssocQuery)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GMenuRecipeList } from '../../../graph/types'\nimport { MenuRecipeFragment } from '../models/MenuRecipeModel.graphql'\n\nexport const MenuRecipeListQuery = gql`\n  query GMenuRecipeList(\n    $branchId: ID!\n    $categoryId: ID\n    $categoryType: WareCategoryTypeEnum\n  ) {\n    recipes(\n      companyBranch: $branchId\n      wareCategory: $categoryId\n      wareCategoryType: $categoryType\n    ) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const QueryRecipeList = buildQuery<\n  GMenuRecipeList.Query,\n  GMenuRecipeList.Variables\n>(MenuRecipeListQuery)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GMenuStockList } from '../../../graph/types'\nimport { MenuStockItemFragment } from '../models/MenuStockModel.graphql'\n\nexport const MenuStockListQuery = gql`\n  query GMenuStockList($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const QueryMenuStockList = buildQuery<\n  GMenuStockList.Query,\n  GMenuStockList.Variables\n>(MenuStockListQuery)\n","import gql from 'graphql-tag'\n\nexport const AllergenFragment = gql`\n  fragment GAllergen on Allergen {\n    id\n    code\n    enum\n    category\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const WareUnitFragment = gql`\n  fragment GWareUnit on WareUnit {\n    id\n    enum\n    code\n  }\n`\n","import React from 'react'\nimport RGL, { Layout, WidthProvider } from 'react-grid-layout'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\ninterface IGridLayoutProps {\n  layouts: Layout[]\n}\n\nexport const GridLayout: React.SFC<IGridLayoutProps> = ({\n  children,\n  layouts,\n}) => (\n  <ReactGridLayout\n    className=\"layout\"\n    layout={layouts}\n    cols={16}\n    rowHeight={55}\n    margin={[8, 8]}\n    autoSize={false}\n    isDraggable={false}\n    isResizable={false}\n    compactType={null}\n    measureBeforeMount={true}\n  >\n    {children}\n  </ReactGridLayout>\n)\n","import React from 'react'\nimport Sound from 'react-sound'\n\nimport { logMain } from '../helpers/logger'\nimport { IntervalRender } from './IntervalRender'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {\n  intervalSec: number\n  soundUrl: string\n  shouldPlay?: boolean\n  skipEnableChecks?: boolean\n}\n\nexport const SoundPlayInterval: React.SFC<IProps> = ({\n  intervalSec,\n  soundUrl,\n  shouldPlay = true,\n  skipEnableChecks = false,\n}) => (\n  <WithRoot\n    observe={true}\n    render={({ config, user }) => {\n      if (!skipEnableChecks) {\n        if (!config.soundEnabled) {\n          logMain('sound is disabled')\n          return null\n        }\n        if (!user.soundEnabled) {\n          logMain('sound not enabled by user')\n          return null\n        }\n      }\n      logMain('sound play status: %s', shouldPlay)\n      return (\n        <IntervalRender\n          intervalSec={intervalSec}\n          enabled={shouldPlay}\n          render={({ isActive, nextLoop }) => (\n            <Sound\n              url={soundUrl}\n              playStatus={isActive ? 'PLAYING' : 'STOPPED'}\n              onFinishedPlaying={nextLoop}\n              loop={false}\n              autoLoad={true}\n              volume={user.soundVolume}\n            />\n          )}\n        />\n      )\n    }}\n  />\n)\n","import gql from 'graphql-tag'\n\nexport const CreateFinancialReport = gql`\n  mutation GCreateFinancialReport($companyBranchId: ID!) {\n    result: createFinancialReport(companyBranchId: $companyBranchId) {\n      id\n    }\n  }\n`\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GSpecificBusinessHours } from '../../../graph/types'\n\nexport const SpecificBusinessHourFragment = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const QuerySpecificBusinessHours = buildQuery<\n  GSpecificBusinessHours.Query,\n  GSpecificBusinessHours.Variables\n>(gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`)\n","import gql from 'graphql-tag'\n\nimport { MenuRecipeFragment } from '../models/MenuRecipeModel.graphql'\n\nexport const MenuCategoryFormFragment = gql`\n  fragment GMenuCategoryForm on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    pictogram\n    recipes {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuCategoryFormQuery = gql`\n  query GMenuCategoryForm($categoryId: ID!) {\n    wareCategory(id: $categoryId) {\n      ...GMenuCategoryForm\n    }\n  }\n  ${MenuCategoryFormFragment}\n`\n","import { useRef, useState } from 'react'\n\nexport function useStateRef<T>(initialState: T | (() => T)) {\n  const [state, setState] = useState(initialState)\n  const ref = useRef<T | null>(null)\n  ref.current = state\n  const getValue = () => ref.current\n  return [getValue, setState] as [(() => T), ((value: T) => void)]\n}\n","import './enableDebug'\n\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport { App } from './App'\nimport { RootProvider } from './atoms/RootProvider'\nimport { Router } from './atoms/Router'\nimport { ThemeProvider } from './atoms/ThemeProvider'\nimport { UpdateHandler } from './atoms/UpdateHandler'\nimport { installSentry } from './helpers/sentry'\nimport { I18nManager } from './i18n'\n\nconst Main = () => (\n  <ThemeProvider>\n    <RootProvider>\n      <I18nManager>\n        <UpdateHandler>\n          <Router>\n            <App />\n          </Router>\n        </UpdateHandler>\n      </I18nManager>\n    </RootProvider>\n  </ThemeProvider>\n)\n\ninstallSentry(() => {\n  const rootElement = document.getElementById('root')\n  render(<Main />, rootElement)\n})\n","// @ts-ignore temporary before figuring out a logging solution that works in prod\nwindow.localStorage.setItem('debug', '*,-sockjs*')\n","import './App.css'\n\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ConnectionWarning } from './atoms/ConnectionWarning'\nimport { ErrorContainer } from './atoms/ErrorContainer'\nimport Pacman from './atoms/Pacman'\nimport { useRoot } from './atoms/RootProvider'\nimport { SnackProvider } from './atoms/SnackProvider'\nimport { Routing } from './routes/Routing'\n\nexport const App: React.SFC = () => {\n  const { user } = useRoot()\n  return (\n    <ErrorContainer prod={process.env.NODE_ENV === 'production'}>\n      <>\n        <ConnectionWarning />\n        <SnackProvider>\n          <Observer>{() => (user.isReady ? <Routing /> : <Pacman />)}</Observer>\n        </SnackProvider>\n      </>\n    </ErrorContainer>\n  )\n}\n","import { Trans } from '@lingui/react'\nimport { Dialog } from '@material-ui/core'\nimport { WarningTwoTone } from '@material-ui/icons'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport connectionWarningSound from '../assets/connectionWarning.mp3'\nimport { isNetworkOffline } from '../helpers/offline'\nimport { Colors } from '../styling'\nimport { SoundPlayInterval } from './SoundPlayInterval'\n\nconst MessageStyled = styled.div`\n  padding: 1rem;\n  background-color: ${Colors.red} !important;\n  font-size: 2rem;\n\n  & svg {\n    position: relative;\n    top: 0.3rem;\n    padding-right: 0.5rem;\n  }\n`\n\nexport const ConnectionWarning = observer(() => {\n  return (\n    <>\n      <SoundPlayInterval\n        shouldPlay={isNetworkOffline()}\n        intervalSec={30}\n        soundUrl={connectionWarningSound}\n      />\n\n      <Dialog\n        open={isNetworkOffline()}\n        disableBackdropClick={true}\n        disableEscapeKeyDown={true}\n      >\n        <MessageStyled>\n          <WarningTwoTone fontSize=\"large\" />\n          <Trans>Internet connection is not available</Trans>\n        </MessageStyled>\n      </Dialog>\n    </>\n  )\n})\n","module.exports = __webpack_public_path__ + \"static/media/connectionWarning.ac6fe03b.mp3\";","import { addSeconds, differenceInMilliseconds } from 'date-fns'\nimport { Component } from 'react'\n\ninterface IRenderProps {\n  isActive: boolean\n  nextLoop(): void\n}\n\ninterface IProps {\n  intervalSec: number\n  enabled?: boolean\n  render(props: IRenderProps): ReactNode\n}\n\ninterface IState {\n  isActive: boolean\n  nextTime: Date\n}\n\nexport class IntervalRender extends Component<IProps, IState> {\n  state: IState = { isActive: false, nextTime: this.getNextTime() }\n  timer = 0\n  componentDidMount() {\n    this.executeTimer()\n  }\n  componentDidUpdate() {\n    this.executeTimer()\n  }\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer)\n    }\n  }\n  getNextTime() {\n    return addSeconds(new Date(), this.props.intervalSec)\n  }\n  executeTimer = () => {\n    if (this.timer) {\n      clearTimeout(this.timer)\n      this.timer = 0\n    }\n    if (this.props.enabled === false) {\n      return\n    }\n    const timeMs = differenceInMilliseconds(this.state.nextTime, new Date())\n    // @ts-ignore (setTimeout returning NodeJS.Timer) for some weird reason\n    this.timer = setTimeout(this.activate, timeMs)\n  }\n  activate = () => {\n    if (this.props.enabled !== false) {\n      this.setState({\n        isActive: true,\n        nextTime: this.getNextTime(),\n      })\n    }\n  }\n  deactivate = () => {\n    this.setState({ isActive: false })\n    this.executeTimer()\n  }\n  render() {\n    const { isActive } = this.state\n    return this.props.render({\n      isActive,\n      nextLoop: this.deactivate,\n    })\n  }\n}\n","import { createContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const RootContext = createContext<TRootModel | undefined>(undefined)\n","import { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { BatchHttpLink } from 'apollo-link-batch-http'\nimport QueueLink from 'apollo-link-queue'\nimport { RetryLink } from 'apollo-link-retry'\nimport { autorun } from 'mobx'\n\nimport { appConfig } from '../config'\nimport { logGraph } from '../helpers/logger'\nimport { isNetworkOnline } from '../helpers/offline'\nimport { TAuthModel } from '../models/AuthModel'\nimport createAuthLink from './AuthLink'\nimport { createErrorLink } from './errorHandler'\nimport createSubscriptionLink, {\n  isSubscriptionOperation,\n} from './SubscriptionLink'\n\nexport function createApolloClient(auth: TAuthModel) {\n  const cache = new InMemoryCache({\n    dataIdFromObject: (o: { __typename?: string; id?: string }) => {\n      if (o.__typename != null && o.id != null) {\n        return `${o.__typename}-${o.id}`\n      }\n      return null\n    },\n  })\n\n  const authLink = createAuthLink(auth)\n  const retryLink = createRetryLink()\n  const offlineLink = createOfflineLink()\n  const errorLink = createErrorLink()\n  const httpLink = createHttpLink()\n  const subscriptionLink = createSubscriptionLink(auth)\n\n  const client = new ApolloClient({\n    link: ApolloLink.from([authLink, retryLink, offlineLink, errorLink]).split(\n      isSubscriptionOperation,\n      subscriptionLink,\n      httpLink,\n    ),\n    cache,\n  })\n\n  return client\n}\n\nfunction createHttpLink() {\n  return new BatchHttpLink({\n    uri: `${appConfig.endpoint}/graphql`,\n    credentials: 'same-origin',\n  })\n}\n\nfunction createRetryLink() {\n  return new RetryLink({\n    delay: {\n      initial: 300,\n      max: Infinity,\n      jitter: true,\n    },\n    attempts: {\n      max: 5,\n      retryIf: (error, _operation) => !!error,\n    },\n  })\n}\n\nfunction createOfflineLink() {\n  const offlineLink = new QueueLink()\n  autorun(() => {\n    if (isNetworkOnline()) {\n      logGraph('client is online')\n      offlineLink.open()\n    } else {\n      logGraph('client is offline')\n      offlineLink.close()\n    }\n  })\n  return offlineLink\n}\n","import { ApolloLink, FetchResult, Observable } from 'apollo-link'\nimport { computed } from 'mobx'\nimport VError from 'verror'\n\nimport { TAuthModel } from '../models/AuthModel'\n\nexport default function createAuthLink(auth: TAuthModel) {\n  const headers = computed(() => ({\n    Authorization: `Bearer ${auth.communicationToken}`,\n  }))\n\n  return new ApolloLink((operation, forward) => {\n    if (!auth.canCommunicate) {\n      throw new VError(\n        `Executing operation ${operation.operationName} before authenticated`,\n        { operation },\n      )\n    }\n\n    const context = operation.getContext()\n    operation.setContext({ ...context, headers: headers.get() })\n\n    return new Observable<FetchResult>(observer => {\n      const sub = forward!(operation).subscribe({\n        error: networkError => {\n          if (\n            networkError.result &&\n            networkError.result.code === 'INVALID_TOKEN'\n          ) {\n            auth.invalidate()\n            return\n          }\n          observer.error(networkError)\n        },\n        next: observer.next.bind(observer),\n        complete: observer.complete.bind(observer),\n      })\n      return () => sub.unsubscribe()\n    })\n  })\n}\n","import ActionCable from 'actioncable'\nimport { ApolloLink, Observable, Operation } from 'apollo-link'\nimport { getOperationDefinitionOrDie } from 'apollo-utilities'\nimport { print } from 'graphql/language'\nimport { computed } from 'mobx'\nimport { VError } from 'verror'\n\nimport { appConfig } from '../config'\nimport { TAuthModel } from '../models/AuthModel'\n\nconst getChannelId = () =>\n  Math.round(Date.now() + Math.random() * 100000).toString(16)\n\nexport default function createSubscriptionLink(auth: TAuthModel) {\n  const cableUrl = computed(\n    () => `${appConfig.endpoint}/cable?token=${auth.token}`,\n  )\n\n  let cable\n  const channelName = 'GraphqlChannel'\n  const actionName = 'execute'\n  const connectionParams = {}\n\n  return new ApolloLink(operation => {\n    if (!auth.isAuthenticated) {\n      throw new VError(\n        `Executing operation ${operation.operationName} before authenticated`,\n        { operation },\n      )\n    }\n    if (!cable) {\n      cable = ActionCable.createConsumer(cableUrl.get())\n    }\n    return new Observable(observer => {\n      const channelId = getChannelId()\n\n      const subscription = cable.subscriptions.create(\n        Object.assign(\n          {},\n          {\n            channel: channelName,\n            channelId: channelId,\n          },\n          connectionParams,\n        ),\n        {\n          connected: function() {\n            this.perform(actionName, {\n              query: operation.query ? print(operation.query) : null,\n              variables: operation.variables,\n              // @ts-ignore\n              operationId: operation.operationId,\n              operationName: operation.operationName,\n            })\n          },\n          received: function(payload: {\n            result: { data: object }\n            more: boolean\n          }) {\n            if (payload.result.data) {\n              observer.next(payload.result)\n            }\n\n            if (!payload.more) {\n              this.unsubscribe()\n              observer.complete()\n            }\n          },\n        },\n      )\n\n      return subscription\n    })\n  })\n}\n\nexport function isSubscriptionOperation({ query }: Operation) {\n  const { operation } = getOperationDefinitionOrDie(query)\n  return operation === 'subscription'\n}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersistence } from './logger'\n\nconst persistenceKey = appConfig.persistenceKey\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = (snapshot: object) =>\n    localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersistence('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersistence('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersistence('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { getParent, Instance, types } from 'mobx-state-tree'\n\nimport { TAuthModel } from '../../../models/AuthModel'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { PasswordLoginModel } from './PasswordLoginModel'\n\nexport const LoginProviderModel = BaseModel.named('LoginProvider')\n  .props({\n    passwordLogin: types.optional(PasswordLoginModel, {}),\n  })\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      const auth = getParent<TAuthModel>(self)\n      auth.authenticate(token, userId)\n    },\n  }))\n\nexport interface TLoginProviderModel\n  extends Instance<typeof LoginProviderModel> {}\n","import { getParent } from 'mobx-state-tree'\n\nimport { IRootEnvironment } from '../../../atoms/RootProvider'\nimport { appConfig } from '../../../config'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TLoginProviderModel } from './LoginProviderModel'\n\nconst getLoginUrl = ({ username, password }: Dictionary<string>) =>\n  `${appConfig.endpoint}/users/token?username=${username}&password=${password}`\n\nexport const PasswordLoginModel = BaseModel.named('PasswordLogin')\n  .volatile(self => ({\n    errorCode: '',\n    errorMessage: '',\n  }))\n  .views(self => ({\n    get hasFailed() {\n      return Boolean(self.errorCode)\n    },\n  }))\n  .actions(self => ({\n    setFailure(code: string, message: string) {\n      self.errorCode = code\n      self.errorMessage = message\n    },\n    setSuccess(token: string, userId: string) {\n      const provider = getParent(self) as TLoginProviderModel\n      provider.authenticate(token, userId)\n    },\n  }))\n  .actions(self => ({\n    async requestToken(username: string, password: string) {\n      const url = getLoginUrl({ username, password })\n      const fetch: TFetch = window.fetch\n      const response = await fetch(url, {\n        headers: {\n          Accept: 'application/json',\n        },\n      })\n      const payload = await response.json()\n      self.log('received payload %j', payload)\n\n      if (response.status !== 200) {\n        self.setFailure(payload.code, payload.error)\n        self.log('token request failed for username %s', username)\n      } else {\n        self.setSuccess(payload.token, String(payload.userId))\n        self.log(\n          'token request success for username %s [%s]',\n          username,\n          payload.userId,\n        )\n      }\n    },\n  }))\n\nexport type TPasswordLoginModel = typeof PasswordLoginModel.Type\n\nexport const createPasswordLoginModelMock = (\n  overrides = {},\n  env: IRootEnvironment,\n) => PasswordLoginModel.create({ ...overrides }, env)\n","import gql from 'graphql-tag'\n\nexport const PasswordChangeMutation = gql`\n  mutation MPasswordChange($password: String!) {\n    updateUserPassword(newPassword: $password) {\n      id\n      token\n    }\n  }\n`\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { AuthModel } from '../models/AuthModel'\nimport { ConfigModel } from '../models/ConfigModel'\nimport { UserModel } from '../models/UserModel'\nimport { CreateOrderModel } from '../segments/createorder/models/CreateOrderModel'\nimport { OrderModel } from '../segments/order/models/OrderModel'\nimport { StatisticsModel } from '../segments/overview/models/StatisticsModel'\nimport { SettingsModel } from '../segments/settings/models/SettingsModel'\nimport { ZoneModel } from '../segments/zones/models/ZoneModel'\nimport { BaseModel } from './BaseModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    user: types.optional(UserModel, {}),\n    order: types.optional(OrderModel, {}),\n    createOrder: types.optional(CreateOrderModel, {}),\n    zone: types.optional(ZoneModel, {}),\n    settings: types.optional(SettingsModel, {}),\n    config: types.optional(ConfigModel, {}),\n    statistics: types.optional(StatisticsModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.settings,\n        self.zone,\n        self.order,\n        self.statistics,\n        self.createOrder,\n      ]\n    },\n  }))\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import { BaseModel } from '../models/BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  soundEnabled: true,\n  orderListPollIntervalSec: 60,\n  orderListSoundIntervalSec: 60,\n})\n\nexport type TConfigModel = typeof ConfigModel.Type\nexport type TConfigModelProps = typeof ConfigModel.SnapshotType\n","import _ from 'lodash'\nimport { autorun } from 'mobx'\nimport { flow, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\n\nimport { GCompanyBranch, GUserModelBootstrap } from '../graph/types'\nimport { logBootstrap, logLang } from '../helpers/logger'\nimport { RM } from '../helpers/ramda'\nimport { changeLanguage, detectLanguage } from '../i18n'\nimport { BaseModel } from '../models/BaseModel'\nimport { UserModelBootstrapQuery } from './UserModel.graphql'\n\ninterface IVolatileProps {\n  isLoaded: boolean\n  branches: ReadonlyArray<GCompanyBranch.Fragment>\n  brands: ReadonlyArray<GCompanyBranch.Brand>\n  soundEnabled: boolean\n  access: Maybe<IUserAccess>\n  permissions: GUserModelBootstrap.UserPermissions\n}\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    language: types.maybe(types.string),\n    soundVolume: types.optional(types.number, 25),\n    soundIgnore: false,\n  })\n  .volatile<IVolatileProps>(() => ({\n    isLoaded: false,\n    branches: [],\n    brands: [],\n    soundEnabled: false,\n    access: null,\n    permissions: {\n      canCancelOrders: false,\n      canCreateOrder: false,\n    },\n  }))\n  .views(self => ({\n    get branchesId() {\n      return self.branches.map(R.prop('id'))\n    },\n    get defaultBranch() {\n      if (self.branches.length === 0) {\n        throw new Error('No user branches available to get defaultBranchId')\n      }\n      return self.branches[0]\n    },\n    filterBranches(predicate: (value: GCompanyBranch.Fragment) => boolean) {\n      return self.branches.filter(predicate)\n    },\n    canQuery(queryName: string) {\n      return (\n        self.access !== null && self.access.queries.has(queryName.toLowerCase())\n      )\n    },\n    canMutate(mutationName: string) {\n      return (\n        self.access !== null &&\n        self.access.mutations.has(mutationName.toLowerCase())\n      )\n    },\n    get isReady() {\n      return self.isLoaded || !self.root.auth.isAuthenticated\n    },\n  }))\n  .actions(self => ({\n    applyUserData(user: GUserModelBootstrap.User) {\n      self.branches = user.branches\n      self.brands = RM.uniqBy(\n        RM.prop('id'),\n        user.branches.map(RM.prop('brand')),\n      )\n    },\n    applyUserPermissions(permissions: GUserModelBootstrap.UserPermissions) {\n      self.permissions = permissions\n    },\n    applyUserAccess(access: IAccessRaw) {\n      self.access = _.mapValues(\n        access,\n        ({ fields }) =>\n          new Set(\n            fields.map(\n              RM.compose(\n                RM.toLower,\n                RM.prop('name'),\n              ),\n            ),\n          ),\n      )\n    },\n    setLanguage: flow(function*(language: string) {\n      logLang('changing to language %s from user profile', language)\n      yield changeLanguage(language)\n      self.language = language\n    }),\n    finishBootstrap() {\n      self.isLoaded = true\n    },\n    controlSound(enabled: boolean = true, ignore: boolean = false) {\n      self.soundEnabled = enabled\n      self.soundIgnore = ignore\n    },\n    setSoundVolume(volume: number) {\n      self.soundVolume = volume\n    },\n  }))\n  .actions(self => {\n    const queryUser = async (userId: ID) => {\n      const variables: GUserModelBootstrap.Variables = {\n        userId,\n      }\n      const { data } = await self.client.query<GUserModelBootstrap.Query>({\n        query: UserModelBootstrapQuery,\n        variables,\n      })\n      self.setLanguage(data.user.language.rawCode)\n      self.applyUserData(data.user)\n      // @ts-ignore https://github.com/dotansimha/graphql-code-generator/issues/643\n      self.applyUserAccess(data.userAccess)\n      self.applyUserPermissions(data.userPermissions)\n      self.finishBootstrap()\n    }\n\n    const initUser = () => {\n      return new Promise(resolve => {\n        autorun(() => {\n          if (self.root.auth.userId) {\n            logBootstrap('query user')\n            if (!self.language) {\n              self.setLanguage(detectLanguage())\n            }\n            resolve(queryUser(self.root.auth.userId))\n          } else {\n            logBootstrap('user not authenticated')\n            self.setLanguage(detectLanguage())\n            resolve()\n          }\n        })\n      })\n    }\n\n    return { initUser }\n  })\n\ninterface IUserAccess {\n  queries: Set<string>\n  mutations: Set<string>\n  subscriptions: Set<string>\n}\n\ninterface IAccessType {\n  fields: ReadonlyArray<{ name: string }>\n}\n\ninterface IAccessRaw {\n  queries: IAccessType\n  mutations: IAccessType\n  subscriptions: IAccessType\n}\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import moment from 'moment'\n\nexport async function changeMomentLocale(lang: string) {\n  if (lang === 'en') {\n    moment.locale(lang)\n    return\n  }\n  const locale = await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"moment-[index]\" */\n    `moment/locale/${lang}`\n  )\n  moment.updateLocale(lang, locale)\n}\n","var map = {\n\t\"./af\": [\n\t\t5854,\n\t\t3\n\t],\n\t\"./af.js\": [\n\t\t5854,\n\t\t3\n\t],\n\t\"./ar\": [\n\t\t5861,\n\t\t10\n\t],\n\t\"./ar-dz\": [\n\t\t5855,\n\t\t4\n\t],\n\t\"./ar-dz.js\": [\n\t\t5855,\n\t\t4\n\t],\n\t\"./ar-kw\": [\n\t\t5856,\n\t\t5\n\t],\n\t\"./ar-kw.js\": [\n\t\t5856,\n\t\t5\n\t],\n\t\"./ar-ly\": [\n\t\t5857,\n\t\t6\n\t],\n\t\"./ar-ly.js\": [\n\t\t5857,\n\t\t6\n\t],\n\t\"./ar-ma\": [\n\t\t5858,\n\t\t7\n\t],\n\t\"./ar-ma.js\": [\n\t\t5858,\n\t\t7\n\t],\n\t\"./ar-sa\": [\n\t\t5859,\n\t\t8\n\t],\n\t\"./ar-sa.js\": [\n\t\t5859,\n\t\t8\n\t],\n\t\"./ar-tn\": [\n\t\t5860,\n\t\t9\n\t],\n\t\"./ar-tn.js\": [\n\t\t5860,\n\t\t9\n\t],\n\t\"./ar.js\": [\n\t\t5861,\n\t\t10\n\t],\n\t\"./az\": [\n\t\t5862,\n\t\t11\n\t],\n\t\"./az.js\": [\n\t\t5862,\n\t\t11\n\t],\n\t\"./be\": [\n\t\t5863,\n\t\t12\n\t],\n\t\"./be.js\": [\n\t\t5863,\n\t\t12\n\t],\n\t\"./bg\": [\n\t\t5864,\n\t\t13\n\t],\n\t\"./bg.js\": [\n\t\t5864,\n\t\t13\n\t],\n\t\"./bm\": [\n\t\t5865,\n\t\t14\n\t],\n\t\"./bm.js\": [\n\t\t5865,\n\t\t14\n\t],\n\t\"./bn\": [\n\t\t5866,\n\t\t15\n\t],\n\t\"./bn.js\": [\n\t\t5866,\n\t\t15\n\t],\n\t\"./bo\": [\n\t\t5867,\n\t\t16\n\t],\n\t\"./bo.js\": [\n\t\t5867,\n\t\t16\n\t],\n\t\"./br\": [\n\t\t5868,\n\t\t17\n\t],\n\t\"./br.js\": [\n\t\t5868,\n\t\t17\n\t],\n\t\"./bs\": [\n\t\t5869,\n\t\t18\n\t],\n\t\"./bs.js\": [\n\t\t5869,\n\t\t18\n\t],\n\t\"./ca\": [\n\t\t5870,\n\t\t19\n\t],\n\t\"./ca.js\": [\n\t\t5870,\n\t\t19\n\t],\n\t\"./cs\": [\n\t\t5871,\n\t\t20\n\t],\n\t\"./cs.js\": [\n\t\t5871,\n\t\t20\n\t],\n\t\"./cv\": [\n\t\t5872,\n\t\t21\n\t],\n\t\"./cv.js\": [\n\t\t5872,\n\t\t21\n\t],\n\t\"./cy\": [\n\t\t5873,\n\t\t22\n\t],\n\t\"./cy.js\": [\n\t\t5873,\n\t\t22\n\t],\n\t\"./da\": [\n\t\t5874,\n\t\t23\n\t],\n\t\"./da.js\": [\n\t\t5874,\n\t\t23\n\t],\n\t\"./de\": [\n\t\t5877,\n\t\t26\n\t],\n\t\"./de-at\": [\n\t\t5875,\n\t\t24\n\t],\n\t\"./de-at.js\": [\n\t\t5875,\n\t\t24\n\t],\n\t\"./de-ch\": [\n\t\t5876,\n\t\t25\n\t],\n\t\"./de-ch.js\": [\n\t\t5876,\n\t\t25\n\t],\n\t\"./de.js\": [\n\t\t5877,\n\t\t26\n\t],\n\t\"./dv\": [\n\t\t5878,\n\t\t27\n\t],\n\t\"./dv.js\": [\n\t\t5878,\n\t\t27\n\t],\n\t\"./el\": [\n\t\t5879,\n\t\t28\n\t],\n\t\"./el.js\": [\n\t\t5879,\n\t\t28\n\t],\n\t\"./en-au\": [\n\t\t5880,\n\t\t29\n\t],\n\t\"./en-au.js\": [\n\t\t5880,\n\t\t29\n\t],\n\t\"./en-ca\": [\n\t\t5881,\n\t\t30\n\t],\n\t\"./en-ca.js\": [\n\t\t5881,\n\t\t30\n\t],\n\t\"./en-gb\": [\n\t\t5882,\n\t\t31\n\t],\n\t\"./en-gb.js\": [\n\t\t5882,\n\t\t31\n\t],\n\t\"./en-ie\": [\n\t\t5883,\n\t\t32\n\t],\n\t\"./en-ie.js\": [\n\t\t5883,\n\t\t32\n\t],\n\t\"./en-il\": [\n\t\t5884,\n\t\t33\n\t],\n\t\"./en-il.js\": [\n\t\t5884,\n\t\t33\n\t],\n\t\"./en-nz\": [\n\t\t5885,\n\t\t34\n\t],\n\t\"./en-nz.js\": [\n\t\t5885,\n\t\t34\n\t],\n\t\"./eo\": [\n\t\t5886,\n\t\t35\n\t],\n\t\"./eo.js\": [\n\t\t5886,\n\t\t35\n\t],\n\t\"./es\": [\n\t\t5889,\n\t\t38\n\t],\n\t\"./es-do\": [\n\t\t5887,\n\t\t36\n\t],\n\t\"./es-do.js\": [\n\t\t5887,\n\t\t36\n\t],\n\t\"./es-us\": [\n\t\t5888,\n\t\t37\n\t],\n\t\"./es-us.js\": [\n\t\t5888,\n\t\t37\n\t],\n\t\"./es.js\": [\n\t\t5889,\n\t\t38\n\t],\n\t\"./et\": [\n\t\t5890,\n\t\t39\n\t],\n\t\"./et.js\": [\n\t\t5890,\n\t\t39\n\t],\n\t\"./eu\": [\n\t\t5891,\n\t\t40\n\t],\n\t\"./eu.js\": [\n\t\t5891,\n\t\t40\n\t],\n\t\"./fa\": [\n\t\t5892,\n\t\t41\n\t],\n\t\"./fa.js\": [\n\t\t5892,\n\t\t41\n\t],\n\t\"./fi\": [\n\t\t5893,\n\t\t42\n\t],\n\t\"./fi.js\": [\n\t\t5893,\n\t\t42\n\t],\n\t\"./fo\": [\n\t\t5894,\n\t\t43\n\t],\n\t\"./fo.js\": [\n\t\t5894,\n\t\t43\n\t],\n\t\"./fr\": [\n\t\t5897,\n\t\t46\n\t],\n\t\"./fr-ca\": [\n\t\t5895,\n\t\t44\n\t],\n\t\"./fr-ca.js\": [\n\t\t5895,\n\t\t44\n\t],\n\t\"./fr-ch\": [\n\t\t5896,\n\t\t45\n\t],\n\t\"./fr-ch.js\": [\n\t\t5896,\n\t\t45\n\t],\n\t\"./fr.js\": [\n\t\t5897,\n\t\t46\n\t],\n\t\"./fy\": [\n\t\t5898,\n\t\t47\n\t],\n\t\"./fy.js\": [\n\t\t5898,\n\t\t47\n\t],\n\t\"./gd\": [\n\t\t5899,\n\t\t48\n\t],\n\t\"./gd.js\": [\n\t\t5899,\n\t\t48\n\t],\n\t\"./gl\": [\n\t\t5900,\n\t\t49\n\t],\n\t\"./gl.js\": [\n\t\t5900,\n\t\t49\n\t],\n\t\"./gom-latn\": [\n\t\t5901,\n\t\t50\n\t],\n\t\"./gom-latn.js\": [\n\t\t5901,\n\t\t50\n\t],\n\t\"./gu\": [\n\t\t5902,\n\t\t51\n\t],\n\t\"./gu.js\": [\n\t\t5902,\n\t\t51\n\t],\n\t\"./he\": [\n\t\t5903,\n\t\t52\n\t],\n\t\"./he.js\": [\n\t\t5903,\n\t\t52\n\t],\n\t\"./hi\": [\n\t\t5904,\n\t\t53\n\t],\n\t\"./hi.js\": [\n\t\t5904,\n\t\t53\n\t],\n\t\"./hr\": [\n\t\t5905,\n\t\t54\n\t],\n\t\"./hr.js\": [\n\t\t5905,\n\t\t54\n\t],\n\t\"./hu\": [\n\t\t5906,\n\t\t55\n\t],\n\t\"./hu.js\": [\n\t\t5906,\n\t\t55\n\t],\n\t\"./hy-am\": [\n\t\t5907,\n\t\t56\n\t],\n\t\"./hy-am.js\": [\n\t\t5907,\n\t\t56\n\t],\n\t\"./id\": [\n\t\t5908,\n\t\t57\n\t],\n\t\"./id.js\": [\n\t\t5908,\n\t\t57\n\t],\n\t\"./is\": [\n\t\t5909,\n\t\t58\n\t],\n\t\"./is.js\": [\n\t\t5909,\n\t\t58\n\t],\n\t\"./it\": [\n\t\t5910,\n\t\t59\n\t],\n\t\"./it.js\": [\n\t\t5910,\n\t\t59\n\t],\n\t\"./ja\": [\n\t\t5911,\n\t\t60\n\t],\n\t\"./ja.js\": [\n\t\t5911,\n\t\t60\n\t],\n\t\"./jv\": [\n\t\t5912,\n\t\t61\n\t],\n\t\"./jv.js\": [\n\t\t5912,\n\t\t61\n\t],\n\t\"./ka\": [\n\t\t5913,\n\t\t62\n\t],\n\t\"./ka.js\": [\n\t\t5913,\n\t\t62\n\t],\n\t\"./kk\": [\n\t\t5914,\n\t\t63\n\t],\n\t\"./kk.js\": [\n\t\t5914,\n\t\t63\n\t],\n\t\"./km\": [\n\t\t5915,\n\t\t64\n\t],\n\t\"./km.js\": [\n\t\t5915,\n\t\t64\n\t],\n\t\"./kn\": [\n\t\t5916,\n\t\t65\n\t],\n\t\"./kn.js\": [\n\t\t5916,\n\t\t65\n\t],\n\t\"./ko\": [\n\t\t5917,\n\t\t66\n\t],\n\t\"./ko.js\": [\n\t\t5917,\n\t\t66\n\t],\n\t\"./ky\": [\n\t\t5918,\n\t\t67\n\t],\n\t\"./ky.js\": [\n\t\t5918,\n\t\t67\n\t],\n\t\"./lb\": [\n\t\t5919,\n\t\t68\n\t],\n\t\"./lb.js\": [\n\t\t5919,\n\t\t68\n\t],\n\t\"./lo\": [\n\t\t5920,\n\t\t69\n\t],\n\t\"./lo.js\": [\n\t\t5920,\n\t\t69\n\t],\n\t\"./lt\": [\n\t\t5921,\n\t\t70\n\t],\n\t\"./lt.js\": [\n\t\t5921,\n\t\t70\n\t],\n\t\"./lv\": [\n\t\t5922,\n\t\t71\n\t],\n\t\"./lv.js\": [\n\t\t5922,\n\t\t71\n\t],\n\t\"./me\": [\n\t\t5923,\n\t\t72\n\t],\n\t\"./me.js\": [\n\t\t5923,\n\t\t72\n\t],\n\t\"./mi\": [\n\t\t5924,\n\t\t73\n\t],\n\t\"./mi.js\": [\n\t\t5924,\n\t\t73\n\t],\n\t\"./mk\": [\n\t\t5925,\n\t\t74\n\t],\n\t\"./mk.js\": [\n\t\t5925,\n\t\t74\n\t],\n\t\"./ml\": [\n\t\t5926,\n\t\t75\n\t],\n\t\"./ml.js\": [\n\t\t5926,\n\t\t75\n\t],\n\t\"./mn\": [\n\t\t5927,\n\t\t76\n\t],\n\t\"./mn.js\": [\n\t\t5927,\n\t\t76\n\t],\n\t\"./mr\": [\n\t\t5928,\n\t\t77\n\t],\n\t\"./mr.js\": [\n\t\t5928,\n\t\t77\n\t],\n\t\"./ms\": [\n\t\t5930,\n\t\t79\n\t],\n\t\"./ms-my\": [\n\t\t5929,\n\t\t78\n\t],\n\t\"./ms-my.js\": [\n\t\t5929,\n\t\t78\n\t],\n\t\"./ms.js\": [\n\t\t5930,\n\t\t79\n\t],\n\t\"./mt\": [\n\t\t5931,\n\t\t80\n\t],\n\t\"./mt.js\": [\n\t\t5931,\n\t\t80\n\t],\n\t\"./my\": [\n\t\t5932,\n\t\t81\n\t],\n\t\"./my.js\": [\n\t\t5932,\n\t\t81\n\t],\n\t\"./nb\": [\n\t\t5933,\n\t\t82\n\t],\n\t\"./nb.js\": [\n\t\t5933,\n\t\t82\n\t],\n\t\"./ne\": [\n\t\t5934,\n\t\t83\n\t],\n\t\"./ne.js\": [\n\t\t5934,\n\t\t83\n\t],\n\t\"./nl\": [\n\t\t5936,\n\t\t85\n\t],\n\t\"./nl-be\": [\n\t\t5935,\n\t\t84\n\t],\n\t\"./nl-be.js\": [\n\t\t5935,\n\t\t84\n\t],\n\t\"./nl.js\": [\n\t\t5936,\n\t\t85\n\t],\n\t\"./nn\": [\n\t\t5937,\n\t\t86\n\t],\n\t\"./nn.js\": [\n\t\t5937,\n\t\t86\n\t],\n\t\"./pa-in\": [\n\t\t5938,\n\t\t87\n\t],\n\t\"./pa-in.js\": [\n\t\t5938,\n\t\t87\n\t],\n\t\"./pl\": [\n\t\t5939,\n\t\t88\n\t],\n\t\"./pl.js\": [\n\t\t5939,\n\t\t88\n\t],\n\t\"./pt\": [\n\t\t5941,\n\t\t90\n\t],\n\t\"./pt-br\": [\n\t\t5940,\n\t\t89\n\t],\n\t\"./pt-br.js\": [\n\t\t5940,\n\t\t89\n\t],\n\t\"./pt.js\": [\n\t\t5941,\n\t\t90\n\t],\n\t\"./ro\": [\n\t\t5942,\n\t\t91\n\t],\n\t\"./ro.js\": [\n\t\t5942,\n\t\t91\n\t],\n\t\"./ru\": [\n\t\t5943,\n\t\t92\n\t],\n\t\"./ru.js\": [\n\t\t5943,\n\t\t92\n\t],\n\t\"./sd\": [\n\t\t5944,\n\t\t93\n\t],\n\t\"./sd.js\": [\n\t\t5944,\n\t\t93\n\t],\n\t\"./se\": [\n\t\t5945,\n\t\t94\n\t],\n\t\"./se.js\": [\n\t\t5945,\n\t\t94\n\t],\n\t\"./si\": [\n\t\t5946,\n\t\t95\n\t],\n\t\"./si.js\": [\n\t\t5946,\n\t\t95\n\t],\n\t\"./sk\": [\n\t\t5947,\n\t\t96\n\t],\n\t\"./sk.js\": [\n\t\t5947,\n\t\t96\n\t],\n\t\"./sl\": [\n\t\t5948,\n\t\t97\n\t],\n\t\"./sl.js\": [\n\t\t5948,\n\t\t97\n\t],\n\t\"./sq\": [\n\t\t5949,\n\t\t98\n\t],\n\t\"./sq.js\": [\n\t\t5949,\n\t\t98\n\t],\n\t\"./sr\": [\n\t\t5951,\n\t\t100\n\t],\n\t\"./sr-cyrl\": [\n\t\t5950,\n\t\t99\n\t],\n\t\"./sr-cyrl.js\": [\n\t\t5950,\n\t\t99\n\t],\n\t\"./sr.js\": [\n\t\t5951,\n\t\t100\n\t],\n\t\"./ss\": [\n\t\t5952,\n\t\t101\n\t],\n\t\"./ss.js\": [\n\t\t5952,\n\t\t101\n\t],\n\t\"./sv\": [\n\t\t5953,\n\t\t102\n\t],\n\t\"./sv.js\": [\n\t\t5953,\n\t\t102\n\t],\n\t\"./sw\": [\n\t\t5954,\n\t\t103\n\t],\n\t\"./sw.js\": [\n\t\t5954,\n\t\t103\n\t],\n\t\"./ta\": [\n\t\t5955,\n\t\t104\n\t],\n\t\"./ta.js\": [\n\t\t5955,\n\t\t104\n\t],\n\t\"./te\": [\n\t\t5956,\n\t\t105\n\t],\n\t\"./te.js\": [\n\t\t5956,\n\t\t105\n\t],\n\t\"./tet\": [\n\t\t5957,\n\t\t106\n\t],\n\t\"./tet.js\": [\n\t\t5957,\n\t\t106\n\t],\n\t\"./tg\": [\n\t\t5958,\n\t\t107\n\t],\n\t\"./tg.js\": [\n\t\t5958,\n\t\t107\n\t],\n\t\"./th\": [\n\t\t5959,\n\t\t108\n\t],\n\t\"./th.js\": [\n\t\t5959,\n\t\t108\n\t],\n\t\"./tl-ph\": [\n\t\t5960,\n\t\t109\n\t],\n\t\"./tl-ph.js\": [\n\t\t5960,\n\t\t109\n\t],\n\t\"./tlh\": [\n\t\t5961,\n\t\t110\n\t],\n\t\"./tlh.js\": [\n\t\t5961,\n\t\t110\n\t],\n\t\"./tr\": [\n\t\t5962,\n\t\t111\n\t],\n\t\"./tr.js\": [\n\t\t5962,\n\t\t111\n\t],\n\t\"./tzl\": [\n\t\t5963,\n\t\t112\n\t],\n\t\"./tzl.js\": [\n\t\t5963,\n\t\t112\n\t],\n\t\"./tzm\": [\n\t\t5965,\n\t\t114\n\t],\n\t\"./tzm-latn\": [\n\t\t5964,\n\t\t113\n\t],\n\t\"./tzm-latn.js\": [\n\t\t5964,\n\t\t113\n\t],\n\t\"./tzm.js\": [\n\t\t5965,\n\t\t114\n\t],\n\t\"./ug-cn\": [\n\t\t5966,\n\t\t115\n\t],\n\t\"./ug-cn.js\": [\n\t\t5966,\n\t\t115\n\t],\n\t\"./uk\": [\n\t\t5967,\n\t\t116\n\t],\n\t\"./uk.js\": [\n\t\t5967,\n\t\t116\n\t],\n\t\"./ur\": [\n\t\t5968,\n\t\t117\n\t],\n\t\"./ur.js\": [\n\t\t5968,\n\t\t117\n\t],\n\t\"./uz\": [\n\t\t5970,\n\t\t119\n\t],\n\t\"./uz-latn\": [\n\t\t5969,\n\t\t118\n\t],\n\t\"./uz-latn.js\": [\n\t\t5969,\n\t\t118\n\t],\n\t\"./uz.js\": [\n\t\t5970,\n\t\t119\n\t],\n\t\"./vi\": [\n\t\t5971,\n\t\t120\n\t],\n\t\"./vi.js\": [\n\t\t5971,\n\t\t120\n\t],\n\t\"./x-pseudo\": [\n\t\t5972,\n\t\t121\n\t],\n\t\"./x-pseudo.js\": [\n\t\t5972,\n\t\t121\n\t],\n\t\"./yo\": [\n\t\t5973,\n\t\t122\n\t],\n\t\"./yo.js\": [\n\t\t5973,\n\t\t122\n\t],\n\t\"./zh-cn\": [\n\t\t5974,\n\t\t123\n\t],\n\t\"./zh-cn.js\": [\n\t\t5974,\n\t\t123\n\t],\n\t\"./zh-hk\": [\n\t\t5975,\n\t\t124\n\t],\n\t\"./zh-hk.js\": [\n\t\t5975,\n\t\t124\n\t],\n\t\"./zh-tw\": [\n\t\t5976,\n\t\t125\n\t],\n\t\"./zh-tw.js\": [\n\t\t5976,\n\t\t125\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6417;\nmodule.exports = webpackAsyncContext;","import numeral from 'numeral'\n\nexport async function changeNumeralLocale(lang: string) {\n  if (lang === 'en') {\n    numeral.locale(lang)\n    return\n  }\n  await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"numeral-[index]\" */\n    `numeral/locales/${lang}`\n  )\n  numeral.locale(lang)\n}\n","var map = {\n\t\"./bg\": [\n\t\t5977,\n\t\t126\n\t],\n\t\"./bg.js\": [\n\t\t5977,\n\t\t126\n\t],\n\t\"./chs\": [\n\t\t5978,\n\t\t127\n\t],\n\t\"./chs.js\": [\n\t\t5978,\n\t\t127\n\t],\n\t\"./cs\": [\n\t\t5979,\n\t\t128\n\t],\n\t\"./cs.js\": [\n\t\t5979,\n\t\t128\n\t],\n\t\"./da-dk\": [\n\t\t5980,\n\t\t129\n\t],\n\t\"./da-dk.js\": [\n\t\t5980,\n\t\t129\n\t],\n\t\"./de\": [\n\t\t5982,\n\t\t131\n\t],\n\t\"./de-ch\": [\n\t\t5981,\n\t\t130\n\t],\n\t\"./de-ch.js\": [\n\t\t5981,\n\t\t130\n\t],\n\t\"./de.js\": [\n\t\t5982,\n\t\t131\n\t],\n\t\"./en-au\": [\n\t\t5983,\n\t\t132\n\t],\n\t\"./en-au.js\": [\n\t\t5983,\n\t\t132\n\t],\n\t\"./en-gb\": [\n\t\t5984,\n\t\t133\n\t],\n\t\"./en-gb.js\": [\n\t\t5984,\n\t\t133\n\t],\n\t\"./en-za\": [\n\t\t5985,\n\t\t134\n\t],\n\t\"./en-za.js\": [\n\t\t5985,\n\t\t134\n\t],\n\t\"./es\": [\n\t\t5987,\n\t\t136\n\t],\n\t\"./es-es\": [\n\t\t5986,\n\t\t135\n\t],\n\t\"./es-es.js\": [\n\t\t5986,\n\t\t135\n\t],\n\t\"./es.js\": [\n\t\t5987,\n\t\t136\n\t],\n\t\"./et\": [\n\t\t5988,\n\t\t137\n\t],\n\t\"./et.js\": [\n\t\t5988,\n\t\t137\n\t],\n\t\"./fi\": [\n\t\t5989,\n\t\t138\n\t],\n\t\"./fi.js\": [\n\t\t5989,\n\t\t138\n\t],\n\t\"./fr\": [\n\t\t5992,\n\t\t141\n\t],\n\t\"./fr-ca\": [\n\t\t5990,\n\t\t139\n\t],\n\t\"./fr-ca.js\": [\n\t\t5990,\n\t\t139\n\t],\n\t\"./fr-ch\": [\n\t\t5991,\n\t\t140\n\t],\n\t\"./fr-ch.js\": [\n\t\t5991,\n\t\t140\n\t],\n\t\"./fr.js\": [\n\t\t5992,\n\t\t141\n\t],\n\t\"./hu\": [\n\t\t5993,\n\t\t142\n\t],\n\t\"./hu.js\": [\n\t\t5993,\n\t\t142\n\t],\n\t\"./it\": [\n\t\t5994,\n\t\t143\n\t],\n\t\"./it.js\": [\n\t\t5994,\n\t\t143\n\t],\n\t\"./ja\": [\n\t\t5995,\n\t\t144\n\t],\n\t\"./ja.js\": [\n\t\t5995,\n\t\t144\n\t],\n\t\"./lv\": [\n\t\t5996,\n\t\t145\n\t],\n\t\"./lv.js\": [\n\t\t5996,\n\t\t145\n\t],\n\t\"./nl-be\": [\n\t\t5997,\n\t\t146\n\t],\n\t\"./nl-be.js\": [\n\t\t5997,\n\t\t146\n\t],\n\t\"./nl-nl\": [\n\t\t5998,\n\t\t147\n\t],\n\t\"./nl-nl.js\": [\n\t\t5998,\n\t\t147\n\t],\n\t\"./no\": [\n\t\t5999,\n\t\t148\n\t],\n\t\"./no.js\": [\n\t\t5999,\n\t\t148\n\t],\n\t\"./pl\": [\n\t\t6000,\n\t\t149\n\t],\n\t\"./pl.js\": [\n\t\t6000,\n\t\t149\n\t],\n\t\"./pt-br\": [\n\t\t6001,\n\t\t150\n\t],\n\t\"./pt-br.js\": [\n\t\t6001,\n\t\t150\n\t],\n\t\"./pt-pt\": [\n\t\t6002,\n\t\t151\n\t],\n\t\"./pt-pt.js\": [\n\t\t6002,\n\t\t151\n\t],\n\t\"./ru\": [\n\t\t6004,\n\t\t153\n\t],\n\t\"./ru-ua\": [\n\t\t6003,\n\t\t152\n\t],\n\t\"./ru-ua.js\": [\n\t\t6003,\n\t\t152\n\t],\n\t\"./ru.js\": [\n\t\t6004,\n\t\t153\n\t],\n\t\"./sk\": [\n\t\t6005,\n\t\t154\n\t],\n\t\"./sk.js\": [\n\t\t6005,\n\t\t154\n\t],\n\t\"./sl\": [\n\t\t6006,\n\t\t155\n\t],\n\t\"./sl.js\": [\n\t\t6006,\n\t\t155\n\t],\n\t\"./th\": [\n\t\t6007,\n\t\t156\n\t],\n\t\"./th.js\": [\n\t\t6007,\n\t\t156\n\t],\n\t\"./tr\": [\n\t\t6008,\n\t\t157\n\t],\n\t\"./tr.js\": [\n\t\t6008,\n\t\t157\n\t],\n\t\"./uk-ua\": [\n\t\t6009,\n\t\t158\n\t],\n\t\"./uk-ua.js\": [\n\t\t6009,\n\t\t158\n\t],\n\t\"./vi\": [\n\t\t6010,\n\t\t159\n\t],\n\t\"./vi.js\": [\n\t\t6010,\n\t\t159\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6419;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t7834,\n\t\t164\n\t],\n\t\"./de/messages.js\": [\n\t\t7835,\n\t\t165\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t7837,\n\t\t167\n\t],\n\t\"./en/messages.js\": [\n\t\t7836,\n\t\t166\n\t],\n\t\"./pl/messages.js\": [\n\t\t7838,\n\t\t168\n\t],\n\t\"./sk/messages.js\": [\n\t\t7839,\n\t\t169\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6420;\nmodule.exports = webpackAsyncContext;","import gql from 'graphql-tag'\n\nimport { CompanyBranchFragment } from '../graph/fragments'\n\nexport const UserModelBootstrapQuery = gql`\n  query GUserModelBootstrap($userId: ID!) {\n    user(id: $userId) {\n      id\n      language {\n        rawCode\n      }\n      branches: accessibleBranches {\n        ...GCompanyBranch\n      }\n    }\n    userPermissions: permissions {\n      canCancelOrders\n      canCreateOrder\n    }\n    userAccess: __schema {\n      queries: queryType {\n        fields {\n          name\n        }\n      }\n      mutations: mutationType {\n        fields {\n          name\n        }\n      }\n      subscriptions: subscriptionType {\n        fields {\n          name\n        }\n      }\n    }\n  }\n\n  ${CompanyBranchFragment}\n`\n","import gql from 'graphql-tag'\n\nexport const AddressFragment = gql`\n  fragment GAddress on JsonAddress {\n    state\n    city\n    street\n    houseNumber\n  }\n`\n","import gql from 'graphql-tag'\n\nimport { GeoPointFragment } from './GeoPointFragment.graphql'\n\nexport const CompanyBranchFragment = gql`\n  fragment GCompanyBranch on CompanyBranch {\n    id\n    name\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    gps {\n      ...GGeoPoint\n    }\n    brand {\n      id\n      name\n    }\n  }\n  ${GeoPointFragment}\n`\n","import gql from 'graphql-tag'\n\nimport { EmailFragment } from './EmailFragment.graphql'\nimport { PhoneFragment } from './PhoneFragment.graphql'\n\nexport const CustomerFragment = gql`\n  fragment GCustomer on JsonCustomer {\n    firstName\n    lastName\n    defaultEmail {\n      ...GEmail\n    }\n    defaultPhone {\n      ...GPhone\n    }\n  }\n  ${EmailFragment}\n  ${PhoneFragment}\n`\n","import gql from 'graphql-tag'\n\nexport const PriceFragment = gql`\n  fragment GPrice on PriceConverted {\n    value\n  }\n`\n","import { ApolloQueryResult } from 'apollo-client'\nimport _ from 'lodash'\nimport { flow, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { ExecutionResult } from 'react-apollo'\n\nimport {\n  DeliveryTypeEnum,\n  GCreateOrder,\n  GOrderVam,\n  GValidateLocation,\n  MAcceptOrder,\n  MCancelOrder,\n  SOrderCall,\n} from '../../../graph/types'\nimport { faker } from '../../../helpers/faker'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { IAddressWithGps } from '../../../molecules/AddressSuggest'\nimport {\n  CancelOrderMutation,\n  CreateOrderMutation,\n  ValidateLocationQuery,\n} from './CreateOrderModel.graphql'\n\nexport interface ICall extends Omit<SOrderCall.Call, 'isRinging' | 'eventId'> {\n  eventId?: ID\n}\n\nexport interface IOrderFormValues {\n  deliveryType: DeliveryTypeEnum.Messenger | DeliveryTypeEnum.Pickup\n  phone?: string\n  phonePrefix?: string\n  firstName?: string\n  lastName?: string\n  email?: string\n  note?: string\n}\n\ninterface IVolatileProps {\n  orderId: MaybeID\n  call?: ICall\n  deliveryAddress?: IAddressWithGps\n  notDeliveryLocation: boolean\n  values: IOrderFormValues\n  fakeValues?: Partial<IOrderFormValues>\n  fakeAddress?: IAddressWithGps\n  vamCustomer: Maybe<GOrderVam.VamCustomer>\n}\n\nexport const CreateOrderModel = BaseModel.named('CreateOrder')\n  .props({\n    branchId: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(getDefaultProps)\n  .views(self => ({\n    get currentBranch() {\n      return (\n        self.root.user.branches.find(RM.propEq('id', self.branchId)) ||\n        self.root.user.defaultBranch\n      )\n    },\n  }))\n  .views(self => ({\n    get deliveryType() {\n      return self.values.deliveryType\n    },\n    get isDelivery() {\n      return self.values.deliveryType === DeliveryTypeEnum.Messenger\n    },\n    get hasAddress() {\n      return Boolean(self.deliveryAddress || self.fakeAddress)\n    },\n    get gps() {\n      if (this.isDelivery && this.hasAddress) {\n        if (self.deliveryAddress && self.deliveryAddress.gps) {\n          return clearGps(self.deliveryAddress.gps)\n        } else if (self.fakeAddress && self.fakeAddress.gps) {\n          return clearGps(self.fakeAddress.gps)\n        }\n      }\n      return { ...clearGps(self.currentBranch.gps) }\n    },\n    get phone() {\n      if (self.values.phone !== undefined) {\n        return self.values.phone\n      }\n      return self.call ? self.call.phone : ''\n    },\n    get phonePrefix() {\n      if (self.values.phonePrefix !== undefined) {\n        return self.values.phonePrefix\n      }\n      if (self.call) {\n        return self.call.prefix\n      }\n      if (self.currentBranch.address.country) {\n        return self.currentBranch.address.country.phonePrefix\n      }\n      return '+'\n    },\n    get formValues() {\n      if (self.vamCustomer !== null && self.vamCustomer.isFound) {\n        const { firstName, lastName, email, lastOrder } = self.vamCustomer\n        return _.defaults(\n          { ...self.values },\n          {\n            phone: this.phone,\n            phonePrefix: this.phonePrefix,\n            firstName,\n            lastName,\n            email,\n            note: (lastOrder && lastOrder.note) || '',\n          },\n        )\n      }\n      if (self.fakeValues) {\n        return _.defaults({ ...self.values }, { ...self.fakeValues })\n      }\n      return _.defaults(\n        { ...self.values },\n        { phone: this.phone, phonePrefix: this.phonePrefix },\n      )\n    },\n    get hasOrder() {\n      return self.orderId !== null\n    },\n    get cartRefreshKey() {\n      return `${self.orderId || 0}-${this.deliveryType}-${this.gps.longitude}-${\n        this.gps.latitude\n      }`\n    },\n    get acceptOrderVariables(): MAcceptOrder.Variables {\n      return {\n        orderId: self.orderId!,\n        customer: {\n          firstName: this.formValues.firstName,\n          lastName: this.formValues.lastName,\n          emails: this.formValues.email\n            ? [{ email: this.formValues.email }]\n            : null,\n          phones: this.formValues.phone\n            ? [\n                {\n                  phone: `${this.formValues.phonePrefix}${\n                    this.formValues.phone\n                  }`,\n                },\n              ]\n            : null,\n        },\n        note: this.formValues.note,\n      }\n    },\n  }))\n  .actions(self => {\n    const resetOrder = () => {\n      self.orderId = null\n    }\n    const resetModel = () => {\n      Object.assign(self, getDefaultProps())\n    }\n    const ensureOrder = flow(function*() {\n      if (self.orderId === null && self.branchId) {\n        const variables: GCreateOrder.Variables = {\n          branchId: self.currentBranch.id,\n          deliveryType: self.values.deliveryType,\n          callEventId: self.call && self.call.eventId,\n          gps: self.gps,\n        }\n        const result: ExecutionResult<\n          GCreateOrder.Mutation\n        > = yield self.client.mutate({\n          mutation: CreateOrderMutation,\n          variables,\n        })\n        if (result.data) {\n          self.orderId = result.data.createOrder.id\n        }\n      }\n      return self.orderId!\n    })\n    const cancelOrder = flow(function*() {\n      if (!self.orderId) {\n        resetModel()\n        return\n      }\n      const variables: MCancelOrder.Variables = {\n        orderId: self.orderId,\n      }\n      self.client.mutate({ mutation: CancelOrderMutation, variables })\n      resetModel()\n    })\n\n    return {\n      ensureOrder,\n      cancelOrder,\n      resetOrder,\n      resetModel,\n    }\n  })\n  .actions(self => {\n    const validateLocation = flow(function*() {\n      if (!(self.deliveryAddress && self.deliveryAddress.gps)) {\n        self.notDeliveryLocation = false\n        return\n      }\n      const { latitude, longitude } = self.deliveryAddress.gps\n      const variables: GValidateLocation.Variables = {\n        branchId: self.currentBranch.id,\n        latitude,\n        longitude,\n      }\n      const result: ApolloQueryResult<\n        GValidateLocation.Query\n      > = yield self.client.query({ query: ValidateLocationQuery, variables })\n\n      self.notDeliveryLocation = !result.data.resolveLocation.inDeliveryLocation\n    })\n    return {\n      useLocation(address: IAddressWithGps) {\n        self.deliveryAddress = address\n        validateLocation()\n      },\n      clearLocation() {\n        self.deliveryAddress = undefined\n      },\n    }\n  })\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    userIsCalling(call: ICall | undefined) {\n      self.call = call\n    },\n    updateFormValues(\n      values: IOrderFormValues,\n      touched: { [K in keyof IOrderFormValues]?: boolean },\n    ) {\n      self.values = {\n        deliveryType: values.deliveryType,\n        ..._.pick(values, Object.keys(touched)),\n      }\n      self.log('updated values: %j', self.values)\n    },\n    updateFromVam(vamCustomer: Maybe<GOrderVam.VamCustomer>) {\n      self.vamCustomer = vamCustomer\n      self.log('vam customer: %j', vamCustomer)\n    },\n    updateFormWithFakeValues() {\n      self.fakeValues = {\n        firstName: faker.name.firstName(),\n        lastName: faker.name.lastName(),\n        email: faker.internet.email(),\n        phone: faker.phone.phoneNumberFormat(3).replace(/\\s/g, ''),\n        phonePrefix: '+420',\n        note: faker.lorem.sentence().slice(0, 50 - 1),\n      }\n      self.fakeAddress = {\n        state: '',\n        city: 'Hradec Králové',\n        street: 'Opletalova',\n        houseNumber: '334/2',\n        gps: {\n          latitude: 50.2129839,\n          longitude: 15.8342836,\n        },\n      }\n    },\n  }))\n\nfunction getDefaultProps(): IVolatileProps {\n  return {\n    orderId: null,\n    call: undefined,\n    values: {\n      deliveryType: DeliveryTypeEnum.Messenger,\n      phone: undefined,\n      email: undefined,\n      firstName: undefined,\n      lastName: undefined,\n      note: undefined,\n    },\n    fakeAddress: undefined,\n    fakeValues: undefined,\n    deliveryAddress: undefined,\n    vamCustomer: null,\n    notDeliveryLocation: false,\n  }\n}\n\nfunction clearGps({ latitude, longitude }: GeoPoint) {\n  return { latitude, longitude }\n}\n\nexport interface TCreateOrderModel extends Instance<typeof CreateOrderModel> {}\nexport interface TCreateOrderModelProps\n  extends SnapshotIn<typeof CreateOrderModel> {}\n","import faker from 'faker'\n\nfaker.locale = 'cz'\n\nexport { faker }\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n  persistenceKey: 'admin@local',\n  pageTitleSuffix: 'LOCAL',\n  sentryDSN: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'admin@dev',\n    pageTitleSuffix: 'DEV',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'admin@prod',\n    pageTitleSuffix: 'Speɘdlo',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n","import { types } from 'mobx-state-tree'\n\nimport { OrderListModel } from './OrderListModel'\nimport { OrderMapModel } from './OrderMapModel'\nimport { OrderStateModel } from './OrderStateModel'\n\nexport const OrderModel = types.model('Order', {\n  list: types.optional(OrderListModel, {}),\n  map: types.optional(OrderMapModel, {}),\n  state: types.optional(OrderStateModel, {}),\n})\n\nexport type TOrderModel = typeof OrderModel.Type\n","import { ISetDidChange, Lambda, observable } from 'mobx'\nimport { getParent, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { scroller } from 'react-scroll'\n\nimport { GOrderList, OrderStateCategoryEnum } from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TOrderModel } from './OrderModel'\n\nexport const OrderListModel = BaseModel.named('OrderList')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    collapsedCategories: types.optional(types.array(types.string), [\n      OrderStateCategoryEnum.Finished,\n    ]),\n  })\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length ? Array.from(self.branches) : []\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n    get isSingleBranchSelected() {\n      return self.branches.length === 1\n    },\n    get firstBranchId() {\n      if (self.branches.length === 1) {\n        return self.branches[0]\n      }\n      return null\n    },\n    get orderMap() {\n      return getParent<TOrderModel>(self).map\n    },\n  }))\n  .actions(self => ({\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    panMapToOrder(order: GOrderList.Orders) {\n      self.orderMap.panToOrder(order.id)\n    },\n  }))\n  .extend(self => {\n    const detailOpen = observable.set<ID>()\n\n    return {\n      views: {\n        isOrderDetailOpen(orderId: ID) {\n          return detailOpen.has(orderId)\n        },\n        isCategoryCollapsed(categoryCode: OrderStateCategoryEnum) {\n          return self.collapsedCategories.includes(categoryCode)\n        },\n      },\n      actions: {\n        toggleOrderDetail(orderId: ID) {\n          if (detailOpen.has(orderId)) {\n            detailOpen.delete(orderId)\n          } else {\n            detailOpen.add(orderId)\n          }\n        },\n        toggleCategoryCollapse(category: OrderStateCategoryEnum) {\n          const index = self.collapsedCategories.indexOf(category)\n          if (index >= 0) {\n            self.collapsedCategories.splice(index, 1)\n          } else {\n            self.collapsedCategories.push(category)\n          }\n        },\n        focusOrderDetail(orderId: ID) {\n          if (!detailOpen.has(orderId)) {\n            detailOpen.add(orderId)\n          }\n          setImmediate(() => {\n            scroller.scrollTo(`order-${orderId}`, {\n              smooth: 'easeInOutQuart',\n              containerId: 'order-list',\n              absolute: true,\n              offset: -140,\n            })\n          })\n        },\n        observerOrderDetail: detailOpen.observe.bind(detailOpen) as (\n          listener: (changes: ISetDidChange<ID>) => void,\n        ) => Lambda,\n      },\n    }\n  })\n\nexport interface TOrderListModel extends Instance<typeof OrderListModel> {}\nexport interface TOrderListModelProps\n  extends SnapshotIn<typeof OrderListModel> {}\n","import { GOrderBranchLocation, GOrderLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport {\n  OrderBranchLocationQuery,\n  OrderLocationQuery,\n} from './OrderMapModel.graphql'\n\ninterface IVolatileProps {\n  activeDriverId: MaybeID\n}\n\nexport const OrderMapModel = MapModel.named('OrderMap')\n  .volatile<IVolatileProps>(() => ({\n    activeDriverId: null,\n  }))\n  .actions(self => ({\n    async panToOrder(orderId: ID) {\n      if (!self.mapRef) {\n        return\n      }\n      const { data } = await self.client.query<GOrderLocation.Query>({\n        query: OrderLocationQuery,\n        variables: { orderId },\n      })\n      if (data && data.order.gps) {\n        self.mapRef.panTo(gpsToLatLng(data.order.gps))\n      }\n    },\n    async panToBranch(branchId: ID) {\n      const { data } = await self.client.query<GOrderBranchLocation.Query>({\n        query: OrderBranchLocationQuery,\n        variables: { branchId },\n      })\n      if (!self.mapRef) {\n        return\n      }\n      if (data) {\n        self.mapRef.panTo(gpsToLatLng(data.companyBranch.gps))\n      }\n    },\n    activateDriver(driverId: ID, position: GeoPoint) {\n      self.activeDriverId = driverId\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(position))\n      }\n    },\n  }))\n\nexport type TOrderMapModel = typeof OrderMapModel.Type\n","import gql from 'graphql-tag'\n\nimport { GeoPointFragment } from '../../../graph/fragments'\n\nexport const OrderBranchLocationQuery = gql`\n  query GOrderBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n\nexport const OrderLocationQuery = gql`\n  query GOrderLocation($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n","import {\n  GRemoveOrderDriver,\n  GSelectOrderDriver,\n  GSendOrderNotification,\n  GUpdateOrderState,\n  OrderStateEnum,\n} from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  RemoveOrderDriverMutation,\n  SelectOrderDriverMutation,\n  SendOrderNotificationMutation,\n  UpdateOrderStateMutation,\n} from './OrderStateModel.graphql'\n\nexport const OrderStateModel = BaseModel.named('OrderState')\n  .views(self => ({}))\n  .actions(self => ({\n    async updateOrderState(orderId: ID, state: OrderStateEnum) {\n      const variables: GUpdateOrderState.Variables = {\n        orderId,\n        state,\n      }\n      await self.client.mutate({\n        mutation: UpdateOrderStateMutation,\n        variables,\n      })\n    },\n    async cancelOrder(orderId: ID) {\n      alert('Cancel order')\n      // TODO:\n    },\n  }))\n  .actions(self => ({\n    deliverOrder(orderId: ID) {\n      return self.updateOrderState(orderId, OrderStateEnum.OnWay)\n    },\n    async sendTimeNotification(orderId: ID, minutes: number) {\n      const variables: GSendOrderNotification.Variables = {\n        orderId,\n        minutes,\n      }\n      await self.client.mutate({\n        mutation: SendOrderNotificationMutation,\n        variables,\n      })\n    },\n    async selectDriver(orderId: ID, driverId: ID) {\n      const variables: GSelectOrderDriver.Variables = {\n        orderId,\n        driverId,\n      }\n      await self.client.mutate({\n        mutation: SelectOrderDriverMutation,\n        variables,\n      })\n    },\n    async removeDriver(orderDriverId: ID) {\n      const variables: GRemoveOrderDriver.Variables = {\n        orderDriverId,\n      }\n      await self.client.mutate({\n        mutation: RemoveOrderDriverMutation,\n        variables,\n      })\n    },\n  }))\n\nexport type TOrderStateModel = typeof OrderStateModel.Type\nexport type TOrderStateModelProps = typeof OrderStateModel.SnapshotType\n","import { endOfDay, startOfDay } from 'date-fns'\nimport { types } from 'mobx-state-tree'\n\nimport { GCreateFinancialReport } from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { CreateFinancialReport } from '../organisms/ClosureStatisticsControl.graphql'\n\nexport interface IStatisticsDateFilter {\n  dateTimeFrom: Date\n  dateTimeTo: Date\n}\n\nexport const StatisticsModel = BaseModel.named('Statistics')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    closureBranch: types.maybeNull(types.string),\n  })\n  .volatile<IStatisticsDateFilter>(self => ({\n    dateTimeFrom: startOfDay(new Date()),\n    dateTimeTo: endOfDay(new Date()),\n  }))\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length > 0\n        ? Array.from(self.branches)\n        : self.root.user.branchesId\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n  }))\n  .actions(self => ({\n    updateFilter(formValues: IStatisticsDateFilter) {\n      self.dateTimeFrom = new Date(formValues.dateTimeFrom)\n      self.dateTimeTo = new Date(formValues.dateTimeTo)\n    },\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    setClosureBranch(branch: MaybeID) {\n      self.closureBranch = branch\n    },\n    async createClosure() {\n      if (self.closureBranch) {\n        const variables: GCreateFinancialReport.Variables = {\n          companyBranchId: self.closureBranch,\n        }\n        return self.client.mutate({\n          mutation: CreateFinancialReport,\n          variables,\n          refetchQueries: [`GClosureReportQuery`],\n        })\n      } else {\n        throw new Error('Tried to create a closure without branch selected')\n      }\n    },\n  }))\n\nexport type TStatisticsModel = typeof StatisticsModel.Type\n","import { FetchPolicy } from 'apollo-client'\nimport { types } from 'mobx-state-tree'\n\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { BusinessHoursModel } from '../../businesshours/models/BusinessHoursModel'\nimport { MenuModel } from '../../menu/models/MenuModel'\n\nexport const SettingsModel = BaseModel.named('Settings')\n  .props({\n    selectedBranchId: types.maybe(types.string),\n    businessHours: types.optional(BusinessHoursModel, {}),\n    menu: types.optional(MenuModel, {}),\n  })\n  .views(self => ({\n    get branchId() {\n      return self.selectedBranchId || RM.head(self.root.user.branchesId)\n    },\n    get queryProps() {\n      const branchId = this.branchId\n      if (!branchId) {\n        return { skip: true }\n      }\n      return {\n        fetchPolicy: 'cache-and-network' as FetchPolicy,\n        variables: { branchId },\n      }\n    },\n    getQueryProps<T extends Dictionary>(otherVariables: T) {\n      const branchId = this.branchId\n      if (!branchId) {\n        return { skip: true }\n      }\n      return {\n        variables: Object.assign({ branchId }, otherVariables),\n      }\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.selectedBranchId = branchId\n    },\n  }))\n\nexport type TSettingsModel = typeof SettingsModel.Type\nexport type TSettingsModelProps = typeof SettingsModel.SnapshotType\n","import gql from 'graphql-tag'\n\nimport { SpecificBusinessHourFragment } from '../organisms/SpecificBusinessHours.graphql'\n\nexport const CreateSpecificBusinessHour = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`\n\nexport const DeleteSpecificBusinessHour = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n","import { types } from 'mobx-state-tree'\n\nimport { SettingsBaseModel } from '../../settings/models/SettingsBaseModel'\nimport { MenuCategoryModel } from './MenuCategoryModel'\nimport { MenuRecipeModel } from './MenuRecipeModel'\nimport { MenuStockModel } from './MenuStockModel'\n\nexport const MenuModel = SettingsBaseModel.named('Menu').props({\n  category: types.optional(MenuCategoryModel, {}),\n  recipe: types.optional(MenuRecipeModel, {}),\n  stock: types.optional(MenuStockModel, {}),\n})\n\nexport type TMenuModel = typeof MenuModel.Type\nexport type TMenuModelProps = typeof MenuModel.SnapshotType\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TSettingsModel } from './SettingsModel'\n\nexport const SettingsBaseModel = BaseModel.named('SettingsBase').views(\n  self => ({\n    get settings() {\n      return getParent<TSettingsModel>(self)\n    },\n  }),\n)\n\nexport type TSettingsBaseModel = typeof SettingsBaseModel.Type\nexport type TSettingsBaseModelProps = typeof SettingsBaseModel.SnapshotType\n","import gql from 'graphql-tag'\n\nimport { MenuCategoryFormFragment } from '../organisms/CategoryForm.graphql'\n\nexport const SortMenuCategoryMutation = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport const MenuCategoryCreateMutation = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport const MenuCategoryUpdateMutation = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...GMenuCategoryForm\n    }\n  }\n  ${MenuCategoryFormFragment}\n`\n\nexport const MenuCategoryVisibility = gql`\n  mutation GMenuCategoryVisibility($categoryId: ID!, $visible: Boolean!) {\n    updateWareCategory(id: $categoryId, wareCategory: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport const MenuCategoryDeleteMutation = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n","import { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuStockCreate,\n  GMenuStockDelete,\n  GMenuStockUpdate,\n} from '../../../graph/types'\nimport { TStockFormValues } from '../organisms/StockFormLoader'\nimport { MenuStockListQuery } from '../organisms/StockList.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuStockCreateMutation,\n  MenuStockDeleteMutation,\n  MenuStockUpdateMutation,\n} from './MenuStockModel.graphql'\n\nexport const MenuStockModel = MenuBaseModel.named('MenuStock').actions(\n  self => ({\n    createItem(formValues: TStockFormValues) {\n      const variables: GMenuStockCreate.Variables = {\n        stockItem: {\n          companyBranch: self.branchId,\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockCreateMutation,\n          variables,\n          refetchQueries: [\n            {\n              query: MenuStockListQuery,\n              variables: {\n                branchId: self.branchId,\n              },\n            },\n          ],\n        }),\n      )\n    },\n    updateItem(formValues: TStockFormValues) {\n      const variables: GMenuStockUpdate.Variables = {\n        stockId: formValues.id,\n        stockItem: {\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteItem(stockId: ID) {\n      const variables: GMenuStockDelete.Variables = {\n        stockId,\n      }\n      await self.client.mutate({\n        mutation: MenuStockDeleteMutation,\n        variables,\n        refetchQueries: [\n          {\n            query: MenuStockListQuery,\n            variables: {\n              branchId: self.branchId,\n            },\n          },\n        ],\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(formValues: TStockFormValues) {\n  return {\n    code: formValues.code,\n    label: formValues.nameLabel,\n    note: formValues.note,\n    plu: formValues.plu,\n    allergens: formValues.allergens,\n    wareUnit: formValues.wareUnit!,\n    allowNegative: formValues.allowNegative,\n  }\n}\n\nexport type TMenuStockModel = typeof MenuStockModel.Type\n","import { flow, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\nimport { VError } from 'verror'\n\nimport {\n  GCompanyBranch,\n  GCreateZone,\n  GDestroyZone,\n  GUpdateZone,\n  GUpdateZonePriority,\n  GZone,\n  GZonePriceRange,\n} from '../../../graph/types'\nimport { generatePolygon } from '../../../helpers/gps'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { ZoneMapModel } from '../models/ZoneMapModel'\nimport {\n  CreateZoneMutation,\n  DestroyZoneMutation,\n  UpdateZoneMutation,\n  UpdateZonePriorityMutation,\n} from './ZoneModel.graphql'\n\ninterface IVolatileProps {\n  branch: Maybe<GCompanyBranch.Fragment>\n}\n\nexport const ZoneModel = BaseModel.named('Zone')\n  .props({\n    map: types.optional(ZoneMapModel, {}),\n    brandId: types.maybeNull(types.string),\n  })\n  .volatile<IVolatileProps>(() => ({\n    branch: null,\n  }))\n  .views(self => ({\n    get brand(): Maybe<GCompanyBranch.Brand> {\n      return (\n        (self.brandId &&\n          self.root.user.brands.find(RM.propEq('id', self.brandId))) ||\n        null\n      )\n    },\n    get hasBranchFilter() {\n      return self.branch !== null\n    },\n    get branchFilterId(): MaybeID {\n      return self.branch === null ? null : self.branch.id\n    },\n    get branchFilterPredicate() {\n      if (self.branch) {\n        return R.propEq('id', self.branch.id)\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), ['brand', 'id'])\n    },\n    get zoneFilterPredicate() {\n      if (self.branch !== null) {\n        return R.pathSatisfies(R.equals(self.branch.id), [\n          'companyBranch',\n          'id',\n        ])\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), [\n            'companyBranch',\n            'brand',\n            'id',\n          ])\n    },\n    get branches() {\n      return self.root.user.branches\n    },\n  }))\n  .actions(self => ({\n    setBranchFilter(branch: GCompanyBranch.Fragment) {\n      self.branch = branch\n      self.brandId = branch.brand.id\n      self.map.panToBranch(branch)\n    },\n    setBrandFilter(\n      brand: GCompanyBranch.Brand,\n      brandBranches: GCompanyBranch.Fragment[],\n    ) {\n      self.brandId = brand.id\n      if (!self.branch || self.branch.brand.id !== brand.id) {\n        self.branch =\n          (brandBranches.length === 1 && RM.head(brandBranches)) || null\n      }\n    },\n    clearBranchFilter() {\n      self.branch = null\n    },\n    clearBrandFilter() {\n      self.brandId = null\n      self.branch = null\n    },\n  }))\n  .actions(self => ({\n    createZone: flow(function*(onZoneCreate: (zoneId: ID) => void) {\n      if (self.branch === null) {\n        throw new VError('Called createZone without branch being set')\n      }\n      const points = generatePolygon({\n        center: self.branch.gps,\n        metersRadius: 1000,\n        pointsCount: 5,\n      })\n      const variables: GCreateZone.Variables = {\n        branchId: self.branch.id,\n        points,\n      }\n      const { data } = yield self.client.mutate({\n        mutation: CreateZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: (prev, { mutationResult }) => {\n            const zone = (mutationResult.data as GCreateZone.Mutation)\n              .createZone\n            if (zone) {\n              return {\n                ...prev,\n                zones: prev.zones.concat(zone),\n              }\n            }\n            return prev\n          },\n        },\n      })\n      if (data) {\n        const zone = (data as GCreateZone.Mutation).createZone\n        onZoneCreate(zone.id)\n      }\n    }),\n    // tslint:disable-next-line:no-any\n    async saveZone(zoneId: ID, values: any) {\n      const variables: GUpdateZone.Variables = {\n        zoneId,\n        update: {\n          name: values.name,\n          enabled: values.enabled,\n          companyBranch: values.companyBranch.id,\n          zoneColor: values.zoneColor.id,\n          minimalOrderPrice: {\n            value: Number(values.minimalOrderPrice.value) || 0,\n          },\n          priceRangeRules: values.priceRangeRules\n            .map(normalizePriceRangeRule)\n            .filter(R.reject(R.pathEq(['price', 'value'], null))),\n          geoPolygon: self.map.currentZonePoints || undefined,\n        },\n      }\n      await self.client.mutate({\n        mutation: UpdateZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: (prev, { mutationResult }) => {\n            const zoneIdx = prev.zones.findIndex(R.propEq('id', zoneId))\n            const zone = (mutationResult.data as GUpdateZone.Mutation)\n              .updateZone\n            return {\n              ...prev,\n              zones: R.update(zoneIdx, zone, prev.zones),\n            }\n          },\n        },\n      })\n      self.map.clearZonePoints()\n    },\n    destroyZone(zoneId: ID) {\n      if (!zoneId) {\n        return\n      }\n      const variables: GDestroyZone.Variables = {\n        zoneId,\n      }\n      self.client.mutate({\n        mutation: DestroyZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: prev => {\n            return {\n              ...prev,\n              zones: R.reject(R.propEq('id', zoneId), prev.zones),\n            }\n          },\n        },\n      })\n    },\n    changeZonePriority: flow(function*(\n      zone: GZone.Fragment,\n      oldIndex: number,\n      newIndex: number,\n    ) {\n      if (!zone || oldIndex === newIndex) {\n        return\n      }\n      const offset = oldIndex - newIndex\n\n      const variables: GUpdateZonePriority.Variables = {\n        zoneId: zone.id,\n        offset,\n      }\n      yield self.client.mutate({\n        mutation: UpdateZonePriorityMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          updateZonePriority: {\n            __typename: 'Zone',\n            id: zone.id,\n            priority: zone.priority + offset,\n          },\n        },\n      })\n    }),\n  }))\n\nfunction numberOrNull(value: string | number | null) {\n  if (value === null) {\n    return null\n  }\n  const num = Number(value)\n  return Number.isNaN(num) ? null : num\n}\n\nfunction normalizePriceRangeRule(range: GZonePriceRange.Fragment) {\n  return {\n    price: { value: numberOrNull(range.price.value) },\n    toPrice: { value: numberOrNull(range.toPrice.value) || -1 },\n  }\n}\n\nexport type TZoneModel = typeof ZoneModel.Type\n","import { GCompanyBranch, GZoneLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport { ZoneLocationQuery } from '../Zones.graphql'\n\ninterface IVolatileProps {\n  currentZonePoints: Maybe<GeoPoint[]>\n}\n\nexport const ZoneMapModel = MapModel.named('ZoneMap')\n  .volatile<IVolatileProps>(() => ({\n    currentZonePoints: null,\n  }))\n  .actions(self => ({\n    updateZonePoints(points: GeoPoint[]) {\n      self.currentZonePoints = points\n    },\n    clearZonePoints() {\n      self.currentZonePoints = null\n    },\n    async panToZone(zoneId: ID) {\n      const { data } = await self.client.query({\n        query: ZoneLocationQuery,\n        variables: { zoneId },\n      })\n      if (data) {\n        const {\n          zone: {\n            companyBranch: { gps },\n          },\n        } = data as GZoneLocation.Query\n        if (self.mapRef) {\n          self.mapRef.panTo(gpsToLatLng(gps))\n        }\n      }\n    },\n    async panToBranch(branch: GCompanyBranch.Fragment) {\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(branch.gps))\n      }\n    },\n  }))\n\nexport type TZoneMapModel = typeof ZoneMapModel.Type\n","import gql from 'graphql-tag'\n\nimport { ZoneFragment } from '../Zones.graphql'\n\nexport const CreateZoneMutation = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...GZone\n    }\n  }\n  ${ZoneFragment}\n`\n\nexport const UpdateZoneMutation = gql`\n  mutation GUpdateZone($zoneId: ID!, $update: InputZoneUpdate!) {\n    updateZone(id: $zoneId, zone: $update) {\n      ...GZone\n    }\n  }\n  ${ZoneFragment}\n`\n\nexport const UpdateZonePriorityMutation = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport const DestroyZoneMutation = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n","import React, { ErrorInfo } from 'react'\nimport {\n  DeveloperErrorBoundary,\n  ProductionErrorBoundary,\n} from 'react-error-guard'\n\nimport { reportRenderingError } from '../helpers/sentry'\n\ninterface IProps {\n  prod: boolean\n}\n\nexport const ErrorContainer: React.SFC<IProps> = ({\n  children,\n  prod = false,\n}) => {\n  if (prod) {\n    return (\n      <ProductionErrorBoundary\n        dispatchErrorReporting={(data: { error: Error; info: ErrorInfo }) => {\n          reportRenderingError(data.error, data.info)\n        }}\n      >\n        {children}\n      </ProductionErrorBoundary>\n    )\n  } else {\n    return <DeveloperErrorBoundary>{children}</DeveloperErrorBoundary>\n  }\n}\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport * as detector from 'locales-detector'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport Pacman from './atoms/Pacman'\nimport { useRoot } from './atoms/RootProvider'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\nimport { changeMomentLocale } from './locale/moment'\nimport { changeNumeralLocale } from './locale/numeral'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC = ({ children }) => {\n  const { user } = useRoot()\n  return useObserver(\n    () =>\n      user.language ? (\n        <I18nProvider language={user.language} i18n={i18n}>\n          {React.Children.only(children)}\n        </I18nProvider>\n      ) : (\n        <Pacman />\n      ),\n  )\n}\n\nexport function detectLanguage() {\n  const resolver = new detector.LocaleResolver(\n    [new detector.NavigatorDetector()],\n    [new detector.LanguageOnlyTransformer()],\n  )\n  const languages = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nexport async function changeLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await Promise.all([\n    loadCatalog(lang),\n    changeNumeralLocale(lang),\n    changeMomentLocale(lang),\n  ])\n  i18n.activate(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","import React from 'react'\nimport { Route, Switch } from 'react-router'\n\nimport Pacman from '../atoms/Pacman'\nimport { ErrorPage } from '../pages/ErrorPage'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { LogRoute } from './LogRoute'\nimport { RedirectAfterLogin } from './RedirectAfterLogin'\nimport { RedirectAfterLogout } from './RedirectAfterLogout'\nimport { SecureRoute } from './SecureRoute'\n\nconst PasswordLoginRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordLoginRoute'),\n)\n\nconst PasswordChangeRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordChangeRoute'),\n)\n\nconst MainDashboardPage = React.lazy(() =>\n  import('../segments/main/pages/MainDashboardPage'),\n)\n\nconst OrderRoutes = React.lazy(() =>\n  import('../segments/order/routes/OrderRoutes'),\n)\n\nconst SettingsRoutes = React.lazy(() =>\n  import('../segments/settings/routes/SettingsRoutes'),\n)\n\nconst OverviewRoutes = React.lazy(() =>\n  import('../segments/overview/routes/OverviewRoutes'),\n)\n\nconst SupportPage = React.lazy(() =>\n  import('../segments/main/pages/SupportPage'),\n)\n\nexport const Routing = () => (\n  <React.Suspense fallback={<Pacman />}>\n    <LogRoute />\n    <RedirectAfterLogin />\n    <Switch>\n      <LazyRoute path=\"/login\" exact={true} component={PasswordLoginRoute} />\n      <LazyRoute\n        path=\"/recovery/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <LazyRoute\n        path=\"/register/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <SecureRoute path=\"/\" exact={true} component={MainDashboardPage} />\n      <SecureRoute path=\"/order\" component={OrderRoutes} />\n      <SecureRoute path=\"/settings\" component={SettingsRoutes} />\n      <SecureRoute path=\"/overview\" component={OverviewRoutes} />\n      <LazyRoute path=\"/support\" component={SupportPage} />\n      <Route path=\"/error\" component={ErrorPage} />\n      <Route path=\"/logout\" component={RedirectAfterLogout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </React.Suspense>\n)\n","import { Trans } from '@lingui/react'\nimport { Warning } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\n\nconst IconStyled = styled.div`\n  margin-top: 2rem;\n  color: #d39f40;\n  text-align: center;\n`\n\nexport const ErrorPage: React.SFC = props => (\n  <FullPageLayout\n    width={15}\n    pageTitle={i18n.t`Application error`}\n    useBackButton={true}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          We are sorry, but there is an internal error in the app. Our team was\n          notified and will fix this soon.\n        </Trans>\n        <IconStyled>\n          <Warning style={{ fontSize: '5rem' }} />\n        </IconStyled>\n      </h3>\n    </Card>\n  </FullPageLayout>\n)\n","import 'rc-slider/assets/index.css'\n\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors, Spacing } from '../styling'\nimport { WithRoot } from './WithRoot'\n\nconst SoundControlContainerStyled = styled.div`\n  position: relative;\n`\n\nconst SoundButtonStyled = styled(TouchButton)`\n  height: ${Spacing.ButtonHeight};\n  width: ${Spacing.ButtonHeight};\n  position: absolute;\n  right: 0;\n  top: 0;\n`\n\nexport class SoundControl extends React.Component {\n  state = { playPreview: false }\n  render() {\n    return (\n      <WithRoot\n        observe={true}\n        render={({ user }) => (\n          <SoundControlContainerStyled>\n            <SoundButtonStyled\n              color={user.soundEnabled ? Colors.green : Colors.red}\n              iconName={user.soundEnabled ? 'volume_up' : 'volume_off'}\n              iconSize={2}\n              onClick={() => {\n                user.controlSound(!user.soundEnabled)\n              }}\n            />\n          </SoundControlContainerStyled>\n        )}\n      />\n    )\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { WithRoot } from '../atoms/WithRoot'\nimport { GLogoutWidget } from '../graph/types'\nimport { i18n } from '../i18n'\nimport { Colors } from '../styling'\nimport { QueryLogoutWidget } from './LogoutWidget.graphql'\n\nconst LogoutWidgetStyled = styled.div`\n  margin-left: 1rem;\n  color: ${Colors.greyLight};\n  &:hover {\n    color: ${Colors.white};\n  }\n`\nconst LoggedUserNameStyled = styled.span`\n  color: ${Colors.greyLight};\n  text-decoration: none;\n  font-weight: lighter;\n  position: relative;\n  top: 0.6rem;\n  display: inline-block;\n  max-width: 10rem;\n  text-align: right;\n`\n\nconst IconStyled = styled.span`\n  padding: 0.5rem 0.5rem 0 0.5rem;\n  display: inline-block;\n  vertical-align: top;\n`\n\nexport const LogoutWidget: React.SFC = () => (\n  <WithRoot\n    render={({ auth }) => (\n      <QueryLogoutWidget\n        variables={{ id: auth.userId }}\n        renderLoading={() => null}\n        render={({ user }) => (\n          <LogoutWidgetStyled data-testid=\"logout-widget\">\n            <Link to=\"/logout\">\n              <LoggedUserNameStyled>\n                {getNameDisplay(user)}\n              </LoggedUserNameStyled>\n              <IconStyled>\n                <Icon iconName=\"exit_to_app\" />\n              </IconStyled>\n            </Link>\n          </LogoutWidgetStyled>\n        )}\n      />\n    )}\n  />\n)\n\nfunction getNameDisplay(user: GLogoutWidget.User) {\n  if (user) {\n    return `${user.firstName} ${user.lastName}`\n  } else {\n    return i18n.t`Not logged in`\n  }\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../graph/buildQuery'\nimport { GLogoutWidget } from '../graph/types'\n\nexport const QueryLogoutWidget = buildQuery<\n  GLogoutWidget.Query,\n  GLogoutWidget.Variables\n>(gql`\n  query GLogoutWidget($id: ID!) {\n    user(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n`)\n","import Color from 'color'\nimport React, { MouseEvent } from 'react'\nimport { Route } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { Colors, Radiuses, Spacing } from '../styling'\n\ninterface IHomeButtonProps {\n  iconColor?: Colors\n  color?: Colors\n  disabled?: boolean\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n  goBack?: boolean\n  backRoute?: string\n}\n\nconst applyAlpha = (alphaValue: number) => (props: IHomeButtonProps) =>\n  Color(props.color)\n    .alpha(alphaValue)\n    .string()\n\nconst HomeButtonStyled = styled.button`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 0 0 ${Radiuses.Button} 0 !important;\n  height: ${Spacing.ButtonHeight};\n  width: ${Spacing.ButtonHeight};\n  margin: 0;\n  padding: 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  font-size: 1rem;\n  transition-duration: 0.2s;\n\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nexport const HomeButton: React.SFC<IHomeButtonProps> = ({\n  color = Colors.greyMiddle,\n  iconColor = Colors.white,\n  goBack = false,\n  backRoute,\n  ...props\n}) => {\n  if (goBack) {\n    return (\n      <Route>\n        {({ history }) => (\n          <HomeButtonStyled\n            color={color}\n            onClick={() => {\n              if (backRoute) {\n                history.push(backRoute)\n              } else {\n                history.goBack()\n              }\n            }}\n            {...props}\n          >\n            <Icon iconName=\"chevron_left\" color={iconColor} fontSize={2.2} />\n          </HomeButtonStyled>\n        )}\n      </Route>\n    )\n  }\n  return (\n    <Link to=\"/\">\n      <HomeButtonStyled color={color} {...props}>\n        <Icon iconName=\"home\" color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    </Link>\n  )\n}\n","import React from 'react'\nimport { Route } from 'react-router'\n\nimport { logRouting } from '../helpers/logger'\n\ninterface IProps {}\n\nexport const LogRoute: React.SFC<IProps> = props => (\n  <Route>\n    {({ location }) => {\n      logRouting('at %s', location.pathname)\n      return null\n    }}\n  </Route>\n)\n","import debug from 'debug'\nimport { when } from 'mobx'\nimport React from 'react'\nimport { Route } from 'react-router'\n\nimport { WithRoot } from '../atoms/WithRoot'\n\nconst log = debug('routing')\n\nexport const RedirectAfterLogin = () => (\n  <Route\n    children={({ location, history }) => (\n      <WithRoot\n        render={root => {\n          if (!root.auth.isAuthenticatedUser) {\n            const route = (location.state && location.state.origin) || '/'\n            const waitForAuthentication = () => root.auth.isAuthenticated\n            const redirectAfterLogin = () => {\n              history.replace(route)\n            }\n            when(waitForAuthentication, redirectAfterLogin)\n            log('will redirect to %s when auth', route)\n          }\n          return null\n        }}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { Redirect } from 'react-router'\n\nimport { WithRoot } from '../atoms/WithRoot'\nimport { RedirectToLogin } from './RedirectToLogin'\n\nexport const RedirectAfterLogout = () => (\n  <WithRoot\n    observe={false}\n    render={root => {\n      if (root.auth.isAuthenticated) {\n        root.auth.invalidate()\n        return <RedirectToLogin useOrigin={false} />\n      }\n      return <Redirect to=\"/\" />\n    }}\n  />\n)\n","import React from 'react'\nimport { Provider as GoodByeProvider } from 'react-goodbye'\nimport { BrowserRouter } from 'react-router-dom'\n\ninterface IProps {}\n\nexport const Router: React.SFC<IProps> = ({ children }) => (\n  <GoodByeProvider>\n    {({ handleGetUserConfirm }) => (\n      <BrowserRouter getUserConfirmation={handleGetUserConfirm}>\n        {children}\n      </BrowserRouter>\n    )}\n  </GoodByeProvider>\n)\n","import { createMuiTheme, MuiThemeProvider } from '@material-ui/core'\nimport React from 'react'\n\ninterface IProps {}\n\nexport const ThemeProvider: React.FC<IProps> = ({ children }) => {\n  const theme = createMuiTheme({\n    typography: {\n      useNextVariants: true,\n    },\n  })\n\n  return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>\n}\n","import { Button, Snackbar } from '@material-ui/core'\nimport { SnackbarProps } from '@material-ui/core/Snackbar'\nimport { serviceWorker } from '@speedlo/tools'\nimport { formatDistanceStrict } from 'date-fns'\nimport { useObservable, useObserver } from 'mobx-react-lite'\nimport React, { useCallback, useRef, useState } from 'react'\n\nimport { logMain } from '../helpers/logger'\nimport { useEffectOnce } from '../hooks/useEffectOnce'\nimport { HOUR, MINUTE, SECOND, useTimer } from '../hooks/useTimer'\nimport { i18n } from '../i18n'\nimport { snackStyles } from './SnackProvider'\n\nexport interface IProps {\n  onRestart?(): void\n  autoUpdateDelay?: number\n  postponeTimeout?: number\n  updateCheckInterval?: number\n  getNow?(): number\n  children: ReactNode\n}\n\nexport const UpdateHandler: React.FC<IProps> = ({\n  onRestart = () => window.location.reload(),\n  autoUpdateDelay = 20 * SECOND,\n  postponeTimeout = 2 * MINUTE,\n  updateCheckInterval = process.env.REACT_APP_STAGE === 'prod'\n    ? 1 * HOUR\n    : 5 * MINUTE,\n  getNow = Date.now,\n  children,\n}) => {\n  const updateWorker = useRef<ServiceWorker | null>(null)\n\n  const state = useObservable({ updatePending: false, postponedAt: getNow() })\n\n  const onMessage = useCallback((event: MessageEvent) => {\n    if (event.data === 'update-applied') {\n      logMain('restarting to apply update...')\n      onRestart()\n    }\n  }, [])\n\n  useEffectOnce(() => {\n    let checkIntervalRef\n    const init = serviceWorker.register({\n      onInit: reg => {\n        checkIntervalRef = setInterval(() => {\n          logMain('checking for updates...')\n          reg.update()\n        }, updateCheckInterval)\n        logMain('update handler initialized')\n      },\n      onUpdate: sw => {\n        updateWorker.current = sw\n        state.updatePending = true\n        logMain('new update is available')\n        window.navigator.serviceWorker.addEventListener('message', onMessage)\n      },\n    })\n    // service worker is normally using load event, but since this\n    // done after the load, it has to be triggered manually\n    init()\n    return () => {\n      window.navigator.serviceWorker.removeEventListener('message', onMessage)\n      if (checkIntervalRef) {\n        clearInterval(checkIntervalRef)\n      }\n    }\n  })\n\n  const onCancel = useCallback(() => {\n    logMain('user postponed update')\n    state.updatePending = false\n    setTimeout(() => {\n      logMain('reminding update to user again')\n      state.updatePending = true\n    }, postponeTimeout)\n  }, [])\n\n  const onConfirm = useCallback(() => {\n    state.updatePending = false\n    if (updateWorker.current) {\n      logMain('user confirmed update')\n      updateWorker.current.postMessage('apply-update')\n    }\n  }, [])\n\n  return useObserver(() => (\n    <>\n      {state.updatePending ? (\n        <UpdateSnack\n          autoHideDuration={autoUpdateDelay}\n          onCancel={onCancel}\n          onConfirm={onConfirm}\n          getNow={getNow}\n        />\n      ) : null}\n      {children}\n    </>\n  ))\n}\n\ninterface IUpdateSnackProps extends Omit<SnackbarProps, 'open'> {\n  autoHideDuration: number\n  onConfirm(): void\n  onCancel(): void\n  getNow(): number\n}\n\nexport function UpdateSnack(props: IUpdateSnackProps) {\n  const { onConfirm, onCancel, getNow, ...rest } = props\n  const [endTime] = useState(() => getNow() + props.autoHideDuration)\n  const now = useTimer({ interval: SECOND, enabled: true, getNow })\n  const remainingSeconds = formatDistanceStrict(endTime, now)\n  return (\n    <Snackbar\n      open={true}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center',\n      }}\n      classes={{ root: snackStyles.variantInfo }}\n      message={\n        <span data-testid=\"message\">{i18n.t`Application will be restarted in ${remainingSeconds} to apply available update.`}</span>\n      }\n      disableWindowBlurListener={true}\n      action={[\n        <Button\n          key=\"later\"\n          color=\"secondary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"postpone-button\"\n          onClick={onCancel}\n        >\n          {i18n.t`Postpone update`}\n        </Button>,\n        <Button\n          key=\"confirm\"\n          color=\"primary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"confirm-button\"\n          onClick={onConfirm}\n        >\n          {i18n.t`Restart now`}\n        </Button>,\n      ]}\n      onClose={onCancel}\n      {...rest}\n    />\n  )\n}\n","import { DocumentNode } from 'graphql'\nimport { Lambda } from 'mobx'\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\nimport { useQuery } from 'react-apollo-hooks'\nimport { Redirect } from 'react-router'\nimport RedBox from 'redbox-react'\n\nimport { Loading } from '../atoms/Loading'\nimport { logError } from '../helpers/logger'\nimport { whenGoingOnline } from '../helpers/offline'\nimport { reportError } from '../helpers/sentry'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean\n    refetchOnConnectionLost?: boolean\n  }\n  const GQuery: React.FC<IProps> = props => {\n    const cleanup = useRef<Lambda[]>([])\n    const executeCleanup = useCallback(() => {\n      cleanup.current.forEach(fn => fn())\n      cleanup.current.length = 0\n    }, [])\n\n    useEffect(\n      () => {\n        executeCleanup()\n        return executeCleanup()\n      },\n      [cleanup.current.length],\n    )\n\n    const {\n      render,\n      renderFragment,\n      renderLoading = true,\n      renderError = true,\n      refetchOnConnectionLost = false,\n      children,\n      ...rest\n    } = props\n\n    return (\n      <Query query={query} {...rest}>\n        {result => {\n          if (result.loading) {\n            if (typeof renderLoading === 'function') {\n              return renderLoading(result)\n            } else if (renderLoading === true) {\n              return <Loading />\n            }\n          }\n          if (result.error) {\n            reportError(result.error)\n            logError(result.error)\n            if (renderError === true) {\n              return process.env.NODE_ENV === 'production' ? (\n                <Redirect to=\"/error\" />\n              ) : (\n                <RedBox error={result.error} />\n              )\n            } else {\n              return null\n            }\n          }\n          if (refetchOnConnectionLost) {\n            cleanup.current.push(whenGoingOnline(result.refetch))\n          }\n          if (result.data) {\n            if (renderFragment) {\n              return <>{renderFragment(result.data, result)}</>\n            }\n            if (render) {\n              return render(result.data, result)\n            }\n          }\n          return children || null\n        }}\n      </Query>\n    )\n  }\n  return GQuery\n}\n\nexport function buildQueryHook<TData, TVariables>(query: DocumentNode) {\n  return (variables: TVariables) => {\n    return useQuery<TData, TVariables>(query, { variables })\n  }\n}\n","import { Trans } from '@lingui/react'\nimport { Button, Snackbar, SnackbarContent } from '@material-ui/core'\nimport { useAsyncEffect } from '@speedlo/hooks'\nimport { NormalizedCacheObject } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { Observer } from 'mobx-react'\nimport React, { Children, useContext, useState } from 'react'\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloProvider as ApolloProviderHooked } from 'react-apollo-hooks'\n\nimport { RootContext } from '../context/RootContext'\nimport { createApolloClient } from '../graph/createClient'\nimport { persistModel } from '../helpers/persistModel'\nimport { AuthModel } from '../models/AuthModel'\nimport { RootModel, TRootModel } from '../models/RootModel'\nimport Pacman from './Pacman'\nimport { snackStyles } from './SnackProvider'\n\nexport const RootProvider: React.FC = ({ children }) => {\n  const [root, setRoot] = useState<TRootModel | undefined>(undefined)\n  const [hasNetworkError, setNetworkError] = useState(false)\n\n  useAsyncEffect(async () => {\n    const auth = AuthModel.create({})\n    const apolloClient = createApolloClient(auth)\n\n    const rootModel = RootModel.create(\n      { auth },\n      {\n        fetch: window.fetch,\n        apolloClient,\n      },\n    )\n\n    await Promise.all(rootModel.persistedModels.map(persistModel))\n\n    try {\n      await rootModel.user.initUser()\n    } catch (err) {\n      if (err.networkError) {\n        setNetworkError(true)\n      }\n    }\n\n    setRoot(rootModel)\n  })\n\n  if (hasNetworkError) {\n    return (\n      <Snackbar\n        anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\n        autoHideDuration={Infinity}\n        open={true}\n      >\n        <SnackbarContent\n          className={snackStyles.variantError}\n          message={\n            <Trans>\n              Communication with server has failed. Please retry the operation\n              in a moment again.\n            </Trans>\n          }\n          action={[\n            <Button\n              key=\"restart\"\n              onClick={() => location.reload()}\n              color=\"secondary\"\n              size=\"small\"\n              role=\"button\"\n            >\n              <Trans>Restart application</Trans>\n            </Button>,\n          ]}\n        />\n      </Snackbar>\n    )\n  }\n\n  return root ? (\n    <ApolloProvider client={root.client}>\n      <ApolloProviderHooked client={root.client}>\n        <RootContext.Provider value={root}>\n          {Children.only(children)}\n        </RootContext.Provider>\n      </ApolloProviderHooked>\n    </ApolloProvider>\n  ) : (\n    <Pacman />\n  )\n}\n\nexport const useRoot = () => {\n  const root = useContext(RootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\ninterface IWithRootProps {\n  children(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.FC<IWithRootProps> = ({\n  children,\n  observe = true,\n}) => {\n  const root = useRoot()\n  return observe === true ? (\n    <Observer>{() => children(root)}</Observer>\n  ) : (\n    children(root)\n  )\n}\n\nexport type RootApolloClient = ApolloClient<NormalizedCacheObject>\n\nexport interface IRootEnvironment {\n  fetch: TFetch\n  apolloClient: RootApolloClient\n}\n"],"sourceRoot":""}