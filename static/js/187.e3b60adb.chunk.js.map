{"version":3,"sources":["atoms/VerticalGap.tsx","segments/settings/organisms/UserMenuLanguage.tsx","segments/settings/pages/UserMenuPage.tsx"],"names":["VerticalGap","styled","div","_templateObject","_ref","_ref$size","size","_ref$sizeUnit","sizeUnit","concat","displayName","UserMenuLanguage","_useRoot","useRoot","auth","user","_useQUserMenuLanguage","useQUserMenuLanguages","data","loading","refetch","_useMUserMenuLanguage","useMUserMenuLanguage","updateUserLanguage","Object","slicedToArray","enqueueSuccess","useSnackBar","_React$useState","React","useState","_React$useState2","language","setLanguage","useEffect","langCode","languages","find","RM","propEq","useObserver","node_modules_react_default","a","createElement","Sizer","width","margin","SelectControl","isLoading","options","toConsumableArray","getOptionLabel","prop","getOptionValue","value","onChange","asyncToGenerator","regenerator_default","mark","_callee","lang","wrap","_context","prev","next","stop","_x","apply","this","arguments","TouchButton","onClick","_callee2","_context2","userId","enum","sent","rawCode","i18n","_","color","Colors","green","react","id","UserMenuPage","FullPageLayout","pageTitle","Card","Headline","UserMenuLanguage_UserMenuLanguage"],"mappings":"+NAOO,IAAMA,QAAcC,QAAOC,IAAVC,IACZ,SAAAC,GAAA,IAAAC,EAAAD,EAAGE,YAAH,IAAAD,EAAU,EAAVA,EAAAE,EAAAH,EAAaI,gBAAb,IAAAD,EAAwB,MAAxBA,EAAA,SAAAE,OACLH,GADKG,OACED,KAGdR,EAAYU,YAAc,yPCWbC,EAAqC,WAAM,IAAAC,EAC/BC,cAAfC,EAD8CF,EAC9CE,KAAMC,EADwCH,EACxCG,KADwCC,EAEnBC,eAA3BC,EAF8CF,EAE9CE,KAAMC,EAFwCH,EAExCG,QAASC,EAF+BJ,EAE/BI,QAF+BC,EAGzBC,cAAtBC,EAH+CC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAI9CK,EAAmBC,cAAnBD,eAJ8CE,EAMtBC,IAAMC,SAAuB,MANPC,EAAAP,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAM/CI,EAN+CD,EAAA,GAMrCE,EANqCF,EAAA,GAiBtD,OATAF,IAAMK,UAAU,WACd,GAAiB,OAAbF,IAAsBb,EAAS,CACjC,IAAMgB,EAAWjB,EAAKkB,UAAUC,KAAKC,IAAGC,OAAO,UAAWxB,EAAKiB,WAC3DG,GACFF,EAAYE,KAGf,CAACjB,EAAMC,IAEHqB,sBAAY,kBACjBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,MAAO,GAAIC,OAAO,QACvBL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,UAAW7B,EACX8B,QAAS9B,EAAU,GAAHK,OAAA0B,EAAA,EAAA1B,CAAYN,EAAKkB,WACjCe,eAAgBb,IAAGc,KAAK,QACxBC,eAAgBf,IAAGc,KAAK,QACxBE,MAAOtB,EACPuB,SAAQ,eAAAnD,EAAAoB,OAAAgC,EAAA,EAAAhC,CAAAiC,EAAAf,EAAAgB,KAAE,SAAAC,EAAMC,GAAN,OAAAH,EAAAf,EAAAmB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACJJ,GACF3B,EAAY2B,GAFN,wBAAAE,EAAAG,SAAAN,MAAF,gBAAAO,GAAA,OAAA9D,EAAA+D,MAAAC,KAAAC,YAAA,KAMV5B,EAAAC,EAAAC,cAAC3C,EAAA,EAAD,MACAyC,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CACEC,QAAO/C,OAAAgC,EAAA,EAAAhC,CAAAiC,EAAAf,EAAAgB,KAAE,SAAAc,IAAA,OAAAf,EAAAf,EAAAmB,KAAA,SAAAY,GAAA,cAAAA,EAAAV,KAAAU,EAAAT,MAAA,WACHhC,EADG,CAAAyC,EAAAT,KAAA,eAAAS,EAAAT,KAAA,EAEoBzC,EAAmB,CAC1CmD,OAAQ5D,EAAK4D,OACbd,KAAM5B,EAAS2C,OAJZ,WAAAF,EAAAG,KAAA,CAAAH,EAAAT,KAAA,eAAAS,EAAAT,KAAA,EAOG5C,IAPH,OAQHL,EAAKkB,YAAYD,EAAS6C,SAC1BnD,EAAeoD,EAAA,EAAIC,EAAA,8BAThB,wBAAAN,EAAAR,SAAAO,MAaTQ,MAAOC,IAAOC,OAEdzC,EAAAC,EAAAC,cAACwC,EAAA,MAAD,CAAAC,GAAA,yBCjDOC,UAbgB,WAC7B,OACE5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAgBzC,MAAO,GAAI0C,UAAWT,EAAA,EAAIC,EAAA,SACxCtC,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,KACE/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,KACEhD,EAAAC,EAAAC,cAACwC,EAAA,MAAD,CAAAC,GAAA,0BAEF3C,EAAAC,EAAAC,cAAC+C,EAAD","file":"static/js/187.e3b60adb.chunk.js","sourcesContent":["import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import { Trans } from '@lingui/macro'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport {\n  useMUserMenuLanguage,\n  useQUserMenuLanguages,\n} from '../../../graph/generated'\nimport { QUserMenuLanguages } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { useSnackBar } from '../../../hooks/useSnackBar'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IProps {}\n\ntype TLang = QUserMenuLanguages.Languages\n\nexport const UserMenuLanguage: React.FC<IProps> = () => {\n  const { auth, user } = useRoot()\n  const { data, loading, refetch } = useQUserMenuLanguages()\n  const [updateUserLanguage] = useMUserMenuLanguage()\n  const { enqueueSuccess } = useSnackBar()\n\n  const [language, setLanguage] = React.useState<Maybe<TLang>>(null)\n\n  React.useEffect(() => {\n    if (language === null && !loading) {\n      const langCode = data.languages.find(RM.propEq('rawCode', user.language))\n      if (langCode) {\n        setLanguage(langCode)\n      }\n    }\n  }, [data, loading])\n\n  return useObserver(() => (\n    <Sizer width={20} margin=\"1rem\">\n      <SelectControl<TLang>\n        isLoading={loading}\n        options={loading ? [] : [...data.languages]}\n        getOptionLabel={RM.prop('code')}\n        getOptionValue={RM.prop('enum')}\n        value={language}\n        onChange={async lang => {\n          if (lang) {\n            setLanguage(lang as TLang)\n          }\n        }}\n      />\n      <VerticalGap />\n      <TouchButton\n        onClick={async () => {\n          if (language) {\n            const updateData = await updateUserLanguage({\n              userId: auth.userId,\n              lang: language.enum,\n            })\n            if (updateData) {\n              await refetch()\n              user.setLanguage(language.rawCode)\n              enqueueSuccess(i18n.t`Language has been changed`)\n            }\n          }\n        }}\n        color={Colors.green}\n      >\n        <Trans>Change language</Trans>\n      </TouchButton>\n    </Sizer>\n  ))\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { UserMenuLanguage } from '../organisms/UserMenuLanguage'\n\nconst UserMenuPage: React.FC = () => {\n  return (\n    <FullPageLayout width={16} pageTitle={i18n.t`User`}>\n      <Card>\n        <Headline>\n          <Trans>Application language</Trans>\n        </Headline>\n        <UserMenuLanguage />\n      </Card>\n    </FullPageLayout>\n  )\n}\n\nexport default UserMenuPage\n"],"sourceRoot":""}