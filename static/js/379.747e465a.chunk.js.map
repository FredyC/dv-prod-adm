{"version":3,"sources":["atoms/CanMutate.tsx","atoms/FlexRowSingle.tsx","atoms/FlexColumn.tsx","atoms/ScrollArea.tsx","molecules/PageLayoutFullHeightItem.tsx","atoms/VerticalGap.tsx","components/forms/FormInput.tsx","hooks/useDropdownFilter.ts","hooks/useDropdownSingle.ts","molecules/TouchButtonDelete.tsx","components/forms/FormSubmitButton.tsx","atoms/BaseMap.tsx","atoms/CardListTitle.tsx","components/forms/FormDisplayValue.tsx","atoms/DragHandle.tsx","atoms/ConfirmDialog.tsx","molecules/CompanyBrandDropdown.tsx","components/forms/useFormLoader.ts","components/forms/FormDropdownSingle.tsx","segments/zones/hooks/useZoneRouteControl.tsx","segments/zones/molecules/ZoneFormLoader.tsx","molecules/MapCompanyBranchMarker.tsx","segments/zones/atoms/ZoneMapArea.tsx","segments/zones/atoms/ZoneMapEditableArea.tsx","segments/zones/hooks/useZoneColors.ts","segments/zones/hooks/useZoneModel.ts","segments/zones/hooks/useZoneListQuery.ts","segments/zones/molecules/ZoneMap.tsx","segments/zones/hooks/useZoneMapControl.ts","segments/zones/molecules/ZoneColorSelector.tsx","segments/zones/atoms/ZoneFormForPrice.tsx","segments/zones/atoms/ZoneFormToPrice.tsx","segments/zones/atoms/ZoneFormRuleInputs.tsx","segments/zones/molecules/ZoneFormPriceRules.tsx","segments/zones/molecules/ZoneFormContent.tsx","segments/zones/molecules/ZoneFormControls.tsx","segments/zones/organisms/ZoneFormPanel.tsx","atoms/UserHasMultipleBranches.tsx","segments/zones/atoms/ZoneListSection.tsx","segments/zones/molecules/CreateZoneButton.tsx","segments/zones/atoms/ZoneListCard.tsx","segments/zones/atoms/ZoneListCardGroup.tsx","segments/zones/hooks/useZoneListControl.ts","segments/zones/molecules/ZoneList.tsx","segments/zones/organisms/ZoneFilter.tsx","segments/zones/organisms/ZoneMenuPanel.tsx","segments/zones/pages/ZonesOverviewPage.tsx","segments/zones/routes/ZoneMenuRouting.tsx"],"names":["CanMutate","observer","mutationName","children","useCanMutate","FlexRowSingle","styled","div","flexWrap","justify","FlexColumn","fixedWidth","width","widthGrowIndex","padding","margin","ScrollArea","StyledPageLayoutFullHeightItem","mediaDesktop","props","undefined","widthInColumns","Spacing","LayoutGridCellMargin","column","row","mediaMobile","rowInMobile","forcePercentHeightInMobile","PageHeaderHeight","DefaultSizeUnit","PageLayoutFullHeightItem","withScrollArea","scrollAreaId","forceHeightInMobile","isMobile","useResponsive","id","Sizer","height","heightUnit","VerticalGap","size","sizeUnit","displayName","FormInput","React","forwardRef","inputRef","fieldName","fullWidth","validate","addHiddenLabelWithPlaceholderText","withLabel","getInputProps","useFormInputProps","useObserver","inputFullWidth","ref","placeholder","hidden","htmlFor","state","useXFormState","useXFieldForInput","field","disabled","isSubmitting","invalid","touched","Boolean","error","useDropdownFilter","getOptionFilter","isSearchable","filterOption","useCallback","option","rawInput","length","data","toLocaleLowerCase","includes","useDropdownSingle","options","selected","onSelectionChange","getOptionValue","value","useMemo","find","onChange","TouchButtonDelete","onDelete","confirmText","className","icon","Delete","color","Colors","greyMiddle","onClick","ev","preventDefault","window","confirm","FormSubmitButton","type","green","isValid","ErrorOutline","iconSize","iconColor","red","cn","heartBeat","libraries","createContext","BaseMap","model","streetViewControl","mapTypeControl","fullscreenControl","user","useRoot","useLoadScript","version","googleMapsApiKey","appConfig","googleMapsApi","language","isLoaded","loadError","googleMapUrl","url","googleAvailable","Reflect","has","Sentry","withScope","scope","setExtras","captureException","zoom","center","onCenterChanged","updatePosition","onZoomChanged","updateZoom","onLoad","setMapRef","mapContainerStyle","borderRadius","Radiuses","Card","overflow","useGoogleMap","map","useGoogleMapOrig","Error","CardListTitle","h2","greyLight","FormDisplayValue","useXFieldState","StyledDragHandle","DragHandle","SortableHandle","Reorder","ConfirmDialog","isShow","onCancel","onConfirm","useEffect","brandName","RM","prop","CompanyBrandDropdown","brands","selectedBrand","onSelection","selectProps","filterProps","formatOptionLabel","idProp","getOptionLabel","isClearable","autoFocus","logger","useFormLoader","onSubmit","initialValues","loadValues","validationSchema","submitMessage","submitRedirectPath","history","useRouterContext","useSnackBar","enqueueSuccess","enqueueWarning","onSubmitSuccess","values","a","push","onSubmitFailed","errors","msg","hasLoaded","useRef","onReset","current","xform","useXForm","initialValidationEnabled","ignoreUnknownFieldsInValidation","onFormChanges","Promise","resolve","then","api","mergeValues","pristineValues","enableValidation","FormDropdownSingle","formState","useXField","dropdownProps","setValue","onFocus","setTouched","hasError","isDisabled","useZoneRouteControl","getRouteToZone","zoneId","ROUTE_SETTINGS_ZONES","routeToZoneEdit","editZoneId","canQuery","routeToZoneList","ZoneFormLoader","useMZoneUpdate","zoneUpdate","useObjectValidation","yup","name","string","required","minimalPrice","validateAsNumberField","i18n","min","fieldIsPositiveNumberMsg","xformState","update","getWriteVariables","ZoneTypeEnum","Area","enabled","branchId","zoneColor","geoPolygon","priceRules","priceRulesOrder","currencyCode","skip","useQZoneForm","getStash","zone","zoneType","enum","branchWithCurrency","withoutTypeName","currency","code","formatPrice","minimalOrderPrice","indexedPriceRules","priceRangeRules","rule","idx","clientId","String","toPrice","price","reduce","acc","normalizePriceRules","normalizeZoneToValues","resetForm","omit","companyBranch","parseNumber","isLast","BranchNameStyled","isActive","css","white","greyDark","MapCompanyBranchMarker","branch","getPixelPositionOffset","x","y","mapPaneName","OverlayView","MARKER_LAYER","position","gpsToLatLng","gps","ZoneMapArea","points","priority","onAreaFocus","e","stop","path","Return","fillColor","strokeWeight","strokeColor","zIndex","fillOpacity","editable","draggable","onDblClick","ZoneMapEditableArea","initialPoints","polygonRef","listenersRef","onAreaChange","getPath","getArray","latLngToGps","polygon","addListener","onUnmount","forEach","lis","remove","initialPointsRef","initialPath","onDragEnd","useZoneColors","useQZoneColors","fetchPolicy","zoneColors","ARRAY_EMPTY","useZoneModel","useZoneListQuery","branches","filter","branchFilterPredicate","useQZoneList","loading","zones","ZoneMap","zoneModel","companyBranchId","hasBranchFilter","branchFilterId","source","useAsObservableSource","useAutorun","isReady","idPropEq","getCenter","panTo","useZoneMapControl","polygonField","typeField","colorField","renderBranchLabel","key","renderEditZone","ColorOption","ZoneColorSelector","isLoading","styles","base","menu","maxWidth","defaultValue","head","ZoneFormForPrice","fieldInputProps","_","ZoneFormToPrice","asInfinity","inputProps","label","ZoneFormRuleInputs","fieldPath","shouldFocus","isLastRule","toPriceRef","forPriceRef","isNaN","focus","StyledZoneFormPriceRules","Middle","blue","ZoneFormPriceRules","rulesOrderField","rulesField","useState","focusId","setFocusId","idCounter","ruleId","rules","TouchButton","ButtonHeight","afterRule","findIndex","equals","splice","addRule","AddCircle","title","removeRule","StyledZoneFormContent","black","ZoneFormContent","IconLine","Label","ColorLens","Headline","ZoneFormControls","text","DeleteButtonContainer","ZoneFormPanel","useMZoneDelete","deleteZone","when","isDirty","handleOk","handleCancel","UserHasMultipleBranches","hasSingleBranch","StyledZoneListSection","p","ZoneListSection","CreateZoneButton","useMZoneCreate","createZone","setDisabled","generatePolygon","metersRadius","pointsCount","result","createTextByType","colorByType","turquoise","textNextToIcon","StyledZoneListCard","baseColor","Color","alpha","darken","lighterColor","lighten","ZoneNameStyled","ZoneDescriptionStyled","ZoneFlexRowStyled","ZoneListCard","SortableElement","onEdit","SizerButton","Edit","ZoneListContainerStyled","SortableZoneList","SortableContainer","ZoneListCardGroup","onSort","onSortEnd","useDragHandle","lockAxis","lockToContainerEdges","sortZones","sortWith","ascend","descend","groupByBranch","groupBy","isZoneType","pathEq","ZoneList","zonesByBranch","mapObjIndexed","useMZoneUpdatePriority","updatePriority","onZoneSort","oldIndex","newIndex","collection","offset","optimisticResponse","__typename","updateZonePriority","useZoneListControl","primaryOpacity","secondaryOpacity","root","filterBranches","renderZone","index","branchZones","renderBranch","ZoneFilter","getBrandBranches","brand","autorun","setBranchFilter","singleBrand","setBrandFilter","clearBrandFilter","CompanyBranchDropdown","selectedBranch","onSingleSelection","clearBranchFilter","StyledZoneMenuPanel","ZoneMenuPanel","memo","useAutorunWhenSingleBranch","zoneTypes","ZonesOverviewPage","match","params","isEditing","PageLayoutResponsive","pageTitle","backRoute","ROUTE_SETTINGS","useBackButton","ZonesRouting","component","NotFoundPage"],"mappings":"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","file":"static/js/379.747e465a.chunk.js","sourcesContent":["import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useCanMutate } from '../hooks/useAccessGuard'\nimport { NoAccess } from './NoAccess'\n\ninterface IProps {\n  mutationName: string\n}\n\nexport const CanMutate = observer<IProps>(({ mutationName, children }) => {\n  const canMutate = useCanMutate(mutationName)\n  return canMutate ? (\n    <>{children}</>\n  ) : (\n    <NoAccess>{`No access to mutation ${mutationName}`}</NoAccess>\n  )\n})\n","import styled from 'styled-components'\n\ninterface IProps {\n  flexWrap?: string\n  justify?: string\n}\n\nexport const FlexRowSingle = styled.div<IProps>`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: ${({ flexWrap = 'unset' }: IProps) => flexWrap};\n  justify-content: ${({ justify = 'space-between' }: IProps) => justify};\n`\n","import styled from 'styled-components'\n\ninterface IFlexColumnProps {\n  fixedWidth?: boolean\n  width?: string\n  widthGrowIndex?: number\n  padding?: string\n  margin?: string\n}\n\nexport const FlexColumn = styled.div`\n  flex: ${getFlexValue};\n  padding: ${getPadding};\n  margin: ${getMargin};\n`\n\nfunction getFlexValue({\n  fixedWidth = false,\n  width,\n  widthGrowIndex = 0,\n}: IFlexColumnProps) {\n  return fixedWidth ? (width ? `0 0 ${width}` : '0 0') : `${widthGrowIndex} 0`\n}\n\nfunction getPadding({ padding = '0.25rem' }: IFlexColumnProps) {\n  return padding\n}\n\nfunction getMargin({ margin = '' }: IFlexColumnProps) {\n  return margin\n}\n","import styled from 'styled-components'\n\nexport const ScrollArea = styled.div`\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  height: 100%;\n`\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile, useResponsive } from '../app/Responsive'\nimport { ScrollArea } from '../atoms/ScrollArea'\nimport { Sizer } from '../atoms/Sizer'\nimport { Spacing } from '../styling'\n\ninterface IPageLayoutFullHeightItemProps {\n  row?: number\n  column?: number\n  rowInMobile?: number\n  widthInColumns?: number\n  withScrollArea?: boolean\n  forcePercentHeightInMobile?: number\n  scrollAreaId?: string\n}\n\nconst gridColumnWidth: string = '6.22vw'\nconst gridColumnHeigth: string = '3.9375rem'\n\nconst leftPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.column !== undefined) {\n    return (\n      'calc((' +\n      props.column +\n      ' * ' +\n      gridColumnWidth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return Spacing.LayoutGridCellMargin\n  }\n}\nconst widthComputed = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.widthInColumns !== undefined) {\n    return (\n      'calc((' +\n      props.widthInColumns +\n      ' * ' +\n      gridColumnWidth +\n      ') - ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return 'calc(100vh - (2 * ' + Spacing.LayoutGridCellMargin + '))'\n  }\n}\nconst topPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.row !== undefined) {\n    return (\n      'calc((' +\n      props.row +\n      ' * ' +\n      gridColumnHeigth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return (\n      'calc(' + gridColumnHeigth + ' + ' + Spacing.LayoutGridCellMargin + ')'\n    )\n  }\n}\n\n// eslint-disable-next-line no-unexpected-multiline\nconst StyledPageLayoutFullHeightItem = styled.div<\n  IPageLayoutFullHeightItemProps\n>`\n  ${mediaDesktop`\n  position: fixed;\n  bottom: 0.5rem;\n  width: ${widthComputed()};\n  left: ${leftPos()};\n  top: ${topPos()};`}\n\n  ${mediaMobile`\n    margin: 0;\n    grid-row: ${({ rowInMobile }: IPageLayoutFullHeightItemProps) =>\n      rowInMobile} ;\n    grid-column: span 16;\n    height: ${({\n      forcePercentHeightInMobile,\n    }: IPageLayoutFullHeightItemProps) =>\n      forcePercentHeightInMobile\n        ? `calc(${forcePercentHeightInMobile}vh - ${Spacing.PageHeaderHeight +\n            0.25 +\n            Spacing.DefaultSizeUnit})`\n        : 'unset'} ;\n    position: relative;\n  `}\n`\n\nexport const PageLayoutFullHeightItem: React.FC<\n  IPageLayoutFullHeightItemProps\n> = ({\n  children,\n  row = 1,\n  rowInMobile = 16,\n  column = 0,\n  widthInColumns = 16,\n  withScrollArea = false,\n  scrollAreaId,\n  forcePercentHeightInMobile: forceHeightInMobile,\n}) => {\n  const { isMobile } = useResponsive()\n\n  return (\n    <StyledPageLayoutFullHeightItem\n      column={column}\n      row={row}\n      rowInMobile={rowInMobile}\n      widthInColumns={widthInColumns}\n      withScrollArea={withScrollArea}\n      forcePercentHeightInMobile={forceHeightInMobile}\n    >\n      {withScrollArea && !isMobile ? (\n        <ScrollArea id={scrollAreaId}>{children}</ScrollArea>\n      ) : (\n        <Sizer height={100} heightUnit=\"%\">\n          {children}\n        </Sizer>\n      )}\n    </StyledPageLayoutFullHeightItem>\n  )\n}\n","import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import {\n  useXFieldForInput,\n  useXFormState,\n  XFieldName,\n  XFieldValidator,\n} from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { StyledFormInput } from '../../atoms/FormInputStyled'\n\ntype TProps = NoChildren &\n  Omit<React.InputHTMLAttributes<never>, 'name'> & {\n    fieldName: XFieldName\n    validate?: XFieldValidator<string>\n    fullWidth?: boolean\n    addHiddenLabelWithPlaceholderText?: boolean\n  }\n\nexport type FormInputProps = TProps\n\nexport const FormInput = React.forwardRef<HTMLInputElement, TProps>(\n  (\n    {\n      fieldName,\n      fullWidth,\n      validate,\n      addHiddenLabelWithPlaceholderText: withLabel = true,\n      ...props\n    },\n    inputRef,\n  ) => {\n    const getInputProps = useFormInputProps({ fieldName, validate })\n    return useObserver(() => (\n      <>\n        <StyledFormInput\n          {...getInputProps()}\n          inputFullWidth={fullWidth}\n          ref={inputRef}\n          {...props}\n        />\n        {withLabel && props.placeholder && (\n          <label hidden={true} htmlFor={getInputProps().id}>\n            {props.placeholder}\n          </label>\n        )}\n      </>\n    ))\n  },\n)\n\ninterface IHookOptions {\n  fieldName: XFieldName\n  validate?: XFieldValidator<string>\n}\n\nexport function useFormInputProps({ fieldName, validate }: IHookOptions) {\n  const state = useXFormState()\n  const [field, getInputProps] = useXFieldForInput<string>(fieldName, {\n    validate,\n  })\n  return () => ({\n    ...getInputProps(),\n    disabled: state.isSubmitting,\n    invalid: field.touched && Boolean(field.error),\n  })\n}\n","import React from 'react'\n\ntype TOptions<TSelectOption> = {\n  getOptionFilter?(option: TSelectOption): string\n}\n\nexport function useDropdownFilter<TSelectOption>({\n  getOptionFilter,\n}: TOptions<TSelectOption>) {\n  const isSearchable = typeof getOptionFilter === 'function'\n\n  const filterOption = React.useCallback(\n    (option, rawInput) => {\n      if (!getOptionFilter || rawInput.length === 0) {\n        return true\n      }\n      return getOptionFilter(option.data)\n        .toLocaleLowerCase()\n        .includes(rawInput.toLocaleLowerCase())\n    },\n    [getOptionFilter],\n  )\n\n  return { filterOption, isSearchable }\n}\n","import React from 'react'\n\ntype TOptions<TSelectOption> = {\n  options: RoA<TSelectOption> | null\n  selected: MaybeID\n  onSelectionChange: (selected: MaybeID) => void\n  getOptionValue(option: TSelectOption): string\n}\n\nexport function useDropdownSingle<TSelectOption>({\n  options,\n  selected,\n  onSelectionChange,\n  getOptionValue,\n}: TOptions<TSelectOption>) {\n  const value = React.useMemo(() => {\n    if (selected === null) {\n      return null\n    }\n    return options === null\n      ? null\n      : options.find(option => getOptionValue(option) === selected) || null\n  }, [selected, options, getOptionValue])\n\n  const onChange = (option: unknown) => {\n    onSelectionChange(option ? getOptionValue(option as TSelectOption) : null)\n  }\n\n  return { value, onChange }\n}\n","import { Delete } from '@material-ui/icons'\nimport React from 'react'\n\nimport { SizerButton } from '../atoms/SizerButton'\nimport { Colors } from '../styling'\nimport { ITouchButtonProps, TouchButton } from './TouchButton'\n\ninterface ITouchButtonDeleteProps extends Omit<ITouchButtonProps, 'onClick'> {\n  confirmText?: string\n  onDelete(): void\n}\n\nexport const TouchButtonDelete: React.FC<ITouchButtonDeleteProps> = ({\n  onDelete,\n  confirmText,\n  ...props\n}) => {\n  return (\n    <SizerButton>\n      <TouchButton\n        className=\"delete-button\"\n        icon={Delete}\n        color={Colors.greyMiddle}\n        onClick={ev => {\n          ev.preventDefault()\n          if (!confirmText || window.confirm(confirmText)) {\n            onDelete()\n          }\n        }}\n        {...props}\n      />\n    </SizerButton>\n  )\n}\n","import { ErrorOutline } from '@material-ui/icons'\nimport { cn } from '@speedlo/ui'\nimport { useXFormState } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ITouchButtonProps, TouchButton } from '../../molecules/TouchButton'\nimport { Colors } from '../../styling'\n\ninterface IProps extends ITouchButtonProps {\n  children: ReactNode | ReactNode[] | string\n}\n\nexport const FormSubmitButton: React.FC<IProps> = ({\n  children,\n  id = 'form-submit',\n  ...props\n}) => {\n  const state = useXFormState()\n  return useObserver(() => (\n    <TouchButton\n      id={id}\n      type=\"submit\"\n      color={Colors.green}\n      disabled={state.isSubmitting}\n      icon={!state.isValid ? ErrorOutline : undefined}\n      iconSize={1.1}\n      iconColor={Colors.red}\n      {...props}\n      className={cn(props.className, 'animated', 'infinite', {\n        heartBeat: state.isSubmitting,\n      })}\n    >\n      <>{children}</>\n    </TouchButton>\n  ))\n}\n","import { Trans } from '@lingui/macro'\nimport {\n  GoogleMap,\n  useGoogleMap as useGoogleMapOrig,\n  useLoadScript,\n} from '@react-google-maps/api'\nimport { Sentry } from '@speedlo/sentry'\nimport { Observer } from 'mobx-react-lite'\nimport React, { useContext } from 'react'\n\nimport { appConfig } from '../config'\nimport { TMapModel } from '../models/MapModel'\nimport { Radiuses } from '../styling'\nimport { useRoot } from './RootProvider'\n\ninterface IBaseMapProps {\n  model: TMapModel\n}\n\nconst mapModelContext = React.createContext<TMapModel | null>(null)\n\nconst libraries = ['places']\n\nexport const BaseMap: React.FC<IBaseMapProps> = ({ model, children }) => {\n  const options: google.maps.MapOptions = {\n    streetViewControl: false,\n    mapTypeControl: false,\n    fullscreenControl: false,\n  }\n\n  const { user } = useRoot()\n  const { isLoaded, loadError, url: googleMapUrl } = useLoadScript({\n    id: 'script-loader',\n    version: 'weekly',\n    googleMapsApiKey: appConfig.googleMapsApi,\n    libraries,\n    language: user.language!,\n  })\n\n  const renderMap = () => (\n    <Observer>\n      {() => (\n        <GoogleMap\n          zoom={model.zoom}\n          center={model.center}\n          onCenterChanged={model.updatePosition}\n          onZoomChanged={model.updateZoom}\n          onLoad={model.setMapRef}\n          options={options}\n          mapContainerStyle={{\n            borderRadius: Radiuses.Card,\n            overflow: 'hidden',\n            height: '100%',\n          }}\n        >\n          {children}\n        </GoogleMap>\n      )}\n    </Observer>\n  )\n\n  const googleAvailable = Reflect.has(window, 'google')\n\n  if (loadError || (isLoaded && !googleAvailable)) {\n    Sentry.withScope(scope => {\n      scope.setExtras({ googleMapUrl })\n      Sentry.captureException(loadError)\n    })\n    return (\n      <h2>\n        <Trans>Cannot load map right now. Please try again later.</Trans>\n      </h2>\n    )\n  }\n\n  return isLoaded ? renderMap() : null\n}\n\nexport function useMapModel() {\n  const model = useContext(mapModelContext)\n  if (!model) {\n    throw new Error('Trying to useMapModel, but BaseMap is missing in the tree')\n  }\n  return model\n}\n\nexport function useGoogleMap() {\n  const map = useGoogleMapOrig()\n  if (!map) {\n    throw new Error(\n      'Trying to useGoogleMap, but BaseMap is missing in the tree',\n    )\n  }\n  return map\n}\n","import styled from 'styled-components/macro'\n\nimport { Colors } from '../styling'\n\nexport const CardListTitle = styled.h2`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  font-size: 1.2rem;\n  margin: 0.8rem 0 0.8rem 0.3rem;\n`\n","import { useXFieldState, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\ntype TProps = NoChildren & {\n  fieldName: XFieldName\n  className?: string\n}\n\nexport const FormDisplayValue: React.FC<TProps> = ({\n  fieldName,\n  className,\n}) => {\n  const field = useXFieldState<string>(fieldName)\n  return useObserver(() => <span className={className}>{field.value}</span>)\n}\n","import { Reorder } from '@material-ui/icons'\nimport React from 'react'\nimport { SortableHandle } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Icon } from './Icon'\n\ninterface IProps {}\n\nconst StyledDragHandle = styled.div`\n  padding: 1rem 0.4rem;\n  cursor: grab;\n`\nexport const DragHandle = SortableHandle<IProps>(() => (\n  <StyledDragHandle>\n    <Icon icon={Reorder} />\n  </StyledDragHandle>\n))\n","import React, { useEffect } from 'react'\n\ninterface IProps {\n  isShow: boolean\n  confirmText: string\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport const ConfirmDialog: React.FC<IProps> = ({\n  isShow,\n  confirmText,\n  onCancel,\n  onConfirm,\n}) => {\n  useEffect(() => {\n    if (isShow) {\n      if (window.confirm(confirmText)) {\n        onConfirm()\n      } else {\n        onCancel()\n      }\n    }\n  }, [confirmText, isShow, onCancel, onConfirm])\n  return null\n}\n","import React from 'react'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { SelectControl, TSelectControlProps } from '../atoms/SelectControl'\nimport { FCompanyBranchBrand } from '../graph/generated'\nimport { useDropdownFilter } from '../hooks/useDropdownFilter'\nimport { i18n } from '../i18n'\nimport { idProp, RM } from '../tools/ramda'\n\ntype TBrand = FCompanyBranchBrand\n\ntype TProps = NoChildren &\n  TSelectControlProps<TBrand> & {\n    brands?: RoA<TBrand>\n    selectedBrand: Maybe<TBrand>\n    onSelection(brand: Maybe<TBrand>): void\n  }\n\nconst brandName = RM.prop('name')\n\nexport const CompanyBrandDropdown: React.FC<TProps> = ({\n  brands,\n  selectedBrand,\n  onSelection,\n  ...selectProps\n}) => {\n  const { user } = useRoot()\n\n  const filterProps = useDropdownFilter({\n    getOptionFilter: brandName,\n  })\n\n  return (\n    <SelectControl<TBrand>\n      placeholder={i18n.t`Select brand`}\n      options={brands || user.brands}\n      value={selectedBrand}\n      formatOptionLabel={brandName}\n      getOptionValue={idProp}\n      getOptionLabel={brandName}\n      onChange={value => onSelection(value as Maybe<TBrand>)}\n      isClearable={true}\n      autoFocus={true}\n      {...filterProps}\n      {...selectProps}\n    />\n  )\n}\n","import { useRouterContext } from '@speedlo/hooks'\nimport { TValidationSchema, useXForm, XFormErrors } from '@speedlo/xform'\nimport React from 'react'\n\nimport { logForm } from '../../helpers/logger'\nimport { useSnackBar } from '../../hooks/useSnackBar'\n\ninterface IOptions<TValues> {\n  initialValues: TValues\n  loadValues?(initialValues: TValues): Promise<Partial<TValues> | undefined>\n  onSubmit(values: TValues): Promise<any>\n  submitMessage?: string\n  submitRedirectPath?: string\n  validationSchema?: TValidationSchema\n}\n\nexport type TFormLoaderOptions<TValues = any> = IOptions<TValues>\n\nconst logger =\n  process.env.REACT_APP_STAGE !== 'prod' ? obj => logForm('%o', obj) : undefined\n\nexport function useFormLoader<TValues>({\n  onSubmit,\n  initialValues,\n  loadValues,\n  validationSchema,\n  submitMessage,\n  submitRedirectPath,\n}: IOptions<TValues>) {\n  const { history } = useRouterContext()\n  const { enqueueSuccess, enqueueWarning } = useSnackBar()\n\n  const onSubmitSuccess = React.useCallback(\n    async (values: TValues) => {\n      await onSubmit(values)\n      if (submitMessage) {\n        enqueueSuccess(submitMessage)\n      }\n      if (submitRedirectPath) {\n        history.push(submitRedirectPath)\n      }\n    },\n    [enqueueSuccess, history, onSubmit, submitMessage, submitRedirectPath],\n  )\n\n  const onSubmitFailed = React.useCallback(\n    (values: TValues, errors: XFormErrors) => {\n      for (const msg of errors.values()) {\n        if (msg) {\n          enqueueWarning(msg)\n        }\n      }\n    },\n    [enqueueWarning],\n  )\n\n  const hasLoaded = React.useRef(false)\n\n  const onReset = React.useCallback(() => {\n    hasLoaded.current = false\n  }, [])\n\n  const xform = useXForm<TValues>({\n    onSubmit: onSubmitSuccess,\n    onSubmitFailed,\n    onReset,\n    validationSchema,\n    initialValues,\n    initialValidationEnabled: loadValues === undefined,\n    ignoreUnknownFieldsInValidation: true,\n    onFormChanges: logger,\n  })\n\n  React.useEffect(() => {\n    if (!hasLoaded.current) {\n      if (loadValues) {\n        Promise.resolve(loadValues(xform.state.initialValues)).then(values => {\n          if (values) {\n            xform.api.mergeValues(values)\n            xform.state.pristineValues = xform.state.values\n          }\n          xform.api.enableValidation()\n        })\n      }\n      hasLoaded.current = true\n    }\n  }, [loadValues, xform])\n\n  return xform\n}\n","import { useXField, useXFormState, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { SelectControl, TSelectControlProps } from '../../atoms/SelectControl'\nimport { useDropdownFilter } from '../../hooks/useDropdownFilter'\nimport { useDropdownSingle } from '../../hooks/useDropdownSingle'\nimport { idProp } from '../../tools/ramda'\n\ntype TFormDropdownSingleProps<OptionType> = Omit<\n  TSelectControlProps<OptionType>,\n  'value' | 'onChange' | 'isMulti'\n> & {\n  fieldName: XFieldName\n  options: RoA<OptionType>\n  getOptionFilter?(option: OptionType): string\n}\n\nexport const FormDropdownSingle = <TOption extends any>({\n  fieldName,\n  getOptionValue = idProp as any,\n  getOptionFilter,\n  ...selectProps\n}: TFormDropdownSingleProps<TOption>) => {\n  const formState = useXFormState()\n  const field = useXField<MaybeID>(fieldName)\n\n  return useObserver(function useBody() {\n    const dropdownProps = useDropdownSingle({\n      ...selectProps,\n      onSelectionChange: field.setValue,\n      selected: field.value,\n      getOptionValue,\n    })\n    const filterProps = useDropdownFilter({ getOptionFilter })\n\n    return (\n      <SelectControl<TOption>\n        {...dropdownProps}\n        {...filterProps}\n        {...selectProps}\n        onFocus={() => field.setTouched()}\n        invalid={field.touched && field.hasError}\n        isDisabled={formState.isSubmitting}\n      />\n    )\n  })\n}\n","import { useRouterContext } from '@speedlo/hooks'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { ROUTE_SETTINGS_ZONES } from '../../settings/settings.routes'\n\nexport function useZoneRouteControl() {\n  const { user } = useRoot()\n  const { history } = useRouterContext()\n  const getRouteToZone = React.useCallback((zoneId: ID) => {\n    return `${ROUTE_SETTINGS_ZONES}/${zoneId}`\n  }, [])\n\n  return {\n    getRouteToZone,\n    routeToZoneEdit: React.useCallback(\n      (editZoneId: ID) => {\n        if (user.canQuery('zone')) {\n          history.push(getRouteToZone(editZoneId))\n        }\n      },\n      [getRouteToZone, history, user],\n    ),\n    routeToZoneList: React.useCallback(() => {\n      history.push(ROUTE_SETTINGS_ZONES)\n    }, [history]),\n  }\n}\n","import { useObjectValidation, XFormRender, XFormState } from '@speedlo/xform'\nimport React from 'react'\n\nimport { useFormLoader } from '../../../components/forms/useFormLoader'\nimport {\n  InputZoneUpdate,\n  useMZoneUpdate,\n  useQZoneForm,\n  ZoneTypeEnum,\n} from '../../../graph/generated'\nimport {\n  fieldIsPositiveNumberMsg,\n  validateAsNumberField,\n} from '../../../helpers/form'\nimport { formatPrice } from '../../../helpers/formats'\nimport { parseNumber } from '../../../helpers/numeral'\nimport { useSnackBar } from '../../../hooks/useSnackBar'\nimport { i18n } from '../../../i18n'\nimport { RM } from '../../../tools/ramda'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport {\n  TZoneFormPriceRule,\n  TZoneFormValues,\n  TZoneInForm,\n} from '../zones.types'\n\ninterface IProps {\n  zoneId: MaybeID\n}\n\nexport const ZoneFormLoader: React.FC<IProps> = ({ children, zoneId }) => {\n  const { routeToZoneList } = useZoneRouteControl()\n  const { enqueueSuccess } = useSnackBar()\n\n  const [zoneUpdate] = useMZoneUpdate()\n\n  const validationSchema = useObjectValidation(yup => ({\n    name: yup.string().required(),\n    minimalPrice: validateAsNumberField(i18n.t`Minimal price`).min(\n      0,\n      fieldIsPositiveNumberMsg(i18n.t`Minimal price`),\n    ),\n  }))\n\n  const xformState = React.useRef<XFormState<TZoneFormValues>>()\n\n  const onSubmit = React.useCallback(\n    async (values: TZoneFormValues) => {\n      const result = await zoneUpdate({\n        zoneId: values.id,\n        update: getWriteVariables(values),\n      })\n      if (result) {\n        // to reset isDirty and avoid goodbye trigger\n        xformState.current!.pristineValues = { ...values }\n        routeToZoneList()\n        enqueueSuccess(i18n.t`Zone has been updated`)\n      }\n    },\n    [enqueueSuccess, routeToZoneList, zoneUpdate],\n  )\n\n  const xform = useFormLoader({\n    initialValues: getInitialValues(),\n    onSubmit,\n    validationSchema,\n  })\n\n  xformState.current = xform.state\n\n  const skip = !zoneId\n  const { getStash, error } = useQZoneForm({ zoneId: zoneId! }, { skip })\n\n  const zone = getStash(data => normalizeZoneToValues(data.zone))\n\n  React.useEffect(() => {\n    if (zoneId && error) {\n      routeToZoneList()\n      return\n    }\n  }, [error, routeToZoneList, zoneId])\n\n  React.useEffect(() => {\n    if (zone && zone.id !== xform.state.values.id) {\n      xform.api.mergeValues(zone)\n      xform.state.pristineValues = { ...zone }\n    }\n  }, [zone, xform.api, xform.state])\n\n  React.useEffect(() => {\n    return () => {\n      xform.api.resetForm()\n    }\n  }, [xform.api, zoneId])\n\n  return <XFormRender xform={xform}>{children as ReactNodes}</XFormRender>\n}\n\nfunction getInitialValues(): TZoneFormValues {\n  return {\n    id: '',\n    type: ZoneTypeEnum.Area,\n    name: '',\n    enabled: true,\n    branchId: '',\n    zoneColor: '',\n    geoPolygon: [],\n    minimalPrice: '0',\n    priceRules: {},\n    priceRulesOrder: [],\n    currencyCode: '',\n  }\n}\n\nconst withoutTypeName = RM.omit(['__typename'])\n\nfunction normalizeZoneToValues(zone: TZoneInForm): TZoneFormValues {\n  return {\n    id: zone.id,\n    type: zone.zoneType.enum,\n    name: zone.name,\n    enabled: zone.enabled,\n    zoneColor: zone.zoneColor.id,\n    branchId: zone.branchWithCurrency.id,\n    geoPolygon: zone.geoPolygon.map(withoutTypeName),\n    currencyCode: zone.branchWithCurrency.currency.code,\n    minimalPrice: formatPrice(zone.minimalOrderPrice.value),\n    ...normalizePriceRules(zone),\n  }\n}\n\nfunction normalizePriceRules(zone: TZoneInForm) {\n  // it's neccessary to add temporary ID for the collection to be modified safely\n  const indexedPriceRules: TZoneFormPriceRule[] = zone.priceRangeRules.map(\n    (rule, idx) => ({\n      clientId: String(idx + 1),\n      toPrice: formatPrice(rule.toPrice.value),\n      price: formatPrice(rule.price.value),\n    }),\n  )\n  return {\n    priceRulesOrder: indexedPriceRules.map(RM.prop('clientId')),\n    priceRules: indexedPriceRules.reduce((acc, rule) => {\n      acc[rule.clientId] = rule\n      return acc\n    }, {}),\n  }\n}\n\nfunction getWriteVariables(values: TZoneFormValues): InputZoneUpdate {\n  return {\n    name: values.name,\n    enabled: values.enabled,\n    companyBranch: values.branchId,\n    zoneColor: values.zoneColor,\n    geoPolygon: values.geoPolygon,\n    minimalOrderPrice: {\n      value: parseNumber(values.minimalPrice),\n    },\n    priceRangeRules: values.priceRulesOrder.map((clientId, idx) =>\n      normalizePriceRuleToWrite(\n        values.priceRules[clientId],\n        idx === values.priceRulesOrder.length - 1,\n      ),\n    ),\n  }\n}\n\nfunction normalizePriceRuleToWrite(rule: TZoneFormPriceRule, isLast: boolean) {\n  return {\n    price: { value: parseNumber(rule.price) },\n    toPrice: { value: isLast ? -1 : parseNumber(rule.toPrice) },\n  }\n}\n","import { OverlayView } from '@react-google-maps/api'\nimport React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { FCompanyBranchFragment } from '../graph/generated'\nimport { gpsToLatLng } from '../helpers/gps'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  branch: FCompanyBranchFragment\n  isActive?: boolean\n}\n\nconst BranchNameStyled = styled.div`\n  ${getColors} font-size: 1.3rem;\n  white-space: nowrap;\n  padding: 0.2rem 0.5rem;\n`\n\nexport const MapCompanyBranchMarker: React.FC<IProps> = ({\n  branch,\n  isActive = true,\n}) => (\n  <OverlayView\n    getPixelPositionOffset={(width, height) => ({\n      x: -(width / 2),\n      y: -(height / 2),\n    })}\n    mapPaneName={OverlayView.MARKER_LAYER}\n    position={gpsToLatLng(branch.gps)}\n  >\n    <BranchNameStyled isActive={isActive}>{branch.name}</BranchNameStyled>\n  </OverlayView>\n)\n\nfunction getColors({ isActive }: { isActive: boolean }) {\n  return css`\n    background-color: ${isActive ? Colors.green : Colors.greyLight};\n    color: ${isActive ? Colors.white : Colors.greyDark};\n  `\n}\n","import { Polygon } from '@react-google-maps/api'\nimport React from 'react'\n\nimport { ZoneTypeEnum } from '../../../graph/generated'\nimport { gpsToLatLng } from '../../../helpers/gps'\n\ninterface IZoneMapAreaProps {\n  points: RoA<GeoPoint>\n  type: ZoneTypeEnum\n  color: string\n  priority: number\n  onFocus?(): void\n}\n\nexport const ZoneMapArea: React.FC<IZoneMapAreaProps> = ({\n  points,\n  type,\n  color,\n  priority,\n  onFocus,\n}) => {\n  const onAreaFocus = React.useCallback(\n    (e: google.maps.PolyMouseEvent) => {\n      if (onFocus) {\n        e.stop()\n        onFocus()\n      }\n    },\n    [onFocus],\n  )\n\n  const getOptions = (): google.maps.PolygonOptions => {\n    if (type === ZoneTypeEnum.Return) {\n      return {\n        fillColor: 'transparent',\n        strokeWeight: 3,\n        strokeColor: color,\n        zIndex: 10000 - priority,\n      }\n    }\n    return {\n      fillColor: color,\n      fillOpacity: 0.3,\n      strokeWeight: 0,\n      zIndex: 5000 - priority,\n    }\n  }\n\n  return (\n    <Polygon\n      path={points.map(gpsToLatLng)}\n      options={getOptions()}\n      editable={false}\n      draggable={false}\n      onDblClick={onAreaFocus}\n    />\n  )\n}\n","import { Polygon } from '@react-google-maps/api'\nimport React from 'react'\n\nimport { ZoneTypeEnum } from '../../../graph/generated'\nimport { gpsToLatLng, latLngToGps } from '../../../helpers/gps'\n\ninterface IProps {\n  type: ZoneTypeEnum\n  color: string\n  initialPoints: RoA<GeoPoint>\n  onChange(points: GeoPoint[]): void\n}\n\nexport const ZoneMapEditableArea: React.FC<IProps> = ({\n  type,\n  color,\n  onChange,\n  initialPoints,\n}) => {\n  const polygonRef = React.useRef<google.maps.Polygon | null>(null)\n  const listenersRef = React.useRef<google.maps.MapsEventListener[]>([])\n\n  const onAreaChange = React.useCallback(() => {\n    if (polygonRef.current) {\n      const path = polygonRef.current.getPath()\n      onChange(path.getArray().map(latLngToGps))\n    }\n  }, [onChange])\n\n  const onLoad = React.useCallback(\n    (polygon: google.maps.Polygon) => {\n      polygonRef.current = polygon\n      const path = polygon.getPath()\n      listenersRef.current.push(\n        path.addListener('set_at', onAreaChange),\n        path.addListener('insert_at', onAreaChange),\n        path.addListener('remove_at', onAreaChange),\n      )\n    },\n    [onAreaChange],\n  )\n\n  const onUnmount = React.useCallback(() => {\n    listenersRef.current.forEach(lis => lis.remove())\n    listenersRef.current.length = 0\n    polygonRef.current = null\n  }, [])\n\n  const initialPointsRef = React.useRef(initialPoints)\n  const initialPath = React.useMemo(\n    () => initialPointsRef.current.map(gpsToLatLng),\n    [],\n  )\n\n  const getOptions = (): google.maps.PolygonOptions => {\n    if (type === ZoneTypeEnum.Return) {\n      return {\n        fillColor: 'transparent',\n        strokeWeight: 5,\n        strokeColor: color,\n        zIndex: 20000,\n      }\n    }\n    return {\n      fillColor: color,\n      fillOpacity: 0.1,\n      strokeWeight: 2,\n      zIndex: 20000,\n    }\n  }\n\n  return (\n    <Polygon\n      path={initialPath}\n      options={getOptions()}\n      editable={true}\n      draggable={true}\n      onDragEnd={onAreaChange}\n      onLoad={onLoad}\n      onUnmount={onUnmount}\n    />\n  )\n}\n","import { useQZoneColors } from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\n\nexport function useZoneColors() {\n  const { getStash } = useQZoneColors({}, { fetchPolicy: 'cache-first' })\n  return getStash(data => data.zoneColors) || ARRAY_EMPTY\n}\n","import { useRoot } from '../../../atoms/RootProvider'\n\nexport function useZoneModel() {\n  const { zone: zoneModel } = useRoot()\n  return zoneModel\n}\n","import { useRoot } from '../../../atoms/RootProvider'\nimport { useQZoneList } from '../../../graph/generated'\nimport { idProp } from '../../../tools/ramda'\n\nexport function useZoneListQuery() {\n  const { zone } = useRoot()\n  const branches = zone.branches.filter(zone.branchFilterPredicate).map(idProp)\n  const skip = branches.length === 0\n\n  const { getStash, loading } = useQZoneList({ branches }, { skip })\n\n  const zones = getStash(data => data.zones)\n\n  return { zones, loading }\n}\n","import { useXField, useXFieldState } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React, { useCallback } from 'react'\n\nimport { BaseMap } from '../../../atoms/BaseMap'\nimport { FCompanyBranchFragment } from '../../../graph/generated'\nimport { MapCompanyBranchMarker } from '../../../molecules/MapCompanyBranchMarker'\nimport { Colors } from '../../../styling'\nimport { idPropEq } from '../../../tools/ramda'\nimport { ZoneMapArea } from '../atoms/ZoneMapArea'\nimport { ZoneMapEditableArea } from '../atoms/ZoneMapEditableArea'\nimport { useZoneColors } from '../hooks/useZoneColors'\nimport { useZoneMapControl } from '../hooks/useZoneMapControl'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { TZoneFormValues, TZoneInList } from '../zones.types'\n\ninterface IProps {\n  zoneId: MaybeID\n}\n\nexport const ZoneMap = observer<IProps>(({ zoneId }) => {\n  const zoneModel = useZoneModel()\n\n  const { isActive, branches, zones } = useZoneMapControl(zoneId)\n  const { routeToZoneEdit } = useZoneRouteControl()\n\n  const renderZoneArea = (zone: TZoneInList) => {\n    if (zone.id === zoneId) {\n      return null\n    }\n\n    return (\n      <ZoneMapArea\n        key={`zone${zone.id}`}\n        type={zone.zoneType.enum}\n        points={zone.geoPolygon}\n        priority={zone.priority}\n        color={\n          isActive(zone.companyBranch.id) && zone.enabled && zoneId === null\n            ? zone.zoneColor.color\n            : Colors.greyMiddle\n        }\n        onFocus={() => {\n          if (isActive(zone.companyBranch.id)) {\n            routeToZoneEdit(zone.id)\n          }\n        }}\n      />\n    )\n  }\n\n  const polygonField = useXField<TZoneFormValues['geoPolygon']>('geoPolygon')\n  const typeField = useXFieldState<TZoneFormValues['type']>('type')\n  const colorField = useXFieldState<TZoneFormValues['zoneColor']>('zoneColor')\n  const zoneColors = useZoneColors()\n\n  const renderEditZone = () => {\n    if (polygonField.value.length === 0) {\n      return null\n    }\n    const zoneColor = zoneColors.find(idPropEq(colorField.value))\n    return (\n      <ZoneMapEditableArea\n        key={`zone${zoneId}`}\n        type={typeField.value}\n        color={zoneColor ? zoneColor.color : ''}\n        initialPoints={polygonField.value}\n        onChange={polygonField.setValue}\n      />\n    )\n  }\n\n  const renderBranchLabel = useCallback(\n    (branch: FCompanyBranchFragment) => (\n      <MapCompanyBranchMarker\n        key={`branch${branch.id}`}\n        branch={branch}\n        isActive={isActive(branch.id)}\n      />\n    ),\n    [isActive],\n  )\n\n  return (\n    <BaseMap model={zoneModel.map}>\n      {zones && zones.map(renderZoneArea)}\n      {zoneId && renderEditZone()}\n      {branches && branches.map(renderBranchLabel)}\n    </BaseMap>\n  )\n})\n","import { useAutorun } from '@speedlo/hooks'\nimport { getCenter } from 'geolib'\nimport { useAsObservableSource } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { idPropEq } from '../../../tools/ramda'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneListQuery } from './useZoneListQuery'\n\nexport function useZoneMapControl(zoneId: MaybeID) {\n  const zoneModel = useZoneModel()\n  const { zones } = useZoneListQuery()\n\n  const branches = zoneModel.branches.filter(zoneModel.branchFilterPredicate)\n\n  const isActive = React.useCallback(\n    (companyBranchId: ID) => {\n      return (\n        !zoneModel.hasBranchFilter ||\n        companyBranchId === zoneModel.branchFilterId\n      )\n    },\n    [zoneModel],\n  )\n\n  const source = useAsObservableSource({ zoneId, zones })\n\n  // when editing zone, pan map to branch with that zone\n  useAutorun(() => {\n    if (zoneModel.map.isReady && source.zoneId && source.zones) {\n      const zone = source.zones.find(idPropEq(source.zoneId))\n      if (zone) {\n        const center = getCenter(zone.geoPolygon as GeoPoint[])\n        zoneModel.map.panTo(center as GeoPoint)\n      }\n    }\n  })\n\n  // when branch changes and we are not editing zone, pan to branch gps\n  useAutorun(() => {\n    if (zoneModel.map.isReady && zoneModel.branch && !source.zoneId) {\n      zoneModel.map.panTo(zoneModel.branch.gps)\n    }\n  })\n\n  return { isActive, branches, zones }\n}\n","import { XFieldName } from '@speedlo/xform'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { FormDropdownSingle } from '../../../components/forms/FormDropdownSingle'\nimport { QZoneColorsZoneColors } from '../../../graph/generated'\nimport { Colors } from '../../../styling'\nimport { idProp, RM } from '../../../tools/ramda'\nimport { useZoneColors } from '../hooks/useZoneColors'\n\ninterface IProps {\n  fieldName: XFieldName\n}\n\nconst ColorOption = styled.div`\n  background-color: ${({ color }: { color: string }) => color};\n  color: ${Colors.white};\n  width: 6rem;\n  padding: 0.4rem 1rem;\n  margin: 0;\n  height: 100%;\n`\n\nconst makeStyles = () => ({\n  option: base => ({\n    ...base,\n    padding: 0,\n    margin: 0,\n  }),\n  menu: base => ({\n    ...base,\n    width: '8rem',\n    maxWidth: '8rem',\n  }),\n})\n\nexport const ZoneColorSelector: React.FC<IProps> = ({ fieldName }) => {\n  const zoneColors = useZoneColors()\n  return (\n    <FormDropdownSingle<QZoneColorsZoneColors>\n      fieldName={fieldName}\n      options={zoneColors}\n      isLoading={zoneColors.length === 0}\n      width={8}\n      styles={makeStyles()}\n      defaultValue={RM.head(zoneColors)}\n      getOptionValue={idProp}\n      formatOptionLabel={zoneColor => (\n        <ColorOption color={zoneColor.color}>{zoneColor.code}</ColorOption>\n      )}\n    />\n  )\n}\n","import { t } from '@lingui/macro'\nimport { XFieldName, XFieldValidator } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { StyledFormInput } from '../../../atoms/FormInputStyled'\nimport { FormDisplayValue } from '../../../components/forms/FormDisplayValue'\nimport { useFormInputProps } from '../../../components/forms/FormInput'\nimport { LocaleNumber } from '../../../helpers/numeral'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {\n  fieldName: XFieldName\n  validate?: XFieldValidator<LocaleNumber>\n}\n\nexport const ZoneFormForPrice = observer<IProps, HTMLInputElement>(\n  ({ fieldName, validate }, ref) => {\n    const fieldInputProps = useFormInputProps({\n      fieldName,\n      validate,\n    })()\n\n    return (\n      <>\n        <label className=\"forPriceLabel\" htmlFor={fieldInputProps.id}>\n          {i18n._(\n            /*i18n: Label for input with transport fee used when zone rule applies */ t`for`,\n          )}\n        </label>\n        <StyledFormInput\n          {...fieldInputProps}\n          className=\"forPrice\"\n          ref={ref}\n          inputFullWidth={true}\n        />\n        <FormDisplayValue fieldName=\"currencyCode\" />\n      </>\n    )\n  },\n  { forwardRef: true },\n)\n","import { t } from '@lingui/macro'\nimport { XFieldName, XFieldValidator } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { StyledFormInput } from '../../../atoms/FormInputStyled'\nimport { FormDisplayValue } from '../../../components/forms/FormDisplayValue'\nimport { useFormInputProps } from '../../../components/forms/FormInput'\nimport { LocaleNumber } from '../../../helpers/numeral'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {\n  fieldName: XFieldName\n  validate?: XFieldValidator<LocaleNumber>\n  asInfinity?: boolean\n}\n\nexport const ZoneFormToPrice = observer<IProps, HTMLInputElement>(\n  ({ fieldName, validate, asInfinity = false }, ref) => {\n    const fieldInputProps = useFormInputProps({\n      fieldName,\n      validate,\n    })()\n\n    const inputProps = {\n      ...fieldInputProps,\n      className: 'toPrice',\n      ref,\n    }\n\n    const label = (\n      <label className=\"toPriceLabel\" htmlFor={fieldInputProps.id}>\n        {i18n._(\n          /*i18n: Label for input with upper bound of order price where zone rule is applied */ t`to`,\n        )}\n      </label>\n    )\n\n    if (asInfinity) {\n      return (\n        <>\n          {label}\n          <StyledFormInput\n            {...inputProps}\n            value=\"\"\n            disabled\n            placeholder=\"&infin;\"\n          />\n        </>\n      )\n    }\n\n    return (\n      <>\n        {label}\n        <StyledFormInput {...inputProps} />\n        <FormDisplayValue fieldName=\"currencyCode\" />\n      </>\n    )\n  },\n  { forwardRef: true },\n)\n","import { XFieldPath } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { parseNumber } from '../../../helpers/numeral'\nimport { i18n } from '../../../i18n'\nimport { ZoneFormForPrice } from './ZoneFormForPrice'\nimport { ZoneFormToPrice } from './ZoneFormToPrice'\n\ninterface IProps {\n  fieldPath: XFieldPath\n  shouldFocus: boolean\n  isLastRule: boolean\n}\n\nexport const ZoneFormRuleInputs = observer<IProps>(\n  ({ fieldPath, shouldFocus, isLastRule }) => {\n    const toPriceRef = React.useRef<HTMLInputElement>(null)\n    const forPriceRef = React.useRef<HTMLInputElement>(null)\n\n    const validate = React.useCallback(value => {\n      if (isNaN(parseNumber(value))) {\n        return i18n.t`Zone price rules cannot have empty values.`\n      }\n      return\n    }, [])\n\n    React.useEffect(() => {\n      if (!shouldFocus) {\n        return\n      }\n      if (toPriceRef.current && !isLastRule) {\n        toPriceRef.current.focus()\n      } else if (forPriceRef.current) {\n        forPriceRef.current.focus()\n      }\n    }, [shouldFocus, isLastRule])\n\n    return (\n      <>\n        <div className=\"toPriceField\">\n          <div className=\"verticalLine\"></div>\n          <ZoneFormToPrice\n            fieldName={[...fieldPath, 'toPrice']}\n            validate={validate}\n            ref={toPriceRef}\n            asInfinity={isLastRule}\n          />\n        </div>\n        <div className=\"forPriceField\">\n          <ZoneFormForPrice\n            fieldName={[...fieldPath, 'price']}\n            validate={validate}\n            ref={forPriceRef}\n          />\n        </div>\n      </>\n    )\n  },\n)\n","import { AddCircle } from '@material-ui/icons'\nimport { useXField, useXFieldState, useXFormState } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React, { Fragment } from 'react'\nimport styled from 'styled-components'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Colors, Spacing } from '../../../styling'\nimport { RM } from '../../../tools/ramda'\nimport { ZoneFormRuleInputs } from '../atoms/ZoneFormRuleInputs'\nimport { ZoneFormToPrice } from '../atoms/ZoneFormToPrice'\nimport { TZoneFormValues } from '../zones.types'\n\ninterface IProps {}\n\nconst StyledZoneFormPriceRules = styled.div`\n  display: grid;\n\n  grid-template-columns: 4.5rem 7rem 8rem 4.5rem;\n\n  & input {\n    width: 4rem;\n    z-index: 1;\n  }\n  & label {\n    margin: ${Spacing.Middle};\n  }\n\n  & .minimalPriceField {\n    grid-column: 2;\n    display: flex;\n    align-items: center;\n  }\n  & .minimalPriceField span {\n    margin: ${Spacing.Middle};\n  }\n  & .addRule {\n    grid-column: 1;\n    justify-self: start;\n    align-self: center;\n    margin-bottom: 3rem;\n  }\n  & .toPriceField {\n    grid-column: 2;\n    display: flex;\n    align-items: center;\n    align-self: end;\n    position: relative;\n  }\n  & .toPriceField span {\n    margin: ${Spacing.Middle};\n  }\n  & .forPriceField {\n    grid-column: 3;\n    display: flex;\n    align-items: center;\n    align-self: center;\n    margin-bottom: 3rem;\n  }\n  & .forPriceField input {\n    color: ${Colors.blue};\n    width: 4rem;\n  }\n  & .forPriceField span {\n    margin: ${Spacing.Middle};\n  }\n  & .removeRule {\n    height: 5rem;\n    margin-bottom: 3rem;\n    grid-column: 4;\n    display: flex;\n    align-items: center;\n    justify-self: end;\n    align-self: center;\n  }\n  & .verticalLine {\n    width: 3px;\n    height: 8rem;\n    background: ${Colors.greyMiddle};\n    position: absolute;\n    top: -112px;\n    left: 62px;\n  }\n`\n\nexport const ZoneFormPriceRules: React.FC<IProps> = () => {\n  const rulesOrderField = useXField<TZoneFormValues['priceRulesOrder']>(\n    'priceRulesOrder',\n  )\n  const rulesField = useXFieldState<TZoneFormValues['priceRules']>('priceRules')\n  const state = useXFormState()\n\n  const [focusId, setFocusId] = React.useState<MaybeID>(null)\n\n  // artificial ID for a dynamic changes of array\n  const idCounter = React.useRef(rulesOrderField.value.length)\n\n  React.useEffect(() => {\n    if (idCounter.current < rulesOrderField.value.length) {\n      idCounter.current = rulesOrderField.value.length\n    }\n  }, [rulesOrderField.value])\n\n  const addRule = (afterRule: ID) => {\n    const idx = rulesOrderField.value.findIndex(RM.equals(afterRule))\n    const ruleId = String(++idCounter.current)\n    rulesOrderField.value.splice(idx, 0, ruleId)\n    rulesField.value[ruleId] = {\n      clientId: String(ruleId),\n      toPrice: null,\n      price: null,\n    }\n    setFocusId(ruleId)\n  }\n\n  const removeRule = (rule: ID) => {\n    const idx = rulesOrderField.value.findIndex(RM.equals(rule))\n    rulesOrderField.value.splice(idx, 1)\n  }\n\n  return useObserver(() => (\n    <StyledZoneFormPriceRules>\n      <div className=\"minimalPriceField\">\n        <ZoneFormToPrice fieldName={['minimalPrice']} />\n      </div>\n      {rulesOrderField.value.map((ruleId, idx, rules) => (\n        <Fragment key={ruleId}>\n          <TouchButton\n            className=\"addRule\"\n            disabled={state.isSubmitting}\n            width={Spacing.ButtonHeight + Spacing.DefaultSizeUnit}\n            height={Spacing.ButtonHeight + Spacing.DefaultSizeUnit}\n            onClick={() => addRule(ruleId)}\n            icon={AddCircle}\n            title={i18n.t`Add another range`}\n          />\n          <ZoneFormRuleInputs\n            fieldPath={['priceRules', ruleId]}\n            shouldFocus={ruleId === focusId}\n            isLastRule={idx === rules.length - 1}\n          />\n          <div className=\"removeRule\">\n            <TouchButtonDelete\n              onDelete={() => removeRule(ruleId)}\n              title={i18n.t`Remove price range`}\n              disabled={rules.length <= 1}\n            />\n          </div>\n        </Fragment>\n      ))}\n    </StyledZoneFormPriceRules>\n  ))\n}\n","import { Trans } from '@lingui/macro'\nimport { ColorLens, Label } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Headline } from '../../../atoms/Headline'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormInput } from '../../../components/forms/FormInput'\nimport { FormCheckbox } from '../../../components/forms/FormInputCheckbox'\nimport { ZoneTypeEnum } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { Colors, Spacing } from '../../../styling'\nimport { ZoneColorSelector } from '../molecules/ZoneColorSelector'\nimport { ZoneFormPriceRules } from '../molecules/ZoneFormPriceRules'\n\ninterface IProps {\n  type: ZoneTypeEnum\n}\n\nconst StyledZoneFormContent = styled.div`\n  margin: ${Spacing.Middle};\n  color: ${Colors.black};\n\n  .description {\n    color: ${Colors.greyDark};\n    padding-bottom: 0.2rem;\n  }\n`\n\nexport const ZoneFormContent: React.FC<IProps> = ({ type }) => (\n  <StyledZoneFormContent>\n    <IconLine icon={Label}>\n      <FormInput fieldName=\"name\" />\n    </IconLine>\n\n    <IconLine icon={ColorLens}>\n      <ZoneColorSelector fieldName=\"zoneColor\" />\n    </IconLine>\n\n    <FormCheckbox\n      fieldName=\"enabled\"\n      label={i18n.t`Is active`.toLocaleLowerCase()}\n    />\n\n    {type === ZoneTypeEnum.Area && (\n      <>\n        <Trans>\n          <Headline margin=\"0.5rem 0 0 0\">Delivery cost</Headline>\n          <div className=\"description\">according order total cost</div>\n        </Trans>\n\n        <ZoneFormPriceRules />\n      </>\n    )}\n  </StyledZoneFormContent>\n)\n","import { Trans } from '@lingui/macro'\nimport { useXFormState } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { FormSubmitButton } from '../../../components/forms/FormSubmitButton'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\n\ninterface IProps {}\n\nexport const ZoneFormControls: React.FC<IProps> = () => {\n  const state = useXFormState()\n  const { routeToZoneList } = useZoneRouteControl()\n  return useObserver(() => (\n    <FlexRowSingle>\n      <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n        <TouchButton\n          color={Colors.greyMiddle}\n          text={i18n.t`Back`}\n          onClick={routeToZoneList}\n          disabled={state.isSubmitting}\n        />\n      </FlexColumn>\n      <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n        <CanMutate mutationName=\"updateZone\">\n          <FormSubmitButton>\n            <Trans>Save zone</Trans>\n          </FormSubmitButton>\n        </CanMutate>\n      </FlexColumn>\n    </FlexRowSingle>\n  ))\n}\n","import { useXFieldState, useXFormState } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport Goodbye from 'react-goodbye'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { ConfirmDialog } from '../../../atoms/ConfirmDialog'\nimport { useMZoneDelete } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Spacing } from '../../../styling'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { ZoneFormContent } from '../molecules/ZoneFormContent'\nimport { ZoneFormControls } from '../molecules/ZoneFormControls'\nimport { TZoneFormValues } from '../zones.types'\n\nconst DeleteButtonContainer = styled.div`\n  width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  margin-top: ${Spacing.Middle};\n`\n\ninterface IProps {\n  zoneId: MaybeID\n}\n\nexport const ZoneFormPanel = observer<IProps>(({ zoneId }) => {\n  const { routeToZoneList } = useZoneRouteControl()\n\n  const [deleteZone] = useMZoneDelete()\n\n  const onDelete = React.useCallback(async () => {\n    if (zoneId) {\n      await deleteZone({ zoneId })\n    }\n    routeToZoneList()\n  }, [deleteZone, routeToZoneList, zoneId])\n\n  const state = useXFormState<TZoneFormValues>()\n\n  const { value: type } = useXFieldState('type')\n\n  return (\n    <Card padding={0}>\n      <ZoneFormControls />\n      <ZoneFormContent type={type} />\n\n      <CanMutate mutationName=\"destroyZone\">\n        <DeleteButtonContainer>\n          <TouchButtonDelete\n            disabled={state.isSubmitting}\n            confirmText={i18n.t`Remove zone ${state.values.name}?`}\n            onDelete={onDelete}\n          />\n        </DeleteButtonContainer>\n      </CanMutate>\n\n      <Goodbye when={state.isDirty}>\n        {({ isShow, handleOk, handleCancel }) => (\n          <ConfirmDialog\n            isShow={isShow}\n            confirmText={i18n.t`Do you want to cancel changes for the zone?`}\n            onConfirm={handleOk}\n            onCancel={handleCancel}\n          />\n        )}\n      </Goodbye>\n    </Card>\n  )\n})\n","import { observer } from 'mobx-react-lite'\n\nimport { useRoot } from './RootProvider'\n\nexport const UserHasMultipleBranches = observer(({ children }) => {\n  const { user } = useRoot()\n  return user.hasSingleBranch ? null : (children as any)\n})\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { ZoneTypeEnum } from '../../../graph/generated'\nimport { Colors } from '../../../styling'\n\ninterface IProps {\n  type: ZoneTypeEnum\n}\n\nconst StyledZoneListSection = styled.p`\n  color: ${Colors.greyMiddle};\n`\n\nexport const ZoneListSection: React.FC<IProps> = ({ type }) => {\n  if (type === ZoneTypeEnum.Return) {\n    return (\n      <StyledZoneListSection>\n        <Trans>\n          Notification will be shown when driver enters one of these zones.\n        </Trans>\n      </StyledZoneListSection>\n    )\n  }\n  return null\n}\n","import { AddCircle } from '@material-ui/icons'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useMZoneCreate, ZoneTypeEnum } from '../../../graph/generated'\nimport { generatePolygon } from '../../../helpers/gps'\nimport { useSnackBar } from '../../../hooks/useSnackBar'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\n\ninterface IProps {\n  type: ZoneTypeEnum\n}\n\nexport const CreateZoneButton = observer<IProps>(({ type }) => {\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n\n  const [createZone] = useMZoneCreate()\n  const { enqueueSuccess } = useSnackBar()\n\n  const [disabled, setDisabled] = React.useState(false)\n\n  const onClick = async () => {\n    if (!zoneModel.branch) {\n      return\n    }\n    setDisabled(true)\n    const result = await createZone({\n      type,\n      branchId: zoneModel.branch.id,\n      points: generatePolygon({\n        center: zoneModel.branch.gps,\n        metersRadius: 1000,\n        pointsCount: 5,\n      }),\n    })\n    if (result) {\n      enqueueSuccess(i18n.t`Zone has been created`)\n      routeToZoneEdit(result.createZone.id)\n    }\n  }\n\n  const createTextByType = {\n    [ZoneTypeEnum.Area]: i18n.t`Create delivery zone for branch`,\n    [ZoneTypeEnum.Return]: i18n.t`Create return zone for branch`,\n  }\n\n  const colorByType = {\n    [ZoneTypeEnum.Area]: Colors.turquoise,\n    [ZoneTypeEnum.Return]: Colors.greyMiddle,\n  }\n\n  const text = zoneModel.hasBranchFilter\n    ? createTextByType[type]\n    : i18n.t`Select branch to create zone`\n\n  return (\n    <TouchButton\n      text={text}\n      onClick={onClick}\n      disabled={disabled || !zoneModel.hasBranchFilter}\n      color={colorByType[type]}\n      height={Spacing.ButtonHeight + Spacing.DefaultSizeUnit}\n      textNextToIcon\n      icon={AddCircle}\n    />\n  )\n})\n","import { Edit } from '@material-ui/icons'\nimport Color from 'color'\nimport React from 'react'\nimport { SortableElement } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Card } from '../../../atoms/Card'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { SizerButton } from '../../../atoms/SizerButton'\nimport {\n  FCompanyBranchFragment,\n  FZoneFragment,\n  ZoneTypeEnum,\n} from '../../../graph/generated'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\n\ninterface IProps {\n  type: ZoneTypeEnum\n  zone: FZoneFragment\n  branch: FCompanyBranchFragment\n  onEdit(): void\n}\n\ninterface IStyledProps {\n  type: ZoneTypeEnum\n  color: string\n}\n\nconst StyledZoneListCard = styled(Card)<IStyledProps>`\n  background: ${getBackgroundColor};\n`\n\nfunction getBackgroundColor({ color, type }: IStyledProps) {\n  if (type === ZoneTypeEnum.Area) {\n    return ''\n  }\n  const baseColor = Color(color)\n    .alpha(0.8)\n    .darken(0.2)\n  const lighterColor = baseColor.lighten(0.4)\n  return `repeating-linear-gradient(135deg, ${baseColor}, ${baseColor} 10px, ${lighterColor} 10px, ${lighterColor} 20px)`\n}\n\nconst ZoneNameStyled = styled.div`\n  font-size: 1.125rem;\n  margin-top: 0.2rem;\n`\n\nconst ZoneDescriptionStyled = styled.div`\n  font-size: 0.875rem;\n`\nconst ZoneFlexRowStyled = styled(FlexRowSingle)`\n  height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n`\n\nexport const ZoneListCard = SortableElement(\n  ({ zone, branch, type, onEdit }: IProps) => (\n    <StyledZoneListCard\n      key={zone.id}\n      type={type}\n      padding={0}\n      color={zone.enabled ? zone.zoneColor.color : Colors.greyMiddle}\n      onClick={onEdit}\n    >\n      <ZoneFlexRowStyled>\n        <FlexColumn fixedWidth padding=\"0 0.5rem 0 0\">\n          <SizerButton>\n            <TouchButton icon={Edit} />\n          </SizerButton>\n        </FlexColumn>\n        <FlexColumn widthGrowIndex={1}>\n          <ZoneNameStyled>\n            {zone.name}\n            {` [P${zone.priority}]`}\n          </ZoneNameStyled>\n          <ZoneDescriptionStyled>{branch.name}</ZoneDescriptionStyled>\n        </FlexColumn>\n        <FlexColumn padding=\"0\">\n          <DragHandle />\n        </FlexColumn>\n      </ZoneFlexRowStyled>\n    </StyledZoneListCard>\n  ),\n)\n","import React from 'react'\nimport { SortableContainer, SortEndHandler } from 'react-sortable-hoc'\nimport styled from 'styled-components/macro'\n\nimport { ZoneTypeEnum } from '../../../graph/generated'\n\ninterface IProps {\n  type: ZoneTypeEnum\n  children: ReactNodes\n  onSort: SortEndHandler\n}\n\nconst ZoneListContainerStyled = styled.div`\n  margin-top: 0.5rem;\n  cursor: arrow;\n`\n\nconst SortableZoneList = SortableContainer(ZoneListContainerStyled)\n\nexport const ZoneListCardGroup: React.FC<IProps> = ({\n  type,\n  onSort,\n  children,\n}) => {\n  return (\n    <SortableZoneList\n      onSortEnd={onSort}\n      useDragHandle\n      lockAxis=\"y\"\n      lockToContainerEdges\n    >\n      {children}\n    </SortableZoneList>\n  )\n}\n","import React from 'react'\nimport { SortEndHandler } from 'react-sortable-hoc'\n\nimport { useMZoneUpdatePriority, ZoneTypeEnum } from '../../../graph/generated'\nimport { RM } from '../../../tools/ramda'\nimport { TZoneInList } from '../zones.types'\nimport { useZoneListQuery } from './useZoneListQuery'\n\nconst sortZones = RM.sortWith<TZoneInList>([\n  RM.ascend(RM.path(['companyBranch', 'name'])),\n  RM.descend(RM.prop('priority')),\n])\n\nconst groupByBranch = RM.groupBy((zone: TZoneInList) => zone.companyBranch.id)\nconst isZoneType = RM.pathEq(['zoneType', 'enum'])\n\nexport function useZoneListControl(type: ZoneTypeEnum) {\n  const { zones, loading } = useZoneListQuery()\n\n  const zonesByBranch = React.useMemo(() => {\n    if (!zones) {\n      return null\n    }\n    return RM.mapObjIndexed(\n      sortZones,\n      groupByBranch(zones.filter(isZoneType(type))),\n    )\n  }, [type, zones])\n\n  const [updatePriority] = useMZoneUpdatePriority()\n\n  const onZoneSort: SortEndHandler = React.useCallback(\n    ({ oldIndex, newIndex, collection }) => {\n      if (!zonesByBranch) {\n        return\n      }\n      const group = zonesByBranch[collection]\n      const zone = group[oldIndex]\n\n      const offset = oldIndex - newIndex\n\n      updatePriority(\n        {\n          zoneId: zone.id,\n          offset,\n        },\n        {\n          optimisticResponse: {\n            __typename: 'Mutation',\n            updateZonePriority: [\n              {\n                __typename: 'Zone',\n                id: zone.id,\n                priority: zone.priority + offset,\n              },\n            ],\n          },\n        },\n      )\n    },\n    [zonesByBranch, updatePriority],\n  )\n\n  return { isLoading: loading, zonesByBranch, onZoneSort }\n}\n","import { Trans } from '@lingui/macro'\nimport { observer } from 'mobx-react-lite'\nimport React, { Fragment } from 'react'\nimport { BulletList } from 'react-content-loader'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { ZoneTypeEnum } from '../../../graph/generated'\nimport { idPropEq } from '../../../tools/ramda'\nimport { ZoneListCard } from '../atoms/ZoneListCard'\nimport { ZoneListCardGroup } from '../atoms/ZoneListCardGroup'\nimport { useZoneListControl } from '../hooks/useZoneListControl'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { TBranch, TZoneInList } from '../zones.types'\n\ninterface IProps {\n  type: ZoneTypeEnum\n}\n\nexport const ZoneList = observer<IProps>(({ type }) => {\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n  const { isLoading, zonesByBranch, onZoneSort } = useZoneListControl(type)\n\n  if (isLoading === null) {\n    return <BulletList primaryOpacity={0.2} secondaryOpacity={0.2} />\n  }\n\n  if (zonesByBranch === null) {\n    return (\n      <CardListTitle>\n        <Trans>Select brand to see its zones</Trans>\n      </CardListTitle>\n    )\n  }\n\n  const branches = zoneModel.root.user.filterBranches(\n    zoneModel.branchFilterPredicate,\n  )\n\n  const renderZone = (zone: TZoneInList, idx: number) => (\n    <ZoneListCard\n      key={zone.id}\n      type={type}\n      zone={zone}\n      branch={branches.find(idPropEq(zone.companyBranch.id))!}\n      onEdit={() => routeToZoneEdit(zone.id)}\n      index={idx}\n      collection={zone.companyBranch.id}\n    />\n  )\n\n  const renderBranch = (branch: TBranch, branchZones: RoA<TZoneInList>) => (\n    <Fragment key={branch.id}>\n      <CardListTitle>{branch.name}</CardListTitle>\n      {branchZones.map(renderZone)}\n    </Fragment>\n  )\n\n  return (\n    <ZoneListCardGroup type={type} onSort={onZoneSort}>\n      {branches.map(branch => {\n        const branchZones = zonesByBranch[branch.id]\n        return branchZones ? renderBranch(branch, branchZones) : null\n      })}\n    </ZoneListCardGroup>\n  )\n})\n","import { autorun } from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { FCompanyBranchBrand } from '../../../graph/generated'\nimport { RM } from '../../../tools/ramda'\nimport { CompanyBranchDropdown } from '../../../molecules/CompanyBranchDropdown'\nimport { CompanyBrandDropdown } from '../../../molecules/CompanyBrandDropdown'\n\nexport const ZoneFilter: React.FC = observer(() => {\n  const { user, zone } = useRoot()\n  const branches = user.branches\n\n  const getBrandBranches = React.useCallback(\n    (brand: Maybe<FCompanyBranchBrand>) =>\n      brand === null\n        ? []\n        : user.branches.filter(RM.pathEq(['brand', 'id'], brand.id)),\n    [user.branches],\n  )\n\n  React.useEffect(\n    () =>\n      autorun(() => {\n        if (branches.length === 1) {\n          zone.setBranchFilter(RM.head(branches)!)\n        }\n      }),\n    [branches, zone],\n  )\n\n  // no filter is shown for less than 1 branch available\n  if (branches.length <= 1) {\n    return null\n  }\n\n  const singleBrand = user.brands.length === 1 ? RM.head(user.brands)! : null\n  if (singleBrand) {\n    zone.setBrandFilter(singleBrand, getBrandBranches(zone.brand))\n  }\n\n  return (\n    <>\n      {!singleBrand && (\n        <CompanyBrandDropdown\n          selectedBrand={zone.brand}\n          onSelection={brand => {\n            if (brand === null) {\n              zone.clearBrandFilter()\n            } else {\n              zone.setBrandFilter(brand, getBrandBranches(brand))\n            }\n          }}\n        />\n      )}\n      {!singleBrand && <VerticalGap />}\n      <CompanyBranchDropdown\n        branches={getBrandBranches(zone.brand)}\n        selectedBranch={zone.branch}\n        autoFocus={Boolean(singleBrand)}\n        formatOptionLabel={RM.prop('name')}\n        isClearable={true}\n        onSingleSelection={branch => {\n          if (!branch) {\n            zone.clearBranchFilter()\n          } else {\n            zone.setBranchFilter(branch)\n          }\n        }}\n      />\n    </>\n  )\n})\n","import { Trans } from '@lingui/react'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { UserHasMultipleBranches } from '../../../atoms/UserHasMultipleBranches'\nimport { ZoneTypeEnum } from '../../../graph/generated'\nimport { useAutorunWhenSingleBranch } from '../../../hooks/useAutorunWhenSingleBranch'\nimport { ZoneListSection } from '../atoms/ZoneListSection'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { CreateZoneButton } from '../molecules/CreateZoneButton'\nimport { ZoneList } from '../molecules/ZoneList'\nimport { ZoneFilter } from './ZoneFilter'\n\nconst StyledZoneMenuPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n\n  & div.header {\n    flex: 0 0 auto;\n  }\n\n  & div.zone-list {\n    flex: 1 1 0;\n  }\n\n  & h3 {\n    margin-top: 6rem;\n  }\n`\n\nexport const ZoneMenuPanel = React.memo(() => {\n  const zoneModel = useZoneModel()\n\n  useAutorunWhenSingleBranch(branch => {\n    zoneModel.setBranchFilter(branch)\n  })\n\n  return useObserver(() => (\n    <StyledZoneMenuPanel>\n      <div className=\"header\">\n        <UserHasMultipleBranches>\n          <Card>\n            <ZoneFilter />\n          </Card>\n        </UserHasMultipleBranches>\n      </div>\n\n      <div className=\"zone-list\">\n        {zoneModel.zoneTypes.map((type, idx) => (\n          <div className={`list${idx}`} key={type}>\n            {type === ZoneTypeEnum.Return && (\n              <h3>\n                <Trans>Service zones</Trans>\n              </h3>\n            )}\n            <CanMutate mutationName=\"createZone\">\n              <CreateZoneButton type={type} />\n            </CanMutate>\n            <ZoneListSection type={type} />\n\n            <ZoneList type={type} />\n          </div>\n        ))}\n      </div>\n    </StyledZoneMenuPanel>\n  ))\n})\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport { i18n } from '../../../i18n'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { PageLayoutResponsive } from '../../../molecules/PageLayoutResponsive'\nimport { ROUTE_SETTINGS } from '../../settings/settings.routes'\nimport { ZoneFormLoader } from '../molecules/ZoneFormLoader'\nimport { ZoneMap } from '../molecules/ZoneMap'\nimport { ZoneFormPanel } from '../organisms/ZoneFormPanel'\nimport { ZoneMenuPanel } from '../organisms/ZoneMenuPanel'\n\ninterface IProps extends RouteComponentProps<{ zoneId?: ID }> {}\n\nexport const ZonesOverviewPage: React.FC<IProps> = ({ match }) => {\n  const zoneId = match.params.zoneId || null\n  const isEditing = Boolean(zoneId)\n  return (\n    <PageLayoutResponsive\n      pageTitle={i18n.t`Delivery zones`}\n      backRoute={ROUTE_SETTINGS}\n      useBackButton\n    >\n      <ZoneFormLoader zoneId={zoneId}>\n        <PageLayoutFullHeightItem\n          widthInColumns={6}\n          column={10}\n          rowInMobile={2}\n          withScrollArea={true}\n        >\n          {isEditing ? <ZoneFormPanel zoneId={zoneId} /> : <ZoneMenuPanel />}\n        </PageLayoutFullHeightItem>\n        <PageLayoutFullHeightItem\n          widthInColumns={10}\n          rowInMobile={1}\n          forcePercentHeightInMobile={60}\n        >\n          <ZoneMap zoneId={zoneId} />\n        </PageLayoutFullHeightItem>\n      </ZoneFormLoader>\n    </PageLayoutResponsive>\n  )\n}\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { ROUTE_SETTINGS_ZONES } from '../../settings/settings.routes'\nimport { ZonesOverviewPage } from '../pages/ZonesOverviewPage'\n\ninterface IProps {}\n\nexport const ZonesRouting: React.FC<IProps> = () => (\n  <Switch>\n    <Route\n      path={`${ROUTE_SETTINGS_ZONES}/:zoneId?`}\n      component={ZonesOverviewPage}\n    />\n    <Route component={NotFoundPage} />\n  </Switch>\n)\n\nexport default ZonesRouting\n"],"sourceRoot":""}