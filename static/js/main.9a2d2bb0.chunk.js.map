{"version":3,"sources":["segments/menu/models/MenuBaseModel.ts","atoms/SnackProvider.tsx","segments/menu/models/MenuStockModel.graphql.ts","helpers/formats.ts","segments/order/models/OrderStateModel.graphql.ts","atoms/PageTitle.tsx","segments/menu/organisms/CategoryList.graphql.ts","segments/zones/Zones.graphql.ts","styling.ts","pages/NotFoundPage.tsx","helpers/logger.ts","models/BaseModel.ts","routes/RedirectToLogin.tsx","segments/order/molecules/OrderStateDeliver.graphql.ts","helpers/ramda.ts","graph/generated.ts","segments/menu/organisms/StockList.graphql.ts","molecules/TouchButton.tsx","atoms/Card.tsx","molecules/FullPageLayout.tsx","hooks/useSnackBar.ts","atoms/SoundControl.tsx","organisms/LogoutWidget.tsx","molecules/HomeButton.tsx","molecules/PageLayout.tsx","atoms/Loading.tsx","atoms/GridLayout.tsx","segments/menu/models/MenuRecipeModel.ts","segments/menu/organisms/RecipeForm.graphql.ts","segments/menu/graph/AllergenFragment.graphql.ts","segments/businesshours/models/BusinessHoursModel.graphql.ts","segments/businesshours/models/BusinessHoursModel.ts","segments/menu/models/MenuCategoryModel.graphql.ts","segments/menu/models/MenuCategoryModel.ts","locale/numeral.ts","segments/overview/organisms/ClosureStatisticsControl.graphql.ts","locale/moment.ts","i18n.tsx","config.ts","segments/businesshours/organisms/SpecificBusinessHours.graphql.ts","segments/menu/organisms/CategoryForm.graphql.ts","segments/menu/graph/WareUnitFragment.graphql.ts","atoms/IntervalRender.tsx","atoms/SoundPlayInterval.tsx","assets/connectionWarning.mp3","segments/order/models/OrderListModel.ts","context/RootContext.ts","graph/SubscriptionLink.ts","graph/createClient.ts","graph/AuthLink.ts","helpers/persistModel.ts","segments/login/models/PasswordLoginModel.ts","segments/login/models/LoginProviderModel.ts","models/AuthModel.graphql.ts","models/AuthModel.ts","models/ConfigModel.ts","models/UserModel.graphql.ts","models/UserModel.ts","helpers/faker.ts","segments/createorder/models/CreateOrderModel.ts","models/MapModel.ts","segments/order/models/OrderMapModel.graphql.ts","segments/order/models/OrderMapModel.ts","segments/order/models/OrderStateModel.ts","segments/order/models/OrderModel.ts","segments/overview/models/StatisticsModel.ts","segments/settings/models/SettingsBaseModel.ts","segments/menu/models/MenuStockModel.ts","segments/menu/models/MenuModel.ts","segments/settings/models/SettingsModel.ts","segments/zones/models/ZoneMapModel.ts","segments/zones/models/ZoneModel.graphql.ts","segments/zones/models/ZoneModel.ts","models/RootModel.ts","atoms/RootProvider.tsx","helpers/sentry.ts","enableDebug.ts","helpers/gps.ts","../node_modules/moment/locale lazy /^/.*$/ groupOptions: {} namespace object","../node_modules/numeral/locales lazy /^/.*$/ groupOptions: {} namespace object","../ /^/.*/messages/.po$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","graph/errorHandler.ts","atoms/Pacman.tsx","graph/buildQuery.tsx","routes/SecureRoute.tsx","atoms/WithRoot.tsx","atoms/ConnectionWarning.tsx","atoms/ErrorContainer.tsx","atoms/UpdateHandler.tsx","pages/ErrorPage.tsx","routes/LogRoute.tsx","routes/RedirectAfterLogin.tsx","routes/RedirectAfterLogout.tsx","routes/Routing.tsx","App.tsx","atoms/Router.tsx","atoms/ThemeProvider.tsx","index.tsx","routes/LazyRoute.tsx","atoms/Icon.tsx","helpers/offline.ts","segments/menu/models/MenuRecipeModel.graphql.ts"],"names":["__webpack_require__","d","__webpack_exports__","MenuBaseModel","mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__","BaseModel","named","volatile","filterInput","actions","self","setFilterInput","input","views","branchId","getParent","settings","snackStyles","SnackProvider","emotion__WEBPACK_IMPORTED_MODULE_0__","notistack__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","n","_styling__WEBPACK_IMPORTED_MODULE_3__","successStyle","css","Colors","green","Spacing","InfoMessageFontSize","variantSuccess","variantInfo","variantError","red","variantWarning","orange","_ref","children","a","createElement","maxSnack","classes","anchorOrigin","horizontal","vertical","MenuStockItemFragment","gql","_templateObject","WareUnitFragment","AllergenFragment","MenuStockCreateMutation","_templateObject2","MenuStockUpdateMutation","_templateObject3","MenuStockDeleteMutation","_templateObject4","fullDateFormat","formatDateISO","formatTime","formatDateTime","priceFormat","formatPrice","formatTimeWithoutTodayDate","formatAddress","date_fns__WEBPACK_IMPORTED_MODULE_0__","date_fns_fp__WEBPACK_IMPORTED_MODULE_1__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2___default","numeral__WEBPACK_IMPORTED_MODULE_3__","numeral__WEBPACK_IMPORTED_MODULE_3___default","currentLocale","csLocale","formatLocale","formatWithOptions","locale","format","price","numeral","time","isSameDay","Date","address","street","houseNumber","concat","city","state","OrderStateCategoryFragment","UpdateOrderStateMutation","SendOrderNotificationMutation","SelectOrderDriverMutation","OrderDriverFragment","RemoveOrderDriverMutation","_templateObject5","ChangeOrderToPickupMutation","_templateObject6","TitleStyled","styled","h1","withConfig","displayName","componentId","greyLight","observableTitles","observable","array","autorun","lastTitle","Array","from","pop","document","title","appConfig","pageTitleSuffix","PageTitle","_React$Component","Object","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","apply","arguments","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","key","value","push","props","prevProps","idx","findIndex","RM","equals","splice","remove","React","Component","Route","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_8___default","react_router_dom__WEBPACK_IMPORTED_MODULE_9__","assign","render","Display","mobx_react_lite__WEBPACK_IMPORTED_MODULE_7__","join","MenuCategoryListFragment","CategoryListQuery","ZoneFragment","FPriceFragmentDoc","FGeoPointFragmentDoc","ZoneLocationQuery","ZoneColorsQuery","applyAlphaToColor","Radiuses","FontSizes","color__WEBPACK_IMPORTED_MODULE_0__","color__WEBPACK_IMPORTED_MODULE_0___default","_helpers_ramda__WEBPACK_IMPORTED_MODULE_1__","curry","color","alphaValue","Color","alpha","string","MarginAroundFormComponents","Small","Middle","LayoutGridCellMargin","ButtonHeight","DefaultInputWidth","DefaultSizeUnit","ButtonColumnWidthPx","CompactCard","CompactCardBig","NotFoundPage","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","_atoms_PageTitle__WEBPACK_IMPORTED_MODULE_1__","_i18n__WEBPACK_IMPORTED_MODULE_2__","Fragment","_","logMain","logDebug","logError","logAuth","logRouting","logPersistence","logBootstrap","logGraph","logForm","logSentry","logLang","logUpdate","debug__WEBPACK_IMPORTED_MODULE_0__","debug__WEBPACK_IMPORTED_MODULE_0___default","debug","useColors","console","log","mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__","verror__WEBPACK_IMPORTED_MODULE_2__","types","model","getPath","client","getEnv","apolloClient","VError","root","getRoot","RedirectToLogin","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","_ref$useOrigin","useOrigin","path","_ref2","match","location","to","pathname","origin","DriverFragment","OrderDriverSelection","QueryDriverSelection","buildQuery","ramda__WEBPACK_IMPORTED_MODULE_0__","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","WeekDayEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","MobilePlatformEnum","WareUnitEnum","AvailabilityTypeEnum","AllergenEnum","WarePriceTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","OrderBillingTypeEnum","DeliveryTypeEnum","OrderRecipeStateEnum","LanguageEnum","OrderOnlineStateEnum","OrderOriginEnum","PaymentGateEnum","PaymentTypeEnum","OrderStateEnum","ZoneTypeEnum","ShiftUserStateEnum","WareCategoryTypeEnum","WareRequirementEnum","SettingTypeEnum","SubscriptionActionType","GSpecificBusinessHourFragmentDoc","GAllergenFragmentDoc","GWareUnitFragmentDoc","GMenuStockItemFragmentDoc","GMenuRecipeFragmentDoc","GMenuCategoryFormFragmentDoc","_templateObject7","GMenuCategoryListItemFragmentDoc","_templateObject8","GMenuRecipePriceFragmentDoc","_templateObject9","GMenuAssocRecipeFragmentDoc","_templateObject10","GOrderStateCategoryFragmentDoc","_templateObject11","GDriverFragmentDoc","_templateObject12","GOrderDriverFragmentDoc","_templateObject13","FAddressFragmentDoc","_templateObject14","FEmailFragmentDoc","_templateObject15","FPhoneFragmentDoc","_templateObject16","FCustomerFragmentDoc","_templateObject17","GOrderListTickerFragmentDoc","_templateObject18","GOrderDetailWareFragmentDoc","_templateObject19","_templateObject20","GOrderMarkerFragmentDoc","_templateObject21","GStatsPriceFragmentDoc","_templateObject22","GZonePriceRangeFragmentDoc","_templateObject23","GZoneFragmentDoc","_templateObject24","FCompanyBranchFragmentDoc","_templateObject25","FCreateOrderItemFragmentDoc","_templateObject26","FCreateOrderFragmentDoc","_templateObject27","FCreateOrderRecipeSidedishesFragmentDoc","_templateObject28","FOrderMenuRecipeFragmentDoc","_templateObject29","FOrderMenuCategoryFragmentDoc","_templateObject30","FKitchenOrderRecipeFragmentDoc","_templateObject31","FKitchenOrderFragmentDoc","_templateObject32","FOrderMapDriverFragmentDoc","_templateObject33","FOrderMapDeviceFragmentDoc","_templateObject34","FOrderMapDeliveryFragmentDoc","_templateObject35","_templateObject36","_templateObject37","_templateObject38","_templateObject39","_templateObject40","_templateObject41","_templateObject42","_templateObject43","_templateObject44","_templateObject45","_templateObject46","_templateObject47","_templateObject48","_templateObject49","_templateObject50","_templateObject51","_templateObject52","_templateObject53","_templateObject54","_templateObject55","_templateObject56","_templateObject57","_templateObject58","_templateObject59","_templateObject60","_templateObject61","_templateObject62","_templateObject63","_templateObject64","_templateObject65","_templateObject66","_templateObject67","_templateObject68","_templateObject69","_templateObject70","_templateObject71","_templateObject72","_templateObject73","_templateObject74","_templateObject75","_templateObject76","_templateObject77","_templateObject78","_templateObject79","_templateObject80","_templateObject81","_templateObject82","_templateObject83","_templateObject84","_templateObject85","_templateObject86","_templateObject87","_templateObject88","_templateObject89","_templateObject90","_templateObject91","_templateObject92","_templateObject93","_templateObject94","_templateObject95","_templateObject96","QLogoutWidgetDocument","_templateObject97","useQLogoutWidget","variables","baseOptions","Hooks","MAddOrderPromoDocument","_templateObject98","useMAddOrderPromo","MCancelOrderDocument","_templateObject99","useMCancelOrder","MCreateOrderAcceptDocument","_templateObject100","useMCreateOrderAccept","MCreateOrderAddRecipeDocument","_templateObject101","useMCreateOrderAddRecipe","MCreateOrderNewDocument","_templateObject102","useMCreateOrderNew","MCreateOrderRemoveItemDocument","_templateObject103","useMCreateOrderRemoveItem","MCreateOrderUpdateDocument","_templateObject104","useMCreateOrderUpdate","MCreateOrderUpdateItemDocument","_templateObject105","useMCreateOrderUpdateItem","MRemoveOrderPromoDocument","_templateObject106","useMRemoveOrderPromo","QCreateOrderItemDocument","_templateObject107","QCreateOrderRecipeDocument","_templateObject108","QOrderCartDocument","_templateObject109","useQOrderCart","QOrderMenuDocument","_templateObject110","useQOrderMenu","QValidateLocationDocument","_templateObject111","MKitchenRecipeStateDocument","_templateObject112","useMKitchenRecipeState","QKitchenOrderListDocument","_templateObject113","useQKitchenOrderList","SKitchenOrderListDocument","_templateObject114","useSKitchenOrderList","_templateObject115","_templateObject116","MMenuCategoryVisibilityDocument","_templateObject117","useMMenuCategoryVisibility","MMenuStockQuantityDocument","_templateObject118","useMMenuStockQuantity","QMenuCategoryFilterDocument","_templateObject119","useQMenuCategoryFilter","QMenuStockDepositDocument","_templateObject120","useQMenuStockDeposit","QStockRecipesDocument","_templateObject121","useQStockRecipes","MBranchDefaultTimeDocument","_templateObject122","useMBranchDefaultTime","QBranchDefeaultTimesDocument","_templateObject123","useQBranchDefeaultTimes","QOrderMapDeliveriesDocument","_templateObject124","useQOrderMapDeliveries","SOrderMapDeliveriesDocument","_templateObject125","useSOrderMapDeliveries","MUserMenuLanguageDocument","_templateObject126","useMUserMenuLanguage","QUserMenuLanguagesDocument","_templateObject127","useQUserMenuLanguages","MenuStockListQuery","QueryMenuStockList","applyAlpha","TouchButtonStyled","button","_ref$width","width","_ref2$height","height","Button","ButtonLabelStyled","div","ButtonLabelNextToIconStyled","TouchButton","forwardRef","_ref3","forwardedRef","iconName","_ref3$iconColor","iconColor","white","_ref3$iconSize","iconSize","_ref3$color","greyMiddle","_ref3$textNextToIcon","textNextToIcon","badge","text","ref","_atoms_Icon__WEBPACK_IMPORTED_MODULE_3__","fontSize","Card","styled_components__WEBPACK_IMPORTED_MODULE_1__","_styling__WEBPACK_IMPORTED_MODULE_2__","lighten","textColor","black","_ref$padding","padding","_ref3$stretchToParent","stretchToParent","getLayout","i","x","y","w","h","FullPageLayout","_molecules_PageLayout__WEBPACK_IMPORTED_MODULE_2__","layouts","useSnackBar","EVariant","notistack_build_SnackbarContext__WEBPACK_IMPORTED_MODULE_0__","successVariant","variant","success","errorVariant","error","warningVariant","warning","infoVariant","info","enqueueSnackbar","useContext","SnackbarContextNext","enqueueSuccess","useCallback","errorMessage","enqueueError","enqueueWarning","enqueueInfo","SoundControlContainerStyled","SoundButtonStyled","SoundControl","_getPrototypeOf2","_this","classCallCheck","_len","length","args","_key","possibleConstructorReturn","getPrototypeOf","call","playPreview","inherits","createClass","react_default","WithRoot","observe","user","soundEnabled","onClick","controlSound","LogoutWidgetStyled","LoggedUserNameStyled","span","IconStyled","LogoutWidget","observer","auth","useRoot","_useQLogoutWidget","id","userId","data","loading","i18n","firstName","lastName","data-testid","react_router_dom","Icon","HomeButtonStyled","HomeButton","_ref$color","_ref$iconColor","_ref$goBack","goBack","backRoute","objectWithoutProperties","react_router","history","TopLeftButtonContainer","getPosition","scrollPageTitle","TopRightContainer","PageTitleContainer","SoundControlContainer","PageLayout","_ref$pageTitle","pageTitle","_ref$layouts","_ref$hideLogoutWidget","hideLogoutWidget","_ref$showSoundControl","showSoundControl","_ref$useBackButton","useBackButton","_ref$scrollPageTitle","SoundControl_SoundControl","SecureRoute","component","redirect","GridLayout","toConsumableArray","HomeButton_HomeButton","Loading","_ref$text","react_grid_layout__WEBPACK_IMPORTED_MODULE_1__","react_grid_layout__WEBPACK_IMPORTED_MODULE_1___default","ReactGridLayout","WidthProvider","RGL","className","layout","cols","rowHeight","margin","autoSize","isDraggable","isResizable","compactType","measureBeforeMount","MenuRecipeModel","categoryFilterId","changeVisibility","recipeId","visible","mutate","mutation","MenuRecipeVisibilityMutation","optimisticResponse","updateRecipe","__typename","setCategoryFilter","categoryId","createRecipe","formValues","recipeType","recipe","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","companyBranch","wareCategoryType","getRecipeVariables","getQueryErrors","MenuRecipeCreateMutation","MenuRecipeUpdateMutation","deleteRecipe","_deleteRecipe","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","wrap","_context","prev","next","MenuRecipeDeleteMutation","stop","_x","queryDefaults","_queryDefaults","_callee2","_data$companyBranch","vats","code","_context2","query","MenuRecipeDefaults","sent","currency","abrupt","reduce","result","vatId","priceType","enum","currencyCode","nameLabel","internalNote","descriptionLabel","enabled","prices","keys","map","warePriceType","vat","sideDishCategories","sideDishes","prop","wareCategories","categories","associatedRecipes","pick","ingredients","stockItem","quantity","Number","parseFloat","replace","getRecipeRoute","MenuRecipePriceFragment","MenuAssocRecipeFragment","MenuRecipeFormQuery","MenuRecipeFormAssocQuery","QueryMenuRecipeFormAssoc","ESpecificHourMode","CreateSpecificBusinessHour","SpecificBusinessHourFragment","DeleteSpecificBusinessHour","BusinessHoursModel","byIdPredicate","complement","propEq","specificMode","optional","enumeration","TIMESPAN","changeSpecificMode","mode","submitSpecificHour","values","specificDate","isoDate","date","closed","FULLDAY","openAt","closeAt","closedNote","note","updateQueries","GSpecificBusinessHours","mutationResult","businessHours","deleteSpecificHour","businessHourId","filter","SortMenuCategoryMutation","MenuCategoryCreateMutation","MenuCategoryUpdateMutation","MenuCategoryFormFragment","MenuCategoryDeleteMutation","MenuCategoryModel","sortCategory","_sortCategory","asyncToGenerator","regenerator_default","offset","Boolean","_x2","createCategory","categoryType","objectSpread","getFormVariables","refetchQueries","updateCategory","_updateCategory","_x3","_x4","deleteCategory","_deleteCategory","_callee3","_context3","_x5","_x6","internalNoteLabel","pictogram","recipes","getCategoryRoute","changeNumeralLocale","_changeNumeralLocale","lang","numberRx","validateNumber","test","CreateFinancialReport","changeMomentLocale","_changeMomentLocale","moment","updateLocale","setupI18n","I18nManager","useObserver","language","node_modules_react_default","react","Children","only","Pacman","detectLanguage","languages","detector","getLocales","find","loc","supportedLanguages","includes","fallbackLanguage","changeLanguage","_changeLanguage","Promise","all","loadCatalog","activate","catalog","load","defineProperty","endpoint","persistenceKey","sentryDSN","QuerySpecificBusinessHours","MenuRecipeFragment","MenuCategoryFormQuery","IntervalRender","_Component","isActive","nextTime","getNextTime","timer","executeTimer","clearTimeout","timeMs","differenceInMilliseconds","setTimeout","setState","deactivate","addSeconds","intervalSec","nextLoop","SoundPlayInterval_SoundPlayInterval","SoundPlayInterval","soundUrl","_ref$shouldPlay","shouldPlay","_ref$skipEnableChecks","skipEnableChecks","config","IntervalRender_IntervalRender","lib_default","url","playStatus","onFinishedPlaying","loop","autoLoad","volume","soundVolume","module","exports","p","setImmediate","OrderListModel","mobx__WEBPACK_IMPORTED_MODULE_0__","react_scroll__WEBPACK_IMPORTED_MODULE_2__","_graph_generated__WEBPACK_IMPORTED_MODULE_3__","branches","collapsedCategories","Finished","branchesFilter","hasBranchFilter","isSingleBranchSelected","firstBranchId","orderMap","clearBranchFilter","clear","setBranchFilter","panMapToOrder","order","panToOrder","extend","detailOpen","set","isOrderDetailOpen","orderId","has","isCategoryCollapsed","categoryCode","toggleOrderDetail","delete","add","toggleCategoryCollapse","category","index","indexOf","focusOrderDetail","scroller","scrollTo","smooth","containerId","absolute","observerOrderDetail","bind","RootContext","createContext","undefined","getChannelId","Math","round","now","random","toString","isSubscriptionOperation","getOperationDefinitionOrDie","operation","createApolloClient","cache","InMemoryCache","dataIdFromObject","o","authLink","headers","computed","Authorization","communicationToken","ApolloLink","forward","canCommunicate","operationName","context","getContext","setContext","get","Observable","sub","subscribe","networkError","invalidate","complete","unsubscribe","createAuthLink","retryLink","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","offlineLink","QueueLink","isNetworkOnline","open","close","createOfflineLink","errorLink","createErrorLink","httpLink","BatchHttpLink","uri","credentials","subscriptionLink","cable","cableUrl","token","connectionParams","isAuthenticated","ActionCable","createConsumer","channelId","subscriptions","create","channel","connected","perform","print","operationId","received","payload","more","createSubscriptionLink","ApolloClient","link","split","persistModel","_persistModel","modelName","stateKey","writeState","getType","name","snapshot","localforage","setItem","getItem","applySnapshot","getSnapshot","t0","removeItem","onSnapshot","getLoginUrl","username","password","PasswordLoginModel","errorCode","hasFailed","setFailure","message","setSuccess","authenticate","requestToken","_requestToken","fetch","response","window","Accept","json","status","String","LoginProviderModel","passwordLogin","PasswordChangeMutation","AuthModel","provider","isAuthenticatedUser","tokenForPasswordChange","identifyUser","reset","setForPasswordChange","temporaryB64EncodedToken","Base64","decode","changePassword","_changePassword","_ref$updateUserPasswo","fetchPolicy","updateUserPassword","preProcessSnapshot","ConfigModel","orderListPollIntervalSec","orderListSoundIntervalSec","UserModelBootstrapQuery","UserModel_graphql_templateObject","UserModel","maybe","number","soundIgnore","isLoaded","brands","access","permissions","canCancelOrders","canCreateOrder","branchesId","R","defaultBranch","Error","filterBranches","predicate","canQuery","queryName","queries","toLowerCase","canMutate","mutationName","mutations","isReady","applyUserData","uniqBy","applyUserPermissions","applyUserAccess","mapValues","fields","Set","compose","toLower","setLanguage","flow","finishBootstrap","ignore","setSoundVolume","queryUser","rawCode","omit","userAccess","userPermissions","initUser","reaction","fireImmediately","resolve","when","faker","CreateOrderModel","getDefaultProps","currentBranch","deliveryType","isDelivery","Messenger","deliverAt","hasAddress","deliveryAddress","fakeAddress","gps","clearGps","phone","phonePrefix","prefix","country","vamCustomer","isFound","_self$vamCustomer","email","lastOrder","defaults","fakeValues","hasOrder","cartRefreshKey","longitude","latitude","acceptOrderVariables","customer","emails","phones","orderCreateVariables","callEventId","eventId","resetOrder","resetModel","setOrder","useLocation","clearLocation","setMinimalPrice","minimalPrice","selectBranch","userIsCalling","setDeliveryMinutes","minutes","deliveryMinutes","updateFormValues","touched","updateFromVam","updateFormWithFakeValues","internet","phoneNumberFormat","lorem","sentence","slice","resolver","makeResolver","selectSidedishesForRecipe","sidedishMode","sidedishRootId","selectSidedishesForItem","itemId","sidedishSelectionConfirmed","sidedishes","isConfirmed","sidedishSelectionCancel","notDeliveryLocation","sidedishSelection","GPSCzechia","MapModel","zoom","mapRef","center","gpsToLatLng","setMapRef","updateZoom","getZoom","updatePosition","getCenter","lat","lng","OrderBranchLocationQuery","OrderMapModel_graphql_templateObject","OrderLocationQuery","OrderMapModel","activeDriverId","_panToOrder","panTo","panToBranch","_panToBranch","activateDriver","driverId","position","OrderStateModel","updateOrderState","_updateOrderState","cancelOrder","_cancelOrder","alert","deliverOrder","OnWay","sendTimeNotification","_sendTimeNotification","selectDriver","_selectDriver","_callee4","_context4","_x7","removeDriver","_removeDriver","_callee5","orderDriverId","_context5","_x8","OrderModel","list","StatisticsModel","closureBranch","maybeNull","dateTimeFrom","startOfDay","dateTimeTo","endOfDay","updateFilter","setClosureBranch","branch","createClosure","_createClosure","companyBranchId","SettingsBaseModel","MenuStockModel","createItem","updateItem","stockId","deleteItem","_deleteItem","label","plu","allergens","wareUnit","allowNegative","MenuModel","stock","SettingsModel","selectedBranchId","menu","head","queryProps","skip","getQueryProps","otherVariables","ZoneMapModel","currentZonePoints","updateZonePoints","points","clearZonePoints","panToZone","_panToZone","zoneId","zone","CreateZoneMutation","ZoneModel_graphql_templateObject","UpdateZoneMutation","ZoneModel_graphql_templateObject2","UpdateZonePriorityMutation","DestroyZoneMutation","ZoneModel","brandId","brand","branchFilterId","branchFilterPredicate","zoneFilterPredicate","setBrandFilter","brandBranches","clearBrandFilter","createZone","onZoneCreate","generatePolygon","metersRadius","pointsCount","GZones","zones","saveZone","_saveZone","update","zoneColor","minimalOrderPrice","priceRangeRules","normalizePriceRangeRule","geoPolygon","zoneIdx","updateZone","destroyZone","changeZonePriority","oldIndex","newIndex","updateZonePriority","priority","numberOrNull","num","isNaN","range","toPrice","RootModel","createOrder","statistics","persistedModels","RootProvider","_useState","useState","_useState2","slicedToArray","setRoot","_useState3","_useState4","hasNetworkError","setNetworkError","useAsyncEffect","rootModel","index_es","autoHideDuration","action","reload","size","role","react_apollo_esm","ApolloContext","Provider","_ref3$observe","index_module","installSentry","cb","Raven","environment","process","install","setUserContext","reportRenderingError","isSetup","captureException","extra","reportFailingQuery","errors","forEach","err","captureMessage","reportError","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","cause","localStorage","latLngToGps","geolib__WEBPACK_IMPORTED_MODULE_0__","latLng","_ref$metersRadius","_ref$pointsCount","fill","degree","computeDestinationPoint","./af","./af.js","./ar","./ar-dz","./ar-dz.js","./ar-kw","./ar-kw.js","./ar-ly","./ar-ly.js","./ar-ma","./ar-ma.js","./ar-sa","./ar-sa.js","./ar-tn","./ar-tn.js","./ar.js","./az","./az.js","./be","./be.js","./bg","./bg.js","./bm","./bm.js","./bn","./bn.js","./bo","./bo.js","./br","./br.js","./bs","./bs.js","./ca","./ca.js","./cs","./cs.js","./cv","./cv.js","./cy","./cy.js","./da","./da.js","./de","./de-at","./de-at.js","./de-ch","./de-ch.js","./de.js","./dv","./dv.js","./el","./el.js","./en-au","./en-au.js","./en-ca","./en-ca.js","./en-gb","./en-gb.js","./en-ie","./en-ie.js","./en-il","./en-il.js","./en-nz","./en-nz.js","./eo","./eo.js","./es","./es-do","./es-do.js","./es-us","./es-us.js","./es.js","./et","./et.js","./eu","./eu.js","./fa","./fa.js","./fi","./fi.js","./fo","./fo.js","./fr","./fr-ca","./fr-ca.js","./fr-ch","./fr-ch.js","./fr.js","./fy","./fy.js","./gd","./gd.js","./gl","./gl.js","./gom-latn","./gom-latn.js","./gu","./gu.js","./he","./he.js","./hi","./hi.js","./hr","./hr.js","./hu","./hu.js","./hy-am","./hy-am.js","./id","./id.js","./is","./is.js","./it","./it.js","./ja","./ja.js","./jv","./jv.js","./ka","./ka.js","./kk","./kk.js","./km","./km.js","./kn","./kn.js","./ko","./ko.js","./ky","./ky.js","./lb","./lb.js","./lo","./lo.js","./lt","./lt.js","./lv","./lv.js","./me","./me.js","./mi","./mi.js","./mk","./mk.js","./ml","./ml.js","./mn","./mn.js","./mr","./mr.js","./ms","./ms-my","./ms-my.js","./ms.js","./mt","./mt.js","./my","./my.js","./nb","./nb.js","./ne","./ne.js","./nl","./nl-be","./nl-be.js","./nl.js","./nn","./nn.js","./pa-in","./pa-in.js","./pl","./pl.js","./pt","./pt-br","./pt-br.js","./pt.js","./ro","./ro.js","./ru","./ru.js","./sd","./sd.js","./se","./se.js","./si","./si.js","./sk","./sk.js","./sl","./sl.js","./sq","./sq.js","./sr","./sr-cyrl","./sr-cyrl.js","./sr.js","./ss","./ss.js","./sv","./sv.js","./sw","./sw.js","./ta","./ta.js","./te","./te.js","./tet","./tet.js","./tg","./tg.js","./th","./th.js","./tl-ph","./tl-ph.js","./tlh","./tlh.js","./tr","./tr.js","./tzl","./tzl.js","./tzm","./tzm-latn","./tzm-latn.js","./tzm.js","./ug-cn","./ug-cn.js","./uk","./uk.js","./ur","./ur.js","./uz","./uz-latn","./uz-latn.js","./uz.js","./vi","./vi.js","./x-pseudo","./x-pseudo.js","./yo","./yo.js","./zh-cn","./zh-cn.js","./zh-hk","./zh-hk.js","./zh-tw","./zh-tw.js","webpackAsyncContext","req","ids","e","then","t","./chs","./chs.js","./da-dk","./da-dk.js","./en-za","./en-za.js","./es-es","./es-es.js","./nl-nl","./nl-nl.js","./no","./no.js","./pt-pt","./pt-pt.js","./ru-ua","./ru-ua.js","./uk-ua","./uk-ua.js","./cs/messages.po","./de/messages.po","./en-dev/messages.po","./en/messages.po","./pl/messages.po","./sk/messages.po","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","errorHandler","graphQLErrors","onError","react_spinkit__WEBPACK_IMPORTED_MODULE_1__","react_spinkit__WEBPACK_IMPORTED_MODULE_1___default","_ref$noMargin","noMargin","style","display","alignSelf","justifyContent","marginTop","cleanup","useRef","executeCleanup","current","fn","useEffect","renderFragment","_props$renderLoading","renderLoading","_props$renderError","renderError","_props$refetchOnConne","refetchOnConnectionLost","rest","react_apollo__WEBPACK_IMPORTED_MODULE_2__","_atoms_Loading__WEBPACK_IMPORTED_MODULE_6__","react_router_dom__WEBPACK_IMPORTED_MODULE_4__","whenGoingOnline","refetch","_ref$redirect","lazy","_RedirectToLogin__WEBPACK_IMPORTED_MODULE_6__","_pages_NotFoundPage__WEBPACK_IMPORTED_MODULE_4__","exact","_LazyRoute__WEBPACK_IMPORTED_MODULE_5__","_RootProvider__WEBPACK_IMPORTED_MODULE_1__","MessageStyled","ConnectionWarning","isNetworkOffline","connectionWarningSound","disableBackdropClick","disableEscapeKeyDown","icons_index_es","_lingui_react","ErrorContainer","_ref$prod","prod","lib","dispatchErrorReporting","UpdateHandler","_ref$onRestart","onRestart","_ref$autoUpdateDelay","autoUpdateDelay","SECOND","_ref$postponeTimeout","postponeTimeout","MINUTE","_ref$updateCheckInter","updateCheckInterval","HOUR","_ref$serviceWorker","serviceWorker","navigator","registrationWorkerRef","updateWorkerRef","useObservable","updatePending","useReleaseCabinet","version","useInterval","onMessage","event","addEventListener","removeEventListener","updateWorker","register","onInit","reg","onUpdate","sw","init","onCancel","onConfirm","postMessage","UpdateSnack","useTimer","interval","_React$useState","addMilliseconds","endTime","remainingSeconds","formatDistanceStrict","disableWindowBlurListener","ErrorPage","LogRoute","RedirectAfterLogin","route","RedirectAfterLogout","PasswordLoginRoute","PasswordChangeRoute","PasswordResetRoute","MainDashboardPage","OrderRoutes","KitchenRoutes","SettingsRoutes","OverviewRoutes","SupportPage","Routing","Suspense","fallback","LogRoute_LogRoute","RedirectAfterLogin_RedirectAfterLogin","LazyRoute","App","ErrorContainer_ErrorContainer","UpdateHandler_UpdateHandler","Routing_Routing","Router","dist_index_es","handleGetUserConfirm","getUserConfirmation","ThemeProvider","theme","createMuiTheme","typography","useNextVariants","styles","Main","ThemeProvider_ThemeProvider","Router_Router","App_App","rootElement","getElementById","src_Main","routeProps","_atoms_Pacman__WEBPACK_IMPORTED_MODULE_3__","IconSpanStyled","_ref$fontSize","_ref$fontSizeUnit","fontSizeUnit","_ref2$color","isOnline","box","onLine","change","oldValue","newValue"],"mappings":"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EAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,gBAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,aAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,YAAA,CACA,IACA,IAEAC,eAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,gBAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAA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","file":"static/js/main.9a2d2bb0.chunk.js","sourcesContent":["import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TMenuModel } from './MenuModel'\n\nexport const MenuBaseModel = BaseModel.named('MenuBase')\n  .volatile(() => ({\n    filterInput: '',\n  }))\n  .actions(self => ({\n    setFilterInput(input: string) {\n      self.filterInput = input\n    },\n  }))\n  .views(self => ({\n    get branchId() {\n      return getParent<TMenuModel>(self).settings.branchId\n    },\n  }))\n","import { css } from 'emotion'\nimport { SnackbarProvider } from 'notistack'\nimport React from 'react'\n\nimport { Colors, Spacing } from '../styling'\n\ninterface IProps {}\n\nconst successStyle = css`\n  background: ${Colors.green} !important;\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nconst errorStyle = css`\n  background: ${Colors.red};\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nconst warningStyle = css`\n  background: ${Colors.orange};\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nexport const snackStyles = {\n  variantSuccess: successStyle,\n  variantInfo: successStyle,\n  variantError: errorStyle,\n  variantWarning: warningStyle,\n}\n\nexport const SnackProvider: React.FC<IProps> = ({ children }) => (\n  <SnackbarProvider\n    maxSnack={3}\n    classes={snackStyles}\n    anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\n  >\n    {children}\n  </SnackbarProvider>\n)\n","import gql from 'graphql-tag'\n\nimport { AllergenFragment } from '../graph/AllergenFragment.graphql'\nimport { WareUnitFragment } from '../graph/WareUnitFragment.graphql'\n\nexport const MenuStockItemFragment = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...GAllergen\n    }\n    wareUnit {\n      ...GWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n  ${WareUnitFragment}\n  ${AllergenFragment}\n`\n\nexport const MenuStockCreateMutation = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockUpdateMutation = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockDeleteMutation = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n","import { isSameDay } from 'date-fns'\nimport { format, formatWithOptions } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\nimport numeral from 'numeral'\n\nimport { FAddressFragment } from '../graph/generated'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const fullDateFormat = 'dddd LL'\nexport const formatFullDate = formatLocale(fullDateFormat)\n\nexport const dateFormat = 'D.M.YYYY'\nexport const formatDate = formatLocale(dateFormat)\n\nexport const dateFormatISO = 'YYYY-MM-DD'\nexport const formatDateISO = format(dateFormatISO)\n\nexport const timeFormat = 'H:mm'\nexport const formatTime = formatLocale(timeFormat)\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const priceFormat = '0,0.[00]'\nexport const formatPrice = price => numeral(price).format(priceFormat)\n\nexport const formatTimeWithoutTodayDate = (time: string) =>\n  isSameDay(time, new Date()) ? formatTime(time) : formatDateTime(time)\n\nexport const formatAddress = (address: FAddressFragment) => {\n  if (!address.street) {\n    if (address.city) {\n      return `${address.city} ${address.houseNumber}, ${address.state}`\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n","import gql from 'graphql-tag'\n\nimport { OrderDriverFragment } from '../molecules/OrderStateDeliver.graphql'\n\nexport const OrderStateCategoryFragment = gql`\n  fragment GOrderStateCategory on Order {\n    id\n    orderStateCategory\n  }\n`\n\nexport const UpdateOrderStateMutation = gql`\n  mutation GUpdateOrderState($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...GOrderStateCategory\n      orderTiming: orderStateCategoryRelations {\n        createdAt\n        orderStateCategory\n      }\n    }\n  }\n  ${OrderStateCategoryFragment}\n`\n\nexport const SendOrderNotificationMutation = gql`\n  mutation GSendOrderNotification($orderId: ID!, $minutes: Int!) {\n    orderNotifyCustomer(id: $orderId, minutes: $minutes) {\n      id\n      deliverAt\n    }\n  }\n`\n\nexport const SelectOrderDriverMutation = gql`\n  mutation GSelectOrderDriver($driverId: ID!, $orderId: ID!) {\n    createUserDeliveringOrder(user: $driverId, order: $orderId) {\n      order {\n        ...GOrderDriver\n      }\n    }\n  }\n  ${OrderDriverFragment}\n`\n\nexport const RemoveOrderDriverMutation = gql`\n  mutation GRemoveOrderDriver($orderDriverId: ID!) {\n    destroyUserDeliveringOrder(id: $orderDriverId) {\n      order {\n        ...GOrderDriver\n      }\n    }\n  }\n  ${OrderDriverFragment}\n`\n\nexport const ChangeOrderToPickupMutation = gql`\n  mutation MChangeOrderToPickup($orderId: ID!) {\n    updateOrderDeliveryToPickup(id: $orderId) {\n      id\n      deliveryType {\n        enum\n      }\n    }\n  }\n`\n","import { autorun, observable } from 'mobx'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { appConfig } from '../config'\nimport { RM } from '../helpers/ramda'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  title: string\n}\n\nconst TitleStyled = styled.h1`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  margin: 0.5rem 0.5rem 0 0.5rem;\n  white-space: nowrap;\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.9);\n`\n\nconst observableTitles = observable.array<string>([])\n\nautorun(() => {\n  const lastTitle = Array.from(observableTitles).pop()\n  if (lastTitle) {\n    document.title = `${lastTitle} :: ${appConfig.pageTitleSuffix}`\n  } else {\n    document.title = appConfig.pageTitleSuffix\n  }\n})\n\nconst PageTitleDisplay: React.FC = () => (\n  <Observer>\n    {() => <TitleStyled>{observableTitles.join(' - ')}</TitleStyled>}\n  </Observer>\n)\n\nexport class PageTitle extends React.Component<IProps> {\n  static Route = PageTitleRoute\n  static Display = PageTitleDisplay\n  componentDidMount() {\n    observableTitles.push(this.props.title)\n  }\n  componentDidUpdate(prevProps: IProps) {\n    const idx = observableTitles.findIndex(RM.equals(prevProps.title))\n    if (idx >= 0) {\n      observableTitles.splice(idx, 1, this.props.title)\n    }\n  }\n  componentWillUnmount() {\n    observableTitles.remove(this.props.title)\n  }\n  render() {\n    return null\n  }\n}\n\nfunction PageTitleRoute({ title, ...props }: IProps & RouteProps) {\n  return <Route {...props} render={() => <PageTitle title={title} />} />\n}\n","import gql from 'graphql-tag'\n\nexport const MenuCategoryListFragment = gql`\n  fragment GMenuCategoryListItem on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    countRecipes\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n  }\n`\n\nexport const CategoryListQuery = gql`\n  query GCategoryList($branchId: ID!, $categoryType: WareCategoryTypeEnum!) {\n    categories: wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: $categoryType\n    ) {\n      ...GMenuCategoryListItem\n    }\n  }\n  ${MenuCategoryListFragment}\n`\n","import gql from 'graphql-tag'\n\nimport { FGeoPointFragmentDoc, FPriceFragmentDoc } from '../../graph/generated'\n\nexport const ZoneFragment = gql`\n  fragment GZone on Zone {\n    id\n    name\n    enabled\n    priority\n    companyBranch {\n      id\n      brand {\n        id\n      }\n    }\n    geoPolygon {\n      ...FGeoPoint\n    }\n    priceRangeRules {\n      ...GZonePriceRange\n    }\n    minimalOrderPrice {\n      ...FPrice\n    }\n    zoneColor {\n      id\n      code\n      color\n    }\n  }\n\n  fragment GZonePriceRange on ZonePriceRangeRule {\n    toPrice {\n      ...FPrice\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n  ${FGeoPointFragmentDoc}\n`\n\nexport const ZoneLocationQuery = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...FGeoPoint\n        }\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n\nexport const ZoneBranchLocationQuery = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n\nexport const ZoneColorsQuery = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n","import Color from 'color'\n\nimport { RM } from './helpers/ramda'\n\nexport enum Colors {\n  yellow = '#FFDB2B',\n  pink = '#FF2B95',\n  blue = '#2441FF',\n  red = '#FF1C1C',\n  green = '#179B12',\n  turquoise = '#2BFFFF',\n  orange = '#FF862B',\n  violet = '#6D4F8C',\n  black = '#000000',\n  greyDarkest = '#080808',\n  greyDark = '#2C2C2C',\n  greyMiddle = '#939393',\n  greyLight = '#EDEDED',\n  white = '#FFFFFF',\n}\n\nexport const applyAlphaToColor = RM.curry((color: Colors, alphaValue: number) =>\n  Color(color)\n    .alpha(alphaValue)\n    .string(),\n)\n\nexport enum Radiuses {\n  Card = '0.5rem',\n  Button = '0.5rem',\n  TextComponent = '0.25rem',\n}\n\nexport const Spacing = {\n  MarginAroundFormComponents: '0.1rem',\n  Small: '0.25rem',\n  Middle: '0.5rem',\n  LayoutGridCellMargin: '0.5rem',\n  ButtonHeight: '3.4375rem',\n  DefaultInputWidth: 20,\n  DefaultSizeUnit: 'rem',\n  ButtonColumnWidthPx: 55,\n  InfoMessageFontSize: '1.375rem',\n}\n\nexport const FontSizes = {\n  CompactCard: '0.95rem',\n  CompactCardBig: '1rem',\n}\n","import React from 'react'\n\nimport { PageTitle } from '../atoms/PageTitle'\nimport { i18n } from '../i18n'\n\nexport const NotFoundPage: React.FC = () => (\n  <>\n    <PageTitle title={i18n.t`Not found`} />\n    <h1>{i18n.t`There is nothing here, sorry!`}</h1>\n  </>\n)\n","import debug from 'debug'\n\n// @ts-ignore\ndebug.useColors = () => !process.env.REACT_APP_STAGE\n\nexport const logMain = debug('main')\nexport const logDebug = debug('debug')\nexport const logError = debug('error')\nexport const logAuth = debug('auth')\nexport const logRouting = debug('routing')\nexport const logPersistence = debug('persistence')\nexport const logBootstrap = debug('bootstrap')\nexport const logAccess = debug('access')\nexport const logGraph = debug('graph')\nexport const logForm = debug('form')\nexport const logSentry = debug('sentry')\nexport const logLang = debug('lang')\nexport const logUpdate = debug('update')\n// tslint:disable-next-line:no-console\nexport const logTest = console.log\n","import debug from 'debug'\nimport { getEnv, getPath, getRoot, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { IRootEnvironment } from '../atoms/RootProvider'\nimport { TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    return debug(`model/${getPath(self)}`)\n  },\n  get client() {\n    const client = getEnv<IRootEnvironment>(self).apolloClient\n    if (!client) {\n      throw new VError('Apollo client is missing from environment setup')\n    }\n    return client\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n}))\n","import debug from 'debug'\nimport React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\n\ninterface IRedirectToLoginProps {\n  useOrigin?: boolean\n}\n\nconst log = debug('routing')\n\nexport const RedirectToLogin: React.FC<IRedirectToLoginProps> = ({\n  useOrigin = true,\n}) => (\n  <Route\n    path=\"/login\"\n    children={({ match, location }) => {\n      if (match) {\n        return null\n      }\n      log('redirecting to login...')\n      return (\n        <Redirect\n          to={{\n            pathname: '/login',\n            state: { origin: useOrigin ? location.pathname : '/' },\n          }}\n        />\n      )\n    }}\n  />\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GOrderDriverSelection } from '../../../graph/types'\n\nconst DriverFragment = gql`\n  fragment GDriver on User {\n    id\n    firstName\n    lastName\n  }\n`\n\nexport const OrderDriverFragment = gql`\n  fragment GOrderDriver on Order {\n    id\n    driver: userDeliveringOrder {\n      id\n      user {\n        ...GDriver\n      }\n    }\n  }\n  ${DriverFragment}\n`\n\nconst OrderDriverSelection = gql`\n  query GOrderDriverSelection($orderId: ID!, $branchId: [ID!]!) {\n    order(id: $orderId) {\n      ...GOrderDriver\n    }\n    drivers(companyBranches: $branchId, onlyAvailable: true) {\n      ...GDriver\n    }\n  }\n  ${OrderDriverFragment}\n`\n\nexport const QueryDriverSelection = buildQuery<\n  GOrderDriverSelection.Query,\n  GOrderDriverSelection.Variables\n>(OrderDriverSelection)\n","import * as RM from 'ramda'\n\nexport { RM }\n","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<string>\n\n  readonly includeOldFinished?: boolean\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: string\n\n  readonly closed?: Maybe<boolean>\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityCreate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityUpdate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment method used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<string>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: Maybe<number>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n  Pln = 'PLN',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  FeAdmin = 'FE_ADMIN',\n  FeKitchen = 'FE_KITCHEN',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n  Pl = 'PL',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n  Pwa = 'PWA',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type MPasswordChangeVariables = {\n  readonly password: string\n}\n\nexport type MPasswordChangeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateUserPassword: MPasswordChangeUpdateUserPassword\n}\n\nexport type MPasswordChangeUpdateUserPassword = {\n  readonly __typename?: 'UserUpdatedPassword'\n\n  readonly id: string\n\n  readonly token: string\n}\n\nexport type GUserModelBootstrapVariables = {\n  readonly userId: string\n}\n\nexport type GUserModelBootstrapQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: GUserModelBootstrapUser\n\n  readonly userPermissions: GUserModelBootstrapUserPermissions\n}\n\nexport type GUserModelBootstrapUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly language: GUserModelBootstrapLanguage\n\n  readonly branches: ReadonlyArray<GUserModelBootstrapBranches>\n}\n\nexport type GUserModelBootstrapLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly rawCode: string\n}\n\nexport type GUserModelBootstrapBranches = FCompanyBranchFragment\n\nexport type GUserModelBootstrapUserPermissions = {\n  readonly __typename?: 'UserPermission'\n\n  readonly canCancelOrders: boolean\n\n  readonly canCreateOrder: boolean\n}\n\nexport type GAddressSuggestVariables = {\n  readonly search: string\n}\n\nexport type GAddressSuggestQuery = {\n  readonly __typename?: 'Query'\n\n  readonly suggest: ReadonlyArray<GAddressSuggestSuggest>\n}\n\nexport type GAddressSuggestSuggest = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly state: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly gps: Maybe<GAddressSuggestGps>\n}\n\nexport type GAddressSuggestGps = FGeoPointFragment\n\nexport type GCreateSpecificBusinessHourVariables = {\n  readonly input: InputBusinessHourSpecificDateCreate\n}\n\nexport type GCreateSpecificBusinessHourMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GCreateSpecificBusinessHourResult\n}\n\nexport type GCreateSpecificBusinessHourResult = GSpecificBusinessHourFragment\n\nexport type GDeleteSpecificBusinessHourVariables = {\n  readonly id: string\n}\n\nexport type GDeleteSpecificBusinessHourMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GDeleteSpecificBusinessHourResult\n}\n\nexport type GDeleteSpecificBusinessHourResult = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n}\n\nexport type GSpecificBusinessHoursVariables = {\n  readonly branchId: string\n}\n\nexport type GSpecificBusinessHoursQuery = {\n  readonly __typename?: 'Query'\n\n  readonly businessHours: ReadonlyArray<GSpecificBusinessHoursBusinessHours>\n}\n\nexport type GSpecificBusinessHoursBusinessHours = GSpecificBusinessHourFragment\n\nexport type GOrderVamVariables = {\n  readonly branchId: string\n  readonly phone: string\n}\n\nexport type GOrderVamQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vamCustomer: GOrderVamVamCustomer\n}\n\nexport type GOrderVamVamCustomer = {\n  readonly __typename?: 'CustomerInformation'\n\n  readonly isFound: boolean\n\n  readonly email: string\n\n  readonly firstName: string\n\n  readonly lastName: string\n\n  readonly lastOrder: Maybe<GOrderVamLastOrder>\n\n  readonly locations: ReadonlyArray<GOrderVamLocations>\n}\n\nexport type GOrderVamLastOrder = {\n  readonly __typename?: 'Order'\n\n  readonly note: Maybe<string>\n}\n\nexport type GOrderVamLocations = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly state: Maybe<string>\n\n  readonly gps: Maybe<GOrderVamGps>\n}\n\nexport type GOrderVamGps = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type QOrderFormDeliverAtDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderFormDeliverAtDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly times: QOrderFormDeliverAtDefaultsTimes\n}\n\nexport type QOrderFormDeliverAtDefaultsTimes = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly deliveryTime: number\n\n  readonly pickupTime: number\n}\n\nexport type GOrderPromoVariables = {\n  readonly branchId: string\n}\n\nexport type GOrderPromoQuery = {\n  readonly __typename?: 'Query'\n\n  readonly promoCodes: ReadonlyArray<GOrderPromoPromoCodes>\n}\n\nexport type GOrderPromoPromoCodes = {\n  readonly __typename?: 'PromoCode'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type SOrderCallVariables = {}\n\nexport type SOrderCallSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly call: SOrderCallCall\n}\n\nexport type SOrderCallCall = {\n  readonly __typename?: 'UserCallingCustomerSubscription'\n\n  readonly eventId: string\n\n  readonly phone: string\n\n  readonly prefix: string\n\n  readonly isRinging: boolean\n}\n\nexport type GSortMenuCategoryVariables = {\n  readonly categoryId: string\n  readonly offset: number\n}\n\nexport type GSortMenuCategoryMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly success: boolean\n}\n\nexport type GMenuCategoryCreateVariables = {\n  readonly input: InputWareCategoryCreate\n}\n\nexport type GMenuCategoryCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createWareCategory: GMenuCategoryCreateCreateWareCategory\n}\n\nexport type GMenuCategoryCreateCreateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type GMenuCategoryUpdateVariables = {\n  readonly categoryId: string\n  readonly input: InputWareCategoryUpdate\n}\n\nexport type GMenuCategoryUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: GMenuCategoryUpdateUpdateWareCategory\n}\n\nexport type GMenuCategoryUpdateUpdateWareCategory = GMenuCategoryFormFragment\n\nexport type GMenuCategoryDeleteVariables = {\n  readonly categoryId: string\n}\n\nexport type GMenuCategoryDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyWareCategory: GMenuCategoryDeleteDestroyWareCategory\n}\n\nexport type GMenuCategoryDeleteDestroyWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type GMenuRecipeVisibilityVariables = {\n  readonly recipeId: string\n  readonly visible: boolean\n}\n\nexport type GMenuRecipeVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateRecipe: GMenuRecipeVisibilityUpdateRecipe\n}\n\nexport type GMenuRecipeVisibilityUpdateRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type GMenuRecipeCreateVariables = {\n  readonly recipe: InputRecipeCreate\n}\n\nexport type GMenuRecipeCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createRecipe: GMenuRecipeCreateCreateRecipe\n}\n\nexport type GMenuRecipeCreateCreateRecipe = GMenuRecipeFragment\n\nexport type GMenuRecipeUpdateVariables = {\n  readonly recipeId: string\n  readonly recipe: InputRecipeUpdate\n}\n\nexport type GMenuRecipeUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateRecipe: GMenuRecipeUpdateUpdateRecipe\n}\n\nexport type GMenuRecipeUpdateUpdateRecipe = GMenuRecipeFragment\n\nexport type GMenuRecipeDeleteVariables = {\n  readonly recipeId: string\n}\n\nexport type GMenuRecipeDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyRecipe: GMenuRecipeDeleteDestroyRecipe\n}\n\nexport type GMenuRecipeDeleteDestroyRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type GMenuStockCreateVariables = {\n  readonly stockItem: InputStockItemCreate\n}\n\nexport type GMenuStockCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createStockItem: GMenuStockCreateCreateStockItem\n}\n\nexport type GMenuStockCreateCreateStockItem = GMenuStockItemFragment\n\nexport type GMenuStockUpdateVariables = {\n  readonly stockId: string\n  readonly stockItem: InputStockItemUpdate\n}\n\nexport type GMenuStockUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateStockItem: GMenuStockUpdateUpdateStockItem\n}\n\nexport type GMenuStockUpdateUpdateStockItem = GMenuStockItemFragment\n\nexport type GMenuStockDeleteVariables = {\n  readonly stockId: string\n}\n\nexport type GMenuStockDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyStockItem: GMenuStockDeleteDestroyStockItem\n}\n\nexport type GMenuStockDeleteDestroyStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n}\n\nexport type GAllergensVariables = {}\n\nexport type GAllergensQuery = {\n  readonly __typename?: 'Query'\n\n  readonly allergens: ReadonlyArray<GAllergensAllergens>\n}\n\nexport type GAllergensAllergens = GAllergenFragment\n\nexport type GCurrenciesVariables = {\n  readonly branchId: string\n}\n\nexport type GCurrenciesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly currencies: ReadonlyArray<GCurrenciesCurrencies>\n\n  readonly companyBranch: GCurrenciesCompanyBranch\n}\n\nexport type GCurrenciesCurrencies = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n\n  readonly code: string\n}\n\nexport type GCurrenciesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly address: GCurrenciesAddress\n}\n\nexport type GCurrenciesAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<GCurrenciesCountry>\n}\n\nexport type GCurrenciesCountry = {\n  readonly __typename?: 'Country'\n\n  readonly currency: GCurrenciesCurrency\n}\n\nexport type GCurrenciesCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n}\n\nexport type GVatsVariables = {\n  readonly branchId: string\n}\n\nexport type GVatsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vats: ReadonlyArray<GVatsVats>\n}\n\nexport type GVatsVats = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n\n  readonly vat: number\n}\n\nexport type GWareUnitsVariables = {}\n\nexport type GWareUnitsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareUnits: ReadonlyArray<GWareUnitsWareUnits>\n}\n\nexport type GWareUnitsWareUnits = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: WareUnitEnum\n}\n\nexport type GMenuCategoryFormVariables = {\n  readonly categoryId: string\n}\n\nexport type GMenuCategoryFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareCategory: GMenuCategoryFormWareCategory\n}\n\nexport type GMenuCategoryFormWareCategory = GMenuCategoryFormFragment\n\nexport type GCategoryListVariables = {\n  readonly branchId: string\n  readonly categoryType: WareCategoryTypeEnum\n}\n\nexport type GCategoryListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<GCategoryListCategories>\n}\n\nexport type GCategoryListCategories = GMenuCategoryListItemFragment\n\nexport type QMenuGuideDownloadVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuGuideDownloadQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QMenuGuideDownloadCompanyBranch\n}\n\nexport type QMenuGuideDownloadCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly foodMenuUrl: Maybe<string>\n}\n\nexport type GMenuRecipeFormVariables = {\n  readonly recipeId: string\n}\n\nexport type GMenuRecipeFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: GMenuRecipeFormRecipe\n}\n\nexport type GMenuRecipeFormRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly image: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly visible: boolean\n\n  readonly recipeType: GMenuRecipeFormRecipeType\n\n  readonly sourcePrices: ReadonlyArray<GMenuRecipeFormSourcePrices>\n\n  readonly sideDishes: ReadonlyArray<GMenuRecipeFormSideDishes>\n\n  readonly categories: ReadonlyArray<GMenuRecipeFormCategories>\n\n  readonly sourceAssociatedRecipes: ReadonlyArray<\n    GMenuRecipeFormSourceAssociatedRecipes\n  >\n\n  readonly sourceIngredients: ReadonlyArray<GMenuRecipeFormSourceIngredients>\n}\n\nexport type GMenuRecipeFormRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuRecipeFormSourcePrices = GMenuRecipePriceFragment\n\nexport type GMenuRecipeFormSideDishes = GMenuCategoryListItemFragment\n\nexport type GMenuRecipeFormCategories = GMenuCategoryListItemFragment\n\nexport type GMenuRecipeFormSourceAssociatedRecipes = {\n  readonly __typename?: 'RecipeRelation'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipeFormPriceType\n\n  readonly recipe: GMenuRecipeForm_Recipe\n}\n\nexport type GMenuRecipeFormPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipeForm_Recipe = GMenuAssocRecipeFragment\n\nexport type GMenuRecipeFormSourceIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly quantity: number\n\n  readonly stockItem: GMenuRecipeFormStockItem\n}\n\nexport type GMenuRecipeFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly label: string\n\n  readonly wareUnit: GMenuRecipeFormWareUnit\n\n  readonly allergens: ReadonlyArray<GMenuRecipeFormAllergens>\n}\n\nexport type GMenuRecipeFormWareUnit = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type GMenuRecipeFormAllergens = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly enum: AllergenEnum\n}\n\nexport type GMenuRecipeFormAssocVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuRecipeFormAssocQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<GMenuRecipeFormAssocRecipes>\n}\n\nexport type GMenuRecipeFormAssocRecipes = GMenuAssocRecipeFragment\n\nexport type GMenuRecipeDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuRecipeDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GMenuRecipeDefaultsCompanyBranch\n}\n\nexport type GMenuRecipeDefaultsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly vats: ReadonlyArray<GMenuRecipeDefaultsVats>\n\n  readonly currency: GMenuRecipeDefaultsCurrency\n}\n\nexport type GMenuRecipeDefaultsVats = {\n  readonly __typename?: 'VatPriceType'\n\n  readonly vatId: string\n\n  readonly priceType: GMenuRecipeDefaultsPriceType\n}\n\nexport type GMenuRecipeDefaultsPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipeDefaultsCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GMenuRecipeListVariables = {\n  readonly branchId: string\n  readonly categoryId?: Maybe<string>\n  readonly categoryType?: Maybe<WareCategoryTypeEnum>\n}\n\nexport type GMenuRecipeListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<GMenuRecipeListRecipes>\n}\n\nexport type GMenuRecipeListRecipes = GMenuRecipeFragment\n\nexport type GMenuStockFormVariables = {\n  readonly stockId: string\n}\n\nexport type GMenuStockFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: GMenuStockFormStockItem\n}\n\nexport type GMenuStockFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly note: string\n\n  readonly nameLabel: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly wareUnit: GMenuStockFormWareUnit\n\n  readonly allergens: ReadonlyArray<GMenuStockFormAllergens>\n\n  readonly companyBranch: GMenuStockFormCompanyBranch\n}\n\nexport type GMenuStockFormWareUnit = GWareUnitFragment\n\nexport type GMenuStockFormAllergens = GAllergenFragment\n\nexport type GMenuStockFormCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuStockDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GMenuStockDefaultsCompanyBranch\n}\n\nexport type GMenuStockDefaultsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockListVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuStockListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<GMenuStockListStockItems>\n}\n\nexport type GMenuStockListStockItems = GMenuStockItemFragment\n\nexport type GOrderBranchLocationVariables = {\n  readonly branchId: string\n}\n\nexport type GOrderBranchLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GOrderBranchLocationCompanyBranch\n}\n\nexport type GOrderBranchLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GOrderBranchLocationGps\n}\n\nexport type GOrderBranchLocationGps = FGeoPointFragment\n\nexport type GOrderLocationVariables = {\n  readonly orderId: string\n}\n\nexport type GOrderLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GOrderLocationOrder\n}\n\nexport type GOrderLocationOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly gps: Maybe<GOrderLocationGps>\n}\n\nexport type GOrderLocationGps = FGeoPointFragment\n\nexport type GUpdateOrderStateVariables = {\n  readonly orderId: string\n  readonly state: OrderStateEnum\n}\n\nexport type GUpdateOrderStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: GUpdateOrderStateAddOrderState\n}\n\nexport type GUpdateOrderStateAddOrderState = {\n  readonly __typename?: 'Order'\n\n  readonly orderTiming: ReadonlyArray<GUpdateOrderStateOrderTiming>\n} & GOrderStateCategoryFragment\n\nexport type GUpdateOrderStateOrderTiming = {\n  readonly __typename?: 'OrderStateCategoryRelation'\n\n  readonly createdAt: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type GSendOrderNotificationVariables = {\n  readonly orderId: string\n  readonly minutes: number\n}\n\nexport type GSendOrderNotificationMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly orderNotifyCustomer: GSendOrderNotificationOrderNotifyCustomer\n}\n\nexport type GSendOrderNotificationOrderNotifyCustomer = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n}\n\nexport type GSelectOrderDriverVariables = {\n  readonly driverId: string\n  readonly orderId: string\n}\n\nexport type GSelectOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createUserDeliveringOrder: GSelectOrderDriverCreateUserDeliveringOrder\n}\n\nexport type GSelectOrderDriverCreateUserDeliveringOrder = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: GSelectOrderDriverOrder\n}\n\nexport type GSelectOrderDriverOrder = GOrderDriverFragment\n\nexport type GRemoveOrderDriverVariables = {\n  readonly orderDriverId: string\n}\n\nexport type GRemoveOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyUserDeliveringOrder: GRemoveOrderDriverDestroyUserDeliveringOrder\n}\n\nexport type GRemoveOrderDriverDestroyUserDeliveringOrder = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: GRemoveOrderDriverOrder\n}\n\nexport type GRemoveOrderDriverOrder = GOrderDriverFragment\n\nexport type MChangeOrderToPickupVariables = {\n  readonly orderId: string\n}\n\nexport type MChangeOrderToPickupMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderDeliveryToPickup: MChangeOrderToPickupUpdateOrderDeliveryToPickup\n}\n\nexport type MChangeOrderToPickupUpdateOrderDeliveryToPickup = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliveryType: Maybe<MChangeOrderToPickupDeliveryType>\n}\n\nexport type MChangeOrderToPickupDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type GOrderDriverSelectionVariables = {\n  readonly orderId: string\n  readonly branchId: ReadonlyArray<string>\n}\n\nexport type GOrderDriverSelectionQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GOrderDriverSelectionOrder\n\n  readonly drivers: ReadonlyArray<GOrderDriverSelectionDrivers>\n}\n\nexport type GOrderDriverSelectionOrder = GOrderDriverFragment\n\nexport type GOrderDriverSelectionDrivers = GDriverFragment\n\nexport type GOrderDetailVariables = {\n  readonly id: string\n}\n\nexport type GOrderDetailQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GOrderDetailOrder\n}\n\nexport type GOrderDetailOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly companyBranch: GOrderDetailCompanyBranch\n\n  readonly customer: GOrderDetailCustomer\n\n  readonly customerOrdersCountCurrent: number\n\n  readonly customerOrdersCountTotal: number\n\n  readonly note: Maybe<string>\n\n  readonly previousNote: Maybe<string>\n\n  readonly allAppliedRules: ReadonlyArray<string>\n\n  readonly items: ReadonlyArray<GOrderDetailItems>\n\n  readonly totalSum: GOrderDetailTotalSum\n\n  readonly transportFee: GOrderDetailTransportFee\n\n  readonly coverPrice: GOrderDetailCoverPrice\n\n  readonly totalDiscount: GOrderDetailTotalDiscount\n\n  readonly orderOrigin: GOrderDetailOrderOrigin\n\n  readonly orderTiming: ReadonlyArray<GOrderDetailOrderTiming>\n} & GOrderDriverFragment\n\nexport type GOrderDetailCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type GOrderDetailCustomer = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly emails: ReadonlyArray<GOrderDetailEmails>\n\n  readonly phones: ReadonlyArray<GOrderDetailPhones>\n}\n\nexport type GOrderDetailEmails = FEmailFragment\n\nexport type GOrderDetailPhones = FPhoneFragment\n\nexport type GOrderDetailItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<GOrderDetailSidedishes>\n} & GOrderDetailWareFragment\n\nexport type GOrderDetailSidedishes = GOrderDetailWareFragment\n\nexport type GOrderDetailTotalSum = FPriceFragment\n\nexport type GOrderDetailTransportFee = FPriceFragment\n\nexport type GOrderDetailCoverPrice = FPriceFragment\n\nexport type GOrderDetailTotalDiscount = FPriceFragment\n\nexport type GOrderDetailOrderOrigin = {\n  readonly __typename?: 'OrderOrigin'\n\n  readonly code: string\n\n  readonly enum: OrderOriginEnum\n}\n\nexport type GOrderDetailOrderTiming = {\n  readonly __typename?: 'OrderStateCategoryRelation'\n\n  readonly createdAt: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type GOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n  readonly includeOldFinished?: Maybe<boolean>\n}\n\nexport type GOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<GOrderListOrders>\n\n  readonly orderStateCategories: ReadonlyArray<GOrderListOrderStateCategories>\n}\n\nexport type GOrderListOrders = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (GOrderStateCategoryFragment &\n  GOrderListTickerFragment &\n  GOrderMarkerFragment)\n\nexport type GOrderListOrderStateCategories = {\n  readonly __typename?: 'OrderStateCategory'\n\n  readonly code: string\n\n  readonly enum: OrderStateCategoryEnum\n}\n\nexport type SOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SOrderListUpdatedOrder\n}\n\nexport type SOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SOrderListOrder>\n}\n\nexport type SOrderListOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (GOrderStateCategoryFragment &\n  GOrderListTickerFragment &\n  GOrderMarkerFragment)\n\nexport type GOrderStateVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type GOrderStateQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GOrderStateOrder\n\n  readonly companyBranch: GOrderStateCompanyBranch\n}\n\nexport type GOrderStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly deliveryType: Maybe<GOrderStateDeliveryType>\n\n  readonly isCancelable: boolean\n} & GOrderStateCategoryFragment\n\nexport type GOrderStateDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type GOrderStateCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowedCategories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type GClosureHistoryVariables = {\n  readonly branchId: string\n  readonly dateFrom: string\n  readonly dateTo: string\n}\n\nexport type GClosureHistoryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly financialReports: ReadonlyArray<GClosureHistoryFinancialReports>\n}\n\nexport type GClosureHistoryFinancialReports = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type GClosureReportQueryVariables = {\n  readonly branchId: string\n  readonly reportId: string\n  readonly showReport: boolean\n}\n\nexport type GClosureReportQueryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly lastReport: GClosureReportQueryLastReport\n\n  readonly report: Maybe<GClosureReportQueryReport>\n}\n\nexport type GClosureReportQueryLastReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type GClosureReportQueryReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type GCreateFinancialReportVariables = {\n  readonly companyBranchId: string\n}\n\nexport type GCreateFinancialReportMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GCreateFinancialReportResult\n}\n\nexport type GCreateFinancialReportResult = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n}\n\nexport type GDailyStatisticsVariables = {\n  readonly branches: ReadonlyArray<string>\n  readonly dateTimeFrom: string\n  readonly dateTimeTo: string\n}\n\nexport type GDailyStatisticsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: GDailyStatisticsStats\n}\n\nexport type GDailyStatisticsStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly categoryStatisticsPlain: string\n\n  readonly dailyStatisticsPlain: string\n\n  readonly deliveryStatisticsPlain: string\n\n  readonly driversStatisticsPlain: string\n}\n\nexport type GOrdersStatisticsListVariables = {\n  readonly branches: ReadonlyArray<string>\n  readonly dateTimeFrom: string\n  readonly dateTimeTo: string\n  readonly pagination: InputPaginationParams\n}\n\nexport type GOrdersStatisticsListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: GOrdersStatisticsListStats\n}\n\nexport type GOrdersStatisticsListStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly orders: GOrdersStatisticsListOrders\n}\n\nexport type GOrdersStatisticsListOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly list: ReadonlyArray<GOrdersStatisticsListList>\n}\n\nexport type GOrdersStatisticsListList = GOrderListTickerFragment &\n  GOrderStateCategoryFragment\n\nexport type GOrdersStatisticsVariables = {\n  readonly branches: ReadonlyArray<string>\n  readonly dateTimeFrom: string\n  readonly dateTimeTo: string\n}\n\nexport type GOrdersStatisticsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: GOrdersStatisticsStats\n}\n\nexport type GOrdersStatisticsStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly finishedOrders: GOrdersStatisticsFinishedOrders\n\n  readonly orderStatisticsPlain: string\n}\n\nexport type GOrdersStatisticsFinishedOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly fees: GOrdersStatisticsFees\n\n  readonly onlinePayments: GOrdersStatisticsOnlinePayments\n\n  readonly total: GOrdersStatisticsTotal\n\n  readonly finishedCount: number\n\n  readonly cancelledCount: number\n}\n\nexport type GOrdersStatisticsFees = GStatsPriceFragment\n\nexport type GOrdersStatisticsOnlinePayments = GStatsPriceFragment\n\nexport type GOrdersStatisticsTotal = GStatsPriceFragment\n\nexport type GCreateZoneVariables = {\n  readonly branchId: string\n  readonly points?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n}\n\nexport type GCreateZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createZone: GCreateZoneCreateZone\n}\n\nexport type GCreateZoneCreateZone = GZoneFragment\n\nexport type GUpdateZoneVariables = {\n  readonly zoneId: string\n  readonly update: InputZoneUpdate\n}\n\nexport type GUpdateZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZone: GUpdateZoneUpdateZone\n}\n\nexport type GUpdateZoneUpdateZone = GZoneFragment\n\nexport type GUpdateZonePriorityVariables = {\n  readonly zoneId: string\n  readonly offset: number\n}\n\nexport type GUpdateZonePriorityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZonePriority: ReadonlyArray<\n    GUpdateZonePriorityUpdateZonePriority\n  >\n}\n\nexport type GUpdateZonePriorityUpdateZonePriority = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly priority: number\n}\n\nexport type GDestroyZoneVariables = {\n  readonly zoneId: string\n}\n\nexport type GDestroyZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyZone: GDestroyZoneDestroyZone\n}\n\nexport type GDestroyZoneDestroyZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n}\n\nexport type GZonesVariables = {\n  readonly branchesId: ReadonlyArray<string>\n}\n\nexport type GZonesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zones: ReadonlyArray<GZonesZones>\n}\n\nexport type GZonesZones = GZoneFragment\n\nexport type GZoneLocationVariables = {\n  readonly zoneId: string\n}\n\nexport type GZoneLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zone: GZoneLocationZone\n}\n\nexport type GZoneLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly companyBranch: GZoneLocationCompanyBranch\n}\n\nexport type GZoneLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GZoneLocationGps\n}\n\nexport type GZoneLocationGps = FGeoPointFragment\n\nexport type GZoneBranchLocationVariables = {\n  readonly branchId: string\n}\n\nexport type GZoneBranchLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GZoneBranchLocationCompanyBranch\n}\n\nexport type GZoneBranchLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GZoneBranchLocationGps\n}\n\nexport type GZoneBranchLocationGps = FGeoPointFragment\n\nexport type GZoneColorsVariables = {}\n\nexport type GZoneColorsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zoneColors: ReadonlyArray<GZoneColorsZoneColors>\n}\n\nexport type GZoneColorsZoneColors = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type QLogoutWidgetVariables = {\n  readonly id: string\n}\n\nexport type QLogoutWidgetQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: QLogoutWidgetUser\n}\n\nexport type QLogoutWidgetUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type MAddOrderPromoVariables = {\n  readonly orderId: string\n  readonly code: string\n}\n\nexport type MAddOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderPromoCode: MAddOrderPromoAddOrderPromoCode\n}\n\nexport type MAddOrderPromoAddOrderPromoCode = {\n  readonly __typename?: 'OrderWithErrors'\n\n  readonly userErrors: ReadonlyArray<string>\n}\n\nexport type MCancelOrderVariables = {\n  readonly orderId: string\n}\n\nexport type MCancelOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MCancelOrderAddOrderState\n}\n\nexport type MCancelOrderAddOrderState = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type MCreateOrderAcceptVariables = {\n  readonly orderId: string\n  readonly customer: InputCustomerCreate\n  readonly deliverAt?: Maybe<string>\n  readonly note?: Maybe<string>\n}\n\nexport type MCreateOrderAcceptMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: MCreateOrderAcceptFinishOrder\n}\n\nexport type MCreateOrderAcceptFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MCreateOrderAcceptOrder\n}\n\nexport type MCreateOrderAcceptOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type MCreateOrderAddRecipeVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderAddRecipeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrderRecipe: MCreateOrderAddRecipeCreateOrderRecipe\n}\n\nexport type MCreateOrderAddRecipeCreateOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderNewVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly callEventId?: Maybe<string>\n}\n\nexport type MCreateOrderNewMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrder: MCreateOrderNewCreateOrder\n}\n\nexport type MCreateOrderNewCreateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type MCreateOrderRemoveItemVariables = {\n  readonly itemId: string\n}\n\nexport type MCreateOrderRemoveItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyOrderRecipe: MCreateOrderRemoveItemDestroyOrderRecipe\n}\n\nexport type MCreateOrderRemoveItemDestroyOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderUpdateVariables = {\n  readonly orderId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport type MCreateOrderUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MCreateOrderUpdateUpdateOrder\n}\n\nexport type MCreateOrderUpdateUpdateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type MCreateOrderUpdateItemVariables = {\n  readonly itemId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderUpdateItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipe: MCreateOrderUpdateItemUpdateOrderRecipe\n}\n\nexport type MCreateOrderUpdateItemUpdateOrderRecipe = FCreateOrderFragment\n\nexport type MRemoveOrderPromoVariables = {\n  readonly orderId: string\n  readonly codeId: string\n}\n\nexport type MRemoveOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly removeOrderPromoCode: MRemoveOrderPromoRemoveOrderPromoCode\n}\n\nexport type MRemoveOrderPromoRemoveOrderPromoCode = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type QCreateOrderItemVariables = {\n  readonly itemId: string\n}\n\nexport type QCreateOrderItemQuery = {\n  readonly __typename?: 'Query'\n\n  readonly item: QCreateOrderItemItem\n}\n\nexport type QCreateOrderItemItem = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItemRecipe\n\n  readonly selectedSidedishes: ReadonlyArray<QCreateOrderItemSelectedSidedishes>\n}\n\nexport type QCreateOrderItemRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QCreateOrderItemSelectedSidedishes = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItem_Recipe\n}\n\nexport type QCreateOrderItem_Recipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type QCreateOrderRecipeVariables = {\n  readonly recipeId: string\n}\n\nexport type QCreateOrderRecipeQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QCreateOrderRecipeRecipe\n}\n\nexport type QCreateOrderRecipeRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QOrderCartVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderCartQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderCartOrder\n}\n\nexport type QOrderCartOrder = FCreateOrderFragment\n\nexport type QOrderMenuVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderMenuQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orderMenu: ReadonlyArray<QOrderMenuOrderMenu>\n}\n\nexport type QOrderMenuOrderMenu = FOrderMenuCategoryFragment\n\nexport type QValidateLocationVariables = {\n  readonly branchId: string\n  readonly latitude: number\n  readonly longitude: number\n}\n\nexport type QValidateLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly resolveLocation: QValidateLocationResolveLocation\n}\n\nexport type QValidateLocationResolveLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly inDeliveryLocation: boolean\n\n  readonly zone: Maybe<QValidateLocationZone>\n}\n\nexport type QValidateLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly minimalOrderPrice: QValidateLocationMinimalOrderPrice\n}\n\nexport type QValidateLocationMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type MKitchenRecipeStateVariables = {\n  readonly recipeId: string\n  readonly state: OrderRecipeStateEnum\n}\n\nexport type MKitchenRecipeStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipeState: MKitchenRecipeStateUpdateOrderRecipeState\n}\n\nexport type MKitchenRecipeStateUpdateOrderRecipeState = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly orderRecipeState: MKitchenRecipeStateOrderRecipeState\n\n  readonly order: MKitchenRecipeStateOrder\n}\n\nexport type MKitchenRecipeStateOrderRecipeState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type MKitchenRecipeStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type QKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QKitchenOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QKitchenOrderListOrders>\n}\n\nexport type QKitchenOrderListOrders = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FKitchenOrderFragment\n\nexport type SKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SKitchenOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SKitchenOrderListUpdatedOrder\n}\n\nexport type SKitchenOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SKitchenOrderListOrder>\n}\n\nexport type SKitchenOrderListOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FKitchenOrderFragment\n\nexport type QOrderCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n  readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type QOrderCountQuery = {\n  readonly __typename?: 'Query'\n\n  readonly ordersCount: number\n}\n\nexport type SOrderCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n  readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type SOrderCountSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrdersCount: SOrderCountUpdatedOrdersCount\n}\n\nexport type SOrderCountUpdatedOrdersCount = {\n  readonly __typename?: 'OrderCountSubscription'\n\n  readonly ordersCount: number\n}\n\nexport type MMenuCategoryVisibilityVariables = {\n  readonly categoryId: string\n  readonly visible: boolean\n}\n\nexport type MMenuCategoryVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: MMenuCategoryVisibilityUpdateWareCategory\n}\n\nexport type MMenuCategoryVisibilityUpdateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type MMenuStockQuantityVariables = {\n  readonly stockItem: string\n  readonly quantityChange: number\n}\n\nexport type MMenuStockQuantityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly changeAmountStockItem: MMenuStockQuantityChangeAmountStockItem\n}\n\nexport type MMenuStockQuantityChangeAmountStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly quantity: number\n}\n\nexport type QMenuCategoryFilterVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuCategoryFilterQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryFilterCategories>\n}\n\nexport type QMenuCategoryFilterCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly countRecipes: number\n\n  readonly categoryType: QMenuCategoryFilterCategoryType\n}\n\nexport type QMenuCategoryFilterCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type QMenuStockDepositVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockDepositQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QMenuStockDepositStockItems>\n}\n\nexport type QMenuStockDepositStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly note: string\n\n  readonly quantity: number\n\n  readonly wareUnit: QMenuStockDepositWareUnit\n}\n\nexport type QMenuStockDepositWareUnit = GWareUnitFragment\n\nexport type QStockRecipesVariables = {\n  readonly stockId: string\n}\n\nexport type QStockRecipesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: QStockRecipesStockItem\n}\n\nexport type QStockRecipesStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly ingredients: ReadonlyArray<QStockRecipesIngredients>\n}\n\nexport type QStockRecipesIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly recipe: QStockRecipesRecipe\n}\n\nexport type QStockRecipesRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly recipeType: QStockRecipesRecipeType\n}\n\nexport type QStockRecipesRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type MBranchDefaultTimeVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly time: number\n}\n\nexport type MBranchDefaultTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateDefaultOrderProcessTime: MBranchDefaultTimeUpdateDefaultOrderProcessTime\n}\n\nexport type MBranchDefaultTimeUpdateDefaultOrderProcessTime = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type QBranchDefeaultTimesVariables = {\n  readonly branchId: string\n}\n\nexport type QBranchDefeaultTimesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QBranchDefeaultTimesCompanyBranch\n}\n\nexport type QBranchDefeaultTimesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type QOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QOrderMapDeliveriesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly deliveries: ReadonlyArray<QOrderMapDeliveriesDeliveries>\n}\n\nexport type QOrderMapDeliveriesDeliveries = FOrderMapDeliveryFragment\n\nexport type SOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type SOrderMapDeliveriesSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly update: SOrderMapDeliveriesUpdate\n}\n\nexport type SOrderMapDeliveriesUpdate = {\n  readonly __typename?: 'TransportationDeviceUserUpdateSubscription'\n\n  readonly actionType: SubscriptionActionType\n\n  readonly device: Maybe<SOrderMapDeliveriesDevice>\n}\n\nexport type SOrderMapDeliveriesDevice = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly user: SOrderMapDeliveriesUser\n} & FOrderMapDeviceFragment\n\nexport type SOrderMapDeliveriesUser = FOrderMapDriverFragment\n\nexport type MUserMenuLanguageVariables = {\n  readonly userId: string\n  readonly lang: LanguageEnum\n}\n\nexport type MUserMenuLanguageMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateUser: MUserMenuLanguageUpdateUser\n}\n\nexport type MUserMenuLanguageUpdateUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly language: MUserMenuLanguageLanguage\n}\n\nexport type MUserMenuLanguageLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly enum: LanguageEnum\n}\n\nexport type QUserMenuLanguagesVariables = {}\n\nexport type QUserMenuLanguagesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly languages: ReadonlyArray<QUserMenuLanguagesLanguages>\n}\n\nexport type QUserMenuLanguagesLanguages = {\n  readonly __typename?: 'Language'\n\n  readonly code: string\n\n  readonly enum: LanguageEnum\n\n  readonly rawCode: string\n}\n\nexport type GSpecificBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly companyBranch: GSpecificBusinessHourCompanyBranch\n\n  readonly specificDate: Maybe<string>\n\n  readonly specificDateLocalized: Maybe<string>\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n\n  readonly openAt: string\n\n  readonly closeAt: string\n}\n\nexport type GSpecificBusinessHourCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type GAllergenFragment = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: AllergenEnum\n\n  readonly category: number\n}\n\nexport type GWareUnitFragment = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly enum: WareUnitEnum\n\n  readonly code: string\n}\n\nexport type GMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly visible: boolean\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly availableAmount: number\n\n  readonly prices: ReadonlyArray<GMenuRecipePrices>\n\n  readonly recipeType: GMenuRecipeRecipeType\n}\n\nexport type GMenuRecipePrices = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipePriceType\n\n  readonly price: GMenuRecipePrice\n}\n\nexport type GMenuRecipePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n} & FPriceFragment\n\nexport type GMenuRecipeRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuStockItemFragment = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly note: string\n\n  readonly plu: Maybe<string>\n\n  readonly quantity: number\n\n  readonly nameLabel: string\n\n  readonly allergens: ReadonlyArray<GMenuStockItemAllergens>\n\n  readonly wareUnit: GMenuStockItemWareUnit\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockItemAllergens = GAllergenFragment\n\nexport type GMenuStockItemWareUnit = GWareUnitFragment\n\nexport type GMenuCategoryFormFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly visible: boolean\n\n  readonly categoryType: GMenuCategoryFormCategoryType\n\n  readonly pictogram: Maybe<string>\n\n  readonly recipes: ReadonlyArray<GMenuCategoryFormRecipes>\n}\n\nexport type GMenuCategoryFormCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuCategoryFormRecipes = GMenuRecipeFragment\n\nexport type GMenuCategoryListItemFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly countRecipes: number\n\n  readonly visible: boolean\n\n  readonly categoryType: GMenuCategoryListItemCategoryType\n}\n\nexport type GMenuCategoryListItemCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuRecipePriceFragment = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipePricePriceType\n\n  readonly price: GMenuRecipePricePrice\n\n  readonly vat: GMenuRecipePriceVat\n}\n\nexport type GMenuRecipePricePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipePricePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly currency: GMenuRecipePriceCurrency\n} & FPriceFragment\n\nexport type GMenuRecipePriceCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GMenuRecipePriceVat = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n}\n\nexport type GMenuAssocRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n}\n\nexport type GOrderStateCategoryFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type GDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type GOrderDriverFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly driver: Maybe<GOrderDriverDriver>\n}\n\nexport type GOrderDriverDriver = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly id: string\n\n  readonly user: GOrderDriverUser\n}\n\nexport type GOrderDriverUser = GDriverFragment\n\nexport type GOrderListTickerFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly isPaidWithCard: boolean\n\n  readonly deliveryType: Maybe<GOrderListTickerDeliveryType>\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliverAtWorst: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly companyBranch: GOrderListTickerCompanyBranch\n\n  readonly address: GOrderListTickerAddress\n\n  readonly customer: GOrderListTickerCustomer\n\n  readonly totalSum: GOrderListTickerTotalSum\n}\n\nexport type GOrderListTickerDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type GOrderListTickerCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly oldOrderThreshold: number\n}\n\nexport type GOrderListTickerAddress = FAddressFragment\n\nexport type GOrderListTickerCustomer = FCustomerFragment\n\nexport type GOrderListTickerTotalSum = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: GOrderListTickerCurrency\n}\n\nexport type GOrderListTickerCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GOrderDetailWareFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: GOrderDetailWareRecipe\n\n  readonly price: GOrderDetailWarePrice\n}\n\nexport type GOrderDetailWareRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type GOrderDetailWarePrice = FPriceFragment\n\nexport type GOrderMarkerFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly gps: Maybe<GOrderMarkerGps>\n}\n\nexport type GOrderMarkerGps = FGeoPointFragment\n\nexport type GStatsPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: GStatsPriceCurrency\n}\n\nexport type GStatsPriceCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GZoneFragment = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly enabled: boolean\n\n  readonly priority: number\n\n  readonly companyBranch: GZoneCompanyBranch\n\n  readonly geoPolygon: ReadonlyArray<GZoneGeoPolygon>\n\n  readonly priceRangeRules: ReadonlyArray<GZonePriceRangeRules>\n\n  readonly minimalOrderPrice: GZoneMinimalOrderPrice\n\n  readonly zoneColor: GZoneZoneColor\n}\n\nexport type GZoneCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly brand: GZoneBrand\n}\n\nexport type GZoneBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type GZoneGeoPolygon = FGeoPointFragment\n\nexport type GZonePriceRangeRules = GZonePriceRangeFragment\n\nexport type GZoneMinimalOrderPrice = FPriceFragment\n\nexport type GZoneZoneColor = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type GZonePriceRangeFragment = {\n  readonly __typename?: 'ZonePriceRangeRule'\n\n  readonly toPrice: GZonePriceRangeToPrice\n\n  readonly price: GZonePriceRangePrice\n}\n\nexport type GZonePriceRangeToPrice = FPriceFragment\n\nexport type GZonePriceRangePrice = FPriceFragment\n\nexport type FAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly state: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n}\n\nexport type FCompanyBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly address: FCompanyBranchAddress\n\n  readonly gps: FCompanyBranchGps\n\n  readonly brand: FCompanyBranchBrand\n}\n\nexport type FCompanyBranchAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<FCompanyBranchCountry>\n}\n\nexport type FCompanyBranchCountry = {\n  readonly __typename?: 'Country'\n\n  readonly phonePrefix: string\n}\n\nexport type FCompanyBranchGps = FGeoPointFragment\n\nexport type FCompanyBranchBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FCustomerFragment = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly defaultEmail: Maybe<FCustomerDefaultEmail>\n\n  readonly defaultPhone: Maybe<FCustomerDefaultPhone>\n}\n\nexport type FCustomerDefaultEmail = FEmailFragment\n\nexport type FCustomerDefaultPhone = FPhoneFragment\n\nexport type FEmailFragment = {\n  readonly __typename?: 'Email'\n\n  readonly email: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FGeoPointFragment = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type FPhoneFragment = {\n  readonly __typename?: 'Phone'\n\n  readonly phone: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n}\n\nexport type FCreateOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly items: ReadonlyArray<FCreateOrderItems>\n\n  readonly coverPrice: FCreateOrderCoverPrice\n\n  readonly transportFee: FCreateOrderTransportFee\n\n  readonly discounts: ReadonlyArray<FCreateOrderDiscounts>\n\n  readonly minimalOrderPrice: Maybe<FCreateOrderMinimalOrderPrice>\n\n  readonly totalDiscount: FCreateOrderTotalDiscount\n\n  readonly totalSum: FCreateOrderTotalSum\n}\n\nexport type FCreateOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly recipe: FCreateOrderRecipe\n\n  readonly priceWithSidedishes: FCreateOrderPriceWithSidedishes\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderSidedishes>\n} & FCreateOrderItemFragment\n\nexport type FCreateOrderRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly sidedishCount: number\n}\n\nexport type FCreateOrderPriceWithSidedishes = FPriceFragment\n\nexport type FCreateOrderSidedishes = FCreateOrderItemFragment\n\nexport type FCreateOrderCoverPrice = FPriceFragment\n\nexport type FCreateOrderTransportFee = FPriceFragment\n\nexport type FCreateOrderDiscounts = {\n  readonly __typename?: 'PriceWithDescription'\n\n  readonly code: string\n\n  readonly description: string\n\n  readonly price: FCreateOrderPrice\n}\n\nexport type FCreateOrderPrice = FPriceFragment\n\nexport type FCreateOrderMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type FCreateOrderTotalDiscount = FPriceFragment\n\nexport type FCreateOrderTotalSum = FPriceFragment\n\nexport type FCreateOrderItemFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly price: FCreateOrderItemPrice\n\n  readonly recipe: FCreateOrderItemRecipe\n}\n\nexport type FCreateOrderItemPrice = FPriceFragment\n\nexport type FCreateOrderItemRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FCreateOrderRecipeSidedishesFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly sidedishCategories: ReadonlyArray<\n    FCreateOrderRecipeSidedishesSidedishCategories\n  >\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderRecipeSidedishesSidedishes>\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly price: FCreateOrderRecipeSidedishesPrice\n}\n\nexport type FCreateOrderRecipeSidedishesPrice = FPriceFragment\n\nexport type FOrderMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly pictogram: Maybe<string>\n\n  readonly recipes: ReadonlyArray<FOrderMenuCategoryRecipes>\n}\n\nexport type FOrderMenuCategoryRecipes = FOrderMenuRecipeFragment\n\nexport type FOrderMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly price: FOrderMenuRecipePrice\n\n  readonly sidedishCount: number\n}\n\nexport type FOrderMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FOrderMenuRecipeCurrency\n}\n\nexport type FOrderMenuRecipeCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FKitchenOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly deliveryType: Maybe<FKitchenOrderDeliveryType>\n\n  readonly companyBranch: FKitchenOrderCompanyBranch\n\n  readonly address: FKitchenOrderAddress\n\n  readonly customer: FKitchenOrderCustomer\n\n  readonly note: Maybe<string>\n\n  readonly previousNote: Maybe<string>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n\n  readonly items: ReadonlyArray<FKitchenOrderItems>\n}\n\nexport type FKitchenOrderDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FKitchenOrderCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FKitchenOrderAddress = FAddressFragment\n\nexport type FKitchenOrderCustomer = FCustomerFragment\n\nexport type FKitchenOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<FKitchenOrderSidedishes>\n} & FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderSidedishes = FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderRecipeFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly orderRecipeState: FKitchenOrderRecipeOrderRecipeState\n\n  readonly recipe: FKitchenOrderRecipeRecipe\n}\n\nexport type FKitchenOrderRecipeOrderRecipeState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type FKitchenOrderRecipeRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FOrderMapDeliveryFragment = {\n  readonly __typename?: 'User'\n\n  readonly device: Maybe<FOrderMapDeliveryDevice>\n} & FOrderMapDriverFragment\n\nexport type FOrderMapDeliveryDevice = FOrderMapDeviceFragment\n\nexport type FOrderMapDeviceFragment = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly id: string\n\n  readonly lastPosition: Maybe<FOrderMapDeviceLastPosition>\n\n  readonly isFinalized: boolean\n}\n\nexport type FOrderMapDeviceLastPosition = {\n  readonly __typename?: 'GeoPositionWithTimestamp'\n\n  readonly gps: FOrderMapDeviceGps\n\n  readonly timestamp: string\n}\n\nexport type FOrderMapDeviceGps = FGeoPointFragment\n\nexport type FOrderMapDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n\n  readonly countUndeliveredOrders: number\n}\n\nimport * as Hooks from '@speedlo/graphql'\nimport gql from 'graphql-tag'\n\n// ====================================================\n// Fragments\n// ====================================================\n\nexport const GSpecificBusinessHourFragmentDoc = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const GAllergenFragmentDoc = gql`\n  fragment GAllergen on Allergen {\n    id\n    code\n    enum\n    category\n  }\n`\n\nexport const GWareUnitFragmentDoc = gql`\n  fragment GWareUnit on WareUnit {\n    id\n    enum\n    code\n  }\n`\n\nexport const GMenuStockItemFragmentDoc = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...GAllergen\n    }\n    wareUnit {\n      ...GWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n\n  ${GAllergenFragmentDoc}\n  ${GWareUnitFragmentDoc}\n`\n\nexport const FPriceFragmentDoc = gql`\n  fragment FPrice on PriceConverted {\n    value\n  }\n`\n\nexport const GMenuRecipeFragmentDoc = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const GMenuCategoryFormFragmentDoc = gql`\n  fragment GMenuCategoryForm on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    pictogram\n    recipes {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport const GMenuCategoryListItemFragmentDoc = gql`\n  fragment GMenuCategoryListItem on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    countRecipes\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n  }\n`\n\nexport const GMenuRecipePriceFragmentDoc = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const GMenuAssocRecipeFragmentDoc = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const GOrderStateCategoryFragmentDoc = gql`\n  fragment GOrderStateCategory on Order {\n    id\n    orderStateCategory\n  }\n`\n\nexport const GDriverFragmentDoc = gql`\n  fragment GDriver on User {\n    id\n    firstName\n    lastName\n  }\n`\n\nexport const GOrderDriverFragmentDoc = gql`\n  fragment GOrderDriver on Order {\n    id\n    driver: userDeliveringOrder {\n      id\n      user {\n        ...GDriver\n      }\n    }\n  }\n\n  ${GDriverFragmentDoc}\n`\n\nexport const FAddressFragmentDoc = gql`\n  fragment FAddress on JsonAddress {\n    state\n    city\n    street\n    houseNumber\n  }\n`\n\nexport const FEmailFragmentDoc = gql`\n  fragment FEmail on Email {\n    email\n    description\n    default\n  }\n`\n\nexport const FPhoneFragmentDoc = gql`\n  fragment FPhone on Phone {\n    phone\n    description\n    default\n  }\n`\n\nexport const FCustomerFragmentDoc = gql`\n  fragment FCustomer on JsonCustomer {\n    firstName\n    lastName\n    defaultEmail {\n      ...FEmail\n    }\n    defaultPhone {\n      ...FPhone\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n`\n\nexport const GOrderListTickerFragmentDoc = gql`\n  fragment GOrderListTicker on Order {\n    id\n    createdAt\n    isPaidWithCard\n    deliveryType {\n      enum\n    }\n    deliverAt\n    deliverAtWorst\n    deliveredAt\n    delayedDeliveryTime\n    companyBranch {\n      id\n      name\n      oldOrderThreshold\n    }\n    address {\n      ...FAddress\n    }\n    customer {\n      ...FCustomer\n    }\n    totalSum {\n      value\n      currency {\n        code\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n`\n\nexport const GOrderDetailWareFragmentDoc = gql`\n  fragment GOrderDetailWare on OrderRecipe {\n    id\n    recipe {\n      id\n      code\n      nameLabel\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FGeoPointFragmentDoc = gql`\n  fragment FGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const GOrderMarkerFragmentDoc = gql`\n  fragment GOrderMarker on Order {\n    id\n    deliverAt\n    delayedDeliveryTime\n    gps {\n      ...FGeoPoint\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const GStatsPriceFragmentDoc = gql`\n  fragment GStatsPrice on PriceConverted {\n    value\n    currency {\n      code\n    }\n  }\n`\n\nexport const GZonePriceRangeFragmentDoc = gql`\n  fragment GZonePriceRange on ZonePriceRangeRule {\n    toPrice {\n      ...FPrice\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const GZoneFragmentDoc = gql`\n  fragment GZone on Zone {\n    id\n    name\n    enabled\n    priority\n    companyBranch {\n      id\n      brand {\n        id\n      }\n    }\n    geoPolygon {\n      ...FGeoPoint\n    }\n    priceRangeRules {\n      ...GZonePriceRange\n    }\n    minimalOrderPrice {\n      ...FPrice\n    }\n    zoneColor {\n      id\n      code\n      color\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n  ${GZonePriceRangeFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCompanyBranchFragmentDoc = gql`\n  fragment FCompanyBranch on CompanyBranch {\n    id\n    name\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    gps {\n      ...FGeoPoint\n    }\n    brand {\n      id\n      name\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FCreateOrderItemFragmentDoc = gql`\n  fragment FCreateOrderItem on OrderRecipe {\n    id\n    price {\n      ...FPrice\n    }\n    recipe {\n      id\n      code\n      nameLabel\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderFragmentDoc = gql`\n  fragment FCreateOrder on Order {\n    id\n    countWares\n    items {\n      ...FCreateOrderItem\n      recipe {\n        sidedishCount: sideDishesWareCategoriesCount\n      }\n      priceWithSidedishes: priceWithSideDishes {\n        ...FPrice\n      }\n      sidedishes: sideDishes {\n        ...FCreateOrderItem\n      }\n    }\n    coverPrice {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...FPrice\n      }\n    }\n    minimalOrderPrice {\n      formattedValue\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    totalSum {\n      ...FPrice\n    }\n  }\n\n  ${FCreateOrderItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderRecipeSidedishesFragmentDoc = gql`\n  fragment FCreateOrderRecipeSidedishes on Recipe {\n    id\n    nameLabel\n    sidedishCategories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sidedishes: sideDishes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderMenuRecipeFragmentDoc = gql`\n  fragment FOrderMenuRecipe on Recipe {\n    id\n    code\n    nameLabel\n    descriptionLabel\n    price(warePriceType: DELIVERY) {\n      value\n      currency {\n        code\n      }\n    }\n    sidedishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const FOrderMenuCategoryFragmentDoc = gql`\n  fragment FOrderMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n    recipes(enabled: true, isAvailable: true) {\n      ...FOrderMenuRecipe\n    }\n  }\n\n  ${FOrderMenuRecipeFragmentDoc}\n`\n\nexport const FKitchenOrderRecipeFragmentDoc = gql`\n  fragment FKitchenOrderRecipe on OrderRecipe {\n    id\n    orderRecipeState {\n      enum\n    }\n    recipe {\n      id\n      code\n      nameLabel\n    }\n  }\n`\n\nexport const FKitchenOrderFragmentDoc = gql`\n  fragment FKitchenOrder on Order {\n    id\n    deliverAt\n    deliveredAt\n    delayedDeliveryTime\n    deliveryType {\n      enum\n    }\n    companyBranch {\n      id\n      name\n    }\n    address {\n      ...FAddress\n    }\n    customer {\n      ...FCustomer\n    }\n    note\n    previousNote\n    orderStateCategory(target: FE_KITCHEN)\n    items {\n      ...FKitchenOrderRecipe\n      sidedishes: sideDishes {\n        ...FKitchenOrderRecipe\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n  ${FKitchenOrderRecipeFragmentDoc}\n`\n\nexport const FOrderMapDriverFragmentDoc = gql`\n  fragment FOrderMapDriver on User {\n    id\n    initials\n    countUndeliveredOrders\n  }\n`\n\nexport const FOrderMapDeviceFragmentDoc = gql`\n  fragment FOrderMapDevice on TransportationDeviceUser {\n    id\n    lastPosition {\n      gps: geoPosition {\n        ...FGeoPoint\n      }\n      timestamp\n    }\n    isFinalized\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderMapDeliveryFragmentDoc = gql`\n  fragment FOrderMapDelivery on User {\n    ...FOrderMapDriver\n    device: usedTransportationDevice {\n      ...FOrderMapDevice\n    }\n  }\n\n  ${FOrderMapDriverFragmentDoc}\n  ${FOrderMapDeviceFragmentDoc}\n`\n\n// ====================================================\n// Hooks\n// ====================================================\n\nexport const MPasswordChangeDocument = gql`\n  mutation MPasswordChange($password: String!) {\n    updateUserPassword(newPassword: $password) {\n      id\n      token\n    }\n  }\n`\n\nexport function useMPasswordChange(\n  baseOptions?: Hooks.MutationHookOptions<\n    MPasswordChangeMutation,\n    MPasswordChangeVariables\n  >,\n) {\n  return Hooks.useMutation<MPasswordChangeMutation, MPasswordChangeVariables>(\n    MPasswordChangeDocument,\n    baseOptions,\n  )\n}\n\nexport const GUserModelBootstrapDocument = gql`\n  query GUserModelBootstrap($userId: ID!) {\n    user(id: $userId) {\n      id\n      language {\n        rawCode\n      }\n      branches: accessibleBranches {\n        ...FCompanyBranch\n      }\n    }\n    userPermissions: permissions {\n      canCancelOrders\n      canCreateOrder\n    }\n    userAccess: __schema {\n      queries: queryType {\n        fields {\n          name\n        }\n      }\n      mutations: mutationType {\n        fields {\n          name\n        }\n      }\n      subscriptions: subscriptionType {\n        fields {\n          name\n        }\n      }\n    }\n  }\n\n  ${FCompanyBranchFragmentDoc}\n`\n\nexport function useGUserModelBootstrap(\n  variables?: GUserModelBootstrapVariables,\n  baseOptions?: Hooks.QueryHookOptions<GUserModelBootstrapVariables>,\n) {\n  return Hooks.useQuery<GUserModelBootstrapQuery, GUserModelBootstrapVariables>(\n    GUserModelBootstrapDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GAddressSuggestDocument = gql`\n  query GAddressSuggest($search: String!) {\n    suggest: suggestGeolocation(address: $search) {\n      state\n      city\n      street\n      houseNumber\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGAddressSuggest(\n  variables?: GAddressSuggestVariables,\n  baseOptions?: Hooks.QueryHookOptions<GAddressSuggestVariables>,\n) {\n  return Hooks.useQuery<GAddressSuggestQuery, GAddressSuggestVariables>(\n    GAddressSuggestDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCreateSpecificBusinessHourDocument = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n\n  ${GSpecificBusinessHourFragmentDoc}\n`\n\nexport function useGCreateSpecificBusinessHour(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateSpecificBusinessHourMutation,\n    GCreateSpecificBusinessHourVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreateSpecificBusinessHourMutation,\n    GCreateSpecificBusinessHourVariables\n  >(GCreateSpecificBusinessHourDocument, baseOptions)\n}\n\nexport const GDeleteSpecificBusinessHourDocument = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n\nexport function useGDeleteSpecificBusinessHour(\n  baseOptions?: Hooks.MutationHookOptions<\n    GDeleteSpecificBusinessHourMutation,\n    GDeleteSpecificBusinessHourVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GDeleteSpecificBusinessHourMutation,\n    GDeleteSpecificBusinessHourVariables\n  >(GDeleteSpecificBusinessHourDocument, baseOptions)\n}\n\nexport const GSpecificBusinessHoursDocument = gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n\n  ${GSpecificBusinessHourFragmentDoc}\n`\n\nexport function useGSpecificBusinessHours(\n  variables?: GSpecificBusinessHoursVariables,\n  baseOptions?: Hooks.QueryHookOptions<GSpecificBusinessHoursVariables>,\n) {\n  return Hooks.useQuery<\n    GSpecificBusinessHoursQuery,\n    GSpecificBusinessHoursVariables\n  >(GSpecificBusinessHoursDocument, variables, baseOptions)\n}\n\nexport const GOrderVamDocument = gql`\n  query GOrderVam($branchId: ID!, $phone: String!) {\n    vamCustomer: vamInformation(companyBranchId: $branchId, phone: $phone) {\n      isFound\n      email\n      firstName\n      lastName\n      lastOrder {\n        note\n      }\n      locations {\n        street\n        houseNumber\n        city\n        state\n        gps {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n`\n\nexport function useGOrderVam(\n  variables?: GOrderVamVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderVamVariables>,\n) {\n  return Hooks.useQuery<GOrderVamQuery, GOrderVamVariables>(\n    GOrderVamDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderFormDeliverAtDefaultsDocument = gql`\n  query QOrderFormDeliverAtDefaults($branchId: ID!) {\n    times: companyBranch(id: $branchId) {\n      id\n      deliveryTime: defaultDeliveryTime\n      pickupTime: defaultPickupTime\n    }\n  }\n`\n\nexport function useQOrderFormDeliverAtDefaults(\n  variables?: QOrderFormDeliverAtDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFormDeliverAtDefaultsVariables>,\n) {\n  return Hooks.useQuery<\n    QOrderFormDeliverAtDefaultsQuery,\n    QOrderFormDeliverAtDefaultsVariables\n  >(QOrderFormDeliverAtDefaultsDocument, variables, baseOptions)\n}\n\nexport const GOrderPromoDocument = gql`\n  query GOrderPromo($branchId: ID!) {\n    promoCodes(promoCode: { companyBranch: $branchId, enabled: true }) {\n      id\n      code\n    }\n  }\n`\n\nexport function useGOrderPromo(\n  variables?: GOrderPromoVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderPromoVariables>,\n) {\n  return Hooks.useQuery<GOrderPromoQuery, GOrderPromoVariables>(\n    GOrderPromoDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderCallDocument = gql`\n  subscription SOrderCall {\n    call: updatedUserCallingCustomer {\n      eventId\n      phone\n      prefix\n      isRinging\n    }\n  }\n`\n\nexport function useSOrderCall(\n  variables?: SOrderCallVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderCallSubscription,\n    SOrderCallVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderCallSubscription, SOrderCallVariables>(\n    SOrderCallDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GSortMenuCategoryDocument = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport function useGSortMenuCategory(\n  baseOptions?: Hooks.MutationHookOptions<\n    GSortMenuCategoryMutation,\n    GSortMenuCategoryVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GSortMenuCategoryMutation,\n    GSortMenuCategoryVariables\n  >(GSortMenuCategoryDocument, baseOptions)\n}\n\nexport const GMenuCategoryCreateDocument = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport function useGMenuCategoryCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryCreateMutation,\n    GMenuCategoryCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryCreateMutation,\n    GMenuCategoryCreateVariables\n  >(GMenuCategoryCreateDocument, baseOptions)\n}\n\nexport const GMenuCategoryUpdateDocument = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...GMenuCategoryForm\n    }\n  }\n\n  ${GMenuCategoryFormFragmentDoc}\n`\n\nexport function useGMenuCategoryUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryUpdateMutation,\n    GMenuCategoryUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryUpdateMutation,\n    GMenuCategoryUpdateVariables\n  >(GMenuCategoryUpdateDocument, baseOptions)\n}\n\nexport const GMenuCategoryDeleteDocument = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuCategoryDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryDeleteMutation,\n    GMenuCategoryDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryDeleteMutation,\n    GMenuCategoryDeleteVariables\n  >(GMenuCategoryDeleteDocument, baseOptions)\n}\n\nexport const GMenuRecipeVisibilityDocument = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useGMenuRecipeVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeVisibilityMutation,\n    GMenuRecipeVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeVisibilityMutation,\n    GMenuRecipeVisibilityVariables\n  >(GMenuRecipeVisibilityDocument, baseOptions)\n}\n\nexport const GMenuRecipeCreateDocument = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeCreateMutation,\n    GMenuRecipeCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeCreateMutation,\n    GMenuRecipeCreateVariables\n  >(GMenuRecipeCreateDocument, baseOptions)\n}\n\nexport const GMenuRecipeUpdateDocument = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeUpdateMutation,\n    GMenuRecipeUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeUpdateMutation,\n    GMenuRecipeUpdateVariables\n  >(GMenuRecipeUpdateDocument, baseOptions)\n}\n\nexport const GMenuRecipeDeleteDocument = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuRecipeDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeDeleteMutation,\n    GMenuRecipeDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeDeleteMutation,\n    GMenuRecipeDeleteVariables\n  >(GMenuRecipeDeleteDocument, baseOptions)\n}\n\nexport const GMenuStockCreateDocument = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockCreateMutation,\n    GMenuStockCreateVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockCreateMutation, GMenuStockCreateVariables>(\n    GMenuStockCreateDocument,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockUpdateDocument = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockUpdateMutation,\n    GMenuStockUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockUpdateMutation, GMenuStockUpdateVariables>(\n    GMenuStockUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockDeleteDocument = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuStockDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockDeleteMutation,\n    GMenuStockDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockDeleteMutation, GMenuStockDeleteVariables>(\n    GMenuStockDeleteDocument,\n    baseOptions,\n  )\n}\n\nexport const GAllergensDocument = gql`\n  query GAllergens {\n    allergens {\n      ...GAllergen\n    }\n  }\n\n  ${GAllergenFragmentDoc}\n`\n\nexport function useGAllergens(\n  variables?: GAllergensVariables,\n  baseOptions?: Hooks.QueryHookOptions<GAllergensVariables>,\n) {\n  return Hooks.useQuery<GAllergensQuery, GAllergensVariables>(\n    GAllergensDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCurrenciesDocument = gql`\n  query GCurrencies($branchId: ID!) {\n    currencies {\n      enum\n      code\n    }\n    companyBranch(id: $branchId) {\n      address {\n        country {\n          currency {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useGCurrencies(\n  variables?: GCurrenciesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GCurrenciesVariables>,\n) {\n  return Hooks.useQuery<GCurrenciesQuery, GCurrenciesVariables>(\n    GCurrenciesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GVatsDocument = gql`\n  query GVats($branchId: ID!) {\n    vats(companyBranch: $branchId) {\n      id\n      vat\n    }\n  }\n`\n\nexport function useGVats(\n  variables?: GVatsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GVatsVariables>,\n) {\n  return Hooks.useQuery<GVatsQuery, GVatsVariables>(\n    GVatsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GWareUnitsDocument = gql`\n  query GWareUnits {\n    wareUnits {\n      id\n      code\n      enum\n    }\n  }\n`\n\nexport function useGWareUnits(\n  variables?: GWareUnitsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GWareUnitsVariables>,\n) {\n  return Hooks.useQuery<GWareUnitsQuery, GWareUnitsVariables>(\n    GWareUnitsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuCategoryFormDocument = gql`\n  query GMenuCategoryForm($categoryId: ID!) {\n    wareCategory(id: $categoryId) {\n      ...GMenuCategoryForm\n    }\n  }\n\n  ${GMenuCategoryFormFragmentDoc}\n`\n\nexport function useGMenuCategoryForm(\n  variables?: GMenuCategoryFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuCategoryFormVariables>,\n) {\n  return Hooks.useQuery<GMenuCategoryFormQuery, GMenuCategoryFormVariables>(\n    GMenuCategoryFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCategoryListDocument = gql`\n  query GCategoryList($branchId: ID!, $categoryType: WareCategoryTypeEnum!) {\n    categories: wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: $categoryType\n    ) {\n      ...GMenuCategoryListItem\n    }\n  }\n\n  ${GMenuCategoryListItemFragmentDoc}\n`\n\nexport function useGCategoryList(\n  variables?: GCategoryListVariables,\n  baseOptions?: Hooks.QueryHookOptions<GCategoryListVariables>,\n) {\n  return Hooks.useQuery<GCategoryListQuery, GCategoryListVariables>(\n    GCategoryListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuGuideDownloadDocument = gql`\n  query QMenuGuideDownload($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      foodMenuUrl\n    }\n  }\n`\n\nexport function useQMenuGuideDownload(\n  variables?: QMenuGuideDownloadVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuGuideDownloadVariables>,\n) {\n  return Hooks.useQuery<QMenuGuideDownloadQuery, QMenuGuideDownloadVariables>(\n    QMenuGuideDownloadDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuRecipeFormDocument = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...GMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...GMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n\n  ${GMenuRecipePriceFragmentDoc}\n  ${GMenuCategoryListItemFragmentDoc}\n  ${GMenuAssocRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeForm(\n  variables?: GMenuRecipeFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeFormVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeFormQuery, GMenuRecipeFormVariables>(\n    GMenuRecipeFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuRecipeFormAssocDocument = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n\n  ${GMenuAssocRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeFormAssoc(\n  variables?: GMenuRecipeFormAssocVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeFormAssocVariables>,\n) {\n  return Hooks.useQuery<\n    GMenuRecipeFormAssocQuery,\n    GMenuRecipeFormAssocVariables\n  >(GMenuRecipeFormAssocDocument, variables, baseOptions)\n}\n\nexport const GMenuRecipeDefaultsDocument = gql`\n  query GMenuRecipeDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport function useGMenuRecipeDefaults(\n  variables?: GMenuRecipeDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeDefaultsVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeDefaultsQuery, GMenuRecipeDefaultsVariables>(\n    GMenuRecipeDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuRecipeListDocument = gql`\n  query GMenuRecipeList(\n    $branchId: ID!\n    $categoryId: ID\n    $categoryType: WareCategoryTypeEnum\n  ) {\n    recipes(\n      companyBranch: $branchId\n      wareCategory: $categoryId\n      wareCategoryType: $categoryType\n    ) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeList(\n  variables?: GMenuRecipeListVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeListVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeListQuery, GMenuRecipeListVariables>(\n    GMenuRecipeListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockFormDocument = gql`\n  query GMenuStockForm($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      code\n      plu\n      note\n      nameLabel: label\n      allowNegative\n      wareUnit {\n        ...GWareUnit\n      }\n      allergens {\n        ...GAllergen\n      }\n      companyBranch {\n        id\n        allowNegative: stockItemsCanBeNegative\n      }\n    }\n  }\n\n  ${GWareUnitFragmentDoc}\n  ${GAllergenFragmentDoc}\n`\n\nexport function useGMenuStockForm(\n  variables?: GMenuStockFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockFormVariables>,\n) {\n  return Hooks.useQuery<GMenuStockFormQuery, GMenuStockFormVariables>(\n    GMenuStockFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockDefaultsDocument = gql`\n  query GMenuStockDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      allowNegative: stockItemsCanBeNegative\n    }\n  }\n`\n\nexport function useGMenuStockDefaults(\n  variables?: GMenuStockDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockDefaultsVariables>,\n) {\n  return Hooks.useQuery<GMenuStockDefaultsQuery, GMenuStockDefaultsVariables>(\n    GMenuStockDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockListDocument = gql`\n  query GMenuStockList($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockList(\n  variables?: GMenuStockListVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockListVariables>,\n) {\n  return Hooks.useQuery<GMenuStockListQuery, GMenuStockListVariables>(\n    GMenuStockListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderBranchLocationDocument = gql`\n  query GOrderBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGOrderBranchLocation(\n  variables?: GOrderBranchLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderBranchLocationVariables>,\n) {\n  return Hooks.useQuery<\n    GOrderBranchLocationQuery,\n    GOrderBranchLocationVariables\n  >(GOrderBranchLocationDocument, variables, baseOptions)\n}\n\nexport const GOrderLocationDocument = gql`\n  query GOrderLocation($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGOrderLocation(\n  variables?: GOrderLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderLocationVariables>,\n) {\n  return Hooks.useQuery<GOrderLocationQuery, GOrderLocationVariables>(\n    GOrderLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GUpdateOrderStateDocument = gql`\n  mutation GUpdateOrderState($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...GOrderStateCategory\n      orderTiming: orderStateCategoryRelations {\n        createdAt\n        orderStateCategory\n      }\n    }\n  }\n\n  ${GOrderStateCategoryFragmentDoc}\n`\n\nexport function useGUpdateOrderState(\n  baseOptions?: Hooks.MutationHookOptions<\n    GUpdateOrderStateMutation,\n    GUpdateOrderStateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GUpdateOrderStateMutation,\n    GUpdateOrderStateVariables\n  >(GUpdateOrderStateDocument, baseOptions)\n}\n\nexport const GSendOrderNotificationDocument = gql`\n  mutation GSendOrderNotification($orderId: ID!, $minutes: Int!) {\n    orderNotifyCustomer(id: $orderId, minutes: $minutes) {\n      id\n      deliverAt\n    }\n  }\n`\n\nexport function useGSendOrderNotification(\n  baseOptions?: Hooks.MutationHookOptions<\n    GSendOrderNotificationMutation,\n    GSendOrderNotificationVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GSendOrderNotificationMutation,\n    GSendOrderNotificationVariables\n  >(GSendOrderNotificationDocument, baseOptions)\n}\n\nexport const GSelectOrderDriverDocument = gql`\n  mutation GSelectOrderDriver($driverId: ID!, $orderId: ID!) {\n    createUserDeliveringOrder(user: $driverId, order: $orderId) {\n      order {\n        ...GOrderDriver\n      }\n    }\n  }\n\n  ${GOrderDriverFragmentDoc}\n`\n\nexport function useGSelectOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    GSelectOrderDriverMutation,\n    GSelectOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GSelectOrderDriverMutation,\n    GSelectOrderDriverVariables\n  >(GSelectOrderDriverDocument, baseOptions)\n}\n\nexport const GRemoveOrderDriverDocument = gql`\n  mutation GRemoveOrderDriver($orderDriverId: ID!) {\n    destroyUserDeliveringOrder(id: $orderDriverId) {\n      order {\n        ...GOrderDriver\n      }\n    }\n  }\n\n  ${GOrderDriverFragmentDoc}\n`\n\nexport function useGRemoveOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    GRemoveOrderDriverMutation,\n    GRemoveOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GRemoveOrderDriverMutation,\n    GRemoveOrderDriverVariables\n  >(GRemoveOrderDriverDocument, baseOptions)\n}\n\nexport const MChangeOrderToPickupDocument = gql`\n  mutation MChangeOrderToPickup($orderId: ID!) {\n    updateOrderDeliveryToPickup(id: $orderId) {\n      id\n      deliveryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMChangeOrderToPickup(\n  baseOptions?: Hooks.MutationHookOptions<\n    MChangeOrderToPickupMutation,\n    MChangeOrderToPickupVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MChangeOrderToPickupMutation,\n    MChangeOrderToPickupVariables\n  >(MChangeOrderToPickupDocument, baseOptions)\n}\n\nexport const GOrderDriverSelectionDocument = gql`\n  query GOrderDriverSelection($orderId: ID!, $branchId: [ID!]!) {\n    order(id: $orderId) {\n      ...GOrderDriver\n    }\n    drivers(companyBranches: $branchId, onlyAvailable: true) {\n      ...GDriver\n    }\n  }\n\n  ${GOrderDriverFragmentDoc}\n  ${GDriverFragmentDoc}\n`\n\nexport function useGOrderDriverSelection(\n  variables?: GOrderDriverSelectionVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderDriverSelectionVariables>,\n) {\n  return Hooks.useQuery<\n    GOrderDriverSelectionQuery,\n    GOrderDriverSelectionVariables\n  >(GOrderDriverSelectionDocument, variables, baseOptions)\n}\n\nexport const GOrderDetailDocument = gql`\n  query GOrderDetail($id: ID!) {\n    order(id: $id) {\n      id\n      createdAt\n      deliverAt\n      delayedDeliveryTime\n      companyBranch {\n        id\n      }\n      customer {\n        emails {\n          ...FEmail\n        }\n        phones {\n          ...FPhone\n        }\n      }\n      customerOrdersCountCurrent\n      customerOrdersCountTotal\n      note\n      previousNote\n      allAppliedRules\n      items {\n        ...GOrderDetailWare\n        sidedishes: sideDishes {\n          ...GOrderDetailWare\n        }\n      }\n      totalSum {\n        ...FPrice\n      }\n      transportFee {\n        ...FPrice\n      }\n      coverPrice {\n        ...FPrice\n      }\n      totalDiscount {\n        ...FPrice\n      }\n      orderOrigin {\n        code\n        enum\n      }\n      orderTiming: orderStateCategoryRelations {\n        createdAt\n        orderStateCategory\n      }\n      ...GOrderDriver\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n  ${GOrderDetailWareFragmentDoc}\n  ${FPriceFragmentDoc}\n  ${GOrderDriverFragmentDoc}\n`\n\nexport function useGOrderDetail(\n  variables?: GOrderDetailVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderDetailVariables>,\n) {\n  return Hooks.useQuery<GOrderDetailQuery, GOrderDetailVariables>(\n    GOrderDetailDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderListDocument = gql`\n  query GOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n    $includeOldFinished: Boolean\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoriesOR: $categories\n        includeOldFinished: $includeOldFinished\n      }\n    ) {\n      id\n      ...GOrderStateCategory\n      ...GOrderListTicker\n      ...GOrderMarker\n    }\n    orderStateCategories {\n      code\n      enum\n    }\n  }\n\n  ${GOrderStateCategoryFragmentDoc}\n  ${GOrderListTickerFragmentDoc}\n  ${GOrderMarkerFragmentDoc}\n`\n\nexport function useGOrderList(\n  variables?: GOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderListVariables>,\n) {\n  return Hooks.useQuery<GOrderListQuery, GOrderListVariables>(\n    GOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderListDocument = gql`\n  subscription SOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        id\n        ...GOrderStateCategory\n        ...GOrderListTicker\n        ...GOrderMarker\n      }\n    }\n  }\n\n  ${GOrderStateCategoryFragmentDoc}\n  ${GOrderListTickerFragmentDoc}\n  ${GOrderMarkerFragmentDoc}\n`\n\nexport function useSOrderList(\n  variables?: SOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderListSubscription,\n    SOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderListSubscription, SOrderListVariables>(\n    SOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderStateDocument = gql`\n  query GOrderState($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      deliveryType {\n        enum\n      }\n      isCancelable\n      ...GOrderStateCategory\n    }\n    companyBranch(id: $branchId) {\n      id\n      allowedCategories\n    }\n  }\n\n  ${GOrderStateCategoryFragmentDoc}\n`\n\nexport function useGOrderState(\n  variables?: GOrderStateVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderStateVariables>,\n) {\n  return Hooks.useQuery<GOrderStateQuery, GOrderStateVariables>(\n    GOrderStateDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GClosureHistoryDocument = gql`\n  query GClosureHistory($branchId: ID!, $dateFrom: Date!, $dateTo: Date!) {\n    financialReports(\n      companyBranchId: $branchId\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n    ) {\n      id\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useGClosureHistory(\n  variables?: GClosureHistoryVariables,\n  baseOptions?: Hooks.QueryHookOptions<GClosureHistoryVariables>,\n) {\n  return Hooks.useQuery<GClosureHistoryQuery, GClosureHistoryVariables>(\n    GClosureHistoryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GClosureReportQueryDocument = gql`\n  query GClosureReportQuery(\n    $branchId: ID!\n    $reportId: ID!\n    $showReport: Boolean!\n  ) {\n    lastReport: lastFinancialReport(companyBranchId: $branchId)\n      @skip(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n    report: financialReport(report: $reportId) @include(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useGClosureReportQuery(\n  variables?: GClosureReportQueryVariables,\n  baseOptions?: Hooks.QueryHookOptions<GClosureReportQueryVariables>,\n) {\n  return Hooks.useQuery<GClosureReportQueryQuery, GClosureReportQueryVariables>(\n    GClosureReportQueryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCreateFinancialReportDocument = gql`\n  mutation GCreateFinancialReport($companyBranchId: ID!) {\n    result: createFinancialReport(companyBranchId: $companyBranchId) {\n      id\n    }\n  }\n`\n\nexport function useGCreateFinancialReport(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateFinancialReportMutation,\n    GCreateFinancialReportVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreateFinancialReportMutation,\n    GCreateFinancialReportVariables\n  >(GCreateFinancialReportDocument, baseOptions)\n}\n\nexport const GDailyStatisticsDocument = gql`\n  query GDailyStatistics(\n    $branches: [ID!]!\n    $dateTimeFrom: DateTime!\n    $dateTimeTo: DateTime!\n  ) {\n    stats: statistics(\n      branches: $branches\n      dateTimeFrom: $dateTimeFrom\n      dateTimeTo: $dateTimeTo\n    ) {\n      categoryStatisticsPlain\n      dailyStatisticsPlain\n      deliveryStatisticsPlain\n      driversStatisticsPlain\n    }\n  }\n`\n\nexport function useGDailyStatistics(\n  variables?: GDailyStatisticsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GDailyStatisticsVariables>,\n) {\n  return Hooks.useQuery<GDailyStatisticsQuery, GDailyStatisticsVariables>(\n    GDailyStatisticsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrdersStatisticsListDocument = gql`\n  query GOrdersStatisticsList(\n    $branches: [ID!]!\n    $dateTimeFrom: DateTime!\n    $dateTimeTo: DateTime!\n    $pagination: InputPaginationParams!\n  ) {\n    stats: statistics(\n      branches: $branches\n      dateTimeFrom: $dateTimeFrom\n      dateTimeTo: $dateTimeTo\n    ) {\n      orders: finishedOrders {\n        list: orders(includeCanceled: true, pagination: $pagination) {\n          ...GOrderListTicker\n          ...GOrderStateCategory\n        }\n      }\n    }\n  }\n\n  ${GOrderListTickerFragmentDoc}\n  ${GOrderStateCategoryFragmentDoc}\n`\n\nexport function useGOrdersStatisticsList(\n  variables?: GOrdersStatisticsListVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrdersStatisticsListVariables>,\n) {\n  return Hooks.useQuery<\n    GOrdersStatisticsListQuery,\n    GOrdersStatisticsListVariables\n  >(GOrdersStatisticsListDocument, variables, baseOptions)\n}\n\nexport const GOrdersStatisticsDocument = gql`\n  query GOrdersStatistics(\n    $branches: [ID!]!\n    $dateTimeFrom: DateTime!\n    $dateTimeTo: DateTime!\n  ) {\n    stats: statistics(\n      branches: $branches\n      dateTimeFrom: $dateTimeFrom\n      dateTimeTo: $dateTimeTo\n    ) {\n      finishedOrders {\n        fees {\n          ...GStatsPrice\n        }\n        onlinePayments {\n          ...GStatsPrice\n        }\n        total {\n          ...GStatsPrice\n        }\n        finishedCount: ordersCount\n        cancelledCount: ordersCanceledCount\n      }\n      orderStatisticsPlain\n    }\n  }\n\n  ${GStatsPriceFragmentDoc}\n`\n\nexport function useGOrdersStatistics(\n  variables?: GOrdersStatisticsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrdersStatisticsVariables>,\n) {\n  return Hooks.useQuery<GOrdersStatisticsQuery, GOrdersStatisticsVariables>(\n    GOrdersStatisticsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCreateZoneDocument = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...GZone\n    }\n  }\n\n  ${GZoneFragmentDoc}\n`\n\nexport function useGCreateZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateZoneMutation,\n    GCreateZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GCreateZoneMutation, GCreateZoneVariables>(\n    GCreateZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GUpdateZoneDocument = gql`\n  mutation GUpdateZone($zoneId: ID!, $update: InputZoneUpdate!) {\n    updateZone(id: $zoneId, zone: $update) {\n      ...GZone\n    }\n  }\n\n  ${GZoneFragmentDoc}\n`\n\nexport function useGUpdateZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GUpdateZoneMutation,\n    GUpdateZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GUpdateZoneMutation, GUpdateZoneVariables>(\n    GUpdateZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GUpdateZonePriorityDocument = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport function useGUpdateZonePriority(\n  baseOptions?: Hooks.MutationHookOptions<\n    GUpdateZonePriorityMutation,\n    GUpdateZonePriorityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GUpdateZonePriorityMutation,\n    GUpdateZonePriorityVariables\n  >(GUpdateZonePriorityDocument, baseOptions)\n}\n\nexport const GDestroyZoneDocument = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n\nexport function useGDestroyZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GDestroyZoneMutation,\n    GDestroyZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GDestroyZoneMutation, GDestroyZoneVariables>(\n    GDestroyZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GZonesDocument = gql`\n  query GZones($branchesId: [ID!]!) {\n    zones(companyBranches: $branchesId) {\n      ...GZone\n    }\n  }\n\n  ${GZoneFragmentDoc}\n`\n\nexport function useGZones(\n  variables?: GZonesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZonesVariables>,\n) {\n  return Hooks.useQuery<GZonesQuery, GZonesVariables>(\n    GZonesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneLocationDocument = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...FGeoPoint\n        }\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGZoneLocation(\n  variables?: GZoneLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneLocationVariables>,\n) {\n  return Hooks.useQuery<GZoneLocationQuery, GZoneLocationVariables>(\n    GZoneLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneBranchLocationDocument = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGZoneBranchLocation(\n  variables?: GZoneBranchLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneBranchLocationVariables>,\n) {\n  return Hooks.useQuery<GZoneBranchLocationQuery, GZoneBranchLocationVariables>(\n    GZoneBranchLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneColorsDocument = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n\nexport function useGZoneColors(\n  variables?: GZoneColorsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneColorsVariables>,\n) {\n  return Hooks.useQuery<GZoneColorsQuery, GZoneColorsVariables>(\n    GZoneColorsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QLogoutWidgetDocument = gql`\n  query QLogoutWidget($id: ID!) {\n    user(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n`\n\nexport function useQLogoutWidget(\n  variables?: QLogoutWidgetVariables,\n  baseOptions?: Hooks.QueryHookOptions<QLogoutWidgetVariables>,\n) {\n  return Hooks.useQuery<QLogoutWidgetQuery, QLogoutWidgetVariables>(\n    QLogoutWidgetDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MAddOrderPromoDocument = gql`\n  mutation MAddOrderPromo($orderId: ID!, $code: String!) {\n    addOrderPromoCode(order: $orderId, promoCode: $code) {\n      userErrors: errors\n    }\n  }\n`\n\nexport function useMAddOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddOrderPromoMutation,\n    MAddOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<MAddOrderPromoMutation, MAddOrderPromoVariables>(\n    MAddOrderPromoDocument,\n    baseOptions,\n  )\n}\n\nexport const MCancelOrderDocument = gql`\n  mutation MCancelOrder($orderId: ID!) {\n    addOrderState(order: $orderId, orderState: CANCELED) {\n      id\n    }\n  }\n`\n\nexport function useMCancelOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCancelOrderMutation,\n    MCancelOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MCancelOrderMutation, MCancelOrderVariables>(\n    MCancelOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderAcceptDocument = gql`\n  mutation MCreateOrderAccept(\n    $orderId: ID!\n    $customer: InputCustomerCreate!\n    $deliverAt: DateTime\n    $note: String\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        customer: $customer\n        note: $note\n        deliverAt: $deliverAt\n        paymentMethod: CASH\n        paymentGate: CASH\n      }\n    ) {\n      userErrors\n      order {\n        id\n      }\n    }\n  }\n`\n\nexport function useMCreateOrderAccept(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >(MCreateOrderAcceptDocument, baseOptions)\n}\n\nexport const MCreateOrderAddRecipeDocument = gql`\n  mutation MCreateOrderAddRecipe(\n    $orderId: ID!\n    $recipeId: ID!\n    $sidedishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sidedishes\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderAddRecipe(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >(MCreateOrderAddRecipeDocument, baseOptions)\n}\n\nexport const MCreateOrderNewDocument = gql`\n  mutation MCreateOrderNew(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $callEventId: ID\n  ) {\n    createOrder(\n      order: {\n        companyBranch: $branchId\n        deliveryType: $deliveryType\n        callEventId: $callEventId\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: {}\n        warePriceType: DELIVERY\n        orderOrigin: STAFF\n      }\n    ) {\n      id\n    }\n  }\n`\n\nexport function useMCreateOrderNew(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderNewMutation,\n    MCreateOrderNewVariables\n  >,\n) {\n  return Hooks.useMutation<MCreateOrderNewMutation, MCreateOrderNewVariables>(\n    MCreateOrderNewDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderRemoveItemDocument = gql`\n  mutation MCreateOrderRemoveItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderRemoveItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >(MCreateOrderRemoveItemDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateDocument = gql`\n  mutation MCreateOrderUpdate(\n    $orderId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $customer: InputCustomerCreate\n  ) {\n    updateOrder(\n      id: $orderId\n      order: {\n        deliveryType: $deliveryType\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: $customer\n      }\n    ) {\n      id\n    }\n  }\n`\n\nexport function useMCreateOrderUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >(MCreateOrderUpdateDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateItemDocument = gql`\n  mutation MCreateOrderUpdateItem($itemId: ID!, $sidedishes: [ID!]) {\n    updateOrderRecipe(id: $itemId, orderRecipe: { sideDishes: $sidedishes }) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderUpdateItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >(MCreateOrderUpdateItemDocument, baseOptions)\n}\n\nexport const MRemoveOrderPromoDocument = gql`\n  mutation MRemoveOrderPromo($orderId: ID!, $codeId: ID!) {\n    removeOrderPromoCode(order: $orderId, promoCode: $codeId) {\n      id\n    }\n  }\n`\n\nexport function useMRemoveOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >(MRemoveOrderPromoDocument, baseOptions)\n}\n\nexport const QCreateOrderItemDocument = gql`\n  query QCreateOrderItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...FCreateOrderRecipeSidedishes\n      }\n      selectedSidedishes: sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderItem(\n  variables?: QCreateOrderItemVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCreateOrderItemVariables>,\n) {\n  return Hooks.useQuery<QCreateOrderItemQuery, QCreateOrderItemVariables>(\n    QCreateOrderItemDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QCreateOrderRecipeDocument = gql`\n  query QCreateOrderRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...FCreateOrderRecipeSidedishes\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderRecipe(\n  variables?: QCreateOrderRecipeVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCreateOrderRecipeVariables>,\n) {\n  return Hooks.useQuery<QCreateOrderRecipeQuery, QCreateOrderRecipeVariables>(\n    QCreateOrderRecipeDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderCartDocument = gql`\n  query QOrderCart($orderId: ID!) {\n    order(id: $orderId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useQOrderCart(\n  variables?: QOrderCartVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderCartVariables>,\n) {\n  return Hooks.useQuery<QOrderCartQuery, QOrderCartVariables>(\n    QOrderCartDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderMenuDocument = gql`\n  query QOrderMenu($branchId: ID!) {\n    orderMenu: wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n    ) {\n      ...FOrderMenuCategory\n    }\n  }\n\n  ${FOrderMenuCategoryFragmentDoc}\n`\n\nexport function useQOrderMenu(\n  variables?: QOrderMenuVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMenuVariables>,\n) {\n  return Hooks.useQuery<QOrderMenuQuery, QOrderMenuVariables>(\n    QOrderMenuDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QValidateLocationDocument = gql`\n  query QValidateLocation(\n    $branchId: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    resolveLocation(\n      companyBranch: $branchId\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      inDeliveryLocation\n      zone {\n        minimalOrderPrice {\n          formattedValue\n        }\n      }\n    }\n  }\n`\n\nexport function useQValidateLocation(\n  variables?: QValidateLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<QValidateLocationVariables>,\n) {\n  return Hooks.useQuery<QValidateLocationQuery, QValidateLocationVariables>(\n    QValidateLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MKitchenRecipeStateDocument = gql`\n  mutation MKitchenRecipeState($recipeId: ID!, $state: OrderRecipeStateEnum!) {\n    updateOrderRecipeState(id: $recipeId, orderRecipeState: $state) {\n      id\n      orderRecipeState {\n        enum\n      }\n      order {\n        id\n        orderStateCategory(target: FE_KITCHEN)\n      }\n    }\n  }\n`\n\nexport function useMKitchenRecipeState(\n  baseOptions?: Hooks.MutationHookOptions<\n    MKitchenRecipeStateMutation,\n    MKitchenRecipeStateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MKitchenRecipeStateMutation,\n    MKitchenRecipeStateVariables\n  >(MKitchenRecipeStateDocument, baseOptions)\n}\n\nexport const QKitchenOrderListDocument = gql`\n  query QKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoryTarget: FE_KITCHEN\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      id\n      ...FKitchenOrder\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useQKitchenOrderList(\n  variables?: QKitchenOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QKitchenOrderListVariables>,\n) {\n  return Hooks.useQuery<QKitchenOrderListQuery, QKitchenOrderListVariables>(\n    QKitchenOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SKitchenOrderListDocument = gql`\n  subscription SKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        id\n        ...FKitchenOrder\n      }\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useSKitchenOrderList(\n  variables?: SKitchenOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >(SKitchenOrderListDocument, variables, baseOptions)\n}\n\nexport const QOrderCountDocument = gql`\n  query QOrderCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    ordersCount(companyBranches: $branchesId, orderStateCategories: $categories)\n  }\n`\n\nexport function useQOrderCount(\n  variables?: QOrderCountVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderCountVariables>,\n) {\n  return Hooks.useQuery<QOrderCountQuery, QOrderCountVariables>(\n    QOrderCountDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderCountDocument = gql`\n  subscription SOrderCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    updatedOrdersCount(companyBranches: $branchesId) {\n      ordersCount(\n        companyBranches: $branchesId\n        orderStateCategoriesOR: $categories\n      )\n    }\n  }\n`\n\nexport function useSOrderCount(\n  variables?: SOrderCountVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderCountSubscription,\n    SOrderCountVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderCountSubscription, SOrderCountVariables>(\n    SOrderCountDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MMenuCategoryVisibilityDocument = gql`\n  mutation MMenuCategoryVisibility($categoryId: ID!, $visible: Boolean!) {\n    updateWareCategory(id: $categoryId, wareCategory: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useMMenuCategoryVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >(MMenuCategoryVisibilityDocument, baseOptions)\n}\n\nexport const MMenuStockQuantityDocument = gql`\n  mutation MMenuStockQuantity($stockItem: ID!, $quantityChange: Float!) {\n    changeAmountStockItem(id: $stockItem, amountOffset: $quantityChange) {\n      id\n      quantity\n    }\n  }\n`\n\nexport function useMMenuStockQuantity(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >(MMenuStockQuantityDocument, baseOptions)\n}\n\nexport const QMenuCategoryFilterDocument = gql`\n  query QMenuCategoryFilter($branchId: ID!) {\n    categories: wareCategories(companyBranch: $branchId) {\n      id\n      nameLabel\n      countRecipes\n      categoryType: wareCategoryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useQMenuCategoryFilter(\n  variables?: QMenuCategoryFilterVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryFilterVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryFilterQuery, QMenuCategoryFilterVariables>(\n    QMenuCategoryFilterDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuStockDepositDocument = gql`\n  query QMenuStockDeposit($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      id\n      code\n      plu\n      nameLabel: label\n      note\n      quantity\n      wareUnit {\n        ...GWareUnit\n      }\n    }\n  }\n\n  ${GWareUnitFragmentDoc}\n`\n\nexport function useQMenuStockDeposit(\n  variables?: QMenuStockDepositVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuStockDepositVariables>,\n) {\n  return Hooks.useQuery<QMenuStockDepositQuery, QMenuStockDepositVariables>(\n    QMenuStockDepositDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStockRecipesDocument = gql`\n  query QStockRecipes($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      ingredients {\n        id\n        recipe {\n          id\n          nameLabel\n          descriptionLabel\n          recipeType: wareCategoryType {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useQStockRecipes(\n  variables?: QStockRecipesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStockRecipesVariables>,\n) {\n  return Hooks.useQuery<QStockRecipesQuery, QStockRecipesVariables>(\n    QStockRecipesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MBranchDefaultTimeDocument = gql`\n  mutation MBranchDefaultTime(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $time: Int!\n  ) {\n    updateDefaultOrderProcessTime(\n      companyBranch: $branchId\n      deliveryType: $deliveryType\n      defaultTime: $time\n    ) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useMBranchDefaultTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >(MBranchDefaultTimeDocument, baseOptions)\n}\n\nexport const QBranchDefeaultTimesDocument = gql`\n  query QBranchDefeaultTimes($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useQBranchDefeaultTimes(\n  variables?: QBranchDefeaultTimesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QBranchDefeaultTimesVariables>,\n) {\n  return Hooks.useQuery<\n    QBranchDefeaultTimesQuery,\n    QBranchDefeaultTimesVariables\n  >(QBranchDefeaultTimesDocument, variables, baseOptions)\n}\n\nexport const QOrderMapDeliveriesDocument = gql`\n  query QOrderMapDeliveries($branches: [ID!]!) {\n    deliveries: drivers(companyBranches: $branches, onlyAvailable: false) {\n      ...FOrderMapDelivery\n    }\n  }\n\n  ${FOrderMapDeliveryFragmentDoc}\n`\n\nexport function useQOrderMapDeliveries(\n  variables?: QOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMapDeliveriesVariables>,\n) {\n  return Hooks.useQuery<QOrderMapDeliveriesQuery, QOrderMapDeliveriesVariables>(\n    QOrderMapDeliveriesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderMapDeliveriesDocument = gql`\n  subscription SOrderMapDeliveries($branches: [ID!]!) {\n    update: updatedTransportationDeviceUser(companyBranches: $branches) {\n      actionType\n      device: transportationDeviceUser {\n        ...FOrderMapDevice\n        user {\n          ...FOrderMapDriver\n        }\n      }\n    }\n  }\n\n  ${FOrderMapDeviceFragmentDoc}\n  ${FOrderMapDriverFragmentDoc}\n`\n\nexport function useSOrderMapDeliveries(\n  variables?: SOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >(SOrderMapDeliveriesDocument, variables, baseOptions)\n}\n\nexport const MUserMenuLanguageDocument = gql`\n  mutation MUserMenuLanguage($userId: ID!, $lang: LanguageEnum!) {\n    updateUser(id: $userId, user: { language: $lang }) {\n      id\n      language {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMUserMenuLanguage(\n  baseOptions?: Hooks.MutationHookOptions<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >(MUserMenuLanguageDocument, baseOptions)\n}\n\nexport const QUserMenuLanguagesDocument = gql`\n  query QUserMenuLanguages {\n    languages {\n      code\n      enum\n      rawCode\n    }\n  }\n`\n\nexport function useQUserMenuLanguages(\n  variables?: QUserMenuLanguagesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QUserMenuLanguagesVariables>,\n) {\n  return Hooks.useQuery<QUserMenuLanguagesQuery, QUserMenuLanguagesVariables>(\n    QUserMenuLanguagesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\n// Generated in 2019-03-08T09:36:39+01:00\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GMenuStockList } from '../../../graph/types'\nimport { MenuStockItemFragment } from '../models/MenuStockModel.graphql'\n\nexport const MenuStockListQuery = gql`\n  query GMenuStockList($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const QueryMenuStockList = buildQuery<\n  GMenuStockList.Query,\n  GMenuStockList.Variables\n>(MenuStockListQuery)\n","import React, { MouseEvent } from 'react'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { applyAlphaToColor, Colors, Radiuses, Spacing } from '../styling'\n\nexport interface ITouchButtonProps\n  extends React.HTMLAttributes<HTMLButtonElement> {\n  iconName?: string\n  iconColor?: Colors\n  iconSize?: number\n  text?: string\n  color?: Colors\n  badge?: ReactNode\n  disabled?: boolean\n  textNextToIcon?: boolean\n  className?: string\n  width?: string\n  height?: string\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n}\n\nconst applyAlpha = (alphaValue: number) => (props: ITouchButtonProps) =>\n  applyAlphaToColor(props.color!, alphaValue)\n\nconst TouchButtonStyled = styled.button`\n  min-height: ${Spacing.ButtonHeight};\n  min-width: ${Spacing.ButtonHeight};\n  width: ${({ width = '100%' }: ITouchButtonProps) => width};\n  height: ${({ height = '100%' }: ITouchButtonProps) => height};\n  margin: 0;\n  padding: 0 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  /* fallback font size for incompatible browsers */\n  font-size: 1rem;\n  font-size: calc(0.6rem + 0.5vw);\n  transition-duration: 0.2s;\n\n  & .material-icons {\n    vertical-align: middle;\n  }\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nconst ButtonLabelStyled = styled.div`\n  color: white;\n  text-align: center;\n  width: 100%;\n  overflow: hidden;\n`\nconst ButtonLabelNextToIconStyled = styled(ButtonLabelStyled)`\n  width: calc(100% - 4rem);\n  margin: 0 0 0 1rem;\n  text-align: left;\n  display: inline-block;\n  vertical-align: top;\n  overflow: hidden;\n`\n\nexport const TouchButton = React.forwardRef<\n  HTMLButtonElement,\n  ITouchButtonProps\n>(\n  (\n    {\n      children,\n      iconName,\n      iconColor = Colors.white,\n      iconSize = 3,\n      color = Colors.greyMiddle,\n      textNextToIcon = false,\n      badge,\n      text,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    return (\n      <TouchButtonStyled color={color} {...props} ref={forwardedRef}>\n        {iconName && (\n          <Icon iconName={iconName} color={iconColor} fontSize={iconSize} />\n        )}\n\n        {text &&\n          textNextToIcon && (\n            <ButtonLabelNextToIconStyled>{text}</ButtonLabelNextToIconStyled>\n          )}\n\n        {text &&\n          !textNextToIcon && <ButtonLabelStyled>{text}</ButtonLabelStyled>}\n\n        {badge}\n        {children}\n      </TouchButtonStyled>\n    )\n  },\n)\n","import Color from 'color'\nimport styled, { css } from 'styled-components'\n\nimport { Colors, Radiuses } from '../styling'\n\ninterface IProps {\n  color?: string\n  textColor?: string\n  padding?: number\n  stretchToParent?: boolean\n}\n\nexport const Card = styled.div`\n  background: ${getBackgroundColor};\n  color: ${getTextColor};\n  border-radius: ${Radiuses.Card};\n  padding: ${getPadding}rem;\n  margin: 0 0 0.5rem 0;\n  position: relative;\n  ${applyStretchToParentStyle};\n`\n\nCard.displayName = 'Card'\n\nfunction getPadding({ padding = 0.5 }: IProps) {\n  return padding\n}\n\nfunction getBackgroundColor({ color }: IProps) {\n  return Color(color || Colors.greyLight)\n    .alpha(0.8)\n    .lighten(0.4)\n    .string()\n}\n\nfunction getTextColor(props: IProps) {\n  return props.textColor || Colors.black\n}\n\nfunction applyStretchToParentStyle({ stretchToParent = false }: IProps) {\n  if (!stretchToParent) {\n    return ''\n  }\n  return css`\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  `\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\n\nimport { IPageLayoutProps, PageLayout } from '../molecules/PageLayout'\n\ninterface IFullPageLayoutProps extends IPageLayoutProps {\n  width?: number\n}\n\nfunction getLayout(width: number): Layout[] {\n  return [{ i: 'full', x: 0, y: 1, w: width, h: 10 }]\n}\n\nexport const FullPageLayout: React.FC<IFullPageLayoutProps> = ({\n  children,\n  width = 16,\n  ...props\n}) => (\n  <PageLayout layouts={getLayout(width)} {...props}>\n    <div key=\"full\">{children}</div>\n  </PageLayout>\n)\n","import { SnackbarContextNext } from 'notistack/build/SnackbarContext'\nimport { useCallback, useContext } from 'react'\n\nenum EVariant {\n  default = 'default',\n  error = 'error',\n  success = 'success',\n  warning = 'warning',\n  info = 'info',\n}\n\ninterface IEnqueueOptions {\n  /** Type of the snackbar */\n  variant: EVariant\n  /** Event fired when user clicks on action button (if any) */\n  onClickAction(): void\n  /**\n   * You can pass material-ui Snackbar props here, and they will be applied to this individual snackbar.\n   * for example, this particular snackbar will be dismissed after 1sec.\n   */\n  autoHideDuration: number\n  action: ReactNode[]\n}\n\ninterface IEnqueueSnackbar {\n  (message: string, options?: Partial<IEnqueueOptions>)\n}\n\nconst successVariant = { variant: EVariant.success }\nconst errorVariant = { variant: EVariant.error }\nconst warningVariant = { variant: EVariant.warning }\nconst infoVariant = { variant: EVariant.info }\n\nexport function useSnackBar() {\n  const enqueueSnackbar: IEnqueueSnackbar = useContext(SnackbarContextNext)\n  const enqueueSuccess = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, successVariant),\n    [],\n  )\n  const enqueueError = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, errorVariant),\n    [],\n  )\n  const enqueueWarning = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, warningVariant),\n    [],\n  )\n  const enqueueInfo = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, infoVariant),\n    [],\n  )\n  return {\n    enqueueSnackbar,\n    enqueueSuccess,\n    enqueueError,\n    enqueueWarning,\n    enqueueInfo,\n  }\n}\n","import 'rc-slider/assets/index.css'\n\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors, Spacing } from '../styling'\nimport { WithRoot } from './WithRoot'\n\nconst SoundControlContainerStyled = styled.div`\n  position: relative;\n`\n\nconst SoundButtonStyled = styled(TouchButton)`\n  height: ${Spacing.ButtonHeight};\n  width: ${Spacing.ButtonHeight};\n  position: absolute;\n  right: 0;\n  top: 0;\n`\n\nexport class SoundControl extends React.Component {\n  state = { playPreview: false }\n  render() {\n    return (\n      <WithRoot\n        observe={true}\n        render={({ user }) => (\n          <SoundControlContainerStyled>\n            <SoundButtonStyled\n              color={user.soundEnabled ? Colors.green : Colors.red}\n              iconName={user.soundEnabled ? 'volume_up' : 'volume_off'}\n              iconSize={2}\n              onClick={() => {\n                user.controlSound(!user.soundEnabled)\n              }}\n            />\n          </SoundControlContainerStyled>\n        )}\n      />\n    )\n  }\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { useRoot } from '../atoms/RootProvider'\nimport { useQLogoutWidget } from '../graph/generated'\nimport { i18n } from '../i18n'\nimport { Colors } from '../styling'\n\nconst LogoutWidgetStyled = styled.div`\n  margin-left: 1rem;\n  color: ${Colors.greyLight};\n  &:hover {\n    color: ${Colors.white};\n  }\n`\nconst LoggedUserNameStyled = styled.span`\n  color: ${Colors.greyLight};\n  text-decoration: none;\n  font-weight: lighter;\n  position: relative;\n  top: 0.6rem;\n  display: inline-block;\n  max-width: 10rem;\n  text-align: right;\n`\n\nconst IconStyled = styled.span`\n  padding: 0.5rem 0.5rem 0 0.5rem;\n  display: inline-block;\n  vertical-align: top;\n`\n\nexport const LogoutWidget = observer(() => {\n  const { auth } = useRoot()\n  const { data, loading } = useQLogoutWidget({ id: auth.userId })\n\n  let displayName\n  if (loading) {\n    displayName = i18n.t`Not logged in`\n  } else {\n    displayName = `${data.user.firstName} ${data.user.lastName}`\n  }\n\n  return (\n    <LogoutWidgetStyled data-testid=\"logout-widget\">\n      <Link to=\"/logout\">\n        <LoggedUserNameStyled>{displayName}</LoggedUserNameStyled>\n        <IconStyled>\n          <Icon iconName=\"exit_to_app\" />\n        </IconStyled>\n      </Link>\n    </LogoutWidgetStyled>\n  )\n})\n","import Color from 'color'\nimport React, { MouseEvent } from 'react'\nimport { Link, Route } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { Colors, Radiuses, Spacing } from '../styling'\n\ninterface IHomeButtonProps {\n  iconColor?: Colors\n  color?: Colors\n  disabled?: boolean\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n  goBack?: boolean\n  backRoute?: string\n}\n\nconst applyAlpha = (alphaValue: number) => (props: IHomeButtonProps) =>\n  Color(props.color)\n    .alpha(alphaValue)\n    .string()\n\nconst HomeButtonStyled = styled.button`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 0 0 ${Radiuses.Button} 0 !important;\n  height: ${Spacing.ButtonHeight};\n  width: ${Spacing.ButtonHeight};\n  margin: 0;\n  padding: 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  font-size: 1rem;\n  transition-duration: 0.2s;\n\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nexport const HomeButton: React.FC<IHomeButtonProps> = ({\n  color = Colors.greyMiddle,\n  iconColor = Colors.white,\n  goBack = false,\n  backRoute,\n  ...props\n}) => {\n  if (goBack) {\n    return (\n      <Route>\n        {({ history }) => (\n          <HomeButtonStyled\n            color={color}\n            onClick={() => {\n              if (backRoute) {\n                history.push(backRoute)\n              } else {\n                history.goBack()\n              }\n            }}\n            {...props}\n          >\n            <Icon iconName=\"chevron_left\" color={iconColor} fontSize={2.2} />\n          </HomeButtonStyled>\n        )}\n      </Route>\n    )\n  }\n  return (\n    <Link to=\"/\">\n      <HomeButtonStyled color={color} {...props}>\n        <Icon iconName=\"home\" color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    </Link>\n  )\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\nimport styled from 'styled-components'\n\nimport { GridLayout } from '../atoms/GridLayout'\nimport { PageTitle } from '../atoms/PageTitle'\nimport { SoundControl } from '../atoms/SoundControl'\nimport { LogoutWidget } from '../organisms/LogoutWidget'\nimport { SecureRoute } from '../routes/SecureRoute'\nimport { HomeButton } from './HomeButton'\n\nexport interface IPageLayoutProps {\n  pageTitle?: string\n  layouts?: Layout[]\n  hideLogoutWidget?: boolean\n  showSoundControl?: boolean\n  useBackButton?: boolean\n  backRoute?: string\n  scrollPageTitle?: boolean\n}\n\nconst TopLeftButtonContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n`\n\nconst getPosition = (props: IPageLayoutProps) =>\n  props.scrollPageTitle ? 'absolute' : 'fixed'\n\nconst TopRightContainer = styled.div`\n  position: ${getPosition};\n  top: 0;\n  right: 0;\n  z-index: 100;\n`\n\nconst PageTitleContainer = styled.div`\n  position: ${getPosition};\n  top: 0rem;\n  left: 4rem;\n`\n\nconst SoundControlContainer = styled.div`\n  position: fixed;\n  top: 0rem;\n  right: 15rem;\n`\n\nexport const PageLayout: React.FC<IPageLayoutProps> = ({\n  pageTitle = '',\n  layouts = [],\n  hideLogoutWidget = false,\n  showSoundControl = false,\n  useBackButton = false,\n  scrollPageTitle = true,\n  backRoute,\n  children,\n}) => (\n  <>\n    {pageTitle && <PageTitle title={pageTitle} />}\n    {showSoundControl && (\n      <SoundControlContainer>\n        <SoundControl />\n      </SoundControlContainer>\n    )}\n\n    {!hideLogoutWidget && (\n      <TopRightContainer scrollPageTitle={scrollPageTitle}>\n        <SecureRoute path=\"/\" component={LogoutWidget} redirect={false} />\n      </TopRightContainer>\n    )}\n\n    <PageTitleContainer scrollPageTitle={scrollPageTitle}>\n      <PageTitle.Display />\n    </PageTitleContainer>\n\n    <GridLayout layouts={[...layouts]}>{children}</GridLayout>\n\n    <TopLeftButtonContainer>\n      <HomeButton goBack={useBackButton} backRoute={backRoute} />\n    </TopLeftButtonContainer>\n  </>\n)\n","import React from 'react'\n\ninterface ILoadingProps {\n  text?: string\n}\n\nexport const Loading: React.FC<ILoadingProps> = ({ text = '...' }) => (\n  <h1>{text}</h1>\n)\n","import React from 'react'\nimport RGL, { Layout, WidthProvider } from 'react-grid-layout'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\ninterface IGridLayoutProps {\n  layouts: Layout[]\n}\n\nexport const GridLayout: React.FC<IGridLayoutProps> = ({\n  children,\n  layouts,\n}) => (\n  <ReactGridLayout\n    className=\"layout\"\n    layout={layouts}\n    cols={16}\n    rowHeight={55}\n    margin={[8, 8]}\n    autoSize={false}\n    isDraggable={false}\n    isResizable={false}\n    compactType={null}\n    measureBeforeMount={true}\n  >\n    {children}\n  </ReactGridLayout>\n)\n","import { LocationDescriptor } from 'history'\nimport numeral from 'numeral'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  WareCategoryTypeEnum,\n  WarePriceTypeEnum,\n} from '../../../graph/generated'\nimport {\n  GMenuRecipeCreate,\n  GMenuRecipeDefaults,\n  GMenuRecipeDelete,\n  GMenuRecipeUpdate,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TRecipeFormValues } from '../menutypes'\nimport { MenuRecipeDefaults } from '../organisms/RecipeForm.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuRecipeCreateMutation,\n  MenuRecipeDeleteMutation,\n  MenuRecipeUpdateMutation,\n  MenuRecipeVisibilityMutation,\n} from './MenuRecipeModel.graphql'\n\nexport const MenuRecipeModel = MenuBaseModel.named('MenuRecipe')\n  .volatile(() => ({\n    categoryFilterId: null as MaybeID,\n  }))\n  .actions(self => ({\n    changeVisibility(recipeId: ID, visible: boolean) {\n      self.client.mutate({\n        mutation: MenuRecipeVisibilityMutation,\n        variables: { recipeId, visible },\n        optimisticResponse: {\n          updateRecipe: {\n            __typename: 'Recipe',\n            id: recipeId,\n            visible,\n          },\n        },\n      })\n    },\n    setCategoryFilter(categoryId: MaybeID) {\n      self.categoryFilterId = categoryId\n    },\n    createRecipe(\n      formValues: TRecipeFormValues,\n      recipeType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuRecipeCreate.Variables = {\n        recipe: {\n          companyBranch: self.branchId,\n          wareCategoryType: recipeType,\n          ...getRecipeVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeCreateMutation,\n          variables,\n        }),\n      )\n    },\n    updateRecipe(formValues: TRecipeFormValues) {\n      const variables: GMenuRecipeUpdate.Variables = {\n        recipeId: formValues.id,\n        recipe: {\n          ...getRecipeVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteRecipe(recipeId: ID) {\n      const variables: GMenuRecipeDelete.Variables = {\n        recipeId,\n      }\n      await self.client.mutate({\n        mutation: MenuRecipeDeleteMutation,\n        variables,\n      })\n    },\n    async queryDefaults() {\n      const { data } = await self.client.query<GMenuRecipeDefaults.Query>({\n        query: MenuRecipeDefaults,\n        variables: { branchId: self.branchId },\n      })\n      const {\n        companyBranch: {\n          vats,\n          currency: { code },\n        },\n      } = data\n      return {\n        vats: vats.reduce((result, { vatId, priceType }) => {\n          result[priceType.enum] = vatId\n          return result\n        }, {}),\n        currencyCode: code,\n      }\n    },\n  }))\n\nfunction getRecipeVariables(formValues: TRecipeFormValues) {\n  return {\n    code: formValues.code,\n    nameLabel: formValues.nameLabel,\n    internalNote: formValues.internalNote,\n    descriptionLabel: formValues.descriptionLabel,\n    enabled: formValues.visible,\n    prices: Object.keys(formValues.prices).map(priceType => ({\n      warePriceType: (priceType as unknown) as WarePriceTypeEnum,\n      price: { value: numeral(formValues.prices[priceType].value).value() },\n      vat: formValues.prices[priceType].vatId!,\n    })),\n    sideDishCategories: formValues.sideDishes.map(RM.prop('id')),\n    wareCategories: formValues.categories.map(RM.prop('id')),\n    associatedRecipes: formValues.associatedRecipes.map(\n      RM.pick(['associatedRecipe', 'warePriceType']),\n    ),\n    ingredients: formValues.ingredients.map(({ stockItem, quantity }) => {\n      return { stockItem, quantity: parseNumber(quantity) }\n    }),\n  }\n}\n\nfunction parseNumber(value: string | number) {\n  return typeof value === 'number'\n    ? value\n    : Number.parseFloat(value.replace(',', '.'))\n}\n\nexport const getRecipeRoute = (\n  recipeId: ID,\n  recipeType: WareCategoryTypeEnum,\n): LocationDescriptor => ({\n  pathname: recipeId,\n  state: { recipeType },\n})\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { FPriceFragmentDoc } from '../../../graph/generated'\nimport { GMenuRecipeFormAssoc } from '../../../graph/types'\nimport { MenuCategoryListFragment } from './CategoryList.graphql'\n\nexport const MenuRecipePriceFragment = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n  ${FPriceFragmentDoc}\n`\n\nexport const MenuAssocRecipeFragment = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const MenuRecipeFormQuery = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...GMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...GMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n  ${MenuRecipePriceFragment}\n  ${MenuCategoryListFragment}\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeFormAssocQuery = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeDefaults = gql`\n  query GMenuRecipeDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport const QueryMenuRecipeFormAssoc = buildQuery<\n  GMenuRecipeFormAssoc.Query,\n  GMenuRecipeFormAssoc.Variables\n>(MenuRecipeFormAssocQuery)\n","import gql from 'graphql-tag'\n\nexport const AllergenFragment = gql`\n  fragment GAllergen on Allergen {\n    id\n    code\n    enum\n    category\n  }\n`\n","import gql from 'graphql-tag'\n\nimport { SpecificBusinessHourFragment } from '../organisms/SpecificBusinessHours.graphql'\n\nexport const CreateSpecificBusinessHour = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`\n\nexport const DeleteSpecificBusinessHour = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n","import { isoDate } from '@speedlo/graphql'\nimport { types } from 'mobx-state-tree'\n\nimport {\n  GCreateSpecificBusinessHour,\n  GDeleteSpecificBusinessHour,\n} from '../../../graph/types'\nimport { formatTime } from '../../../helpers/formats'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  CreateSpecificBusinessHour,\n  DeleteSpecificBusinessHour,\n} from './BusinessHoursModel.graphql'\n\nexport enum ESpecificHourMode {\n  TIMESPAN = 'TIMESPAN',\n  FULLDAY = 'FULLDAY',\n}\n\nexport interface ISpecificFormData {\n  date: Date\n  openAt: Date\n  closeAt: Date\n  note: string\n}\n\nconst byIdPredicate = RM.complement(RM.propEq('id'))\n\nexport const BusinessHoursModel = BaseModel.named('BusinessHours')\n  .props({\n    specificMode: types.optional(\n      types.enumeration(['TIMESPAN', 'FULLDAY']),\n      ESpecificHourMode.TIMESPAN,\n    ),\n  })\n  .actions(self => ({\n    changeSpecificMode(mode: ESpecificHourMode) {\n      self.specificMode = mode\n    },\n    submitSpecificHour(values: ISpecificFormData) {\n      const variables: GCreateSpecificBusinessHour.Variables = {\n        input: {\n          companyBranch: self.root.settings.branchId,\n          specificDate: isoDate(values.date),\n          closed: self.specificMode === ESpecificHourMode.FULLDAY,\n          openAt: values.openAt && formatTime(values.openAt),\n          closeAt: values.closeAt && formatTime(values.closeAt),\n          closedNote: values.note,\n        },\n      }\n      self.client.mutate<GCreateSpecificBusinessHour.Mutation>({\n        mutation: CreateSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.concat(\n                  mutationResult.data.result,\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n    deleteSpecificHour(businessHourId: ID) {\n      const variables: GDeleteSpecificBusinessHour.Variables = {\n        id: businessHourId,\n      }\n      self.client.mutate({\n        mutation: DeleteSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.filter(\n                  byIdPredicate(mutationResult.data.result.id),\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n  }))\n","import gql from 'graphql-tag'\n\nimport { MenuCategoryFormFragment } from '../organisms/CategoryForm.graphql'\n\nexport const SortMenuCategoryMutation = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport const MenuCategoryCreateMutation = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport const MenuCategoryUpdateMutation = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...GMenuCategoryForm\n    }\n  }\n  ${MenuCategoryFormFragment}\n`\n\nexport const MenuCategoryDeleteMutation = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n","import { LocationDescriptor } from 'history'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport { WareCategoryTypeEnum } from '../../../graph/generated'\nimport {\n  GMenuCategoryCreate,\n  GMenuCategoryDelete,\n  GMenuCategoryUpdate,\n  GSortMenuCategory,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TCategoryFormValues } from '../organisms/CategoryFormLoader'\nimport { CategoryListQuery } from '../organisms/CategoryList.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuCategoryCreateMutation,\n  MenuCategoryDeleteMutation,\n  MenuCategoryUpdateMutation,\n  SortMenuCategoryMutation,\n} from './MenuCategoryModel.graphql'\n\nexport const MenuCategoryModel = MenuBaseModel.named('MenuCategory').actions(\n  self => ({\n    async sortCategory(categoryId: ID, offset: number) {\n      const variables: GSortMenuCategory.Variables = {\n        categoryId,\n        offset,\n      }\n      const result = await self.client.mutate({\n        mutation: SortMenuCategoryMutation,\n        variables,\n      })\n      return Boolean(result.data && result.data.success)\n    },\n    createCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryCreate.Variables = {\n        input: {\n          companyBranch: self.branchId,\n          wareCategoryType: categoryType,\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryCreateMutation,\n          variables,\n          refetchQueries: [\n            {\n              query: CategoryListQuery,\n              variables: {\n                branchId: self.branchId,\n                categoryType,\n              },\n            },\n          ],\n        }),\n      )\n    },\n    async updateCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryUpdate.Variables = {\n        categoryId: formValues.id,\n        input: {\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteCategory(categoryId: ID, categoryType: WareCategoryTypeEnum) {\n      const variables: GMenuCategoryDelete.Variables = {\n        categoryId,\n      }\n      await self.client.mutate({\n        mutation: MenuCategoryDeleteMutation,\n        variables,\n        refetchQueries: [\n          {\n            query: CategoryListQuery,\n            variables: {\n              branchId: self.branchId,\n              categoryType,\n            },\n          },\n        ],\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(\n  formValues: TCategoryFormValues,\n  categoryType: WareCategoryTypeEnum,\n) {\n  return Object.assign({\n    nameLabel: formValues.nameLabel,\n    internalNoteLabel: formValues.internalNoteLabel,\n    enabled: formValues.visible,\n    pictogram: formValues.pictogram,\n    recipes: formValues.recipes.map(RM.prop('id')),\n  })\n}\n\nexport const getCategoryRoute = (\n  recipeId: ID,\n  categoryType: WareCategoryTypeEnum,\n): LocationDescriptor => ({\n  pathname: recipeId,\n  state: { categoryType },\n})\n","import numeral from 'numeral'\n\nexport async function changeNumeralLocale(lang: string) {\n  if (lang === 'en') {\n    numeral.locale(lang)\n    return\n  }\n  await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"numeral-[index]\" */\n    `numeral/locales/${lang}`\n  )\n  numeral.locale(lang)\n}\n\nconst numberRx = /[\\d\\.,\\s]+/\n\nexport function validateNumber(input: string) {\n  return numberRx.test(input)\n}\n","import gql from 'graphql-tag'\n\nexport const CreateFinancialReport = gql`\n  mutation GCreateFinancialReport($companyBranchId: ID!) {\n    result: createFinancialReport(companyBranchId: $companyBranchId) {\n      id\n    }\n  }\n`\n","import moment from 'moment'\n\nexport async function changeMomentLocale(lang: string) {\n  if (lang === 'en') {\n    moment.locale(lang)\n    return\n  }\n  const locale = await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"moment-[index]\" */\n    `moment/locale/${lang}`\n  )\n  moment.updateLocale(lang, locale)\n}\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport * as detector from 'locales-detector'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport Pacman from './atoms/Pacman'\nimport { useRoot } from './atoms/RootProvider'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\nimport { changeMomentLocale } from './locale/moment'\nimport { changeNumeralLocale } from './locale/numeral'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC = ({ children }) => {\n  const { user } = useRoot()\n  return useObserver(\n    () =>\n      user.language ? (\n        <I18nProvider language={user.language} i18n={i18n}>\n          {React.Children.only(children)}\n        </I18nProvider>\n      ) : (\n        <Pacman />\n      ),\n  )\n}\n\nexport function detectLanguage() {\n  const resolver = new detector.LocaleResolver(\n    [new detector.NavigatorDetector()],\n    [new detector.LanguageOnlyTransformer()],\n  )\n  const languages = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nexport async function changeLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await Promise.all([\n    loadCatalog(lang),\n    changeNumeralLocale(lang),\n    changeMomentLocale(lang),\n  ])\n  i18n.activate(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n  persistenceKey: 'admin@local',\n  pageTitleSuffix: 'LOCAL',\n  sentryDSN: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'admin@dev',\n    pageTitleSuffix: 'DEV',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'admin@prod',\n    pageTitleSuffix: 'Speɘdlo',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GSpecificBusinessHours } from '../../../graph/types'\n\nexport const SpecificBusinessHourFragment = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const QuerySpecificBusinessHours = buildQuery<\n  GSpecificBusinessHours.Query,\n  GSpecificBusinessHours.Variables\n>(gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`)\n","import gql from 'graphql-tag'\n\nimport { MenuRecipeFragment } from '../models/MenuRecipeModel.graphql'\n\nexport const MenuCategoryFormFragment = gql`\n  fragment GMenuCategoryForm on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    pictogram\n    recipes {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuCategoryFormQuery = gql`\n  query GMenuCategoryForm($categoryId: ID!) {\n    wareCategory(id: $categoryId) {\n      ...GMenuCategoryForm\n    }\n  }\n  ${MenuCategoryFormFragment}\n`\n","import gql from 'graphql-tag'\n\nexport const WareUnitFragment = gql`\n  fragment GWareUnit on WareUnit {\n    id\n    enum\n    code\n  }\n`\n","import { addSeconds, differenceInMilliseconds } from 'date-fns'\nimport { Component } from 'react'\n\ninterface IRenderProps {\n  isActive: boolean\n  nextLoop(): void\n}\n\ninterface IProps {\n  intervalSec: number\n  enabled?: boolean\n  render(props: IRenderProps): ReactNode\n}\n\ninterface IState {\n  isActive: boolean\n  nextTime: Date\n}\n\nexport class IntervalRender extends Component<IProps, IState> {\n  state: IState = { isActive: false, nextTime: this.getNextTime() }\n  timer = 0\n  componentDidMount() {\n    this.executeTimer()\n  }\n  componentDidUpdate() {\n    this.executeTimer()\n  }\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer)\n    }\n  }\n  getNextTime() {\n    return addSeconds(new Date(), this.props.intervalSec)\n  }\n  executeTimer = () => {\n    if (this.timer) {\n      clearTimeout(this.timer)\n      this.timer = 0\n    }\n    if (this.props.enabled === false) {\n      return\n    }\n    const timeMs = differenceInMilliseconds(this.state.nextTime, new Date())\n    // @ts-ignore (setTimeout returning NodeJS.Timer) for some weird reason\n    this.timer = setTimeout(this.activate, timeMs)\n  }\n  activate = () => {\n    if (this.props.enabled !== false) {\n      this.setState({\n        isActive: true,\n        nextTime: this.getNextTime(),\n      })\n    }\n  }\n  deactivate = () => {\n    this.setState({ isActive: false })\n    this.executeTimer()\n  }\n  render() {\n    const { isActive } = this.state\n    return this.props.render({\n      isActive,\n      nextLoop: this.deactivate,\n    })\n  }\n}\n","import React from 'react'\nimport Sound from 'react-sound'\n\nimport { logMain } from '../helpers/logger'\nimport { IntervalRender } from './IntervalRender'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {\n  intervalSec: number\n  soundUrl: string\n  shouldPlay?: boolean\n  skipEnableChecks?: boolean\n}\n\nexport const SoundPlayInterval: React.FC<IProps> = ({\n  intervalSec,\n  soundUrl,\n  shouldPlay = true,\n  skipEnableChecks = false,\n}) => (\n  <WithRoot\n    observe={true}\n    render={({ config, user }) => {\n      if (!skipEnableChecks) {\n        if (!config.soundEnabled) {\n          logMain('sound is disabled')\n          return null\n        }\n        if (!user.soundEnabled) {\n          logMain('sound not enabled by user')\n          return null\n        }\n      }\n      logMain('sound play status: %s', shouldPlay)\n      return (\n        <IntervalRender\n          intervalSec={intervalSec}\n          enabled={shouldPlay}\n          render={({ isActive, nextLoop }) => (\n            <Sound\n              url={soundUrl}\n              playStatus={isActive ? 'PLAYING' : 'STOPPED'}\n              onFinishedPlaying={nextLoop}\n              loop={false}\n              autoLoad={true}\n              volume={user.soundVolume}\n            />\n          )}\n        />\n      )\n    }}\n  />\n)\n","module.exports = __webpack_public_path__ + \"static/media/connectionWarning.ac6fe03b.mp3\";","import { ISetDidChange, Lambda, observable } from 'mobx'\nimport { getParent, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { scroller } from 'react-scroll'\n\nimport { OrderStateCategoryEnum } from '../../../graph/generated'\nimport { GOrderList } from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TOrderModel } from './OrderModel'\n\nexport const OrderListModel = BaseModel.named('OrderList')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    collapsedCategories: types.optional(types.array(types.string), [\n      OrderStateCategoryEnum.Finished,\n    ]),\n  })\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length ? Array.from(self.branches) : []\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n    get isSingleBranchSelected() {\n      return self.branches.length === 1\n    },\n    get firstBranchId() {\n      if (self.branches.length === 1) {\n        return self.branches[0]\n      }\n      return null\n    },\n    get orderMap() {\n      return getParent<TOrderModel>(self).map\n    },\n  }))\n  .actions(self => ({\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    panMapToOrder(order: GOrderList.Orders) {\n      self.orderMap.panToOrder(order.id)\n    },\n  }))\n  .extend(self => {\n    const detailOpen = observable.set<ID>()\n\n    return {\n      views: {\n        isOrderDetailOpen(orderId: ID) {\n          return detailOpen.has(orderId)\n        },\n        isCategoryCollapsed(categoryCode: OrderStateCategoryEnum) {\n          return self.collapsedCategories.includes(categoryCode)\n        },\n      },\n      actions: {\n        toggleOrderDetail(orderId: ID) {\n          if (detailOpen.has(orderId)) {\n            detailOpen.delete(orderId)\n          } else {\n            detailOpen.add(orderId)\n          }\n        },\n        toggleCategoryCollapse(category: OrderStateCategoryEnum) {\n          const index = self.collapsedCategories.indexOf(category)\n          if (index >= 0) {\n            self.collapsedCategories.splice(index, 1)\n          } else {\n            self.collapsedCategories.push(category)\n          }\n        },\n        focusOrderDetail(orderId: ID) {\n          if (!detailOpen.has(orderId)) {\n            detailOpen.add(orderId)\n          }\n          setImmediate(() => {\n            scroller.scrollTo(`order-${orderId}`, {\n              smooth: 'easeInOutQuart',\n              containerId: 'order-list',\n              absolute: true,\n              offset: -140,\n            })\n          })\n        },\n        observerOrderDetail: detailOpen.observe.bind(detailOpen) as (\n          listener: (changes: ISetDidChange<ID>) => void,\n        ) => Lambda,\n      },\n    }\n  })\n\nexport interface TOrderListModel extends Instance<typeof OrderListModel> {}\nexport interface TOrderListModelProps\n  extends SnapshotIn<typeof OrderListModel> {}\n","import { createContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const RootContext = createContext<TRootModel | undefined>(undefined)\n","import ActionCable from 'actioncable'\nimport { ApolloLink, Observable, Operation } from 'apollo-link'\nimport { getOperationDefinitionOrDie } from 'apollo-utilities'\nimport { print } from 'graphql/language'\nimport { computed } from 'mobx'\nimport { VError } from 'verror'\n\nimport { appConfig } from '../config'\nimport { TAuthModel } from '../models/AuthModel'\n\nconst getChannelId = () =>\n  Math.round(Date.now() + Math.random() * 100000).toString(16)\n\nexport default function createSubscriptionLink(auth: TAuthModel) {\n  const cableUrl = computed(\n    () => `${appConfig.endpoint}/cable?token=${auth.token}`,\n  )\n\n  let cable\n  const channelName = 'GraphqlChannel'\n  const actionName = 'execute'\n  const connectionParams = {}\n\n  return new ApolloLink(operation => {\n    if (!auth.isAuthenticated) {\n      throw new VError(\n        `Executing operation ${operation.operationName} before authenticated`,\n        { operation },\n      )\n    }\n    if (!cable) {\n      cable = ActionCable.createConsumer(cableUrl.get())\n    }\n    return new Observable(observer => {\n      const channelId = getChannelId()\n\n      const subscription = cable.subscriptions.create(\n        Object.assign(\n          {},\n          {\n            channel: channelName,\n            channelId,\n          },\n          connectionParams,\n        ),\n        {\n          connected() {\n            this.perform(actionName, {\n              query: operation.query ? print(operation.query) : null,\n              variables: operation.variables,\n              // @ts-ignore\n              operationId: operation.operationId,\n              operationName: operation.operationName,\n            })\n          },\n          received(payload: { result: { data: object }; more: boolean }) {\n            if (payload.result.data) {\n              observer.next(payload.result)\n            }\n\n            if (!payload.more) {\n              this.unsubscribe()\n              observer.complete()\n            }\n          },\n        },\n      )\n\n      return subscription\n    })\n  })\n}\n\nexport function isSubscriptionOperation({ query }: Operation) {\n  const { operation } = getOperationDefinitionOrDie(query)\n  return operation === 'subscription'\n}\n","import { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { BatchHttpLink } from 'apollo-link-batch-http'\nimport QueueLink from 'apollo-link-queue'\nimport { RetryLink } from 'apollo-link-retry'\nimport { autorun } from 'mobx'\n\nimport { appConfig } from '../config'\nimport { logGraph } from '../helpers/logger'\nimport { isNetworkOnline } from '../helpers/offline'\nimport { TAuthModel } from '../models/AuthModel'\nimport createAuthLink from './AuthLink'\nimport { createErrorLink } from './errorHandler'\nimport createSubscriptionLink, {\n  isSubscriptionOperation,\n} from './SubscriptionLink'\n\nexport function createApolloClient(auth: TAuthModel) {\n  const cache = new InMemoryCache({\n    dataIdFromObject: (o: { __typename?: string; id?: string }) => {\n      // tslint:disable-next-line triple-equals\n      if (o.__typename != null && o.id != null) {\n        return `${o.__typename}-${o.id}`\n      }\n      return null\n    },\n  })\n\n  const authLink = createAuthLink(auth)\n  const retryLink = createRetryLink()\n  const offlineLink = createOfflineLink()\n  const errorLink = createErrorLink()\n  const httpLink = createHttpLink()\n  const subscriptionLink = createSubscriptionLink(auth)\n\n  const client = new ApolloClient({\n    link: ApolloLink.from([authLink, retryLink, offlineLink, errorLink]).split(\n      isSubscriptionOperation,\n      subscriptionLink,\n      httpLink,\n    ),\n    cache,\n  })\n\n  return client\n}\n\nfunction createHttpLink() {\n  return new BatchHttpLink({\n    uri: `${appConfig.endpoint}/graphql`,\n    credentials: 'same-origin',\n  })\n}\n\nfunction createRetryLink() {\n  return new RetryLink({\n    delay: {\n      initial: 300,\n      max: Infinity,\n      jitter: true,\n    },\n    attempts: {\n      max: 5,\n      retryIf: error => !!error,\n    },\n  })\n}\n\nfunction createOfflineLink() {\n  const offlineLink = new QueueLink()\n  autorun(() => {\n    if (isNetworkOnline()) {\n      logGraph('client is online')\n      offlineLink.open()\n    } else {\n      logGraph('client is offline')\n      offlineLink.close()\n    }\n  })\n  return offlineLink\n}\n","import { ApolloLink, FetchResult, Observable } from 'apollo-link'\nimport { computed } from 'mobx'\nimport VError from 'verror'\n\nimport { TAuthModel } from '../models/AuthModel'\n\nexport default function createAuthLink(auth: TAuthModel) {\n  const headers = computed(() => ({\n    Authorization: `Bearer ${auth.communicationToken}`,\n  }))\n\n  return new ApolloLink((operation, forward) => {\n    if (!auth.canCommunicate) {\n      throw new VError(\n        `Executing operation ${operation.operationName} before authenticated`,\n        { operation },\n      )\n    }\n\n    const context = operation.getContext()\n    operation.setContext({ ...context, headers: headers.get() })\n\n    return new Observable<FetchResult>(observer => {\n      const sub = forward!(operation).subscribe({\n        error: networkError => {\n          if (\n            networkError.result &&\n            networkError.result.code === 'INVALID_TOKEN'\n          ) {\n            auth.invalidate()\n            return\n          }\n          observer.error(networkError)\n        },\n        next: observer.next.bind(observer),\n        complete: observer.complete.bind(observer),\n      })\n      return () => sub.unsubscribe()\n    })\n  })\n}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersistence } from './logger'\n\nconst persistenceKey = appConfig.persistenceKey\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = (snapshot: object) =>\n    localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersistence('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersistence('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersistence('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { getParent, Instance } from 'mobx-state-tree'\n\nimport { IRootEnvironment } from '../../../atoms/RootProvider'\nimport { appConfig } from '../../../config'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TLoginProviderModel } from './LoginProviderModel'\n\nconst getLoginUrl = ({ username, password }: Dictionary<string>) =>\n  `${appConfig.endpoint}/users/token?username=${username}&password=${password}`\n\nexport const PasswordLoginModel = BaseModel.named('PasswordLogin')\n  .volatile(self => ({\n    errorCode: '',\n    errorMessage: '',\n  }))\n  .views(self => ({\n    get hasFailed() {\n      return Boolean(self.errorCode)\n    },\n  }))\n  .actions(self => ({\n    setFailure(code: string, message: string) {\n      self.errorCode = code\n      self.errorMessage = message\n    },\n    setSuccess(token: string, userId: string) {\n      const provider = getParent<TLoginProviderModel>(self)\n      provider.authenticate(token, userId)\n    },\n  }))\n  .actions(self => ({\n    async requestToken(username: string, password: string) {\n      const url = getLoginUrl({ username, password })\n      const fetch: TFetch = window.fetch\n      const response = await fetch(url, {\n        headers: {\n          Accept: 'application/json',\n        },\n      })\n      const payload = await response.json()\n      self.log('received payload %j', payload)\n\n      if (response.status !== 200) {\n        self.setFailure(payload.code, payload.error)\n        self.log('token request failed for username %s', username)\n      } else {\n        self.setSuccess(payload.token, String(payload.userId))\n        self.log(\n          'token request success for username %s [%s]',\n          username,\n          payload.userId,\n        )\n      }\n    },\n  }))\n\nexport const createPasswordLoginModelMock = (\n  overrides = {},\n  env: IRootEnvironment,\n) => PasswordLoginModel.create({ ...overrides }, env)\n\nexport interface TPasswordLoginModel\n  extends Instance<typeof PasswordLoginModel> {}\n","import { getParent, Instance, types } from 'mobx-state-tree'\n\nimport { TAuthModel } from '../../../models/AuthModel'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { PasswordLoginModel } from './PasswordLoginModel'\n\nexport const LoginProviderModel = BaseModel.named('LoginProvider')\n  .props({\n    passwordLogin: types.optional(PasswordLoginModel, {}),\n  })\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      const auth = getParent<TAuthModel>(self)\n      auth.authenticate(token, userId)\n    },\n  }))\n\nexport interface TLoginProviderModel\n  extends Instance<typeof LoginProviderModel> {}\n","import gql from 'graphql-tag'\n\nexport const PasswordChangeMutation = gql`\n  mutation MPasswordChange($password: String!) {\n    updateUserPassword(newPassword: $password) {\n      id\n      token\n    }\n  }\n`\n","import { Base64 } from 'js-base64'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { MPasswordChange } from '../graph/types'\nimport { identifyUser } from '../helpers/sentry'\nimport { LoginProviderModel } from '../segments/login/models/LoginProviderModel'\nimport { PasswordChangeMutation } from './AuthModel.graphql'\nimport { BaseModel } from './BaseModel'\n\ninterface IVolatileProps {\n  tokenForPasswordChange?: string\n}\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    userId: types.optional(types.string, ''),\n    token: types.optional(types.string, ''),\n    provider: types.optional(LoginProviderModel, {}),\n  })\n  .volatile<IVolatileProps>(() => ({}))\n  .views(self => ({\n    get isAuthenticated() {\n      return self.token.length > 0\n    },\n    get isAuthenticatedUser() {\n      return this.isAuthenticated && self.userId.length > 0\n    },\n    get communicationToken() {\n      return self.tokenForPasswordChange || self.token\n    },\n    get canCommunicate() {\n      return this.isAuthenticated || self.tokenForPasswordChange !== undefined\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      self.tokenForPasswordChange = undefined\n      self.log('authenticated with id %s', userId)\n      identifyUser(userId)\n    },\n    invalidate() {\n      self.token = ''\n      self.userId = ''\n      self.tokenForPasswordChange = undefined\n      self.client.cache.reset()\n      self.log('invalidated authentication')\n      identifyUser(null)\n    },\n  }))\n  .actions(self => ({\n    setForPasswordChange(temporaryB64EncodedToken: string) {\n      self.invalidate()\n      self.log('encoded token %s', temporaryB64EncodedToken)\n      self.tokenForPasswordChange = Base64.decode(temporaryB64EncodedToken)\n      self.log('using temp token %s', self.tokenForPasswordChange)\n    },\n    async changePassword(password: string) {\n      const variables: MPasswordChange.Variables = {\n        password,\n      }\n      const result = await self.client.mutate({\n        mutation: PasswordChangeMutation,\n        variables,\n        fetchPolicy: 'no-cache',\n      })\n\n      const {\n        updateUserPassword: { id, token },\n      } = result.data as MPasswordChange.Mutation\n\n      if (token && id) {\n        self.invalidate()\n        self.authenticate(token, id)\n      }\n    },\n  }))\n  .preProcessSnapshot(snapshot => {\n    if (snapshot.userId) {\n      identifyUser(snapshot.userId)\n    }\n    return snapshot\n  })\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { BaseModel } from '../models/BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  soundEnabled: true,\n  orderListPollIntervalSec: 60,\n  orderListSoundIntervalSec: 60,\n})\n","import gql from 'graphql-tag'\n\nimport { FCompanyBranchFragmentDoc } from '../graph/generated'\n\nexport const UserModelBootstrapQuery = gql`\n  query GUserModelBootstrap($userId: ID!) {\n    user(id: $userId) {\n      id\n      language {\n        rawCode\n      }\n      branches: accessibleBranches {\n        ...FCompanyBranch\n      }\n    }\n    userPermissions: permissions {\n      canCancelOrders\n      canCreateOrder\n    }\n    userAccess: __schema {\n      queries: queryType {\n        fields {\n          name\n        }\n      }\n      mutations: mutationType {\n        fields {\n          name\n        }\n      }\n      subscriptions: subscriptionType {\n        fields {\n          name\n        }\n      }\n    }\n  }\n\n  ${FCompanyBranchFragmentDoc}\n`\n","import _ from 'lodash'\nimport { reaction, when } from 'mobx'\nimport { flow, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\n\nimport { FCompanyBranchBrand, FCompanyBranchFragment } from '../graph/generated'\nimport { GUserModelBootstrap } from '../graph/types'\nimport { logBootstrap, logLang } from '../helpers/logger'\nimport { RM } from '../helpers/ramda'\nimport { changeLanguage, detectLanguage } from '../i18n'\nimport { BaseModel } from '../models/BaseModel'\nimport { UserModelBootstrapQuery } from './UserModel.graphql'\n\ninterface IVolatileProps {\n  isLoaded: boolean\n  branches: ReadonlyArray<FCompanyBranchFragment>\n  brands: ReadonlyArray<FCompanyBranchBrand>\n  soundEnabled: boolean\n  access: Maybe<IUserAccess>\n  permissions: GUserModelBootstrap.UserPermissions\n}\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    language: types.maybe(types.string),\n    soundVolume: types.optional(types.number, 25),\n    soundIgnore: false,\n  })\n  .volatile<IVolatileProps>(() => ({\n    isLoaded: false,\n    branches: [],\n    brands: [],\n    soundEnabled: false,\n    access: null,\n    permissions: {\n      canCancelOrders: false,\n      canCreateOrder: false,\n    },\n  }))\n  .views(self => ({\n    get branchesId() {\n      return self.branches.map(R.prop('id'))\n    },\n    get defaultBranch() {\n      if (self.branches.length === 0) {\n        throw new Error('No user branches available to get defaultBranchId')\n      }\n      return self.branches[0]\n    },\n    filterBranches(predicate: (value: FCompanyBranchFragment) => boolean) {\n      return self.branches.filter(predicate)\n    },\n    canQuery(queryName: string) {\n      return (\n        self.access !== null && self.access.queries.has(queryName.toLowerCase())\n      )\n    },\n    canMutate(mutationName: string) {\n      return (\n        self.access !== null &&\n        self.access.mutations.has(mutationName.toLowerCase())\n      )\n    },\n    get isReady() {\n      return self.isLoaded || !self.root.auth.isAuthenticated\n    },\n  }))\n  .actions(self => ({\n    applyUserData(user: GUserModelBootstrap.User) {\n      self.branches = user.branches\n      self.brands = RM.uniqBy(\n        RM.prop('id'),\n        user.branches.map(RM.prop('brand')),\n      )\n    },\n    applyUserPermissions(permissions: GUserModelBootstrap.UserPermissions) {\n      self.permissions = permissions\n    },\n    applyUserAccess(access: IAccessRaw) {\n      self.access = _.mapValues(\n        access,\n        ({ fields }) =>\n          new Set(\n            fields.map(\n              RM.compose(\n                RM.toLower,\n                RM.prop('name'),\n              ),\n            ),\n          ),\n      )\n    },\n    setLanguage: flow(function*(language: string) {\n      logLang('changing to language %s from user profile', language)\n      yield changeLanguage(language)\n      self.language = language\n    }),\n    finishBootstrap() {\n      self.isLoaded = true\n    },\n    controlSound(enabled: boolean = true, ignore: boolean = false) {\n      self.soundEnabled = enabled\n      self.soundIgnore = ignore\n    },\n    setSoundVolume(volume: number) {\n      self.soundVolume = volume\n    },\n  }))\n  .actions(self => {\n    const queryUser = async (userId: ID) => {\n      logBootstrap('query user')\n      const variables: GUserModelBootstrap.Variables = {\n        userId,\n      }\n      const { data } = await self.client.query<GUserModelBootstrap.Query>({\n        query: UserModelBootstrapQuery,\n        variables,\n      })\n      self.setLanguage(data.user.language.rawCode)\n      self.applyUserData(data.user)\n      // @ts-ignore https://github.com/dotansimha/graphql-code-generator/issues/643\n      self.applyUserAccess(_.omit(data.userAccess, '__typename'))\n      self.applyUserPermissions(data.userPermissions)\n      self.finishBootstrap()\n    }\n\n    const initUser = () => {\n      reaction(\n        () => self.root.auth.userId,\n        userId => {\n          if (userId) {\n            if (!self.language) {\n              self.setLanguage(detectLanguage())\n            }\n            queryUser(userId)\n          } else {\n            self.setLanguage(detectLanguage())\n            self.finishBootstrap()\n          }\n        },\n        { fireImmediately: true },\n      )\n      return new Promise(resolve => {\n        when(() => self.isLoaded, resolve)\n      })\n    }\n\n    return { initUser }\n  })\n\ninterface IUserAccess {\n  queries: Set<string>\n  mutations: Set<string>\n  subscriptions: Set<string>\n}\n\ninterface IAccessType {\n  fields: ReadonlyArray<{ name: string }>\n}\n\ninterface IAccessRaw {\n  queries: IAccessType\n  mutations: IAccessType\n  subscriptions: IAccessType\n}\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import faker from 'faker'\n\nfaker.locale = 'cz'\n\nexport { faker }\n","import { isoDate } from '@speedlo/graphql'\nimport _ from 'lodash'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport {\n  DeliveryTypeEnum,\n  MCreateOrderAcceptVariables,\n  MCreateOrderNewVariables,\n} from '../../../graph/generated'\nimport { GOrderVam, SOrderCall } from '../../../graph/types'\nimport { faker } from '../../../helpers/faker'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { IAddressWithGps } from '../../../molecules/AddressSuggest'\n\nexport interface IOrderSidedishControlResult {\n  sidedishes: ReadonlyArray<ID>\n  isConfirmed: boolean\n}\n\nexport interface ICall extends Omit<SOrderCall.Call, 'isRinging' | 'eventId'> {\n  eventId?: ID\n}\n\nexport interface IOrderFormValues {\n  deliveryType: DeliveryTypeEnum.Messenger | DeliveryTypeEnum.Pickup\n  deliverAt?: Date\n  phone?: string\n  phonePrefix?: string\n  firstName?: string\n  lastName?: string\n  email?: string\n  note?: string\n}\n\ninterface IVolatileProps {\n  orderId: MaybeID\n  call?: ICall\n  deliveryAddress?: IAddressWithGps\n  deliveryMinutes?: number\n  minimalPrice?: string\n  notDeliveryLocation: boolean\n  values: IOrderFormValues\n  fakeValues?: Partial<IOrderFormValues>\n  fakeAddress?: IAddressWithGps\n  vamCustomer: Maybe<GOrderVam.VamCustomer>\n  sidedishMode: 'none' | 'recipe' | 'item'\n  sidedishRootId?: ID\n  sidedishSelection?: ReadonlyArray<ID>\n}\n\nexport const CreateOrderModel = BaseModel.named('CreateOrder')\n  .props({\n    branchId: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(getDefaultProps)\n  .views(self => ({\n    get currentBranch() {\n      return (\n        self.root.user.branches.find(RM.propEq('id', self.branchId)) ||\n        self.root.user.defaultBranch\n      )\n    },\n  }))\n  .views(self => ({\n    get deliveryType() {\n      return self.values.deliveryType\n    },\n    get isDelivery() {\n      return self.values.deliveryType === DeliveryTypeEnum.Messenger\n    },\n    get deliverAt() {\n      return (self.values.deliverAt && new Date(self.values.deliverAt)) || null\n    },\n    get hasAddress() {\n      return Boolean(self.deliveryAddress || self.fakeAddress)\n    },\n    get gps() {\n      if (this.isDelivery && this.hasAddress) {\n        if (self.deliveryAddress && self.deliveryAddress.gps) {\n          return clearGps(self.deliveryAddress.gps)\n        } else if (self.fakeAddress && self.fakeAddress.gps) {\n          return clearGps(self.fakeAddress.gps)\n        }\n      }\n      return { ...clearGps(self.currentBranch.gps) }\n    },\n    get phone() {\n      if (self.values.phone !== undefined) {\n        return self.values.phone\n      }\n      return self.call ? self.call.phone : ''\n    },\n    get phonePrefix() {\n      if (self.values.phonePrefix !== undefined) {\n        return self.values.phonePrefix\n      }\n      if (self.call) {\n        return self.call.prefix\n      }\n      if (self.currentBranch.address.country) {\n        return self.currentBranch.address.country.phonePrefix\n      }\n      return '+'\n    },\n    get formValues() {\n      if (self.vamCustomer !== null && self.vamCustomer.isFound) {\n        const { firstName, lastName, email, lastOrder } = self.vamCustomer\n        return _.defaults(\n          { ...self.values },\n          {\n            phone: this.phone,\n            phonePrefix: this.phonePrefix,\n            firstName,\n            lastName,\n            email,\n            note: (lastOrder && lastOrder.note) || '',\n          },\n        )\n      }\n      if (self.fakeValues) {\n        return _.defaults({ ...self.values }, { ...self.fakeValues })\n      }\n      return _.defaults(\n        { ...self.values },\n        { phone: this.phone, phonePrefix: this.phonePrefix },\n      )\n    },\n    get hasOrder() {\n      return self.orderId !== null\n    },\n    get cartRefreshKey() {\n      return `${self.orderId || 0}-${this.deliveryType}-${this.gps.longitude}-${\n        this.gps.latitude\n      }`\n    },\n    get acceptOrderVariables(): MCreateOrderAcceptVariables {\n      return {\n        orderId: self.orderId!,\n        deliverAt: this.deliverAt && isoDate(this.deliverAt),\n        customer: {\n          firstName: this.formValues.firstName,\n          lastName: this.formValues.lastName,\n          emails: this.formValues.email\n            ? [{ email: this.formValues.email }]\n            : null,\n          phones: this.formValues.phone\n            ? [\n                {\n                  phone: `${this.formValues.phonePrefix}${\n                    this.formValues.phone\n                  }`,\n                },\n              ]\n            : null,\n        },\n        note: this.formValues.note,\n      }\n    },\n  }))\n  .views(self => ({\n    get orderCreateVariables(): MCreateOrderNewVariables {\n      return {\n        branchId: self.currentBranch.id,\n        deliveryType: self.values.deliveryType,\n        deliverAt: self.deliverAt && isoDate(self.deliverAt),\n        callEventId: self.call && self.call.eventId,\n        gps: self.gps,\n      }\n    },\n  }))\n  .actions(self => ({\n    resetOrder() {\n      self.orderId = null\n    },\n    resetModel() {\n      Object.assign(self, getDefaultProps())\n    },\n    setOrder(orderId: ID) {\n      self.orderId = orderId\n      return orderId\n    },\n  }))\n  .actions(self => ({\n    useLocation(address: IAddressWithGps) {\n      self.deliveryAddress = address\n    },\n    clearLocation() {\n      self.deliveryAddress = undefined\n    },\n    setMinimalPrice(price: string | undefined) {\n      self.minimalPrice = price\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    userIsCalling(call: ICall | undefined) {\n      self.call = call\n    },\n    setDeliveryMinutes(minutes: number | undefined) {\n      self.deliveryMinutes = minutes\n    },\n    updateFormValues(\n      values: IOrderFormValues,\n      touched: { [K in keyof IOrderFormValues]?: boolean },\n    ) {\n      self.values = {\n        deliveryType: values.deliveryType,\n        ..._.pick(values, Object.keys(touched)),\n        deliverAt: values.deliverAt,\n      }\n      self.log('updated values: %j', self.values)\n    },\n    updateFromVam(vamCustomer: Maybe<GOrderVam.VamCustomer>) {\n      self.vamCustomer = vamCustomer\n      self.log('vam customer: %j', vamCustomer)\n    },\n    updateFormWithFakeValues() {\n      self.fakeValues = {\n        firstName: faker.name.firstName(),\n        lastName: faker.name.lastName(),\n        email: faker.internet.email(),\n        phone: faker.phone.phoneNumberFormat(3).replace(/\\s/g, ''),\n        phonePrefix: '+420',\n        note: faker.lorem.sentence().slice(0, 50 - 1),\n      }\n      self.fakeAddress = {\n        state: '',\n        city: 'Hradec Králové',\n        street: 'Opletalova',\n        houseNumber: '334/2',\n        gps: {\n          latitude: 50.2129839,\n          longitude: 15.8342836,\n        },\n      }\n    },\n  }))\n  .actions(self => {\n    let resolver: Maybe<(result: IOrderSidedishControlResult) => void> = null\n    const makeResolver = () => {\n      return new Promise<IOrderSidedishControlResult>(resolve => {\n        resolver = resolve\n      })\n    }\n    return {\n      selectSidedishesForRecipe(recipeId: ID) {\n        self.sidedishMode = 'recipe'\n        self.sidedishRootId = recipeId\n        return makeResolver()\n      },\n      selectSidedishesForItem(itemId: ID) {\n        self.sidedishMode = 'item'\n        self.sidedishRootId = itemId\n        return makeResolver()\n      },\n      sidedishSelectionConfirmed(sidedishes: ReadonlyArray<ID>) {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: true,\n            sidedishes,\n          })\n          resolver = null\n        }\n      },\n      sidedishSelectionCancel() {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: false,\n            sidedishes: [],\n          })\n          resolver = null\n        }\n      },\n    }\n  })\n\nfunction getDefaultProps(): IVolatileProps {\n  return {\n    orderId: null,\n    call: undefined,\n    values: {\n      deliveryType: DeliveryTypeEnum.Messenger,\n      deliverAt: undefined,\n      phone: undefined,\n      email: undefined,\n      firstName: undefined,\n      lastName: undefined,\n      note: undefined,\n    },\n    fakeAddress: undefined,\n    fakeValues: undefined,\n    deliveryAddress: undefined,\n    deliveryMinutes: undefined,\n    minimalPrice: undefined,\n    vamCustomer: null,\n    notDeliveryLocation: false,\n    sidedishMode: 'none',\n    sidedishRootId: undefined,\n    sidedishSelection: undefined,\n  }\n}\n\nfunction clearGps({ latitude, longitude }: GeoPoint) {\n  return { latitude, longitude }\n}\n\nexport interface TCreateOrderModel extends Instance<typeof CreateOrderModel> {}\nexport interface TCreateOrderModelProps\n  extends SnapshotIn<typeof CreateOrderModel> {}\n","import { Instance, types } from 'mobx-state-tree'\nimport GoogleMap from 'react-google-maps/lib/components/GoogleMap'\n\nimport { gpsToLatLng } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<GoogleMap>\n}\n\nconst GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 12),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLng(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<GoogleMap>) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\n","import gql from 'graphql-tag'\n\nimport { FGeoPointFragmentDoc } from '../../../graph/generated'\n\nexport const OrderBranchLocationQuery = gql`\n  query GOrderBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n\nexport const OrderLocationQuery = gql`\n  query GOrderLocation($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n","import { GOrderBranchLocation, GOrderLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport {\n  OrderBranchLocationQuery,\n  OrderLocationQuery,\n} from './OrderMapModel.graphql'\n\ninterface IVolatileProps {\n  activeDriverId: MaybeID\n}\n\nexport const OrderMapModel = MapModel.named('OrderMap')\n  .volatile<IVolatileProps>(() => ({\n    activeDriverId: null,\n  }))\n  .actions(self => ({\n    async panToOrder(orderId: ID) {\n      if (!self.mapRef) {\n        return\n      }\n      const { data } = await self.client.query<GOrderLocation.Query>({\n        query: OrderLocationQuery,\n        variables: { orderId },\n      })\n      if (data && data.order.gps) {\n        self.mapRef.panTo(gpsToLatLng(data.order.gps))\n      }\n    },\n    async panToBranch(branchId: ID) {\n      const { data } = await self.client.query<GOrderBranchLocation.Query>({\n        query: OrderBranchLocationQuery,\n        variables: { branchId },\n      })\n      if (!self.mapRef) {\n        return\n      }\n      if (data) {\n        self.mapRef.panTo(gpsToLatLng(data.companyBranch.gps))\n      }\n    },\n    activateDriver(driverId: ID, position: GeoPoint) {\n      self.activeDriverId = driverId\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(position))\n      }\n    },\n  }))\n","import { Instance } from 'mobx-state-tree'\n\nimport { OrderStateEnum } from '../../../graph/generated'\nimport {\n  GRemoveOrderDriver,\n  GSelectOrderDriver,\n  GSendOrderNotification,\n  GUpdateOrderState,\n} from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  RemoveOrderDriverMutation,\n  SelectOrderDriverMutation,\n  SendOrderNotificationMutation,\n  UpdateOrderStateMutation,\n} from './OrderStateModel.graphql'\n\nexport const OrderStateModel = BaseModel.named('OrderState')\n  .views(self => ({}))\n  .actions(self => ({\n    async updateOrderState(orderId: ID, state: OrderStateEnum) {\n      const variables: GUpdateOrderState.Variables = {\n        orderId,\n        state,\n      }\n      await self.client.mutate({\n        mutation: UpdateOrderStateMutation,\n        variables,\n      })\n    },\n    async cancelOrder(orderId: ID) {\n      alert('Cancel order')\n      // TODO:\n    },\n  }))\n  .actions(self => ({\n    deliverOrder(orderId: ID) {\n      return self.updateOrderState(orderId, OrderStateEnum.OnWay)\n    },\n    async sendTimeNotification(orderId: ID, minutes: number) {\n      const variables: GSendOrderNotification.Variables = {\n        orderId,\n        minutes,\n      }\n      await self.client.mutate({\n        mutation: SendOrderNotificationMutation,\n        variables,\n      })\n    },\n    async selectDriver(orderId: ID, driverId: ID) {\n      const variables: GSelectOrderDriver.Variables = {\n        orderId,\n        driverId,\n      }\n      await self.client.mutate({\n        mutation: SelectOrderDriverMutation,\n        variables,\n      })\n    },\n    async removeDriver(orderDriverId: ID) {\n      const variables: GRemoveOrderDriver.Variables = {\n        orderDriverId,\n      }\n      await self.client.mutate({\n        mutation: RemoveOrderDriverMutation,\n        variables,\n      })\n    },\n  }))\n\nexport interface TOrderStateModel extends Instance<typeof OrderStateModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { OrderListModel } from './OrderListModel'\nimport { OrderMapModel } from './OrderMapModel'\nimport { OrderStateModel } from './OrderStateModel'\n\nexport const OrderModel = types.model('Order', {\n  list: types.optional(OrderListModel, {}),\n  map: types.optional(OrderMapModel, {}),\n  state: types.optional(OrderStateModel, {}),\n})\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\n","import { endOfDay, startOfDay } from 'date-fns'\nimport { types } from 'mobx-state-tree'\n\nimport { GCreateFinancialReport } from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { CreateFinancialReport } from '../organisms/ClosureStatisticsControl.graphql'\n\nexport interface IStatisticsDateFilter {\n  dateTimeFrom: Date\n  dateTimeTo: Date\n}\n\nexport const StatisticsModel = BaseModel.named('Statistics')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    closureBranch: types.maybeNull(types.string),\n  })\n  .volatile<IStatisticsDateFilter>(self => ({\n    dateTimeFrom: startOfDay(new Date()),\n    dateTimeTo: endOfDay(new Date()),\n  }))\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length > 0\n        ? Array.from(self.branches)\n        : self.root.user.branchesId\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n  }))\n  .actions(self => ({\n    updateFilter(formValues: IStatisticsDateFilter) {\n      self.dateTimeFrom = new Date(formValues.dateTimeFrom)\n      self.dateTimeTo = new Date(formValues.dateTimeTo)\n    },\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    setClosureBranch(branch: MaybeID) {\n      self.closureBranch = branch\n    },\n    async createClosure() {\n      if (self.closureBranch) {\n        const variables: GCreateFinancialReport.Variables = {\n          companyBranchId: self.closureBranch,\n        }\n        return self.client.mutate({\n          mutation: CreateFinancialReport,\n          variables,\n          refetchQueries: [`GClosureReportQuery`],\n        })\n      } else {\n        throw new Error('Tried to create a closure without branch selected')\n      }\n    },\n  }))\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TSettingsModel } from './SettingsModel'\n\nexport const SettingsBaseModel = BaseModel.named('SettingsBase').views(\n  self => ({\n    get settings() {\n      return getParent<TSettingsModel>(self)\n    },\n  }),\n)\n","import { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuStockCreate,\n  GMenuStockDelete,\n  GMenuStockUpdate,\n} from '../../../graph/types'\nimport { TStockFormValues } from '../organisms/StockFormLoader'\nimport { MenuStockListQuery } from '../organisms/StockList.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuStockCreateMutation,\n  MenuStockDeleteMutation,\n  MenuStockUpdateMutation,\n} from './MenuStockModel.graphql'\n\nexport const MenuStockModel = MenuBaseModel.named('MenuStock').actions(\n  self => ({\n    createItem(formValues: TStockFormValues) {\n      const variables: GMenuStockCreate.Variables = {\n        stockItem: {\n          companyBranch: self.branchId,\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockCreateMutation,\n          variables,\n          refetchQueries: [\n            {\n              query: MenuStockListQuery,\n              variables: {\n                branchId: self.branchId,\n              },\n            },\n          ],\n        }),\n      )\n    },\n    updateItem(formValues: TStockFormValues) {\n      const variables: GMenuStockUpdate.Variables = {\n        stockId: formValues.id,\n        stockItem: {\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteItem(stockId: ID) {\n      const variables: GMenuStockDelete.Variables = {\n        stockId,\n      }\n      await self.client.mutate({\n        mutation: MenuStockDeleteMutation,\n        variables,\n        refetchQueries: [\n          {\n            query: MenuStockListQuery,\n            variables: {\n              branchId: self.branchId,\n            },\n          },\n        ],\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(formValues: TStockFormValues) {\n  return {\n    code: formValues.code,\n    label: formValues.nameLabel,\n    note: formValues.note,\n    plu: formValues.plu,\n    allergens: formValues.allergens,\n    wareUnit: formValues.wareUnit!,\n    allowNegative: formValues.allowNegative,\n  }\n}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { SettingsBaseModel } from '../../settings/models/SettingsBaseModel'\nimport { MenuCategoryModel } from './MenuCategoryModel'\nimport { MenuRecipeModel } from './MenuRecipeModel'\nimport { MenuStockModel } from './MenuStockModel'\n\nexport const MenuModel = SettingsBaseModel.named('Menu').props({\n  category: types.optional(MenuCategoryModel, {}),\n  recipe: types.optional(MenuRecipeModel, {}),\n  stock: types.optional(MenuStockModel, {}),\n})\n\nexport interface TMenuModel extends Instance<typeof MenuModel> {}\n","import { FetchPolicy } from 'apollo-client'\nimport { Instance, types } from 'mobx-state-tree'\n\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { BusinessHoursModel } from '../../businesshours/models/BusinessHoursModel'\nimport { MenuModel } from '../../menu/models/MenuModel'\n\nexport const SettingsModel = BaseModel.named('Settings')\n  .props({\n    selectedBranchId: types.maybe(types.string),\n    businessHours: types.optional(BusinessHoursModel, {}),\n    menu: types.optional(MenuModel, {}),\n  })\n  .views(self => ({\n    get branchId() {\n      return self.selectedBranchId || RM.head(self.root.user.branchesId)!\n    },\n    get queryProps() {\n      const branchId = this.branchId\n      if (!branchId) {\n        return { skip: true }\n      }\n      return {\n        fetchPolicy: 'cache-and-network' as FetchPolicy,\n        variables: { branchId },\n      }\n    },\n    getQueryProps<T extends Dictionary>(otherVariables: T) {\n      const branchId = this.branchId\n      if (!branchId) {\n        return { skip: true }\n      }\n      return {\n        variables: Object.assign({ branchId }, otherVariables),\n      }\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.selectedBranchId = branchId\n    },\n  }))\n\nexport interface TSettingsModel extends Instance<typeof SettingsModel> {}\n","import { FCompanyBranchFragment } from '../../../graph/generated'\nimport { GZoneLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport { ZoneLocationQuery } from '../Zones.graphql'\n\ninterface IVolatileProps {\n  currentZonePoints: Maybe<GeoPoint[]>\n}\n\nexport const ZoneMapModel = MapModel.named('ZoneMap')\n  .volatile<IVolatileProps>(() => ({\n    currentZonePoints: null,\n  }))\n  .actions(self => ({\n    updateZonePoints(points: GeoPoint[]) {\n      self.currentZonePoints = points\n    },\n    clearZonePoints() {\n      self.currentZonePoints = null\n    },\n    async panToZone(zoneId: ID) {\n      const { data } = await self.client.query({\n        query: ZoneLocationQuery,\n        variables: { zoneId },\n      })\n      if (data) {\n        const {\n          zone: {\n            companyBranch: { gps },\n          },\n        } = data as GZoneLocation.Query\n        if (self.mapRef) {\n          self.mapRef.panTo(gpsToLatLng(gps))\n        }\n      }\n    },\n    async panToBranch(branch: FCompanyBranchFragment) {\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(branch.gps))\n      }\n    },\n  }))\n","import gql from 'graphql-tag'\n\nimport { ZoneFragment } from '../Zones.graphql'\n\nexport const CreateZoneMutation = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...GZone\n    }\n  }\n  ${ZoneFragment}\n`\n\nexport const UpdateZoneMutation = gql`\n  mutation GUpdateZone($zoneId: ID!, $update: InputZoneUpdate!) {\n    updateZone(id: $zoneId, zone: $update) {\n      ...GZone\n    }\n  }\n  ${ZoneFragment}\n`\n\nexport const UpdateZonePriorityMutation = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport const DestroyZoneMutation = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n","import { flow, Instance, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\nimport { VError } from 'verror'\n\nimport {\n  FCompanyBranchBrand,\n  FCompanyBranchFragment,\n} from '../../../graph/generated'\nimport {\n  GCreateZone,\n  GDestroyZone,\n  GUpdateZone,\n  GUpdateZonePriority,\n  GZone,\n  GZonePriceRange,\n} from '../../../graph/types'\nimport { generatePolygon } from '../../../helpers/gps'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { ZoneMapModel } from '../models/ZoneMapModel'\nimport {\n  CreateZoneMutation,\n  DestroyZoneMutation,\n  UpdateZoneMutation,\n  UpdateZonePriorityMutation,\n} from './ZoneModel.graphql'\n\ntype TBranch = FCompanyBranchFragment\ntype TBrand = FCompanyBranchBrand\n\ninterface IVolatileProps {\n  branch: Maybe<TBranch>\n}\n\nexport const ZoneModel = BaseModel.named('Zone')\n  .props({\n    map: types.optional(ZoneMapModel, {}),\n    brandId: types.maybeNull(types.string),\n  })\n  .volatile<IVolatileProps>(() => ({\n    branch: null,\n  }))\n  .views(self => ({\n    get brand(): Maybe<TBrand> {\n      return (\n        (self.brandId &&\n          self.root.user.brands.find(RM.propEq('id', self.brandId))) ||\n        null\n      )\n    },\n    get hasBranchFilter() {\n      return self.branch !== null\n    },\n    get branchFilterId(): MaybeID {\n      return self.branch === null ? null : self.branch.id\n    },\n    get branchFilterPredicate() {\n      if (self.branch) {\n        return R.propEq('id', self.branch.id)\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), ['brand', 'id'])\n    },\n    get zoneFilterPredicate() {\n      if (self.branch !== null) {\n        return R.pathSatisfies(R.equals(self.branch.id), [\n          'companyBranch',\n          'id',\n        ])\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), [\n            'companyBranch',\n            'brand',\n            'id',\n          ])\n    },\n    get branches() {\n      return self.root.user.branches\n    },\n  }))\n  .actions(self => ({\n    setBranchFilter(branch: TBranch) {\n      self.branch = branch\n      self.brandId = branch.brand.id\n      self.map.panToBranch(branch)\n    },\n    setBrandFilter(brand: TBrand, brandBranches: TBranch[]) {\n      self.brandId = brand.id\n      if (!self.branch || self.branch.brand.id !== brand.id) {\n        self.branch =\n          (brandBranches.length === 1 && RM.head(brandBranches)) || null\n      }\n    },\n    clearBranchFilter() {\n      self.branch = null\n    },\n    clearBrandFilter() {\n      self.brandId = null\n      self.branch = null\n    },\n  }))\n  .actions(self => ({\n    createZone: flow(function*(onZoneCreate: (zoneId: ID) => void) {\n      if (self.branch === null) {\n        throw new VError('Called createZone without branch being set')\n      }\n      const points = generatePolygon({\n        center: self.branch.gps,\n        metersRadius: 1000,\n        pointsCount: 5,\n      })\n      const variables: GCreateZone.Variables = {\n        branchId: self.branch.id,\n        points,\n      }\n      const { data } = yield self.client.mutate({\n        mutation: CreateZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: (prev, { mutationResult }) => {\n            const zone = (mutationResult.data as GCreateZone.Mutation)\n              .createZone\n            if (zone) {\n              return {\n                ...prev,\n                zones: prev.zones.concat(zone),\n              }\n            }\n            return prev\n          },\n        },\n      })\n      if (data) {\n        const zone = (data as GCreateZone.Mutation).createZone\n        onZoneCreate(zone.id)\n      }\n    }),\n    // tslint:disable-next-line:no-any\n    async saveZone(zoneId: ID, values: any) {\n      const variables: GUpdateZone.Variables = {\n        zoneId,\n        update: {\n          name: values.name,\n          enabled: values.enabled,\n          companyBranch: values.companyBranch.id,\n          zoneColor: values.zoneColor.id,\n          minimalOrderPrice: {\n            value: Number(values.minimalOrderPrice.value) || 0,\n          },\n          priceRangeRules: values.priceRangeRules\n            .map(normalizePriceRangeRule)\n            .filter(R.reject(R.pathEq(['price', 'value'], null))),\n          geoPolygon: self.map.currentZonePoints || undefined,\n        },\n      }\n      await self.client.mutate({\n        mutation: UpdateZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: (prev, { mutationResult }) => {\n            const zoneIdx = prev.zones.findIndex(R.propEq('id', zoneId))\n            const zone = (mutationResult.data as GUpdateZone.Mutation)\n              .updateZone\n            return {\n              ...prev,\n              zones: R.update(zoneIdx, zone, prev.zones),\n            }\n          },\n        },\n      })\n      self.map.clearZonePoints()\n    },\n    destroyZone(zoneId: ID) {\n      if (!zoneId) {\n        return\n      }\n      const variables: GDestroyZone.Variables = {\n        zoneId,\n      }\n      return self.client.mutate({\n        mutation: DestroyZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: prev => {\n            return {\n              ...prev,\n              zones: R.reject(R.propEq('id', zoneId), prev.zones),\n            }\n          },\n        },\n      })\n    },\n    changeZonePriority: flow(function*(\n      zone: GZone.Fragment,\n      oldIndex: number,\n      newIndex: number,\n    ) {\n      if (!zone || oldIndex === newIndex) {\n        return\n      }\n      const offset = oldIndex - newIndex\n\n      const variables: GUpdateZonePriority.Variables = {\n        zoneId: zone.id,\n        offset,\n      }\n      yield self.client.mutate({\n        mutation: UpdateZonePriorityMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          updateZonePriority: {\n            __typename: 'Zone',\n            id: zone.id,\n            priority: zone.priority + offset,\n          },\n        },\n      })\n    }),\n  }))\n\nfunction numberOrNull(value: string | number | null) {\n  if (value === null) {\n    return null\n  }\n  const num = Number(value)\n  return Number.isNaN(num) ? null : num\n}\n\nfunction normalizePriceRangeRule(range: GZonePriceRange.Fragment) {\n  return {\n    price: { value: numberOrNull(range.price.value) },\n    toPrice: { value: numberOrNull(range.toPrice.value) || -1 },\n  }\n}\n\nexport interface TZoneModel extends Instance<typeof ZoneModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { AuthModel } from '../models/AuthModel'\nimport { ConfigModel } from '../models/ConfigModel'\nimport { UserModel } from '../models/UserModel'\nimport { CreateOrderModel } from '../segments/createorder/models/CreateOrderModel'\nimport { OrderModel } from '../segments/order/models/OrderModel'\nimport { StatisticsModel } from '../segments/overview/models/StatisticsModel'\nimport { SettingsModel } from '../segments/settings/models/SettingsModel'\nimport { ZoneModel } from '../segments/zones/models/ZoneModel'\nimport { BaseModel } from './BaseModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    user: types.optional(UserModel, {}),\n    order: types.optional(OrderModel, {}),\n    createOrder: types.optional(CreateOrderModel, {}),\n    zone: types.optional(ZoneModel, {}),\n    settings: types.optional(SettingsModel, {}),\n    config: types.optional(ConfigModel, {}),\n    statistics: types.optional(StatisticsModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.settings,\n        self.zone,\n        self.order,\n        self.statistics,\n        self.createOrder,\n      ]\n    },\n  }))\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import { Trans } from '@lingui/macro'\nimport { Button, Snackbar, SnackbarContent } from '@material-ui/core'\nimport { useAsyncEffect } from '@speedlo/hooks'\nimport { NormalizedCacheObject } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { Observer } from 'mobx-react'\nimport React, { Children, useContext, useState } from 'react'\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloProvider as ApolloProviderHooked } from 'react-apollo-hooks'\n\nimport { RootContext } from '../context/RootContext'\nimport { createApolloClient } from '../graph/createClient'\nimport { persistModel } from '../helpers/persistModel'\nimport { AuthModel } from '../models/AuthModel'\nimport { RootModel, TRootModel } from '../models/RootModel'\nimport Pacman from './Pacman'\nimport { snackStyles } from './SnackProvider'\n\nexport const RootProvider: React.FC = ({ children }) => {\n  const [root, setRoot] = useState<TRootModel | undefined>(undefined)\n  const [hasNetworkError, setNetworkError] = useState(false)\n\n  useAsyncEffect(async () => {\n    const auth = AuthModel.create({})\n    const apolloClient = createApolloClient(auth)\n\n    const rootModel = RootModel.create(\n      { auth },\n      {\n        fetch: window.fetch,\n        apolloClient,\n      },\n    )\n\n    await Promise.all(rootModel.persistedModels.map(persistModel))\n\n    try {\n      await rootModel.user.initUser()\n    } catch (err) {\n      if (err.networkError) {\n        setNetworkError(true)\n      }\n    }\n\n    setRoot(rootModel)\n  })\n\n  if (hasNetworkError) {\n    return (\n      <Snackbar\n        anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\n        autoHideDuration={Infinity}\n        open={true}\n      >\n        <SnackbarContent\n          className={snackStyles.variantError}\n          message={\n            <Trans>\n              Communication with server has failed. Please retry the operation\n              in a moment again.\n            </Trans>\n          }\n          action={[\n            <Button\n              key=\"restart\"\n              onClick={() => location.reload()}\n              color=\"secondary\"\n              size=\"small\"\n              role=\"button\"\n            >\n              <Trans>Restart application</Trans>\n            </Button>,\n          ]}\n        />\n      </Snackbar>\n    )\n  }\n\n  return root ? (\n    <ApolloProvider client={root.client}>\n      <ApolloProviderHooked client={root.client}>\n        <RootContext.Provider value={root}>\n          {Children.only(children)}\n        </RootContext.Provider>\n      </ApolloProviderHooked>\n    </ApolloProvider>\n  ) : (\n    <Pacman />\n  )\n}\n\nexport const useRoot = () => {\n  const root = useContext(RootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\ninterface IWithRootProps {\n  children(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.FC<IWithRootProps> = ({\n  children,\n  observe = true,\n}) => {\n  const root = useRoot()\n  return observe === true ? (\n    <Observer>{() => children(root)}</Observer>\n  ) : (\n    children(root)\n  )\n}\n\nexport type RootApolloClient = ApolloClient<NormalizedCacheObject>\n\nexport interface IRootEnvironment {\n  fetch: TFetch\n  apolloClient: RootApolloClient\n}\n","import { GraphQLError } from 'graphql'\nimport Raven from 'raven-js'\nimport { ErrorInfo } from 'react'\nimport { VError } from 'verror'\n\nimport { appConfig } from '../config'\nimport { logSentry } from './logger'\n\nexport const installSentry = (cb: () => void) => {\n  const { sentryDSN } = appConfig\n  if (sentryDSN) {\n    logSentry('enabled with DSN %s', sentryDSN)\n    Raven.config(sentryDSN, {\n      environment: process.env.REACT_APP_STAGE,\n    }).install()\n    Raven.context(cb)\n  } else {\n    cb()\n  }\n}\n\nexport const identifyUser = (userId: string | null) => {\n  Raven.setUserContext({\n    userId,\n  })\n}\n\nexport const reportRenderingError = (error: Error, info: ErrorInfo) => {\n  if (Raven.isSetup()) {\n    Raven.captureException(error, {\n      extra: info,\n    })\n  }\n}\n\nexport const reportFailingQuery = (\n  errors: ReadonlyArray<GraphQLError>,\n  data: object,\n) => {\n  errors.forEach(err => {\n    Raven.captureMessage(err.message, { extra: err })\n  })\n  Raven.captureException(new Error('Failed running a query'), { extra: data })\n}\n\nexport const reportError = (error: Error) => {\n  let extra = {}\n  if (error instanceof VError) {\n    extra = {\n      cause: VError.cause(error),\n      ...VError.info(error),\n    }\n  }\n  Raven.captureException(error, { extra })\n  return error\n}\n","// @ts-ignore temporary before figuring out a logging solution that works in prod\nwindow.localStorage.setItem('debug', '*,-sockjs*')\n","import { computeDestinationPoint, getBounds } from 'geolib'\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n\ninterface IGeneratePolygonInput {\n  center: GeoPoint\n  metersRadius?: number\n  pointsCount?: number\n}\n\nexport const generatePolygon = ({\n  center,\n  metersRadius = 1000,\n  pointsCount = 15,\n}: IGeneratePolygonInput) => {\n  return new Array(pointsCount).fill(null).map((_, idx) => {\n    const degree = 360 / pointsCount * idx\n    return computeDestinationPoint(center, metersRadius, degree)\n  })\n}\n\nexport const getBoundsOfPoints = (points: GeoPoint[]) => {\n  const bounds = getBounds(points)\n  if (!bounds) {\n    return null\n  }\n  return new google.maps.LatLngBounds(\n    {\n      lat: bounds.minLat,\n      lng: bounds.minLng,\n    },\n    {\n      lat: bounds.maxLat,\n      lng: bounds.maxLng,\n    },\n  )\n}\n","var map = {\n\t\"./af\": [\n\t\t563,\n\t\t4\n\t],\n\t\"./af.js\": [\n\t\t563,\n\t\t4\n\t],\n\t\"./ar\": [\n\t\t570,\n\t\t27\n\t],\n\t\"./ar-dz\": [\n\t\t564,\n\t\t60\n\t],\n\t\"./ar-dz.js\": [\n\t\t564,\n\t\t60\n\t],\n\t\"./ar-kw\": [\n\t\t565,\n\t\t94\n\t],\n\t\"./ar-kw.js\": [\n\t\t565,\n\t\t94\n\t],\n\t\"./ar-ly\": [\n\t\t566,\n\t\t105\n\t],\n\t\"./ar-ly.js\": [\n\t\t566,\n\t\t105\n\t],\n\t\"./ar-ma\": [\n\t\t567,\n\t\t116\n\t],\n\t\"./ar-ma.js\": [\n\t\t567,\n\t\t116\n\t],\n\t\"./ar-sa\": [\n\t\t568,\n\t\t5\n\t],\n\t\"./ar-sa.js\": [\n\t\t568,\n\t\t5\n\t],\n\t\"./ar-tn\": [\n\t\t569,\n\t\t16\n\t],\n\t\"./ar-tn.js\": [\n\t\t569,\n\t\t16\n\t],\n\t\"./ar.js\": [\n\t\t570,\n\t\t27\n\t],\n\t\"./az\": [\n\t\t571,\n\t\t38\n\t],\n\t\"./az.js\": [\n\t\t571,\n\t\t38\n\t],\n\t\"./be\": [\n\t\t572,\n\t\t49\n\t],\n\t\"./be.js\": [\n\t\t572,\n\t\t49\n\t],\n\t\"./bg\": [\n\t\t573,\n\t\t61\n\t],\n\t\"./bg.js\": [\n\t\t573,\n\t\t61\n\t],\n\t\"./bm\": [\n\t\t574,\n\t\t72\n\t],\n\t\"./bm.js\": [\n\t\t574,\n\t\t72\n\t],\n\t\"./bn\": [\n\t\t575,\n\t\t83\n\t],\n\t\"./bn.js\": [\n\t\t575,\n\t\t83\n\t],\n\t\"./bo\": [\n\t\t576,\n\t\t87\n\t],\n\t\"./bo.js\": [\n\t\t576,\n\t\t87\n\t],\n\t\"./br\": [\n\t\t577,\n\t\t88\n\t],\n\t\"./br.js\": [\n\t\t577,\n\t\t88\n\t],\n\t\"./bs\": [\n\t\t578,\n\t\t89\n\t],\n\t\"./bs.js\": [\n\t\t578,\n\t\t89\n\t],\n\t\"./ca\": [\n\t\t579,\n\t\t90\n\t],\n\t\"./ca.js\": [\n\t\t579,\n\t\t90\n\t],\n\t\"./cs\": [\n\t\t580,\n\t\t91\n\t],\n\t\"./cs.js\": [\n\t\t580,\n\t\t91\n\t],\n\t\"./cv\": [\n\t\t581,\n\t\t92\n\t],\n\t\"./cv.js\": [\n\t\t581,\n\t\t92\n\t],\n\t\"./cy\": [\n\t\t582,\n\t\t93\n\t],\n\t\"./cy.js\": [\n\t\t582,\n\t\t93\n\t],\n\t\"./da\": [\n\t\t583,\n\t\t95\n\t],\n\t\"./da.js\": [\n\t\t583,\n\t\t95\n\t],\n\t\"./de\": [\n\t\t586,\n\t\t98\n\t],\n\t\"./de-at\": [\n\t\t584,\n\t\t96\n\t],\n\t\"./de-at.js\": [\n\t\t584,\n\t\t96\n\t],\n\t\"./de-ch\": [\n\t\t585,\n\t\t97\n\t],\n\t\"./de-ch.js\": [\n\t\t585,\n\t\t97\n\t],\n\t\"./de.js\": [\n\t\t586,\n\t\t98\n\t],\n\t\"./dv\": [\n\t\t587,\n\t\t99\n\t],\n\t\"./dv.js\": [\n\t\t587,\n\t\t99\n\t],\n\t\"./el\": [\n\t\t588,\n\t\t100\n\t],\n\t\"./el.js\": [\n\t\t588,\n\t\t100\n\t],\n\t\"./en-au\": [\n\t\t589,\n\t\t101\n\t],\n\t\"./en-au.js\": [\n\t\t589,\n\t\t101\n\t],\n\t\"./en-ca\": [\n\t\t590,\n\t\t102\n\t],\n\t\"./en-ca.js\": [\n\t\t590,\n\t\t102\n\t],\n\t\"./en-gb\": [\n\t\t591,\n\t\t103\n\t],\n\t\"./en-gb.js\": [\n\t\t591,\n\t\t103\n\t],\n\t\"./en-ie\": [\n\t\t592,\n\t\t104\n\t],\n\t\"./en-ie.js\": [\n\t\t592,\n\t\t104\n\t],\n\t\"./en-il\": [\n\t\t593,\n\t\t106\n\t],\n\t\"./en-il.js\": [\n\t\t593,\n\t\t106\n\t],\n\t\"./en-nz\": [\n\t\t594,\n\t\t107\n\t],\n\t\"./en-nz.js\": [\n\t\t594,\n\t\t107\n\t],\n\t\"./eo\": [\n\t\t595,\n\t\t108\n\t],\n\t\"./eo.js\": [\n\t\t595,\n\t\t108\n\t],\n\t\"./es\": [\n\t\t598,\n\t\t111\n\t],\n\t\"./es-do\": [\n\t\t596,\n\t\t109\n\t],\n\t\"./es-do.js\": [\n\t\t596,\n\t\t109\n\t],\n\t\"./es-us\": [\n\t\t597,\n\t\t110\n\t],\n\t\"./es-us.js\": [\n\t\t597,\n\t\t110\n\t],\n\t\"./es.js\": [\n\t\t598,\n\t\t111\n\t],\n\t\"./et\": [\n\t\t599,\n\t\t112\n\t],\n\t\"./et.js\": [\n\t\t599,\n\t\t112\n\t],\n\t\"./eu\": [\n\t\t600,\n\t\t113\n\t],\n\t\"./eu.js\": [\n\t\t600,\n\t\t113\n\t],\n\t\"./fa\": [\n\t\t601,\n\t\t114\n\t],\n\t\"./fa.js\": [\n\t\t601,\n\t\t114\n\t],\n\t\"./fi\": [\n\t\t602,\n\t\t115\n\t],\n\t\"./fi.js\": [\n\t\t602,\n\t\t115\n\t],\n\t\"./fo\": [\n\t\t603,\n\t\t117\n\t],\n\t\"./fo.js\": [\n\t\t603,\n\t\t117\n\t],\n\t\"./fr\": [\n\t\t606,\n\t\t120\n\t],\n\t\"./fr-ca\": [\n\t\t604,\n\t\t118\n\t],\n\t\"./fr-ca.js\": [\n\t\t604,\n\t\t118\n\t],\n\t\"./fr-ch\": [\n\t\t605,\n\t\t119\n\t],\n\t\"./fr-ch.js\": [\n\t\t605,\n\t\t119\n\t],\n\t\"./fr.js\": [\n\t\t606,\n\t\t120\n\t],\n\t\"./fy\": [\n\t\t607,\n\t\t121\n\t],\n\t\"./fy.js\": [\n\t\t607,\n\t\t121\n\t],\n\t\"./gd\": [\n\t\t608,\n\t\t122\n\t],\n\t\"./gd.js\": [\n\t\t608,\n\t\t122\n\t],\n\t\"./gl\": [\n\t\t609,\n\t\t123\n\t],\n\t\"./gl.js\": [\n\t\t609,\n\t\t123\n\t],\n\t\"./gom-latn\": [\n\t\t610,\n\t\t124\n\t],\n\t\"./gom-latn.js\": [\n\t\t610,\n\t\t124\n\t],\n\t\"./gu\": [\n\t\t611,\n\t\t125\n\t],\n\t\"./gu.js\": [\n\t\t611,\n\t\t125\n\t],\n\t\"./he\": [\n\t\t612,\n\t\t126\n\t],\n\t\"./he.js\": [\n\t\t612,\n\t\t126\n\t],\n\t\"./hi\": [\n\t\t613,\n\t\t6\n\t],\n\t\"./hi.js\": [\n\t\t613,\n\t\t6\n\t],\n\t\"./hr\": [\n\t\t614,\n\t\t7\n\t],\n\t\"./hr.js\": [\n\t\t614,\n\t\t7\n\t],\n\t\"./hu\": [\n\t\t615,\n\t\t8\n\t],\n\t\"./hu.js\": [\n\t\t615,\n\t\t8\n\t],\n\t\"./hy-am\": [\n\t\t616,\n\t\t9\n\t],\n\t\"./hy-am.js\": [\n\t\t616,\n\t\t9\n\t],\n\t\"./id\": [\n\t\t617,\n\t\t10\n\t],\n\t\"./id.js\": [\n\t\t617,\n\t\t10\n\t],\n\t\"./is\": [\n\t\t618,\n\t\t11\n\t],\n\t\"./is.js\": [\n\t\t618,\n\t\t11\n\t],\n\t\"./it\": [\n\t\t619,\n\t\t12\n\t],\n\t\"./it.js\": [\n\t\t619,\n\t\t12\n\t],\n\t\"./ja\": [\n\t\t620,\n\t\t13\n\t],\n\t\"./ja.js\": [\n\t\t620,\n\t\t13\n\t],\n\t\"./jv\": [\n\t\t621,\n\t\t14\n\t],\n\t\"./jv.js\": [\n\t\t621,\n\t\t14\n\t],\n\t\"./ka\": [\n\t\t622,\n\t\t15\n\t],\n\t\"./ka.js\": [\n\t\t622,\n\t\t15\n\t],\n\t\"./kk\": [\n\t\t623,\n\t\t17\n\t],\n\t\"./kk.js\": [\n\t\t623,\n\t\t17\n\t],\n\t\"./km\": [\n\t\t624,\n\t\t18\n\t],\n\t\"./km.js\": [\n\t\t624,\n\t\t18\n\t],\n\t\"./kn\": [\n\t\t625,\n\t\t19\n\t],\n\t\"./kn.js\": [\n\t\t625,\n\t\t19\n\t],\n\t\"./ko\": [\n\t\t626,\n\t\t20\n\t],\n\t\"./ko.js\": [\n\t\t626,\n\t\t20\n\t],\n\t\"./ky\": [\n\t\t627,\n\t\t21\n\t],\n\t\"./ky.js\": [\n\t\t627,\n\t\t21\n\t],\n\t\"./lb\": [\n\t\t628,\n\t\t22\n\t],\n\t\"./lb.js\": [\n\t\t628,\n\t\t22\n\t],\n\t\"./lo\": [\n\t\t629,\n\t\t23\n\t],\n\t\"./lo.js\": [\n\t\t629,\n\t\t23\n\t],\n\t\"./lt\": [\n\t\t630,\n\t\t24\n\t],\n\t\"./lt.js\": [\n\t\t630,\n\t\t24\n\t],\n\t\"./lv\": [\n\t\t631,\n\t\t25\n\t],\n\t\"./lv.js\": [\n\t\t631,\n\t\t25\n\t],\n\t\"./me\": [\n\t\t632,\n\t\t26\n\t],\n\t\"./me.js\": [\n\t\t632,\n\t\t26\n\t],\n\t\"./mi\": [\n\t\t633,\n\t\t28\n\t],\n\t\"./mi.js\": [\n\t\t633,\n\t\t28\n\t],\n\t\"./mk\": [\n\t\t634,\n\t\t29\n\t],\n\t\"./mk.js\": [\n\t\t634,\n\t\t29\n\t],\n\t\"./ml\": [\n\t\t635,\n\t\t30\n\t],\n\t\"./ml.js\": [\n\t\t635,\n\t\t30\n\t],\n\t\"./mn\": [\n\t\t636,\n\t\t31\n\t],\n\t\"./mn.js\": [\n\t\t636,\n\t\t31\n\t],\n\t\"./mr\": [\n\t\t637,\n\t\t32\n\t],\n\t\"./mr.js\": [\n\t\t637,\n\t\t32\n\t],\n\t\"./ms\": [\n\t\t639,\n\t\t34\n\t],\n\t\"./ms-my\": [\n\t\t638,\n\t\t33\n\t],\n\t\"./ms-my.js\": [\n\t\t638,\n\t\t33\n\t],\n\t\"./ms.js\": [\n\t\t639,\n\t\t34\n\t],\n\t\"./mt\": [\n\t\t640,\n\t\t35\n\t],\n\t\"./mt.js\": [\n\t\t640,\n\t\t35\n\t],\n\t\"./my\": [\n\t\t641,\n\t\t36\n\t],\n\t\"./my.js\": [\n\t\t641,\n\t\t36\n\t],\n\t\"./nb\": [\n\t\t642,\n\t\t37\n\t],\n\t\"./nb.js\": [\n\t\t642,\n\t\t37\n\t],\n\t\"./ne\": [\n\t\t643,\n\t\t39\n\t],\n\t\"./ne.js\": [\n\t\t643,\n\t\t39\n\t],\n\t\"./nl\": [\n\t\t645,\n\t\t41\n\t],\n\t\"./nl-be\": [\n\t\t644,\n\t\t40\n\t],\n\t\"./nl-be.js\": [\n\t\t644,\n\t\t40\n\t],\n\t\"./nl.js\": [\n\t\t645,\n\t\t41\n\t],\n\t\"./nn\": [\n\t\t646,\n\t\t42\n\t],\n\t\"./nn.js\": [\n\t\t646,\n\t\t42\n\t],\n\t\"./pa-in\": [\n\t\t647,\n\t\t43\n\t],\n\t\"./pa-in.js\": [\n\t\t647,\n\t\t43\n\t],\n\t\"./pl\": [\n\t\t648,\n\t\t44\n\t],\n\t\"./pl.js\": [\n\t\t648,\n\t\t44\n\t],\n\t\"./pt\": [\n\t\t650,\n\t\t46\n\t],\n\t\"./pt-br\": [\n\t\t649,\n\t\t45\n\t],\n\t\"./pt-br.js\": [\n\t\t649,\n\t\t45\n\t],\n\t\"./pt.js\": [\n\t\t650,\n\t\t46\n\t],\n\t\"./ro\": [\n\t\t651,\n\t\t47\n\t],\n\t\"./ro.js\": [\n\t\t651,\n\t\t47\n\t],\n\t\"./ru\": [\n\t\t652,\n\t\t48\n\t],\n\t\"./ru.js\": [\n\t\t652,\n\t\t48\n\t],\n\t\"./sd\": [\n\t\t653,\n\t\t50\n\t],\n\t\"./sd.js\": [\n\t\t653,\n\t\t50\n\t],\n\t\"./se\": [\n\t\t654,\n\t\t51\n\t],\n\t\"./se.js\": [\n\t\t654,\n\t\t51\n\t],\n\t\"./si\": [\n\t\t655,\n\t\t52\n\t],\n\t\"./si.js\": [\n\t\t655,\n\t\t52\n\t],\n\t\"./sk\": [\n\t\t656,\n\t\t53\n\t],\n\t\"./sk.js\": [\n\t\t656,\n\t\t53\n\t],\n\t\"./sl\": [\n\t\t657,\n\t\t54\n\t],\n\t\"./sl.js\": [\n\t\t657,\n\t\t54\n\t],\n\t\"./sq\": [\n\t\t658,\n\t\t55\n\t],\n\t\"./sq.js\": [\n\t\t658,\n\t\t55\n\t],\n\t\"./sr\": [\n\t\t660,\n\t\t57\n\t],\n\t\"./sr-cyrl\": [\n\t\t659,\n\t\t56\n\t],\n\t\"./sr-cyrl.js\": [\n\t\t659,\n\t\t56\n\t],\n\t\"./sr.js\": [\n\t\t660,\n\t\t57\n\t],\n\t\"./ss\": [\n\t\t661,\n\t\t58\n\t],\n\t\"./ss.js\": [\n\t\t661,\n\t\t58\n\t],\n\t\"./sv\": [\n\t\t662,\n\t\t59\n\t],\n\t\"./sv.js\": [\n\t\t662,\n\t\t59\n\t],\n\t\"./sw\": [\n\t\t663,\n\t\t62\n\t],\n\t\"./sw.js\": [\n\t\t663,\n\t\t62\n\t],\n\t\"./ta\": [\n\t\t664,\n\t\t63\n\t],\n\t\"./ta.js\": [\n\t\t664,\n\t\t63\n\t],\n\t\"./te\": [\n\t\t665,\n\t\t64\n\t],\n\t\"./te.js\": [\n\t\t665,\n\t\t64\n\t],\n\t\"./tet\": [\n\t\t666,\n\t\t65\n\t],\n\t\"./tet.js\": [\n\t\t666,\n\t\t65\n\t],\n\t\"./tg\": [\n\t\t667,\n\t\t66\n\t],\n\t\"./tg.js\": [\n\t\t667,\n\t\t66\n\t],\n\t\"./th\": [\n\t\t668,\n\t\t67\n\t],\n\t\"./th.js\": [\n\t\t668,\n\t\t67\n\t],\n\t\"./tl-ph\": [\n\t\t669,\n\t\t68\n\t],\n\t\"./tl-ph.js\": [\n\t\t669,\n\t\t68\n\t],\n\t\"./tlh\": [\n\t\t670,\n\t\t69\n\t],\n\t\"./tlh.js\": [\n\t\t670,\n\t\t69\n\t],\n\t\"./tr\": [\n\t\t671,\n\t\t70\n\t],\n\t\"./tr.js\": [\n\t\t671,\n\t\t70\n\t],\n\t\"./tzl\": [\n\t\t672,\n\t\t71\n\t],\n\t\"./tzl.js\": [\n\t\t672,\n\t\t71\n\t],\n\t\"./tzm\": [\n\t\t674,\n\t\t74\n\t],\n\t\"./tzm-latn\": [\n\t\t673,\n\t\t73\n\t],\n\t\"./tzm-latn.js\": [\n\t\t673,\n\t\t73\n\t],\n\t\"./tzm.js\": [\n\t\t674,\n\t\t74\n\t],\n\t\"./ug-cn\": [\n\t\t675,\n\t\t75\n\t],\n\t\"./ug-cn.js\": [\n\t\t675,\n\t\t75\n\t],\n\t\"./uk\": [\n\t\t676,\n\t\t76\n\t],\n\t\"./uk.js\": [\n\t\t676,\n\t\t76\n\t],\n\t\"./ur\": [\n\t\t677,\n\t\t77\n\t],\n\t\"./ur.js\": [\n\t\t677,\n\t\t77\n\t],\n\t\"./uz\": [\n\t\t679,\n\t\t79\n\t],\n\t\"./uz-latn\": [\n\t\t678,\n\t\t78\n\t],\n\t\"./uz-latn.js\": [\n\t\t678,\n\t\t78\n\t],\n\t\"./uz.js\": [\n\t\t679,\n\t\t79\n\t],\n\t\"./vi\": [\n\t\t680,\n\t\t80\n\t],\n\t\"./vi.js\": [\n\t\t680,\n\t\t80\n\t],\n\t\"./x-pseudo\": [\n\t\t681,\n\t\t81\n\t],\n\t\"./x-pseudo.js\": [\n\t\t681,\n\t\t81\n\t],\n\t\"./yo\": [\n\t\t682,\n\t\t82\n\t],\n\t\"./yo.js\": [\n\t\t682,\n\t\t82\n\t],\n\t\"./zh-cn\": [\n\t\t683,\n\t\t84\n\t],\n\t\"./zh-cn.js\": [\n\t\t683,\n\t\t84\n\t],\n\t\"./zh-hk\": [\n\t\t684,\n\t\t85\n\t],\n\t\"./zh-hk.js\": [\n\t\t684,\n\t\t85\n\t],\n\t\"./zh-tw\": [\n\t\t685,\n\t\t86\n\t],\n\t\"./zh-tw.js\": [\n\t\t685,\n\t\t86\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6121;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./bg\": [\n\t\t686,\n\t\t127\n\t],\n\t\"./bg.js\": [\n\t\t686,\n\t\t127\n\t],\n\t\"./chs\": [\n\t\t687,\n\t\t133\n\t],\n\t\"./chs.js\": [\n\t\t687,\n\t\t133\n\t],\n\t\"./cs\": [\n\t\t688,\n\t\t144\n\t],\n\t\"./cs.js\": [\n\t\t688,\n\t\t144\n\t],\n\t\"./da-dk\": [\n\t\t689,\n\t\t155\n\t],\n\t\"./da-dk.js\": [\n\t\t689,\n\t\t155\n\t],\n\t\"./de\": [\n\t\t691,\n\t\t128\n\t],\n\t\"./de-ch\": [\n\t\t690,\n\t\t160\n\t],\n\t\"./de-ch.js\": [\n\t\t690,\n\t\t160\n\t],\n\t\"./de.js\": [\n\t\t691,\n\t\t128\n\t],\n\t\"./en-au\": [\n\t\t692,\n\t\t129\n\t],\n\t\"./en-au.js\": [\n\t\t692,\n\t\t129\n\t],\n\t\"./en-gb\": [\n\t\t693,\n\t\t130\n\t],\n\t\"./en-gb.js\": [\n\t\t693,\n\t\t130\n\t],\n\t\"./en-za\": [\n\t\t694,\n\t\t131\n\t],\n\t\"./en-za.js\": [\n\t\t694,\n\t\t131\n\t],\n\t\"./es\": [\n\t\t696,\n\t\t134\n\t],\n\t\"./es-es\": [\n\t\t695,\n\t\t132\n\t],\n\t\"./es-es.js\": [\n\t\t695,\n\t\t132\n\t],\n\t\"./es.js\": [\n\t\t696,\n\t\t134\n\t],\n\t\"./et\": [\n\t\t697,\n\t\t135\n\t],\n\t\"./et.js\": [\n\t\t697,\n\t\t135\n\t],\n\t\"./fi\": [\n\t\t698,\n\t\t136\n\t],\n\t\"./fi.js\": [\n\t\t698,\n\t\t136\n\t],\n\t\"./fr\": [\n\t\t701,\n\t\t139\n\t],\n\t\"./fr-ca\": [\n\t\t699,\n\t\t137\n\t],\n\t\"./fr-ca.js\": [\n\t\t699,\n\t\t137\n\t],\n\t\"./fr-ch\": [\n\t\t700,\n\t\t138\n\t],\n\t\"./fr-ch.js\": [\n\t\t700,\n\t\t138\n\t],\n\t\"./fr.js\": [\n\t\t701,\n\t\t139\n\t],\n\t\"./hu\": [\n\t\t702,\n\t\t140\n\t],\n\t\"./hu.js\": [\n\t\t702,\n\t\t140\n\t],\n\t\"./it\": [\n\t\t703,\n\t\t141\n\t],\n\t\"./it.js\": [\n\t\t703,\n\t\t141\n\t],\n\t\"./ja\": [\n\t\t704,\n\t\t142\n\t],\n\t\"./ja.js\": [\n\t\t704,\n\t\t142\n\t],\n\t\"./lv\": [\n\t\t705,\n\t\t143\n\t],\n\t\"./lv.js\": [\n\t\t705,\n\t\t143\n\t],\n\t\"./nl-be\": [\n\t\t706,\n\t\t145\n\t],\n\t\"./nl-be.js\": [\n\t\t706,\n\t\t145\n\t],\n\t\"./nl-nl\": [\n\t\t707,\n\t\t146\n\t],\n\t\"./nl-nl.js\": [\n\t\t707,\n\t\t146\n\t],\n\t\"./no\": [\n\t\t708,\n\t\t147\n\t],\n\t\"./no.js\": [\n\t\t708,\n\t\t147\n\t],\n\t\"./pl\": [\n\t\t709,\n\t\t148\n\t],\n\t\"./pl.js\": [\n\t\t709,\n\t\t148\n\t],\n\t\"./pt-br\": [\n\t\t710,\n\t\t149\n\t],\n\t\"./pt-br.js\": [\n\t\t710,\n\t\t149\n\t],\n\t\"./pt-pt\": [\n\t\t711,\n\t\t150\n\t],\n\t\"./pt-pt.js\": [\n\t\t711,\n\t\t150\n\t],\n\t\"./ru\": [\n\t\t713,\n\t\t152\n\t],\n\t\"./ru-ua\": [\n\t\t712,\n\t\t151\n\t],\n\t\"./ru-ua.js\": [\n\t\t712,\n\t\t151\n\t],\n\t\"./ru.js\": [\n\t\t713,\n\t\t152\n\t],\n\t\"./sk\": [\n\t\t714,\n\t\t153\n\t],\n\t\"./sk.js\": [\n\t\t714,\n\t\t153\n\t],\n\t\"./sl\": [\n\t\t715,\n\t\t154\n\t],\n\t\"./sl.js\": [\n\t\t715,\n\t\t154\n\t],\n\t\"./th\": [\n\t\t716,\n\t\t156\n\t],\n\t\"./th.js\": [\n\t\t716,\n\t\t156\n\t],\n\t\"./tr\": [\n\t\t717,\n\t\t157\n\t],\n\t\"./tr.js\": [\n\t\t717,\n\t\t157\n\t],\n\t\"./uk-ua\": [\n\t\t718,\n\t\t158\n\t],\n\t\"./uk-ua.js\": [\n\t\t718,\n\t\t158\n\t],\n\t\"./vi\": [\n\t\t719,\n\t\t159\n\t],\n\t\"./vi.js\": [\n\t\t719,\n\t\t159\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6122;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.po\": [\n\t\t7621,\n\t\t162\n\t],\n\t\"./de/messages.po\": [\n\t\t7622,\n\t\t163\n\t],\n\t\"./en-dev/messages.po\": [\n\t\t7624,\n\t\t165\n\t],\n\t\"./en/messages.po\": [\n\t\t7623,\n\t\t164\n\t],\n\t\"./pl/messages.po\": [\n\t\t7625,\n\t\t166\n\t],\n\t\"./sk/messages.po\": [\n\t\t7626,\n\t\t167\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6123;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t7627,\n\t\t162\n\t],\n\t\"./de/messages.js\": [\n\t\t7628,\n\t\t163\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t7630,\n\t\t165\n\t],\n\t\"./en/messages.js\": [\n\t\t7629,\n\t\t164\n\t],\n\t\"./pl/messages.js\": [\n\t\t7631,\n\t\t166\n\t],\n\t\"./sk/messages.js\": [\n\t\t7632,\n\t\t167\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6124;\nmodule.exports = webpackAsyncContext;","import { ErrorResponse, onError } from 'apollo-link-error'\n\nimport { reportFailingQuery } from '../helpers/sentry'\n\nexport const errorHandler = ({ graphQLErrors, operation }: ErrorResponse) => {\n  if (graphQLErrors) {\n    reportFailingQuery(graphQLErrors, {\n      query: operation.operationName,\n      variables: operation.variables,\n    })\n  }\n}\n\nexport const createErrorLink = () => onError(errorHandler)\n\nexport interface IQueryError extends Error {\n  showToUser: boolean\n}\n\nexport type TQueryErrors = IQueryError[] | null\n\n// tslint:disable-next-line:no-any\nexport const getQueryErrors = async (query: Promise<any>) => {\n  const result = await query\n  if (result && result.errors) {\n    return result.errors as IQueryError[]\n  }\n  return null\n}\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nimport { Colors } from '../styling'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.FC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n  >\n    <Spinner\n      name=\"pacman\"\n      style={noMargin ? {} : { marginTop: '45vh', color: Colors.orange }}\n    />\n  </div>\n)\n\nexport default Pacman\n","import { DocumentNode } from 'graphql'\nimport { Lambda } from 'mobx'\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\nimport { useQuery } from 'react-apollo-hooks'\nimport { Redirect } from 'react-router-dom'\nimport RedBox from 'redbox-react'\n\nimport { Loading } from '../atoms/Loading'\nimport { logError } from '../helpers/logger'\nimport { whenGoingOnline } from '../helpers/offline'\nimport { reportError } from '../helpers/sentry'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean\n    refetchOnConnectionLost?: boolean\n  }\n  const GQuery: React.FC<IProps> = props => {\n    const cleanup = useRef<Lambda[]>([])\n    const executeCleanup = useCallback(() => {\n      cleanup.current.forEach(fn => fn())\n      cleanup.current.length = 0\n    }, [])\n\n    useEffect(\n      () => {\n        return executeCleanup\n      },\n      [cleanup.current.length],\n    )\n\n    const {\n      render,\n      renderFragment,\n      renderLoading = true,\n      renderError = true,\n      refetchOnConnectionLost = false,\n      children,\n      ...rest\n    } = props\n\n    return (\n      // @ts-ignore Some weird changes in @types/react\n      <Query query={query} {...rest}>\n        {result => {\n          if (result.loading) {\n            if (typeof renderLoading === 'function') {\n              return renderLoading(result)\n            } else if (renderLoading === true) {\n              return <Loading />\n            }\n          }\n          if (result.error) {\n            reportError(result.error)\n            logError(result.error)\n            if (renderError === true) {\n              return process.env.NODE_ENV === 'production' ? (\n                <Redirect to=\"/error\" />\n              ) : (\n                <RedBox error={result.error} />\n              )\n            } else {\n              return null\n            }\n          }\n          if (refetchOnConnectionLost) {\n            cleanup.current.push(whenGoingOnline(result.refetch))\n          }\n          if (result.data) {\n            if (renderFragment) {\n              return <>{renderFragment(result.data, result)}</>\n            }\n            if (render) {\n              return render(result.data, result)\n            }\n          }\n          return children || null\n        }}\n      </Query>\n    )\n  }\n  return GQuery\n}\n\nexport function buildQueryHook<TData, TVariables>(query: DocumentNode) {\n  return (variables: TVariables) => {\n    return useQuery<TData, TVariables>(query, { variables })\n  }\n}\n","import React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { RedirectToLogin } from './RedirectToLogin'\n\ninterface ISecureRouteProps extends RouteProps {\n  redirect?: boolean\n  lazy?: boolean\n}\n\nexport const SecureRoute: React.FC<ISecureRouteProps> = ({\n  redirect = true,\n  lazy = true,\n  ...props\n}) => {\n  const { auth } = useRoot()\n  if (!auth.isAuthenticatedUser) {\n    return redirect ? <RedirectToLogin /> : <NotFoundPage />\n  }\n  if (props.component && typeof props.component === 'object') {\n    const { component, path, exact } = props\n    return <LazyRoute path={path} exact={exact} component={component} />\n  }\n  return <Route {...props} />\n}\n","import React from 'react'\n\nimport { TRootModel } from '../models/RootModel'\nimport { WithRoot as RealWithRoot } from './RootProvider'\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.FC<IProps> = ({ render, observe }) => (\n  <RealWithRoot children={render} observe={observe} />\n)\n","import { Trans } from '@lingui/macro'\nimport { Dialog } from '@material-ui/core'\nimport { WarningTwoTone } from '@material-ui/icons'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport connectionWarningSound from '../assets/connectionWarning.mp3'\nimport { isNetworkOffline } from '../helpers/offline'\nimport { Colors } from '../styling'\nimport { SoundPlayInterval } from './SoundPlayInterval'\n\nconst MessageStyled = styled.div`\n  padding: 1rem;\n  background-color: ${Colors.red} !important;\n  font-size: 2rem;\n\n  & svg {\n    position: relative;\n    top: 0.3rem;\n    padding-right: 0.5rem;\n  }\n`\n\nexport const ConnectionWarning = observer(() => {\n  return (\n    <>\n      <SoundPlayInterval\n        shouldPlay={isNetworkOffline()}\n        intervalSec={30}\n        soundUrl={connectionWarningSound}\n      />\n\n      <Dialog\n        open={isNetworkOffline()}\n        disableBackdropClick={true}\n        disableEscapeKeyDown={true}\n      >\n        <MessageStyled>\n          <WarningTwoTone fontSize=\"large\" />\n          <Trans>Internet connection is not available</Trans>\n        </MessageStyled>\n      </Dialog>\n    </>\n  )\n})\n","import React, { ErrorInfo } from 'react'\nimport {\n  DeveloperErrorBoundary,\n  ProductionErrorBoundary,\n} from 'react-error-guard'\n\nimport { reportRenderingError } from '../helpers/sentry'\n\ninterface IProps {\n  prod: boolean\n}\n\nexport const ErrorContainer: React.FC<IProps> = ({\n  children,\n  prod = false,\n}) => {\n  if (prod) {\n    return (\n      <ProductionErrorBoundary\n        dispatchErrorReporting={(data: { error: Error; info: ErrorInfo }) => {\n          reportRenderingError(data.error, data.info)\n        }}\n      >\n        {children}\n      </ProductionErrorBoundary>\n    )\n  } else {\n    return <DeveloperErrorBoundary>{children}</DeveloperErrorBoundary>\n  }\n}\n","import { Button, Snackbar } from '@material-ui/core'\nimport { SnackbarProps } from '@material-ui/core/Snackbar'\nimport { HOUR, MINUTE, SECOND, useInterval, useTimer } from '@speedlo/hooks'\nimport { updateWorker, useReleaseCabinet } from '@speedlo/tools'\nimport { addMilliseconds, formatDistanceStrict } from 'date-fns'\nimport { useObservable, useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { formatDateTime } from '../helpers/formats'\nimport { logUpdate } from '../helpers/logger'\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { i18n } from '../i18n'\nimport { snackStyles } from './SnackProvider'\n\nexport interface IProps {\n  onRestart?(): void\n  autoUpdateDelay?: number\n  postponeTimeout?: number\n  updateCheckInterval?: number\n  serviceWorker?: ServiceWorkerContainer\n  children: ReactNode\n}\n\nexport const UpdateHandler: React.FC<IProps> = ({\n  onRestart = () => window.location.reload(),\n  autoUpdateDelay = 20 * SECOND,\n  postponeTimeout = 2 * MINUTE,\n  updateCheckInterval = process.env.REACT_APP_STAGE === 'prod'\n    ? 1 * HOUR\n    : 5 * MINUTE,\n  serviceWorker = window.navigator.serviceWorker,\n  children,\n}) => {\n  const registrationWorkerRef = React.useRef<ServiceWorkerRegistration | null>(\n    null,\n  )\n  const updateWorkerRef = React.useRef<ServiceWorker | null>(null)\n\n  const state = useObservable({ updatePending: false })\n\n  const { enqueueInfo } = useSnackBar()\n  useReleaseCabinet(({ version, date }) => {\n    enqueueInfo(`Verze aplikace: ${version}, nasazeno: ${formatDateTime(date)}`)\n  })\n\n  useInterval(() => {\n    if (registrationWorkerRef.current) {\n      logUpdate('checking...')\n      registrationWorkerRef.current.update()\n    }\n  }, updateCheckInterval)\n\n  React.useEffect(\n    () => {\n      const onMessage = (event: MessageEvent) => {\n        if (event.data === 'update-applied') {\n          logUpdate('restarting to apply...')\n          onRestart()\n        }\n      }\n      if (serviceWorker) {\n        serviceWorker.addEventListener('message', onMessage)\n        return () => {\n          serviceWorker.removeEventListener('message', onMessage)\n        }\n      } else {\n        logUpdate('serviceWorker is not supported')\n        return () => {\n          /* noop */\n        }\n      }\n    },\n    [onRestart, serviceWorker],\n  )\n\n  React.useEffect(() => {\n    const init = updateWorker.register({\n      onInit: reg => {\n        registrationWorkerRef.current = reg\n      },\n      onUpdate: sw => {\n        updateWorkerRef.current = sw\n        state.updatePending = true\n        logUpdate('new update is available')\n      },\n    })\n    // service worker is normally using load event, but since this\n    // done after the load, it has to be triggered manually\n    init()\n  }, [])\n\n  const onCancel = () => {\n    logUpdate('user postponed')\n    state.updatePending = false\n    setTimeout(() => {\n      logUpdate('reminding update to user again')\n      state.updatePending = true\n    }, postponeTimeout)\n  }\n\n  const onConfirm = () => {\n    state.updatePending = false\n    if (updateWorkerRef.current) {\n      logUpdate('user confirmed')\n      updateWorkerRef.current.postMessage('apply-update')\n    }\n  }\n\n  return useObserver(() => (\n    <>\n      {state.updatePending ? (\n        <UpdateSnack\n          autoHideDuration={autoUpdateDelay}\n          onCancel={onCancel}\n          onConfirm={onConfirm}\n        />\n      ) : null}\n      {children}\n    </>\n  ))\n}\n\ninterface IUpdateSnackProps extends Omit<SnackbarProps, 'open'> {\n  autoHideDuration: number\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport function UpdateSnack(props: IUpdateSnackProps) {\n  const { onConfirm, onCancel, ...rest } = props\n  const now = useTimer({ interval: SECOND, enabled: true })\n  const [endTime] = React.useState(() =>\n    addMilliseconds(now, props.autoHideDuration),\n  )\n  const remainingSeconds = formatDistanceStrict(endTime, now)\n  React.useEffect(\n    () => {\n      if (now >= endTime) {\n        onConfirm()\n      }\n    },\n    [now, endTime],\n  )\n  return (\n    <Snackbar\n      open={true}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center',\n      }}\n      className={snackStyles.variantInfo}\n      message={\n        <span data-testid=\"message\">{i18n.t`Application will be restarted in ${remainingSeconds} to apply available update.`}</span>\n      }\n      disableWindowBlurListener={true}\n      action={[\n        <Button\n          key=\"later\"\n          color=\"secondary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"postpone-button\"\n          onClick={onCancel}\n        >\n          {i18n.t`Postpone update`}\n        </Button>,\n        <Button\n          key=\"confirm\"\n          color=\"primary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"confirm-button\"\n          onClick={onConfirm}\n        >\n          {i18n.t`Restart now`}\n        </Button>,\n      ]}\n      {...rest}\n    />\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Warning } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\n\nconst IconStyled = styled.div`\n  margin-top: 2rem;\n  color: #d39f40;\n  text-align: center;\n`\n\nexport const ErrorPage: React.FC = props => (\n  <FullPageLayout\n    width={15}\n    pageTitle={i18n.t`Application error`}\n    useBackButton={true}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          We are sorry, but there is an internal error in the app. Our team was\n          notified and will fix this soon.\n        </Trans>\n        <IconStyled>\n          <Warning style={{ fontSize: '5rem' }} />\n        </IconStyled>\n      </h3>\n    </Card>\n  </FullPageLayout>\n)\n","import React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { logRouting } from '../helpers/logger'\n\ninterface IProps {}\n\nexport const LogRoute: React.FC<IProps> = props => (\n  <Route>\n    {({ location }) => {\n      logRouting('at %s', location.pathname)\n      return null\n    }}\n  </Route>\n)\n","import debug from 'debug'\nimport { when } from 'mobx'\nimport React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { WithRoot } from '../atoms/WithRoot'\n\nconst log = debug('routing')\n\nexport const RedirectAfterLogin = () => (\n  <Route\n    children={({ location, history }) => (\n      <WithRoot\n        render={root => {\n          if (!root.auth.isAuthenticatedUser) {\n            const route = (location.state && location.state.origin) || '/'\n            const waitForAuthentication = () => root.auth.isAuthenticated\n            const redirectAfterLogin = () => {\n              history.replace(route)\n            }\n            when(waitForAuthentication, redirectAfterLogin)\n            log('will redirect to %s when auth', route)\n          }\n          return null\n        }}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { WithRoot } from '../atoms/WithRoot'\nimport { RedirectToLogin } from './RedirectToLogin'\n\nexport const RedirectAfterLogout = () => (\n  <WithRoot\n    observe={false}\n    render={root => {\n      if (root.auth.isAuthenticated) {\n        root.auth.invalidate()\n        return <RedirectToLogin useOrigin={false} />\n      }\n      return <Redirect to=\"/\" />\n    }}\n  />\n)\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport Pacman from '../atoms/Pacman'\nimport { ErrorPage } from '../pages/ErrorPage'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { LogRoute } from './LogRoute'\nimport { RedirectAfterLogin } from './RedirectAfterLogin'\nimport { RedirectAfterLogout } from './RedirectAfterLogout'\nimport { SecureRoute } from './SecureRoute'\n\nconst PasswordLoginRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordLoginRoute'),\n)\n\nconst PasswordChangeRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordChangeRoute'),\n)\n\nconst PasswordResetRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordResetRoute'),\n)\n\nconst MainDashboardPage = React.lazy(() =>\n  import('../segments/main/pages/MainDashboardPage'),\n)\n\nconst OrderRoutes = React.lazy(() =>\n  import('../segments/order/routes/OrderRoutes'),\n)\n\nconst KitchenRoutes = React.lazy(() =>\n  import('../segments/kitchen/routes/KitchenRoutes'),\n)\n\nconst SettingsRoutes = React.lazy(() =>\n  import('../segments/settings/routes/SettingsRoutes'),\n)\n\nconst OverviewRoutes = React.lazy(() =>\n  import('../segments/overview/routes/OverviewRoutes'),\n)\n\nconst SupportPage = React.lazy(() =>\n  import('../segments/main/pages/SupportPage'),\n)\n\nexport const Routing = () => (\n  <React.Suspense fallback={<Pacman />}>\n    <LogRoute />\n    <RedirectAfterLogin />\n    <Switch>\n      <LazyRoute path=\"/login\" exact={true} component={PasswordLoginRoute} />\n      <LazyRoute path=\"/reset\" exact={true} component={PasswordResetRoute} />\n      <LazyRoute\n        path=\"/recovery/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <LazyRoute\n        path=\"/register/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <SecureRoute path=\"/\" exact={true} component={MainDashboardPage} />\n      <SecureRoute path=\"/order\" component={OrderRoutes} />\n      <SecureRoute path=\"/kitchen\" component={KitchenRoutes} />\n      <SecureRoute path=\"/settings\" component={SettingsRoutes} />\n      <SecureRoute path=\"/overview\" component={OverviewRoutes} />\n      <LazyRoute path=\"/support\" component={SupportPage} />\n      <Route path=\"/error\" component={ErrorPage} />\n      <Route path=\"/logout\" component={RedirectAfterLogout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </React.Suspense>\n)\n","import './App.css'\n\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ConnectionWarning } from './atoms/ConnectionWarning'\nimport { ErrorContainer } from './atoms/ErrorContainer'\nimport Pacman from './atoms/Pacman'\nimport { useRoot } from './atoms/RootProvider'\nimport { SnackProvider } from './atoms/SnackProvider'\nimport { UpdateHandler } from './atoms/UpdateHandler'\nimport { Routing } from './routes/Routing'\n\nexport const App: React.FC = () => {\n  const { user } = useRoot()\n  return (\n    <ErrorContainer prod={process.env.NODE_ENV === 'production'}>\n      <>\n        <ConnectionWarning />\n        <SnackProvider>\n          <UpdateHandler>\n            <Observer>\n              {() => (user.isReady ? <Routing /> : <Pacman />)}\n            </Observer>\n          </UpdateHandler>\n        </SnackProvider>\n      </>\n    </ErrorContainer>\n  )\n}\n","import React from 'react'\nimport { Provider as GoodByeProvider } from 'react-goodbye'\nimport { BrowserRouter } from 'react-router-dom'\n\ninterface IProps {}\n\nexport const Router: React.FC<IProps> = ({ children }) => (\n  <GoodByeProvider>\n    {({ handleGetUserConfirm }) => (\n      <BrowserRouter getUserConfirmation={handleGetUserConfirm}>\n        {children}\n      </BrowserRouter>\n    )}\n  </GoodByeProvider>\n)\n","import { createMuiTheme, MuiThemeProvider } from '@material-ui/core'\nimport React from 'react'\n\ninterface IProps {}\n\nexport const ThemeProvider: React.FC<IProps> = ({ children }) => {\n  const theme = createMuiTheme({\n    typography: {\n      useNextVariants: true,\n    },\n  })\n\n  return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>\n}\n","import './enableDebug'\n\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport { App } from './App'\nimport { RootProvider } from './atoms/RootProvider'\nimport { Router } from './atoms/Router'\nimport { ThemeProvider } from './atoms/ThemeProvider'\nimport { installSentry } from './helpers/sentry'\nimport { I18nManager } from './i18n'\n\nconst Main = () => (\n  <ThemeProvider>\n    <RootProvider>\n      <I18nManager>\n        <Router>\n          <App />\n        </Router>\n      </I18nManager>\n    </RootProvider>\n  </ThemeProvider>\n)\n\ninstallSentry(() => {\n  const rootElement = document.getElementById('root')\n  render(<Main />, rootElement)\n})\n","import React from 'react'\nimport { Route, RouteComponentProps, RouteProps } from 'react-router-dom'\n\nimport Pacman from '../atoms/Pacman'\n\ninterface IProps<Params> extends Omit<RouteProps, 'render' | 'children'> {\n  component: React.ComponentType<RouteComponentProps<Params>>\n}\n\nexport function LazyRoute<Params = {}>({\n  component: Component,\n  ...props\n}: IProps<Params>) {\n  return (\n    <Route\n      {...props}\n      render={routeProps => (\n        <React.Suspense fallback={<Pacman />}>\n          <Component {...routeProps} />\n        </React.Suspense>\n      )}\n    />\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface IProps {\n  iconName: string\n  color?: string\n  fontSize?: number\n  fontSizeUnit?: string\n}\n\nconst getFontSize = ({ fontSize = 1.5, fontSizeUnit = 'rem' }: IProps) => {\n  return fontSize + fontSizeUnit\n}\n\nconst IconSpanStyled = styled.span`\n  font-size: ${getFontSize} !important;\n  color: ${(props: IProps) => props.color};\n`\n\nexport const Icon: React.FC<IProps> = ({\n  iconName,\n  color = Colors.white,\n  fontSize,\n  fontSizeUnit,\n}) =>\n  iconName ? (\n    <IconSpanStyled\n      color={color}\n      fontSize={fontSize}\n      fontSizeUnit={fontSizeUnit}\n      iconName={iconName}\n      className=\"material-icons\"\n    >\n      {iconName}\n    </IconSpanStyled>\n  ) : null\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import gql from 'graphql-tag'\n\nimport { FPriceFragmentDoc } from '../../../graph/generated'\n\nexport const MenuRecipeFragment = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n  ${FPriceFragmentDoc}\n`\n\nexport const MenuRecipeVisibilityMutation = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport const MenuRecipeCreateMutation = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeUpdateMutation = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeDeleteMutation = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n"],"sourceRoot":""}