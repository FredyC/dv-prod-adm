{"version":3,"sources":["segments/login/routes/PasswordLoginRoute.tsx","atoms/FormInputTextBox.tsx","molecules/FormSubmit.tsx","helpers/form.ts","atoms/LoginPageBackground.tsx","assets/bg_login.jpg","assets/bg_login@2x.jpg","segments/login/pages/PasswordLoginPage.tsx","segments/login/molecules/PasswordLoginError.tsx","atoms/NotifyMessage.tsx","segments/login/organisms/PasswordLoginForm.tsx"],"names":["_react","__webpack_require__","_reactRouterDom","_RootProvider","_PasswordLoginPage","PasswordLoginRoute","auth","useRoot","isAuthenticatedUser","default","createElement","Redirect","to","PasswordLoginPage","model","provider","passwordLogin","_reactForm","_styledComponents","_interopRequireWildcard","_validator","_i18n","_styling","inputStyle","css","Spacing","MarginAroundFormComponents","invalidInputStyle","FormInputStyled","input","withConfig","displayName","invalid","FormInputTextBox","forwardRef","_a","inputRef","field","inputWidth","DefaultInputWidth","inputWidthUnit","DefaultSizeUnit","isRequired","validatioName","validationMessage","validate","props","__rest","Field","value","isEmpty","i18n","_","fieldApi","_extends","width","onChange","ev","setTouched","setValue","target","Boolean","error","ref","_form","_TouchButton","children","FormApi","form","TouchButton","color","Colors","green","disabled","isFormValid","submitting","onClick","e","preventDefault","submitForm","formState","errors","Object","keys","length","fieldName","_interopRequireDefault","_bg_login","_bg_login2x","LoginPageBackground","div","module","exports","p","_GridLayout","_LoginPageBackground","_PageTitle","_PasswordLoginError","_PasswordLoginForm","PageTitle","title","GridLayout","layouts","i","x","y","w","h","key","Display","PasswordLoginForm","PasswordLoginError","_mobxReactLite","_NotifyMessage","observer","hasFailed","NotifyMessage","isVisible","isError","errorMessage","NotifyMessageContainerStyled","red","NotifyMessageStyled","data-testid","_react2","_FormInputTextBox","_FormSubmit","LoginContainerStyled","PasswordContainerStyled","SubmitButtonContainerStyled","Form","onSubmit","username","password","requestToken","render","formApi","name","autoFocus","placeholder","type","FormSubmit","Trans","id"],"mappings":"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","file":"static/js/47.bbefeac4.chunk.js","sourcesContent":["import React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { PasswordLoginPage } from '../pages/PasswordLoginPage'\n\nexport const PasswordLoginRoute: React.FC = () => {\n  const { auth } = useRoot()\n  return auth.isAuthenticatedUser ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <PasswordLoginPage model={auth.provider.passwordLogin} />\n  )\n}\n\nexport default PasswordLoginRoute\n","import React from 'react'\nimport { Field, FieldType, ValidationResult } from 'react-form'\nimport styled, { css } from 'styled-components'\nimport { isEmpty } from 'validator'\n\nimport { i18n } from '../i18n'\nimport { Spacing } from '../styling'\n\ninterface IProps extends React.InputHTMLAttributes<never> {\n  field: FieldType\n  defaultValue?: string\n  inputWidth?: number\n  inputWidthUnit?: string\n  isRequired?: boolean\n  validatioName?: string\n  validationMessage?: string\n  validate?(value: string): ValidationResult\n}\n\nexport type TFormInputTextBoxProps = IProps\n\nconst inputStyle = css`\n  margin: ${Spacing.MarginAroundFormComponents};\n`\n\nconst invalidInputStyle = css`\n  border: 1px red solid;\n`\n\nexport const FormInputStyled = styled.input`\n  ${inputStyle};\n  ${({ invalid }: { invalid?: boolean }) => invalid && invalidInputStyle};\n`\n\nexport const FormInputTextBox = React.forwardRef<HTMLInputElement, IProps>(\n  (\n    {\n      field,\n      inputWidth = Spacing.DefaultInputWidth,\n      inputWidthUnit = Spacing.DefaultSizeUnit,\n      isRequired,\n      validatioName,\n      validationMessage,\n      validate,\n      ...props\n    },\n    inputRef,\n  ) => (\n    <Field\n      field={field}\n      validate={\n        validate ||\n        (value => {\n          if (isRequired && isEmpty(value + '')) {\n            if (validationMessage) {\n              return validationMessage\n            }\n            return i18n.t`${validatioName} is required`\n          }\n          return null\n        })\n      }\n    >\n      {fieldApi => (\n        <FormInputStyled\n          width={`${inputWidth}${inputWidthUnit}`}\n          value={!fieldApi.value && fieldApi.value !== 0 ? '' : fieldApi.value}\n          onChange={ev => {\n            fieldApi.setTouched(true)\n            fieldApi.setValue(ev.target.value)\n          }}\n          invalid={Boolean(fieldApi.error)}\n          // @ts-ignore\n          ref={inputRef}\n          {...props}\n        />\n      )}\n    </Field>\n  ),\n)\n","import React from 'react'\nimport { FormApi } from 'react-form'\n\nimport { isFormValid } from '../helpers/form'\nimport { ITouchButtonProps, TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\ninterface IProps extends ITouchButtonProps {}\n\nexport const FormSubmit: React.SFC<IProps> = ({ children, ...props }) => (\n  <FormApi>\n    {form => (\n      <TouchButton\n        color={Colors.green}\n        disabled={!isFormValid(form) || form.submitting}\n        onClick={e => {\n          e.preventDefault()\n          form.submitForm(e)\n        }}\n        {...props}\n      >\n        {children}\n      </TouchButton>\n    )}\n  </FormApi>\n)\n","import { IFormState } from 'react-form'\nimport { isEmpty } from 'validator'\n\nimport { i18n } from '../i18n'\n\nexport function isFormValid(formState: IFormState) {\n  return !formState.errors || Object.keys(formState.errors).length === 0\n}\n\nexport function validateIsRequired(fieldName: string) {\n  return (value: string) =>\n    isEmpty(value + '') ? i18n.t`${fieldName} must be entered` : null\n}\n","import styled from 'styled-components'\n\nimport backgroundImage from '../assets/bg_login.jpg'\nimport backgroundImage2x from '../assets/bg_login@2x.jpg'\n\nexport const LoginPageBackground = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-image: url(${backgroundImage});\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n\n  @media only screen and (-webkit-min-device-pixel-ratio: 1.3),\n    only screen and (min--moz-device-pixel-ratio: 1.3),\n    only screen and (-o-min-device-pixel-ratio: 2.6/2),\n    only screen and (min-device-pixel-ratio: 1.3),\n    only screen and (min-width: 1024px) {\n    background-image: url(${backgroundImage2x});\n  }\n`\n","module.exports = __webpack_public_path__ + \"static/media/bg_login.382d98be.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_login@2x.35ab1818.jpg\";","import React from 'react'\n\nimport { GridLayout } from '../../../atoms/GridLayout'\nimport { LoginPageBackground } from '../../../atoms/LoginPageBackground'\nimport { PageTitle } from '../../../atoms/PageTitle'\nimport { i18n } from '../../../i18n'\nimport { TPasswordLoginModel } from '../models/PasswordLoginModel'\nimport { PasswordLoginError } from '../molecules/PasswordLoginError'\nimport { PasswordLoginForm } from '../organisms/PasswordLoginForm'\n\ninterface IPasswordLoginPageProps {\n  model: TPasswordLoginModel\n}\n\nfunction getLayout() {\n  return [\n    { i: 'title', x: 6, y: 2, w: 8, h: 1 },\n    { i: 'loginform', x: 6, y: 3, w: 8, h: 4 },\n  ]\n}\n\nexport const PasswordLoginPage: React.SFC<IPasswordLoginPageProps> = ({\n  model,\n}) => (\n  <LoginPageBackground>\n    <PageTitle title={i18n.t`Login page`} />\n    <GridLayout layouts={getLayout()}>\n      <div key=\"title\">\n        <PageTitle.Display />\n      </div>\n      <div key=\"loginform\">\n        <PasswordLoginForm model={model} />\n      </div>\n    </GridLayout>\n    <PasswordLoginError model={model} />\n  </LoginPageBackground>\n)\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { NotifyMessage } from '../../../atoms/NotifyMessage'\nimport { TPasswordLoginModel } from '../models/PasswordLoginModel'\n\ninterface IPasswordLoginErrorProps {\n  model: TPasswordLoginModel\n}\n\nexport const PasswordLoginError = observer<IPasswordLoginErrorProps>(\n  ({ model }) =>\n    model.hasFailed ? (\n      <NotifyMessage isVisible={true} isError={true}>\n        {model.errorMessage}\n      </NotifyMessage>\n    ) : null,\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface INotifyMessageProps {\n  isError?: Boolean\n  isVisible: Boolean\n  onClick?(): void\n}\n\nconst backgroundProperty = (props: INotifyMessageProps) =>\n  props.isError ? Colors.red : Colors.green\n\nconst NotifyMessageContainerStyled = styled.div`\n  position: relative;\n  border-radius: 1rem;\n  width: 60%;\n  height: 3.9rem;\n  opacity: 0.85;\n  left: 20%;\n  background: ${backgroundProperty};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst NotifyMessageStyled = styled.div`\n  color: white;\n  text-align: center;\n  margin: 0 0.5rem 0.4rem 0.5rem;\n  font-size: 1.375rem;\n`\n\nexport const NotifyMessage: React.SFC<INotifyMessageProps> = ({\n  children,\n  isVisible,\n  isError = false,\n  onClick,\n  ...props\n}) =>\n  isVisible ? (\n    <NotifyMessageContainerStyled\n      onClick={onClick}\n      isVisible={isVisible}\n      isError={isError}\n      {...props}\n    >\n      <NotifyMessageStyled data-testid={`notify${isError ? '-error' : ''}`}>\n        {children}\n      </NotifyMessageStyled>\n    </NotifyMessageContainerStyled>\n  ) : null\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport { Form } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { i18n } from '../../../i18n'\nimport { FormSubmit } from '../../../molecules/FormSubmit'\nimport { TPasswordLoginModel } from '../models/PasswordLoginModel'\n\ninterface IPasswordLoginFormProps {\n  model: TPasswordLoginModel\n}\n\nconst LoginContainerStyled = styled.div`\n  display: inline-block;\n  margin: 0.5rem;\n`\nconst PasswordContainerStyled = styled.div`\n  margin: 0.5rem;\n`\nconst SubmitButtonContainerStyled = styled.div`\n  display: inline-block;\n  width: 14rem;\n  margin: 0.5rem;\n`\n\ninterface IFormValues {\n  username: string\n  password: string\n}\n\nexport const PasswordLoginForm: React.SFC<IPasswordLoginFormProps> = ({\n  model,\n}) => (\n  <Form\n    onSubmit={({ username, password }: IFormValues) =>\n      model.requestToken(username, password)\n    }\n    render={formApi => (\n      <form onSubmit={formApi.submitForm}>\n        <LoginContainerStyled>\n          <FormInputTextBox\n            field=\"username\"\n            name=\"username\"\n            isRequired={true}\n            validatioName={i18n.t`username`}\n            autoFocus={true}\n            placeholder={i18n.t`username`}\n          />\n        </LoginContainerStyled>\n\n        <PasswordContainerStyled>\n          <FormInputTextBox\n            field=\"password\"\n            name=\"password\"\n            isRequired={true}\n            validatioName={i18n.t`password`}\n            type=\"password\"\n            placeholder={i18n.t`password`}\n          />\n        </PasswordContainerStyled>\n\n        <SubmitButtonContainerStyled>\n          <FormSubmit>\n            <Trans>Sign-in</Trans>\n          </FormSubmit>\n        </SubmitButtonContainerStyled>\n      </form>\n    )}\n  />\n)\n"],"sourceRoot":""}