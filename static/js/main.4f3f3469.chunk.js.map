{"version":3,"sources":["segments/login/login.routes.ts","routes/SecureRoute.tsx","tools/datefns.ts","atoms/PageLoader.tsx","molecules/TouchButton.tsx","styling.ts","atoms/Sizer.tsx","segments/dashboard/dashboard.routes.ts","helpers/formats.ts","tools/ramda.ts","models/BaseModel.ts","atoms/Icon.tsx","helpers/gps.ts","atoms/PageTitle.tsx","segments/stock/models/StockTransferItem.ts","atoms/Card.tsx","hooks/useSnackBar.ts","molecules/FullPageLayout.tsx","helpers/numeral.ts","pages/NotFoundPage.tsx","i18n.tsx","routes/RedirectToLogin.tsx","helpers/offline.ts","context/RootContext.ts","helpers/persistModel.ts","segments/login/models/PasswordLoginModel.ts","segments/login/models/LoginProviderModel.ts","models/AuthModel.ts","models/ConfigModel.ts","models/UserModel.ts","helpers/faker.ts","segments/createorder/models/CreateOrderModel.ts","models/MapModel.ts","segments/order/models/OrderMapModel.ts","segments/order/models/OrderModel.ts","segments/overview/models/StatisticsModel.ts","segments/businesshours/models/BusinessHoursModel.ts","components/FilterInput/FilterInputModel.ts","segments/menu/models/MenuModel.ts","segments/settings/models/SettingsModel.ts","segments/stock/models/StockTransferModel.ts","segments/stock/models/StockModel.ts","segments/zones/models/ZoneMapModel.ts","segments/zones/models/ZoneModel.ts","models/AudioModel.ts","models/RootModel.ts","atoms/RootProvider.tsx","graph/createClient.ts","helpers/logger.ts","segments/businesshours/businesshours.types.ts","atoms/SizerButton.tsx","atoms/MarginBox.tsx","segments/settings/settings.routes.ts","atoms/PageLayoutGridItem.tsx","atoms/SoundControl.tsx","molecules/LiveClock.tsx","organisms/LogoutWidget.tsx","molecules/HomeButton.tsx","molecules/PageLayoutResponsive.tsx","segments/overview/overview.routes.ts","app/Responsive.tsx","segments/order/order.routes.ts","segments/customerscreen/customerscreen.routes.ts","segments/stock/stock.routes.ts","helpers/filter.ts","segments/kitchen/kitchen.routes.ts","hooks/useIntervalSound.ts","hooks/useAudioCapabilityCheck.ts","hooks/useAudioPlayer.ts","atoms/WithRoot.tsx","atoms/PageLayoutGrid.tsx","assets/connectionWarning.mp3","segments/order/models/OrderListModel.ts","assets/loader.gif","assets/bg_antracit.jpg","enableDebug.ts","config.ts","../node_modules/numeral/locales lazy /^/.*$/ groupOptions: {} namespace object","../node_modules/date-fns/locale lazy /^/.*/index/.js$/ groupOptions: {} namespace object","../ /^/.*/messages/.po$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","graph/generated.ts","atoms/ConnectionWarning.tsx","routes/LogRoute.tsx","routes/RedirectAfterLogin.tsx","routes/RedirectAfterLogout.tsx","routes/Routing.tsx","pages/ErrorPage.tsx","pages/ServiceUnreachablePage.tsx","app/DefaultErrorHandler.tsx","app/Router.tsx","app/SnackProvider.tsx","app/UpdateHandler.tsx","app/UserBootstrap.tsx","app/AppMain.tsx","app/AppProvider.tsx","app/GlobalStyles.tsx","index.tsx"],"names":["ROUTE_AUTH_LOGIN","ROUTE_AUTH_LOGOUT","ROUTE_AUTH_RESET_PASSWORD","ROUTE_AUTH_RECOVERY","ROUTE_AUTH_REGISTER","SecureRoute","redirect","props","lazy","useRoot","auth","isAuthenticatedUser","component","path","exact","DFLocale","formatWithLocale","RM","curry","format","value","DF","locale","changeDFLocale","lang","a","async","default","forkCSLang","timeFormats","full","long","medium","short","formatLong","time","dirtyOptions","options","width","String","StyledPageLoader","styled","div","PageLoader","role","src","loaderGif","alt","appConfig","pageTitleSuffix","height","applyAlpha","alphaValue","applyAlphaToColor","color","StyledTouchButton","button","Spacing","ButtonHeight","DefaultSizeUnit","Radiuses","Button","Colors","white","mediaDesktop","mediaMobile","ButtonLabelStyled","ButtonLabelNextToIconStyled","TouchButton","React","forwardRef","forwardedRef","children","icon","iconColor","iconSize","greyMiddle","textNextToIcon","badge","text","type","ref","fontSize","Color","alpha","string","MarginAroundFormComponents","Small","Middle","LayoutGridCellMargin","DashboardButtonHeight","DefaultInputWidth","DefaultLabelWidth","ButtonColumnWidthPx","PageHeaderHeight","OrderFlowMenuButtonWidth","FontSizes","InfoMessageFontSize","CompactCard","CompactCardBig","widthProperty","widthUnit","undefined","heightProperty","heightUnit","StyledSizer","Sizer","margin","className","wrap","ROUTE_MAIN","ROUTE_SUPPORT","fullDateFormat","formatFullDate","formatFullDateTime","formatSystemTime","formatTime","formatTimeWithoutTodayDate","dateTime","isSameDay","Date","formatNumber","num","numeral","formatPrice","price","currencyCode","priceNumber","formatAddress","address","street","houseNumber","city","state","formatFullName","user","lastName","firstName","trim","formatBranchName","branch","name","idProp","idPropEq","BaseModel","types","model","views","self","debug","getPath","getRoot","StyledIcon","span","fontSizeUnit","Icon","memo","onClick","logError","iconNode","createElement","gpsToLatLng","gps","google","maps","LatLng","Number","latitude","longitude","gpsToLatLngLit","lat","lng","latLngToGps","latLng","generatePolygon","center","metersRadius","pointsCount","Array","fill","map","_","idx","degree","computeDestinationPoint","TitleStyled","h1","greyLight","observableTitles","observable","array","autorun","lastTitle","from","pop","document","title","PageTitle","push","this","prevProps","findIndex","equals","splice","remove","Component","Route","render","Display","join","DEFAULT_IMPORT","DEFAULT_RAW_QUANTITY","DEFAULT_QUANTITY","DEFAULT_MAX","MAX_SAFE_INTEGER","MIN_TRANSFER_QUANTITY","TransferItem","id","identifier","import","optional","boolean","rawQuantity","max","number","length","parsedQuantity","parseNumber","isNaN","quantity","amountUnderflow","amountOverflow","actions","setRawQuantity","trimLeft","reset","Card","getBackgroundColor","getTextColor","getPadding","getMinHeight","applyStretchToParentStyle","padding","minHeight","lighten","textColor","black","stretchToParent","css","displayName","successVariant","variant","errorVariant","warningVariant","infoVariant","useSnackBar","enqueueSnackbar","useSnackbarOrig","enqueueSuccess","useCallback","errorMessage","enqueueError","enqueueWarning","enqueueInfo","FullPageLayout","gridColumn","changeNumeralLocale","startsOrEndsWithSeparator","NaN","trimmed","normalized","localeData","delimiters","decimal","thousands","replace","RegExp","normalizeNumber","test","NotFoundPage","i18n","setupI18n","I18nManager","useState","forceUpdate","useReactionNow","language","supportedLanguages","includes","logLang","Promise","resolve","all","loadCatalog","then","activate","setupLanguage","languages","LocaleResolver","DETECTORS","NavigatorDetector","TRANSFORMERS","LanguageOnlyTransformer","getLocales","find","loc","fallbackLanguage","detectLanguage","success","i","Children","only","catalog","load","log","RedirectToLogin","useOrigin","match","location","to","pathname","origin","isOnline","box","navigator","onLine","window","addEventListener","set","isNetworkOffline","get","whenGoingOnline","cb","observe","change","oldValue","newValue","RootContext","createContext","persistenceKey","persistModel","modelName","getType","stateKey","writeState","snapshot","localforage","setItem","getItem","applySnapshot","logPersistence","getSnapshot","removeItem","onSnapshot","getLoginUrl","username","password","endpoint","PasswordLoginModel","named","volatile","errorCode","Boolean","setFailure","code","message","setSuccess","token","userId","getParent","authenticate","requestToken","url","fetch","headers","Accept","response","json","payload","status","error","Sentry","withScope","scope","setExtra","setLevel","Severity","Debug","captureException","LoginProviderModel","passwordLogin","AuthModel","maybeNull","provider","isAuthenticated","invalidate","ConfigModel","orderListPollIntervalSec","orderListSoundIntervalSec","UserModel","isLoaded","branches","brands","access","permissions","canCancelOrders","canCreateOrder","Error","findBranchById","branchId","filterBranches","predicate","filter","canQuery","queryName","queries","has","toLowerCase","canMutate","mutationName","mutations","root","applyUserData","uniqBy","prop","applyPermissions","applyAccess","makeSet","fields","Set","compose","toLower","subscriptions","finishBootstrap","setLanguage","setBranches","userBranches","faker","fakerCZ","CreateOrderModel","maybe","getDefaultProps","Object","assign","defaultBranch","values","deliveryType","DeliveryTypeEnum","Messenger","deliverAt","deliveryAddress","fakeAddress","isDelivery","hasAddress","clearGps","currentBranch","paymentTypeEnum","PaymentTypeEnum","Cash","paymentGateEnum","PaymentGateEnum","phone","call","phonePrefix","prefix","country","isPhoneInputValid","formValues","emails","email","phones","vamCustomer","lastOrder","defaults","note","fakeValues","orderId","callEventId","eventId","customer","paymentType","paymentGate","resetOrder","resetModel","setOrder","useLocation","clearLocation","setMinimalPrice","minimalPrice","selectBranch","userIsCalling","setDeliveryMinutes","minutes","deliveryMinutes","setPaymentValues","updateFormValues","touched","pick","keys","updateFromVam","updateFormWithFakeValues","internet","phoneNumberFormat","lorem","sentence","slice","resolver","makeResolver","selectSidedishesForRecipe","recipeId","sidedishMode","sidedishRootId","selectSidedishesForItem","itemId","sidedishSelectionConfirmed","sidedishes","isConfirmed","sidedishSelectionCancel","paymentMethod","notDeliveryLocation","sidedishSelection","GPSCzechia","MapModel","zoom","mapRef","setMapRef","updateZoom","getZoom","updatePosition","getCenter","panTo","OrderMapModel","activeDriverId","activateDriver","driverId","position","OrderModel","list","OrderListModel","clearBranchFilter","StatisticsModel","stockBrandId","stockSearchInput","setStockBrand","brandId","setStockFilter","BusinessHoursModel","specificMode","enumeration","ESpecificHourMode","TIMESPAN","changeSpecificMode","mode","FilterInputModel","getPredicate","exactMatch","partialMatch","partialMatchPred","isPartialMatch","predicates","propEq","T","propSatisfies","cond","getCodeAndNamePredicate","setValue","MenuModel","categoryFilterId","settings","defaultLanguage","currentLanguage","setCategoryFilter","categoryId","SettingsModel","selectedBranchId","businessHours","menu","useBranch","StockTransferModel","transferItems","importMode","targetBranchId","targetId","shouldNotImportSome","size","isImportingItem","item","getItemRawQuantity","getItemTransferQuantity","getItemLimit","isItemQuantityValid","isQuantityValid","isImportMode","setTargetId","initItems","items","clearItems","forEach","put","toggleImportAll","isImportingAll","toggleImportItem","setQuantity","clearTransferState","clear","toggleImportMode","StockModel","transfer","ZoneMapModel","ZoneModel","zoneTypes","ZoneTypeEnum","Area","Return","brand","F","pathSatisfies","setBranchFilter","setBrandFilter","brandBranches","head","setZoneTypes","clearBrandFilter","AudioModel","userEnabled","canPlay","audioBlocked","setUserEnabled","enabled","setCanPlay","blockAudio","RootModel","audio","order","createOrder","zone","config","statistics","stock","RootProvider","isInit","setInit","create","createDefaultApolloClient","createAuthLink","enableTokenCache","getToken","onInvalidToken","createLogLink","process","createRetryLink","createOfflineLink","createDateParserLink","CompanyBranch","BusinessHour","BusinessHourInterval","FinancialReport","GeoPositionWithTimestamp","Order","OrderStateCategoryRelation","SectorRecipe","Occasion","createNetworkLink","useUploads","createApolloClient","client","useEffect","persistedModels","Provider","useContext","useColors","logAuth","logUpdate","console","SizerButton","MarginBox","top","bottom","left","right","ROUTE_SETTINGS","ROUTE_SETTINGS_MENU","ROUTE_SETTINGS_ZONES","ROUTE_SETTINGS_USER","ROUTE_SETTINGS_HOURS","ROUTE_SETTINGS_PREFS","PageLayoutGridItem","gridColumnSpan","toString","indexOf","gridRow","gridRowSpan","gridColumnInMobile","gridColumnSpanInMobile","gridRowInMobile","gridRowSpanInMobile","SoundControl","useObserver","green","red","VolumeUp","VolumeOff","Dialog","open","askForAudio","DialogContent","Typography","DialogActions","LiveClock","now","useTimer","interval","SECOND","StyledLogoutWidget","LogoutWidget","observer","useQLogoutWidget","skip","fetchPolicy","data","loading","refetch","useReaction","data-testid","ExitToApp","renderData","HomeButtonStyled","HomeButton","goBack","backRoute","history","useRouterContext","ChevronLeft","Home","StyledPageLayoutResponsive","isScrolledDown","topContent","mediaSmallMobile","PageLayoutResponsive","pageTitle","hideLogoutWidget","showSoundControl","showHomeButton","useBackButton","isForIconDashboard","y","useWindowScroll","PageLayoutGrid","ROUTE_OVERVIEW_DASHBOARD","ROUTE_OVERVIEW_CLOSURE","ROUTE_OVERVIEW_CLOSURE_HISTORY","ROUTE_OVERVIEW_STATS_SALES","ROUTE_OVERVIEW_STATS_ORDERS","mobileBreakpoint","mobileSmallBreakpoint","desktopBreakpoint","Desktop","minWidth","Mobile","maxWidth","useResponsive","isMobile","isSmallMobile","isDesktop","isTablet","setState","useLayoutEffect","update","removeEventListener","innerWidth","ROUTE_ORDER_OVERVIEW","ROUTE_ORDER_CREATE","ROUTE_ORDER_MAP","ROUTE_CUSTOMER_SCREEN_SETUP","ROUTE_CUSTOMER_SCREEN","ROUTE_STOCK","ROUTE_STOCK_OVERVIEW","ROUTE_STOCK_DEPOSIT","ROUTE_STOCK_TRANSFER","ROUTE_STOCK_STATS","searchValue","search","toLocaleLowerCase","propValue","ROUTE_KITCHEN","ROUTE_KITCHEN_COMPLETION","useIntervalSound","soundUrl","shouldPlay","intervalSec","forcePlayNow","audioModel","useEvent","maybePromise","play","Reflect","catch","err","paused","useAudioCapabilityCheck","useAudioPlayer","controls","playIfYouCan","volume","useInterval","startTimer","stopTimer","stopNow","pause","seek","useAutorun","useAudio","autoPlay","loop","WithRoot","getGridTemplatesRows","getGridGap","getDashboardButtonHeight","module","exports","collapsedCategories","OrderStateCategoryEnum","Finished","extend","detailOpen","isOrderDetailOpen","isCategoryCollapsed","categoryCode","toggleOrderDetail","delete","add","toggleCategoryCollapse","category","index","focusOrderDetail","setImmediate","scroller","scrollTo","smooth","containerId","absolute","offset","observerOrderDetail","bind","localStorage","googleMapsApi","sentryDSN","webpackAsyncContext","req","__webpack_require__","o","e","ids","t","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","CountryEnum","WeekDayEnum","OrderStateCategoryTargetEnum","LanguageEnum","MobilePlatformEnum","WareUnitEnum","AvailabilityTypeEnum","OrderOriginCategoryEnum","AllergenEnum","WarePriceTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","DeliveryStateEnum","OrderStateEnum","OrderBillingTypeEnum","OrderRecipeStateEnum","OrderOnlineStateEnum","OrderOriginEnum","WareCategoryTypeEnum","SectorTypeEnum","ShiftUserStateEnum","SettingTypeEnum","WareRequirementEnum","SubscriptionActionType","FGeoPointFragmentDoc","gql","FCompanyBranchFragmentDoc","FOrderStateCategoryFragmentDoc","FPriceFragmentDoc","FPriceWithCurrencyFragmentDoc","FRegularBusinessHourFragmentDoc","FSpecificBusinessHourFragmentDoc","FWeekdayFragmentDoc","FPaymentMethodFragmentDoc","FBranchPaymentMethodsFragmentDoc","FCreateOrderItemFragmentDoc","FCreateOrderFragmentDoc","FCreateOrderRecipeSidedishesFragmentDoc","FOrderCustomerLocationFragmentDoc","FOrderCustomerFragmentDoc","FOrderMenuRecipeFragmentDoc","FOrderMenuCategoryFragmentDoc","FOrderTimingFragmentDoc","FCustomerScreenOrderFragmentDoc","FKitchenRecipeFragmentDoc","FKitchenOrderStateFragmentDoc","FKitchenOrderRecipeFragmentDoc","FKitchenOrderBaseFragmentDoc","FKitchenCompletionOrderFragmentDoc","FAddressFragmentDoc","FEmailFragmentDoc","FPhoneFragmentDoc","FCustomerFragmentDoc","FKitchenOrderFragmentDoc","FKitchenSectorStateFragmentDoc","FKitchenSectorRecipeFragmentDoc","FMenuCategoryFragmentDoc","FMenuCategoryLocalizedFragmentDoc","FMenuCategoryInFormFragmentDoc","FMenuAssocRecipeFragmentDoc","FMenuRecipeFragmentDoc","FMenuRecipeLocalizedFragmentDoc","FMenuCategoryInListFragmentDoc","FMenuRecipeInFormFragmentDoc","FMenuRecipePricingFragmentDoc","FMenuRecipeInListFragmentDoc","FMenuAllergenFragmentDoc","FMenuWareUnitFragmentDoc","FMenuStockItemFragmentDoc","FOrderDetailWareFragmentDoc","FUserNameFragmentDoc","FDriverFragmentDoc","FOrderDriverFragmentDoc","FOrderMapDriverFragmentDoc","FOrderMapDeviceFragmentDoc","FOrderMapDeliveryFragmentDoc","FOrderMapOrderFragmentDoc","FOrderPaymentMethodsFragmentDoc","FOrderTickerFragmentDoc","FOrderTotalsFragmentDoc","FZoneFragmentDoc","FZonePriceRangeFragmentDoc","FZoneInFormFragmentDoc","FZoneInListFragmentDoc","QFilterCashboxesDocument","useQFilterCashboxes","variables","baseOptions","Hooks","QFilterCashiersDocument","useQFilterCashiers","QFilterCountriesDocument","useQFilterCountries","QFilterDriversDocument","useQFilterDrivers","QFilterOccasionsDocument","useQFilterOccasions","QFilterOriginsDocument","useQFilterOrigins","QFilterSectorsDocument","useQFilterSectors","MOrderStateDocument","useMOrderState","MSetPriorityOrderDocument","useMSetPriorityOrder","QLogoutWidgetDocument","MBusinessHoursSubmitDocument","useMBusinessHoursSubmit","MSpecificBusinessHourCreateDocument","useMSpecificBusinessHourCreate","MSpecificBusinessHourDeleteDocument","useMSpecificBusinessHourDelete","QRegularBusinessHoursDocument","useQRegularBusinessHours","QSpecificBusinessHoursDocument","useQSpecificBusinessHours","MAddOrderPromoDocument","useMAddOrderPromo","MAddToSectorDocument","useMAddToSector","MCancelOrderDocument","useMCancelOrder","MCreateOrderAcceptDocument","useMCreateOrderAccept","MCreateOrderAddRecipeDocument","useMCreateOrderAddRecipe","MCreateOrderNewDocument","useMCreateOrderNew","MCreateOrderRemoveItemDocument","useMCreateOrderRemoveItem","MCreateOrderUpdateDocument","useMCreateOrderUpdate","MCreateOrderUpdateItemDocument","useMCreateOrderUpdateItem","MRemoveOrderPromoDocument","useMRemoveOrderPromo","QBranchPaymentMethodsDocument","useQBranchPaymentMethods","QCreateOrderItemDocument","QCreateOrderRecipeDocument","QOrderCartDocument","useQOrderCart","QOrderFormDeliverAtDefaultsDocument","useQOrderFormDeliverAtDefaults","QOrderFormPromoDocument","useQOrderFormPromo","QOrderMenuDocument","useQOrderMenu","QOrderVamCustomerDocument","useQOrderVamCustomer","QValidateLocationDocument","QCustomerScreenOrderListDocument","useQCustomerScreenOrderList","SCustomerScreenOrderListDocument","useSCustomerScreenOrderList","MKitchenOrderHandleDocument","useMKitchenOrderHandle","MKitchenOrderRecipeHandleDocument","useMKitchenOrderRecipeHandle","MKitchenSectorHandleDocument","useMKitchenSectorHandle","MKitchenSectorRecipeHandleDocument","useMKitchenSectorRecipeHandle","QKitchenCompletionOrderListDocument","useQKitchenCompletionOrderList","QKitchenOrderListDocument","useQKitchenOrderList","QKitchenSectorListDocument","useQKitchenSectorList","SKitchenCompletionOrderListDocument","useSKitchenCompletionOrderList","SKitchenOrderListDocument","useSKitchenOrderList","SKitchenSectorListDocument","useSKitchenSectorList","MPasswordChangeDocument","useMPasswordChange","QUserBootstrapDocument","useQUserBootstrap","MMenuCategoryCreateDocument","useMMenuCategoryCreate","MMenuCategoryDeleteDocument","useMMenuCategoryDelete","MMenuCategorySortDocument","useMMenuCategorySort","MMenuCategoryUpdateDocument","useMMenuCategoryUpdate","MMenuCategoryVisibilityDocument","useMMenuCategoryVisibility","QMenuCategoryColorsDocument","useQMenuCategoryColors","QMenuCategoryFilterDocument","useQMenuCategoryFilter","QMenuCategoryFormDocument","useLazyQMenuCategoryForm","QMenuCategoryFormTransDocument","useQMenuCategoryFormTrans","QMenuCategoryListDocument","useQMenuCategoryList","QMenuCategoryOriginsDocument","useQMenuCategoryOrigins","QMenuAllergensDocument","useQMenuAllergens","QMenuGuideDownloadDocument","useQMenuGuideDownload","QMenuVatsDocument","useQMenuVats","QMenuWareUnitsDocument","useQMenuWareUnits","MMenuRecipeCreateDocument","useMMenuRecipeCreate","MMenuRecipeDeleteDocument","useMMenuRecipeDelete","MMenuRecipeUpdateDocument","useMMenuRecipeUpdate","MMenuRecipeVisibilityDocument","useMMenuRecipeVisibility","QMenuRecipeDefaultsDocument","useLazyQMenuRecipeDefaults","QMenuRecipeFormDocument","useLazyQMenuRecipeForm","QMenuRecipeFormAssocDocument","useQMenuRecipeFormAssoc","QMenuRecipeFormTransDocument","useQMenuRecipeFormTrans","QMenuRecipeListDocument","useQMenuRecipeList","MMenuStockCreateDocument","useMMenuStockCreate","MMenuStockDeleteDocument","useMMenuStockDelete","MMenuStockQuantityDocument","useMMenuStockQuantity","MMenuStockUpdateDocument","useMMenuStockUpdate","QMenuStockDefaultsDocument","useLazyQMenuStockDefaults","QMenuStockFormDocument","useLazyQMenuStockForm","QMenuStockListDocument","useQMenuStockList","QStockRecipesDocument","useQStockRecipes","MBranchDefaultTimeDocument","useMBranchDefaultTime","MChangePaymentMethodDocument","useMChangePaymentMethod","MFastCloseDocument","useMFastClose","MOrderChangeToPickupDocument","useMOrderChangeToPickup","MOrderTimeNotificationDocument","useMOrderTimeNotification","MRemoveOrderDriverDocument","useMRemoveOrderDriver","MSelectOrderDriverDocument","useMSelectOrderDriver","MTransferOrderDocument","useMTransferOrder","QBranchDefeaultTimesDocument","useQBranchDefeaultTimes","QIsBranchOpenDocument","useQIsBranchOpen","QOrderDetailDocument","useQOrderDetail","QOrderDriversDocument","useQOrderDrivers","QOrderListDocument","useQOrderList","QOrderListCategoriesDocument","useQOrderListCategories","QOrderMapDeliveriesDocument","useQOrderMapDeliveries","QOrderMapOrdersDocument","useQOrderMapOrders","QOrderReturnZonesDocument","useQOrderReturnZones","QOrdersCategoryCountDocument","useQOrdersCategoryCount","QOrderStateDocument","useQOrderState","SDriverReturnsDocument","useSDriverReturns","SOrderCallDocument","useSOrderCall","SOrderListDocument","useSOrderList","SOrderMapDeliveriesDocument","useSOrderMapDeliveries","SOrderMapOrdersDocument","useSOrderMapOrders","SOrdersCategoryCountDocument","useSOrdersCategoryCount","MFinancialReportCreateDocument","useMFinancialReportCreate","QClosureHistoryDocument","useLazyQClosureHistory","QClosureReportDocument","useQClosureReport","QStatsOrdersDocument","useQStatsOrders","QStatsOrdersCountsDocument","useQStatsOrdersCounts","QStatsOrdersListDocument","useLazyQStatsOrdersList","QStatsSalesDocument","useQStatsSales","MUserMenuLanguageDocument","useMUserMenuLanguage","QUserMenuLanguagesDocument","useQUserMenuLanguages","MCreateTransfersDocument","useMCreateTransfers","QMenuStockDepositDocument","useQMenuStockDeposit","QStockForTransferDocument","useQStockForTransfer","QStockStatsDocument","useQStockStats","MZoneCreateDocument","useMZoneCreate","MZoneDeleteDocument","useMZoneDelete","MZoneUpdateDocument","useMZoneUpdate","MZoneUpdatePriorityDocument","useMZoneUpdatePriority","QZoneColorsDocument","useQZoneColors","QZoneFormDocument","useQZoneForm","QZoneListDocument","useQZoneList","MessageStyled","ConnectionWarning","connectionWarningSound","disableBackdropClick","disableEscapeKeyDown","WarningTwoTone","LogRoute","RedirectAfterLogin","route","when","RedirectAfterLogout","apolloClient","useApolloClient","cache","PasswordLoginRoute","PasswordChangeRoute","PasswordResetRoute","MainDashboardPage","OrderRouting","KitchenRouting","SettingsRouting","OverviewRouting","StockRouting","SupportPage","CustomerScreenRouting","Routing","Suspense","fallback","IconStyled","orange","Center","ErrorPage","onFeedback","Warning","style","ContactSupport","reload","Autorenew","ServiceUnreachablePage","onRetry","href","OfflineBolt","Cached","makeError","DefaultErrorHandler","errorKind","setErrorKind","onUnhandledError","isChunkError","flushSentry","isApolloError","isNetworkUnreachableError","onNetworkError","isUnreachable","onOperationError","operationName","onUserErrors","messages","onError","showFeedback","showReportDialog","labelClose","Router","handleGetUserConfirm","getUserConfirmation","successStyle","snackStyles","variantSuccess","variantInfo","variantError","variantWarning","SnackProvider","maxSnack","classes","anchorOrigin","horizontal","vertical","UpdateHandler","onRestart","autoUpdateDelay","postponeTimeout","MINUTE","updateCheckInterval","HOUR","serviceWorker","registrationWorkerRef","useRef","updateWorkerRef","useObservable","updatePending","applyingUpdate","current","onMessage","event","userAgent","updateWorker","unregister","register","onInit","reg","onUpdate","sw","init","onCancel","setTimeout","onConfirm","postMessage","UpdateSnack","autoHideDuration","rest","addMilliseconds","endTime","remainingSeconds","formatDistanceStrict","Snackbar","disableWindowBlurListener","action","key","UserBootstrap","authModel","userModel","intercept","configureScope","setUser","rawCode","setExtras","roles","AppMain","useReleaseCabinet","isReady","AppProvider","useSentryInit","GlobalStyles","createGlobalStyle","backgroundImage","rootElement","getElementById"],"mappings":"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EjBuW,GAAa,WACXC,WAASC,SAAT,gBAA2BzW,GAAW,CACpC0W,OAAQ,iBACRC,YAAa,aACbC,UAAU,EACVC,QAAS,UAIfC,oBAAqBlB,EAAW3e,QAAQ8f,KAAKnB,U,oDCvFrDN,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,wDCC3C7e,OAAOsgB,aAAajf,QAAQ,QAAS,e,gCCDrC,kCAAO,IAAM3S,EAAY,CACvBkQ,iBAAkB,KAClBnB,mBAAoB,CAAC,KAAM,KAAM,KAAM,KAAM,MAC7CsE,SAAU,gCACVwe,cAAe,0CACf1f,eAAgB,cAChBlS,gBAAiB,QACjB6xB,UAAW,IAYXpZ,OAAOC,OAAO3Y,EAAW,CACvBqT,SAAU,mCACVlB,eAAgB,aAChBlS,gBAAiB,eACjB6xB,UAAW,gE,4DCvBf,IAAI1pB,EAAM,CACT,OAAQ,CACP,IACA,GAED,UAAW,CACV,IACA,GAED,QAAS,CACR,IACA,IAED,WAAY,CACX,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,OAAQ,CACP,IACA,GAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,GAED,UAAW,CACV,IACA,GAED,aAAc,CACb,IACA,GAED,UAAW,CACV,IACA,GAED,aAAc,CACb,IACA,GAED,UAAW,CACV,IACA,GAED,aAAc,CACb,IACA,GAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,KAGF,SAAS2pB,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAE9pB,EAAK4pB,GAC9B,OAAO9iB,QAAQC,UAAUG,MAAK,WAC7B,IAAI6iB,EAAI,IAAI5b,MAAM,uBAAyByb,EAAM,KAEjD,MADAG,EAAEve,KAAO,mBACHue,KAIR,IAAIC,EAAMhqB,EAAI4pB,GAAMvnB,EAAK2nB,EAAI,GAC7B,OAAOH,EAAoBE,EAAEC,EAAI,IAAI9iB,MAAK,WACzC,OAAO2iB,EAAoBI,EAAE5nB,EAAI,MAGnCsnB,EAAoB7V,KAAO,WAC1B,OAAOxD,OAAOwD,KAAK9T,IAEpB2pB,EAAoBtnB,GAAK,IACzBylB,EAAOC,QAAU4B,G,oBCpSjB,IAAI3pB,EAAM,CACT,oCAAqC,CACpC,IACA,IAED,kCAAmC,CAClC,IACA,IAED,+BAAgC,CAC/B,IACA,KAED,sCAAuC,CACtC,IACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,uCAAwC,CACvC,KACA,IAED,mCAAoC,CACnC,KACA,IAED,uCAAwC,CACvC,KACA,IAED,iCAAkC,CACjC,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,mBAAoB,CACnB,KACA,IAED,uCAAwC,CACvC,KACA,KAED,mCAAoC,CACnC,KACA,KAED,uCAAwC,CACvC,KACA,KAED,iCAAkC,CACjC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,mBAAoB,CACnB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,IACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,uCAAwC,CACvC,KACA,KAED,mCAAoC,CACnC,KACA,KAED,mBAAoB,CACnB,KACA,KAED,mCAAoC,CACnC,KACA,KAED,mBAAoB,CACnB,KACA,KAED,uCAAwC,CACvC,IACA,KAED,mCAAoC,CACnC,KACA,KAED,uCAAwC,CACvC,IACA,KAED,iCAAkC,CACjC,IACA,KAED,8BAA+B,CAC9B,IACA,KAED,mBAAoB,CACnB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,uCAAwC,CACvC,KACA,KAED,mCAAoC,CACnC,KACA,IAED,uCAAwC,CACvC,KACA,IAED,iCAAkC,CACjC,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,mBAAoB,CACnB,KACA,IAED,oCAAqC,CACpC,KACA,IAED,gCAAiC,CAChC,KACA,IAED,oCAAqC,CACpC,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,gBAAiB,CAChB,KACA,IAED,oCAAqC,CACpC,KACA,IAED,gCAAiC,CAChC,KACA,IAED,oCAAqC,CACpC,KACA,IAED,gCAAiC,CAChC,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,gBAAiB,CAChB,KACA,IAED,oCAAqC,CACpC,KACA,IAED,gCAAiC,CAChC,KACA,IAED,oCAAqC,CACpC,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,gBAAiB,CAChB,KACA,IAED,oCAAqC,CACpC,KACA,IAED,gCAAiC,CAChC,KACA,IAED,oCAAqC,CACpC,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,gBAAiB,CAChB,KACA,IAED,oCAAqC,CACpC,KACA,IAED,gCAAiC,CAChC,KACA,IAED,oCAAqC,CACpC,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,gBAAiB,CAChB,KACA,IAED,oCAAqC,CACpC,KACA,IAED,gCAAiC,CAChC,KACA,IAED,oCAAqC,CACpC,KACA,IAED,8BAA+B,CAC9B,IACA,IAED,2BAA4B,CAC3B,KACA,IAED,gBAAiB,CAChB,KACA,IAED,oCAAqC,CACpC,KACA,IAED,gCAAiC,CAChC,KACA,IAED,oCAAqC,CACpC,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,gBAAiB,CAChB,KACA,IAED,oCAAqC,CACpC,KACA,IAED,gCAAiC,CAChC,KACA,IAED,oCAAqC,CACpC,KACA,IAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,uCAAwC,CACvC,KACA,KAED,mCAAoC,CACnC,KACA,KAED,uCAAwC,CACvC,KACA,KAED,iCAAkC,CACjC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,mBAAoB,CACnB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,oCAAqC,CACpC,KACA,KAED,gCAAiC,CAChC,KACA,KAED,oCAAqC,CACpC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,gBAAiB,CAChB,KACA,KAED,uCAAwC,CACvC,KACA,KAED,mCAAoC,CACnC,KACA,KAED,uCAAwC,CACvC,KACA,KAED,iCAAkC,CACjC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,mBAAoB,CACnB,KACA,KAED,uCAAwC,CACvC,KACA,KAED,mCAAoC,CACnC,KACA,KAED,uCAAwC,CACvC,KACA,KAED,iCAAkC,CACjC,KACA,KAED,8BAA+B,CAC9B,KACA,KAED,mBAAoB,CACnB,KACA,MAGF,SAAS2pB,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAE9pB,EAAK4pB,GAC9B,OAAO9iB,QAAQC,UAAUG,MAAK,WAC7B,IAAI6iB,EAAI,IAAI5b,MAAM,uBAAyByb,EAAM,KAEjD,MADAG,EAAEve,KAAO,mBACHue,KAIR,IAAIC,EAAMhqB,EAAI4pB,GAAMvnB,EAAK2nB,EAAI,GAC7B,OAAOH,EAAoBE,EAAEC,EAAI,IAAI9iB,MAAK,WACzC,OAAO2iB,EAAoBI,EAAE5nB,EAAI,MAGnCsnB,EAAoB7V,KAAO,WAC1B,OAAOxD,OAAOwD,KAAK9T,IAEpB2pB,EAAoBtnB,GAAK,IACzBylB,EAAOC,QAAU4B,G,oBC5xCjB,IAAI3pB,EAAM,CACT,mBAAoB,CACnB,KACA,KAED,mBAAoB,CACnB,KACA,KAED,uBAAwB,CACvB,KACA,KAED,mBAAoB,CACnB,KACA,KAED,mBAAoB,CACnB,KACA,KAED,mBAAoB,CACnB,KACA,MAGF,SAAS2pB,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAE9pB,EAAK4pB,GAC9B,OAAO9iB,QAAQC,UAAUG,MAAK,WAC7B,IAAI6iB,EAAI,IAAI5b,MAAM,uBAAyByb,EAAM,KAEjD,MADAG,EAAEve,KAAO,mBACHue,KAIR,IAAIC,EAAMhqB,EAAI4pB,GAAMvnB,EAAK2nB,EAAI,GAC7B,OAAOH,EAAoBE,EAAEC,EAAI,IAAI9iB,MAAK,WACzC,OAAO2iB,EAAoBI,EAAE5nB,EAAI,MAGnCsnB,EAAoB7V,KAAO,WAC1B,OAAOxD,OAAOwD,KAAK9T,IAEpB2pB,EAAoBtnB,GAAK,IACzBylB,EAAOC,QAAU4B,G,oBC5CjB,IAAI3pB,EAAM,CACT,mBAAoB,CACnB,KACA,KAED,mBAAoB,CACnB,KACA,KAED,uBAAwB,CACvB,KACA,KAED,mBAAoB,CACnB,KACA,KAED,mBAAoB,CACnB,KACA,KAED,mBAAoB,CACnB,KACA,MAGF,SAAS2pB,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAE9pB,EAAK4pB,GAC9B,OAAO9iB,QAAQC,UAAUG,MAAK,WAC7B,IAAI6iB,EAAI,IAAI5b,MAAM,uBAAyByb,EAAM,KAEjD,MADAG,EAAEve,KAAO,mBACHue,KAIR,IAAIC,EAAMhqB,EAAI4pB,GAAMvnB,EAAK2nB,EAAI,GAC7B,OAAOH,EAAoBE,EAAEC,EAAI,IAAI9iB,MAAK,WACzC,OAAO2iB,EAAoBI,EAAE5nB,EAAI,MAGnCsnB,EAAoB7V,KAAO,WAC1B,OAAOxD,OAAOwD,KAAK9T,IAEpB2pB,EAAoBtnB,GAAK,IACzBylB,EAAOC,QAAU4B,G,40JC03BLO,EAMAC,EAMAC,EASAC,EAOAC,EAUAC,EAQAtC,EAiBAuC,EAQAC,EAMAC,EAOAlZ,EAOAH,EAOAsZ,EAKAC,EAOAC,EAiBAC,EAKAC,EAMAhQ,EAOAiQ,EAOAC,EAMAC,EAWAC,EA6CAC,EAQAza,EAOA0a,EASAC,EAQAC,EAqBAC,EAQAC,EAKAC,EAMAC,EASAC,EAOAC,E,o4rDA9SA3B,K,gBAAAA,E,sBAAAA,E,eAAAA,M,cAMAC,K,oBAAAA,E,oBAAAA,E,4BAAAA,M,cAMAC,K,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,WAAAA,M,cASAC,K,QAAAA,E,QAAAA,E,UAAAA,E,SAAAA,M,cAOAC,K,gBAAAA,E,kBAAAA,E,sBAAAA,E,oBAAAA,E,gBAAAA,E,oBAAAA,E,iBAAAA,M,cAUAC,K,kBAAAA,E,mBAAAA,E,uBAAAA,E,gBAAAA,E,8BAAAA,M,cAQAtC,K,YAAAA,E,uBAAAA,E,iBAAAA,E,wBAAAA,E,sBAAAA,E,kBAAAA,E,kCAAAA,E,eAAAA,E,4BAAAA,E,oBAAAA,E,oBAAAA,E,gBAAAA,E,0BAAAA,E,eAAAA,M,cAiBAuC,K,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,SAAAA,M,cAQAC,K,kBAAAA,E,UAAAA,E,WAAAA,M,cAMAC,K,oBAAAA,E,YAAAA,E,cAAAA,E,eAAAA,M,cAOAlZ,K,cAAAA,E,gBAAAA,E,gBAAAA,E,aAAAA,M,cAOAH,K,YAAAA,E,gBAAAA,E,kBAAAA,E,qBAAAA,M,cAOAsZ,K,YAAAA,E,qBAAAA,M,cAKAC,K,gBAAAA,E,YAAAA,E,cAAAA,E,mBAAAA,M,cAOAC,K,0CAAAA,E,UAAAA,E,sBAAAA,E,YAAAA,E,gBAAAA,E,oBAAAA,E,YAAAA,E,UAAAA,E,gBAAAA,E,kBAAAA,E,gBAAAA,E,sBAAAA,E,cAAAA,E,qBAAAA,M,cAiBAC,K,oBAAAA,E,mBAAAA,M,cAKAC,K,kBAAAA,E,kBAAAA,E,qBAAAA,M,cAMAhQ,K,YAAAA,E,cAAAA,E,gBAAAA,E,iBAAAA,M,cAOAiQ,K,kBAAAA,E,gBAAAA,E,YAAAA,E,aAAAA,M,cAOAC,K,UAAAA,E,cAAAA,E,aAAAA,M,cAMAC,K,cAAAA,E,eAAAA,E,sBAAAA,E,oBAAAA,E,+BAAAA,E,qBAAAA,E,6BAAAA,E,2BAAAA,M,cAWAC,K,iBAAAA,E,oBAAAA,E,yBAAAA,E,oBAAAA,E,0BAAAA,E,yCAAAA,E,gBAAAA,E,YAAAA,E,8BAAAA,E,gBAAAA,E,8BAAAA,E,qCAAAA,E,UAAAA,E,gBAAAA,E,sBAAAA,E,6BAAAA,E,cAAAA,E,oBAAAA,E,kCAAAA,E,uBAAAA,E,YAAAA,E,eAAAA,E,4BAAAA,E,YAAAA,E,sBAAAA,E,cAAAA,E,oBAAAA,E,0CAAAA,E,2CAAAA,E,mCAAAA,E,4BAAAA,E,oBAAAA,E,6BAAAA,E,iCAAAA,E,kCAAAA,E,yBAAAA,E,2BAAAA,E,8CAAAA,E,6BAAAA,E,2BAAAA,E,wCAAAA,E,kCAAAA,M,cA6CAC,K,qBAAAA,E,wBAAAA,E,UAAAA,E,6BAAAA,E,uBAAAA,M,cAQAza,K,gBAAAA,E,sBAAAA,E,YAAAA,E,aAAAA,M,cAOA0a,K,cAAAA,E,sBAAAA,E,gBAAAA,E,oBAAAA,E,oBAAAA,E,eAAAA,M,cASAC,K,kBAAAA,E,kBAAAA,E,YAAAA,E,oBAAAA,E,uBAAAA,M,cAQAC,K,UAAAA,E,uBAAAA,E,cAAAA,E,YAAAA,E,cAAAA,E,yBAAAA,E,gBAAAA,E,6BAAAA,E,qBAAAA,E,gBAAAA,E,oBAAAA,E,8CAAAA,E,2DAAAA,E,8CAAAA,E,yBAAAA,E,UAAAA,E,mBAAAA,E,8BAAAA,M,cAqBAC,K,YAAAA,E,qBAAAA,E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","file":"static/js/main.4f3f3469.chunk.js","sourcesContent":["export const ROUTE_AUTH_LOGIN = '/login'\nexport const ROUTE_AUTH_LOGOUT = '/logout'\nexport const ROUTE_AUTH_RESET_PASSWORD = '/reset'\nexport const ROUTE_AUTH_RECOVERY = '/recovery'\nexport const ROUTE_AUTH_REGISTER = '/register'\n","import React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { RedirectToLogin } from './RedirectToLogin'\n\ninterface ISecureRouteProps extends RouteProps {\n  redirect?: boolean\n  lazy?: boolean\n}\n\nexport const SecureRoute: React.FC<ISecureRouteProps> = ({\n  redirect = true,\n  lazy = true,\n  ...props\n}) => {\n  const { auth } = useRoot()\n  if (!auth.isAuthenticatedUser) {\n    return redirect ? <RedirectToLogin /> : <NotFoundPage />\n  }\n  if (props.component && typeof props.component === 'object') {\n    const { component, path, exact } = props\n    return <Route path={path} exact={exact} component={component} />\n  }\n  return <Route {...props} />\n}\n","import * as DF from 'date-fns'\nimport * as DFP from 'date-fns/fp'\n\nimport { RM } from './ramda'\n\nexport { DF, DFP }\n\nexport let DFLocale: Locale\n\nexport const formatWithLocale = RM.curry((format: string, value: Date) =>\n  DF.format(value, format, { locale: DFLocale }),\n)\n\nexport async function changeDFLocale(lang: string) {\n  let locale = lang\n  if (lang === 'en') {\n    locale = 'en-US'\n  }\n  // prettier-ignore\n  DFLocale = (await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"df-[index]\" */\n    `date-fns/locale/${locale}/index.js`\n  )).default\n\n  if (lang === 'cs') {\n    forkCSLang()\n  }\n}\n\n/**\n * Temporary because official localization uses\n * AM/PM format for time which is most likely wrong\n */\nfunction forkCSLang() {\n  const timeFormats = {\n    full: 'HH:mm:ss zzzz',\n    long: 'HH:mm:ss z',\n    medium: 'HH:mm:ss',\n    short: 'HH:mm',\n  }\n  const defaultWidth = 'long'\n  // @ts-ignore\n  DFLocale.formatLong.time = function(dirtyOptions) {\n    var options = dirtyOptions || {}\n    var width = options.width ? String(options.width) : defaultWidth\n    var format = timeFormats[width] || timeFormats[defaultWidth]\n    return format\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport loaderGif from '../assets/loader.gif'\nimport { appConfig } from '../config'\n\nconst StyledPageLoader = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n`\n\nconst PageLoader: React.FC = () => (\n  <StyledPageLoader role=\"banner\">\n    <img\n      src={loaderGif}\n      alt={appConfig.pageTitleSuffix}\n      width={200}\n      height={200}\n    />\n  </StyledPageLoader>\n)\n\nexport default PageLoader\n","import { SvgIconComponent } from '@material-ui/icons'\nimport React, { MouseEvent } from 'react'\nimport styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile } from '../app/Responsive'\nimport { Icon } from '../atoms/Icon'\nimport { applyAlphaToColor, Colors, Radiuses, Spacing } from '../styling'\n\nexport interface ITouchButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  icon?: SvgIconComponent\n  iconColor?: Colors\n  iconSize?: number\n  text?: string\n  color?: Colors\n  badge?: ReactNode\n  disabled?: boolean\n  textNextToIcon?: boolean\n  className?: string\n  width?: string\n  height?: string\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n}\n\nconst applyAlpha = (alphaValue: number) => (props: ITouchButtonProps) =>\n  applyAlphaToColor(props.color!, alphaValue)\n\nconst StyledTouchButton = styled.button`\n  min-height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  min-width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  width: ${({ width = '100%' }: ITouchButtonProps) => width};\n  height: ${({ height = '100%' }: ITouchButtonProps) => height};\n  margin: 0;\n  padding: 0 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: ${Colors.white};\n  position: relative;\n  user-select: none;\n  /* fallback font size for incompatible browsers */\n  font-size: 1rem;\n  ${mediaDesktop`\n    font-size: calc(0.6rem + 0.5vw);\n  `}\n  ${mediaMobile`\n    font-size: calc(0.9rem + 0.5vw);\n  `};\n  transition-duration: 0.2s;\n\n  & .materialIcon {\n    vertical-align: middle;\n  }\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n  @media print {\n    opacity: 0;\n    &:hover:enabled {\n      opacity: 1;\n    }\n  }\n`\n\nconst ButtonLabelStyled = styled.div`\n  color: ${Colors.white};\n  text-align: center;\n  width: 100%;\n  overflow: hidden;\n`\nconst ButtonLabelNextToIconStyled = styled(ButtonLabelStyled)`\n  width: calc(100% - 4rem);\n  margin: 0 0 0 1rem;\n  text-align: left;\n  display: inline-block;\n  vertical-align: top;\n  overflow: hidden;\n`\n\nexport const TouchButton = React.forwardRef<\n  HTMLButtonElement,\n  ITouchButtonProps\n>(\n  (\n    {\n      children,\n      icon,\n      iconColor = Colors.white,\n      iconSize = 3,\n      color = Colors.greyMiddle,\n      textNextToIcon = false,\n      badge,\n      text,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    return (\n      <StyledTouchButton\n        color={color}\n        type=\"button\"\n        {...props}\n        ref={forwardedRef}\n      >\n        {icon && <Icon icon={icon} color={iconColor} fontSize={iconSize} />}\n\n        {text && textNextToIcon && (\n          <ButtonLabelNextToIconStyled>{text}</ButtonLabelNextToIconStyled>\n        )}\n\n        {text && !textNextToIcon && (\n          <ButtonLabelStyled>{text}</ButtonLabelStyled>\n        )}\n\n        {badge}\n        {children}\n      </StyledTouchButton>\n    )\n  },\n)\n","import Color from 'color'\n\nimport { RM } from './tools/ramda'\n\nexport enum Colors {\n  yellow = '#FFDB2B',\n  pink = '#FF2B95',\n  blue = '#2441FF',\n  red = '#FF1C1C',\n  green = '#179B12',\n  turquoise = '#2BFFFF',\n  orange = '#FF862B',\n  violet = '#6D4F8C',\n  black = '#000000',\n  greyDarkest = '#080808',\n  greyDark = '#2C2C2C',\n  greyMiddle = '#939393',\n  greyLight = '#EDEDED',\n  white = '#FFFFFF',\n  errorBackground = '#FFA7A7',\n}\n\nexport const applyAlphaToColor = RM.curry((color: Colors, alphaValue: number) =>\n  Color(color)\n    .alpha(alphaValue)\n    .string(),\n)\n\nexport enum Radiuses {\n  Card = '0.5rem',\n  Button = '0.5rem',\n  TextComponent = '0.25rem',\n}\n\nexport const Spacing = {\n  MarginAroundFormComponents: '0.1rem',\n  Small: '0.25rem',\n  Middle: '0.5rem',\n  LayoutGridCellMargin: '0.5rem',\n  ButtonHeight: 3.4375,\n  DashboardButtonHeight: 6,\n  DefaultInputWidth: 20,\n  DefaultLabelWidth: 7,\n  DefaultSizeUnit: 'rem',\n  ButtonColumnWidthPx: 55,\n  PageHeaderHeight: 4.4375,\n  OrderFlowMenuButtonWidth: 7.375,\n}\n\nexport const FontSizes = {\n  InfoMessageFontSize: '1.375rem',\n  CompactCard: '0.95rem',\n  CompactCardBig: '1rem',\n}\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { Spacing } from '../styling'\nimport { MarginBox } from './MarginBox'\n\ninterface IProps {\n  width?: number\n  widthUnit?: string\n  height?: number\n  heightUnit?: string\n  margin?: string\n  className?: string\n}\n\nconst widthProperty = ({\n  width,\n  widthUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (width === undefined) {\n    return ''\n  } else {\n    return `width: ${width}${widthUnit}`\n  }\n}\n\nconst heightProperty = ({\n  height,\n  heightUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (height === undefined) {\n    return ''\n  } else {\n    return `height: ${height}${heightUnit}`\n  }\n}\n\nconst StyledSizer = styled('div')`\n  ${widthProperty};\n  ${heightProperty};\n`\n\nexport const Sizer: React.FC<IProps> = ({\n  width,\n  widthUnit = Spacing.DefaultSizeUnit,\n  height,\n  heightUnit = Spacing.DefaultSizeUnit,\n  margin,\n  children,\n  className,\n  ...props\n}) => {\n  const wrap = (\n    <StyledSizer\n      width={width}\n      widthUnit={widthUnit}\n      height={height}\n      heightUnit={heightUnit}\n      className={className}\n      {...props}\n    >\n      {children}\n    </StyledSizer>\n  )\n\n  return margin === undefined ? (\n    wrap\n  ) : (\n    <MarginBox margin={margin}>{wrap}</MarginBox>\n  )\n}\n","export const ROUTE_MAIN = '/'\nexport const ROUTE_SUPPORT = '/support'\n","import { isSameDay } from 'date-fns'\nimport { format } from 'date-fns/fp'\nimport numeral from 'numeral'\n\nimport {\n  FAddressFragment,\n  FCompanyBranchFragment,\n  FUserNameFragment,\n} from '../graph/generated'\nimport { formatWithLocale } from '../tools/datefns'\n\nexport const fullDateFormat = 'iiii PPP'\nexport const formatFullDate = formatWithLocale(fullDateFormat)\n\nexport const fullDateTimeFormat = 'iiii PPPp'\nexport const formatFullDateTime = formatWithLocale(fullDateTimeFormat)\n\nexport const dateFormat = 'd.M.yyyy'\nexport const formatDate = formatWithLocale(dateFormat)\n\nexport const systemTimeFormat = 'H:mm'\nexport const formatSystemTime = format(systemTimeFormat)\n\nexport const timeFormat = 'pp'\nexport const formatTime = formatWithLocale(timeFormat)\n\nexport const formatTimeWithoutTodayDate = (dateTime: Date) =>\n  isSameDay(dateTime, new Date())\n    ? formatTime(dateTime)\n    : formatFullDateTime(dateTime)\n\nexport const numberFormat = '0[.]000'\nexport const formatNumber = (num: string | number) =>\n  numeral(num).format(numberFormat)\n\nexport const priceFormat = '0,0.[00]'\nexport const formatPrice = (price: string | number, currencyCode?: string) => {\n  const priceNumber = numeral(price).format(priceFormat)\n  return currencyCode ? `${priceNumber} ${currencyCode}` : priceNumber\n}\n\nexport const formatAddress = (address: FAddressFragment) => {\n  if (!address) {\n    return ''\n  }\n  if (!address.street) {\n    if (address.city && address.houseNumber) {\n      return `${address.city} ${address.houseNumber}, ${address.state}`\n    }\n    if (address.city) {\n      if (address.state) {\n        return `${address.city}, ${address.state}`\n      }\n      return address.city\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n\nexport function formatFullName(user: FUserNameFragment) {\n  return `${user.lastName} ${user.firstName}`.trim()\n}\n\nexport function formatBranchName(branch: FCompanyBranchFragment) {\n  return branch.name\n}\n\nexport function formatBranchNameWithBrand(branch: FCompanyBranchFragment) {\n  return `${branch.name} [${branch.brand.name}]`\n}\n","/**\n *  This file was generated via `npx @speedlo/config`.\n *  Do NOT alter this file – all changes will be overridden!\n */\nimport * as RM from 'ramda'\n\nexport { RM }\n\nexport const idProp = RM.prop('id')\nexport const idPropEq = RM.propEq('id')\n","import debug from 'debug'\nimport { getPath, getRoot, types } from 'mobx-state-tree'\n\nimport { TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    return debug(`model${getPath(self)}`)\n  },\n  get root(): TRootModel {\n    return getRoot(self)\n  },\n}))\n","import { SvgIconComponent } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { logError } from '../helpers/logger'\nimport { Colors, Spacing } from '../styling'\n\ninterface IProps {\n  icon?: SvgIconComponent\n  color?: string\n  fontSize?: number\n  fontSizeUnit?: string\n  onClick?(): void\n  className?: string\n}\n\nconst StyledIcon = styled.span<IProps>`\n  color: ${({ color }) => color};\n  > svg {\n    font-size: ${({ fontSize, fontSizeUnit }) => `${fontSize}${fontSizeUnit}`};\n  }\n`\n\nexport const Icon = React.memo<IProps>(\n  ({\n    icon,\n    children,\n    color = Colors.white,\n    fontSize = 1.5,\n    fontSizeUnit = Spacing.DefaultSizeUnit,\n    onClick,\n    className,\n  }) => {\n    if (icon && children) {\n      // tslint:disable-next-line: no-console\n      logError(\n        `Icon: Do not use both icon prop & children! Only one of them is allowed.`,\n      )\n      return null\n    }\n    const iconNode = icon ? React.createElement(icon) : children\n    return (\n      <StyledIcon\n        color={color}\n        fontSize={fontSize}\n        fontSizeUnit={fontSizeUnit}\n        className={`materialIcon ${className}`}\n        onClick={onClick}\n      >\n        {iconNode}\n      </StyledIcon>\n    )\n  },\n)\n","import { computeDestinationPoint, getBounds } from 'geolib'\n\n/* global google */\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLng =>\n  new google.maps.LatLng(Number(gps.latitude), Number(gps.longitude))\n\nexport const gpsToLatLngLit = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n\ninterface IGeneratePolygonInput {\n  center: GeoPoint\n  metersRadius?: number\n  pointsCount?: number\n}\n\nexport const generatePolygon = ({\n  center,\n  metersRadius = 1000,\n  pointsCount = 15,\n}: IGeneratePolygonInput) => {\n  return new Array(pointsCount).fill(null).map((_, idx) => {\n    const degree = (360 / pointsCount) * idx\n    return computeDestinationPoint(center, metersRadius, degree)\n  })\n}\n\nexport const getBoundsOfPoints = (points: GeoPoint[]) => {\n  const bounds = getBounds(points)\n  if (!bounds) {\n    return null\n  }\n  return new google.maps.LatLngBounds(\n    {\n      lat: bounds.minLat,\n      lng: bounds.minLng,\n    },\n    {\n      lat: bounds.maxLat,\n      lng: bounds.maxLng,\n    },\n  )\n}\n","import { autorun, observable } from 'mobx'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { mediaMobile } from '../app/Responsive'\nimport { appConfig } from '../config'\nimport { RM } from '../tools/ramda'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  title: string\n}\n\nconst TitleStyled = styled.h1`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  margin: 0.5rem 0.5rem 0 0.5rem;\n  white-space: nowrap;\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.9);\n  ${mediaMobile`\n    font-size: 1.2rem;\n  `};\n`\n\nconst observableTitles = observable.array<string>([])\n\nautorun(() => {\n  const lastTitle = Array.from(observableTitles).pop()\n  if (lastTitle) {\n    document.title = `${lastTitle} :: ${appConfig.pageTitleSuffix}`\n  } else {\n    document.title = appConfig.pageTitleSuffix\n  }\n})\n\nconst PageTitleDisplay: React.FC = () => (\n  <Observer>\n    {() => <TitleStyled>{observableTitles.join(' - ')}</TitleStyled>}\n  </Observer>\n)\n\nexport class PageTitle extends React.Component<IProps> {\n  static Route = PageTitleRoute\n  static Display = PageTitleDisplay\n  componentDidMount() {\n    observableTitles.push(this.props.title)\n  }\n  componentDidUpdate(prevProps: IProps) {\n    const idx = observableTitles.findIndex(RM.equals(prevProps.title))\n    if (idx >= 0) {\n      observableTitles.splice(idx, 1, this.props.title)\n    }\n  }\n  componentWillUnmount() {\n    observableTitles.remove(this.props.title)\n  }\n  render() {\n    return null\n  }\n}\n\nfunction PageTitleRoute({ title, ...props }: IProps & RouteProps) {\n  return <Route {...props} render={() => <PageTitle title={title} />} />\n}\n","import { types } from 'mobx-state-tree'\n\nimport { parseNumber } from '../../../helpers/numeral'\n\nexport const DEFAULT_IMPORT = false\nexport const DEFAULT_RAW_QUANTITY = ''\nexport const DEFAULT_QUANTITY = null\nexport const DEFAULT_MAX = Number.MAX_SAFE_INTEGER\nexport const MIN_TRANSFER_QUANTITY = 0\n\nexport const TransferItem = types\n  .model('TransferItem', {\n    id: types.identifier,\n    import: types.optional(types.boolean, DEFAULT_IMPORT),\n    rawQuantity: types.optional(types.string, DEFAULT_RAW_QUANTITY),\n    max: types.optional(types.number, DEFAULT_MAX),\n  })\n  .views(self => ({\n    get quantity() {\n      if (self.rawQuantity.length === 0) {\n        return DEFAULT_QUANTITY\n      }\n      const parsedQuantity = parseNumber(self.rawQuantity)\n      return Number.isNaN(parsedQuantity) ? DEFAULT_QUANTITY : parsedQuantity\n    },\n    get isQuantityValid() {\n      if (this.quantity === DEFAULT_QUANTITY) {\n        // valid only if there is nothing in the input\n        return self.rawQuantity.length === 0\n      }\n      const amountUnderflow = this.quantity < MIN_TRANSFER_QUANTITY\n      const amountOverflow = this.quantity > self.max\n      return !amountUnderflow && !amountOverflow\n    },\n  }))\n  .actions(self => ({\n    setRawQuantity(rawQuantity: string) {\n      self.rawQuantity = rawQuantity.trimLeft()\n    },\n    reset() {\n      self.rawQuantity = DEFAULT_RAW_QUANTITY\n      self.import = DEFAULT_IMPORT\n    },\n  }))\n","import Color from 'color'\nimport styled, { css } from 'styled-components/macro'\n\nimport { Colors, Radiuses, Spacing } from '../styling'\n\ninterface IProps {\n  color?: string\n  textColor?: string\n  padding?: number\n  minHeight?: number\n  stretchToParent?: boolean\n}\n\nexport const Card = styled.div`\n  background: ${getBackgroundColor};\n  color: ${getTextColor};\n  border-radius: ${Radiuses.Card};\n  padding: ${getPadding}rem;\n  margin: 0 0 0.5rem 0;\n  min-height: ${getMinHeight};\n  position: relative;\n  ${applyStretchToParentStyle};\n`\n\nCard.displayName = 'Card'\n\nfunction getPadding({ padding = 0.5 }: IProps) {\n  return padding\n}\n\nfunction getMinHeight({ minHeight = 0 }: IProps) {\n  return minHeight + Spacing.DefaultSizeUnit\n}\n\nfunction getBackgroundColor({ color }: IProps) {\n  return Color(color || Colors.greyLight)\n    .alpha(0.8)\n    .lighten(0.4)\n    .string()\n}\n\nfunction getTextColor(props: IProps) {\n  return props.textColor || Colors.black\n}\n\nfunction applyStretchToParentStyle({ stretchToParent = false }: IProps) {\n  if (!stretchToParent) {\n    return ''\n  }\n  return css`\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  `\n}\n","import { useSnackbar as useSnackbarOrig, VariantType } from 'notistack'\nimport React from 'react'\n\nconst successVariant = { variant: 'success' as VariantType }\nconst errorVariant = { variant: 'error' as VariantType }\nconst warningVariant = { variant: 'warning' as VariantType }\nconst infoVariant = { variant: 'info' as VariantType }\n\nexport function useSnackBar() {\n  const { enqueueSnackbar } = useSnackbarOrig()\n  return {\n    enqueueSnackbar,\n    enqueueSuccess: React.useCallback(\n      (errorMessage: string) => enqueueSnackbar(errorMessage, successVariant),\n      [enqueueSnackbar],\n    ),\n    enqueueError: React.useCallback(\n      (errorMessage: string) => enqueueSnackbar(errorMessage, errorVariant),\n      [enqueueSnackbar],\n    ),\n    enqueueWarning: React.useCallback(\n      (errorMessage: string) => enqueueSnackbar(errorMessage, warningVariant),\n      [enqueueSnackbar],\n    ),\n    enqueueInfo: React.useCallback(\n      (errorMessage: string) => enqueueSnackbar(errorMessage, infoVariant),\n      [enqueueSnackbar],\n    ),\n  }\n}\n","import React from 'react'\n\nimport { PageLayoutGridItem } from '../atoms/PageLayoutGridItem'\nimport {\n  IPageLayoutResponsiveProps,\n  PageLayoutResponsive,\n} from './PageLayoutResponsive'\n\ninterface IFullPageLayoutProps extends IPageLayoutResponsiveProps {}\n\nexport const FullPageLayout: React.FC<IFullPageLayoutProps> = ({\n  children,\n  ...props\n}) => (\n  <PageLayoutResponsive {...props}>\n    <PageLayoutGridItem gridColumn=\"span 16\">{children}</PageLayoutGridItem>\n  </PageLayoutResponsive>\n)\n","import numeral from 'numeral'\n\nexport async function changeNumeralLocale(lang: string) {\n  if (lang === 'en') {\n    numeral.locale(lang)\n    return\n  }\n  await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"numeral-[index]\" */\n    `numeral/locales/${lang}`\n  )\n  numeral.locale(lang)\n}\n\nconst startsOrEndsWithSeparator = /^[.,]+.*|.*[.,]+$/\n\n/**\n * Parse number according used locale rules.\n */\nexport function parseNumber(value: unknown) {\n  if (typeof value === 'number') {\n    return value\n  }\n  if (typeof value !== 'string') {\n    return NaN\n  }\n  const trimmed = value.trim()\n  if (trimmed.length === 0) {\n    return NaN\n  }\n  const normalized = normalizeNumber(trimmed)\n  if (startsOrEndsWithSeparator.test(normalized)) {\n    return NaN\n  }\n  return Number(normalized)\n}\n\n/**\n * Will utilize current locale to normalize string as a number to a format\n * that can be correctly recognized by parsing functions\n */\nexport function normalizeNumber(number: string) {\n  const { decimal, thousands } = numeral.localeData().delimiters\n  return number\n    .replace(new RegExp(`\\\\${thousands}`, 'g'), '')\n    .replace(new RegExp(`\\\\${decimal}`), '.')\n}\n\nexport type LocaleNumber = string\n\nexport { numeral }\n","import React from 'react'\n\nimport { PageTitle } from '../atoms/PageTitle'\nimport { i18n } from '../i18n'\n\nexport const NotFoundPage: React.FC = () => (\n  <>\n    <PageTitle title={i18n.t`Not found`} />\n    <h1>{i18n.t`There is nothing here, sorry!`}</h1>\n  </>\n)\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { useReactionNow } from '@speedlo/hooks'\nimport { DETECTORS, LocaleResolver, TRANSFORMERS } from 'locales-detector'\nimport React from 'react'\n\nimport { useRoot } from './atoms/RootProvider'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\nimport { changeNumeralLocale } from './helpers/numeral'\nimport { changeDFLocale } from './tools/datefns'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC = ({ children }) => {\n  const { user } = useRoot()\n  const [, forceUpdate] = React.useState(0)\n\n  useReactionNow(\n    () => user.language,\n    lang => {\n      const language = lang || detectLanguage()\n      setupLanguage(language).then(success => {\n        if (success) {\n          forceUpdate(i => i + 1)\n        }\n      })\n    },\n  )\n\n  return (\n    <I18nProvider i18n={i18n}>{React.Children.only(children)}</I18nProvider>\n  )\n}\n\nexport function detectLanguage() {\n  const resolver = new LocaleResolver(\n    [new DETECTORS.NavigatorDetector()],\n    [new TRANSFORMERS.LanguageOnlyTransformer()],\n  )\n  const languages = resolver.getLocales()\n  logLang(`detected languages ${languages.join('; ')}`)\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nfunction setupLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang(`language ${lang} is not supported`)\n    return Promise.resolve(false)\n  }\n  return Promise.all([\n    loadCatalog(lang),\n    changeDFLocale(lang),\n    changeNumeralLocale(lang),\n  ]).then(() => {\n    i18n.activate(lang)\n    logLang(`setup done for ${lang}`)\n    return true\n  })\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang(`loaded catalog ${lang}`)\n}\n","import debug from 'debug'\nimport React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\n\nimport { ROUTE_AUTH_LOGIN } from '../segments/login/login.routes'\n\ninterface IRedirectToLoginProps {\n  useOrigin?: boolean\n}\n\nconst log = debug('routing')\n\nexport const RedirectToLogin: React.FC<IRedirectToLoginProps> = ({\n  useOrigin = true,\n}) => (\n  <Route\n    path={ROUTE_AUTH_LOGIN}\n    children={({ match, location }) => {\n      if (match) {\n        return null\n      }\n      log('redirecting to login...')\n      return (\n        <Redirect\n          to={{\n            pathname: ROUTE_AUTH_LOGIN,\n            state: { origin: useOrigin ? location.pathname : '/' },\n          }}\n        />\n      )\n    }}\n  />\n)\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import { createContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const RootContext = createContext<TRootModel | undefined>(undefined)\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersistence } from './logger'\n\nconst persistenceKey = appConfig.persistenceKey\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = (snapshot: object) =>\n    localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersistence('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersistence('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersistence('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { Sentry } from '@speedlo/sentry'\nimport { getParent, Instance } from 'mobx-state-tree'\n\nimport { appConfig } from '../../../config'\nimport { i18n } from '../../../i18n'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TLoginProviderModel } from './LoginProviderModel'\n\nconst getLoginUrl = ({ username, password }: Dictionary<string>) =>\n  `${appConfig.endpoint}/users/token?username=${username}&password=${password}`\n\nexport const PasswordLoginModel = BaseModel.named('PasswordLogin')\n  .volatile(() => ({\n    errorCode: '',\n    errorMessage: '',\n  }))\n  .views(self => ({\n    get hasFailed() {\n      return Boolean(self.errorCode)\n    },\n  }))\n  .actions(self => ({\n    setFailure(code: string, message: string) {\n      self.errorCode = code\n      self.errorMessage = message\n    },\n    setSuccess(token: string, userId: string) {\n      const provider = getParent<TLoginProviderModel>(self)\n      provider.authenticate(token, userId)\n    },\n  }))\n  .actions(self => ({\n    async requestToken(username: string, password: string) {\n      const url = getLoginUrl({ username, password })\n      const fetch: TFetch = window.fetch\n      try {\n        const response = await fetch(url, {\n          headers: {\n            Accept: 'application/json',\n          },\n        })\n        const payload = await response.json()\n        self.log('received payload %j', payload)\n\n        if (response.status !== 200) {\n          self.setFailure(payload.code, payload.error)\n          self.log('token request failed for username %s', username)\n        } else {\n          self.setSuccess(payload.token, String(payload.userId))\n          self.log(\n            'token request success for username %s [%s]',\n            username,\n            payload.userId,\n          )\n        }\n      } catch (err) {\n        self.setFailure(\n          'FAIL',\n          i18n.t`Cannot login right now, please try again later`,\n        )\n        Sentry.withScope(scope => {\n          scope.setExtra('username', username)\n          scope.setLevel(Sentry.Severity.Debug)\n          Sentry.captureException(err)\n        })\n      }\n    },\n  }))\n\nexport interface TPasswordLoginModel\n  extends Instance<typeof PasswordLoginModel> {}\n","import { getParent, Instance, types } from 'mobx-state-tree'\n\nimport { TAuthModel } from '../../../models/AuthModel'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { PasswordLoginModel } from './PasswordLoginModel'\n\nexport const LoginProviderModel = BaseModel.named('LoginProvider')\n  .props({\n    passwordLogin: types.optional(PasswordLoginModel, {}),\n  })\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      const auth = getParent<TAuthModel>(self)\n      auth.authenticate(token, userId)\n    },\n  }))\n\nexport interface TLoginProviderModel\n  extends Instance<typeof LoginProviderModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { LoginProviderModel } from '../segments/login/models/LoginProviderModel'\nimport { BaseModel } from './BaseModel'\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    userId: types.maybeNull(types.string),\n    token: types.maybeNull(types.string),\n    provider: types.optional(LoginProviderModel, {}),\n  })\n  .views(self => ({\n    get isAuthenticated() {\n      return self.token !== null\n    },\n    get isAuthenticatedUser() {\n      return this.isAuthenticated && self.userId !== null\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      self.log('authenticated with id %s', userId)\n    },\n    invalidate() {\n      self.token = null\n      self.userId = null\n      self.log('invalidated authentication')\n    },\n  }))\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { BaseModel } from '../models/BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  orderListPollIntervalSec: 60,\n  orderListSoundIntervalSec: 60,\n})\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport {\n  FCompanyBranchBrand,\n  FCompanyBranchFragment,\n  QUserBootstrapAccess,\n  QUserBootstrapFields,\n  QUserBootstrapPermissions,\n  QUserBootstrapUser,\n} from '../graph/generated'\nimport { BaseModel } from '../models/BaseModel'\nimport { idProp, idPropEq, RM } from '../tools/ramda'\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    language: types.maybeNull(types.string),\n  })\n  .volatile(() => ({\n    isLoaded: false,\n    branches: [] as RoA<FCompanyBranchFragment>,\n    brands: [] as RoA<FCompanyBranchBrand>,\n    access: null as Maybe<IUserAccess>,\n    permissions: {\n      canCancelOrders: false,\n      canCreateOrder: false,\n    } as QUserBootstrapPermissions,\n  }))\n  .views(self => ({\n    get branchesId() {\n      return self.branches.map(idProp)\n    },\n    get defaultBranch() {\n      if (self.branches.length === 0) {\n        throw new Error('No user branches available to get defaultBranchId')\n      }\n      return self.branches[0]\n    },\n    get hasSingleBranch() {\n      return self.branches.length === 1\n    },\n    findBranchById(branchId: ID) {\n      return self.branches.find(idPropEq(branchId))\n    },\n    filterBranches(predicate: (value: FCompanyBranchFragment) => boolean) {\n      return self.branches.filter(predicate)\n    },\n    canQuery(queryName: string) {\n      return (\n        self.access !== null && self.access.queries.has(queryName.toLowerCase())\n      )\n    },\n    canMutate(mutationName: string) {\n      return (\n        self.access !== null &&\n        self.access.mutations.has(mutationName.toLowerCase())\n      )\n    },\n    get isReady(): boolean {\n      return self.isLoaded || !self.root.auth.isAuthenticated\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.isLoaded = false\n      self.language = null\n      self.branches = []\n      self.brands = []\n      self.access = null\n    },\n    applyUserData(user: QUserBootstrapUser) {\n      self.branches = user.branches\n      self.brands = RM.uniqBy(\n        RM.prop('id'),\n        user.branches.map(RM.prop('brand')),\n      )\n    },\n    applyPermissions(permissions: QUserBootstrapPermissions) {\n      self.permissions = permissions\n    },\n    applyAccess(access: QUserBootstrapAccess) {\n      const makeSet = (fields: RoA<QUserBootstrapFields>) =>\n        new Set(\n          fields.map(\n            RM.compose(\n              RM.toLower,\n              RM.prop('name'),\n            ),\n          ),\n        )\n\n      self.access = {\n        queries: makeSet(access.queries.fields ? access.queries.fields : []),\n        mutations: makeSet(\n          access.mutations && access.mutations.fields\n            ? access.mutations.fields\n            : [],\n        ),\n        subscriptions: makeSet(\n          access.subscriptions && access.subscriptions.fields\n            ? access.subscriptions.fields\n            : [],\n        ),\n      }\n    },\n    finishBootstrap() {\n      self.isLoaded = true\n    },\n    setLanguage(lang: string) {\n      self.language = lang\n    },\n    setBranches(userBranches: RoA<FCompanyBranchFragment>) {\n      self.branches = userBranches\n    },\n  }))\n\ninterface IUserAccess {\n  queries: Set<string>\n  mutations: Set<string>\n  subscriptions: Set<string>\n}\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import { fakerCZ } from '@speedlo/testing/dist/faker'\n\nexport const faker = fakerCZ\n","import _ from 'lodash'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { ISuggestion } from '../../../components/AddressSuggest'\nimport {\n  DeliveryTypeEnum,\n  FCompanyBranchFragment,\n  FOrderCustomerFragment,\n  MCreateOrderAcceptVariables,\n  MCreateOrderNewVariables,\n  MCreateOrderUpdateVariables,\n  PaymentGateEnum,\n  PaymentTypeEnum,\n} from '../../../graph/generated'\nimport { faker } from '../../../helpers/faker'\nimport { formatAddress } from '../../../helpers/formats'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TCreateOrderCall } from '../createorder.types'\n\nexport interface IOrderSidedishControlResult {\n  sidedishes: RoA<ID>\n  isConfirmed: boolean\n}\n\nexport interface ICall extends Omit<TCreateOrderCall, 'isRinging' | 'eventId'> {\n  eventId?: ID\n}\n\nexport interface IOrderFormValues {\n  deliveryType: DeliveryTypeEnum.Messenger | DeliveryTypeEnum.Pickup\n  deliverAt?: Date\n  phone?: string\n  phonePrefix?: string\n  firstName?: string\n  lastName?: string\n  email?: string\n  note?: string\n  paymentMethod?: MaybeID\n}\n\ninterface IVolatileProps {\n  orderId: MaybeID\n  call?: ICall\n  deliveryAddress?: ISuggestion\n  deliveryMinutes?: number\n  // ! remove next 2 lines when BE is ready to accept paymentMethodID in finishOrder\n  paymentTypeEnum: Maybe<PaymentTypeEnum>\n  paymentGateEnum: Maybe<PaymentGateEnum>\n  minimalPrice?: string\n  notDeliveryLocation: boolean\n  values: IOrderFormValues\n  fakeValues?: Partial<IOrderFormValues>\n  fakeAddress?: ISuggestion\n  vamCustomer: Maybe<FOrderCustomerFragment>\n  sidedishMode: 'none' | 'recipe' | 'item'\n  sidedishRootId?: ID\n  sidedishSelection?: RoA<ID>\n}\n\nexport const CreateOrderModel = BaseModel.named('CreateOrder')\n  .props({\n    branchId: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(getDefaultProps)\n  .actions(self => ({\n    invalidate() {\n      self.branchId = undefined\n      Object.assign(self, getDefaultProps())\n    },\n  }))\n  .views(self => ({\n    get currentBranch(): FCompanyBranchFragment {\n      return (\n        self.root.user.findBranchById(self.branchId!) ||\n        self.root.user.defaultBranch\n      )\n    },\n  }))\n  .views(self => ({\n    get deliveryType() {\n      return self.values.deliveryType\n    },\n    get isDelivery() {\n      return self.values.deliveryType === DeliveryTypeEnum.Messenger\n    },\n    get deliverAt() {\n      return self.values.deliverAt\n    },\n    get hasAddress() {\n      return Boolean(self.deliveryAddress || self.fakeAddress)\n    },\n    get gps() {\n      if (this.isDelivery && this.hasAddress) {\n        if (self.deliveryAddress && self.deliveryAddress.gps) {\n          return clearGps(self.deliveryAddress.gps)\n        } else if (self.fakeAddress && self.fakeAddress.gps) {\n          return clearGps(self.fakeAddress.gps)\n        }\n      }\n      return { ...clearGps(self.currentBranch.gps) }\n    },\n    get paymentType() {\n      return self.paymentTypeEnum ? self.paymentTypeEnum : PaymentTypeEnum.Cash\n    },\n    get paymentGate() {\n      return self.paymentGateEnum ? self.paymentGateEnum : PaymentGateEnum.Cash\n    },\n    get phone() {\n      if (self.values.phone !== undefined) {\n        return self.values.phone\n      }\n      return self.call ? self.call.phone : ''\n    },\n    get phonePrefix() {\n      if (self.values.phonePrefix !== undefined) {\n        return self.values.phonePrefix\n      }\n      if (self.call) {\n        return self.call.prefix\n      }\n      if (self.currentBranch.address.country) {\n        return self.currentBranch.address.country.phonePrefix\n      }\n      return '+'\n    },\n    isPhoneInputValid() {\n      // * naive phone validation, can be improved later to consider international formats\n      return this.phone.length === 9 && this.phonePrefix.length === 3\n    },\n    get customer() {\n      const formValues = this.formValues as IOrderFormValues\n      return {\n        firstName: formValues.firstName,\n        lastName: formValues.lastName,\n        emails: formValues.email ? [{ email: formValues.email }] : null,\n        phones: formValues.phone\n          ? [\n              {\n                phone: `${formValues.phonePrefix}${formValues.phone}`,\n              },\n            ]\n          : null,\n      }\n    },\n    get formValues() {\n      if (self.vamCustomer !== null) {\n        const { firstName, lastName, email, lastOrder } = self.vamCustomer\n        return _.defaults(\n          { ...self.values },\n          {\n            phone: this.phone,\n            phonePrefix: this.phonePrefix,\n            firstName,\n            lastName,\n            email,\n            note: (lastOrder && lastOrder.note) || '',\n          },\n        )\n      }\n      if (self.fakeValues) {\n        return _.defaults({ ...self.values }, { ...self.fakeValues })\n      }\n      return _.defaults(\n        { ...self.values },\n        { phone: this.phone, phonePrefix: this.phonePrefix },\n      )\n    },\n    get hasOrder() {\n      return self.orderId !== null\n    },\n  }))\n  .views(self => ({\n    get createOrderVariables(): MCreateOrderNewVariables {\n      return {\n        branchId: self.currentBranch.id,\n        deliveryType: self.values.deliveryType,\n        deliverAt: self.deliverAt,\n        callEventId: self.call && self.call.eventId,\n        gps: self.gps,\n      }\n    },\n    get updateOrderVariables(): MCreateOrderUpdateVariables {\n      return {\n        orderId: self.orderId!,\n        deliveryType: self.deliveryType,\n        deliverAt: self.deliverAt,\n        customer: self.customer,\n        gps: self.gps,\n      }\n    },\n    get acceptOrderVariables(): MCreateOrderAcceptVariables {\n      return {\n        orderId: self.orderId!,\n        customer: self.customer,\n        deliverAt: self.deliverAt,\n        note: self.formValues.note,\n        paymentType: self.paymentType,\n        paymentGate: self.paymentGate,\n      }\n    },\n  }))\n  .actions(self => ({\n    resetOrder() {\n      self.orderId = null\n    },\n    resetModel() {\n      Object.assign(self, getDefaultProps())\n    },\n    setOrder(orderId: ID) {\n      self.orderId = orderId\n      return orderId\n    },\n  }))\n  .actions(self => ({\n    useLocation(address: ISuggestion) {\n      self.deliveryAddress = address\n    },\n    clearLocation() {\n      self.deliveryAddress = undefined\n    },\n    setMinimalPrice(price: string | undefined) {\n      self.minimalPrice = price\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    userIsCalling(call: ICall | undefined) {\n      self.call = call\n    },\n    setDeliveryMinutes(minutes: number | undefined) {\n      self.deliveryMinutes = minutes\n    },\n    setPaymentValues(\n      paymentType: Maybe<PaymentTypeEnum>,\n      paymentGate: Maybe<PaymentGateEnum>,\n    ) {\n      // ! remove this action when BE is ready to accept paymentMethodID in finishOrder\n      self.paymentTypeEnum = paymentType\n      self.paymentGateEnum = paymentGate\n    },\n    updateFormValues(\n      values: IOrderFormValues,\n      touched: { [K in keyof IOrderFormValues]?: boolean },\n    ) {\n      self.values = {\n        deliveryType: values.deliveryType,\n        ..._.pick(values, Object.keys(touched)),\n        deliverAt: values.deliverAt,\n      }\n      self.log('updated values: %j', self.values)\n    },\n    updateFromVam(vamCustomer: Maybe<FOrderCustomerFragment>) {\n      self.vamCustomer = vamCustomer\n      self.log('vam customer: %j', vamCustomer)\n    },\n    updateFormWithFakeValues() {\n      self.fakeValues = {\n        firstName: faker.name.firstName(),\n        lastName: faker.name.lastName(),\n        email: faker.internet.email(),\n        phone: faker.phone.phoneNumberFormat(3).replace(/\\s/g, ''),\n        phonePrefix: '+420',\n        note: faker.lorem.sentence().slice(0, 50 - 1),\n      }\n      self.fakeAddress = {\n        address: formatAddress({\n          city: 'Hradec Králové',\n          street: 'Opletalova',\n          houseNumber: '334/2',\n          state: '',\n        }),\n        gps: {\n          latitude: 50.2129839,\n          longitude: 15.8342836,\n        },\n      }\n    },\n  }))\n  .actions(self => {\n    let resolver: Maybe<(result: IOrderSidedishControlResult) => void> = null\n    const makeResolver = () => {\n      return new Promise<IOrderSidedishControlResult>(resolve => {\n        resolver = resolve\n      })\n    }\n    return {\n      selectSidedishesForRecipe(recipeId: ID) {\n        self.sidedishMode = 'recipe'\n        self.sidedishRootId = recipeId\n        return makeResolver()\n      },\n      selectSidedishesForItem(itemId: ID) {\n        self.sidedishMode = 'item'\n        self.sidedishRootId = itemId\n        return makeResolver()\n      },\n      sidedishSelectionConfirmed(sidedishes: RoA<ID>) {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: true,\n            sidedishes,\n          })\n          resolver = null\n        }\n      },\n      sidedishSelectionCancel() {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: false,\n            sidedishes: [],\n          })\n          resolver = null\n        }\n      },\n    }\n  })\n\nfunction getDefaultProps(): IVolatileProps {\n  return {\n    orderId: null,\n    call: undefined,\n    values: {\n      deliveryType: DeliveryTypeEnum.Messenger,\n      deliverAt: undefined,\n      phone: undefined,\n      email: undefined,\n      firstName: undefined,\n      lastName: undefined,\n      note: undefined,\n      paymentMethod: undefined,\n    },\n    fakeAddress: undefined,\n    fakeValues: undefined,\n    deliveryAddress: undefined,\n    deliveryMinutes: undefined,\n    minimalPrice: undefined,\n    vamCustomer: null,\n    notDeliveryLocation: false,\n    sidedishMode: 'none',\n    sidedishRootId: undefined,\n    sidedishSelection: undefined,\n    paymentTypeEnum: null,\n    paymentGateEnum: null,\n  }\n}\n\nfunction clearGps({ latitude, longitude }: GeoPoint) {\n  return { latitude, longitude }\n}\n\nexport interface TCreateOrderModel extends Instance<typeof CreateOrderModel> {}\nexport interface TCreateOrderModelProps\n  extends SnapshotIn<typeof CreateOrderModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { gpsToLatLng, gpsToLatLngLit } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<google.maps.Map>\n}\n\nconst GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 12),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLngLit(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: google.maps.Map) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n    panTo(gps: GeoPoint) {\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(gps))\n      }\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\n","import { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\n\ninterface IVolatileProps {\n  activeDriverId: MaybeID\n}\n\nexport const OrderMapModel = MapModel.named('OrderMap')\n  .volatile<IVolatileProps>(() => ({\n    activeDriverId: null,\n  }))\n  .actions(self => ({\n    activateDriver(driverId: ID, position: GeoPoint) {\n      self.activeDriverId = driverId\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(position))\n      }\n    },\n  }))\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { OrderListModel } from './OrderListModel'\nimport { OrderMapModel } from './OrderMapModel'\n\nexport const OrderModel = types\n  .model('Order', {\n    list: types.optional(OrderListModel, {}),\n    map: types.optional(OrderMapModel, {}),\n  })\n  .actions(self => ({\n    invalidate() {\n      self.list.clearBranchFilter()\n    },\n  }))\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\n","import { types } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\n\nexport const StatisticsModel = BaseModel.named('Statistics')\n  .props({\n    stockBrandId: types.maybeNull(types.string),\n  })\n  .volatile(() => ({\n    stockSearchInput: '',\n  }))\n  .actions(self => ({\n    setStockBrand(brandId: MaybeID) {\n      self.stockBrandId = brandId\n    },\n    setStockFilter(filter: string) {\n      self.stockSearchInput = filter\n    },\n  }))\n","import { types } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { ESpecificHourMode } from '../businesshours.types'\n\nexport const BusinessHoursModel = BaseModel.named('BusinessHours')\n  .props({\n    specificMode: types.optional(\n      types.enumeration(['TIMESPAN', 'FULLDAY']),\n      ESpecificHourMode.TIMESPAN,\n    ),\n  })\n  .views(self => ({\n    get isTimespanMode() {\n      return self.specificMode === ESpecificHourMode.TIMESPAN\n    },\n  }))\n  .actions(self => ({\n    changeSpecificMode(mode: ESpecificHourMode) {\n      self.specificMode = mode\n    },\n  }))\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { isPartialMatch } from '../../helpers/filter'\nimport { RM } from '../../tools/ramda'\n\ninterface IPredicateOptions {\n  exactMatch?: string[]\n  partialMatch?: string[]\n}\n\nexport const FilterInputModel = types\n  .model('FilterInput')\n  .props({\n    value: types.optional(types.string, ''),\n  })\n  .views(self => ({\n    getPredicate<T>({ exactMatch = [], partialMatch = [] }: IPredicateOptions) {\n      const partialMatchPred = isPartialMatch(self.value)\n      const predicates = [\n        ...exactMatch.map(prop => [RM.propEq(prop, self.value), RM.T]),\n        ...partialMatch.map(prop => [\n          RM.propSatisfies(partialMatchPred, prop),\n          RM.T,\n        ]),\n      ]\n      return RM.cond(predicates as any) as (item: T) => boolean\n    },\n    getCodeAndNamePredicate() {\n      return this.getPredicate({ partialMatch: ['code', 'nameLabel'] })\n    },\n  }))\n  .actions(self => ({\n    setValue(value: string) {\n      self.value = value\n    },\n  }))\n\nexport interface TFilterInputModel extends Instance<typeof FilterInputModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { FilterInputModel } from '../../../components/FilterInput/FilterInputModel'\nimport { FCompanyBranchFragment, LanguageEnum } from '../../../graph/generated'\nimport { BaseModel } from '../../../models/BaseModel'\n\nexport const MenuModel = BaseModel.named('Menu')\n  .props({\n    filter: types.optional(FilterInputModel, {}),\n    language: types.maybeNull(types.string),\n  })\n  .volatile(() => ({\n    categoryFilterId: null as MaybeID,\n  }))\n  .views(self => ({\n    get branchId(): ID {\n      return self.root.settings.branchId\n    },\n    get branch(): FCompanyBranchFragment | undefined {\n      return self.root.user.findBranchById(this.branchId)\n    },\n    get currentLanguage() {\n      return (self.language as Maybe<LanguageEnum>) || this.defaultLanguage\n    },\n    get defaultLanguage() {\n      return this.branch!.defaultLanguage\n    },\n    get supportedLanguages() {\n      const branch = this.branch\n      return branch ? branch.supportedLanguages : []\n    },\n    get isDefaultLanguageSelected() {\n      return this.defaultLanguage === this.currentLanguage\n    },\n  }))\n  .actions(self => ({\n    setLanguage(language: Language) {\n      self.language = language\n    },\n    setCategoryFilter(categoryId: MaybeID) {\n      self.categoryFilterId = categoryId\n    },\n  }))\n\nexport interface TMenuModel extends Instance<typeof MenuModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { FCompanyBranchFragment } from '../../../graph/generated'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { BusinessHoursModel } from '../../businesshours/models/BusinessHoursModel'\nimport { MenuModel } from '../../menu/models/MenuModel'\n\nexport const SettingsModel = BaseModel.named('Settings')\n  .props({\n    selectedBranchId: types.maybe(types.string),\n    businessHours: types.optional(BusinessHoursModel, {}),\n    menu: types.optional(MenuModel, {}),\n  })\n  .views(self => ({\n    get branch(): FCompanyBranchFragment {\n      let useBranch: Maybe<FCompanyBranchFragment> = null\n      if (self.selectedBranchId) {\n        useBranch = self.root.user.findBranchById(self.selectedBranchId) || null\n      }\n      return useBranch || self.root.user.defaultBranch\n    },\n    get branchId(): ID {\n      return self.selectedBranchId || self.root.user.defaultBranch.id\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.selectedBranchId = undefined\n    },\n    selectBranch(branchId: ID) {\n      self.selectedBranchId = branchId\n    },\n  }))\n\nexport interface TSettingsModel extends Instance<typeof SettingsModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { FilterInputModel } from '../../../components/FilterInput/FilterInputModel'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { RM } from '../../../tools/ramda'\nimport {\n  DEFAULT_IMPORT,\n  DEFAULT_QUANTITY,\n  DEFAULT_RAW_QUANTITY,\n  TransferItem,\n} from './StockTransferItem'\n\nconst IMPORT_QUANTITY = 0\n\nexport type TInitItem = {\n  id: string\n  max: number\n  quantity: number\n}\n\nexport const StockTransferModel = BaseModel.named('StockTransfer')\n  .props({\n    transferItems: types.map(TransferItem),\n    filter: types.optional(FilterInputModel, {}),\n  })\n  .volatile(() => ({\n    importMode: false,\n    targetBranchId: null as MaybeID,\n  }))\n  .views(self => ({\n    get isImportMode() {\n      return self.importMode === true\n    },\n    get isTransferMode() {\n      return self.importMode === false\n    },\n    get targetId(): MaybeID {\n      return self.targetBranchId !== self.root.settings.branchId\n        ? self.targetBranchId\n        : null\n    },\n    get hasTarget() {\n      return this.targetId !== null\n    },\n    get sourceId(): ID {\n      return self.root.settings.branchId\n    },\n    get isImportingAll() {\n      const shouldNotImportSome = Array.from(self.transferItems.values()).find(\n        RM.propEq('import', false),\n      )\n      return self.transferItems.size > 0 && !shouldNotImportSome\n    },\n    isImportingItem(itemId: ID) {\n      const item = self.transferItems.get(itemId)\n      return item ? item.import : DEFAULT_IMPORT\n    },\n    getItemRawQuantity(itemId: ID) {\n      const item = self.transferItems.get(itemId)\n      return item ? item.rawQuantity : DEFAULT_RAW_QUANTITY\n    },\n    getItemTransferQuantity(itemId: ID) {\n      const item = self.transferItems.get(itemId)\n      return item ? item.quantity : DEFAULT_QUANTITY\n    },\n    getItemLimit(itemId: ID) {\n      const item = self.transferItems.get(itemId)\n      return item ? item.max : 0\n    },\n    isItemQuantityValid(itemId: ID) {\n      const item = self.transferItems.get(itemId)\n      return item ? item.isQuantityValid : false\n    },\n    get itemsForTransfer() {\n      return Array.from(self.transferItems.values())\n        .filter(item =>\n          this.isImportMode ? item.import === true : item.isQuantityValid,\n        )\n        .map(item =>\n          this.isImportMode ? { ...item, quantity: IMPORT_QUANTITY } : item,\n        )\n    },\n  }))\n  .actions(self => ({\n    setTargetId(branchId: MaybeID) {\n      self.targetBranchId = branchId\n    },\n    initItems(items: RoA<TInitItem>) {\n      this.clearItems()\n      items.forEach(item => {\n        self.transferItems.put(item)\n      })\n    },\n    toggleImportAll() {\n      const newValue = !self.isImportingAll\n      self.transferItems.forEach(item => (item.import = newValue))\n    },\n    toggleImportItem(itemId: ID) {\n      const item = self.transferItems.get(itemId)\n      if (item) {\n        self.transferItems.put({ ...item, import: !item.import })\n      }\n    },\n    setQuantity(itemId: ID, quantity: string) {\n      const item = self.transferItems.get(itemId)\n      if (item) {\n        item.setRawQuantity(quantity)\n      }\n    },\n    clearTransferState() {\n      self.transferItems.forEach(item => {\n        item.reset()\n      })\n    },\n    clearItems() {\n      self.transferItems.clear()\n    },\n    toggleImportMode() {\n      self.importMode = !self.importMode\n    },\n  }))\n\nexport interface TStockTransferModel\n  extends Instance<typeof StockTransferModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { StockTransferModel } from './StockTransferModel'\n\nexport const StockModel = BaseModel.named('Stock').props({\n  transfer: types.optional(StockTransferModel, {}),\n})\n\nexport interface TStockModelModel extends Instance<typeof StockModel> {}\nexport interface TStockModelModelProps extends SnapshotIn<typeof StockModel> {}\n","import { MapModel } from '../../../models/MapModel'\n\nexport const ZoneMapModel = MapModel.named('ZoneMap')\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { FCompanyBranchFragment, ZoneTypeEnum } from '../../../graph/generated'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { RM } from '../../../tools/ramda'\nimport { ZoneMapModel } from '../models/ZoneMapModel'\nimport { TBranch, TBrand } from '../zones.types'\n\nexport const ZoneModel = BaseModel.named('Zone')\n  .props({\n    map: types.optional(ZoneMapModel, {}),\n    brandId: types.maybeNull(types.string),\n    branchId: types.maybeNull(types.string),\n  })\n  .volatile(() => ({\n    zoneTypes: [ZoneTypeEnum.Area, ZoneTypeEnum.Return],\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.brandId = null\n      self.branchId = null\n    },\n  }))\n  .views(self => ({\n    get branch(): Maybe<TBranch> {\n      return (\n        (self.branchId &&\n          self.root.user.branches.find(RM.propEq('id', self.branchId))) ||\n        null\n      )\n    },\n    get brand(): Maybe<TBrand> {\n      return (\n        (self.brandId &&\n          self.root.user.brands.find(RM.propEq('id', self.brandId))) ||\n        null\n      )\n    },\n    get hasBranchFilter() {\n      return this.branch !== null\n    },\n    get branchFilterId(): MaybeID {\n      return this.branch === null ? null : this.branch.id\n    },\n    get branchFilterPredicate() {\n      if (this.branch) {\n        return RM.propEq('id', this.branch.id)\n      }\n      return this.brand === null\n        ? RM.F\n        : RM.pathSatisfies(RM.equals(this.brand.id), ['brand', 'id'])\n    },\n    get zoneFilterPredicate() {\n      if (this.branch !== null) {\n        return RM.pathSatisfies(RM.equals(this.branch.id), [\n          'companyBranch',\n          'id',\n        ])\n      }\n      return this.brand === null\n        ? () => false\n        : RM.pathSatisfies(RM.equals(this.brand.id), [\n            'companyBranch',\n            'brand',\n            'id',\n          ])\n    },\n    get branches(): RoA<FCompanyBranchFragment> {\n      return self.root.user.branches\n    },\n  }))\n  .actions(self => ({\n    setBranchFilter(branch: TBranch) {\n      self.branchId = branch.id\n      self.brandId = branch.brand.id\n    },\n    setBrandFilter(brand: TBrand, brandBranches: TBranch[]) {\n      self.brandId = brand.id\n      if (!self.branch || self.branch.brand.id !== brand.id) {\n        self.branchId =\n          (brandBranches.length === 1 && RM.head(brandBranches).id) || null\n      }\n    },\n    setZoneTypes(types: ZoneTypeEnum[]) {\n      self.zoneTypes = types\n    },\n    clearBranchFilter() {\n      self.branchId = null\n    },\n    clearBrandFilter() {\n      self.brandId = null\n      self.branchId = null\n    },\n  }))\n\nexport interface TZoneModel extends Instance<typeof ZoneModel> {}\n","import { types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const AudioModel = BaseModel.named('Audio')\n  .props({\n    userEnabled: types.optional(types.boolean, true),\n  })\n  .volatile(() => ({\n    canPlay: false,\n    audioBlocked: false,\n  }))\n  .views(self => ({\n    get enabled() {\n      return self.userEnabled && self.canPlay && !self.audioBlocked\n    },\n    get askForAudio() {\n      return self.userEnabled && !self.canPlay && !self.audioBlocked\n    },\n  }))\n  .actions(self => ({\n    setUserEnabled(enabled: boolean) {\n      self.userEnabled = enabled\n    },\n    setCanPlay(canPlay: boolean = true) {\n      self.canPlay = canPlay\n    },\n    blockAudio() {\n      self.audioBlocked = true\n    },\n  }))\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { AuthModel } from '../models/AuthModel'\nimport { ConfigModel } from '../models/ConfigModel'\nimport { UserModel } from '../models/UserModel'\nimport { CreateOrderModel } from '../segments/createorder/models/CreateOrderModel'\nimport { OrderModel } from '../segments/order/models/OrderModel'\nimport { StatisticsModel } from '../segments/overview/models/StatisticsModel'\nimport { SettingsModel } from '../segments/settings/models/SettingsModel'\nimport { StockModel } from '../segments/stock/models/StockModel'\nimport { ZoneModel } from '../segments/zones/models/ZoneModel'\nimport { AudioModel } from './AudioModel'\nimport { BaseModel } from './BaseModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    audio: types.optional(AudioModel, {}),\n    auth: types.optional(AuthModel, {}),\n    user: types.optional(UserModel, {}),\n    order: types.optional(OrderModel, {}),\n    createOrder: types.optional(CreateOrderModel, {}),\n    zone: types.optional(ZoneModel, {}),\n    settings: types.optional(SettingsModel, {}),\n    config: types.optional(ConfigModel, {}),\n    statistics: types.optional(StatisticsModel, {}),\n    stock: types.optional(StockModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.audio,\n        self.auth,\n        self.user,\n        self.settings,\n        self.zone,\n        self.order,\n        self.statistics,\n        self.createOrder,\n      ]\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.auth.invalidate()\n      self.user.invalidate()\n      self.order.invalidate()\n      self.createOrder.invalidate()\n      self.settings.invalidate()\n      self.zone.invalidate()\n    },\n  }))\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import { ApolloProvider } from '@speedlo/graphql'\nimport React from 'react'\n\nimport { RootContext } from '../context/RootContext'\nimport { createApolloClient } from '../graph/createClient'\nimport { persistModel } from '../helpers/persistModel'\nimport { RootModel } from '../models/RootModel'\nimport PageLoader from './PageLoader'\n\nexport const RootProvider: React.FC = ({ children }) => {\n  const [isInit, setInit] = React.useState(false)\n\n  const [root] = React.useState(() => RootModel.create())\n  const [client] = React.useState(() => {\n    return createApolloClient(root)\n  })\n\n  React.useEffect(() => {\n    if (process.env.REACT_APP_STAGE === 'dev') {\n      // @ts-ignore\n      window.root = root\n    }\n    Promise.all(root.persistedModels.map(persistModel)).then(() => {\n      setInit(true)\n    })\n  }, [root])\n\n  if (!isInit) {\n    return <PageLoader />\n  }\n\n  return (\n    <ApolloProvider client={client}>\n      <RootContext.Provider value={root}>\n        {React.Children.only(children)}\n      </RootContext.Provider>\n    </ApolloProvider>\n  )\n}\n\nexport const useRoot = () => {\n  const root = React.useContext(RootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n","import {\n  createAuthLink,\n  createDateParserLink,\n  createDefaultApolloClient,\n  createLogLink,\n  createNetworkLink,\n  createOfflineLink,\n  createRetryLink,\n} from '@speedlo/graphql'\n\nimport { appConfig } from '../config'\nimport { TRootModel } from '../models/RootModel'\n\nexport function createApolloClient(root: TRootModel) {\n  return createDefaultApolloClient(\n    createAuthLink({\n      enableTokenCache: false,\n      getToken: () => root.auth.token!,\n      onInvalidToken: () => root.auth.invalidate(),\n    }),\n    createLogLink({ enabled: process.env.REACT_APP_STAGE !== 'prod' }),\n    createRetryLink(),\n    createOfflineLink(),\n    createDateParserLink(getResolvers()),\n    // Warning: When using upload in the mutation, the batching has to be disabled!\n    createNetworkLink({ endpoint: appConfig.endpoint, useUploads: true }),\n  )\n}\n\nfunction getResolvers() {\n  return {\n    CompanyBranch: ['willOpenAt', 'willCloseAt'],\n    BusinessHour: ['specificDate'],\n    BusinessHourInterval: ['start', 'end', 'openAt', 'closeAt'],\n    FinancialReport: ['reportDatetime'],\n    GeoPositionWithTimestamp: ['timestamp'],\n    Order: [\n      'createdAt',\n      'deliverAt',\n      'deliveredAt',\n      'deliverAtWorst',\n      'delayedDeliveryTime',\n    ],\n    OrderStateCategoryRelation: ['createdAt'],\n    SectorRecipe: ['createdAt'],\n    Occasion: ['date'],\n  }\n}\n","import debug from 'debug'\n\n// @ts-ignore\ndebug.useColors = () => !process.env.REACT_APP_STAGE\n\nexport const logMain = debug('main')\nexport const logDebug = debug('debug')\nexport const logAuth = debug('auth')\nexport const logPersistence = debug('persistence')\nexport const logBootstrap = debug('bootstrap')\nexport const logAccess = debug('access')\nexport const logGraph = debug('graph')\nexport const logForm = debug('form')\nexport const logSentry = debug('sentry')\nexport const logLang = debug('lang')\nexport const logUpdate = debug('update')\nexport const logSound = debug('sound')\n// tslint:disable-next-line:no-console\nexport const logRouting = console.debug\n// tslint:disable-next-line:no-console\nexport const logTest = console.log\n// tslint:disable-next-line:no-console\nexport const logError = console.error\n","import { WeekDayEnum } from '../../graph/generated'\n\nexport enum ESpecificHourMode {\n  TIMESPAN = 'TIMESPAN',\n  FULLDAY = 'FULLDAY',\n}\n\nexport interface TBusinessHour {\n  id: ID\n  weekDay: WeekDayEnum\n  openAt: Date\n  closeAt: Date\n}\n\nexport type TSpecificBusinessHoursFormValues = {\n  date: Date\n  openAt: Date\n  closeAt: Date\n  note: string\n}\n","import React from 'react'\n\nimport { Spacing } from '../styling'\nimport { Sizer } from './Sizer'\n\ninterface IProps {\n  className?: string\n}\n\nexport const SizerButton: React.FC<IProps> = ({ children, ...props }) => {\n  return (\n    <Sizer\n      width={Spacing.ButtonHeight}\n      height={Spacing.ButtonHeight}\n      {...props}\n    >\n      {children}\n    </Sizer>\n  )\n}\n","import styled from 'styled-components/macro'\n\nimport { Spacing } from '../styling'\n\nexport interface IProps {\n  margin?: string | number\n  bottom?: number\n  left?: number\n  right?: number\n  top?: number\n  className?: string\n}\n\nexport const MarginBox = styled('div')`\n  margin: ${({ margin, top = 0, bottom = 0, left = 0, right = 0 }: IProps) => {\n    if (typeof margin === 'string') {\n      return margin\n    }\n    if (typeof margin === 'number') {\n      return `${margin}${Spacing.DefaultSizeUnit}`\n    }\n    return `${top}${Spacing.DefaultSizeUnit} ${right}${Spacing.DefaultSizeUnit} ${bottom}${Spacing.DefaultSizeUnit} ${left}${Spacing.DefaultSizeUnit}`\n  }};\n`\n","export const ROUTE_SETTINGS = '/settings'\nexport const ROUTE_SETTINGS_MENU = `${ROUTE_SETTINGS}/menu`\nexport const ROUTE_SETTINGS_ZONES = `${ROUTE_SETTINGS}/zones`\nexport const ROUTE_SETTINGS_USER = `${ROUTE_SETTINGS}/user`\nexport const ROUTE_SETTINGS_HOURS = `${ROUTE_SETTINGS}/businesshours`\nexport const ROUTE_SETTINGS_PREFS = `${ROUTE_SETTINGS}/preferences`\n","import styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile } from '../app/Responsive'\n\nexport interface IPageLayoutGridItemProps {\n  gridRow?: string | number\n  gridRowInMobile?: string | number\n  gridRowSpan?: number\n  gridRowSpanInMobile?: number\n  gridColumn?: string | number\n  gridColumnInMobile?: string | number\n  gridColumnSpan?: number\n  gridColumnSpanInMobile?: number\n}\n\nconst gridColumnProperty = ({\n  gridColumn = '1',\n  gridColumnSpan = 1,\n}: IPageLayoutGridItemProps) =>\n  gridColumn.toString().indexOf('/') === -1\n    ? `${gridColumn} / span ${gridColumnSpan}`\n    : gridColumn\n\nconst gridRowProperty = ({\n  gridRow = '1',\n  gridRowSpan = 1,\n}: IPageLayoutGridItemProps) =>\n  gridRow.toString().indexOf('/') === -1\n    ? `${gridRow} / span ${gridRowSpan}`\n    : gridRow\n\nconst gridColumnInMobileProperty = ({\n  gridColumnInMobile = 1,\n  gridColumnSpanInMobile = 16,\n}: IPageLayoutGridItemProps) => {\n  if (gridColumnInMobile.toString().indexOf('/') === -1) {\n    return `${gridColumnInMobile} / span ${gridColumnSpanInMobile}`\n  } else {\n    return gridColumnInMobile\n  }\n}\n\nconst gridRowInMobileProperty = ({\n  gridRowInMobile,\n  gridRowSpanInMobile = 1,\n}: IPageLayoutGridItemProps) => {\n  if (gridRowInMobile === undefined) {\n    return 'unset'\n  }\n  if (gridRowInMobile.toString().indexOf('/') === -1) {\n    return `${gridRowInMobile} / span ${gridRowSpanInMobile}`\n  } else {\n    return gridRowInMobile\n  }\n}\n\nexport const PageLayoutGridItem = styled.div<IPageLayoutGridItemProps>`\n  ${mediaDesktop`\n    grid-column: ${gridColumnProperty};\n    grid-row: ${gridRowProperty};\n  `};\n  ${mediaMobile`\n    grid-column: ${gridColumnInMobileProperty};\n    grid-row: ${gridRowInMobileProperty};\n  `};\n`\n","import { Trans } from '@lingui/macro'\nimport {\n  Dialog,\n  DialogActions,\n  DialogContent,\n  Typography,\n} from '@material-ui/core'\nimport { VolumeOff, VolumeUp } from '@material-ui/icons'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\nimport { useRoot } from './RootProvider'\nimport { SizerButton } from './SizerButton'\n\nexport const SoundControl = React.memo<NoChildren>(() => {\n  const { audio } = useRoot()\n  return useObserver(() => (\n    <>\n      <SizerButton>\n        <TouchButton\n          id=\"sound-control-button\"\n          color={audio.enabled ? Colors.green : Colors.red}\n          icon={audio.enabled ? VolumeUp : VolumeOff}\n          iconSize={2}\n          onClick={() => {\n            audio.setUserEnabled(!audio.userEnabled)\n          }}\n        />\n      </SizerButton>\n      <Dialog open={audio.askForAudio}>\n        <DialogContent>\n          <Typography>\n            <Trans>\n              You have enabled sounds before. Due to technical restrictions, you\n              need to click on the button below for sounds to be able to play.\n              You can disable sounds with green button in top right corner.\n            </Trans>\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <TouchButton\n            color={Colors.greyMiddle}\n            onClick={() => audio.setCanPlay(true)}\n          >\n            <Trans>Confirm to play sounds</Trans>\n          </TouchButton>\n        </DialogActions>\n      </Dialog>\n    </>\n  ))\n})\n","import { SECOND, useTimer } from '@speedlo/hooks'\nimport React from 'react'\n\nimport { DF } from '../tools/datefns'\n\ninterface IProps {}\n\nexport const LiveClock: React.FC<IProps> = props => {\n  const now = useTimer({ enabled: true, interval: SECOND })\n  return <div className=\"clock\">{DF.format(now, 'H:mm:ss')}</div>\n}\n","import { ExitToApp } from '@material-ui/icons'\nimport { useReaction } from '@speedlo/hooks'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile } from '../app/Responsive'\nimport { useRoot } from '../atoms/RootProvider'\nimport { useQLogoutWidget } from '../graph/generated'\nimport { formatFullName } from '../helpers/formats'\nimport { i18n } from '../i18n'\nimport { LiveClock } from '../molecules/LiveClock'\nimport { ROUTE_AUTH_LOGOUT } from '../segments/login/login.routes'\nimport { Colors, Spacing } from '../styling'\n\nconst StyledLogoutWidget = styled.div`\n  color: ${Colors.greyLight};\n  ${mediaDesktop`\n    margin-left: ${Spacing.Middle};\n  `};\n  ${mediaMobile`\n    margin-left: ${Spacing.Small};\n  `};\n  &:hover {\n    color: ${Colors.white};\n  }\n  & a {\n    white-space: nowrap;\n  }\n  & span.name {\n    color: ${Colors.greyLight};\n    text-decoration: none;\n    font-weight: lighter;\n    position: relative;\n    display: inline-block;\n    max-width: 10rem;\n    text-align: right;\n    ${mediaDesktop`\n    top: 0.6rem;\n    `}\n    ${mediaMobile`\n       top: 0.3rem;\n    `}\n  }\n\n  & svg {\n    color: ${Colors.greyLight};\n    vertical-align: top;\n    margin: 0.4rem;\n    ${mediaMobile`\n       margin: 0.2rem;\n    `}\n  }\n\n  & div.clock {\n    font-size: 1.3rem;\n  }\n`\n\nexport const LogoutWidget = observer(() => {\n  const { auth } = useRoot()\n  const { data, loading, refetch } = useQLogoutWidget(\n    { id: auth.userId! },\n    { skip: !auth.isAuthenticated, fetchPolicy: 'cache-first' },\n  )\n\n  useReaction(\n    () => auth.userId,\n    userId => {\n      if (userId !== null) {\n        refetch({ id: userId })\n      }\n    },\n  )\n\n  const renderData = () => {\n    if (loading) {\n      return '...'\n    }\n    const displayName = !(auth.isAuthenticated && data)\n      ? i18n.t`Not logged in`\n      : `${formatFullName(data.user)}`\n    return (\n      <Link to={ROUTE_AUTH_LOGOUT}>\n        <span className=\"name\">{displayName}</span>\n        <ExitToApp />\n      </Link>\n    )\n  }\n\n  return (\n    <StyledLogoutWidget data-testid=\"logout-widget\">\n      {renderData()}\n      <LiveClock />\n    </StyledLogoutWidget>\n  )\n})\n","import { ChevronLeft, Home } from '@material-ui/icons'\nimport { useRouterContext } from '@speedlo/hooks'\nimport Color from 'color'\nimport React, { MouseEvent } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { ROUTE_MAIN } from '../segments/dashboard/dashboard.routes'\nimport { Colors, Radiuses, Spacing } from '../styling'\n\ninterface IHomeButtonProps {\n  iconColor?: Colors\n  color?: Colors\n  disabled?: boolean\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n  goBack?: boolean\n  backRoute?: string\n}\n\nconst applyAlpha = (alphaValue: number) => (props: IHomeButtonProps) =>\n  Color(props.color)\n    .alpha(alphaValue)\n    .string()\n\nconst HomeButtonStyled = styled.button`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 0 0 ${Radiuses.Button} 0 !important;\n  height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  margin: 0;\n  padding: 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: ${Colors.white};\n  position: relative;\n  font-size: 1rem;\n  transition-duration: 0.2s;\n\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nexport const HomeButton: React.FC<IHomeButtonProps> = ({\n  color = Colors.greyMiddle,\n  iconColor = Colors.white,\n  goBack = false,\n  backRoute,\n  ...props\n}) => {\n  const { history } = useRouterContext()\n  if (goBack) {\n    return (\n      <HomeButtonStyled\n        type=\"button\"\n        color={color}\n        onClick={() => {\n          if (backRoute) {\n            history.push(backRoute)\n          } else {\n            history.goBack()\n          }\n        }}\n        {...props}\n      >\n        <Icon icon={ChevronLeft} color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    )\n  }\n  return (\n    <Link to={ROUTE_MAIN}>\n      <HomeButtonStyled type=\"button\" color={color} {...props}>\n        <Icon icon={Home} color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    </Link>\n  )\n}\n","import React from 'react'\nimport useWindowScroll from 'react-use/lib/useWindowScroll'\nimport styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile, mediaSmallMobile } from '../app/Responsive'\nimport { PageLayoutGrid } from '../atoms/PageLayoutGrid'\nimport { PageTitle } from '../atoms/PageTitle'\nimport { SoundControl } from '../atoms/SoundControl'\nimport { LogoutWidget } from '../organisms/LogoutWidget'\nimport { SecureRoute } from '../routes/SecureRoute'\nimport { Spacing } from '../styling'\nimport { HomeButton } from './HomeButton'\n\ninterface ICommonProps {\n  topContent?: React.ReactNode\n}\n\ninterface IStyledProps extends ICommonProps {\n  isScrolledDown: boolean\n}\n\nexport interface IPageLayoutResponsiveProps extends ICommonProps {\n  pageTitle?: string\n  hideLogoutWidget?: boolean\n  showSoundControl?: boolean\n  showHomeButton?: boolean\n  useBackButton?: boolean\n  backRoute?: string\n  isForIconDashboard?: boolean\n  className?: string\n}\n\nconst StyledPageLayoutResponsive = styled.div<IStyledProps>`\n  .page-header {\n    position: sticky;\n    top: 0;\n    width: 100vw;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    z-index: 30;\n    height: ${Spacing.PageHeaderHeight + Spacing.DefaultSizeUnit};\n    background-color: ${({ isScrolledDown }) =>\n      isScrolledDown ? 'rgba(0, 0, 0, 0.7)' : 'initial'};\n\n    @media print {\n      display: none;\n    }\n  }\n\n  .home-button-container {\n    flex: 0 0 auto;\n    z-index: 100;\n  }\n\n  .menu-container {\n    flex: 1 1 0;\n    align-self: flex-start;\n    z-index: 80;\n    display: flex;\n    justify-content: flex-end;\n    flex-wrap: wrap;\n    overflow: hidden;\n    ${mediaDesktop`\n    height: 4rem;\n    `};\n    ${mediaMobile`\n    height: 3.7rem;\n    `};\n  }\n\n  .menu-item-title {\n    flex: 1 1 0;\n    ${mediaMobile`\n      display: ${({ topContent }: IPageLayoutResponsiveProps) =>\n        topContent !== undefined ? 'none' : 'initial'};\n    `};\n  }\n\n  .menu-item {\n    ${mediaDesktop`\n      margin: ${Spacing.Middle} ${Spacing.Small};\n    `};\n    ${mediaMobile`\n     margin: 0 ${Spacing.Small};\n    `};\n  }\n\n  .menu-item-logout {\n    ${mediaSmallMobile`\n      display: ${({ topContent }: IPageLayoutResponsiveProps) =>\n        topContent !== undefined ? 'none' : 'initial'};\n    `};\n  }\n`\n\nexport const PageLayoutResponsive: React.FC<IPageLayoutResponsiveProps> = ({\n  pageTitle = '',\n  hideLogoutWidget = false,\n  showSoundControl = false,\n  showHomeButton = true,\n  useBackButton = false,\n  backRoute,\n  children,\n  topContent,\n  isForIconDashboard = false,\n  className,\n}) => {\n  const { y } = useWindowScroll()\n\n  return (\n    <StyledPageLayoutResponsive\n      topContent={topContent}\n      isScrolledDown={y > 10}\n      className={className}\n    >\n      {pageTitle && <PageTitle title={pageTitle} />}\n\n      <div className=\"page-header\">\n        <div className=\"home-button-container\">\n          {showHomeButton ? (\n            <HomeButton goBack={useBackButton} backRoute={backRoute} />\n          ) : null}\n        </div>\n\n        <div className=\"menu-container\">\n          <div className=\"menu-item-title\">\n            <PageTitle.Display />\n          </div>\n\n          <div className=\"menu-item\">{topContent}</div>\n\n          {showSoundControl && (\n            <div className=\"menu-item\">\n              <SoundControl />\n            </div>\n          )}\n\n          <div className=\"menu-item-logout\">\n            {!hideLogoutWidget && (\n              <SecureRoute path=\"/\" component={LogoutWidget} redirect={false} />\n            )}\n          </div>\n        </div>\n      </div>\n      <PageLayoutGrid isForIconDashboard={isForIconDashboard}>\n        {children}\n      </PageLayoutGrid>\n    </StyledPageLayoutResponsive>\n  )\n}\n","export const ROUTE_OVERVIEW_DASHBOARD = '/overview'\nexport const ROUTE_OVERVIEW_CLOSURE = `${ROUTE_OVERVIEW_DASHBOARD}/closure`\nexport const ROUTE_OVERVIEW_CLOSURE_HISTORY = `${ROUTE_OVERVIEW_CLOSURE}/history`\nexport const ROUTE_OVERVIEW_STATS_SALES = `${ROUTE_OVERVIEW_DASHBOARD}/sales`\nexport const ROUTE_OVERVIEW_STATS_ORDERS = `${ROUTE_OVERVIEW_DASHBOARD}/orders`\nexport const ROUTE_OVERVIEW_STATS_STOCK = `${ROUTE_OVERVIEW_DASHBOARD}/stock`\n","import React from 'react'\nimport ReactResponsive from 'react-responsive'\nimport { css } from 'styled-components/macro'\n\nexport const mobileBreakpoint = 600\nexport const mobileSmallBreakpoint = 375\nexport const desktopBreakpoint = 1300\n\nexport const Desktop = props => (\n  <ReactResponsive {...props} minWidth={mobileBreakpoint} />\n)\nexport const Mobile = props => (\n  <ReactResponsive {...props} maxWidth={mobileBreakpoint} />\n)\n\nexport const mediaMobile = (...args) => css`\n  @media (max-width: ${mobileBreakpoint}px) {\n    // @ts-ignore\n    ${css(...args)}\n  }\n`\nexport const mediaSmallMobile = (...args) => css`\n  @media (max-width: ${mobileSmallBreakpoint}px) {\n    // @ts-ignore\n    ${css(...args)}\n  }\n`\nexport const mediaDesktop = (...args) => css`\n  @media (min-width: ${mobileBreakpoint + 1}px) {\n    // @ts-ignore\n    ${css(...args)}\n  }\n`\n\nexport function useResponsive() {\n  const [state, setState] = React.useState({\n    isMobile: false,\n    isSmallMobile: false,\n    isDesktop: false,\n    isTablet: true,\n  })\n\n  React.useLayoutEffect(() => {\n    update() // initial set\n\n    window.addEventListener('resize', update)\n    return () => {\n      window.removeEventListener('resize', update)\n    }\n\n    function update() {\n      const { innerWidth } = window\n      const isMobile = innerWidth <= mobileBreakpoint\n      const isSmallMobile = innerWidth <= mobileSmallBreakpoint\n      const isDesktop = innerWidth >= desktopBreakpoint\n      const isTablet = !isMobile && !isDesktop\n      setState({ isMobile, isSmallMobile, isDesktop, isTablet })\n    }\n  }, [])\n\n  return state\n}\n","export const ROUTE_ORDER_OVERVIEW = '/order'\nexport const ROUTE_ORDER_CREATE = `${ROUTE_ORDER_OVERVIEW}/create`\nexport const ROUTE_ORDER_MAP = `${ROUTE_ORDER_OVERVIEW}/map`\n","export const ROUTE_CUSTOMER_SCREEN_SETUP = '/customer-screen'\nexport const ROUTE_CUSTOMER_SCREEN = '/customer-screen/numbers'\n","export const ROUTE_STOCK = '/stock'\nexport const ROUTE_STOCK_OVERVIEW = `${ROUTE_STOCK}/overview`\nexport const ROUTE_STOCK_DEPOSIT = `${ROUTE_STOCK}/deposit`\nexport const ROUTE_STOCK_TRANSFER = `${ROUTE_STOCK}/transfer`\nexport const ROUTE_STOCK_STATS = `${ROUTE_STOCK}/stats`\n","import { RM } from '../tools/ramda'\n\nexport function isPartialMatch(searchValue: string) {\n  if (!searchValue) {\n    return RM.T\n  }\n  const search = searchValue.toLocaleLowerCase()\n  return (propValue: string) => {\n    if (!propValue) {\n      return true\n    }\n    return propValue.toLocaleLowerCase().includes(search)\n  }\n}\n","export const ROUTE_KITCHEN = '/kitchen'\nexport const ROUTE_KITCHEN_COMPLETION = `${ROUTE_KITCHEN}/completion`\n","import { SECOND, useAutorun, useInterval } from '@speedlo/hooks'\nimport React from 'react'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { useAudioCapabilityCheck } from './useAudioCapabilityCheck'\nimport { useAudioPlayer } from './useAudioPlayer'\n\ninterface IOptions {\n  soundUrl: string\n  shouldPlay: boolean\n  intervalSec: number\n  forcePlayNow?: boolean\n}\n\nexport function useIntervalSound({\n  soundUrl,\n  shouldPlay,\n  intervalSec,\n  forcePlayNow = false,\n}: IOptions) {\n  useAudioCapabilityCheck()\n\n  const { audio: audioModel } = useRoot()\n  const [audio, controls] = useAudioPlayer({\n    src: soundUrl,\n  })\n\n  const playIfYouCan = React.useCallback(() => {\n    if (shouldPlay && audioModel.enabled) {\n      controls.volume(0.5)\n      controls.play()\n    }\n    // * Ignoring controls as they are not properly memoized, but mostly using refs\n    // * so it shouldn't matter if it becomes stale.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [shouldPlay, audioModel])\n\n  const [startTimer, stopTimer] = useInterval(\n    playIfYouCan,\n    intervalSec * SECOND,\n  )\n\n  const stopNow = React.useCallback(() => {\n    controls.pause()\n    controls.seek(0)\n    stopTimer()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stopTimer])\n\n  React.useEffect(() => {\n    if (shouldPlay) {\n      startTimer()\n    } else {\n      stopNow()\n    }\n  }, [shouldPlay, startTimer, stopNow])\n\n  useAutorun(() => {\n    if (!audioModel.enabled) {\n      stopNow()\n    }\n  })\n\n  React.useEffect(() => {\n    if (forcePlayNow) {\n      playIfYouCan()\n    }\n  }, [forcePlayNow, playIfYouCan])\n\n  return audio\n}\n","import React from 'react'\nimport useEvent from 'react-use/lib/useEvent'\n\nimport { useRoot } from '../atoms/RootProvider'\n\nexport function useAudioCapabilityCheck() {\n  const { audio: audioModel } = useRoot()\n\n  const setCanPlay = React.useCallback(() => {\n    audioModel.setCanPlay()\n  }, [audioModel])\n\n  useEvent('keydown', setCanPlay)\n  useEvent('mousedown', setCanPlay)\n  useEvent('touchstart', setCanPlay)\n\n  React.useEffect(() => {\n    if (audioModel.canPlay) {\n      return\n    }\n    const audio = document.createElement('audio')\n    const maybePromise = audio.play()\n    if (Reflect.has(maybePromise, 'then')) {\n      maybePromise.then(setCanPlay).catch(err => {\n        if (err.name !== 'NotAllowedError') {\n          // some other unrecoverable error, no sounds can play\n          audioModel.blockAudio()\n        } else {\n          audioModel.setCanPlay(false)\n        }\n      })\n    } else if (!audio.paused) {\n      setCanPlay()\n    }\n  }, [setCanPlay, audioModel])\n}\n","import useAudio from 'react-use/lib/useAudio'\nimport { HTMLMediaProps } from 'react-use/lib/util/createHTMLMediaHook'\n\nexport function useAudioPlayer(props: HTMLMediaProps) {\n  const [audio, state, controls] = useAudio({\n    autoPlay: false,\n    loop: false,\n    ...props,\n  })\n\n  return [audio, controls, state] as [\n    typeof audio,\n    typeof controls,\n    typeof state,\n  ]\n}\n","import { Observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { TRootModel } from '../models/RootModel'\nimport { useRoot } from './RootProvider'\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.FC<IProps> = ({ render, observe = true }) => {\n  const root = useRoot()\n  return observe === true ? (\n    <Observer>{() => <>{render(root)}</>}</Observer>\n  ) : (\n    render(root)\n  )\n}\n","import styled, { css } from 'styled-components/macro'\n\nimport { Spacing } from '../styling'\n\ninterface IProps {\n  isForIconDashboard: boolean\n}\n\nconst getGridTemplatesRows = (props: IProps) =>\n  props.isForIconDashboard\n    ? `repeat(4, ${Spacing.DashboardButtonHeight + Spacing.DefaultSizeUnit})`\n    : 'repeat(16, auto)'\n\nconst getGridGap = (props: IProps) =>\n  props.isForIconDashboard ? `${Spacing.Middle}` : `0 ${Spacing.Small}`\n\nconst getDashboardButtonHeight = (props: IProps) =>\n  props.isForIconDashboard &&\n  css`\n    height: ${`${Spacing.DashboardButtonHeight}${Spacing.DefaultSizeUnit}`};\n  `\n\nexport const PageLayoutGrid = styled.div<IProps>`\n  display: grid;\n  width: 100vw;\n  max-width: 100%;\n  grid-gap: ${getGridGap};\n  grid-template-columns: repeat(16, 1fr);\n  grid-template-rows: ${getGridTemplatesRows};\n  padding: 0 ${Spacing.Small} ${Spacing.Small} ${Spacing.Small};\n  grid-auto-flow: row dense;\n\n  & > div {\n    ${getDashboardButtonHeight};\n  }\n`\n","module.exports = __webpack_public_path__ + \"static/media/connectionWarning.ac6fe03b.mp3\";","import { ISetDidChange, Lambda, observable } from 'mobx'\nimport { getParent, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { scroller } from 'react-scroll'\n\nimport { OrderStateCategoryEnum } from '../../../graph/generated'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TOrderModel } from './OrderModel'\n\nexport const OrderListModel = BaseModel.named('OrderList')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    collapsedCategories: types.optional(types.array(types.string), [\n      OrderStateCategoryEnum.Finished,\n    ]),\n  })\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length ? Array.from(self.branches) : []\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n    get isSingleBranchSelected() {\n      return self.branches.length === 1\n    },\n    get firstBranchId() {\n      if (self.branches.length === 1) {\n        return self.branches[0]\n      }\n      return null\n    },\n    get orderMap(): TOrderModel {\n      return getParent(self).map\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.branches.clear()\n    },\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n  }))\n  .extend(self => {\n    const detailOpen = observable.set<ID>()\n\n    return {\n      views: {\n        isOrderDetailOpen(orderId: ID) {\n          return detailOpen.has(orderId)\n        },\n        isCategoryCollapsed(categoryCode: OrderStateCategoryEnum) {\n          return self.collapsedCategories.includes(categoryCode)\n        },\n      },\n      actions: {\n        toggleOrderDetail(orderId: ID) {\n          if (detailOpen.has(orderId)) {\n            detailOpen.delete(orderId)\n          } else {\n            detailOpen.add(orderId)\n          }\n        },\n        toggleCategoryCollapse(category: OrderStateCategoryEnum) {\n          const index = self.collapsedCategories.indexOf(category)\n          if (index >= 0) {\n            self.collapsedCategories.splice(index, 1)\n          } else {\n            self.collapsedCategories.push(category)\n          }\n        },\n        focusOrderDetail(orderId: ID) {\n          if (!detailOpen.has(orderId)) {\n            detailOpen.add(orderId)\n          }\n          setImmediate(() => {\n            scroller.scrollTo(`order-${orderId}`, {\n              smooth: 'easeInOutQuart',\n              containerId: 'order-list',\n              absolute: true,\n              offset: -140,\n            })\n          })\n        },\n        observerOrderDetail: detailOpen.observe.bind(detailOpen) as (\n          listener: (changes: ISetDidChange<ID>) => void,\n        ) => Lambda,\n      },\n    }\n  })\n\nexport interface TOrderListModel extends Instance<typeof OrderListModel> {}\nexport interface TOrderListModelProps\n  extends SnapshotIn<typeof OrderListModel> {}\n","module.exports = __webpack_public_path__ + \"static/media/loader.533cace4.gif\";","module.exports = __webpack_public_path__ + \"static/media/bg_antracit.edb33205.jpg\";","// @ts-ignore temporary before figuring out a logging solution that works in prod\nwindow.localStorage.setItem('debug', '*,-sockjs*')\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: 'https://app.dev.speedlo.cloud',\n  googleMapsApi: 'AIzaSyAMytFvlKm4fxw8LCcMHofNDHcrJ8ibOTY',\n  persistenceKey: 'admin@local',\n  pageTitleSuffix: 'LOCAL',\n  sentryDSN: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    persistenceKey: 'admin@dev',\n    pageTitleSuffix: 'DEV',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'admin@prod',\n    pageTitleSuffix: 'Speɘdlo',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n","var map = {\n\t\"./bg\": [\n\t\t560,\n\t\t5\n\t],\n\t\"./bg.js\": [\n\t\t560,\n\t\t5\n\t],\n\t\"./chs\": [\n\t\t561,\n\t\t11\n\t],\n\t\"./chs.js\": [\n\t\t561,\n\t\t11\n\t],\n\t\"./cs\": [\n\t\t562,\n\t\t22\n\t],\n\t\"./cs.js\": [\n\t\t562,\n\t\t22\n\t],\n\t\"./da-dk\": [\n\t\t563,\n\t\t33\n\t],\n\t\"./da-dk.js\": [\n\t\t563,\n\t\t33\n\t],\n\t\"./de\": [\n\t\t565,\n\t\t6\n\t],\n\t\"./de-ch\": [\n\t\t564,\n\t\t38\n\t],\n\t\"./de-ch.js\": [\n\t\t564,\n\t\t38\n\t],\n\t\"./de.js\": [\n\t\t565,\n\t\t6\n\t],\n\t\"./en-au\": [\n\t\t566,\n\t\t7\n\t],\n\t\"./en-au.js\": [\n\t\t566,\n\t\t7\n\t],\n\t\"./en-gb\": [\n\t\t567,\n\t\t8\n\t],\n\t\"./en-gb.js\": [\n\t\t567,\n\t\t8\n\t],\n\t\"./en-za\": [\n\t\t568,\n\t\t9\n\t],\n\t\"./en-za.js\": [\n\t\t568,\n\t\t9\n\t],\n\t\"./es\": [\n\t\t570,\n\t\t12\n\t],\n\t\"./es-es\": [\n\t\t569,\n\t\t10\n\t],\n\t\"./es-es.js\": [\n\t\t569,\n\t\t10\n\t],\n\t\"./es.js\": [\n\t\t570,\n\t\t12\n\t],\n\t\"./et\": [\n\t\t571,\n\t\t13\n\t],\n\t\"./et.js\": [\n\t\t571,\n\t\t13\n\t],\n\t\"./fi\": [\n\t\t572,\n\t\t14\n\t],\n\t\"./fi.js\": [\n\t\t572,\n\t\t14\n\t],\n\t\"./fr\": [\n\t\t575,\n\t\t17\n\t],\n\t\"./fr-ca\": [\n\t\t573,\n\t\t15\n\t],\n\t\"./fr-ca.js\": [\n\t\t573,\n\t\t15\n\t],\n\t\"./fr-ch\": [\n\t\t574,\n\t\t16\n\t],\n\t\"./fr-ch.js\": [\n\t\t574,\n\t\t16\n\t],\n\t\"./fr.js\": [\n\t\t575,\n\t\t17\n\t],\n\t\"./hu\": [\n\t\t576,\n\t\t18\n\t],\n\t\"./hu.js\": [\n\t\t576,\n\t\t18\n\t],\n\t\"./it\": [\n\t\t577,\n\t\t19\n\t],\n\t\"./it.js\": [\n\t\t577,\n\t\t19\n\t],\n\t\"./ja\": [\n\t\t578,\n\t\t20\n\t],\n\t\"./ja.js\": [\n\t\t578,\n\t\t20\n\t],\n\t\"./lv\": [\n\t\t579,\n\t\t21\n\t],\n\t\"./lv.js\": [\n\t\t579,\n\t\t21\n\t],\n\t\"./nl-be\": [\n\t\t580,\n\t\t23\n\t],\n\t\"./nl-be.js\": [\n\t\t580,\n\t\t23\n\t],\n\t\"./nl-nl\": [\n\t\t581,\n\t\t24\n\t],\n\t\"./nl-nl.js\": [\n\t\t581,\n\t\t24\n\t],\n\t\"./no\": [\n\t\t582,\n\t\t25\n\t],\n\t\"./no.js\": [\n\t\t582,\n\t\t25\n\t],\n\t\"./pl\": [\n\t\t583,\n\t\t26\n\t],\n\t\"./pl.js\": [\n\t\t583,\n\t\t26\n\t],\n\t\"./pt-br\": [\n\t\t584,\n\t\t27\n\t],\n\t\"./pt-br.js\": [\n\t\t584,\n\t\t27\n\t],\n\t\"./pt-pt\": [\n\t\t585,\n\t\t28\n\t],\n\t\"./pt-pt.js\": [\n\t\t585,\n\t\t28\n\t],\n\t\"./ru\": [\n\t\t587,\n\t\t30\n\t],\n\t\"./ru-ua\": [\n\t\t586,\n\t\t29\n\t],\n\t\"./ru-ua.js\": [\n\t\t586,\n\t\t29\n\t],\n\t\"./ru.js\": [\n\t\t587,\n\t\t30\n\t],\n\t\"./sk\": [\n\t\t588,\n\t\t31\n\t],\n\t\"./sk.js\": [\n\t\t588,\n\t\t31\n\t],\n\t\"./sl\": [\n\t\t589,\n\t\t32\n\t],\n\t\"./sl.js\": [\n\t\t589,\n\t\t32\n\t],\n\t\"./th\": [\n\t\t590,\n\t\t34\n\t],\n\t\"./th.js\": [\n\t\t590,\n\t\t34\n\t],\n\t\"./tr\": [\n\t\t591,\n\t\t35\n\t],\n\t\"./tr.js\": [\n\t\t591,\n\t\t35\n\t],\n\t\"./uk-ua\": [\n\t\t592,\n\t\t36\n\t],\n\t\"./uk-ua.js\": [\n\t\t592,\n\t\t36\n\t],\n\t\"./vi\": [\n\t\t593,\n\t\t37\n\t],\n\t\"./vi.js\": [\n\t\t593,\n\t\t37\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 717;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./_lib/buildFormatLongFn/index.js\": [\n\t\t986,\n\t\t41\n\t],\n\t\"./_lib/buildLocalizeFn/index.js\": [\n\t\t985,\n\t\t42\n\t],\n\t\"./_lib/buildMatchFn/index.js\": [\n\t\t987,\n\t\t153\n\t],\n\t\"./_lib/buildMatchPatternFn/index.js\": [\n\t\t988,\n\t\t263\n\t],\n\t\"./af/_lib/formatDistance/index.js\": [\n\t\t1002,\n\t\t296\n\t],\n\t\"./af/_lib/formatLong/index.js\": [\n\t\t1003,\n\t\t307\n\t],\n\t\"./af/_lib/formatRelative/index.js\": [\n\t\t1004,\n\t\t318\n\t],\n\t\"./af/_lib/localize/index.js\": [\n\t\t1005,\n\t\t329\n\t],\n\t\"./af/_lib/match/index.js\": [\n\t\t1006,\n\t\t340\n\t],\n\t\"./af/index.js\": [\n\t\t1260,\n\t\t351\n\t],\n\t\"./ar-DZ/_lib/formatDistance/index.js\": [\n\t\t1007,\n\t\t43\n\t],\n\t\"./ar-DZ/_lib/formatLong/index.js\": [\n\t\t1008,\n\t\t54\n\t],\n\t\"./ar-DZ/_lib/formatRelative/index.js\": [\n\t\t1009,\n\t\t65\n\t],\n\t\"./ar-DZ/_lib/localize/index.js\": [\n\t\t1010,\n\t\t76\n\t],\n\t\"./ar-DZ/_lib/match/index.js\": [\n\t\t1011,\n\t\t87\n\t],\n\t\"./ar-DZ/index.js\": [\n\t\t1261,\n\t\t98\n\t],\n\t\"./ar-SA/_lib/formatDistance/index.js\": [\n\t\t1012,\n\t\t109\n\t],\n\t\"./ar-SA/_lib/formatLong/index.js\": [\n\t\t1013,\n\t\t120\n\t],\n\t\"./ar-SA/_lib/formatRelative/index.js\": [\n\t\t1014,\n\t\t131\n\t],\n\t\"./ar-SA/_lib/localize/index.js\": [\n\t\t1015,\n\t\t142\n\t],\n\t\"./ar-SA/_lib/match/index.js\": [\n\t\t1016,\n\t\t154\n\t],\n\t\"./ar-SA/index.js\": [\n\t\t1262,\n\t\t165\n\t],\n\t\"./be/_lib/formatDistance/index.js\": [\n\t\t1017,\n\t\t176\n\t],\n\t\"./be/_lib/formatLong/index.js\": [\n\t\t1018,\n\t\t187\n\t],\n\t\"./be/_lib/formatRelative/index.js\": [\n\t\t1019,\n\t\t198\n\t],\n\t\"./be/_lib/localize/index.js\": [\n\t\t1020,\n\t\t209\n\t],\n\t\"./be/_lib/match/index.js\": [\n\t\t1021,\n\t\t220\n\t],\n\t\"./be/index.js\": [\n\t\t1263,\n\t\t383\n\t],\n\t\"./bn/_lib/formatDistance/index.js\": [\n\t\t1022,\n\t\t241\n\t],\n\t\"./bn/_lib/formatLong/index.js\": [\n\t\t1023,\n\t\t252\n\t],\n\t\"./bn/_lib/formatRelative/index.js\": [\n\t\t1024,\n\t\t264\n\t],\n\t\"./bn/_lib/localize/index.js\": [\n\t\t996,\n\t\t275\n\t],\n\t\"./bn/_lib/match/index.js\": [\n\t\t1025,\n\t\t286\n\t],\n\t\"./bn/index.js\": [\n\t\t1264,\n\t\t289\n\t],\n\t\"./ca/_lib/formatDistance/index.js\": [\n\t\t1026,\n\t\t290\n\t],\n\t\"./ca/_lib/formatLong/index.js\": [\n\t\t1027,\n\t\t291\n\t],\n\t\"./ca/_lib/formatRelative/index.js\": [\n\t\t1028,\n\t\t292\n\t],\n\t\"./ca/_lib/localize/index.js\": [\n\t\t1029,\n\t\t293\n\t],\n\t\"./ca/_lib/match/index.js\": [\n\t\t1030,\n\t\t294\n\t],\n\t\"./ca/index.js\": [\n\t\t1265,\n\t\t295\n\t],\n\t\"./cs/_lib/formatDistance/index.js\": [\n\t\t1031,\n\t\t297\n\t],\n\t\"./cs/_lib/formatLong/index.js\": [\n\t\t1032,\n\t\t298\n\t],\n\t\"./cs/_lib/formatRelative/index.js\": [\n\t\t1033,\n\t\t299\n\t],\n\t\"./cs/_lib/localize/index.js\": [\n\t\t1034,\n\t\t300\n\t],\n\t\"./cs/_lib/match/index.js\": [\n\t\t1035,\n\t\t301\n\t],\n\t\"./cs/index.js\": [\n\t\t1266,\n\t\t302\n\t],\n\t\"./cy/_lib/formatDistance/index.js\": [\n\t\t1036,\n\t\t303\n\t],\n\t\"./cy/_lib/formatLong/index.js\": [\n\t\t1037,\n\t\t304\n\t],\n\t\"./cy/_lib/formatRelative/index.js\": [\n\t\t1038,\n\t\t305\n\t],\n\t\"./cy/_lib/localize/index.js\": [\n\t\t1039,\n\t\t306\n\t],\n\t\"./cy/_lib/match/index.js\": [\n\t\t1040,\n\t\t308\n\t],\n\t\"./cy/index.js\": [\n\t\t1267,\n\t\t309\n\t],\n\t\"./da/_lib/formatDistance/index.js\": [\n\t\t1041,\n\t\t310\n\t],\n\t\"./da/_lib/formatLong/index.js\": [\n\t\t1042,\n\t\t311\n\t],\n\t\"./da/_lib/formatRelative/index.js\": [\n\t\t1043,\n\t\t312\n\t],\n\t\"./da/_lib/localize/index.js\": [\n\t\t1044,\n\t\t313\n\t],\n\t\"./da/_lib/match/index.js\": [\n\t\t1045,\n\t\t314\n\t],\n\t\"./da/index.js\": [\n\t\t1268,\n\t\t315\n\t],\n\t\"./de/_lib/formatDistance/index.js\": [\n\t\t1046,\n\t\t316\n\t],\n\t\"./de/_lib/formatLong/index.js\": [\n\t\t1047,\n\t\t317\n\t],\n\t\"./de/_lib/formatRelative/index.js\": [\n\t\t1048,\n\t\t319\n\t],\n\t\"./de/_lib/localize/index.js\": [\n\t\t1049,\n\t\t320\n\t],\n\t\"./de/_lib/match/index.js\": [\n\t\t1050,\n\t\t321\n\t],\n\t\"./de/index.js\": [\n\t\t1269,\n\t\t322\n\t],\n\t\"./el/_lib/formatDistance/index.js\": [\n\t\t1051,\n\t\t323\n\t],\n\t\"./el/_lib/formatLong/index.js\": [\n\t\t1052,\n\t\t324\n\t],\n\t\"./el/_lib/formatRelative/index.js\": [\n\t\t1053,\n\t\t325\n\t],\n\t\"./el/_lib/localize/index.js\": [\n\t\t1054,\n\t\t326\n\t],\n\t\"./el/_lib/match/index.js\": [\n\t\t1055,\n\t\t327\n\t],\n\t\"./el/index.js\": [\n\t\t1270,\n\t\t328\n\t],\n\t\"./en-CA/_lib/formatDistance/index.js\": [\n\t\t1056,\n\t\t330\n\t],\n\t\"./en-CA/_lib/formatLong/index.js\": [\n\t\t1057,\n\t\t331\n\t],\n\t\"./en-CA/index.js\": [\n\t\t1271,\n\t\t332\n\t],\n\t\"./en-GB/_lib/formatLong/index.js\": [\n\t\t1058,\n\t\t333\n\t],\n\t\"./en-GB/index.js\": [\n\t\t1272,\n\t\t334\n\t],\n\t\"./en-US/_lib/formatDistance/index.js\": [\n\t\t999,\n\t\t335\n\t],\n\t\"./en-US/_lib/formatLong/index.js\": [\n\t\t1059,\n\t\t336\n\t],\n\t\"./en-US/_lib/formatRelative/index.js\": [\n\t\t993,\n\t\t337\n\t],\n\t\"./en-US/_lib/localize/index.js\": [\n\t\t994,\n\t\t338\n\t],\n\t\"./en-US/_lib/match/index.js\": [\n\t\t995,\n\t\t339\n\t],\n\t\"./en-US/index.js\": [\n\t\t1273,\n\t\t341\n\t],\n\t\"./eo/_lib/formatDistance/index.js\": [\n\t\t1060,\n\t\t342\n\t],\n\t\"./eo/_lib/formatLong/index.js\": [\n\t\t1061,\n\t\t343\n\t],\n\t\"./eo/_lib/formatRelative/index.js\": [\n\t\t1062,\n\t\t344\n\t],\n\t\"./eo/_lib/localize/index.js\": [\n\t\t1063,\n\t\t345\n\t],\n\t\"./eo/_lib/match/index.js\": [\n\t\t1064,\n\t\t346\n\t],\n\t\"./eo/index.js\": [\n\t\t1274,\n\t\t347\n\t],\n\t\"./es/_lib/formatDistance/index.js\": [\n\t\t1065,\n\t\t348\n\t],\n\t\"./es/_lib/formatLong/index.js\": [\n\t\t1066,\n\t\t349\n\t],\n\t\"./es/_lib/formatRelative/index.js\": [\n\t\t1067,\n\t\t350\n\t],\n\t\"./es/_lib/localize/index.js\": [\n\t\t1068,\n\t\t352\n\t],\n\t\"./es/_lib/match/index.js\": [\n\t\t1069,\n\t\t353\n\t],\n\t\"./es/index.js\": [\n\t\t1275,\n\t\t354\n\t],\n\t\"./et/_lib/formatDistance/index.js\": [\n\t\t1070,\n\t\t355\n\t],\n\t\"./et/_lib/formatLong/index.js\": [\n\t\t1071,\n\t\t356\n\t],\n\t\"./et/_lib/formatRelative/index.js\": [\n\t\t1072,\n\t\t357\n\t],\n\t\"./et/_lib/localize/index.js\": [\n\t\t1073,\n\t\t358\n\t],\n\t\"./et/_lib/match/index.js\": [\n\t\t1074,\n\t\t359\n\t],\n\t\"./et/index.js\": [\n\t\t1276,\n\t\t360\n\t],\n\t\"./fa-IR/_lib/formatDistance/index.js\": [\n\t\t1075,\n\t\t361\n\t],\n\t\"./fa-IR/_lib/formatLong/index.js\": [\n\t\t1076,\n\t\t44\n\t],\n\t\"./fa-IR/_lib/formatRelative/index.js\": [\n\t\t1077,\n\t\t45\n\t],\n\t\"./fa-IR/_lib/localize/index.js\": [\n\t\t1078,\n\t\t46\n\t],\n\t\"./fa-IR/_lib/match/index.js\": [\n\t\t1079,\n\t\t47\n\t],\n\t\"./fa-IR/index.js\": [\n\t\t1277,\n\t\t48\n\t],\n\t\"./fi/_lib/formatDistance/index.js\": [\n\t\t1080,\n\t\t49\n\t],\n\t\"./fi/_lib/formatLong/index.js\": [\n\t\t1081,\n\t\t50\n\t],\n\t\"./fi/_lib/formatRelative/index.js\": [\n\t\t1082,\n\t\t51\n\t],\n\t\"./fi/_lib/localize/index.js\": [\n\t\t1083,\n\t\t52\n\t],\n\t\"./fi/_lib/match/index.js\": [\n\t\t1084,\n\t\t53\n\t],\n\t\"./fi/index.js\": [\n\t\t1278,\n\t\t55\n\t],\n\t\"./fr/_lib/formatDistance/index.js\": [\n\t\t1085,\n\t\t56\n\t],\n\t\"./fr/_lib/formatLong/index.js\": [\n\t\t1086,\n\t\t57\n\t],\n\t\"./fr/_lib/formatRelative/index.js\": [\n\t\t1087,\n\t\t58\n\t],\n\t\"./fr/_lib/formatters/index.js\": [\n\t\t1279,\n\t\t59\n\t],\n\t\"./fr/_lib/localize/index.js\": [\n\t\t1088,\n\t\t60\n\t],\n\t\"./fr/_lib/match/index.js\": [\n\t\t1089,\n\t\t61\n\t],\n\t\"./fr/index.js\": [\n\t\t1280,\n\t\t62\n\t],\n\t\"./gl/_lib/formatDistance/index.js\": [\n\t\t1090,\n\t\t63\n\t],\n\t\"./gl/_lib/formatLong/index.js\": [\n\t\t1091,\n\t\t64\n\t],\n\t\"./gl/_lib/formatRelative/index.js\": [\n\t\t1092,\n\t\t66\n\t],\n\t\"./gl/_lib/localize/index.js\": [\n\t\t1093,\n\t\t67\n\t],\n\t\"./gl/_lib/match/index.js\": [\n\t\t1094,\n\t\t68\n\t],\n\t\"./gl/index.js\": [\n\t\t1281,\n\t\t69\n\t],\n\t\"./gu/_lib/formatDistance/index.js\": [\n\t\t1095,\n\t\t70\n\t],\n\t\"./gu/_lib/formatLong/index.js\": [\n\t\t1096,\n\t\t71\n\t],\n\t\"./gu/_lib/formatRelative/index.js\": [\n\t\t1097,\n\t\t72\n\t],\n\t\"./gu/_lib/localize/index.js\": [\n\t\t1098,\n\t\t73\n\t],\n\t\"./gu/_lib/match/index.js\": [\n\t\t1099,\n\t\t74\n\t],\n\t\"./gu/index.js\": [\n\t\t1282,\n\t\t75\n\t],\n\t\"./he/_lib/formatDistance/index.js\": [\n\t\t1100,\n\t\t77\n\t],\n\t\"./he/_lib/formatLong/index.js\": [\n\t\t1101,\n\t\t78\n\t],\n\t\"./he/_lib/formatRelative/index.js\": [\n\t\t1102,\n\t\t79\n\t],\n\t\"./he/_lib/localize/index.js\": [\n\t\t1103,\n\t\t80\n\t],\n\t\"./he/_lib/match/index.js\": [\n\t\t1104,\n\t\t81\n\t],\n\t\"./he/index.js\": [\n\t\t1283,\n\t\t82\n\t],\n\t\"./hi/_lib/formatDistance/index.js\": [\n\t\t1105,\n\t\t83\n\t],\n\t\"./hi/_lib/formatLong/index.js\": [\n\t\t1106,\n\t\t84\n\t],\n\t\"./hi/_lib/formatRelative/index.js\": [\n\t\t1107,\n\t\t85\n\t],\n\t\"./hi/_lib/localize/index.js\": [\n\t\t990,\n\t\t86\n\t],\n\t\"./hi/_lib/match/index.js\": [\n\t\t1108,\n\t\t88\n\t],\n\t\"./hi/index.js\": [\n\t\t1284,\n\t\t89\n\t],\n\t\"./hr/_lib/formatDistance/index.js\": [\n\t\t1109,\n\t\t90\n\t],\n\t\"./hr/_lib/formatLong/index.js\": [\n\t\t1110,\n\t\t91\n\t],\n\t\"./hr/_lib/formatRelative/index.js\": [\n\t\t1111,\n\t\t92\n\t],\n\t\"./hr/_lib/localize/index.js\": [\n\t\t1112,\n\t\t93\n\t],\n\t\"./hr/_lib/match/index.js\": [\n\t\t1113,\n\t\t94\n\t],\n\t\"./hr/index.js\": [\n\t\t1285,\n\t\t95\n\t],\n\t\"./hu/_lib/formatDistance/index.js\": [\n\t\t1114,\n\t\t96\n\t],\n\t\"./hu/_lib/formatLong/index.js\": [\n\t\t1115,\n\t\t97\n\t],\n\t\"./hu/_lib/formatRelative/index.js\": [\n\t\t1116,\n\t\t99\n\t],\n\t\"./hu/_lib/localize/index.js\": [\n\t\t1117,\n\t\t100\n\t],\n\t\"./hu/_lib/match/index.js\": [\n\t\t1118,\n\t\t101\n\t],\n\t\"./hu/index.js\": [\n\t\t1286,\n\t\t102\n\t],\n\t\"./hy/_lib/formatDistance/index.js\": [\n\t\t1119,\n\t\t103\n\t],\n\t\"./hy/_lib/formatLong/index.js\": [\n\t\t1120,\n\t\t104\n\t],\n\t\"./hy/_lib/formatRelative/index.js\": [\n\t\t1121,\n\t\t105\n\t],\n\t\"./hy/_lib/localize/index.js\": [\n\t\t1122,\n\t\t106\n\t],\n\t\"./hy/_lib/match/index.js\": [\n\t\t1123,\n\t\t107\n\t],\n\t\"./hy/index.js\": [\n\t\t1287,\n\t\t108\n\t],\n\t\"./id/_lib/formatDistance/index.js\": [\n\t\t1124,\n\t\t110\n\t],\n\t\"./id/_lib/formatLong/index.js\": [\n\t\t1125,\n\t\t111\n\t],\n\t\"./id/_lib/formatRelative/index.js\": [\n\t\t1126,\n\t\t112\n\t],\n\t\"./id/_lib/localize/index.js\": [\n\t\t1127,\n\t\t113\n\t],\n\t\"./id/_lib/match/index.js\": [\n\t\t1128,\n\t\t114\n\t],\n\t\"./id/index.js\": [\n\t\t1288,\n\t\t115\n\t],\n\t\"./is/_lib/formatDistance/index.js\": [\n\t\t1129,\n\t\t116\n\t],\n\t\"./is/_lib/formatLong/index.js\": [\n\t\t1130,\n\t\t117\n\t],\n\t\"./is/_lib/formatRelative/index.js\": [\n\t\t1131,\n\t\t118\n\t],\n\t\"./is/_lib/localize/index.js\": [\n\t\t1132,\n\t\t119\n\t],\n\t\"./is/_lib/match/index.js\": [\n\t\t1133,\n\t\t121\n\t],\n\t\"./is/index.js\": [\n\t\t1289,\n\t\t122\n\t],\n\t\"./it/_lib/formatDistance/index.js\": [\n\t\t1134,\n\t\t123\n\t],\n\t\"./it/_lib/formatLong/index.js\": [\n\t\t1135,\n\t\t124\n\t],\n\t\"./it/_lib/formatRelative/index.js\": [\n\t\t1136,\n\t\t125\n\t],\n\t\"./it/_lib/localize/index.js\": [\n\t\t1137,\n\t\t126\n\t],\n\t\"./it/_lib/match/index.js\": [\n\t\t1138,\n\t\t127\n\t],\n\t\"./it/index.js\": [\n\t\t1290,\n\t\t128\n\t],\n\t\"./ja/_lib/formatDistance/index.js\": [\n\t\t1139,\n\t\t129\n\t],\n\t\"./ja/_lib/formatLong/index.js\": [\n\t\t1140,\n\t\t130\n\t],\n\t\"./ja/_lib/formatRelative/index.js\": [\n\t\t1141,\n\t\t132\n\t],\n\t\"./ja/_lib/localize/index.js\": [\n\t\t1142,\n\t\t133\n\t],\n\t\"./ja/_lib/match/index.js\": [\n\t\t1143,\n\t\t134\n\t],\n\t\"./ja/index.js\": [\n\t\t1291,\n\t\t135\n\t],\n\t\"./ka/_lib/formatDistance/index.js\": [\n\t\t1144,\n\t\t136\n\t],\n\t\"./ka/_lib/formatLong/index.js\": [\n\t\t1145,\n\t\t137\n\t],\n\t\"./ka/_lib/formatRelative/index.js\": [\n\t\t1146,\n\t\t138\n\t],\n\t\"./ka/_lib/localize/index.js\": [\n\t\t1147,\n\t\t139\n\t],\n\t\"./ka/_lib/match/index.js\": [\n\t\t1148,\n\t\t140\n\t],\n\t\"./ka/index.js\": [\n\t\t1292,\n\t\t141\n\t],\n\t\"./ko/_lib/formatDistance/index.js\": [\n\t\t1149,\n\t\t143\n\t],\n\t\"./ko/_lib/formatLong/index.js\": [\n\t\t1150,\n\t\t144\n\t],\n\t\"./ko/_lib/formatRelative/index.js\": [\n\t\t1151,\n\t\t145\n\t],\n\t\"./ko/_lib/localize/index.js\": [\n\t\t1152,\n\t\t146\n\t],\n\t\"./ko/_lib/match/index.js\": [\n\t\t1153,\n\t\t147\n\t],\n\t\"./ko/index.js\": [\n\t\t1293,\n\t\t148\n\t],\n\t\"./lt/_lib/formatDistance/index.js\": [\n\t\t1154,\n\t\t149\n\t],\n\t\"./lt/_lib/formatLong/index.js\": [\n\t\t1155,\n\t\t150\n\t],\n\t\"./lt/_lib/formatRelative/index.js\": [\n\t\t1156,\n\t\t151\n\t],\n\t\"./lt/_lib/localize/index.js\": [\n\t\t1157,\n\t\t152\n\t],\n\t\"./lt/_lib/match/index.js\": [\n\t\t1158,\n\t\t155\n\t],\n\t\"./lt/index.js\": [\n\t\t1294,\n\t\t156\n\t],\n\t\"./lv/_lib/formatDistance/index.js\": [\n\t\t1159,\n\t\t157\n\t],\n\t\"./lv/_lib/formatLong/index.js\": [\n\t\t1160,\n\t\t158\n\t],\n\t\"./lv/_lib/formatRelative/index.js\": [\n\t\t1161,\n\t\t159\n\t],\n\t\"./lv/_lib/localize/index.js\": [\n\t\t1162,\n\t\t160\n\t],\n\t\"./lv/_lib/match/index.js\": [\n\t\t1163,\n\t\t161\n\t],\n\t\"./lv/index.js\": [\n\t\t1295,\n\t\t162\n\t],\n\t\"./nb/_lib/formatDistance/index.js\": [\n\t\t1164,\n\t\t163\n\t],\n\t\"./nb/_lib/formatLong/index.js\": [\n\t\t1165,\n\t\t164\n\t],\n\t\"./nb/_lib/formatRelative/index.js\": [\n\t\t1166,\n\t\t166\n\t],\n\t\"./nb/_lib/localize/index.js\": [\n\t\t1167,\n\t\t167\n\t],\n\t\"./nb/_lib/match/index.js\": [\n\t\t1168,\n\t\t168\n\t],\n\t\"./nb/index.js\": [\n\t\t1296,\n\t\t169\n\t],\n\t\"./nl/_lib/formatDistance/index.js\": [\n\t\t1169,\n\t\t170\n\t],\n\t\"./nl/_lib/formatLong/index.js\": [\n\t\t1170,\n\t\t171\n\t],\n\t\"./nl/_lib/formatRelative/index.js\": [\n\t\t1171,\n\t\t172\n\t],\n\t\"./nl/_lib/localize/index.js\": [\n\t\t1172,\n\t\t173\n\t],\n\t\"./nl/_lib/match/index.js\": [\n\t\t1173,\n\t\t174\n\t],\n\t\"./nl/index.js\": [\n\t\t1297,\n\t\t175\n\t],\n\t\"./nn/_lib/formatDistance/index.js\": [\n\t\t1174,\n\t\t177\n\t],\n\t\"./nn/_lib/formatLong/index.js\": [\n\t\t1175,\n\t\t178\n\t],\n\t\"./nn/_lib/formatRelative/index.js\": [\n\t\t1176,\n\t\t179\n\t],\n\t\"./nn/_lib/localize/index.js\": [\n\t\t1177,\n\t\t180\n\t],\n\t\"./nn/_lib/match/index.js\": [\n\t\t1178,\n\t\t181\n\t],\n\t\"./nn/index.js\": [\n\t\t1298,\n\t\t182\n\t],\n\t\"./pl/_lib/formatDistance/index.js\": [\n\t\t1179,\n\t\t183\n\t],\n\t\"./pl/_lib/formatLong/index.js\": [\n\t\t1180,\n\t\t184\n\t],\n\t\"./pl/_lib/formatRelative/index.js\": [\n\t\t1181,\n\t\t185\n\t],\n\t\"./pl/_lib/localize/index.js\": [\n\t\t1182,\n\t\t186\n\t],\n\t\"./pl/_lib/match/index.js\": [\n\t\t1183,\n\t\t188\n\t],\n\t\"./pl/index.js\": [\n\t\t1299,\n\t\t189\n\t],\n\t\"./pt-BR/_lib/formatDistance/index.js\": [\n\t\t1189,\n\t\t196\n\t],\n\t\"./pt-BR/_lib/formatLong/index.js\": [\n\t\t1190,\n\t\t197\n\t],\n\t\"./pt-BR/_lib/formatRelative/index.js\": [\n\t\t1191,\n\t\t199\n\t],\n\t\"./pt-BR/_lib/localize/index.js\": [\n\t\t1192,\n\t\t200\n\t],\n\t\"./pt-BR/_lib/match/index.js\": [\n\t\t1193,\n\t\t201\n\t],\n\t\"./pt-BR/index.js\": [\n\t\t1301,\n\t\t202\n\t],\n\t\"./pt/_lib/formatDistance/index.js\": [\n\t\t1184,\n\t\t190\n\t],\n\t\"./pt/_lib/formatLong/index.js\": [\n\t\t1185,\n\t\t191\n\t],\n\t\"./pt/_lib/formatRelative/index.js\": [\n\t\t1186,\n\t\t192\n\t],\n\t\"./pt/_lib/localize/index.js\": [\n\t\t1187,\n\t\t193\n\t],\n\t\"./pt/_lib/match/index.js\": [\n\t\t1188,\n\t\t194\n\t],\n\t\"./pt/index.js\": [\n\t\t1300,\n\t\t195\n\t],\n\t\"./ro/_lib/formatDistance/index.js\": [\n\t\t1194,\n\t\t203\n\t],\n\t\"./ro/_lib/formatLong/index.js\": [\n\t\t1195,\n\t\t204\n\t],\n\t\"./ro/_lib/formatRelative/index.js\": [\n\t\t1196,\n\t\t205\n\t],\n\t\"./ro/_lib/localize/index.js\": [\n\t\t1197,\n\t\t206\n\t],\n\t\"./ro/_lib/match/index.js\": [\n\t\t1198,\n\t\t207\n\t],\n\t\"./ro/index.js\": [\n\t\t1302,\n\t\t208\n\t],\n\t\"./ru/_lib/formatDistance/index.js\": [\n\t\t1199,\n\t\t210\n\t],\n\t\"./ru/_lib/formatLong/index.js\": [\n\t\t1200,\n\t\t211\n\t],\n\t\"./ru/_lib/formatRelative/index.js\": [\n\t\t1201,\n\t\t212\n\t],\n\t\"./ru/_lib/localize/index.js\": [\n\t\t1202,\n\t\t213\n\t],\n\t\"./ru/_lib/match/index.js\": [\n\t\t1203,\n\t\t214\n\t],\n\t\"./ru/index.js\": [\n\t\t1303,\n\t\t215\n\t],\n\t\"./sk/_lib/formatDistance/index.js\": [\n\t\t1204,\n\t\t216\n\t],\n\t\"./sk/_lib/formatLong/index.js\": [\n\t\t1205,\n\t\t217\n\t],\n\t\"./sk/_lib/formatRelative/index.js\": [\n\t\t1206,\n\t\t218\n\t],\n\t\"./sk/_lib/localize/index.js\": [\n\t\t1207,\n\t\t219\n\t],\n\t\"./sk/_lib/match/index.js\": [\n\t\t1208,\n\t\t221\n\t],\n\t\"./sk/index.js\": [\n\t\t1304,\n\t\t222\n\t],\n\t\"./sl/_lib/formatDistance/index.js\": [\n\t\t1209,\n\t\t223\n\t],\n\t\"./sl/_lib/formatLong/index.js\": [\n\t\t1210,\n\t\t224\n\t],\n\t\"./sl/_lib/formatRelative/index.js\": [\n\t\t1211,\n\t\t225\n\t],\n\t\"./sl/_lib/localize/index.js\": [\n\t\t1212,\n\t\t226\n\t],\n\t\"./sl/_lib/match/index.js\": [\n\t\t1213,\n\t\t227\n\t],\n\t\"./sl/index.js\": [\n\t\t1305,\n\t\t228\n\t],\n\t\"./sv/_lib/formatDistance/index.js\": [\n\t\t1214,\n\t\t229\n\t],\n\t\"./sv/_lib/formatLong/index.js\": [\n\t\t1215,\n\t\t230\n\t],\n\t\"./sv/_lib/formatRelative/index.js\": [\n\t\t1216,\n\t\t231\n\t],\n\t\"./sv/_lib/localize/index.js\": [\n\t\t1217,\n\t\t232\n\t],\n\t\"./sv/_lib/match/index.js\": [\n\t\t1218,\n\t\t233\n\t],\n\t\"./sv/index.js\": [\n\t\t1306,\n\t\t234\n\t],\n\t\"./ta/_lib/formatDistance/index.js\": [\n\t\t1219,\n\t\t235\n\t],\n\t\"./ta/_lib/formatLong/index.js\": [\n\t\t1220,\n\t\t236\n\t],\n\t\"./ta/_lib/formatRelative/index.js\": [\n\t\t1221,\n\t\t237\n\t],\n\t\"./ta/_lib/localize/index.js\": [\n\t\t1222,\n\t\t238\n\t],\n\t\"./ta/_lib/match/index.js\": [\n\t\t1223,\n\t\t239\n\t],\n\t\"./ta/index.js\": [\n\t\t1307,\n\t\t240\n\t],\n\t\"./th/_lib/formatDistance/index.js\": [\n\t\t1224,\n\t\t242\n\t],\n\t\"./th/_lib/formatLong/index.js\": [\n\t\t1225,\n\t\t243\n\t],\n\t\"./th/_lib/formatRelative/index.js\": [\n\t\t1226,\n\t\t244\n\t],\n\t\"./th/_lib/localize/index.js\": [\n\t\t1227,\n\t\t245\n\t],\n\t\"./th/_lib/match/index.js\": [\n\t\t1228,\n\t\t246\n\t],\n\t\"./th/index.js\": [\n\t\t1308,\n\t\t247\n\t],\n\t\"./tr/_lib/formatDistance/index.js\": [\n\t\t1229,\n\t\t248\n\t],\n\t\"./tr/_lib/formatLong/index.js\": [\n\t\t1230,\n\t\t249\n\t],\n\t\"./tr/_lib/formatRelative/index.js\": [\n\t\t1231,\n\t\t250\n\t],\n\t\"./tr/_lib/localize/index.js\": [\n\t\t1232,\n\t\t251\n\t],\n\t\"./tr/_lib/match/index.js\": [\n\t\t1233,\n\t\t253\n\t],\n\t\"./tr/index.js\": [\n\t\t1309,\n\t\t254\n\t],\n\t\"./ug/_lib/formatDistance/index.js\": [\n\t\t1234,\n\t\t255\n\t],\n\t\"./ug/_lib/formatLong/index.js\": [\n\t\t1235,\n\t\t256\n\t],\n\t\"./ug/_lib/formatRelative/index.js\": [\n\t\t1236,\n\t\t257\n\t],\n\t\"./ug/_lib/localize/index.js\": [\n\t\t1237,\n\t\t258\n\t],\n\t\"./ug/_lib/match/index.js\": [\n\t\t1238,\n\t\t259\n\t],\n\t\"./ug/index.js\": [\n\t\t1310,\n\t\t260\n\t],\n\t\"./uk/_lib/formatDistance/index.js\": [\n\t\t1239,\n\t\t261\n\t],\n\t\"./uk/_lib/formatLong/index.js\": [\n\t\t1240,\n\t\t262\n\t],\n\t\"./uk/_lib/formatRelative/index.js\": [\n\t\t1241,\n\t\t265\n\t],\n\t\"./uk/_lib/localize/index.js\": [\n\t\t1242,\n\t\t266\n\t],\n\t\"./uk/_lib/match/index.js\": [\n\t\t1243,\n\t\t267\n\t],\n\t\"./uk/index.js\": [\n\t\t1311,\n\t\t268\n\t],\n\t\"./vi/_lib/formatDistance/index.js\": [\n\t\t1244,\n\t\t269\n\t],\n\t\"./vi/_lib/formatLong/index.js\": [\n\t\t1245,\n\t\t270\n\t],\n\t\"./vi/_lib/formatRelative/index.js\": [\n\t\t1246,\n\t\t271\n\t],\n\t\"./vi/_lib/localize/index.js\": [\n\t\t1247,\n\t\t272\n\t],\n\t\"./vi/_lib/match/index.js\": [\n\t\t1248,\n\t\t273\n\t],\n\t\"./vi/index.js\": [\n\t\t1312,\n\t\t274\n\t],\n\t\"./zh-CN/_lib/formatDistance/index.js\": [\n\t\t1249,\n\t\t276\n\t],\n\t\"./zh-CN/_lib/formatLong/index.js\": [\n\t\t1250,\n\t\t277\n\t],\n\t\"./zh-CN/_lib/formatRelative/index.js\": [\n\t\t1251,\n\t\t278\n\t],\n\t\"./zh-CN/_lib/localize/index.js\": [\n\t\t1252,\n\t\t279\n\t],\n\t\"./zh-CN/_lib/match/index.js\": [\n\t\t1253,\n\t\t280\n\t],\n\t\"./zh-CN/index.js\": [\n\t\t1313,\n\t\t281\n\t],\n\t\"./zh-TW/_lib/formatDistance/index.js\": [\n\t\t1254,\n\t\t282\n\t],\n\t\"./zh-TW/_lib/formatLong/index.js\": [\n\t\t1255,\n\t\t283\n\t],\n\t\"./zh-TW/_lib/formatRelative/index.js\": [\n\t\t1256,\n\t\t284\n\t],\n\t\"./zh-TW/_lib/localize/index.js\": [\n\t\t1257,\n\t\t285\n\t],\n\t\"./zh-TW/_lib/match/index.js\": [\n\t\t1258,\n\t\t287\n\t],\n\t\"./zh-TW/index.js\": [\n\t\t1314,\n\t\t288\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 718;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.po\": [\n\t\t1315,\n\t\t362\n\t],\n\t\"./de/messages.po\": [\n\t\t1316,\n\t\t363\n\t],\n\t\"./en-dev/messages.po\": [\n\t\t1318,\n\t\t365\n\t],\n\t\"./en/messages.po\": [\n\t\t1317,\n\t\t364\n\t],\n\t\"./pl/messages.po\": [\n\t\t1319,\n\t\t366\n\t],\n\t\"./sk/messages.po\": [\n\t\t1320,\n\t\t367\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 725;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t1321,\n\t\t362\n\t],\n\t\"./de/messages.js\": [\n\t\t1322,\n\t\t363\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t1324,\n\t\t365\n\t],\n\t\"./en/messages.js\": [\n\t\t1323,\n\t\t364\n\t],\n\t\"./pl/messages.js\": [\n\t\t1325,\n\t\t366\n\t],\n\t\"./sk/messages.js\": [\n\t\t1326,\n\t\t367\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 726;\nmodule.exports = webpackAsyncContext;","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<Date>\n\n  readonly includeOldFinished?: boolean\n\n  readonly sectors?: Maybe<ReadonlyArray<string>>\n\n  readonly sectorsWithChildren?: boolean\n\n  readonly occasions?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputStatisticCreate {\n  readonly dateFrom?: Maybe<Date>\n\n  readonly dateTo?: Maybe<Date>\n\n  readonly dateTimeFrom?: Maybe<Date>\n\n  readonly dateTimeTo?: Maybe<Date>\n\n  readonly branches?: Maybe<ReadonlyArray<string>>\n\n  readonly drivers?: Maybe<ReadonlyArray<string>>\n\n  readonly cashBoxes?: Maybe<ReadonlyArray<string>>\n\n  readonly cashiers?: Maybe<ReadonlyArray<string>>\n\n  readonly sectors?: Maybe<ReadonlyArray<string>>\n\n  readonly sectorsWithChildren?: boolean\n\n  readonly orderOrigins?: Maybe<ReadonlyArray<OrderOriginEnum>>\n\n  readonly occasions?: Maybe<ReadonlyArray<string>>\n\n  readonly country?: Maybe<CountryEnum>\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly internalNumber?: Maybe<string>\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: Date\n\n  readonly closed?: boolean\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n\n  readonly overwritesRegular?: boolean\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourSpecificCloseCreate {\n  readonly companyBranchId: string\n  /** close for defined interval in minutes */\n  readonly closingInterval: number\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: AvailabilityTypeEnum\n\n  readonly dateFrom?: Maybe<Date>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<Date>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: boolean\n\n  readonly periodic?: boolean\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly minCount?: number\n\n  readonly maxCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n\n  readonly wareCategoryColor?: Maybe<string>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly translations?: Maybe<ReadonlyArray<InputWareCategoryTranslation>>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly minCount?: Maybe<number>\n\n  readonly maxCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n\n  readonly wareCategoryColor?: Maybe<string>\n}\n\nexport interface InputWareCategoryTranslation {\n  readonly language: LanguageEnum\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: Date\n\n  readonly endAt: Date\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n\n  readonly image?: Maybe<InputFile>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly translations?: Maybe<ReadonlyArray<InputRecipeTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n\n  readonly image?: Maybe<InputRecipeImage>\n}\n\nexport interface InputRecipeTranslation {\n  readonly language: LanguageEnum\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n}\n\nexport interface InputRecipeImage {\n  readonly file?: Maybe<InputFile>\n\n  readonly delete: boolean\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityUpdate>>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<AvailabilityTypeEnum>\n\n  readonly dateFrom?: Maybe<Date>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<Date>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly address?: Maybe<string>\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: Date\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly address?: Maybe<string>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly cancelUnpaid?: boolean\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly address?: Maybe<string>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<Date>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n\n  readonly sector?: Maybe<string>\n\n  readonly occasion?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderWifiCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly sector?: Maybe<string>\n\n  readonly occasion?: Maybe<string>\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment type used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** id of payment method  used to finalize order */\n  readonly paymentMethodId?: Maybe<number>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<Date>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderStaffImport {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly companyBranch: string\n\n  readonly acceptedAt?: Maybe<Date>\n\n  readonly acceptedAtRaw?: Maybe<string>\n\n  readonly orderRecipes: ReadonlyArray<InputOrderRecipeCreates>\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly invoice: string\n\n  readonly invoiceNumber: number\n\n  readonly paymentMethods: ReadonlyArray<InputOrderPaymentMethodsCreate>\n\n  readonly canceled?: Maybe<boolean>\n\n  readonly sector?: Maybe<string>\n\n  readonly recipePrices?: Maybe<ReadonlyArray<InputRecipePriceCashBox>>\n\n  readonly totalDiscount?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputRecipePriceCashBox {\n  readonly recipe: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly address?: Maybe<string>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<Date>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputOrderPaymentMethodUpdate {\n  readonly paymentMethodId: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: number\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputStockTransferCreate {\n  readonly stockItemId: string\n\n  readonly quantity: number\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n\nexport interface InputSectorRecipeCreate {\n  readonly recipe: string\n\n  readonly sector: string\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n\n  readonly warePriceType?: WarePriceTypeEnum\n}\n\nexport interface InputOccasionCreate {\n  readonly companyBranch: string\n\n  readonly title: string\n  /** Short title for mobile view */\n  readonly titleShort: string\n  /** Date when occasion begins */\n  readonly dateFrom: Date\n  /** Date when occasions ends */\n  readonly dateTo: Date\n  /** Beginning of preorder */\n  readonly preorderFrom: Date\n  /** End of preorder */\n  readonly preorderTo: Date\n\n  readonly image?: Maybe<InputFile>\n}\n\nexport interface InputOccasionUpdate {\n  readonly title?: Maybe<string>\n  /** Short title for mobile view */\n  readonly titleShort?: Maybe<string>\n  /** Date when occasion begins */\n  readonly dateFrom?: Maybe<Date>\n  /** Date when occasions ends */\n  readonly dateTo?: Maybe<Date>\n  /** Beginning of preorder */\n  readonly preorderFrom?: Maybe<Date>\n  /** End of preorder */\n  readonly preorderTo?: Maybe<Date>\n\n  readonly image?: Maybe<InputRecipeImage>\n}\n\nexport interface InputSectorCreate {\n  readonly companyBranch: string\n\n  readonly sectorType: SectorTypeEnum\n\n  readonly nameLabel: string\n\n  readonly code: string\n\n  readonly enabled?: boolean\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly enabledWareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly disabledWareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly eetEnabled?: Maybe<boolean>\n\n  readonly orderDelaySeconds?: Maybe<number>\n}\n\nexport interface InputSectorUpdate {\n  readonly id: string\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly sectorType?: Maybe<SectorTypeEnum>\n\n  readonly translations?: Maybe<ReadonlyArray<InputSectorTranslation>>\n\n  readonly code?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly enabledWareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly disabledWareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly eetEnabled?: Maybe<boolean>\n\n  readonly orderDelaySeconds?: Maybe<number>\n}\n\nexport interface InputSectorTranslation {\n  readonly language: LanguageEnum\n\n  readonly nameLabel?: Maybe<string>\n}\n/** CompanyType enum */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** AddressType enum */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Currency enum */\nexport enum CurrencyEnum {\n  Hop = 'HOP',\n  Usd = 'USD',\n  Pln = 'PLN',\n  Eur = 'EUR',\n  Czk = 'CZK',\n  Zar = 'ZAR',\n}\n/** Country enum */\nexport enum CountryEnum {\n  Pl = 'PL',\n  Sk = 'SK',\n  Rsa = 'RSA',\n  Cz = 'CZ',\n}\n/** WeekDay enum */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** OrderStateCategoryTarget enum */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  FeAdmin = 'FE_ADMIN',\n  FeKitchen = 'FE_KITCHEN',\n  Driver = 'DRIVER',\n  FeCompletion = 'FE_COMPLETION',\n}\n/** OrderStateCategory enum */\nexport enum OrderStateCategoryEnum {\n  Main = 'MAIN',\n  NewOrders = 'NEW_ORDERS',\n  InCart = 'IN_CART',\n  Production = 'PRODUCTION',\n  Preparing = 'PREPARING',\n  Payment = 'PAYMENT',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  Notification = 'NOTIFICATION',\n  Delivery = 'DELIVERY',\n  Finished = 'FINISHED',\n  Cancel = 'CANCEL',\n  Reclamation = 'RECLAMATION',\n  Bills = 'BILLS',\n}\n/** Language enum */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  Pl = 'PL',\n  De = 'DE',\n  En = 'EN',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n  Pwa = 'PWA',\n}\n/** WareUnit enum */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** PaymentGate enum */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** PaymentType enum */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n  Discount = 'DISCOUNT',\n}\n/** AvailabilityType enum */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n  Specific = 'SPECIFIC',\n}\n/** OrderOriginCategory enum */\nexport enum OrderOriginCategoryEnum {\n  Doveze = 'DOVEZE',\n  Wifi = 'WIFI',\n  Staff = 'STAFF',\n  Website = 'WEBSITE',\n}\n/** Allergen enum */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Egg = 'EGG',\n  Shellfish = 'SHELLFISH',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** WarePriceType enum */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** FieldState enum */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** ZoneType enum */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n  Return = 'RETURN',\n}\n/** DeviceState enum */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Free = 'FREE',\n  Busy = 'BUSY',\n}\n/** DeviceType enum */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** DeliveryState enum */\nexport enum DeliveryStateEnum {\n  Fresh = 'FRESH',\n  OnWay = 'ON_WAY',\n  Delivered = 'DELIVERED',\n  Canceled = 'CANCELED',\n  DriverChanged = 'DRIVER_CHANGED',\n  NotFound = 'NOT_FOUND',\n  LateDelivery = 'LATE_DELIVERY',\n  Reclamation = 'RECLAMATION',\n}\n/** OrderState enum */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n  HighPriority = 'HIGH_PRIORITY',\n  WifiDelayed = 'WIFI_DELAYED',\n  AssignedToDeliver = 'ASSIGNED_TO_DELIVER',\n  TransferCancel = 'TRANSFER_CANCEL',\n}\n/** OrderBillingType enum */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** DeliveryType enum */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** OrderRecipeState enum */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Finished = 'FINISHED',\n  Ready = 'READY',\n}\n/** OrderOnlineState enum */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** OrderOrigin enum */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n  Pwa = 'PWA',\n  WebMenu = 'WEB_MENU',\n  WifiPreorder = 'WIFI_PREORDER',\n}\n/** WareCategoryType enum */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Tip = 'TIP',\n  Mixin = 'MIXIN',\n}\n/** SectorType enum */\nexport enum SectorTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n}\n/** ShiftUserState enum */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n}\n/** SettingType enum */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n/** WareRequirement enum */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n\n/** Date in format YYYY-MM-DD */\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = Date\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n/** Input file type for Apollo upload using multipart requests */\nexport type InputFile = any\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type QAddressSuggestVariables = {\n  readonly search: string\n}\n\nexport type QAddressSuggestQuery = {\n  readonly __typename?: 'Query'\n\n  readonly suggest: ReadonlyArray<QAddressSuggestSuggest>\n}\n\nexport type QAddressSuggestSuggest = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly gps: Maybe<QAddressSuggestGps>\n} & FAddressFragment\n\nexport type QAddressSuggestGps = FGeoPointFragment\n\nexport type QFilterCashboxesVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n}\n\nexport type QFilterCashboxesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly cashBoxes: ReadonlyArray<QFilterCashboxesCashBoxes>\n}\n\nexport type QFilterCashboxesCashBoxes = {\n  readonly __typename?: 'CashBox'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly uuid: string\n}\n\nexport type QFilterCashiersVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n}\n\nexport type QFilterCashiersQuery = {\n  readonly __typename?: 'Query'\n\n  readonly cashiers: ReadonlyArray<QFilterCashiersCashiers>\n}\n\nexport type QFilterCashiersCashiers = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type QFilterCountriesVariables = {}\n\nexport type QFilterCountriesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly countries: ReadonlyArray<QFilterCountriesCountries>\n}\n\nexport type QFilterCountriesCountries = {\n  readonly __typename?: 'Country'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: CountryEnum\n}\n\nexport type QFilterDriversVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QFilterDriversQuery = {\n  readonly __typename?: 'Query'\n\n  readonly drivers: ReadonlyArray<QFilterDriversDrivers>\n}\n\nexport type QFilterDriversDrivers = FDriverFragment\n\nexport type QFilterOccasionsVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QFilterOccasionsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly occasions: ReadonlyArray<QFilterOccasionsOccasions>\n}\n\nexport type QFilterOccasionsOccasions = {\n  readonly __typename?: 'Occasion'\n\n  readonly id: string\n\n  readonly title: string\n}\n\nexport type QFilterOriginsVariables = {}\n\nexport type QFilterOriginsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly origins: ReadonlyArray<QFilterOriginsOrigins>\n}\n\nexport type QFilterOriginsOrigins = {\n  readonly __typename?: 'OrderOrigin'\n\n  readonly code: string\n\n  readonly enum: OrderOriginEnum\n}\n\nexport type QFilterSectorsVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QFilterSectorsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly sectors: ReadonlyArray<QFilterSectorsSectors>\n}\n\nexport type QFilterSectorsSectors = {\n  readonly __typename?: 'Sector'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly name: string\n\n  readonly parent: Maybe<QFilterSectorsParent>\n\n  readonly companyBranch: QFilterSectorsCompanyBranch\n}\n\nexport type QFilterSectorsParent = {\n  readonly __typename?: 'Sector'\n\n  readonly id: string\n}\n\nexport type QFilterSectorsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type MOrderStateVariables = {\n  readonly orderId: string\n  readonly state: OrderStateEnum\n}\n\nexport type MOrderStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MOrderStateAddOrderState\n}\n\nexport type MOrderStateAddOrderState = FOrderStateCategoryFragment &\n  FOrderTimingFragment\n\nexport type MSetPriorityOrderVariables = {\n  readonly orderId: string\n  readonly isPriority: boolean\n}\n\nexport type MSetPriorityOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly setPriorityOrder: MSetPriorityOrderSetPriorityOrder\n}\n\nexport type MSetPriorityOrderSetPriorityOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly isPriority: boolean\n}\n\nexport type QLogoutWidgetVariables = {\n  readonly id: string\n}\n\nexport type QLogoutWidgetQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: QLogoutWidgetUser\n}\n\nexport type QLogoutWidgetUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type MBusinessHoursSubmitVariables = {\n  readonly branchId: string\n  readonly hours: ReadonlyArray<InputBusinessHourCreate>\n}\n\nexport type MBusinessHoursSubmitMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createBusinessHours: ReadonlyArray<\n    MBusinessHoursSubmitCreateBusinessHours\n  >\n}\n\nexport type MBusinessHoursSubmitCreateBusinessHours = FRegularBusinessHourFragment\n\nexport type MSpecificBusinessHourCreateVariables = {\n  readonly input: InputBusinessHourSpecificDateCreate\n}\n\nexport type MSpecificBusinessHourCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MSpecificBusinessHourCreateResult\n}\n\nexport type MSpecificBusinessHourCreateResult = FSpecificBusinessHourFragment\n\nexport type MSpecificBusinessHourDeleteVariables = {\n  readonly id: string\n}\n\nexport type MSpecificBusinessHourDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MSpecificBusinessHourDeleteResult\n}\n\nexport type MSpecificBusinessHourDeleteResult = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n}\n\nexport type QRegularBusinessHoursVariables = {\n  readonly branchId: string\n}\n\nexport type QRegularBusinessHoursQuery = {\n  readonly __typename?: 'Query'\n\n  readonly businessHours: ReadonlyArray<QRegularBusinessHoursBusinessHours>\n\n  readonly weekDays: ReadonlyArray<QRegularBusinessHoursWeekDays>\n}\n\nexport type QRegularBusinessHoursBusinessHours = FRegularBusinessHourFragment\n\nexport type QRegularBusinessHoursWeekDays = FWeekdayFragment\n\nexport type QSpecificBusinessHoursVariables = {\n  readonly branchId: string\n}\n\nexport type QSpecificBusinessHoursQuery = {\n  readonly __typename?: 'Query'\n\n  readonly businessHours: ReadonlyArray<QSpecificBusinessHoursBusinessHours>\n}\n\nexport type QSpecificBusinessHoursBusinessHours = FSpecificBusinessHourFragment\n\nexport type MAddOrderPromoVariables = {\n  readonly orderId: string\n  readonly code: string\n}\n\nexport type MAddOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderPromoCode: MAddOrderPromoAddOrderPromoCode\n}\n\nexport type MAddOrderPromoAddOrderPromoCode = {\n  readonly __typename?: 'OrderWithErrors'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MAddOrderPromoOrder\n}\n\nexport type MAddOrderPromoOrder = FCreateOrderFragment\n\nexport type MAddToSectorVariables = {\n  readonly sectorId: string\n  readonly recipeId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MAddToSectorMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createSectorRecipe: ReadonlyArray<MAddToSectorCreateSectorRecipe>\n}\n\nexport type MAddToSectorCreateSectorRecipe = {\n  readonly __typename?: 'SectorRecipe'\n\n  readonly id: string\n}\n\nexport type MCancelOrderVariables = {\n  readonly orderId: string\n}\n\nexport type MCancelOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MCancelOrderAddOrderState\n}\n\nexport type MCancelOrderAddOrderState = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FOrderStateCategoryFragment\n\nexport type MCreateOrderAcceptVariables = {\n  readonly orderId: string\n  readonly customer: InputCustomerCreate\n  readonly deliverAt?: Maybe<Date>\n  readonly note?: Maybe<string>\n  readonly paymentType?: Maybe<PaymentTypeEnum>\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n}\n\nexport type MCreateOrderAcceptMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: MCreateOrderAcceptFinishOrder\n}\n\nexport type MCreateOrderAcceptFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MCreateOrderAcceptOrder\n}\n\nexport type MCreateOrderAcceptOrder = FCreateOrderFragment\n\nexport type MCreateOrderAddRecipeVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderAddRecipeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrderRecipe: MCreateOrderAddRecipeCreateOrderRecipe\n}\n\nexport type MCreateOrderAddRecipeCreateOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderNewVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<Date>\n  readonly gps: InputGeoPointCreate\n  readonly callEventId?: Maybe<string>\n}\n\nexport type MCreateOrderNewMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrder: MCreateOrderNewCreateOrder\n}\n\nexport type MCreateOrderNewCreateOrder = FCreateOrderFragment\n\nexport type MCreateOrderRemoveItemVariables = {\n  readonly itemId: string\n}\n\nexport type MCreateOrderRemoveItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyOrderRecipe: MCreateOrderRemoveItemDestroyOrderRecipe\n}\n\nexport type MCreateOrderRemoveItemDestroyOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderUpdateVariables = {\n  readonly orderId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<Date>\n  readonly gps: InputGeoPointCreate\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport type MCreateOrderUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MCreateOrderUpdateUpdateOrder\n}\n\nexport type MCreateOrderUpdateUpdateOrder = FCreateOrderFragment\n\nexport type MCreateOrderUpdateItemVariables = {\n  readonly itemId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderUpdateItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipe: MCreateOrderUpdateItemUpdateOrderRecipe\n}\n\nexport type MCreateOrderUpdateItemUpdateOrderRecipe = FCreateOrderFragment\n\nexport type MRemoveOrderPromoVariables = {\n  readonly orderId: string\n  readonly codeId: string\n}\n\nexport type MRemoveOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly removeOrderPromoCode: MRemoveOrderPromoRemoveOrderPromoCode\n}\n\nexport type MRemoveOrderPromoRemoveOrderPromoCode = FCreateOrderFragment\n\nexport type QBranchPaymentMethodsVariables = {\n  readonly branchId: string\n}\n\nexport type QBranchPaymentMethodsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QBranchPaymentMethodsCompanyBranch\n}\n\nexport type QBranchPaymentMethodsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n} & FBranchPaymentMethodsFragment\n\nexport type QCreateOrderItemVariables = {\n  readonly itemId: string\n}\n\nexport type QCreateOrderItemQuery = {\n  readonly __typename?: 'Query'\n\n  readonly item: QCreateOrderItemItem\n}\n\nexport type QCreateOrderItemItem = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItemRecipe\n\n  readonly selectedSidedishes: ReadonlyArray<QCreateOrderItemSelectedSidedishes>\n}\n\nexport type QCreateOrderItemRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QCreateOrderItemSelectedSidedishes = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItem_Recipe\n}\n\nexport type QCreateOrderItem_Recipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type QCreateOrderRecipeVariables = {\n  readonly recipeId: string\n}\n\nexport type QCreateOrderRecipeQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QCreateOrderRecipeRecipe\n}\n\nexport type QCreateOrderRecipeRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QOrderCartVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderCartQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderCartOrder\n}\n\nexport type QOrderCartOrder = FCreateOrderFragment\n\nexport type QOrderFormDeliverAtDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderFormDeliverAtDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly times: QOrderFormDeliverAtDefaultsTimes\n}\n\nexport type QOrderFormDeliverAtDefaultsTimes = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly deliveryTime: number\n\n  readonly pickupTime: number\n}\n\nexport type QOrderFormPromoVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderFormPromoQuery = {\n  readonly __typename?: 'Query'\n\n  readonly promoCodes: ReadonlyArray<QOrderFormPromoPromoCodes>\n}\n\nexport type QOrderFormPromoPromoCodes = {\n  readonly __typename?: 'PromoCode'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type QOrderMenuVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderMenuQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orderMenu: ReadonlyArray<QOrderMenuOrderMenu>\n}\n\nexport type QOrderMenuOrderMenu = FOrderMenuCategoryFragment\n\nexport type QOrderVamCustomerVariables = {\n  readonly branchId: string\n  readonly phone: string\n}\n\nexport type QOrderVamCustomerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vamCustomer: QOrderVamCustomerVamCustomer\n}\n\nexport type QOrderVamCustomerVamCustomer = {\n  readonly __typename?: 'CustomerInformation'\n\n  readonly isFound: boolean\n} & FOrderCustomerFragment\n\nexport type QValidateLocationVariables = {\n  readonly branchId: string\n  readonly latitude: number\n  readonly longitude: number\n}\n\nexport type QValidateLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly resolveLocation: QValidateLocationResolveLocation\n}\n\nexport type QValidateLocationResolveLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly inDeliveryLocation: boolean\n\n  readonly zone: Maybe<QValidateLocationZone>\n}\n\nexport type QValidateLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly minimalOrderPrice: QValidateLocationMinimalOrderPrice\n}\n\nexport type QValidateLocationMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type QCustomerScreenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n  readonly sectors?: Maybe<ReadonlyArray<string>>\n}\n\nexport type QCustomerScreenOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QCustomerScreenOrderListOrders>\n}\n\nexport type QCustomerScreenOrderListOrders = FCustomerScreenOrderFragment\n\nexport type SCustomerScreenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n  readonly sectors?: Maybe<ReadonlyArray<string>>\n}\n\nexport type SCustomerScreenOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SCustomerScreenOrderListUpdatedOrder\n}\n\nexport type SCustomerScreenOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SCustomerScreenOrderListOrder>\n}\n\nexport type SCustomerScreenOrderListOrder = FCustomerScreenOrderFragment\n\nexport type MKitchenOrderHandleVariables = {\n  readonly orderId: string\n  readonly state: OrderStateEnum\n}\n\nexport type MKitchenOrderHandleMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MKitchenOrderHandleAddOrderState\n}\n\nexport type MKitchenOrderHandleAddOrderState = FOrderStateCategoryFragment\n\nexport type MKitchenOrderRecipeHandleVariables = {\n  readonly orderRecipeId: string\n  readonly state: OrderRecipeStateEnum\n}\n\nexport type MKitchenOrderRecipeHandleMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly orderRecipe: MKitchenOrderRecipeHandleOrderRecipe\n}\n\nexport type MKitchenOrderRecipeHandleOrderRecipe = FKitchenOrderStateFragment\n\nexport type MKitchenSectorHandleVariables = {\n  readonly sectorId: string\n  readonly state: OrderRecipeStateEnum\n}\n\nexport type MKitchenSectorHandleMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly sectorRecipe: ReadonlyArray<MKitchenSectorHandleSectorRecipe>\n}\n\nexport type MKitchenSectorHandleSectorRecipe = FKitchenSectorStateFragment\n\nexport type MKitchenSectorRecipeHandleVariables = {\n  readonly sectorRecipeId: string\n  readonly state: OrderRecipeStateEnum\n}\n\nexport type MKitchenSectorRecipeHandleMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly sectorRecipe: MKitchenSectorRecipeHandleSectorRecipe\n}\n\nexport type MKitchenSectorRecipeHandleSectorRecipe = FKitchenSectorStateFragment\n\nexport type QKitchenCompletionOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n  readonly occasions?: Maybe<ReadonlyArray<string>>\n  readonly sectors?: Maybe<ReadonlyArray<string>>\n}\n\nexport type QKitchenCompletionOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QKitchenCompletionOrderListOrders>\n}\n\nexport type QKitchenCompletionOrderListOrders = FKitchenCompletionOrderFragment\n\nexport type QKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n  readonly occasions?: Maybe<ReadonlyArray<string>>\n  readonly sectors?: Maybe<ReadonlyArray<string>>\n}\n\nexport type QKitchenOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QKitchenOrderListOrders>\n}\n\nexport type QKitchenOrderListOrders = FKitchenOrderFragment\n\nexport type QKitchenSectorListVariables = {\n  readonly branches: ReadonlyArray<string>\n  readonly sectors?: Maybe<ReadonlyArray<string>>\n  readonly states?: Maybe<ReadonlyArray<OrderRecipeStateEnum>>\n}\n\nexport type QKitchenSectorListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly sectors: ReadonlyArray<QKitchenSectorListSectors>\n\n  readonly sectorRecipes: ReadonlyArray<QKitchenSectorListSectorRecipes>\n}\n\nexport type QKitchenSectorListSectors = {\n  readonly __typename?: 'Sector'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type QKitchenSectorListSectorRecipes = FKitchenSectorRecipeFragment\n\nexport type SKitchenCompletionOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n  readonly occasions?: Maybe<ReadonlyArray<string>>\n  readonly sectors?: Maybe<ReadonlyArray<string>>\n}\n\nexport type SKitchenCompletionOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SKitchenCompletionOrderListUpdatedOrder\n}\n\nexport type SKitchenCompletionOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SKitchenCompletionOrderListOrder>\n}\n\nexport type SKitchenCompletionOrderListOrder = FKitchenCompletionOrderFragment\n\nexport type SKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n  readonly occasions?: Maybe<ReadonlyArray<string>>\n  readonly sectors?: Maybe<ReadonlyArray<string>>\n}\n\nexport type SKitchenOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SKitchenOrderListUpdatedOrder\n}\n\nexport type SKitchenOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SKitchenOrderListOrder>\n}\n\nexport type SKitchenOrderListOrder = FKitchenOrderFragment\n\nexport type SKitchenSectorListVariables = {\n  readonly branches: ReadonlyArray<string>\n  readonly sectors?: Maybe<ReadonlyArray<string>>\n  readonly states?: Maybe<ReadonlyArray<OrderRecipeStateEnum>>\n}\n\nexport type SKitchenSectorListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedSectorRecipe: SKitchenSectorListUpdatedSectorRecipe\n}\n\nexport type SKitchenSectorListUpdatedSectorRecipe = {\n  readonly __typename?: 'SectorRecipeUpdateSubscription'\n\n  readonly id: string\n\n  readonly sectorRecipe: Maybe<SKitchenSectorListSectorRecipe>\n}\n\nexport type SKitchenSectorListSectorRecipe = FKitchenSectorRecipeFragment\n\nexport type MPasswordChangeVariables = {\n  readonly password: string\n}\n\nexport type MPasswordChangeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly change: MPasswordChangeChange\n}\n\nexport type MPasswordChangeChange = {\n  readonly __typename?: 'UserUpdatedPassword'\n\n  readonly userId: string\n\n  readonly newToken: string\n}\n\nexport type QUserBootstrapVariables = {\n  readonly userId: string\n}\n\nexport type QUserBootstrapQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: QUserBootstrapUser\n\n  readonly permissions: QUserBootstrapPermissions\n\n  readonly access: QUserBootstrapAccess\n}\n\nexport type QUserBootstrapUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly language: QUserBootstrapLanguage\n\n  readonly roles: ReadonlyArray<QUserBootstrapRoles>\n\n  readonly branches: ReadonlyArray<QUserBootstrapBranches>\n}\n\nexport type QUserBootstrapLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly rawCode: string\n}\n\nexport type QUserBootstrapRoles = {\n  readonly __typename?: 'Role'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type QUserBootstrapBranches = FCompanyBranchFragment\n\nexport type QUserBootstrapPermissions = {\n  readonly __typename?: 'UserPermission'\n\n  readonly canCancelOrders: boolean\n\n  readonly canCreateOrder: boolean\n}\n\nexport type QUserBootstrapAccess = {\n  readonly __typename?: '__Schema'\n\n  readonly queries: QUserBootstrapQueries\n\n  readonly mutations: Maybe<QUserBootstrapMutations>\n\n  readonly subscriptions: Maybe<QUserBootstrapSubscriptions>\n}\n\nexport type QUserBootstrapQueries = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrapFields>>\n}\n\nexport type QUserBootstrapFields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QUserBootstrapMutations = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrap_Fields>>\n}\n\nexport type QUserBootstrap_Fields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QUserBootstrapSubscriptions = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrap__Fields>>\n}\n\nexport type QUserBootstrap__Fields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type MMenuCategoryCreateVariables = {\n  readonly category: InputWareCategoryCreate\n}\n\nexport type MMenuCategoryCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createCategory: MMenuCategoryCreateCreateCategory\n}\n\nexport type MMenuCategoryCreateCreateCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type MMenuCategoryDeleteVariables = {\n  readonly categoryId: string\n}\n\nexport type MMenuCategoryDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly deleteCategory: MMenuCategoryDeleteDeleteCategory\n}\n\nexport type MMenuCategoryDeleteDeleteCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type MMenuCategorySortVariables = {\n  readonly categoryId: string\n  readonly offset: number\n}\n\nexport type MMenuCategorySortMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly success: boolean\n}\n\nexport type MMenuCategoryUpdateVariables = {\n  readonly categoryId: string\n  readonly category: InputWareCategoryUpdate\n}\n\nexport type MMenuCategoryUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateCategory: MMenuCategoryUpdateUpdateCategory\n}\n\nexport type MMenuCategoryUpdateUpdateCategory = FMenuCategoryFragment\n\nexport type MMenuCategoryVisibilityVariables = {\n  readonly categoryId: string\n  readonly visible: boolean\n}\n\nexport type MMenuCategoryVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: MMenuCategoryVisibilityUpdateWareCategory\n}\n\nexport type MMenuCategoryVisibilityUpdateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type QMenuCategoryColorsVariables = {}\n\nexport type QMenuCategoryColorsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly colors: ReadonlyArray<QMenuCategoryColorsColors>\n}\n\nexport type QMenuCategoryColorsColors = {\n  readonly __typename?: 'WareCategoryColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type QMenuCategoryFilterVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuCategoryFilterQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryFilterCategories>\n}\n\nexport type QMenuCategoryFilterCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly countRecipes: number\n\n  readonly categoryType: QMenuCategoryFilterCategoryType\n}\n\nexport type QMenuCategoryFilterCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type QMenuCategoryFormVariables = {\n  readonly categoryId: string\n  readonly language: LanguageEnum\n}\n\nexport type QMenuCategoryFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly category: QMenuCategoryFormCategory\n}\n\nexport type QMenuCategoryFormCategory = FMenuCategoryInFormFragment\n\nexport type QMenuCategoryFormTransVariables = {\n  readonly categoryId: string\n  readonly language: LanguageEnum\n}\n\nexport type QMenuCategoryFormTransQuery = {\n  readonly __typename?: 'Query'\n\n  readonly category: QMenuCategoryFormTransCategory\n}\n\nexport type QMenuCategoryFormTransCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n} & FMenuCategoryLocalizedFragment\n\nexport type QMenuCategoryListVariables = {\n  readonly branchId: string\n  readonly categoryType?: Maybe<WareCategoryTypeEnum>\n}\n\nexport type QMenuCategoryListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryListCategories>\n}\n\nexport type QMenuCategoryListCategories = FMenuCategoryInListFragment\n\nexport type QMenuCategoryOriginsVariables = {}\n\nexport type QMenuCategoryOriginsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly origins: ReadonlyArray<QMenuCategoryOriginsOrigins>\n}\n\nexport type QMenuCategoryOriginsOrigins = {\n  readonly __typename?: 'OrderOriginCategory'\n\n  readonly enum: OrderOriginCategoryEnum\n\n  readonly code: string\n}\n\nexport type QMenuAllergensVariables = {}\n\nexport type QMenuAllergensQuery = {\n  readonly __typename?: 'Query'\n\n  readonly allergens: ReadonlyArray<QMenuAllergensAllergens>\n}\n\nexport type QMenuAllergensAllergens = FMenuAllergenFragment\n\nexport type QMenuCurrenciesVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuCurrenciesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly currencies: ReadonlyArray<QMenuCurrenciesCurrencies>\n\n  readonly companyBranch: QMenuCurrenciesCompanyBranch\n}\n\nexport type QMenuCurrenciesCurrencies = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n\n  readonly code: string\n}\n\nexport type QMenuCurrenciesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly address: QMenuCurrenciesAddress\n}\n\nexport type QMenuCurrenciesAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<QMenuCurrenciesCountry>\n}\n\nexport type QMenuCurrenciesCountry = {\n  readonly __typename?: 'Country'\n\n  readonly currency: QMenuCurrenciesCurrency\n}\n\nexport type QMenuCurrenciesCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n}\n\nexport type QMenuGuideDownloadVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuGuideDownloadQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QMenuGuideDownloadCompanyBranch\n}\n\nexport type QMenuGuideDownloadCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly foodMenuUrl: Maybe<string>\n}\n\nexport type QMenuVatsVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuVatsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vats: ReadonlyArray<QMenuVatsVats>\n}\n\nexport type QMenuVatsVats = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n\n  readonly vat: number\n}\n\nexport type QMenuWareUnitsVariables = {}\n\nexport type QMenuWareUnitsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareUnits: ReadonlyArray<QMenuWareUnitsWareUnits>\n}\n\nexport type QMenuWareUnitsWareUnits = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: WareUnitEnum\n}\n\nexport type MMenuRecipeCreateVariables = {\n  readonly recipe: InputRecipeCreate\n}\n\nexport type MMenuRecipeCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly recipe: MMenuRecipeCreateRecipe\n}\n\nexport type MMenuRecipeCreateRecipe = FMenuRecipeInListFragment\n\nexport type MMenuRecipeDeleteVariables = {\n  readonly recipeId: string\n}\n\nexport type MMenuRecipeDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyRecipe: MMenuRecipeDeleteDestroyRecipe\n}\n\nexport type MMenuRecipeDeleteDestroyRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type MMenuRecipeUpdateVariables = {\n  readonly recipeId: string\n  readonly recipe: InputRecipeUpdate\n}\n\nexport type MMenuRecipeUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly recipe: MMenuRecipeUpdateRecipe\n}\n\nexport type MMenuRecipeUpdateRecipe = FMenuRecipeInListFragment\n\nexport type MMenuRecipeVisibilityVariables = {\n  readonly recipeId: string\n  readonly visible: boolean\n}\n\nexport type MMenuRecipeVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateVisibility: MMenuRecipeVisibilityUpdateVisibility\n}\n\nexport type MMenuRecipeVisibilityUpdateVisibility = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type QMenuRecipeDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuRecipeDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly defaults: QMenuRecipeDefaultsDefaults\n}\n\nexport type QMenuRecipeDefaultsDefaults = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly vats: ReadonlyArray<QMenuRecipeDefaultsVats>\n\n  readonly currency: QMenuRecipeDefaultsCurrency\n}\n\nexport type QMenuRecipeDefaultsVats = {\n  readonly __typename?: 'VatPriceType'\n\n  readonly vatId: string\n\n  readonly priceType: QMenuRecipeDefaultsPriceType\n}\n\nexport type QMenuRecipeDefaultsPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type QMenuRecipeDefaultsCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type QMenuRecipeFormVariables = {\n  readonly recipeId: string\n  readonly language: LanguageEnum\n}\n\nexport type QMenuRecipeFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QMenuRecipeFormRecipe\n}\n\nexport type QMenuRecipeFormRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly sourcePrices: ReadonlyArray<QMenuRecipeFormSourcePrices>\n\n  readonly sourceAssociatedRecipes: ReadonlyArray<\n    QMenuRecipeFormSourceAssociatedRecipes\n  >\n\n  readonly sourceIngredients: ReadonlyArray<QMenuRecipeFormSourceIngredients>\n} & FMenuRecipeInFormFragment\n\nexport type QMenuRecipeFormSourcePrices = FMenuRecipePricingFragment\n\nexport type QMenuRecipeFormSourceAssociatedRecipes = {\n  readonly __typename?: 'RecipeRelation'\n\n  readonly id: string\n\n  readonly priceType: QMenuRecipeFormPriceType\n\n  readonly recipe: QMenuRecipeForm_Recipe\n}\n\nexport type QMenuRecipeFormPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type QMenuRecipeForm_Recipe = FMenuAssocRecipeFragment\n\nexport type QMenuRecipeFormSourceIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly quantity: number\n\n  readonly stockItem: QMenuRecipeFormStockItem\n}\n\nexport type QMenuRecipeFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly label: string\n\n  readonly wareUnit: QMenuRecipeFormWareUnit\n\n  readonly allergens: ReadonlyArray<QMenuRecipeFormAllergens>\n}\n\nexport type QMenuRecipeFormWareUnit = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type QMenuRecipeFormAllergens = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly enum: AllergenEnum\n}\n\nexport type QMenuRecipeFormAssocVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuRecipeFormAssocQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<QMenuRecipeFormAssocRecipes>\n}\n\nexport type QMenuRecipeFormAssocRecipes = FMenuAssocRecipeFragment\n\nexport type QMenuRecipeFormTransVariables = {\n  readonly recipeId: string\n  readonly language: LanguageEnum\n}\n\nexport type QMenuRecipeFormTransQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QMenuRecipeFormTransRecipe\n}\n\nexport type QMenuRecipeFormTransRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n} & FMenuRecipeLocalizedFragment\n\nexport type QMenuRecipeListVariables = {\n  readonly branchId: string\n  readonly categoryId?: Maybe<string>\n  readonly categoryType?: Maybe<WareCategoryTypeEnum>\n}\n\nexport type QMenuRecipeListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<QMenuRecipeListRecipes>\n}\n\nexport type QMenuRecipeListRecipes = FMenuRecipeInListFragment\n\nexport type MMenuStockCreateVariables = {\n  readonly stockItem: InputStockItemCreate\n}\n\nexport type MMenuStockCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createStockItem: MMenuStockCreateCreateStockItem\n}\n\nexport type MMenuStockCreateCreateStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly allowNegative: FieldStateEnum\n} & FMenuStockItemFragment\n\nexport type MMenuStockDeleteVariables = {\n  readonly stockId: string\n}\n\nexport type MMenuStockDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly deleteStockItem: MMenuStockDeleteDeleteStockItem\n}\n\nexport type MMenuStockDeleteDeleteStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n}\n\nexport type MMenuStockQuantityVariables = {\n  readonly stockItem: string\n  readonly quantityChange: number\n}\n\nexport type MMenuStockQuantityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly changeAmountStockItem: MMenuStockQuantityChangeAmountStockItem\n}\n\nexport type MMenuStockQuantityChangeAmountStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly quantity: number\n}\n\nexport type MMenuStockUpdateVariables = {\n  readonly stockId: string\n  readonly stockItem: InputStockItemUpdate\n}\n\nexport type MMenuStockUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateStockItem: MMenuStockUpdateUpdateStockItem\n}\n\nexport type MMenuStockUpdateUpdateStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly allowNegative: FieldStateEnum\n} & FMenuStockItemFragment\n\nexport type QMenuStockDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly defaults: QMenuStockDefaultsDefaults\n}\n\nexport type QMenuStockDefaultsDefaults = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type QMenuStockFormVariables = {\n  readonly stockId: string\n}\n\nexport type QMenuStockFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: QMenuStockFormStockItem\n}\n\nexport type QMenuStockFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly companyBranch: QMenuStockFormCompanyBranch\n} & FMenuStockItemFragment\n\nexport type QMenuStockFormCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type QMenuStockListVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QMenuStockListStockItems>\n}\n\nexport type QMenuStockListStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly allowNegativeValue: boolean\n} & FMenuStockItemFragment\n\nexport type QStockRecipesVariables = {\n  readonly stockId: string\n}\n\nexport type QStockRecipesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: QStockRecipesStockItem\n}\n\nexport type QStockRecipesStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly ingredients: ReadonlyArray<QStockRecipesIngredients>\n}\n\nexport type QStockRecipesIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly recipe: QStockRecipesRecipe\n}\n\nexport type QStockRecipesRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly recipeType: QStockRecipesRecipeType\n}\n\nexport type QStockRecipesRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type MBranchDefaultTimeVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly time: number\n}\n\nexport type MBranchDefaultTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateDefaultOrderProcessTime: MBranchDefaultTimeUpdateDefaultOrderProcessTime\n}\n\nexport type MBranchDefaultTimeUpdateDefaultOrderProcessTime = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type MChangePaymentMethodVariables = {\n  readonly orderId: string\n  readonly paymentMethodId: string\n}\n\nexport type MChangePaymentMethodMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderPaymentMethod: MChangePaymentMethodUpdateOrderPaymentMethod\n}\n\nexport type MChangePaymentMethodUpdateOrderPaymentMethod = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FOrderPaymentMethodsFragment\n\nexport type MFastCloseVariables = {\n  readonly branchId: string\n  readonly interval: number\n  readonly note?: Maybe<string>\n}\n\nexport type MFastCloseMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addSpecialClosingBusinessHours: MFastCloseAddSpecialClosingBusinessHours\n}\n\nexport type MFastCloseAddSpecialClosingBusinessHours = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n}\n\nexport type MOrderChangeToPickupVariables = {\n  readonly orderId: string\n}\n\nexport type MOrderChangeToPickupMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderDeliveryToPickup: MOrderChangeToPickupUpdateOrderDeliveryToPickup\n}\n\nexport type MOrderChangeToPickupUpdateOrderDeliveryToPickup = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliveryType: Maybe<MOrderChangeToPickupDeliveryType>\n}\n\nexport type MOrderChangeToPickupDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type MOrderTimeNotificationVariables = {\n  readonly orderId: string\n  readonly minutes: number\n}\n\nexport type MOrderTimeNotificationMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly orderNotifyCustomer: MOrderTimeNotificationOrderNotifyCustomer\n}\n\nexport type MOrderTimeNotificationOrderNotifyCustomer = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<Date>\n}\n\nexport type MRemoveOrderDriverVariables = {\n  readonly orderDriverId: string\n}\n\nexport type MRemoveOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyUserDeliveringOrder: MRemoveOrderDriverDestroyUserDeliveringOrder\n}\n\nexport type MRemoveOrderDriverDestroyUserDeliveringOrder = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: MRemoveOrderDriverOrder\n}\n\nexport type MRemoveOrderDriverOrder = FOrderDriverFragment\n\nexport type MSelectOrderDriverVariables = {\n  readonly driverId: string\n  readonly orderId: string\n}\n\nexport type MSelectOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MSelectOrderDriverResult\n}\n\nexport type MSelectOrderDriverResult = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: MSelectOrderDriverOrder\n}\n\nexport type MSelectOrderDriverOrder = FOrderDriverFragment\n\nexport type MTransferOrderVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type MTransferOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly transferOrder: MTransferOrderTransferOrder\n}\n\nexport type MTransferOrderTransferOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type QBranchDefeaultTimesVariables = {\n  readonly branchId: string\n}\n\nexport type QBranchDefeaultTimesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QBranchDefeaultTimesCompanyBranch\n}\n\nexport type QBranchDefeaultTimesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type QIsBranchOpenVariables = {\n  readonly branchId: string\n}\n\nexport type QIsBranchOpenQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QIsBranchOpenCompanyBranch\n}\n\nexport type QIsBranchOpenCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n}\n\nexport type QOrderDetailVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderDetailQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderDetailOrder\n}\n\nexport type QOrderDetailOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: Date\n\n  readonly deliverAt: Maybe<Date>\n\n  readonly delayedDeliveryTime: Maybe<Date>\n\n  readonly companyBranch: QOrderDetailCompanyBranch\n\n  readonly customer: QOrderDetailCustomer\n\n  readonly customerOrdersCountCurrent: number\n\n  readonly customerOrdersCountTotal: number\n\n  readonly note: Maybe<string>\n\n  readonly allAppliedRules: ReadonlyArray<string>\n\n  readonly items: ReadonlyArray<QOrderDetailItems>\n\n  readonly orderOrigin: QOrderDetailOrderOrigin\n} & (FOrderTotalsFragment & FOrderTimingFragment & FOrderDriverFragment)\n\nexport type QOrderDetailCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type QOrderDetailCustomer = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly emails: ReadonlyArray<QOrderDetailEmails>\n\n  readonly phones: ReadonlyArray<QOrderDetailPhones>\n}\n\nexport type QOrderDetailEmails = FEmailFragment\n\nexport type QOrderDetailPhones = FPhoneFragment\n\nexport type QOrderDetailItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<QOrderDetailSidedishes>\n} & FOrderDetailWareFragment\n\nexport type QOrderDetailSidedishes = FOrderDetailWareFragment\n\nexport type QOrderDetailOrderOrigin = {\n  readonly __typename?: 'OrderOrigin'\n\n  readonly code: string\n\n  readonly enum: OrderOriginEnum\n}\n\nexport type QOrderDriversVariables = {\n  readonly orderId: string\n  readonly branchId: ReadonlyArray<string>\n}\n\nexport type QOrderDriversQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderDriversOrder\n\n  readonly drivers: ReadonlyArray<QOrderDriversDrivers>\n}\n\nexport type QOrderDriversOrder = FOrderDriverFragment\n\nexport type QOrderDriversDrivers = FDriverFragment\n\nexport type QOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QOrderListOrders>\n}\n\nexport type QOrderListOrders = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (FOrderStateCategoryFragment & FOrderTickerFragment)\n\nexport type QOrderListCategoriesVariables = {}\n\nexport type QOrderListCategoriesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QOrderListCategoriesCategories>\n}\n\nexport type QOrderListCategoriesCategories = {\n  readonly __typename?: 'OrderStateCategory'\n\n  readonly label: string\n\n  readonly enum: OrderStateCategoryEnum\n}\n\nexport type QOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QOrderMapDeliveriesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly deliveries: ReadonlyArray<QOrderMapDeliveriesDeliveries>\n}\n\nexport type QOrderMapDeliveriesDeliveries = FOrderMapDeliveryFragment\n\nexport type QOrderMapOrdersVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QOrderMapOrdersQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QOrderMapOrdersOrders>\n}\n\nexport type QOrderMapOrdersOrders = FOrderMapOrderFragment\n\nexport type QOrderReturnZonesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QOrderReturnZonesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zones: ReadonlyArray<QOrderReturnZonesZones>\n}\n\nexport type QOrderReturnZonesZones = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly zoneColor: QOrderReturnZonesZoneColor\n\n  readonly zoneType: QOrderReturnZonesZoneType\n\n  readonly geoPolygon: ReadonlyArray<QOrderReturnZonesGeoPolygon>\n}\n\nexport type QOrderReturnZonesZoneColor = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly color: string\n}\n\nexport type QOrderReturnZonesZoneType = {\n  readonly __typename?: 'ZoneType'\n\n  readonly enum: ZoneTypeEnum\n}\n\nexport type QOrderReturnZonesGeoPolygon = FGeoPointFragment\n\nexport type QOrdersCategoryCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n  readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type QOrdersCategoryCountQuery = {\n  readonly __typename?: 'Query'\n\n  readonly ordersCategoryCount: ReadonlyArray<\n    QOrdersCategoryCountOrdersCategoryCount\n  >\n}\n\nexport type QOrdersCategoryCountOrdersCategoryCount = {\n  readonly __typename?: 'OrderStateCategoryCount'\n\n  readonly category: QOrdersCategoryCountCategory\n\n  readonly count: number\n}\n\nexport type QOrdersCategoryCountCategory = {\n  readonly __typename?: 'OrderStateCategory'\n\n  readonly enum: OrderStateCategoryEnum\n}\n\nexport type QOrderStateVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type QOrderStateQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderStateOrder\n\n  readonly companyBranch: QOrderStateCompanyBranch\n}\n\nexport type QOrderStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly deliveryType: Maybe<QOrderStateDeliveryType>\n\n  readonly isCancelable: boolean\n\n  readonly isPriority: boolean\n} & (FOrderPaymentMethodsFragment & FOrderStateCategoryFragment)\n\nexport type QOrderStateDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type QOrderStateCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowedCategories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type SDriverReturnsVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type SDriverReturnsSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly update: SDriverReturnsUpdate\n}\n\nexport type SDriverReturnsUpdate = {\n  readonly __typename?: 'TransportationDeviceUserUpdateSubscription'\n\n  readonly device: Maybe<SDriverReturnsDevice>\n}\n\nexport type SDriverReturnsDevice = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly id: string\n\n  readonly returning: boolean\n\n  readonly returnZone: Maybe<SDriverReturnsReturnZone>\n\n  readonly user: SDriverReturnsUser\n}\n\nexport type SDriverReturnsReturnZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type SDriverReturnsUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type SOrderCallVariables = {}\n\nexport type SOrderCallSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly call: SOrderCallCall\n}\n\nexport type SOrderCallCall = {\n  readonly __typename?: 'UserCallingCustomerSubscription'\n\n  readonly eventId: string\n\n  readonly phone: string\n\n  readonly prefix: string\n\n  readonly isRinging: boolean\n}\n\nexport type SOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SOrderListUpdatedOrder\n}\n\nexport type SOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SOrderListOrder>\n}\n\nexport type SOrderListOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (FOrderStateCategoryFragment & FOrderTickerFragment)\n\nexport type SOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type SOrderMapDeliveriesSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly update: SOrderMapDeliveriesUpdate\n}\n\nexport type SOrderMapDeliveriesUpdate = {\n  readonly __typename?: 'TransportationDeviceUserUpdateSubscription'\n\n  readonly device: Maybe<SOrderMapDeliveriesDevice>\n}\n\nexport type SOrderMapDeliveriesDevice = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly user: SOrderMapDeliveriesUser\n} & FOrderMapDeviceFragment\n\nexport type SOrderMapDeliveriesUser = FOrderMapDriverFragment\n\nexport type SOrderMapOrdersVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SOrderMapOrdersSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SOrderMapOrdersUpdatedOrder\n}\n\nexport type SOrderMapOrdersUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SOrderMapOrdersOrder>\n}\n\nexport type SOrderMapOrdersOrder = FOrderMapOrderFragment\n\nexport type SOrdersCategoryCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n  readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type SOrdersCategoryCountSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedCount: SOrdersCategoryCountUpdatedCount\n}\n\nexport type SOrdersCategoryCountUpdatedCount = {\n  readonly __typename?: 'OrderCategoryCountSubscription'\n\n  readonly order: SOrdersCategoryCountOrder\n\n  readonly nextCategory: OrderStateCategoryEnum\n\n  readonly prevCategory: OrderStateCategoryEnum\n}\n\nexport type SOrdersCategoryCountOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type MFinancialReportCreateVariables = {\n  readonly branchId: string\n}\n\nexport type MFinancialReportCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MFinancialReportCreateResult\n}\n\nexport type MFinancialReportCreateResult = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n}\n\nexport type QClosureHistoryVariables = {\n  readonly branchId: string\n  readonly dateFrom: Date\n  readonly dateTo: Date\n}\n\nexport type QClosureHistoryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly history: ReadonlyArray<QClosureHistoryHistory>\n}\n\nexport type QClosureHistoryHistory = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n\n  readonly reportDatetime: Date\n\n  readonly reportSequence: number\n}\n\nexport type QClosureReportVariables = {\n  readonly branchId: string\n  readonly reportId: string\n  readonly showReport: boolean\n}\n\nexport type QClosureReportQuery = {\n  readonly __typename?: 'Query'\n\n  readonly lastReport: QClosureReportLastReport\n\n  readonly report: Maybe<QClosureReportReport>\n}\n\nexport type QClosureReportLastReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: Date\n\n  readonly reportSequence: number\n}\n\nexport type QClosureReportReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: Date\n\n  readonly reportSequence: number\n}\n\nexport type QStatsOrdersVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsOrdersQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersStats\n}\n\nexport type QStatsOrdersStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly finishedOrders: QStatsOrdersFinishedOrders\n\n  readonly orderStatisticsPlain: string\n}\n\nexport type QStatsOrdersFinishedOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly fees: QStatsOrdersFees\n\n  readonly onlinePayments: QStatsOrdersOnlinePayments\n\n  readonly total: QStatsOrdersTotal\n\n  readonly finishedCount: number\n\n  readonly cancelledCount: number\n}\n\nexport type QStatsOrdersFees = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersOnlinePayments = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersTotal = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersCountsVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsOrdersCountsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersCountsStats\n}\n\nexport type QStatsOrdersCountsStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly counts: QStatsOrdersCountsCounts\n}\n\nexport type QStatsOrdersCountsCounts = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly finished: number\n\n  readonly cancelled: number\n}\n\nexport type QStatsOrdersListVariables = {\n  readonly filter: InputStatisticCreate\n  readonly pagination?: Maybe<InputPaginationParams>\n}\n\nexport type QStatsOrdersListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersListStats\n}\n\nexport type QStatsOrdersListStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly orders: QStatsOrdersListOrders\n}\n\nexport type QStatsOrdersListOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly list: ReadonlyArray<QStatsOrdersListList>\n}\n\nexport type QStatsOrdersListList = FOrderTickerFragment &\n  FOrderStateCategoryFragment\n\nexport type QStatsSalesVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsSalesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly sales: QStatsSalesSales\n}\n\nexport type QStatsSalesSales = {\n  readonly __typename?: 'Statistics'\n\n  readonly category: string\n\n  readonly daily: string\n\n  readonly delivery: string\n\n  readonly drivers: string\n\n  readonly vat: string\n\n  readonly deliveryZone: string\n}\n\nexport type MUserMenuLanguageVariables = {\n  readonly userId: string\n  readonly lang: LanguageEnum\n}\n\nexport type MUserMenuLanguageMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateUser: MUserMenuLanguageUpdateUser\n}\n\nexport type MUserMenuLanguageUpdateUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly language: MUserMenuLanguageLanguage\n}\n\nexport type MUserMenuLanguageLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly enum: LanguageEnum\n}\n\nexport type QUserMenuLanguagesVariables = {}\n\nexport type QUserMenuLanguagesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly languages: ReadonlyArray<QUserMenuLanguagesLanguages>\n}\n\nexport type QUserMenuLanguagesLanguages = {\n  readonly __typename?: 'Language'\n\n  readonly code: string\n\n  readonly enum: LanguageEnum\n\n  readonly rawCode: string\n}\n\nexport type MCreateTransfersVariables = {\n  readonly targetBranch: string\n  readonly transfers: ReadonlyArray<InputStockTransferCreate>\n}\n\nexport type MCreateTransfersMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createStockItemTransfers: ReadonlyArray<\n    MCreateTransfersCreateStockItemTransfers\n  >\n}\n\nexport type MCreateTransfersCreateStockItemTransfers = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly quantity: number\n}\n\nexport type QMenuStockDepositVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockDepositQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QMenuStockDepositStockItems>\n}\n\nexport type QMenuStockDepositStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly note: string\n\n  readonly quantity: number\n\n  readonly wareUnit: QMenuStockDepositWareUnit\n}\n\nexport type QMenuStockDepositWareUnit = FMenuWareUnitFragment\n\nexport type QStockForTransferVariables = {\n  readonly branchId: string\n}\n\nexport type QStockForTransferQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QStockForTransferStockItems>\n}\n\nexport type QStockForTransferStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly allowNegativeValue: boolean\n\n  readonly quantity: number\n\n  readonly wareUnit: QStockForTransferWareUnit\n}\n\nexport type QStockForTransferWareUnit = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type QStockStatsVariables = {\n  readonly brandId: string\n}\n\nexport type QStockStatsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QStockStatsStockItems>\n}\n\nexport type QStockStatsStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly companyBranch: QStockStatsCompanyBranch\n\n  readonly plu: Maybe<string>\n\n  readonly quantity: number\n\n  readonly nameLabel: string\n\n  readonly wareUnit: QStockStatsWareUnit\n}\n\nexport type QStockStatsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type QStockStatsWareUnit = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type MZoneCreateVariables = {\n  readonly branchId: string\n  readonly points?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n  readonly type: ZoneTypeEnum\n}\n\nexport type MZoneCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createZone: MZoneCreateCreateZone\n}\n\nexport type MZoneCreateCreateZone = FZoneFragment\n\nexport type MZoneDeleteVariables = {\n  readonly zoneId: string\n}\n\nexport type MZoneDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly deleteZone: MZoneDeleteDeleteZone\n}\n\nexport type MZoneDeleteDeleteZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n}\n\nexport type MZoneUpdateVariables = {\n  readonly zoneId: string\n  readonly update: InputZoneUpdate\n}\n\nexport type MZoneUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZone: MZoneUpdateUpdateZone\n}\n\nexport type MZoneUpdateUpdateZone = FZoneFragment\n\nexport type MZoneUpdatePriorityVariables = {\n  readonly zoneId: string\n  readonly offset: number\n}\n\nexport type MZoneUpdatePriorityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZonePriority: ReadonlyArray<\n    MZoneUpdatePriorityUpdateZonePriority\n  >\n}\n\nexport type MZoneUpdatePriorityUpdateZonePriority = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly priority: number\n}\n\nexport type QZoneColorsVariables = {}\n\nexport type QZoneColorsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zoneColors: ReadonlyArray<QZoneColorsZoneColors>\n}\n\nexport type QZoneColorsZoneColors = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type QZoneFormVariables = {\n  readonly zoneId: string\n}\n\nexport type QZoneFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zone: QZoneFormZone\n}\n\nexport type QZoneFormZone = FZoneInFormFragment\n\nexport type QZoneListVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QZoneListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zones: ReadonlyArray<QZoneListZones>\n}\n\nexport type QZoneListZones = FZoneInListFragment\n\nexport type FAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly state: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n}\n\nexport type FCompanyBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly address: FCompanyBranchAddress\n\n  readonly gps: FCompanyBranchGps\n\n  readonly brand: FCompanyBranchBrand\n\n  readonly defaultLanguage: LanguageEnum\n\n  readonly supportedLanguages: ReadonlyArray<LanguageEnum>\n}\n\nexport type FCompanyBranchAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<FCompanyBranchCountry>\n}\n\nexport type FCompanyBranchCountry = {\n  readonly __typename?: 'Country'\n\n  readonly phonePrefix: string\n}\n\nexport type FCompanyBranchGps = FGeoPointFragment\n\nexport type FCompanyBranchBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FCustomerFragment = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly defaultEmail: Maybe<FCustomerDefaultEmail>\n\n  readonly defaultPhone: Maybe<FCustomerDefaultPhone>\n}\n\nexport type FCustomerDefaultEmail = FEmailFragment\n\nexport type FCustomerDefaultPhone = FPhoneFragment\n\nexport type FDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n} & FUserNameFragment\n\nexport type FEmailFragment = {\n  readonly __typename?: 'Email'\n\n  readonly email: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FGeoPointFragment = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type FOrderStateCategoryFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type FPaymentMethodFragment = {\n  readonly __typename?: 'PaymentMethod'\n\n  readonly id: string\n\n  readonly description: Maybe<string>\n\n  readonly paymentType: FPaymentMethodPaymentType\n\n  readonly paymentGate: FPaymentMethodPaymentGate\n}\n\nexport type FPaymentMethodPaymentType = {\n  readonly __typename?: 'PaymentType'\n\n  readonly enum: PaymentTypeEnum\n}\n\nexport type FPaymentMethodPaymentGate = {\n  readonly __typename?: 'PaymentGate'\n\n  readonly enum: PaymentGateEnum\n\n  readonly code: string\n}\n\nexport type FPhoneFragment = {\n  readonly __typename?: 'Phone'\n\n  readonly phone: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n}\n\nexport type FPriceWithCurrencyFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly currency: FPriceWithCurrencyCurrency\n} & FPriceFragment\n\nexport type FPriceWithCurrencyCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FUserNameFragment = {\n  readonly __typename?: 'User'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type FRegularBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly weekDay: Maybe<FRegularBusinessHourWeekDay>\n}\n\nexport type FRegularBusinessHourWeekDay = {\n  readonly __typename?: 'WeekDay'\n\n  readonly enum: WeekDayEnum\n}\n\nexport type FSpecificBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly companyBranch: FSpecificBusinessHourCompanyBranch\n\n  readonly specificDate: Maybe<Date>\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n\n  readonly openAt: string\n\n  readonly closeAt: string\n}\n\nexport type FSpecificBusinessHourCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type FWeekdayFragment = {\n  readonly __typename?: 'WeekDay'\n\n  readonly enum: WeekDayEnum\n\n  readonly code: string\n}\n\nexport type FBranchPaymentMethodsFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly paymentMethods: ReadonlyArray<FBranchPaymentMethodsPaymentMethods>\n}\n\nexport type FBranchPaymentMethodsPaymentMethods = FPaymentMethodFragment\n\nexport type FCreateOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly items: ReadonlyArray<FCreateOrderItems>\n\n  readonly coverPrice: FCreateOrderCoverPrice\n\n  readonly transportFee: FCreateOrderTransportFee\n\n  readonly discounts: ReadonlyArray<FCreateOrderDiscounts>\n\n  readonly minimalOrderPrice: Maybe<FCreateOrderMinimalOrderPrice>\n\n  readonly totalDiscount: FCreateOrderTotalDiscount\n\n  readonly totalSum: FCreateOrderTotalSum\n}\n\nexport type FCreateOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly recipe: FCreateOrderRecipe\n\n  readonly priceWithSidedishes: FCreateOrderPriceWithSidedishes\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderSidedishes>\n} & FCreateOrderItemFragment\n\nexport type FCreateOrderRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly sidedishCount: number\n}\n\nexport type FCreateOrderPriceWithSidedishes = FPriceFragment\n\nexport type FCreateOrderSidedishes = FCreateOrderItemFragment\n\nexport type FCreateOrderCoverPrice = FPriceFragment\n\nexport type FCreateOrderTransportFee = FPriceFragment\n\nexport type FCreateOrderDiscounts = {\n  readonly __typename?: 'PriceWithDescription'\n\n  readonly code: string\n\n  readonly description: string\n\n  readonly price: FCreateOrderPrice\n}\n\nexport type FCreateOrderPrice = FPriceFragment\n\nexport type FCreateOrderMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type FCreateOrderTotalDiscount = FPriceFragment\n\nexport type FCreateOrderTotalSum = FPriceFragment\n\nexport type FCreateOrderItemFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly price: FCreateOrderItemPrice\n\n  readonly recipe: FCreateOrderItemRecipe\n}\n\nexport type FCreateOrderItemPrice = FPriceFragment\n\nexport type FCreateOrderItemRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FCreateOrderRecipeSidedishesFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly sidedishCategories: ReadonlyArray<\n    FCreateOrderRecipeSidedishesSidedishCategories\n  >\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderRecipeSidedishesSidedishes>\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly price: FCreateOrderRecipeSidedishesPrice\n}\n\nexport type FCreateOrderRecipeSidedishesPrice = FPriceFragment\n\nexport type FOrderCustomerFragment = {\n  readonly __typename?: 'CustomerInformation'\n\n  readonly email: string\n\n  readonly firstName: string\n\n  readonly lastName: string\n\n  readonly lastOrder: Maybe<FOrderCustomerLastOrder>\n\n  readonly locations: ReadonlyArray<FOrderCustomerLocations>\n}\n\nexport type FOrderCustomerLastOrder = {\n  readonly __typename?: 'Order'\n\n  readonly note: Maybe<string>\n}\n\nexport type FOrderCustomerLocations = FOrderCustomerLocationFragment\n\nexport type FOrderCustomerLocationFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly state: Maybe<string>\n\n  readonly gps: Maybe<FOrderCustomerLocationGps>\n}\n\nexport type FOrderCustomerLocationGps = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type FOrderMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly pictogram: Maybe<string>\n\n  readonly recipes: ReadonlyArray<FOrderMenuCategoryRecipes>\n\n  readonly color: Maybe<FOrderMenuCategoryColor>\n}\n\nexport type FOrderMenuCategoryRecipes = FOrderMenuRecipeFragment\n\nexport type FOrderMenuCategoryColor = {\n  readonly __typename?: 'WareCategoryColor'\n\n  readonly id: string\n\n  readonly color: string\n}\n\nexport type FOrderMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly price: FOrderMenuRecipePrice\n\n  readonly sidedishCount: number\n}\n\nexport type FOrderMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FOrderMenuRecipeCurrency\n}\n\nexport type FOrderMenuRecipeCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FCustomerScreenOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderNumber: Maybe<number>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n} & FOrderTimingFragment\n\nexport type FKitchenCompletionOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly cashBox: Maybe<FKitchenCompletionOrderCashBox>\n\n  readonly orderNumber: Maybe<number>\n\n  readonly orderOrigin: FKitchenCompletionOrderOrderOrigin\n\n  readonly sector: Maybe<FKitchenCompletionOrderSector>\n\n  readonly note: Maybe<string>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n} & FKitchenOrderBaseFragment\n\nexport type FKitchenCompletionOrderCashBox = {\n  readonly __typename?: 'CashBox'\n\n  readonly id: string\n}\n\nexport type FKitchenCompletionOrderOrderOrigin = {\n  readonly __typename?: 'OrderOrigin'\n\n  readonly code: string\n}\n\nexport type FKitchenCompletionOrderSector = {\n  readonly __typename?: 'Sector'\n\n  readonly name: string\n}\n\nexport type FKitchenOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly address: FKitchenOrderAddress\n\n  readonly customer: FKitchenOrderCustomer\n\n  readonly deliverAt: Maybe<Date>\n\n  readonly deliveredAt: Maybe<Date>\n\n  readonly delayedDeliveryTime: Maybe<Date>\n\n  readonly note: Maybe<string>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n\n  readonly sector: Maybe<FKitchenOrderSector>\n} & FKitchenOrderBaseFragment\n\nexport type FKitchenOrderAddress = FAddressFragment\n\nexport type FKitchenOrderCustomer = FCustomerFragment\n\nexport type FKitchenOrderSector = {\n  readonly __typename?: 'Sector'\n\n  readonly name: string\n}\n\nexport type FKitchenOrderBaseFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: Date\n\n  readonly deliverAt: Maybe<Date>\n\n  readonly deliveryType: Maybe<FKitchenOrderBaseDeliveryType>\n\n  readonly companyBranch: FKitchenOrderBaseCompanyBranch\n\n  readonly isPriority: boolean\n\n  readonly items: ReadonlyArray<FKitchenOrderBaseItems>\n}\n\nexport type FKitchenOrderBaseDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FKitchenOrderBaseCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FKitchenOrderBaseItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<FKitchenOrderBaseSidedishes>\n} & FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderBaseSidedishes = FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderRecipeFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FKitchenOrderRecipeRecipe\n} & FKitchenOrderStateFragment\n\nexport type FKitchenOrderRecipeRecipe = FKitchenRecipeFragment\n\nexport type FKitchenOrderStateFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly state: FKitchenOrderStateState\n}\n\nexport type FKitchenOrderStateState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type FKitchenRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly name: string\n}\n\nexport type FKitchenSectorRecipeFragment = {\n  readonly __typename?: 'SectorRecipe'\n\n  readonly id: string\n\n  readonly createdAt: Date\n\n  readonly recipe: FKitchenSectorRecipeRecipe\n\n  readonly sideDishes: ReadonlyArray<FKitchenSectorRecipeSideDishes>\n\n  readonly sector: FKitchenSectorRecipeSector\n} & FKitchenSectorStateFragment\n\nexport type FKitchenSectorRecipeRecipe = FKitchenRecipeFragment\n\nexport type FKitchenSectorRecipeSideDishes = {\n  readonly __typename?: 'SectorRecipe'\n\n  readonly id: string\n\n  readonly recipe: FKitchenSectorRecipe_Recipe\n}\n\nexport type FKitchenSectorRecipe_Recipe = FKitchenRecipeFragment\n\nexport type FKitchenSectorRecipeSector = {\n  readonly __typename?: 'Sector'\n\n  readonly id: string\n}\n\nexport type FKitchenSectorStateFragment = {\n  readonly __typename?: 'SectorRecipe'\n\n  readonly id: string\n\n  readonly state: FKitchenSectorStateState\n}\n\nexport type FKitchenSectorStateState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type FMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly visible: boolean\n\n  readonly categoryType: FMenuCategoryCategoryType\n\n  readonly origins: ReadonlyArray<OrderOriginCategoryEnum>\n}\n\nexport type FMenuCategoryCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuCategoryInFormFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly pictogram: Maybe<string>\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly recipes: ReadonlyArray<FMenuCategoryInFormRecipes>\n\n  readonly color: Maybe<FMenuCategoryInFormColor>\n} & (FMenuCategoryFragment & FMenuCategoryLocalizedFragment)\n\nexport type FMenuCategoryInFormRecipes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: Maybe<string>\n\n  readonly internalNote: Maybe<string>\n\n  readonly prices: ReadonlyArray<FMenuCategoryInFormPrices>\n}\n\nexport type FMenuCategoryInFormPrices = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly priceType: FMenuCategoryInFormPriceType\n\n  readonly price: FMenuCategoryInFormPrice\n}\n\nexport type FMenuCategoryInFormPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type FMenuCategoryInFormPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FMenuCategoryInFormCurrency\n}\n\nexport type FMenuCategoryInFormCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FMenuCategoryInFormColor = {\n  readonly __typename?: 'WareCategoryColor'\n\n  readonly id: string\n}\n\nexport type FMenuCategoryInListFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly countRecipes: number\n\n  readonly color: Maybe<FMenuCategoryInListColor>\n} & FMenuCategoryFragment\n\nexport type FMenuCategoryInListColor = {\n  readonly __typename?: 'WareCategoryColor'\n\n  readonly id: string\n\n  readonly color: string\n}\n\nexport type FMenuCategoryLocalizedFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly nameLabel: Maybe<string>\n\n  readonly internalNoteLabel: Maybe<string>\n}\n\nexport type FMenuAllergenFragment = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: AllergenEnum\n\n  readonly category: number\n}\n\nexport type FMenuWareUnitFragment = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly enum: WareUnitEnum\n\n  readonly code: string\n}\n\nexport type FMenuAssocRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n}\n\nexport type FMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly internalCode: string\n\n  readonly visible: boolean\n\n  readonly recipeType: FMenuRecipeRecipeType\n}\n\nexport type FMenuRecipeRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuRecipeInFormFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly image: Maybe<string>\n\n  readonly sideDishes: ReadonlyArray<FMenuRecipeInFormSideDishes>\n\n  readonly categories: ReadonlyArray<FMenuRecipeInFormCategories>\n} & (FMenuRecipeFragment & FMenuRecipeLocalizedFragment)\n\nexport type FMenuRecipeInFormSideDishes = FMenuCategoryInListFragment\n\nexport type FMenuRecipeInFormCategories = FMenuCategoryInListFragment\n\nexport type FMenuRecipeInListFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly availableAmount: number\n\n  readonly prices: ReadonlyArray<FMenuRecipeInListPrices>\n} & FMenuRecipeFragment\n\nexport type FMenuRecipeInListPrices = FMenuRecipePricingFragment\n\nexport type FMenuRecipeLocalizedFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly nameLabel: Maybe<string>\n\n  readonly descriptionLabel: Maybe<string>\n}\n\nexport type FMenuRecipePricingFragment = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: FMenuRecipePricingPriceType\n\n  readonly price: FMenuRecipePricingPrice\n\n  readonly vat: FMenuRecipePricingVat\n}\n\nexport type FMenuRecipePricingPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type FMenuRecipePricingPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FMenuRecipePricingCurrency\n}\n\nexport type FMenuRecipePricingCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FMenuRecipePricingVat = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n}\n\nexport type FMenuStockItemFragment = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly note: string\n\n  readonly plu: Maybe<string>\n\n  readonly quantity: number\n\n  readonly nameLabel: string\n\n  readonly allergens: ReadonlyArray<FMenuStockItemAllergens>\n\n  readonly wareUnit: FMenuStockItemWareUnit\n}\n\nexport type FMenuStockItemAllergens = FMenuAllergenFragment\n\nexport type FMenuStockItemWareUnit = FMenuWareUnitFragment\n\nexport type FOrderDetailWareFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FOrderDetailWareRecipe\n\n  readonly price: FOrderDetailWarePrice\n}\n\nexport type FOrderDetailWareRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FOrderDetailWarePrice = FPriceFragment\n\nexport type FOrderDriverFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly driver: Maybe<FOrderDriverDriver>\n}\n\nexport type FOrderDriverDriver = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly id: string\n\n  readonly user: FOrderDriverUser\n}\n\nexport type FOrderDriverUser = FDriverFragment\n\nexport type FOrderMapDeliveryFragment = {\n  readonly __typename?: 'User'\n\n  readonly device: Maybe<FOrderMapDeliveryDevice>\n} & FOrderMapDriverFragment\n\nexport type FOrderMapDeliveryDevice = FOrderMapDeviceFragment\n\nexport type FOrderMapDeviceFragment = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly id: string\n\n  readonly lastPosition: Maybe<FOrderMapDeviceLastPosition>\n\n  readonly isFinalized: boolean\n\n  readonly transportationDevice: FOrderMapDeviceTransportationDevice\n}\n\nexport type FOrderMapDeviceLastPosition = {\n  readonly __typename?: 'GeoPositionWithTimestamp'\n\n  readonly gps: FOrderMapDeviceGps\n\n  readonly timestamp: Date\n}\n\nexport type FOrderMapDeviceGps = FGeoPointFragment\n\nexport type FOrderMapDeviceTransportationDevice = {\n  readonly __typename?: 'TransportationDevice'\n\n  readonly deviceState: FOrderMapDeviceDeviceState\n}\n\nexport type FOrderMapDeviceDeviceState = {\n  readonly __typename?: 'DeviceState'\n\n  readonly enum: DeviceStateEnum\n}\n\nexport type FOrderMapDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n\n  readonly countUndeliveredOrders: number\n}\n\nexport type FOrderMapOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<Date>\n\n  readonly deliveryType: Maybe<FOrderMapOrderDeliveryType>\n\n  readonly delayedDeliveryTime: Maybe<Date>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n\n  readonly gps: Maybe<FOrderMapOrderGps>\n}\n\nexport type FOrderMapOrderDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FOrderMapOrderGps = FGeoPointFragment\n\nexport type FOrderPaymentMethodsFragment = {\n  readonly __typename?: 'Order'\n\n  readonly paymentMethods: ReadonlyArray<FOrderPaymentMethodsPaymentMethods>\n}\n\nexport type FOrderPaymentMethodsPaymentMethods = FPaymentMethodFragment\n\nexport type FOrderTickerFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: Date\n\n  readonly isPaidWithCard: boolean\n\n  readonly isPriority: boolean\n\n  readonly deliveryType: Maybe<FOrderTickerDeliveryType>\n\n  readonly deliverAt: Maybe<Date>\n\n  readonly deliverAtWorst: Maybe<Date>\n\n  readonly deliveredAt: Maybe<Date>\n\n  readonly delayedDeliveryTime: Maybe<Date>\n\n  readonly companyBranch: FOrderTickerCompanyBranch\n\n  readonly address: FOrderTickerAddress\n\n  readonly customer: FOrderTickerCustomer\n\n  readonly totalSum: FOrderTickerTotalSum\n\n  readonly sector: Maybe<FOrderTickerSector>\n}\n\nexport type FOrderTickerDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FOrderTickerCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly oldOrderThreshold: number\n}\n\nexport type FOrderTickerAddress = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly original: Maybe<string>\n} & FAddressFragment\n\nexport type FOrderTickerCustomer = FCustomerFragment\n\nexport type FOrderTickerTotalSum = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type FOrderTickerSector = {\n  readonly __typename?: 'Sector'\n\n  readonly name: string\n}\n\nexport type FOrderTimingFragment = {\n  readonly __typename?: 'Order'\n\n  readonly orderTiming: ReadonlyArray<FOrderTimingOrderTiming>\n}\n\nexport type FOrderTimingOrderTiming = {\n  readonly __typename?: 'OrderStateCategoryRelation'\n\n  readonly createdAt: Date\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type FOrderTotalsFragment = {\n  readonly __typename?: 'Order'\n\n  readonly totalSum: FOrderTotalsTotalSum\n\n  readonly transportFee: FOrderTotalsTransportFee\n\n  readonly coverPrice: FOrderTotalsCoverPrice\n\n  readonly totalDiscount: FOrderTotalsTotalDiscount\n\n  readonly tip: FOrderTotalsTip\n\n  readonly extraCharge: FOrderTotalsExtraCharge\n}\n\nexport type FOrderTotalsTotalSum = FPriceFragment\n\nexport type FOrderTotalsTransportFee = FPriceFragment\n\nexport type FOrderTotalsCoverPrice = FPriceFragment\n\nexport type FOrderTotalsTotalDiscount = FPriceFragment\n\nexport type FOrderTotalsTip = FPriceFragment\n\nexport type FOrderTotalsExtraCharge = FPriceFragment\n\nexport type FZoneFragment = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly enabled: boolean\n\n  readonly priority: number\n\n  readonly zoneColor: FZoneZoneColor\n\n  readonly zoneType: FZoneZoneType\n\n  readonly geoPolygon: ReadonlyArray<FZoneGeoPolygon>\n}\n\nexport type FZoneZoneColor = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type FZoneZoneType = {\n  readonly __typename?: 'ZoneType'\n\n  readonly enum: ZoneTypeEnum\n}\n\nexport type FZoneGeoPolygon = FGeoPointFragment\n\nexport type FZoneInFormFragment = {\n  readonly __typename?: 'Zone'\n\n  readonly enabled: boolean\n\n  readonly priceRangeRules: ReadonlyArray<FZoneInFormPriceRangeRules>\n\n  readonly minimalOrderPrice: FZoneInFormMinimalOrderPrice\n\n  readonly branchWithCurrency: FZoneInFormBranchWithCurrency\n} & FZoneFragment\n\nexport type FZoneInFormPriceRangeRules = FZonePriceRangeFragment\n\nexport type FZoneInFormMinimalOrderPrice = FPriceFragment\n\nexport type FZoneInFormBranchWithCurrency = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly currency: FZoneInFormCurrency\n}\n\nexport type FZoneInFormCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FZoneInListFragment = {\n  readonly __typename?: 'Zone'\n\n  readonly companyBranch: FZoneInListCompanyBranch\n} & FZoneFragment\n\nexport type FZoneInListCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly brand: FZoneInListBrand\n}\n\nexport type FZoneInListBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type FZonePriceRangeFragment = {\n  readonly __typename?: 'ZonePriceRangeRule'\n\n  readonly toPrice: FZonePriceRangeToPrice\n\n  readonly price: FZonePriceRangePrice\n}\n\nexport type FZonePriceRangeToPrice = FPriceFragment\n\nexport type FZonePriceRangePrice = FPriceFragment\n\nimport * as Hooks from '@speedlo/graphql/dist/hooks'\nimport gql from 'graphql-tag'\n\n// ====================================================\n// Fragments\n// ====================================================\n\nexport const FGeoPointFragmentDoc = gql`\n  fragment FGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const FCompanyBranchFragmentDoc = gql`\n  fragment FCompanyBranch on CompanyBranch {\n    id\n    name\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    gps {\n      ...FGeoPoint\n    }\n    brand {\n      id\n      name\n    }\n    defaultLanguage\n    supportedLanguages\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderStateCategoryFragmentDoc = gql`\n  fragment FOrderStateCategory on Order {\n    id\n    orderStateCategory\n  }\n`\n\nexport const FPriceFragmentDoc = gql`\n  fragment FPrice on PriceConverted {\n    value\n  }\n`\n\nexport const FPriceWithCurrencyFragmentDoc = gql`\n  fragment FPriceWithCurrency on PriceConverted {\n    ...FPrice\n    currency {\n      code\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FRegularBusinessHourFragmentDoc = gql`\n  fragment FRegularBusinessHour on BusinessHour {\n    id\n    openAt\n    closeAt\n    weekDay {\n      enum\n    }\n  }\n`\n\nexport const FSpecificBusinessHourFragmentDoc = gql`\n  fragment FSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const FWeekdayFragmentDoc = gql`\n  fragment FWeekday on WeekDay {\n    enum\n    code\n  }\n`\n\nexport const FPaymentMethodFragmentDoc = gql`\n  fragment FPaymentMethod on PaymentMethod {\n    id\n    description\n    paymentType {\n      enum\n    }\n    paymentGate {\n      enum\n      code\n    }\n  }\n`\n\nexport const FBranchPaymentMethodsFragmentDoc = gql`\n  fragment FBranchPaymentMethods on CompanyBranch {\n    paymentMethods: canBeUpdatedToPaymentMethods {\n      ...FPaymentMethod\n    }\n  }\n\n  ${FPaymentMethodFragmentDoc}\n`\n\nexport const FCreateOrderItemFragmentDoc = gql`\n  fragment FCreateOrderItem on OrderRecipe {\n    id\n    price {\n      ...FPrice\n    }\n    recipe {\n      id\n      code\n      nameLabel\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderFragmentDoc = gql`\n  fragment FCreateOrder on Order {\n    id\n    countWares\n    items {\n      ...FCreateOrderItem\n      recipe {\n        sidedishCount: sideDishesWareCategoriesCount\n      }\n      priceWithSidedishes: priceWithSideDishes {\n        ...FPrice\n      }\n      sidedishes: sideDishes {\n        ...FCreateOrderItem\n      }\n    }\n    coverPrice {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...FPrice\n      }\n    }\n    minimalOrderPrice {\n      formattedValue\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    totalSum {\n      ...FPrice\n    }\n  }\n\n  ${FCreateOrderItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderRecipeSidedishesFragmentDoc = gql`\n  fragment FCreateOrderRecipeSidedishes on Recipe {\n    id\n    nameLabel\n    sidedishCategories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sidedishes: recipes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderCustomerLocationFragmentDoc = gql`\n  fragment FOrderCustomerLocation on JsonAddress {\n    street\n    houseNumber\n    city\n    state\n    gps {\n      latitude\n      longitude\n    }\n  }\n`\n\nexport const FOrderCustomerFragmentDoc = gql`\n  fragment FOrderCustomer on CustomerInformation {\n    email\n    firstName\n    lastName\n    lastOrder {\n      note\n    }\n    locations {\n      ...FOrderCustomerLocation\n    }\n  }\n\n  ${FOrderCustomerLocationFragmentDoc}\n`\n\nexport const FOrderMenuRecipeFragmentDoc = gql`\n  fragment FOrderMenuRecipe on Recipe {\n    id\n    code\n    nameLabel\n    descriptionLabel\n    price(warePriceType: DELIVERY) {\n      value\n      currency {\n        code\n      }\n    }\n    sidedishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const FOrderMenuCategoryFragmentDoc = gql`\n  fragment FOrderMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n    recipes(enabled: true, isAvailable: true) {\n      ...FOrderMenuRecipe\n    }\n    color: wareCategoryColor {\n      id\n      color\n    }\n  }\n\n  ${FOrderMenuRecipeFragmentDoc}\n`\n\nexport const FOrderTimingFragmentDoc = gql`\n  fragment FOrderTiming on Order {\n    orderTiming: orderStateCategoryRelations {\n      createdAt\n      orderStateCategory\n    }\n  }\n`\n\nexport const FCustomerScreenOrderFragmentDoc = gql`\n  fragment FCustomerScreenOrder on Order {\n    id\n    orderNumber: invoiceSequenceResettable\n    orderStateCategory(target: FE_COMPLETION)\n    ...FOrderTiming\n  }\n\n  ${FOrderTimingFragmentDoc}\n`\n\nexport const FKitchenRecipeFragmentDoc = gql`\n  fragment FKitchenRecipe on Recipe {\n    id\n    code\n    name: nameLabel\n  }\n`\n\nexport const FKitchenOrderStateFragmentDoc = gql`\n  fragment FKitchenOrderState on OrderRecipe {\n    id\n    state: orderRecipeState {\n      enum\n    }\n  }\n`\n\nexport const FKitchenOrderRecipeFragmentDoc = gql`\n  fragment FKitchenOrderRecipe on OrderRecipe {\n    id\n    recipe {\n      ...FKitchenRecipe\n    }\n    ...FKitchenOrderState\n  }\n\n  ${FKitchenRecipeFragmentDoc}\n  ${FKitchenOrderStateFragmentDoc}\n`\n\nexport const FKitchenOrderBaseFragmentDoc = gql`\n  fragment FKitchenOrderBase on Order {\n    id\n    createdAt\n    deliverAt\n    deliveryType {\n      enum\n    }\n    companyBranch {\n      id\n      name\n    }\n    isPriority\n    items {\n      ...FKitchenOrderRecipe\n      sidedishes: sideDishes {\n        ...FKitchenOrderRecipe\n      }\n    }\n  }\n\n  ${FKitchenOrderRecipeFragmentDoc}\n`\n\nexport const FKitchenCompletionOrderFragmentDoc = gql`\n  fragment FKitchenCompletionOrder on Order {\n    ...FKitchenOrderBase\n    cashBox {\n      id\n    }\n    orderNumber: invoiceSequenceResettable\n    orderOrigin {\n      code\n    }\n    sector {\n      name\n    }\n    note\n    orderStateCategory(target: FE_COMPLETION)\n  }\n\n  ${FKitchenOrderBaseFragmentDoc}\n`\n\nexport const FAddressFragmentDoc = gql`\n  fragment FAddress on JsonAddress {\n    state\n    city\n    street\n    houseNumber\n  }\n`\n\nexport const FEmailFragmentDoc = gql`\n  fragment FEmail on Email {\n    email\n    description\n    default\n  }\n`\n\nexport const FPhoneFragmentDoc = gql`\n  fragment FPhone on Phone {\n    phone\n    description\n    default\n  }\n`\n\nexport const FCustomerFragmentDoc = gql`\n  fragment FCustomer on JsonCustomer {\n    firstName\n    lastName\n    defaultEmail {\n      ...FEmail\n    }\n    defaultPhone {\n      ...FPhone\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n`\n\nexport const FKitchenOrderFragmentDoc = gql`\n  fragment FKitchenOrder on Order {\n    ...FKitchenOrderBase\n    address {\n      ...FAddress\n    }\n    customer {\n      ...FCustomer\n    }\n    deliverAt\n    deliveredAt\n    delayedDeliveryTime\n    note\n    orderStateCategory(target: FE_KITCHEN)\n    sector {\n      name\n    }\n  }\n\n  ${FKitchenOrderBaseFragmentDoc}\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n`\n\nexport const FKitchenSectorStateFragmentDoc = gql`\n  fragment FKitchenSectorState on SectorRecipe {\n    id\n    state: orderRecipeState {\n      enum\n    }\n  }\n`\n\nexport const FKitchenSectorRecipeFragmentDoc = gql`\n  fragment FKitchenSectorRecipe on SectorRecipe {\n    id\n    createdAt\n    recipe {\n      ...FKitchenRecipe\n    }\n    sideDishes {\n      id\n      recipe {\n        ...FKitchenRecipe\n      }\n    }\n    sector {\n      id\n    }\n    ...FKitchenSectorState\n  }\n\n  ${FKitchenRecipeFragmentDoc}\n  ${FKitchenSectorStateFragmentDoc}\n`\n\nexport const FMenuCategoryFragmentDoc = gql`\n  fragment FMenuCategory on WareCategory {\n    id\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    origins: orderOriginCategories\n  }\n`\n\nexport const FMenuCategoryLocalizedFragmentDoc = gql`\n  fragment FMenuCategoryLocalized on WareCategory {\n    nameLabel: nameLabelTranslated\n    internalNoteLabel: internalNoteLabelTranslated\n  }\n`\n\nexport const FMenuCategoryInFormFragmentDoc = gql`\n  fragment FMenuCategoryInForm on WareCategory {\n    ...FMenuCategory\n    ...FMenuCategoryLocalized\n    pictogram\n    minCount\n    maxCount\n    recipes {\n      id\n      code\n      nameLabel: nameLabelTranslated\n      internalNote\n      prices {\n        priceType: warePriceType {\n          enum\n        }\n        price {\n          value\n          currency {\n            code\n          }\n        }\n      }\n    }\n    color: wareCategoryColor {\n      id\n    }\n  }\n\n  ${FMenuCategoryFragmentDoc}\n  ${FMenuCategoryLocalizedFragmentDoc}\n`\n\nexport const FMenuAssocRecipeFragmentDoc = gql`\n  fragment FMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const FMenuRecipeFragmentDoc = gql`\n  fragment FMenuRecipe on Recipe {\n    id\n    code\n    internalNote\n    internalCode\n    visible: enabled\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n`\n\nexport const FMenuRecipeLocalizedFragmentDoc = gql`\n  fragment FMenuRecipeLocalized on Recipe {\n    nameLabel: nameLabelTranslated\n    descriptionLabel: descriptionLabelTranslated\n  }\n`\n\nexport const FMenuCategoryInListFragmentDoc = gql`\n  fragment FMenuCategoryInList on WareCategory {\n    ...FMenuCategory\n    nameLabel\n    internalNoteLabel\n    countRecipes\n    color: wareCategoryColor {\n      id\n      color\n    }\n  }\n\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport const FMenuRecipeInFormFragmentDoc = gql`\n  fragment FMenuRecipeInForm on Recipe {\n    ...FMenuRecipe\n    ...FMenuRecipeLocalized\n    image\n    sideDishes: sideDishesWareCategories {\n      ...FMenuCategoryInList\n    }\n    categories: wareCategories {\n      ...FMenuCategoryInList\n    }\n  }\n\n  ${FMenuRecipeFragmentDoc}\n  ${FMenuRecipeLocalizedFragmentDoc}\n  ${FMenuCategoryInListFragmentDoc}\n`\n\nexport const FMenuRecipePricingFragmentDoc = gql`\n  fragment FMenuRecipePricing on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      value\n      currency {\n        code\n      }\n    }\n    vat {\n      id\n    }\n  }\n`\n\nexport const FMenuRecipeInListFragmentDoc = gql`\n  fragment FMenuRecipeInList on Recipe {\n    ...FMenuRecipe\n    nameLabel\n    descriptionLabel\n    availableAmount\n    prices {\n      ...FMenuRecipePricing\n    }\n  }\n\n  ${FMenuRecipeFragmentDoc}\n  ${FMenuRecipePricingFragmentDoc}\n`\n\nexport const FMenuAllergenFragmentDoc = gql`\n  fragment FMenuAllergen on Allergen {\n    id\n    code\n    enum\n    category\n  }\n`\n\nexport const FMenuWareUnitFragmentDoc = gql`\n  fragment FMenuWareUnit on WareUnit {\n    id\n    enum\n    code\n  }\n`\n\nexport const FMenuStockItemFragmentDoc = gql`\n  fragment FMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...FMenuAllergen\n    }\n    wareUnit {\n      ...FMenuWareUnit\n    }\n  }\n\n  ${FMenuAllergenFragmentDoc}\n  ${FMenuWareUnitFragmentDoc}\n`\n\nexport const FOrderDetailWareFragmentDoc = gql`\n  fragment FOrderDetailWare on OrderRecipe {\n    id\n    recipe {\n      id\n      code\n      nameLabel\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FUserNameFragmentDoc = gql`\n  fragment FUserName on User {\n    firstName\n    lastName\n  }\n`\n\nexport const FDriverFragmentDoc = gql`\n  fragment FDriver on User {\n    id\n    initials\n    ...FUserName\n  }\n\n  ${FUserNameFragmentDoc}\n`\n\nexport const FOrderDriverFragmentDoc = gql`\n  fragment FOrderDriver on Order {\n    id\n    driver: userDeliveringOrder {\n      id\n      user {\n        ...FDriver\n      }\n    }\n  }\n\n  ${FDriverFragmentDoc}\n`\n\nexport const FOrderMapDriverFragmentDoc = gql`\n  fragment FOrderMapDriver on User {\n    id\n    initials\n    countUndeliveredOrders\n  }\n`\n\nexport const FOrderMapDeviceFragmentDoc = gql`\n  fragment FOrderMapDevice on TransportationDeviceUser {\n    id\n    lastPosition {\n      gps: geoPosition {\n        ...FGeoPoint\n      }\n      timestamp\n    }\n    isFinalized\n    transportationDevice {\n      deviceState {\n        enum\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderMapDeliveryFragmentDoc = gql`\n  fragment FOrderMapDelivery on User {\n    ...FOrderMapDriver\n    device: usedTransportationDevice {\n      ...FOrderMapDevice\n    }\n  }\n\n  ${FOrderMapDriverFragmentDoc}\n  ${FOrderMapDeviceFragmentDoc}\n`\n\nexport const FOrderMapOrderFragmentDoc = gql`\n  fragment FOrderMapOrder on Order {\n    id\n    deliverAt\n    deliveryType {\n      enum\n    }\n    delayedDeliveryTime\n    orderStateCategory\n    gps {\n      ...FGeoPoint\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderPaymentMethodsFragmentDoc = gql`\n  fragment FOrderPaymentMethods on Order {\n    paymentMethods: canBeUpdatedToPaymentMethods {\n      ...FPaymentMethod\n    }\n  }\n\n  ${FPaymentMethodFragmentDoc}\n`\n\nexport const FOrderTickerFragmentDoc = gql`\n  fragment FOrderTicker on Order {\n    id\n    createdAt\n    isPaidWithCard\n    isPriority\n    deliveryType {\n      enum\n    }\n    deliverAt\n    deliverAtWorst\n    deliveredAt\n    delayedDeliveryTime\n    companyBranch {\n      id\n      name\n      oldOrderThreshold\n    }\n    address {\n      ...FAddress\n      original\n    }\n    customer {\n      ...FCustomer\n    }\n    totalSum {\n      formattedValue\n    }\n    sector {\n      name\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n`\n\nexport const FOrderTotalsFragmentDoc = gql`\n  fragment FOrderTotals on Order {\n    totalSum {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    coverPrice {\n      ...FPrice\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    tip {\n      ...FPrice\n    }\n    extraCharge {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FZoneFragmentDoc = gql`\n  fragment FZone on Zone {\n    id\n    name\n    enabled\n    priority\n    zoneColor {\n      id\n      code\n      color\n    }\n    zoneType {\n      enum\n    }\n    geoPolygon {\n      ...FGeoPoint\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FZonePriceRangeFragmentDoc = gql`\n  fragment FZonePriceRange on ZonePriceRangeRule {\n    toPrice {\n      ...FPrice\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FZoneInFormFragmentDoc = gql`\n  fragment FZoneInForm on Zone {\n    ...FZone\n    enabled\n    priceRangeRules {\n      ...FZonePriceRange\n    }\n    minimalOrderPrice {\n      ...FPrice\n    }\n    branchWithCurrency: companyBranch {\n      id\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n\n  ${FZoneFragmentDoc}\n  ${FZonePriceRangeFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FZoneInListFragmentDoc = gql`\n  fragment FZoneInList on Zone {\n    ...FZone\n    companyBranch {\n      id\n      brand {\n        id\n      }\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\n// ====================================================\n// Hooks\n// ====================================================\n\nexport const QAddressSuggestDocument = gql`\n  query QAddressSuggest($search: String!) {\n    suggest: suggestGeolocation(address: $search) {\n      ...FAddress\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useQAddressSuggest(\n  variables?: QAddressSuggestVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QAddressSuggestQuery,\n    QAddressSuggestVariables\n  >,\n) {\n  return Hooks.useQuery<QAddressSuggestQuery, QAddressSuggestVariables>(\n    QAddressSuggestDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQAddressSuggest(\n  options?: Hooks.LazyQueryHookOptions<\n    QAddressSuggestQuery,\n    QAddressSuggestVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QAddressSuggestQuery, QAddressSuggestVariables>(\n    QAddressSuggestDocument,\n    options,\n  )\n}\n\nexport const QFilterCashboxesDocument = gql`\n  query QFilterCashboxes($branches: [ID!]) {\n    cashBoxes(companyBranches: $branches) {\n      id\n      name\n      uuid\n    }\n  }\n`\n\nexport function useQFilterCashboxes(\n  variables?: QFilterCashboxesVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QFilterCashboxesQuery,\n    QFilterCashboxesVariables\n  >,\n) {\n  return Hooks.useQuery<QFilterCashboxesQuery, QFilterCashboxesVariables>(\n    QFilterCashboxesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQFilterCashboxes(\n  options?: Hooks.LazyQueryHookOptions<\n    QFilterCashboxesQuery,\n    QFilterCashboxesVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QFilterCashboxesQuery, QFilterCashboxesVariables>(\n    QFilterCashboxesDocument,\n    options,\n  )\n}\n\nexport const QFilterCashiersDocument = gql`\n  query QFilterCashiers($branches: [ID!]) {\n    cashiers(companyBranches: $branches) {\n      id\n      firstName\n      lastName\n    }\n  }\n`\n\nexport function useQFilterCashiers(\n  variables?: QFilterCashiersVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QFilterCashiersQuery,\n    QFilterCashiersVariables\n  >,\n) {\n  return Hooks.useQuery<QFilterCashiersQuery, QFilterCashiersVariables>(\n    QFilterCashiersDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQFilterCashiers(\n  options?: Hooks.LazyQueryHookOptions<\n    QFilterCashiersQuery,\n    QFilterCashiersVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QFilterCashiersQuery, QFilterCashiersVariables>(\n    QFilterCashiersDocument,\n    options,\n  )\n}\n\nexport const QFilterCountriesDocument = gql`\n  query QFilterCountries {\n    countries {\n      id\n      code\n      enum\n    }\n  }\n`\n\nexport function useQFilterCountries(\n  variables?: QFilterCountriesVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QFilterCountriesQuery,\n    QFilterCountriesVariables\n  >,\n) {\n  return Hooks.useQuery<QFilterCountriesQuery, QFilterCountriesVariables>(\n    QFilterCountriesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQFilterCountries(\n  options?: Hooks.LazyQueryHookOptions<\n    QFilterCountriesQuery,\n    QFilterCountriesVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QFilterCountriesQuery, QFilterCountriesVariables>(\n    QFilterCountriesDocument,\n    options,\n  )\n}\n\nexport const QFilterDriversDocument = gql`\n  query QFilterDrivers($branches: [ID!]!) {\n    drivers(companyBranches: $branches, onlyAvailable: false) {\n      ...FDriver\n    }\n  }\n\n  ${FDriverFragmentDoc}\n`\n\nexport function useQFilterDrivers(\n  variables?: QFilterDriversVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QFilterDriversQuery,\n    QFilterDriversVariables\n  >,\n) {\n  return Hooks.useQuery<QFilterDriversQuery, QFilterDriversVariables>(\n    QFilterDriversDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQFilterDrivers(\n  options?: Hooks.LazyQueryHookOptions<\n    QFilterDriversQuery,\n    QFilterDriversVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QFilterDriversQuery, QFilterDriversVariables>(\n    QFilterDriversDocument,\n    options,\n  )\n}\n\nexport const QFilterOccasionsDocument = gql`\n  query QFilterOccasions($branches: [ID!]!) {\n    occasions(\n      companyBranches: $branches\n      future: false\n      activePreorder: false\n    ) {\n      id\n      title\n    }\n  }\n`\n\nexport function useQFilterOccasions(\n  variables?: QFilterOccasionsVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QFilterOccasionsQuery,\n    QFilterOccasionsVariables\n  >,\n) {\n  return Hooks.useQuery<QFilterOccasionsQuery, QFilterOccasionsVariables>(\n    QFilterOccasionsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQFilterOccasions(\n  options?: Hooks.LazyQueryHookOptions<\n    QFilterOccasionsQuery,\n    QFilterOccasionsVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QFilterOccasionsQuery, QFilterOccasionsVariables>(\n    QFilterOccasionsDocument,\n    options,\n  )\n}\n\nexport const QFilterOriginsDocument = gql`\n  query QFilterOrigins {\n    origins: orderOrigins {\n      code\n      enum\n    }\n  }\n`\n\nexport function useQFilterOrigins(\n  variables?: QFilterOriginsVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QFilterOriginsQuery,\n    QFilterOriginsVariables\n  >,\n) {\n  return Hooks.useQuery<QFilterOriginsQuery, QFilterOriginsVariables>(\n    QFilterOriginsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQFilterOrigins(\n  options?: Hooks.LazyQueryHookOptions<\n    QFilterOriginsQuery,\n    QFilterOriginsVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QFilterOriginsQuery, QFilterOriginsVariables>(\n    QFilterOriginsDocument,\n    options,\n  )\n}\n\nexport const QFilterSectorsDocument = gql`\n  query QFilterSectors($branches: [ID!]!) {\n    sectors(companyBranches: $branches, enabled: true) {\n      id\n      code\n      name\n      parent {\n        id\n      }\n      companyBranch {\n        id\n      }\n    }\n  }\n`\n\nexport function useQFilterSectors(\n  variables?: QFilterSectorsVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QFilterSectorsQuery,\n    QFilterSectorsVariables\n  >,\n) {\n  return Hooks.useQuery<QFilterSectorsQuery, QFilterSectorsVariables>(\n    QFilterSectorsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQFilterSectors(\n  options?: Hooks.LazyQueryHookOptions<\n    QFilterSectorsQuery,\n    QFilterSectorsVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QFilterSectorsQuery, QFilterSectorsVariables>(\n    QFilterSectorsDocument,\n    options,\n  )\n}\n\nexport const MOrderStateDocument = gql`\n  mutation MOrderState($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...FOrderStateCategory\n      ...FOrderTiming\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTimingFragmentDoc}\n`\n\nexport function useMOrderState(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderStateMutation,\n    MOrderStateVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderStateMutation, MOrderStateVariables>(\n    MOrderStateDocument,\n    baseOptions,\n  )\n}\n\nexport const MSetPriorityOrderDocument = gql`\n  mutation MSetPriorityOrder($orderId: ID!, $isPriority: Boolean!) {\n    setPriorityOrder(order: $orderId, isPriority: $isPriority) {\n      id\n      isPriority\n    }\n  }\n`\n\nexport function useMSetPriorityOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSetPriorityOrderMutation,\n    MSetPriorityOrderVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSetPriorityOrderMutation,\n    MSetPriorityOrderVariables\n  >(MSetPriorityOrderDocument, baseOptions)\n}\n\nexport const QLogoutWidgetDocument = gql`\n  query QLogoutWidget($id: ID!) {\n    user(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n`\n\nexport function useQLogoutWidget(\n  variables?: QLogoutWidgetVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QLogoutWidgetQuery,\n    QLogoutWidgetVariables\n  >,\n) {\n  return Hooks.useQuery<QLogoutWidgetQuery, QLogoutWidgetVariables>(\n    QLogoutWidgetDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQLogoutWidget(\n  options?: Hooks.LazyQueryHookOptions<\n    QLogoutWidgetQuery,\n    QLogoutWidgetVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QLogoutWidgetQuery, QLogoutWidgetVariables>(\n    QLogoutWidgetDocument,\n    options,\n  )\n}\n\nexport const MBusinessHoursSubmitDocument = gql`\n  mutation MBusinessHoursSubmit(\n    $branchId: ID!\n    $hours: [InputBusinessHourCreate!]!\n  ) {\n    createBusinessHours(companyBranch: $branchId, businessHours: $hours) {\n      ...FRegularBusinessHour\n    }\n  }\n\n  ${FRegularBusinessHourFragmentDoc}\n`\n\nexport function useMBusinessHoursSubmit(\n  baseOptions?: Hooks.MutationHookOptions<\n    MBusinessHoursSubmitMutation,\n    MBusinessHoursSubmitVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MBusinessHoursSubmitMutation,\n    MBusinessHoursSubmitVariables\n  >(MBusinessHoursSubmitDocument, baseOptions)\n}\n\nexport const MSpecificBusinessHourCreateDocument = gql`\n  mutation MSpecificBusinessHourCreate(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...FSpecificBusinessHour\n    }\n  }\n\n  ${FSpecificBusinessHourFragmentDoc}\n`\n\nexport function useMSpecificBusinessHourCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSpecificBusinessHourCreateMutation,\n    MSpecificBusinessHourCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSpecificBusinessHourCreateMutation,\n    MSpecificBusinessHourCreateVariables\n  >(MSpecificBusinessHourCreateDocument, baseOptions)\n}\n\nexport const MSpecificBusinessHourDeleteDocument = gql`\n  mutation MSpecificBusinessHourDelete($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n\nexport function useMSpecificBusinessHourDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSpecificBusinessHourDeleteMutation,\n    MSpecificBusinessHourDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSpecificBusinessHourDeleteMutation,\n    MSpecificBusinessHourDeleteVariables\n  >(MSpecificBusinessHourDeleteDocument, baseOptions)\n}\n\nexport const QRegularBusinessHoursDocument = gql`\n  query QRegularBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId) {\n      ...FRegularBusinessHour\n    }\n    weekDays {\n      ...FWeekday\n    }\n  }\n\n  ${FRegularBusinessHourFragmentDoc}\n  ${FWeekdayFragmentDoc}\n`\n\nexport function useQRegularBusinessHours(\n  variables?: QRegularBusinessHoursVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QRegularBusinessHoursQuery,\n    QRegularBusinessHoursVariables\n  >,\n) {\n  return Hooks.useQuery<\n    QRegularBusinessHoursQuery,\n    QRegularBusinessHoursVariables\n  >(QRegularBusinessHoursDocument, variables, baseOptions)\n}\n\nexport function useLazyQRegularBusinessHours(\n  options?: Hooks.LazyQueryHookOptions<\n    QRegularBusinessHoursQuery,\n    QRegularBusinessHoursVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QRegularBusinessHoursQuery,\n    QRegularBusinessHoursVariables\n  >(QRegularBusinessHoursDocument, options)\n}\n\nexport const QSpecificBusinessHoursDocument = gql`\n  query QSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...FSpecificBusinessHour\n    }\n  }\n\n  ${FSpecificBusinessHourFragmentDoc}\n`\n\nexport function useQSpecificBusinessHours(\n  variables?: QSpecificBusinessHoursVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QSpecificBusinessHoursQuery,\n    QSpecificBusinessHoursVariables\n  >,\n) {\n  return Hooks.useQuery<\n    QSpecificBusinessHoursQuery,\n    QSpecificBusinessHoursVariables\n  >(QSpecificBusinessHoursDocument, variables, baseOptions)\n}\n\nexport function useLazyQSpecificBusinessHours(\n  options?: Hooks.LazyQueryHookOptions<\n    QSpecificBusinessHoursQuery,\n    QSpecificBusinessHoursVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QSpecificBusinessHoursQuery,\n    QSpecificBusinessHoursVariables\n  >(QSpecificBusinessHoursDocument, options)\n}\n\nexport const MAddOrderPromoDocument = gql`\n  mutation MAddOrderPromo($orderId: ID!, $code: String!) {\n    addOrderPromoCode(order: $orderId, promoCode: $code) {\n      userErrors: errors\n      order {\n        ...FCreateOrder\n      }\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMAddOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddOrderPromoMutation,\n    MAddOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<MAddOrderPromoMutation, MAddOrderPromoVariables>(\n    MAddOrderPromoDocument,\n    baseOptions,\n  )\n}\n\nexport const MAddToSectorDocument = gql`\n  mutation MAddToSector($sectorId: ID!, $recipeId: ID!, $sideDishes: [ID!]) {\n    createSectorRecipe(\n      sectorRecipe: {\n        sector: $sectorId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      id\n    }\n  }\n`\n\nexport function useMAddToSector(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddToSectorMutation,\n    MAddToSectorVariables\n  >,\n) {\n  return Hooks.useMutation<MAddToSectorMutation, MAddToSectorVariables>(\n    MAddToSectorDocument,\n    baseOptions,\n  )\n}\n\nexport const MCancelOrderDocument = gql`\n  mutation MCancelOrder($orderId: ID!) {\n    addOrderState(order: $orderId, orderState: CANCELED) {\n      id\n      ...FOrderStateCategory\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useMCancelOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCancelOrderMutation,\n    MCancelOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MCancelOrderMutation, MCancelOrderVariables>(\n    MCancelOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderAcceptDocument = gql`\n  mutation MCreateOrderAccept(\n    $orderId: ID!\n    $customer: InputCustomerCreate!\n    $deliverAt: DateTime\n    $note: String\n    $paymentType: PaymentTypeEnum\n    $paymentGate: PaymentGateEnum\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        customer: $customer\n        note: $note\n        deliverAt: $deliverAt\n        paymentMethod: $paymentType\n        paymentGate: $paymentGate\n      }\n    ) {\n      userErrors\n      order {\n        ...FCreateOrder\n      }\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderAccept(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >(MCreateOrderAcceptDocument, baseOptions)\n}\n\nexport const MCreateOrderAddRecipeDocument = gql`\n  mutation MCreateOrderAddRecipe(\n    $orderId: ID!\n    $recipeId: ID!\n    $sidedishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sidedishes\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderAddRecipe(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >(MCreateOrderAddRecipeDocument, baseOptions)\n}\n\nexport const MCreateOrderNewDocument = gql`\n  mutation MCreateOrderNew(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $callEventId: ID\n  ) {\n    createOrder(\n      order: {\n        companyBranch: $branchId\n        deliveryType: $deliveryType\n        callEventId: $callEventId\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: {}\n        warePriceType: DELIVERY\n        orderOrigin: STAFF\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderNew(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderNewMutation,\n    MCreateOrderNewVariables\n  >,\n) {\n  return Hooks.useMutation<MCreateOrderNewMutation, MCreateOrderNewVariables>(\n    MCreateOrderNewDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderRemoveItemDocument = gql`\n  mutation MCreateOrderRemoveItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderRemoveItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >(MCreateOrderRemoveItemDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateDocument = gql`\n  mutation MCreateOrderUpdate(\n    $orderId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $customer: InputCustomerCreate\n  ) {\n    updateOrder(\n      id: $orderId\n      order: {\n        deliveryType: $deliveryType\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: $customer\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >(MCreateOrderUpdateDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateItemDocument = gql`\n  mutation MCreateOrderUpdateItem($itemId: ID!, $sidedishes: [ID!]) {\n    updateOrderRecipe(id: $itemId, orderRecipe: { sideDishes: $sidedishes }) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderUpdateItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >(MCreateOrderUpdateItemDocument, baseOptions)\n}\n\nexport const MRemoveOrderPromoDocument = gql`\n  mutation MRemoveOrderPromo($orderId: ID!, $codeId: ID!) {\n    removeOrderPromoCode(order: $orderId, promoCode: $codeId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMRemoveOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >(MRemoveOrderPromoDocument, baseOptions)\n}\n\nexport const QBranchPaymentMethodsDocument = gql`\n  query QBranchPaymentMethods($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      ...FBranchPaymentMethods\n    }\n  }\n\n  ${FBranchPaymentMethodsFragmentDoc}\n`\n\nexport function useQBranchPaymentMethods(\n  variables?: QBranchPaymentMethodsVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QBranchPaymentMethodsQuery,\n    QBranchPaymentMethodsVariables\n  >,\n) {\n  return Hooks.useQuery<\n    QBranchPaymentMethodsQuery,\n    QBranchPaymentMethodsVariables\n  >(QBranchPaymentMethodsDocument, variables, baseOptions)\n}\n\nexport function useLazyQBranchPaymentMethods(\n  options?: Hooks.LazyQueryHookOptions<\n    QBranchPaymentMethodsQuery,\n    QBranchPaymentMethodsVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QBranchPaymentMethodsQuery,\n    QBranchPaymentMethodsVariables\n  >(QBranchPaymentMethodsDocument, options)\n}\n\nexport const QCreateOrderItemDocument = gql`\n  query QCreateOrderItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...FCreateOrderRecipeSidedishes\n      }\n      selectedSidedishes: sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderItem(\n  variables?: QCreateOrderItemVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QCreateOrderItemQuery,\n    QCreateOrderItemVariables\n  >,\n) {\n  return Hooks.useQuery<QCreateOrderItemQuery, QCreateOrderItemVariables>(\n    QCreateOrderItemDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQCreateOrderItem(\n  options?: Hooks.LazyQueryHookOptions<\n    QCreateOrderItemQuery,\n    QCreateOrderItemVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QCreateOrderItemQuery, QCreateOrderItemVariables>(\n    QCreateOrderItemDocument,\n    options,\n  )\n}\n\nexport const QCreateOrderRecipeDocument = gql`\n  query QCreateOrderRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...FCreateOrderRecipeSidedishes\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderRecipe(\n  variables?: QCreateOrderRecipeVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QCreateOrderRecipeQuery,\n    QCreateOrderRecipeVariables\n  >,\n) {\n  return Hooks.useQuery<QCreateOrderRecipeQuery, QCreateOrderRecipeVariables>(\n    QCreateOrderRecipeDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQCreateOrderRecipe(\n  options?: Hooks.LazyQueryHookOptions<\n    QCreateOrderRecipeQuery,\n    QCreateOrderRecipeVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QCreateOrderRecipeQuery,\n    QCreateOrderRecipeVariables\n  >(QCreateOrderRecipeDocument, options)\n}\n\nexport const QOrderCartDocument = gql`\n  query QOrderCart($orderId: ID!) {\n    order(id: $orderId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useQOrderCart(\n  variables?: QOrderCartVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderCartQuery, QOrderCartVariables>,\n) {\n  return Hooks.useQuery<QOrderCartQuery, QOrderCartVariables>(\n    QOrderCartDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQOrderCart(\n  options?: Hooks.LazyQueryHookOptions<QOrderCartQuery, QOrderCartVariables>,\n) {\n  return Hooks.useLazyQuery<QOrderCartQuery, QOrderCartVariables>(\n    QOrderCartDocument,\n    options,\n  )\n}\n\nexport const QOrderFormDeliverAtDefaultsDocument = gql`\n  query QOrderFormDeliverAtDefaults($branchId: ID!) {\n    times: companyBranch(id: $branchId) {\n      id\n      deliveryTime: defaultDeliveryTime\n      pickupTime: defaultPickupTime\n    }\n  }\n`\n\nexport function useQOrderFormDeliverAtDefaults(\n  variables?: QOrderFormDeliverAtDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QOrderFormDeliverAtDefaultsQuery,\n    QOrderFormDeliverAtDefaultsVariables\n  >,\n) {\n  return Hooks.useQuery<\n    QOrderFormDeliverAtDefaultsQuery,\n    QOrderFormDeliverAtDefaultsVariables\n  >(QOrderFormDeliverAtDefaultsDocument, variables, baseOptions)\n}\n\nexport function useLazyQOrderFormDeliverAtDefaults(\n  options?: Hooks.LazyQueryHookOptions<\n    QOrderFormDeliverAtDefaultsQuery,\n    QOrderFormDeliverAtDefaultsVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QOrderFormDeliverAtDefaultsQuery,\n    QOrderFormDeliverAtDefaultsVariables\n  >(QOrderFormDeliverAtDefaultsDocument, options)\n}\n\nexport const QOrderFormPromoDocument = gql`\n  query QOrderFormPromo($branchId: ID!) {\n    promoCodes(promoCode: { companyBranch: $branchId, enabled: true }) {\n      id\n      code\n    }\n  }\n`\n\nexport function useQOrderFormPromo(\n  variables?: QOrderFormPromoVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QOrderFormPromoQuery,\n    QOrderFormPromoVariables\n  >,\n) {\n  return Hooks.useQuery<QOrderFormPromoQuery, QOrderFormPromoVariables>(\n    QOrderFormPromoDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQOrderFormPromo(\n  options?: Hooks.LazyQueryHookOptions<\n    QOrderFormPromoQuery,\n    QOrderFormPromoVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QOrderFormPromoQuery, QOrderFormPromoVariables>(\n    QOrderFormPromoDocument,\n    options,\n  )\n}\n\nexport const QOrderMenuDocument = gql`\n  query QOrderMenu($branchId: ID!) {\n    orderMenu: wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n      orderOriginCategory: STAFF\n      enabled: true\n      isAvailable: true\n    ) {\n      ...FOrderMenuCategory\n    }\n  }\n\n  ${FOrderMenuCategoryFragmentDoc}\n`\n\nexport function useQOrderMenu(\n  variables?: QOrderMenuVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMenuQuery, QOrderMenuVariables>,\n) {\n  return Hooks.useQuery<QOrderMenuQuery, QOrderMenuVariables>(\n    QOrderMenuDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQOrderMenu(\n  options?: Hooks.LazyQueryHookOptions<QOrderMenuQuery, QOrderMenuVariables>,\n) {\n  return Hooks.useLazyQuery<QOrderMenuQuery, QOrderMenuVariables>(\n    QOrderMenuDocument,\n    options,\n  )\n}\n\nexport const QOrderVamCustomerDocument = gql`\n  query QOrderVamCustomer($branchId: ID!, $phone: String!) {\n    vamCustomer: vamInformation(companyBranchId: $branchId, phone: $phone) {\n      isFound\n      ...FOrderCustomer\n    }\n  }\n\n  ${FOrderCustomerFragmentDoc}\n`\n\nexport function useQOrderVamCustomer(\n  variables?: QOrderVamCustomerVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QOrderVamCustomerQuery,\n    QOrderVamCustomerVariables\n  >,\n) {\n  return Hooks.useQuery<QOrderVamCustomerQuery, QOrderVamCustomerVariables>(\n    QOrderVamCustomerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQOrderVamCustomer(\n  options?: Hooks.LazyQueryHookOptions<\n    QOrderVamCustomerQuery,\n    QOrderVamCustomerVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QOrderVamCustomerQuery, QOrderVamCustomerVariables>(\n    QOrderVamCustomerDocument,\n    options,\n  )\n}\n\nexport const QValidateLocationDocument = gql`\n  query QValidateLocation(\n    $branchId: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    resolveLocation(\n      companyBranch: $branchId\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      inDeliveryLocation\n      zone {\n        minimalOrderPrice {\n          formattedValue\n        }\n      }\n    }\n  }\n`\n\nexport function useQValidateLocation(\n  variables?: QValidateLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QValidateLocationQuery,\n    QValidateLocationVariables\n  >,\n) {\n  return Hooks.useQuery<QValidateLocationQuery, QValidateLocationVariables>(\n    QValidateLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQValidateLocation(\n  options?: Hooks.LazyQueryHookOptions<\n    QValidateLocationQuery,\n    QValidateLocationVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QValidateLocationQuery, QValidateLocationVariables>(\n    QValidateLocationDocument,\n    options,\n  )\n}\n\nexport const QCustomerScreenOrderListDocument = gql`\n  query QCustomerScreenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n    $sectors: [ID!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoryTarget: FE_COMPLETION\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n        sectors: $sectors\n        sectorsWithChildren: true\n      }\n    ) {\n      ...FCustomerScreenOrder\n    }\n  }\n\n  ${FCustomerScreenOrderFragmentDoc}\n`\n\nexport function useQCustomerScreenOrderList(\n  variables?: QCustomerScreenOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QCustomerScreenOrderListQuery,\n    QCustomerScreenOrderListVariables\n  >,\n) {\n  return Hooks.useQuery<\n    QCustomerScreenOrderListQuery,\n    QCustomerScreenOrderListVariables\n  >(QCustomerScreenOrderListDocument, variables, baseOptions)\n}\n\nexport function useLazyQCustomerScreenOrderList(\n  options?: Hooks.LazyQueryHookOptions<\n    QCustomerScreenOrderListQuery,\n    QCustomerScreenOrderListVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QCustomerScreenOrderListQuery,\n    QCustomerScreenOrderListVariables\n  >(QCustomerScreenOrderListDocument, options)\n}\n\nexport const SCustomerScreenOrderListDocument = gql`\n  subscription SCustomerScreenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n    $sectors: [ID!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n      orderStateCategoryTarget: FE_COMPLETION\n      sectors: $sectors\n      sectorsWithChildren: true\n    ) {\n      order {\n        ...FCustomerScreenOrder\n      }\n    }\n  }\n\n  ${FCustomerScreenOrderFragmentDoc}\n`\n\nexport function useSCustomerScreenOrderList(\n  variables?: SCustomerScreenOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SCustomerScreenOrderListSubscription,\n    SCustomerScreenOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SCustomerScreenOrderListSubscription,\n    SCustomerScreenOrderListVariables\n  >(SCustomerScreenOrderListDocument, variables, baseOptions)\n}\n\nexport const MKitchenOrderHandleDocument = gql`\n  mutation MKitchenOrderHandle($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...FOrderStateCategory\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useMKitchenOrderHandle(\n  baseOptions?: Hooks.MutationHookOptions<\n    MKitchenOrderHandleMutation,\n    MKitchenOrderHandleVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MKitchenOrderHandleMutation,\n    MKitchenOrderHandleVariables\n  >(MKitchenOrderHandleDocument, baseOptions)\n}\n\nexport const MKitchenOrderRecipeHandleDocument = gql`\n  mutation MKitchenOrderRecipeHandle(\n    $orderRecipeId: ID!\n    $state: OrderRecipeStateEnum!\n  ) {\n    orderRecipe: updateOrderRecipeState(\n      id: $orderRecipeId\n      orderRecipeState: $state\n    ) {\n      ...FKitchenOrderState\n    }\n  }\n\n  ${FKitchenOrderStateFragmentDoc}\n`\n\nexport function useMKitchenOrderRecipeHandle(\n  baseOptions?: Hooks.MutationHookOptions<\n    MKitchenOrderRecipeHandleMutation,\n    MKitchenOrderRecipeHandleVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MKitchenOrderRecipeHandleMutation,\n    MKitchenOrderRecipeHandleVariables\n  >(MKitchenOrderRecipeHandleDocument, baseOptions)\n}\n\nexport const MKitchenSectorHandleDocument = gql`\n  mutation MKitchenSectorHandle($sectorId: ID!, $state: OrderRecipeStateEnum!) {\n    sectorRecipe: updateSectorRecipes(\n      sectorId: $sectorId\n      orderRecipeState: $state\n    ) {\n      ...FKitchenSectorState\n    }\n  }\n\n  ${FKitchenSectorStateFragmentDoc}\n`\n\nexport function useMKitchenSectorHandle(\n  baseOptions?: Hooks.MutationHookOptions<\n    MKitchenSectorHandleMutation,\n    MKitchenSectorHandleVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MKitchenSectorHandleMutation,\n    MKitchenSectorHandleVariables\n  >(MKitchenSectorHandleDocument, baseOptions)\n}\n\nexport const MKitchenSectorRecipeHandleDocument = gql`\n  mutation MKitchenSectorRecipeHandle(\n    $sectorRecipeId: ID!\n    $state: OrderRecipeStateEnum!\n  ) {\n    sectorRecipe: updateSectorRecipe(\n      id: $sectorRecipeId\n      orderRecipeState: $state\n    ) {\n      ...FKitchenSectorState\n    }\n  }\n\n  ${FKitchenSectorStateFragmentDoc}\n`\n\nexport function useMKitchenSectorRecipeHandle(\n  baseOptions?: Hooks.MutationHookOptions<\n    MKitchenSectorRecipeHandleMutation,\n    MKitchenSectorRecipeHandleVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MKitchenSectorRecipeHandleMutation,\n    MKitchenSectorRecipeHandleVariables\n  >(MKitchenSectorRecipeHandleDocument, baseOptions)\n}\n\nexport const QKitchenCompletionOrderListDocument = gql`\n  query QKitchenCompletionOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n    $occasions: [ID!]\n    $sectors: [ID!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoryTarget: FE_COMPLETION\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n        occasions: $occasions\n        sectors: $sectors\n        sectorsWithChildren: true\n      }\n    ) {\n      ...FKitchenCompletionOrder\n    }\n  }\n\n  ${FKitchenCompletionOrderFragmentDoc}\n`\n\nexport function useQKitchenCompletionOrderList(\n  variables?: QKitchenCompletionOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QKitchenCompletionOrderListQuery,\n    QKitchenCompletionOrderListVariables\n  >,\n) {\n  return Hooks.useQuery<\n    QKitchenCompletionOrderListQuery,\n    QKitchenCompletionOrderListVariables\n  >(QKitchenCompletionOrderListDocument, variables, baseOptions)\n}\n\nexport function useLazyQKitchenCompletionOrderList(\n  options?: Hooks.LazyQueryHookOptions<\n    QKitchenCompletionOrderListQuery,\n    QKitchenCompletionOrderListVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QKitchenCompletionOrderListQuery,\n    QKitchenCompletionOrderListVariables\n  >(QKitchenCompletionOrderListDocument, options)\n}\n\nexport const QKitchenOrderListDocument = gql`\n  query QKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n    $occasions: [ID!]\n    $sectors: [ID!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoryTarget: FE_KITCHEN\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n        occasions: $occasions\n        sectors: $sectors\n        sectorsWithChildren: true\n      }\n    ) {\n      ...FKitchenOrder\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useQKitchenOrderList(\n  variables?: QKitchenOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QKitchenOrderListQuery,\n    QKitchenOrderListVariables\n  >,\n) {\n  return Hooks.useQuery<QKitchenOrderListQuery, QKitchenOrderListVariables>(\n    QKitchenOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQKitchenOrderList(\n  options?: Hooks.LazyQueryHookOptions<\n    QKitchenOrderListQuery,\n    QKitchenOrderListVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QKitchenOrderListQuery, QKitchenOrderListVariables>(\n    QKitchenOrderListDocument,\n    options,\n  )\n}\n\nexport const QKitchenSectorListDocument = gql`\n  query QKitchenSectorList(\n    $branches: [ID!]!\n    $sectors: [ID!]\n    $states: [OrderRecipeStateEnum!]\n  ) {\n    sectors(companyBranches: $branches, enabled: true) {\n      id\n      name\n    }\n    sectorRecipes(\n      companyBranches: $branches\n      sectors: $sectors\n      orderRecipeStateOR: $states\n      sectorsWithChildren: true\n    ) {\n      ...FKitchenSectorRecipe\n    }\n  }\n\n  ${FKitchenSectorRecipeFragmentDoc}\n`\n\nexport function useQKitchenSectorList(\n  variables?: QKitchenSectorListVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QKitchenSectorListQuery,\n    QKitchenSectorListVariables\n  >,\n) {\n  return Hooks.useQuery<QKitchenSectorListQuery, QKitchenSectorListVariables>(\n    QKitchenSectorListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQKitchenSectorList(\n  options?: Hooks.LazyQueryHookOptions<\n    QKitchenSectorListQuery,\n    QKitchenSectorListVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QKitchenSectorListQuery,\n    QKitchenSectorListVariables\n  >(QKitchenSectorListDocument, options)\n}\n\nexport const SKitchenCompletionOrderListDocument = gql`\n  subscription SKitchenCompletionOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n    $occasions: [ID!]\n    $sectors: [ID!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n      orderStateCategoryTarget: FE_COMPLETION\n      occasions: $occasions\n      sectors: $sectors\n      sectorsWithChildren: true\n    ) {\n      order {\n        ...FKitchenCompletionOrder\n      }\n    }\n  }\n\n  ${FKitchenCompletionOrderFragmentDoc}\n`\n\nexport function useSKitchenCompletionOrderList(\n  variables?: SKitchenCompletionOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SKitchenCompletionOrderListSubscription,\n    SKitchenCompletionOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SKitchenCompletionOrderListSubscription,\n    SKitchenCompletionOrderListVariables\n  >(SKitchenCompletionOrderListDocument, variables, baseOptions)\n}\n\nexport const SKitchenOrderListDocument = gql`\n  subscription SKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n    $occasions: [ID!]\n    $sectors: [ID!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n      orderStateCategoryTarget: FE_KITCHEN\n      occasions: $occasions\n      sectors: $sectors\n      sectorsWithChildren: true\n    ) {\n      order {\n        ...FKitchenOrder\n      }\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useSKitchenOrderList(\n  variables?: SKitchenOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >(SKitchenOrderListDocument, variables, baseOptions)\n}\n\nexport const SKitchenSectorListDocument = gql`\n  subscription SKitchenSectorList(\n    $branches: [ID!]!\n    $sectors: [ID!]\n    $states: [OrderRecipeStateEnum!]\n  ) {\n    updatedSectorRecipe(\n      companyBranches: $branches\n      orderRecipeStateOR: $states\n      sectors: $sectors\n      sectorsWithChildren: true\n    ) {\n      id\n      sectorRecipe {\n        ...FKitchenSectorRecipe\n      }\n    }\n  }\n\n  ${FKitchenSectorRecipeFragmentDoc}\n`\n\nexport function useSKitchenSectorList(\n  variables?: SKitchenSectorListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SKitchenSectorListSubscription,\n    SKitchenSectorListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SKitchenSectorListSubscription,\n    SKitchenSectorListVariables\n  >(SKitchenSectorListDocument, variables, baseOptions)\n}\n\nexport const MPasswordChangeDocument = gql`\n  mutation MPasswordChange($password: String!) {\n    change: updateUserPassword(newPassword: $password) {\n      userId: id\n      newToken: token\n    }\n  }\n`\n\nexport function useMPasswordChange(\n  baseOptions?: Hooks.MutationHookOptions<\n    MPasswordChangeMutation,\n    MPasswordChangeVariables\n  >,\n) {\n  return Hooks.useMutation<MPasswordChangeMutation, MPasswordChangeVariables>(\n    MPasswordChangeDocument,\n    baseOptions,\n  )\n}\n\nexport const QUserBootstrapDocument = gql`\n  query QUserBootstrap($userId: ID!) {\n    user(id: $userId) {\n      id\n      firstName\n      lastName\n      language {\n        rawCode\n      }\n      roles {\n        id\n        name\n      }\n      branches: accessibleBranches {\n        ...FCompanyBranch\n      }\n    }\n    permissions: permissions {\n      canCancelOrders\n      canCreateOrder\n    }\n    access: __schema {\n      queries: queryType {\n        fields {\n          name\n        }\n      }\n      mutations: mutationType {\n        fields {\n          name\n        }\n      }\n      subscriptions: subscriptionType {\n        fields {\n          name\n        }\n      }\n    }\n  }\n\n  ${FCompanyBranchFragmentDoc}\n`\n\nexport function useQUserBootstrap(\n  variables?: QUserBootstrapVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QUserBootstrapQuery,\n    QUserBootstrapVariables\n  >,\n) {\n  return Hooks.useQuery<QUserBootstrapQuery, QUserBootstrapVariables>(\n    QUserBootstrapDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQUserBootstrap(\n  options?: Hooks.LazyQueryHookOptions<\n    QUserBootstrapQuery,\n    QUserBootstrapVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QUserBootstrapQuery, QUserBootstrapVariables>(\n    QUserBootstrapDocument,\n    options,\n  )\n}\n\nexport const MMenuCategoryCreateDocument = gql`\n  mutation MMenuCategoryCreate($category: InputWareCategoryCreate!) {\n    createCategory: createWareCategory(wareCategory: $category) {\n      id\n    }\n  }\n`\n\nexport function useMMenuCategoryCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategoryCreateMutation,\n    MMenuCategoryCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategoryCreateMutation,\n    MMenuCategoryCreateVariables\n  >(MMenuCategoryCreateDocument, baseOptions)\n}\n\nexport const MMenuCategoryDeleteDocument = gql`\n  mutation MMenuCategoryDelete($categoryId: ID!) {\n    deleteCategory: destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n\nexport function useMMenuCategoryDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategoryDeleteMutation,\n    MMenuCategoryDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategoryDeleteMutation,\n    MMenuCategoryDeleteVariables\n  >(MMenuCategoryDeleteDocument, baseOptions)\n}\n\nexport const MMenuCategorySortDocument = gql`\n  mutation MMenuCategorySort($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport function useMMenuCategorySort(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategorySortMutation,\n    MMenuCategorySortVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategorySortMutation,\n    MMenuCategorySortVariables\n  >(MMenuCategorySortDocument, baseOptions)\n}\n\nexport const MMenuCategoryUpdateDocument = gql`\n  mutation MMenuCategoryUpdate(\n    $categoryId: ID!\n    $category: InputWareCategoryUpdate!\n  ) {\n    updateCategory: updateWareCategory(\n      id: $categoryId\n      wareCategory: $category\n    ) {\n      ...FMenuCategory\n    }\n  }\n\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport function useMMenuCategoryUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategoryUpdateMutation,\n    MMenuCategoryUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategoryUpdateMutation,\n    MMenuCategoryUpdateVariables\n  >(MMenuCategoryUpdateDocument, baseOptions)\n}\n\nexport const MMenuCategoryVisibilityDocument = gql`\n  mutation MMenuCategoryVisibility($categoryId: ID!, $visible: Boolean!) {\n    updateWareCategory(id: $categoryId, wareCategory: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useMMenuCategoryVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >(MMenuCategoryVisibilityDocument, baseOptions)\n}\n\nexport const QMenuCategoryColorsDocument = gql`\n  query QMenuCategoryColors {\n    colors: wareCategoryColors {\n      id\n      code\n      color\n    }\n  }\n`\n\nexport function useQMenuCategoryColors(\n  variables?: QMenuCategoryColorsVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuCategoryColorsQuery,\n    QMenuCategoryColorsVariables\n  >,\n) {\n  return Hooks.useQuery<QMenuCategoryColorsQuery, QMenuCategoryColorsVariables>(\n    QMenuCategoryColorsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuCategoryColors(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuCategoryColorsQuery,\n    QMenuCategoryColorsVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QMenuCategoryColorsQuery,\n    QMenuCategoryColorsVariables\n  >(QMenuCategoryColorsDocument, options)\n}\n\nexport const QMenuCategoryFilterDocument = gql`\n  query QMenuCategoryFilter($branchId: ID!) {\n    categories: wareCategories(companyBranch: $branchId) {\n      id\n      nameLabel\n      countRecipes\n      categoryType: wareCategoryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useQMenuCategoryFilter(\n  variables?: QMenuCategoryFilterVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuCategoryFilterQuery,\n    QMenuCategoryFilterVariables\n  >,\n) {\n  return Hooks.useQuery<QMenuCategoryFilterQuery, QMenuCategoryFilterVariables>(\n    QMenuCategoryFilterDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuCategoryFilter(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuCategoryFilterQuery,\n    QMenuCategoryFilterVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QMenuCategoryFilterQuery,\n    QMenuCategoryFilterVariables\n  >(QMenuCategoryFilterDocument, options)\n}\n\nexport const QMenuCategoryFormDocument = gql`\n  query QMenuCategoryForm($categoryId: ID!, $language: LanguageEnum!) {\n    category: wareCategory(id: $categoryId, language: $language) {\n      ...FMenuCategoryInForm\n    }\n  }\n\n  ${FMenuCategoryInFormFragmentDoc}\n`\n\nexport function useQMenuCategoryForm(\n  variables?: QMenuCategoryFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuCategoryFormQuery,\n    QMenuCategoryFormVariables\n  >,\n) {\n  return Hooks.useQuery<QMenuCategoryFormQuery, QMenuCategoryFormVariables>(\n    QMenuCategoryFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuCategoryForm(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuCategoryFormQuery,\n    QMenuCategoryFormVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QMenuCategoryFormQuery, QMenuCategoryFormVariables>(\n    QMenuCategoryFormDocument,\n    options,\n  )\n}\n\nexport const QMenuCategoryFormTransDocument = gql`\n  query QMenuCategoryFormTrans($categoryId: ID!, $language: LanguageEnum!) {\n    category: wareCategory(id: $categoryId, language: $language) {\n      id\n      ...FMenuCategoryLocalized\n    }\n  }\n\n  ${FMenuCategoryLocalizedFragmentDoc}\n`\n\nexport function useQMenuCategoryFormTrans(\n  variables?: QMenuCategoryFormTransVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuCategoryFormTransQuery,\n    QMenuCategoryFormTransVariables\n  >,\n) {\n  return Hooks.useQuery<\n    QMenuCategoryFormTransQuery,\n    QMenuCategoryFormTransVariables\n  >(QMenuCategoryFormTransDocument, variables, baseOptions)\n}\n\nexport function useLazyQMenuCategoryFormTrans(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuCategoryFormTransQuery,\n    QMenuCategoryFormTransVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QMenuCategoryFormTransQuery,\n    QMenuCategoryFormTransVariables\n  >(QMenuCategoryFormTransDocument, options)\n}\n\nexport const QMenuCategoryListDocument = gql`\n  query QMenuCategoryList($branchId: ID!, $categoryType: WareCategoryTypeEnum) {\n    categories: wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: $categoryType\n    ) {\n      ...FMenuCategoryInList\n    }\n  }\n\n  ${FMenuCategoryInListFragmentDoc}\n`\n\nexport function useQMenuCategoryList(\n  variables?: QMenuCategoryListVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuCategoryListQuery,\n    QMenuCategoryListVariables\n  >,\n) {\n  return Hooks.useQuery<QMenuCategoryListQuery, QMenuCategoryListVariables>(\n    QMenuCategoryListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuCategoryList(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuCategoryListQuery,\n    QMenuCategoryListVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QMenuCategoryListQuery, QMenuCategoryListVariables>(\n    QMenuCategoryListDocument,\n    options,\n  )\n}\n\nexport const QMenuCategoryOriginsDocument = gql`\n  query QMenuCategoryOrigins {\n    origins: orderOriginCategories {\n      enum\n      code\n    }\n  }\n`\n\nexport function useQMenuCategoryOrigins(\n  variables?: QMenuCategoryOriginsVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuCategoryOriginsQuery,\n    QMenuCategoryOriginsVariables\n  >,\n) {\n  return Hooks.useQuery<\n    QMenuCategoryOriginsQuery,\n    QMenuCategoryOriginsVariables\n  >(QMenuCategoryOriginsDocument, variables, baseOptions)\n}\n\nexport function useLazyQMenuCategoryOrigins(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuCategoryOriginsQuery,\n    QMenuCategoryOriginsVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QMenuCategoryOriginsQuery,\n    QMenuCategoryOriginsVariables\n  >(QMenuCategoryOriginsDocument, options)\n}\n\nexport const QMenuAllergensDocument = gql`\n  query QMenuAllergens {\n    allergens {\n      ...FMenuAllergen\n    }\n  }\n\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport function useQMenuAllergens(\n  variables?: QMenuAllergensVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuAllergensQuery,\n    QMenuAllergensVariables\n  >,\n) {\n  return Hooks.useQuery<QMenuAllergensQuery, QMenuAllergensVariables>(\n    QMenuAllergensDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuAllergens(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuAllergensQuery,\n    QMenuAllergensVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QMenuAllergensQuery, QMenuAllergensVariables>(\n    QMenuAllergensDocument,\n    options,\n  )\n}\n\nexport const QMenuCurrenciesDocument = gql`\n  query QMenuCurrencies($branchId: ID!) {\n    currencies {\n      enum\n      code\n    }\n    companyBranch(id: $branchId) {\n      address {\n        country {\n          currency {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useQMenuCurrencies(\n  variables?: QMenuCurrenciesVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuCurrenciesQuery,\n    QMenuCurrenciesVariables\n  >,\n) {\n  return Hooks.useQuery<QMenuCurrenciesQuery, QMenuCurrenciesVariables>(\n    QMenuCurrenciesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuCurrencies(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuCurrenciesQuery,\n    QMenuCurrenciesVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QMenuCurrenciesQuery, QMenuCurrenciesVariables>(\n    QMenuCurrenciesDocument,\n    options,\n  )\n}\n\nexport const QMenuGuideDownloadDocument = gql`\n  query QMenuGuideDownload($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      foodMenuUrl\n    }\n  }\n`\n\nexport function useQMenuGuideDownload(\n  variables?: QMenuGuideDownloadVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuGuideDownloadQuery,\n    QMenuGuideDownloadVariables\n  >,\n) {\n  return Hooks.useQuery<QMenuGuideDownloadQuery, QMenuGuideDownloadVariables>(\n    QMenuGuideDownloadDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuGuideDownload(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuGuideDownloadQuery,\n    QMenuGuideDownloadVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QMenuGuideDownloadQuery,\n    QMenuGuideDownloadVariables\n  >(QMenuGuideDownloadDocument, options)\n}\n\nexport const QMenuVatsDocument = gql`\n  query QMenuVats($branchId: ID!) {\n    vats(companyBranch: $branchId) {\n      id\n      vat\n    }\n  }\n`\n\nexport function useQMenuVats(\n  variables?: QMenuVatsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuVatsQuery, QMenuVatsVariables>,\n) {\n  return Hooks.useQuery<QMenuVatsQuery, QMenuVatsVariables>(\n    QMenuVatsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuVats(\n  options?: Hooks.LazyQueryHookOptions<QMenuVatsQuery, QMenuVatsVariables>,\n) {\n  return Hooks.useLazyQuery<QMenuVatsQuery, QMenuVatsVariables>(\n    QMenuVatsDocument,\n    options,\n  )\n}\n\nexport const QMenuWareUnitsDocument = gql`\n  query QMenuWareUnits {\n    wareUnits {\n      id\n      code\n      enum\n    }\n  }\n`\n\nexport function useQMenuWareUnits(\n  variables?: QMenuWareUnitsVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuWareUnitsQuery,\n    QMenuWareUnitsVariables\n  >,\n) {\n  return Hooks.useQuery<QMenuWareUnitsQuery, QMenuWareUnitsVariables>(\n    QMenuWareUnitsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuWareUnits(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuWareUnitsQuery,\n    QMenuWareUnitsVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QMenuWareUnitsQuery, QMenuWareUnitsVariables>(\n    QMenuWareUnitsDocument,\n    options,\n  )\n}\n\nexport const MMenuRecipeCreateDocument = gql`\n  mutation MMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    recipe: createRecipe(recipe: $recipe) {\n      ...FMenuRecipeInList\n    }\n  }\n\n  ${FMenuRecipeInListFragmentDoc}\n`\n\nexport function useMMenuRecipeCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuRecipeCreateMutation,\n    MMenuRecipeCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuRecipeCreateMutation,\n    MMenuRecipeCreateVariables\n  >(MMenuRecipeCreateDocument, baseOptions)\n}\n\nexport const MMenuRecipeDeleteDocument = gql`\n  mutation MMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n\nexport function useMMenuRecipeDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuRecipeDeleteMutation,\n    MMenuRecipeDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuRecipeDeleteMutation,\n    MMenuRecipeDeleteVariables\n  >(MMenuRecipeDeleteDocument, baseOptions)\n}\n\nexport const MMenuRecipeUpdateDocument = gql`\n  mutation MMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    recipe: updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...FMenuRecipeInList\n    }\n  }\n\n  ${FMenuRecipeInListFragmentDoc}\n`\n\nexport function useMMenuRecipeUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuRecipeUpdateMutation,\n    MMenuRecipeUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuRecipeUpdateMutation,\n    MMenuRecipeUpdateVariables\n  >(MMenuRecipeUpdateDocument, baseOptions)\n}\n\nexport const MMenuRecipeVisibilityDocument = gql`\n  mutation MMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateVisibility: updateRecipe(\n      id: $recipeId\n      recipe: { enabled: $visible }\n    ) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useMMenuRecipeVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuRecipeVisibilityMutation,\n    MMenuRecipeVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuRecipeVisibilityMutation,\n    MMenuRecipeVisibilityVariables\n  >(MMenuRecipeVisibilityDocument, baseOptions)\n}\n\nexport const QMenuRecipeDefaultsDocument = gql`\n  query QMenuRecipeDefaults($branchId: ID!) {\n    defaults: companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport function useQMenuRecipeDefaults(\n  variables?: QMenuRecipeDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuRecipeDefaultsQuery,\n    QMenuRecipeDefaultsVariables\n  >,\n) {\n  return Hooks.useQuery<QMenuRecipeDefaultsQuery, QMenuRecipeDefaultsVariables>(\n    QMenuRecipeDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuRecipeDefaults(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuRecipeDefaultsQuery,\n    QMenuRecipeDefaultsVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QMenuRecipeDefaultsQuery,\n    QMenuRecipeDefaultsVariables\n  >(QMenuRecipeDefaultsDocument, options)\n}\n\nexport const QMenuRecipeFormDocument = gql`\n  query QMenuRecipeForm($recipeId: ID!, $language: LanguageEnum!) {\n    recipe(id: $recipeId, language: $language) {\n      ...FMenuRecipeInForm\n      sourcePrices: prices {\n        ...FMenuRecipePricing\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...FMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n\n  ${FMenuRecipeInFormFragmentDoc}\n  ${FMenuRecipePricingFragmentDoc}\n  ${FMenuAssocRecipeFragmentDoc}\n`\n\nexport function useQMenuRecipeForm(\n  variables?: QMenuRecipeFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuRecipeFormQuery,\n    QMenuRecipeFormVariables\n  >,\n) {\n  return Hooks.useQuery<QMenuRecipeFormQuery, QMenuRecipeFormVariables>(\n    QMenuRecipeFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuRecipeForm(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuRecipeFormQuery,\n    QMenuRecipeFormVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QMenuRecipeFormQuery, QMenuRecipeFormVariables>(\n    QMenuRecipeFormDocument,\n    options,\n  )\n}\n\nexport const QMenuRecipeFormAssocDocument = gql`\n  query QMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...FMenuAssocRecipe\n    }\n  }\n\n  ${FMenuAssocRecipeFragmentDoc}\n`\n\nexport function useQMenuRecipeFormAssoc(\n  variables?: QMenuRecipeFormAssocVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuRecipeFormAssocQuery,\n    QMenuRecipeFormAssocVariables\n  >,\n) {\n  return Hooks.useQuery<\n    QMenuRecipeFormAssocQuery,\n    QMenuRecipeFormAssocVariables\n  >(QMenuRecipeFormAssocDocument, variables, baseOptions)\n}\n\nexport function useLazyQMenuRecipeFormAssoc(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuRecipeFormAssocQuery,\n    QMenuRecipeFormAssocVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QMenuRecipeFormAssocQuery,\n    QMenuRecipeFormAssocVariables\n  >(QMenuRecipeFormAssocDocument, options)\n}\n\nexport const QMenuRecipeFormTransDocument = gql`\n  query QMenuRecipeFormTrans($recipeId: ID!, $language: LanguageEnum!) {\n    recipe(id: $recipeId, language: $language) {\n      id\n      ...FMenuRecipeLocalized\n    }\n  }\n\n  ${FMenuRecipeLocalizedFragmentDoc}\n`\n\nexport function useQMenuRecipeFormTrans(\n  variables?: QMenuRecipeFormTransVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuRecipeFormTransQuery,\n    QMenuRecipeFormTransVariables\n  >,\n) {\n  return Hooks.useQuery<\n    QMenuRecipeFormTransQuery,\n    QMenuRecipeFormTransVariables\n  >(QMenuRecipeFormTransDocument, variables, baseOptions)\n}\n\nexport function useLazyQMenuRecipeFormTrans(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuRecipeFormTransQuery,\n    QMenuRecipeFormTransVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QMenuRecipeFormTransQuery,\n    QMenuRecipeFormTransVariables\n  >(QMenuRecipeFormTransDocument, options)\n}\n\nexport const QMenuRecipeListDocument = gql`\n  query QMenuRecipeList(\n    $branchId: ID!\n    $categoryId: ID\n    $categoryType: WareCategoryTypeEnum\n  ) {\n    recipes(\n      companyBranch: $branchId\n      wareCategory: $categoryId\n      wareCategoryType: $categoryType\n    ) {\n      ...FMenuRecipeInList\n    }\n  }\n\n  ${FMenuRecipeInListFragmentDoc}\n`\n\nexport function useQMenuRecipeList(\n  variables?: QMenuRecipeListVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuRecipeListQuery,\n    QMenuRecipeListVariables\n  >,\n) {\n  return Hooks.useQuery<QMenuRecipeListQuery, QMenuRecipeListVariables>(\n    QMenuRecipeListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuRecipeList(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuRecipeListQuery,\n    QMenuRecipeListVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QMenuRecipeListQuery, QMenuRecipeListVariables>(\n    QMenuRecipeListDocument,\n    options,\n  )\n}\n\nexport const MMenuStockCreateDocument = gql`\n  mutation MMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...FMenuStockItem\n      allowNegative\n    }\n  }\n\n  ${FMenuStockItemFragmentDoc}\n`\n\nexport function useMMenuStockCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuStockCreateMutation,\n    MMenuStockCreateVariables\n  >,\n) {\n  return Hooks.useMutation<MMenuStockCreateMutation, MMenuStockCreateVariables>(\n    MMenuStockCreateDocument,\n    baseOptions,\n  )\n}\n\nexport const MMenuStockDeleteDocument = gql`\n  mutation MMenuStockDelete($stockId: ID!) {\n    deleteStockItem: destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n\nexport function useMMenuStockDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuStockDeleteMutation,\n    MMenuStockDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<MMenuStockDeleteMutation, MMenuStockDeleteVariables>(\n    MMenuStockDeleteDocument,\n    baseOptions,\n  )\n}\n\nexport const MMenuStockQuantityDocument = gql`\n  mutation MMenuStockQuantity($stockItem: ID!, $quantityChange: Float!) {\n    changeAmountStockItem(id: $stockItem, amountOffset: $quantityChange) {\n      id\n      quantity\n    }\n  }\n`\n\nexport function useMMenuStockQuantity(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >(MMenuStockQuantityDocument, baseOptions)\n}\n\nexport const MMenuStockUpdateDocument = gql`\n  mutation MMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...FMenuStockItem\n      allowNegative\n    }\n  }\n\n  ${FMenuStockItemFragmentDoc}\n`\n\nexport function useMMenuStockUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuStockUpdateMutation,\n    MMenuStockUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<MMenuStockUpdateMutation, MMenuStockUpdateVariables>(\n    MMenuStockUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const QMenuStockDefaultsDocument = gql`\n  query QMenuStockDefaults($branchId: ID!) {\n    defaults: companyBranch(id: $branchId) {\n      id\n      allowNegative: stockItemsCanBeNegative\n    }\n  }\n`\n\nexport function useQMenuStockDefaults(\n  variables?: QMenuStockDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuStockDefaultsQuery,\n    QMenuStockDefaultsVariables\n  >,\n) {\n  return Hooks.useQuery<QMenuStockDefaultsQuery, QMenuStockDefaultsVariables>(\n    QMenuStockDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuStockDefaults(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuStockDefaultsQuery,\n    QMenuStockDefaultsVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QMenuStockDefaultsQuery,\n    QMenuStockDefaultsVariables\n  >(QMenuStockDefaultsDocument, options)\n}\n\nexport const QMenuStockFormDocument = gql`\n  query QMenuStockForm($stockId: ID!) {\n    stockItem(id: $stockId) {\n      ...FMenuStockItem\n      allowNegative\n      companyBranch {\n        id\n        allowNegative: stockItemsCanBeNegative\n      }\n    }\n  }\n\n  ${FMenuStockItemFragmentDoc}\n`\n\nexport function useQMenuStockForm(\n  variables?: QMenuStockFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuStockFormQuery,\n    QMenuStockFormVariables\n  >,\n) {\n  return Hooks.useQuery<QMenuStockFormQuery, QMenuStockFormVariables>(\n    QMenuStockFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuStockForm(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuStockFormQuery,\n    QMenuStockFormVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QMenuStockFormQuery, QMenuStockFormVariables>(\n    QMenuStockFormDocument,\n    options,\n  )\n}\n\nexport const QMenuStockListDocument = gql`\n  query QMenuStockList($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      ...FMenuStockItem\n      allowNegativeValue\n    }\n  }\n\n  ${FMenuStockItemFragmentDoc}\n`\n\nexport function useQMenuStockList(\n  variables?: QMenuStockListVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuStockListQuery,\n    QMenuStockListVariables\n  >,\n) {\n  return Hooks.useQuery<QMenuStockListQuery, QMenuStockListVariables>(\n    QMenuStockListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuStockList(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuStockListQuery,\n    QMenuStockListVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QMenuStockListQuery, QMenuStockListVariables>(\n    QMenuStockListDocument,\n    options,\n  )\n}\n\nexport const QStockRecipesDocument = gql`\n  query QStockRecipes($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      ingredients {\n        id\n        recipe {\n          id\n          nameLabel\n          descriptionLabel\n          recipeType: wareCategoryType {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useQStockRecipes(\n  variables?: QStockRecipesVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QStockRecipesQuery,\n    QStockRecipesVariables\n  >,\n) {\n  return Hooks.useQuery<QStockRecipesQuery, QStockRecipesVariables>(\n    QStockRecipesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQStockRecipes(\n  options?: Hooks.LazyQueryHookOptions<\n    QStockRecipesQuery,\n    QStockRecipesVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QStockRecipesQuery, QStockRecipesVariables>(\n    QStockRecipesDocument,\n    options,\n  )\n}\n\nexport const MBranchDefaultTimeDocument = gql`\n  mutation MBranchDefaultTime(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $time: Int!\n  ) {\n    updateDefaultOrderProcessTime(\n      companyBranch: $branchId\n      deliveryType: $deliveryType\n      defaultTime: $time\n    ) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useMBranchDefaultTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >(MBranchDefaultTimeDocument, baseOptions)\n}\n\nexport const MChangePaymentMethodDocument = gql`\n  mutation MChangePaymentMethod($orderId: ID!, $paymentMethodId: ID!) {\n    updateOrderPaymentMethod(\n      orderId: $orderId\n      paymentMethodId: $paymentMethodId\n    ) {\n      id\n      ...FOrderPaymentMethods\n    }\n  }\n\n  ${FOrderPaymentMethodsFragmentDoc}\n`\n\nexport function useMChangePaymentMethod(\n  baseOptions?: Hooks.MutationHookOptions<\n    MChangePaymentMethodMutation,\n    MChangePaymentMethodVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MChangePaymentMethodMutation,\n    MChangePaymentMethodVariables\n  >(MChangePaymentMethodDocument, baseOptions)\n}\n\nexport const MFastCloseDocument = gql`\n  mutation MFastClose($branchId: ID!, $interval: Int!, $note: String) {\n    addSpecialClosingBusinessHours(\n      closingSpecification: {\n        companyBranchId: $branchId\n        closingInterval: $interval\n        closedNote: $note\n      }\n    ) {\n      id\n      isOpen\n    }\n  }\n`\n\nexport function useMFastClose(\n  baseOptions?: Hooks.MutationHookOptions<\n    MFastCloseMutation,\n    MFastCloseVariables\n  >,\n) {\n  return Hooks.useMutation<MFastCloseMutation, MFastCloseVariables>(\n    MFastCloseDocument,\n    baseOptions,\n  )\n}\n\nexport const MOrderChangeToPickupDocument = gql`\n  mutation MOrderChangeToPickup($orderId: ID!) {\n    updateOrderDeliveryToPickup(id: $orderId) {\n      id\n      deliveryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMOrderChangeToPickup(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderChangeToPickupMutation,\n    MOrderChangeToPickupVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderChangeToPickupMutation,\n    MOrderChangeToPickupVariables\n  >(MOrderChangeToPickupDocument, baseOptions)\n}\n\nexport const MOrderTimeNotificationDocument = gql`\n  mutation MOrderTimeNotification($orderId: ID!, $minutes: Int!) {\n    orderNotifyCustomer(id: $orderId, minutes: $minutes) {\n      id\n      deliverAt\n    }\n  }\n`\n\nexport function useMOrderTimeNotification(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderTimeNotificationMutation,\n    MOrderTimeNotificationVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderTimeNotificationMutation,\n    MOrderTimeNotificationVariables\n  >(MOrderTimeNotificationDocument, baseOptions)\n}\n\nexport const MRemoveOrderDriverDocument = gql`\n  mutation MRemoveOrderDriver($orderDriverId: ID!) {\n    destroyUserDeliveringOrder(id: $orderDriverId) {\n      order {\n        ...FOrderDriver\n      }\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useMRemoveOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderDriverMutation,\n    MRemoveOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderDriverMutation,\n    MRemoveOrderDriverVariables\n  >(MRemoveOrderDriverDocument, baseOptions)\n}\n\nexport const MSelectOrderDriverDocument = gql`\n  mutation MSelectOrderDriver($driverId: ID!, $orderId: ID!) {\n    result: createUserDeliveringOrder(user: $driverId, order: $orderId) {\n      order {\n        ...FOrderDriver\n      }\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useMSelectOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSelectOrderDriverMutation,\n    MSelectOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSelectOrderDriverMutation,\n    MSelectOrderDriverVariables\n  >(MSelectOrderDriverDocument, baseOptions)\n}\n\nexport const MTransferOrderDocument = gql`\n  mutation MTransferOrder($orderId: ID!, $branchId: ID!) {\n    transferOrder(id: $orderId, companyBranch: $branchId) {\n      id\n    }\n  }\n`\n\nexport function useMTransferOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MTransferOrderMutation,\n    MTransferOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MTransferOrderMutation, MTransferOrderVariables>(\n    MTransferOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const QBranchDefeaultTimesDocument = gql`\n  query QBranchDefeaultTimes($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useQBranchDefeaultTimes(\n  variables?: QBranchDefeaultTimesVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QBranchDefeaultTimesQuery,\n    QBranchDefeaultTimesVariables\n  >,\n) {\n  return Hooks.useQuery<\n    QBranchDefeaultTimesQuery,\n    QBranchDefeaultTimesVariables\n  >(QBranchDefeaultTimesDocument, variables, baseOptions)\n}\n\nexport function useLazyQBranchDefeaultTimes(\n  options?: Hooks.LazyQueryHookOptions<\n    QBranchDefeaultTimesQuery,\n    QBranchDefeaultTimesVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QBranchDefeaultTimesQuery,\n    QBranchDefeaultTimesVariables\n  >(QBranchDefeaultTimesDocument, options)\n}\n\nexport const QIsBranchOpenDocument = gql`\n  query QIsBranchOpen($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      isOpen\n    }\n  }\n`\n\nexport function useQIsBranchOpen(\n  variables?: QIsBranchOpenVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QIsBranchOpenQuery,\n    QIsBranchOpenVariables\n  >,\n) {\n  return Hooks.useQuery<QIsBranchOpenQuery, QIsBranchOpenVariables>(\n    QIsBranchOpenDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQIsBranchOpen(\n  options?: Hooks.LazyQueryHookOptions<\n    QIsBranchOpenQuery,\n    QIsBranchOpenVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QIsBranchOpenQuery, QIsBranchOpenVariables>(\n    QIsBranchOpenDocument,\n    options,\n  )\n}\n\nexport const QOrderDetailDocument = gql`\n  query QOrderDetail($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      createdAt\n      deliverAt\n      delayedDeliveryTime\n      companyBranch {\n        id\n      }\n      customer {\n        emails {\n          ...FEmail\n        }\n        phones {\n          ...FPhone\n        }\n      }\n      customerOrdersCountCurrent\n      customerOrdersCountTotal\n      note\n      allAppliedRules\n      items {\n        ...FOrderDetailWare\n        sidedishes: sideDishes {\n          ...FOrderDetailWare\n        }\n      }\n      orderOrigin {\n        code\n        enum\n      }\n      ...FOrderTotals\n      ...FOrderTiming\n      ...FOrderDriver\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n  ${FOrderDetailWareFragmentDoc}\n  ${FOrderTotalsFragmentDoc}\n  ${FOrderTimingFragmentDoc}\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useQOrderDetail(\n  variables?: QOrderDetailVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QOrderDetailQuery,\n    QOrderDetailVariables\n  >,\n) {\n  return Hooks.useQuery<QOrderDetailQuery, QOrderDetailVariables>(\n    QOrderDetailDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQOrderDetail(\n  options?: Hooks.LazyQueryHookOptions<\n    QOrderDetailQuery,\n    QOrderDetailVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QOrderDetailQuery, QOrderDetailVariables>(\n    QOrderDetailDocument,\n    options,\n  )\n}\n\nexport const QOrderDriversDocument = gql`\n  query QOrderDrivers($orderId: ID!, $branchId: [ID!]!) {\n    order(id: $orderId) {\n      ...FOrderDriver\n    }\n    drivers(companyBranches: $branchId, onlyAvailable: true) {\n      ...FDriver\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n  ${FDriverFragmentDoc}\n`\n\nexport function useQOrderDrivers(\n  variables?: QOrderDriversVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QOrderDriversQuery,\n    QOrderDriversVariables\n  >,\n) {\n  return Hooks.useQuery<QOrderDriversQuery, QOrderDriversVariables>(\n    QOrderDriversDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQOrderDrivers(\n  options?: Hooks.LazyQueryHookOptions<\n    QOrderDriversQuery,\n    QOrderDriversVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QOrderDriversQuery, QOrderDriversVariables>(\n    QOrderDriversDocument,\n    options,\n  )\n}\n\nexport const QOrderListDocument = gql`\n  query QOrderList($branches: [ID!], $categories: [OrderStateCategoryEnum!]) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      id\n      ...FOrderStateCategory\n      ...FOrderTicker\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTickerFragmentDoc}\n`\n\nexport function useQOrderList(\n  variables?: QOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderListQuery, QOrderListVariables>,\n) {\n  return Hooks.useQuery<QOrderListQuery, QOrderListVariables>(\n    QOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQOrderList(\n  options?: Hooks.LazyQueryHookOptions<QOrderListQuery, QOrderListVariables>,\n) {\n  return Hooks.useLazyQuery<QOrderListQuery, QOrderListVariables>(\n    QOrderListDocument,\n    options,\n  )\n}\n\nexport const QOrderListCategoriesDocument = gql`\n  query QOrderListCategories {\n    categories: orderStateCategories {\n      label: code\n      enum\n    }\n  }\n`\n\nexport function useQOrderListCategories(\n  variables?: QOrderListCategoriesVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QOrderListCategoriesQuery,\n    QOrderListCategoriesVariables\n  >,\n) {\n  return Hooks.useQuery<\n    QOrderListCategoriesQuery,\n    QOrderListCategoriesVariables\n  >(QOrderListCategoriesDocument, variables, baseOptions)\n}\n\nexport function useLazyQOrderListCategories(\n  options?: Hooks.LazyQueryHookOptions<\n    QOrderListCategoriesQuery,\n    QOrderListCategoriesVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QOrderListCategoriesQuery,\n    QOrderListCategoriesVariables\n  >(QOrderListCategoriesDocument, options)\n}\n\nexport const QOrderMapDeliveriesDocument = gql`\n  query QOrderMapDeliveries($branches: [ID!]!) {\n    deliveries: drivers(companyBranches: $branches, onlyAvailable: true) {\n      ...FOrderMapDelivery\n    }\n  }\n\n  ${FOrderMapDeliveryFragmentDoc}\n`\n\nexport function useQOrderMapDeliveries(\n  variables?: QOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QOrderMapDeliveriesQuery,\n    QOrderMapDeliveriesVariables\n  >,\n) {\n  return Hooks.useQuery<QOrderMapDeliveriesQuery, QOrderMapDeliveriesVariables>(\n    QOrderMapDeliveriesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQOrderMapDeliveries(\n  options?: Hooks.LazyQueryHookOptions<\n    QOrderMapDeliveriesQuery,\n    QOrderMapDeliveriesVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QOrderMapDeliveriesQuery,\n    QOrderMapDeliveriesVariables\n  >(QOrderMapDeliveriesDocument, options)\n}\n\nexport const QOrderMapOrdersDocument = gql`\n  query QOrderMapOrders(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      ...FOrderMapOrder\n    }\n  }\n\n  ${FOrderMapOrderFragmentDoc}\n`\n\nexport function useQOrderMapOrders(\n  variables?: QOrderMapOrdersVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QOrderMapOrdersQuery,\n    QOrderMapOrdersVariables\n  >,\n) {\n  return Hooks.useQuery<QOrderMapOrdersQuery, QOrderMapOrdersVariables>(\n    QOrderMapOrdersDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQOrderMapOrders(\n  options?: Hooks.LazyQueryHookOptions<\n    QOrderMapOrdersQuery,\n    QOrderMapOrdersVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QOrderMapOrdersQuery, QOrderMapOrdersVariables>(\n    QOrderMapOrdersDocument,\n    options,\n  )\n}\n\nexport const QOrderReturnZonesDocument = gql`\n  query QOrderReturnZones($branches: [ID!]!) {\n    zones(enabled: true, companyBranches: $branches) {\n      id\n      name\n      zoneColor {\n        id\n        color\n      }\n      zoneType {\n        enum\n      }\n      geoPolygon {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useQOrderReturnZones(\n  variables?: QOrderReturnZonesVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QOrderReturnZonesQuery,\n    QOrderReturnZonesVariables\n  >,\n) {\n  return Hooks.useQuery<QOrderReturnZonesQuery, QOrderReturnZonesVariables>(\n    QOrderReturnZonesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQOrderReturnZones(\n  options?: Hooks.LazyQueryHookOptions<\n    QOrderReturnZonesQuery,\n    QOrderReturnZonesVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QOrderReturnZonesQuery, QOrderReturnZonesVariables>(\n    QOrderReturnZonesDocument,\n    options,\n  )\n}\n\nexport const QOrdersCategoryCountDocument = gql`\n  query QOrdersCategoryCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    ordersCategoryCount(\n      companyBranches: $branchesId\n      orderStateCategoriesOR: $categories\n    ) {\n      category: orderStateCategory {\n        enum\n      }\n      count: ordersCount\n    }\n  }\n`\n\nexport function useQOrdersCategoryCount(\n  variables?: QOrdersCategoryCountVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QOrdersCategoryCountQuery,\n    QOrdersCategoryCountVariables\n  >,\n) {\n  return Hooks.useQuery<\n    QOrdersCategoryCountQuery,\n    QOrdersCategoryCountVariables\n  >(QOrdersCategoryCountDocument, variables, baseOptions)\n}\n\nexport function useLazyQOrdersCategoryCount(\n  options?: Hooks.LazyQueryHookOptions<\n    QOrdersCategoryCountQuery,\n    QOrdersCategoryCountVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QOrdersCategoryCountQuery,\n    QOrdersCategoryCountVariables\n  >(QOrdersCategoryCountDocument, options)\n}\n\nexport const QOrderStateDocument = gql`\n  query QOrderState($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      deliveryType {\n        enum\n      }\n      isCancelable\n      isPriority\n      ...FOrderPaymentMethods\n      ...FOrderStateCategory\n    }\n    companyBranch(id: $branchId) {\n      id\n      allowedCategories\n    }\n  }\n\n  ${FOrderPaymentMethodsFragmentDoc}\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useQOrderState(\n  variables?: QOrderStateVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderStateQuery, QOrderStateVariables>,\n) {\n  return Hooks.useQuery<QOrderStateQuery, QOrderStateVariables>(\n    QOrderStateDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQOrderState(\n  options?: Hooks.LazyQueryHookOptions<QOrderStateQuery, QOrderStateVariables>,\n) {\n  return Hooks.useLazyQuery<QOrderStateQuery, QOrderStateVariables>(\n    QOrderStateDocument,\n    options,\n  )\n}\n\nexport const SDriverReturnsDocument = gql`\n  subscription SDriverReturns($branches: [ID!]!) {\n    update: updatedTransportationDeviceUser(companyBranches: $branches) {\n      device: transportationDeviceUser {\n        id\n        returning\n        returnZone {\n          id\n          name\n        }\n        user {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n`\n\nexport function useSDriverReturns(\n  variables?: SDriverReturnsVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SDriverReturnsSubscription,\n    SDriverReturnsVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SDriverReturnsSubscription,\n    SDriverReturnsVariables\n  >(SDriverReturnsDocument, variables, baseOptions)\n}\n\nexport const SOrderCallDocument = gql`\n  subscription SOrderCall {\n    call: updatedUserCallingCustomer {\n      eventId\n      phone\n      prefix\n      isRinging\n    }\n  }\n`\n\nexport function useSOrderCall(\n  variables?: SOrderCallVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderCallSubscription,\n    SOrderCallVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderCallSubscription, SOrderCallVariables>(\n    SOrderCallDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderListDocument = gql`\n  subscription SOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        id\n        ...FOrderStateCategory\n        ...FOrderTicker\n      }\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTickerFragmentDoc}\n`\n\nexport function useSOrderList(\n  variables?: SOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderListSubscription,\n    SOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderListSubscription, SOrderListVariables>(\n    SOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderMapDeliveriesDocument = gql`\n  subscription SOrderMapDeliveries($branches: [ID!]!) {\n    update: updatedTransportationDeviceUser(companyBranches: $branches) {\n      device: transportationDeviceUser {\n        ...FOrderMapDevice\n        user {\n          ...FOrderMapDriver\n        }\n      }\n    }\n  }\n\n  ${FOrderMapDeviceFragmentDoc}\n  ${FOrderMapDriverFragmentDoc}\n`\n\nexport function useSOrderMapDeliveries(\n  variables?: SOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >(SOrderMapDeliveriesDocument, variables, baseOptions)\n}\n\nexport const SOrderMapOrdersDocument = gql`\n  subscription SOrderMapOrders(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        ...FOrderMapOrder\n      }\n    }\n  }\n\n  ${FOrderMapOrderFragmentDoc}\n`\n\nexport function useSOrderMapOrders(\n  variables?: SOrderMapOrdersVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderMapOrdersSubscription,\n    SOrderMapOrdersVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrderMapOrdersSubscription,\n    SOrderMapOrdersVariables\n  >(SOrderMapOrdersDocument, variables, baseOptions)\n}\n\nexport const SOrdersCategoryCountDocument = gql`\n  subscription SOrdersCategoryCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    updatedCount: updatedOrderCategoryCount(\n      companyBranches: $branchesId\n      orderStateCategories: $categories\n    ) {\n      order {\n        id\n      }\n      nextCategory: newOrderStateCategory\n      prevCategory: oldOrderStateCategory\n    }\n  }\n`\n\nexport function useSOrdersCategoryCount(\n  variables?: SOrdersCategoryCountVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrdersCategoryCountSubscription,\n    SOrdersCategoryCountVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrdersCategoryCountSubscription,\n    SOrdersCategoryCountVariables\n  >(SOrdersCategoryCountDocument, variables, baseOptions)\n}\n\nexport const MFinancialReportCreateDocument = gql`\n  mutation MFinancialReportCreate($branchId: ID!) {\n    result: createFinancialReport(companyBranchId: $branchId) {\n      id\n    }\n  }\n`\n\nexport function useMFinancialReportCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MFinancialReportCreateMutation,\n    MFinancialReportCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MFinancialReportCreateMutation,\n    MFinancialReportCreateVariables\n  >(MFinancialReportCreateDocument, baseOptions)\n}\n\nexport const QClosureHistoryDocument = gql`\n  query QClosureHistory($branchId: ID!, $dateFrom: Date!, $dateTo: Date!) {\n    history: financialReports(\n      companyBranchId: $branchId\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n    ) {\n      id\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useQClosureHistory(\n  variables?: QClosureHistoryVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QClosureHistoryQuery,\n    QClosureHistoryVariables\n  >,\n) {\n  return Hooks.useQuery<QClosureHistoryQuery, QClosureHistoryVariables>(\n    QClosureHistoryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQClosureHistory(\n  options?: Hooks.LazyQueryHookOptions<\n    QClosureHistoryQuery,\n    QClosureHistoryVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QClosureHistoryQuery, QClosureHistoryVariables>(\n    QClosureHistoryDocument,\n    options,\n  )\n}\n\nexport const QClosureReportDocument = gql`\n  query QClosureReport($branchId: ID!, $reportId: ID!, $showReport: Boolean!) {\n    lastReport: lastFinancialReport(companyBranchId: $branchId)\n      @skip(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n    report: financialReport(report: $reportId) @include(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useQClosureReport(\n  variables?: QClosureReportVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QClosureReportQuery,\n    QClosureReportVariables\n  >,\n) {\n  return Hooks.useQuery<QClosureReportQuery, QClosureReportVariables>(\n    QClosureReportDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQClosureReport(\n  options?: Hooks.LazyQueryHookOptions<\n    QClosureReportQuery,\n    QClosureReportVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QClosureReportQuery, QClosureReportVariables>(\n    QClosureReportDocument,\n    options,\n  )\n}\n\nexport const QStatsOrdersDocument = gql`\n  query QStatsOrders($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      finishedOrders {\n        fees {\n          ...FPriceWithCurrency\n        }\n        onlinePayments {\n          ...FPriceWithCurrency\n        }\n        total {\n          ...FPriceWithCurrency\n        }\n        finishedCount: ordersCount\n        cancelledCount: ordersCanceledCount\n      }\n      orderStatisticsPlain\n    }\n  }\n\n  ${FPriceWithCurrencyFragmentDoc}\n`\n\nexport function useQStatsOrders(\n  variables?: QStatsOrdersVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QStatsOrdersQuery,\n    QStatsOrdersVariables\n  >,\n) {\n  return Hooks.useQuery<QStatsOrdersQuery, QStatsOrdersVariables>(\n    QStatsOrdersDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQStatsOrders(\n  options?: Hooks.LazyQueryHookOptions<\n    QStatsOrdersQuery,\n    QStatsOrdersVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QStatsOrdersQuery, QStatsOrdersVariables>(\n    QStatsOrdersDocument,\n    options,\n  )\n}\n\nexport const QStatsOrdersCountsDocument = gql`\n  query QStatsOrdersCounts($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      counts: finishedOrders {\n        finished: ordersCount\n        cancelled: ordersCanceledCount\n      }\n    }\n  }\n`\n\nexport function useQStatsOrdersCounts(\n  variables?: QStatsOrdersCountsVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QStatsOrdersCountsQuery,\n    QStatsOrdersCountsVariables\n  >,\n) {\n  return Hooks.useQuery<QStatsOrdersCountsQuery, QStatsOrdersCountsVariables>(\n    QStatsOrdersCountsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQStatsOrdersCounts(\n  options?: Hooks.LazyQueryHookOptions<\n    QStatsOrdersCountsQuery,\n    QStatsOrdersCountsVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QStatsOrdersCountsQuery,\n    QStatsOrdersCountsVariables\n  >(QStatsOrdersCountsDocument, options)\n}\n\nexport const QStatsOrdersListDocument = gql`\n  query QStatsOrdersList(\n    $filter: InputStatisticCreate!\n    $pagination: InputPaginationParams\n  ) {\n    stats: statistics(statisticsInput: $filter) {\n      orders: finishedOrders {\n        list: orders(includeCanceled: true, pagination: $pagination) {\n          ...FOrderTicker\n          ...FOrderStateCategory\n        }\n      }\n    }\n  }\n\n  ${FOrderTickerFragmentDoc}\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useQStatsOrdersList(\n  variables?: QStatsOrdersListVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QStatsOrdersListQuery,\n    QStatsOrdersListVariables\n  >,\n) {\n  return Hooks.useQuery<QStatsOrdersListQuery, QStatsOrdersListVariables>(\n    QStatsOrdersListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQStatsOrdersList(\n  options?: Hooks.LazyQueryHookOptions<\n    QStatsOrdersListQuery,\n    QStatsOrdersListVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QStatsOrdersListQuery, QStatsOrdersListVariables>(\n    QStatsOrdersListDocument,\n    options,\n  )\n}\n\nexport const QStatsSalesDocument = gql`\n  query QStatsSales($filter: InputStatisticCreate!) {\n    sales: statistics(statisticsInput: $filter) {\n      category: categoryStatisticsPlain\n      daily: dailyStatisticsPlain\n      delivery: deliveryStatisticsPlain\n      drivers: driversStatisticsPlain\n      vat: vatStatisticsPlain\n      deliveryZone: deliveryZoneStatisticsPlain\n    }\n  }\n`\n\nexport function useQStatsSales(\n  variables?: QStatsSalesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsSalesQuery, QStatsSalesVariables>,\n) {\n  return Hooks.useQuery<QStatsSalesQuery, QStatsSalesVariables>(\n    QStatsSalesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQStatsSales(\n  options?: Hooks.LazyQueryHookOptions<QStatsSalesQuery, QStatsSalesVariables>,\n) {\n  return Hooks.useLazyQuery<QStatsSalesQuery, QStatsSalesVariables>(\n    QStatsSalesDocument,\n    options,\n  )\n}\n\nexport const MUserMenuLanguageDocument = gql`\n  mutation MUserMenuLanguage($userId: ID!, $lang: LanguageEnum!) {\n    updateUser(id: $userId, user: { language: $lang }) {\n      id\n      language {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMUserMenuLanguage(\n  baseOptions?: Hooks.MutationHookOptions<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >(MUserMenuLanguageDocument, baseOptions)\n}\n\nexport const QUserMenuLanguagesDocument = gql`\n  query QUserMenuLanguages {\n    languages {\n      code\n      enum\n      rawCode\n    }\n  }\n`\n\nexport function useQUserMenuLanguages(\n  variables?: QUserMenuLanguagesVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QUserMenuLanguagesQuery,\n    QUserMenuLanguagesVariables\n  >,\n) {\n  return Hooks.useQuery<QUserMenuLanguagesQuery, QUserMenuLanguagesVariables>(\n    QUserMenuLanguagesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQUserMenuLanguages(\n  options?: Hooks.LazyQueryHookOptions<\n    QUserMenuLanguagesQuery,\n    QUserMenuLanguagesVariables\n  >,\n) {\n  return Hooks.useLazyQuery<\n    QUserMenuLanguagesQuery,\n    QUserMenuLanguagesVariables\n  >(QUserMenuLanguagesDocument, options)\n}\n\nexport const MCreateTransfersDocument = gql`\n  mutation MCreateTransfers(\n    $targetBranch: ID!\n    $transfers: [InputStockTransferCreate!]!\n  ) {\n    createStockItemTransfers(\n      destinationBranchId: $targetBranch\n      transfers: $transfers\n    ) {\n      id\n      quantity\n    }\n  }\n`\n\nexport function useMCreateTransfers(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateTransfersMutation,\n    MCreateTransfersVariables\n  >,\n) {\n  return Hooks.useMutation<MCreateTransfersMutation, MCreateTransfersVariables>(\n    MCreateTransfersDocument,\n    baseOptions,\n  )\n}\n\nexport const QMenuStockDepositDocument = gql`\n  query QMenuStockDeposit($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      id\n      code\n      plu\n      nameLabel: label\n      note\n      quantity\n      wareUnit {\n        ...FMenuWareUnit\n      }\n    }\n  }\n\n  ${FMenuWareUnitFragmentDoc}\n`\n\nexport function useQMenuStockDeposit(\n  variables?: QMenuStockDepositVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QMenuStockDepositQuery,\n    QMenuStockDepositVariables\n  >,\n) {\n  return Hooks.useQuery<QMenuStockDepositQuery, QMenuStockDepositVariables>(\n    QMenuStockDepositDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQMenuStockDeposit(\n  options?: Hooks.LazyQueryHookOptions<\n    QMenuStockDepositQuery,\n    QMenuStockDepositVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QMenuStockDepositQuery, QMenuStockDepositVariables>(\n    QMenuStockDepositDocument,\n    options,\n  )\n}\n\nexport const QStockForTransferDocument = gql`\n  query QStockForTransfer($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      id\n      code\n      plu\n      nameLabel: label\n      allowNegativeValue\n      quantity\n      wareUnit {\n        id\n        code\n      }\n    }\n  }\n`\n\nexport function useQStockForTransfer(\n  variables?: QStockForTransferVariables,\n  baseOptions?: Hooks.QueryHookOptions<\n    QStockForTransferQuery,\n    QStockForTransferVariables\n  >,\n) {\n  return Hooks.useQuery<QStockForTransferQuery, QStockForTransferVariables>(\n    QStockForTransferDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQStockForTransfer(\n  options?: Hooks.LazyQueryHookOptions<\n    QStockForTransferQuery,\n    QStockForTransferVariables\n  >,\n) {\n  return Hooks.useLazyQuery<QStockForTransferQuery, QStockForTransferVariables>(\n    QStockForTransferDocument,\n    options,\n  )\n}\n\nexport const QStockStatsDocument = gql`\n  query QStockStats($brandId: ID!) {\n    stockItems(company: $brandId) {\n      id\n      code\n      companyBranch {\n        id\n        name\n      }\n      plu\n      quantity\n      nameLabel: label\n      wareUnit {\n        id\n        code\n      }\n    }\n  }\n`\n\nexport function useQStockStats(\n  variables?: QStockStatsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStockStatsQuery, QStockStatsVariables>,\n) {\n  return Hooks.useQuery<QStockStatsQuery, QStockStatsVariables>(\n    QStockStatsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQStockStats(\n  options?: Hooks.LazyQueryHookOptions<QStockStatsQuery, QStockStatsVariables>,\n) {\n  return Hooks.useLazyQuery<QStockStatsQuery, QStockStatsVariables>(\n    QStockStatsDocument,\n    options,\n  )\n}\n\nexport const MZoneCreateDocument = gql`\n  mutation MZoneCreate(\n    $branchId: ID!\n    $points: [InputGeoPointCreate!]\n    $type: ZoneTypeEnum!\n  ) {\n    createZone(\n      zone: { companyBranch: $branchId, geoPolygon: $points, zoneType: $type }\n    ) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useMZoneCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MZoneCreateMutation,\n    MZoneCreateVariables\n  >,\n) {\n  return Hooks.useMutation<MZoneCreateMutation, MZoneCreateVariables>(\n    MZoneCreateDocument,\n    baseOptions,\n  )\n}\n\nexport const MZoneDeleteDocument = gql`\n  mutation MZoneDelete($zoneId: ID!) {\n    deleteZone: destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n\nexport function useMZoneDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    MZoneDeleteMutation,\n    MZoneDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<MZoneDeleteMutation, MZoneDeleteVariables>(\n    MZoneDeleteDocument,\n    baseOptions,\n  )\n}\n\nexport const MZoneUpdateDocument = gql`\n  mutation MZoneUpdate($zoneId: ID!, $update: InputZoneUpdate!) {\n    updateZone(id: $zoneId, zone: $update) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useMZoneUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MZoneUpdateMutation,\n    MZoneUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<MZoneUpdateMutation, MZoneUpdateVariables>(\n    MZoneUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const MZoneUpdatePriorityDocument = gql`\n  mutation MZoneUpdatePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport function useMZoneUpdatePriority(\n  baseOptions?: Hooks.MutationHookOptions<\n    MZoneUpdatePriorityMutation,\n    MZoneUpdatePriorityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MZoneUpdatePriorityMutation,\n    MZoneUpdatePriorityVariables\n  >(MZoneUpdatePriorityDocument, baseOptions)\n}\n\nexport const QZoneColorsDocument = gql`\n  query QZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n\nexport function useQZoneColors(\n  variables?: QZoneColorsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QZoneColorsQuery, QZoneColorsVariables>,\n) {\n  return Hooks.useQuery<QZoneColorsQuery, QZoneColorsVariables>(\n    QZoneColorsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQZoneColors(\n  options?: Hooks.LazyQueryHookOptions<QZoneColorsQuery, QZoneColorsVariables>,\n) {\n  return Hooks.useLazyQuery<QZoneColorsQuery, QZoneColorsVariables>(\n    QZoneColorsDocument,\n    options,\n  )\n}\n\nexport const QZoneFormDocument = gql`\n  query QZoneForm($zoneId: ID!) {\n    zone(id: $zoneId) {\n      ...FZoneInForm\n    }\n  }\n\n  ${FZoneInFormFragmentDoc}\n`\n\nexport function useQZoneForm(\n  variables?: QZoneFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<QZoneFormQuery, QZoneFormVariables>,\n) {\n  return Hooks.useQuery<QZoneFormQuery, QZoneFormVariables>(\n    QZoneFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQZoneForm(\n  options?: Hooks.LazyQueryHookOptions<QZoneFormQuery, QZoneFormVariables>,\n) {\n  return Hooks.useLazyQuery<QZoneFormQuery, QZoneFormVariables>(\n    QZoneFormDocument,\n    options,\n  )\n}\n\nexport const QZoneListDocument = gql`\n  query QZoneList($branches: [ID!]!) {\n    zones(companyBranches: $branches) {\n      ...FZoneInList\n    }\n  }\n\n  ${FZoneInListFragmentDoc}\n`\n\nexport function useQZoneList(\n  variables?: QZoneListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QZoneListQuery, QZoneListVariables>,\n) {\n  return Hooks.useQuery<QZoneListQuery, QZoneListVariables>(\n    QZoneListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useLazyQZoneList(\n  options?: Hooks.LazyQueryHookOptions<QZoneListQuery, QZoneListVariables>,\n) {\n  return Hooks.useLazyQuery<QZoneListQuery, QZoneListVariables>(\n    QZoneListDocument,\n    options,\n  )\n}\n\n// Generated in 2019-11-27T08:55:44+01:00\n","import { Trans } from '@lingui/macro'\nimport { Dialog } from '@material-ui/core'\nimport { WarningTwoTone } from '@material-ui/icons'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport connectionWarningSound from '../assets/connectionWarning.mp3'\nimport { isNetworkOffline } from '../helpers/offline'\nimport { useIntervalSound } from '../hooks/useIntervalSound'\nimport { Colors } from '../styling'\n\nconst MessageStyled = styled.div`\n  padding: 1rem;\n  background-color: ${Colors.red} !important;\n  font-size: 2rem;\n\n  & svg {\n    position: relative;\n    top: 0.3rem;\n    padding-right: 0.5rem;\n  }\n`\n\nexport const ConnectionWarning = observer(() => {\n  const audio = useIntervalSound({\n    soundUrl: connectionWarningSound,\n    intervalSec: 30,\n    shouldPlay: isNetworkOffline(),\n  })\n  return (\n    <>\n      {audio}\n      <Dialog\n        open={isNetworkOffline()}\n        disableBackdropClick={true}\n        disableEscapeKeyDown={true}\n      >\n        <MessageStyled>\n          <WarningTwoTone fontSize=\"large\" />\n          <Trans>Internet connection is not available</Trans>\n        </MessageStyled>\n      </Dialog>\n    </>\n  )\n})\n","import React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { logRouting } from '../helpers/logger'\n\nexport const LogRoute: React.FC = () => {\n  if (process.env.NODE_ENV === 'development') {\n    return (\n      <Route>\n        {({ location }) => {\n          logRouting(`at ${location.pathname}`)\n          return null\n        }}\n      </Route>\n    )\n  } else {\n    return null\n  }\n}\n","import debug from 'debug'\nimport { when } from 'mobx'\nimport React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { WithRoot } from '../atoms/WithRoot'\n\nconst log = debug('routing')\n\nexport const RedirectAfterLogin = () => (\n  <Route\n    children={({ location, history }) => (\n      <WithRoot\n        render={root => {\n          if (!root.auth.isAuthenticatedUser) {\n            const route = (location.state && location.state.origin) || '/'\n            const waitForAuthentication = () => root.auth.isAuthenticated\n            const redirectAfterLogin = () => {\n              history.replace(route)\n            }\n            when(waitForAuthentication, redirectAfterLogin)\n            log('will redirect to %s when auth', route)\n          }\n          return null\n        }}\n      />\n    )}\n  />\n)\n","import { useApolloClient } from '@speedlo/graphql'\nimport React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { RedirectToLogin } from './RedirectToLogin'\n\nexport const RedirectAfterLogout = () => {\n  const { auth } = useRoot()\n  const apolloClient = useApolloClient()\n  if (auth.isAuthenticated) {\n    auth.root.invalidate()\n    apolloClient.cache.reset()\n    return <RedirectToLogin useOrigin={false} />\n  }\n  return <Redirect to=\"/\" />\n}\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport PageLoader from '../atoms/PageLoader'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { ROUTE_CUSTOMER_SCREEN_SETUP } from '../segments/customerscreen/customerscreen.routes'\nimport {\n  ROUTE_MAIN,\n  ROUTE_SUPPORT,\n} from '../segments/dashboard/dashboard.routes'\nimport { ROUTE_KITCHEN } from '../segments/kitchen/kitchen.routes'\nimport {\n  ROUTE_AUTH_LOGIN,\n  ROUTE_AUTH_LOGOUT,\n  ROUTE_AUTH_RECOVERY,\n  ROUTE_AUTH_REGISTER,\n  ROUTE_AUTH_RESET_PASSWORD,\n} from '../segments/login/login.routes'\nimport { ROUTE_ORDER_OVERVIEW } from '../segments/order/order.routes'\nimport { ROUTE_OVERVIEW_DASHBOARD } from '../segments/overview/overview.routes'\nimport { ROUTE_SETTINGS } from '../segments/settings/settings.routes'\nimport { ROUTE_STOCK } from '../segments/stock/stock.routes'\nimport { LogRoute } from './LogRoute'\nimport { RedirectAfterLogin } from './RedirectAfterLogin'\nimport { RedirectAfterLogout } from './RedirectAfterLogout'\nimport { SecureRoute } from './SecureRoute'\n\nconst PasswordLoginRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordLoginRoute'),\n)\n\nconst PasswordChangeRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordChangeRoute'),\n)\n\nconst PasswordResetRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordResetRoute'),\n)\n\nconst MainDashboardPage = React.lazy(() =>\n  import('../segments/dashboard/pages/MainDashboardPage'),\n)\n\nconst OrderRouting = React.lazy(() =>\n  import('../segments/order/routes/OrderRouting'),\n)\n\nconst KitchenRouting = React.lazy(() =>\n  import('../segments/kitchen/routes/KitchenRouting'),\n)\n\nconst SettingsRouting = React.lazy(() =>\n  import('../segments/settings/routes/SettingsRouting'),\n)\n\nconst OverviewRouting = React.lazy(() =>\n  import('../segments/overview/routes/OverviewRouting'),\n)\n\nconst StockRouting = React.lazy(() =>\n  import('../segments/stock/routes/StockRouting'),\n)\n\nconst SupportPage = React.lazy(() =>\n  import('../segments/dashboard/pages/SupportPage'),\n)\n\nconst CustomerScreenRouting = React.lazy(() =>\n  import('../segments/customerscreen/routes/CustomerScreenRouting'),\n)\n\nexport const Routing = () => (\n  <React.Suspense fallback={<PageLoader />}>\n    <LogRoute />\n    <RedirectAfterLogin />\n    <Switch>\n      <SecureRoute path={ROUTE_MAIN} exact component={MainDashboardPage} />\n      <Route path={ROUTE_AUTH_LOGIN} component={PasswordLoginRoute} />\n      <Route\n        exact\n        path={ROUTE_AUTH_RESET_PASSWORD}\n        component={PasswordResetRoute}\n      />\n      <Route\n        exact\n        path={`${ROUTE_AUTH_RECOVERY}/:token`}\n        component={PasswordChangeRoute}\n      />\n      <Route\n        exact\n        path={`${ROUTE_AUTH_REGISTER}/:token`}\n        component={PasswordChangeRoute}\n      />\n      <SecureRoute\n        path={ROUTE_OVERVIEW_DASHBOARD}\n        component={OverviewRouting}\n      />\n      <SecureRoute path={ROUTE_STOCK} component={StockRouting} />\n      <SecureRoute path={ROUTE_ORDER_OVERVIEW} component={OrderRouting} />\n      <SecureRoute path={ROUTE_KITCHEN} component={KitchenRouting} />\n      <SecureRoute\n        path={ROUTE_CUSTOMER_SCREEN_SETUP}\n        component={CustomerScreenRouting}\n      />\n      <SecureRoute path={ROUTE_SETTINGS} component={SettingsRouting} />\n      <Route path={ROUTE_SUPPORT} component={SupportPage} />\n      <Route path={ROUTE_AUTH_LOGOUT} component={RedirectAfterLogout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </React.Suspense>\n)\n","import { Trans } from '@lingui/macro'\nimport { Autorenew, ContactSupport, Warning } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { Sizer } from '../atoms/Sizer'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\nconst IconStyled = styled.div`\n  color: ${Colors.orange};\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ninterface IProps {\n  onFeedback(): void\n}\n\nexport const ErrorPage: React.FC<IProps> = ({ onFeedback }) => (\n  <FullPageLayout\n    pageTitle={i18n.t`Application error`}\n    hideLogoutWidget={true}\n    showHomeButton={false}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          We are sorry, but there is an unexpected problem in the app. Our team\n          was notified and will fix this soon.\n        </Trans>\n      </h3>\n      <Center>\n        <IconStyled>\n          <Warning style={{ fontSize: '5rem' }} />\n        </IconStyled>\n        <Sizer width={20}>\n          <TouchButton onClick={onFeedback}>\n            <ContactSupport />\n            <Trans>Send feedback</Trans>\n          </TouchButton>\n        </Sizer>\n        <Sizer width={20}>\n          <TouchButton onClick={() => window.location.reload()}>\n            <Autorenew />\n            <Trans>Restart application</Trans>\n          </TouchButton>\n        </Sizer>\n      </Center>\n    </Card>\n  </FullPageLayout>\n)\n","import { Trans } from '@lingui/macro'\nimport { Cached, OfflineBolt } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { Sizer } from '../atoms/Sizer'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { ROUTE_SUPPORT } from '../segments/dashboard/dashboard.routes'\nimport { Colors } from '../styling'\n\nconst IconStyled = styled.div`\n  margin-top: 2rem;\n  color: ${Colors.red};\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ninterface IProps {\n  onRetry(): void\n}\n\nexport const ServiceUnreachablePage: React.FC<IProps> = ({ onRetry }) => (\n  <FullPageLayout\n    pageTitle={i18n.t`Service unreachable`}\n    useBackButton={false}\n    hideLogoutWidget={true}\n    showHomeButton={false}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          Connection to external service is not possible at the moment. Please\n          try again later or <a href={ROUTE_SUPPORT}>contact our support</a>.\n        </Trans>\n      </h3>\n      <Center>\n        <IconStyled>\n          <OfflineBolt style={{ fontSize: '5rem' }} />\n        </IconStyled>\n        <Sizer width={20}>\n          <TouchButton onClick={onRetry} icon={Cached}>\n            {' '}\n            <Trans>Retry the connection</Trans>\n          </TouchButton>\n        </Sizer>\n      </Center>\n    </Card>\n  </FullPageLayout>\n)\n","import {\n  ApolloDefender,\n  ApolloOperationError,\n  isChunkError,\n  isNetworkUnreachableError,\n} from '@speedlo/graphql'\nimport { flushSentry, Sentry } from '@speedlo/sentry'\nimport { SillyErrorBoundary } from '@speedlo/tools'\nimport { isApolloError } from 'apollo-client'\nimport React from 'react'\n\nimport { logError } from '../helpers/logger'\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { i18n } from '../i18n'\nimport { ErrorPage } from '../pages/ErrorPage'\nimport { ServiceUnreachablePage } from '../pages/ServiceUnreachablePage'\n\nexport type ErrorKind = 'none' | 'serviceUnreachable' | 'otherError'\n\nconst makeError = (message: string) =>\n  `${message} ${i18n.t`Our team was notified about the issue.`}`\n\nexport const DefaultErrorHandler: React.FC = ({ children }) => {\n  const { enqueueWarning, enqueueError } = useSnackBar()\n\n  const [errorKind, setErrorKind] = React.useState<ErrorKind>('none')\n\n  const onRetry = React.useCallback(() => {\n    setErrorKind('none')\n  }, [])\n\n  const onUnhandledError = React.useCallback((error: Error) => {\n    if (process.env.NODE_ENV === 'development') {\n      logError(error.message)\n    }\n    if (isChunkError(error)) {\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Debug)\n        Sentry.captureException(error)\n      })\n      flushSentry().then(() => window.location.reload())\n      return\n    }\n    if (isApolloError(error) && isNetworkUnreachableError(error)) {\n      setErrorKind('serviceUnreachable')\n      return\n    }\n    Sentry.captureException(error)\n    setErrorKind('otherError')\n  }, [])\n\n  const onNetworkError = React.useCallback(\n    (error: Error, isUnreachable: boolean) => {\n      if (isUnreachable) {\n        setErrorKind('serviceUnreachable')\n      } else {\n        if (process.env.NODE_ENV === 'development') {\n          logError(error)\n        }\n        enqueueError(\n          makeError(\n            i18n.t`Unexpected error occured in communication with service.`,\n          ),\n        )\n      }\n    },\n    [enqueueError],\n  )\n\n  const onOperationError = React.useCallback(\n    (error: ApolloOperationError) => {\n      logError(error.operationName, error.message)\n      enqueueError(\n        makeError(i18n.t`Unexpected error occured while sending a request.`),\n      )\n    },\n    [enqueueError],\n  )\n\n  const onUserErrors = React.useCallback(\n    (messages: RoA<string>) => {\n      messages.forEach(enqueueWarning)\n    },\n    [enqueueWarning],\n  )\n\n  const render = () => {\n    switch (errorKind) {\n      case 'serviceUnreachable': {\n        return <ServiceUnreachablePage onRetry={onRetry} />\n      }\n      case 'otherError': {\n        return <ErrorPage onFeedback={showFeedback} />\n      }\n      default: {\n        return children\n      }\n    }\n  }\n\n  return (\n    <ApolloDefender\n      onNetworkError={onNetworkError}\n      onUserErrors={onUserErrors}\n      onOperationError={onOperationError}\n    >\n      <SillyErrorBoundary onError={onUnhandledError}>\n        {render()}\n      </SillyErrorBoundary>\n    </ApolloDefender>\n  )\n}\n\nfunction showFeedback() {\n  Sentry.showReportDialog({\n    labelClose: i18n.t`Close`,\n    title: i18n.t`Unexpected error in the app`,\n  })\n}\n","import React from 'react'\nimport { Provider as GoodByeProvider } from 'react-goodbye'\nimport { BrowserRouter } from 'react-router-dom'\n\ninterface IProps {}\n\nexport const Router: React.FC<IProps> = ({ children }) => (\n  <GoodByeProvider>\n    {({ handleGetUserConfirm }) => (\n      <BrowserRouter getUserConfirmation={handleGetUserConfirm}>\n        {children}\n      </BrowserRouter>\n    )}\n  </GoodByeProvider>\n)\n","import { css } from 'emotion'\nimport { SnackbarProvider } from 'notistack'\nimport React from 'react'\n\nimport { Colors, FontSizes } from '../styling'\n\ninterface IProps {}\n\nconst successStyle = css`\n  background: ${Colors.green} !important;\n  font-size: ${FontSizes.InfoMessageFontSize} !important;\n`\nconst errorStyle = css`\n  background: ${Colors.red};\n  font-size: ${FontSizes.InfoMessageFontSize} !important;\n`\nconst warningStyle = css`\n  background: ${Colors.orange};\n  font-size: ${FontSizes.InfoMessageFontSize} !important;\n`\nexport const snackStyles = {\n  variantSuccess: successStyle,\n  variantInfo: successStyle,\n  variantError: errorStyle,\n  variantWarning: warningStyle,\n}\n\nexport const SnackProvider: React.FC<IProps> = ({ children }) => (\n  <SnackbarProvider\n    maxSnack={3}\n    classes={snackStyles}\n    anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\n  >\n    {children}\n  </SnackbarProvider>\n)\n","import { Button, Snackbar } from '@material-ui/core'\nimport { SnackbarProps } from '@material-ui/core/Snackbar'\nimport { HOUR, MINUTE, SECOND, useInterval, useTimer } from '@speedlo/hooks'\nimport { updateWorker } from '@speedlo/tools'\nimport { addMilliseconds, formatDistanceStrict } from 'date-fns'\nimport { useObservable, useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { logUpdate } from '../helpers/logger'\nimport { i18n } from '../i18n'\nimport { snackStyles } from './SnackProvider'\n\nexport interface IProps {\n  onRestart?(): void\n  autoUpdateDelay?: number\n  postponeTimeout?: number\n  updateCheckInterval?: number\n  serviceWorker?: ServiceWorkerContainer\n}\n\nexport const UpdateHandler: React.FC<IProps> = ({\n  onRestart = () => window.location.assign('/'),\n  autoUpdateDelay = 20 * SECOND,\n  postponeTimeout = 2 * MINUTE,\n  updateCheckInterval = process.env.REACT_APP_STAGE === 'prod'\n    ? 1 * HOUR\n    : 5 * MINUTE,\n  serviceWorker = window.navigator.serviceWorker,\n}) => {\n  const registrationWorkerRef = React.useRef<ServiceWorkerRegistration | null>(\n    null,\n  )\n  const updateWorkerRef = React.useRef<ServiceWorker | null>(null)\n\n  const state = useObservable({ updatePending: false, applyingUpdate: false })\n\n  useInterval(() => {\n    if (registrationWorkerRef.current) {\n      logUpdate('checking...')\n      registrationWorkerRef.current.update().catch(() => {\n        // don't really care if check fails\n      })\n    }\n  }, updateCheckInterval)\n\n  React.useEffect(() => {\n    const onMessage = (event: MessageEvent) => {\n      if (event.data === 'update-applied') {\n        logUpdate('restarting to apply...')\n        onRestart()\n      }\n    }\n    if (serviceWorker) {\n      serviceWorker.addEventListener('message', onMessage)\n      return () => {\n        serviceWorker.removeEventListener('message', onMessage)\n      }\n    } else {\n      logUpdate('serviceWorker is not supported')\n      return () => {\n        /* noop */\n      }\n    }\n  }, [onRestart, serviceWorker])\n\n  React.useEffect(() => {\n    if (window.navigator.userAgent.indexOf('; wv') > 0) {\n      // disable service worker on POS devices\n      updateWorker.unregister()\n      return\n    }\n\n    const init = updateWorker.register({\n      onInit: reg => {\n        registrationWorkerRef.current = reg\n      },\n      onUpdate: sw => {\n        updateWorkerRef.current = sw\n        state.updatePending = true\n        logUpdate('new update is available')\n      },\n    })\n    // service worker is normally using load event, but since this\n    // done after the load, it has to be triggered manually\n    init()\n  }, [state])\n\n  const onCancel = React.useCallback(() => {\n    logUpdate('user postponed')\n    state.updatePending = false\n    setTimeout(() => {\n      logUpdate('reminding update to user again')\n      state.updatePending = true\n    }, postponeTimeout)\n  }, [postponeTimeout, state])\n\n  const onConfirm = React.useCallback(() => {\n    state.updatePending = false\n    if (updateWorkerRef.current) {\n      logUpdate('user confirmed')\n      state.applyingUpdate = true\n      updateWorkerRef.current.postMessage('apply-update')\n    }\n  }, [state])\n\n  if (state.applyingUpdate && process.env.NODE_ENV !== 'test') {\n    throw new Promise(() => {\n      // Suspense will catch it and show loader while the update is being applied\n    })\n  }\n\n  return useObserver(() =>\n    state.updatePending ? (\n      <UpdateSnack\n        autoHideDuration={autoUpdateDelay}\n        onCancel={onCancel}\n        onConfirm={onConfirm}\n      />\n    ) : null,\n  )\n}\n\ninterface IUpdateSnackProps extends Omit<SnackbarProps, 'open'> {\n  autoHideDuration: number\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport function UpdateSnack(props: IUpdateSnackProps) {\n  const { onConfirm, onCancel, ...rest } = props\n  const now = useTimer({ interval: SECOND, enabled: true })\n  const [endTime] = React.useState(() =>\n    addMilliseconds(now, props.autoHideDuration),\n  )\n  const remainingSeconds = formatDistanceStrict(endTime, now)\n\n  React.useEffect(() => {\n    if (now >= endTime) {\n      onConfirm()\n    }\n  }, [now, endTime, onConfirm])\n\n  return (\n    <Snackbar\n      open={true}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center',\n      }}\n      className={snackStyles.variantInfo}\n      message={\n        <span data-testid=\"message\">{i18n.t`Application will be restarted in ${remainingSeconds} to apply available update.`}</span>\n      }\n      disableWindowBlurListener={true}\n      action={[\n        <Button\n          key=\"later\"\n          color=\"secondary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"postpone-button\"\n          onClick={onCancel}\n        >\n          {i18n.t`Postpone update`}\n        </Button>,\n        <Button\n          key=\"confirm\"\n          color=\"primary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"confirm-button\"\n          onClick={onConfirm}\n        >\n          {i18n.t`Restart now`}\n        </Button>,\n      ]}\n      {...rest}\n    />\n  )\n}\n","import { Sentry } from '@speedlo/sentry'\nimport { intercept } from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { useQUserBootstrap } from '../graph/generated'\nimport { formatFullName } from '../helpers/formats'\nimport { RM } from '../tools/ramda'\n\nexport const UserBootstrap = observer(() => {\n  const { auth: authModel, user: userModel } = useRoot()\n\n  const { data } = useQUserBootstrap(\n    { userId: authModel.userId! },\n    { skip: !authModel.isAuthenticatedUser },\n  )\n\n  // UserModel needs to be reset whenever auth user changes\n  React.useEffect(() =>\n    intercept(authModel, 'userId', change => {\n      userModel.invalidate()\n      return change\n    }),\n  )\n\n  React.useEffect(() => {\n    if (userModel.isLoaded) {\n      return\n    }\n\n    if (!authModel.userId) {\n      userModel.finishBootstrap()\n      Sentry.configureScope(scope => {\n        scope.setUser({\n          id: undefined,\n          username: undefined,\n        })\n        scope.setExtra('roles', [])\n        scope.setExtra('branches', [])\n      })\n    }\n\n    if (authModel.isAuthenticatedUser) {\n      if (!data) {\n        return\n      }\n      // ? Should be removed when BE drops language caching\n      if (userModel.language === null) {\n        userModel.setLanguage(data.user.language.rawCode)\n      }\n      userModel.applyUserData(data.user)\n      userModel.applyAccess(data.access)\n      userModel.applyPermissions(data.permissions)\n      userModel.finishBootstrap()\n      Sentry.configureScope(scope => {\n        scope.setUser({\n          id: authModel.userId!,\n          username: formatFullName(data.user),\n        })\n        scope.setExtras({\n          roles: data.user.roles.map(RM.prop('name')),\n          branches: data.user.branches.map(RM.prop('id')),\n        })\n      })\n    }\n  })\n\n  return null\n})\n","import { useReleaseCabinet } from '@speedlo/tools/dist/useReleaseCabinet'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ConnectionWarning } from '../atoms/ConnectionWarning'\nimport PageLoader from '../atoms/PageLoader'\nimport { useRoot } from '../atoms/RootProvider'\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { Routing } from '../routes/Routing'\nimport { DefaultErrorHandler } from './DefaultErrorHandler'\nimport { Router } from './Router'\nimport { UpdateHandler } from './UpdateHandler'\nimport { UserBootstrap } from './UserBootstrap'\n\nexport const AppMain: React.FC = () => {\n  const { user } = useRoot()\n\n  const { enqueueInfo } = useSnackBar()\n  useReleaseCabinet(enqueueInfo)\n\n  return (\n    <DefaultErrorHandler>\n      <UserBootstrap />\n      <UpdateHandler />\n      <ConnectionWarning />\n      <React.Suspense fallback={<PageLoader />}>\n        <Router>\n          <Observer>\n            {() => (user.isReady ? <Routing /> : <PageLoader />)}\n          </Observer>\n        </Router>\n      </React.Suspense>\n    </DefaultErrorHandler>\n  )\n}\n","import { useSentryInit } from '@speedlo/sentry'\nimport React from 'react'\n\nimport { RootProvider } from '../atoms/RootProvider'\nimport { appConfig } from '../config'\nimport { I18nManager } from '../i18n'\nimport { SnackProvider } from './SnackProvider'\n\nexport const AppProvider: React.FC = ({ children }) => {\n  useSentryInit(appConfig.sentryDSN)\n  return (\n    <RootProvider>\n      <I18nManager>\n        <SnackProvider>{children}</SnackProvider>\n      </I18nManager>\n    </RootProvider>\n  )\n}\n","import { createGlobalStyle } from 'styled-components'\n\nimport backgroundImage from '../assets/bg_antracit.jpg'\nimport { Colors } from '../styling'\n\nexport const GlobalStyles = createGlobalStyle`\n  body,\n  input,\n  textarea,\n  select,\n  button {\n    margin: 0;\n    padding: 0;\n    font-family: 'Open Sans', sans-serif;\n    font-size: 16px;\n  }\n  body {\n    background-color: #322e2d;\n    color: ${Colors.white};\n    background-image: url(${backgroundImage});\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-size: cover;\n\n    @media print {\n      color: ${Colors.black};\n      background: ${Colors.white};\n    }\n  }\n\n  input {\n    padding: 0.5rem;\n    border: 1px solid #95989a;\n    border-radius: 0.25rem;\n  }\n\n  /* react-grid disabling animation */\n  .react-grid-item {\n    transition: all 0s;\n  }\n\n  /* apply a natural box layout model to all elements, but allowing components to change */\n  html {\n    box-sizing: border-box;\n  }\n  *,\n  *:before,\n  *:after {\n    box-sizing: inherit;\n  }\n`\n","import './enableDebug'\n\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport { AppMain } from './app/AppMain'\nimport { AppProvider } from './app/AppProvider'\nimport { GlobalStyles } from './app/GlobalStyles'\nimport PageLoader from './atoms/PageLoader'\n\nconst Main = () => {\n  return (\n    <React.Suspense fallback={<PageLoader />}>\n      <>\n        <GlobalStyles />\n        <AppProvider>\n          <AppMain />\n        </AppProvider>\n      </>\n    </React.Suspense>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nrender(<Main />, rootElement)\n"],"sourceRoot":""}