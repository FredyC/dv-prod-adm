{"version":3,"sources":["segments/overview/routes/OverviewRoutes.tsx","atoms/IconLine.tsx","atoms/CanMutate.tsx","atoms/SelectControl.tsx","atoms/Headline.tsx","atoms/Sizer.tsx","atoms/FlexRowSingle.tsx","molecules/PageLayoutFullHeightItem.tsx","atoms/NoAccess.tsx","atoms/CanQuery.tsx","atoms/FlexColumn.tsx","atoms/Price.tsx","atoms/HorizontalSeparator.tsx","hooks/useSnackBar.ts","hooks/useRouterContext.ts","atoms/ScrollArea.tsx","hooks/useGuardedMutation.tsx","atoms/SelectControlFlat.tsx","molecules/FormSubmit.tsx","helpers/form.ts","organisms/CompanyBranchPicker.tsx","atoms/CardDock.tsx","molecules/CompanyBranchDropdown.tsx","hooks/useExecutableQuery.ts","atoms/CardListTitle.tsx","molecules/DeliveryTimeDialog.tsx","atoms/MarginBox.tsx","atoms/CompanyBranch.tsx","atoms/CursorContainer.tsx","molecules/CompanyBranchFlatSelect.tsx","molecules/PageLayoutItem.tsx","atoms/LinkStyled.tsx","segments/order/atoms/OrderTimeLabel.tsx","atoms/DateTimeFormatProvider.tsx","atoms/RelativeLink.tsx","segments/order/atoms/DeliveryTimeBadge.tsx","atoms/TimeBadge.tsx","atoms/DeliveryMinutes.tsx","atoms/FlexAutoHeight.tsx","segments/order/molecules/OrderTicker.graphql.ts","segments/order/atoms/OrderBox.tsx","atoms/ObserverWhen.tsx","segments/order/molecules/OrderTicker.tsx","segments/order/atoms/CustomerIdentity.tsx","segments/order/organisms/OrderDetail.tsx","segments/order/molecules/ContactLines.tsx","segments/order/molecules/NoteLine.tsx","segments/order/molecules/OrderCountLine.tsx","segments/order/molecules/OrderDetailTotals.tsx","segments/order/molecules/OrderWarePriceLine.tsx","segments/order/molecules/OrderIdLine.tsx","segments/order/molecules/OrderRuleLines.tsx","segments/order/molecules/OrderStats.tsx","segments/order/molecules/OrderTimeLine.tsx","segments/order/molecules/OrderWareList.tsx","segments/order/molecules/OrderWareLine.tsx","segments/order/organisms/OrderDetail.graphql.ts","segments/order/organisms/OrderStateFlow.tsx","segments/order/molecules/OrderCancelButton.tsx","molecules/ConfirmButton.tsx","segments/order/molecules/OrderDeliveryToPickup.tsx","segments/order/molecules/OrderStateButton.tsx","segments/order/molecules/OrderStateDeliver.tsx","segments/order/atoms/OrderDriverSelect.tsx","segments/order/molecules/OrderStateFlowContainer.tsx","segments/order/molecules/OrderStateTimeNotification.tsx","segments/order/organisms/OrderStateFlow.graphql.ts","atoms/FormInputDate.tsx","atoms/FlexRow.tsx","atoms/MonospaceOutput.tsx","segments/overview/organisms/OrdersStatisticsLoader.tsx","segments/overview/organisms/ClosureHistoryLoader.tsx","segments/overview/molecules/ClosureStatisticsFilter.tsx","segments/overview/molecules/ClosureCurrentButton.tsx","segments/overview/molecules/StatisticsBranchFilter.tsx","segments/overview/molecules/StatisticsFilter.tsx","segments/overview/organisms/DailyStatisticsLoader.tsx","segments/overview/hooks/createStatisticsQuery.ts","segments/overview/pages/ClosureHistoryPage.tsx","segments/overview/molecules/ClosureHistoryFilter.tsx","segments/overview/molecules/ClosureHistoryTable.tsx","segments/overview/organisms/ClosureHistoryLoader.graphql.ts","segments/overview/pages/ClosurePage.tsx","segments/overview/organisms/ClosureStatisticsContent.tsx","segments/overview/organisms/ClosureStatisticsContent.graphql.ts","segments/overview/organisms/ClosureStatisticsControl.tsx","segments/overview/molecules/ClosureHistoryButton.tsx","segments/overview/molecules/ClosureSubmitButton.tsx","segments/overview/pages/DailyStatisticsPage.tsx","atoms/FormInputDateTime.tsx","segments/overview/organisms/DailyStatisticsContent.tsx","segments/overview/organisms/DailyStatisticsLoader.graphql.ts","segments/overview/pages/OrdersStatisticsPage.tsx","segments/overview/organisms/OrdersStatisticsList.tsx","segments/overview/organisms/OrdersStatisticsList.graphql.ts","segments/overview/organisms/OrdersStatisticsLoader.graphql.ts","segments/overview/organisms/OrdersStatisticsSummary.tsx","segments/overview/pages/OverviewPage.tsx","segments/overview/molecules/ClosureButton.tsx","segments/overview/molecules/DailyStatisticsButton.tsx","segments/overview/molecules/OrdersStatisticsButton.tsx"],"names":["_react","__webpack_require__","_reactRouter","_PageTitle","_i18n","_NotFoundPage","_SecureRoute","_ClosureHistoryPage","_ClosurePage","_DailyStatisticsPage","_OrdersStatisticsPage","_OverviewPage","OverviewRoutes","match","default","createElement","Fragment","PageTitle","title","i18n","_","Switch","SecureRoute","exact","path","component","OverviewPage","ClosureHistoryPage","ClosurePage","DailyStatisticsPage","OrdersStatisticsPage","Route","NotFoundPage","_interopRequireDefault","_styledComponents","_styling","_Icon","IconLineWrap","div","withConfig","displayName","DescriptionContainer","labelMargin","labelWidth","labelWidthUnits","Spacing","DefaultSizeUnit","IconLineChildren","LabelStyled","_a","icon","label","children","props","__rest","iconComponent","Icon","iconName","color","Colors","greyDark","nativeColor","_NoAccess","_RootProvider","mutationName","user","useRoot","canMutate","NoAccess","_reactSelect","_extends","styles","composeSelectControlStyles","outerStyles","Object","assign","control","base","state","selectProps","width","minWidth","controlStyles","border","greyMiddle","margin","MarginAroundFormComponents","undefined","menu","menuStyles","zIndex","black","Headline","h2","light","greyLight","greyDarkest","size","_MarginBox","SizerContainer","widthUnit","height","heightUnit","className","wrap","MarginBox","FlexRowSingle","justify","_ScrollArea","FullHeightDiv","widthInColumns","LayoutGridCellMargin","widthComputed","column","leftPos","row","topPos","FullHeightDivStyled","withScrollArea","scrollAreaId","ScrollArea","id","queryName","canQuery","FlexColumn","fixedWidth","widthGrowIndex","padding","_formats","price","currencyCode","formatPrice","HorizontalSeparatorStyled","visible","enqueueSnackbar","useContext","_SnackbarContext","SnackbarContextNext","enqueueSuccess","useCallback","errorMessage","successVariant","enqueueError","errorVariant","enqueueWarning","warningVariant","enqueueInfo","infoVariant","EVariant","variant","success","error","warning","info","Router","__RouterContext","_interopRequireWildcard","mutation","options","defaultMessage","_useSnackBar","useSnackBar","handleUserErrors","_react2","userErrors","forEach","handleGraphQLErrors","errors","filter","_ramda","RM","propEq","length","map","prop","handleError","err","_ApolloError","isApolloError","networkError","graphQLErrors","_sentry","reportError","action","ShowFeedbackButton","key","mutate","_reactApolloHooks","useMutation","variables","__awaiter","this","result","data","getUserErrors","_ravenJs","_TouchButton","TouchButton","onClick","showReportDialog","Trans","ItemStyled","textColor","isSelected","css","SelectorStyled","isInvalid","SelectControlFlat","Component","[object Object]","isMulti","selectedItem","selectedItems","Array","isArray","item","contains","equals","onSingleSelection","onMultiSelection","isItemSelected","without","concat","items","isClearable","formatItem","hasSelection","updateSelection","idx","defaultProps","getItemValue","_reactForm","_form","FormApi","form","green","disabled","isFormValid","submitting","e","preventDefault","submitForm","formState","keys","fieldName","value","_validator","isEmpty","_CompanyBranchDropdown","_CompanyBranchFlatSelect","breakpoint","selectedBranches","onSelectionChange","onSelectionClear","getDropdownProps","branch","includes","branches","selectedBranch","find","selected","CompanyBranchFlatSelect","CompanyBranchDropdown","CardDock","position","_CompanyBranch","_SelectControl","ClearIndicator","getStyles","innerProps","ref","restInnerProps","style","SelectControl","placeholder","getOptionValue","formatOptionLabel","CompanyBranch","filterOption","rawInput","name","toLocaleLowerCase","closeMenuOnSelect","components","clearIndicator","cursor","onChange","selection","head","query","client","useApolloClient","_mobxReactLite","useObservable","loading","wasExecuted","hasAnyError","Boolean","execute","queryResult","_mobx","runInAction","reportFailingQuery","_apolloUtilities","getOperationName","reset","CardListTitle","_core","_DeliveryMinutes","onConfirm","onCancel","cancelText","refApi","isOpen","setOpen","useState","openDialog","closeDialog","current","Dialog","open","onClose","DialogTitle","DialogContent","DeliveryMinutes","onMinuteClick","minutes","DialogActions","_CursorContainer","short","showBrand","CursorContainer","substr","brand","_SelectControlFlat","_reactRouterDom","_CanMutate","_CanQuery","route","layoutItem","Link","to","CanQuery","CanMutate","LinkStyled","a","OrderTimeLabel","_moment","_materialUiPickers","MuiPickersUtilsProvider","utils","_resolvePathname","resolveLocation","from","resolved","pathname","linkProps","location","_icons","_dateFns","_emotion","_TimeBadge","_useTimer","cancelIconPadding","deliverAt","deliveredAt","isCancelled","timerEnabled","now","useTimer","interval","MINUTE","enabled","ETimeBadgeVariant","UNKNOWN","TimeBadge","CancelOutlined","differenceInMinutes","NORMAL","WARNING","CRITICAL","exports","TimeBadgeStyled","white","variants","red","orange","bigNumberStyle","dashStyle","clickable","Variant","output","extraClassNames","push","toString","cx","minutesOption","MinutesContainer","MinutesItem","AutoHeight","_graphqlTag","_fragments","OrderTickerFragment","AddressFragment","CustomerFragment","_ObserverWhen","_OrderTicker","_OrderDetail","OrderBoxStyled","Radiuses","Card","order","showBranch","toggleOrderDetail","isOrderDetailOpen","OrderTicker","ObserverWhen","test","renderSuccess","OrderDetail","orderId","_mobxReact","renderFailure","Observer","render","_color","_reactScroll","_Price","_types","_CustomerIdentity","_DeliveryTimeBadge","OrderTickerStyled","Element","turquoise","alpha","string","OrderTickerMainContentStyled","DeliveryTimeBadgeContainerStyled","AddressDisplayContainerStyled","CustomerIdentityContainerStyled","PriceContainerStyled","PaidMarkStyled","PaidTextStyled","ToBranchContainerStyled","ToPickupLabel","violet","companyBranch","DeliveryTimeBadge","orderStateCategory","OrderStateCategoryEnum","Cancel","deliveryType","enum","DeliveryTypeEnum","Pickup","formatAddress","address","getOrderDestination","CustomerIdentity","customer","Price","totalSum","currency","code","isPaidWithCard","lastName","firstName","defaultPhone","phone","_HorizontalSeparator","_ContactLines","_NoteLine","_OrderCountLine","_OrderDetailTotals","_OrderIdLine","_OrderRuleLines","_OrderStats","_OrderTimeLine","_OrderWareList","_OrderStateFlow","OrderDetailContainerStyled","QueryOrderDetail","fetchPolicy","HorizontalSeparator","OrderWareList","orderWares","OrderDetailTotals","OrderRuleLines","rules","allAppliedRules","OrderCountLine","customerOrdersCountCurrent","total","customerOrdersCountTotal","ContactLines","phones","emails","NoteLine","note","previousNote","OrderIdLine","displayedId","OrderTimeLine","orderTiming","OrderStats","OrderStateFlow","branchId","_IconLine","_LinkStyled","renderContact","contact","IconLine","description","isMail","href","replace","renderClickableLink","email","CurrentNoteStyled","span","PreviousNoteStyled","values","_OrderWarePriceLine","OrderCartTotalsContainer","OrderWarePriceLine","transportFee","coverPrice","totalDiscount","highlight","OrderWareLineWrap","NameContainerStyled","join","_OrderTimeLabel","stats","formatTimeWithoutTodayDate","driver","Timelapse","labelMap","NewOrders","i18nMark","Preparing","ReadyToDeliver","OnWay","Finished","reject","createdAt","timing","_OrderWareLine","orderWare","OrderWareLine","recipe","nameLabel","sidedishes","sidedish","CodeContainerStyled","_buildQuery","_OrderStateDeliver","buildQuery","PriceFragment","EmailFragment","PhoneFragment","OrderDriverFragment","_verror","_OrderCancelButton","_OrderDeliveryToPickup","_OrderStateButton","_OrderStateFlowContainer","_OrderStateTimeNotification","OrderStateNewOrder","OrderStateFlowContainer","canCancel","OrderCancelButton","OrderDeliveryToPickup","OrderStateTimeNotification","OrderStateButton","nextState","OrderStateEnum","Accepted","OrderStateAcceptedOrder","canDeliver","OrderStateDeliver","OrderStateOnWayOrder","stateModel","QueryOrderState","allowedCategories","VError","isDelivery","orderOrigin","OrderOriginEnum","Staff","permissions","canCancelOrders","stateProps","_CardDock","_Sizer","_useGuardedMutation","_ConfirmButton","_CreateOrderModel","cancelOrder","useGuardedMutation","CancelOrderMutation","Sizer","ConfirmButton","confirmNode","_hooks","initialColor","confirmColor","confirmDisableMs","resetToInitialMs","SECOND","needConfirm","setNeedConfirm","buttonRef","useRef","useEffect","timer","setTimeout","clearTimeout","_OrderStateModel","changeToPickup","ChangeOrderToPickupMutation","text","stateLabels","updateOrderState","_OrderDriverSelect","QueryDriverSelection","drivers","orderDriver","refetch","OrderDriverSelect","selectedDriver","isLoading","onReload","onClear","removeDriver","onSelect","selectDriver","deliverOrder","DriverName","backgroundColor","background","ButtonHeight","borderWidth","borderRadius","Button","valueContainer","singleValue","fontSize","isSearchable","noOptionsMessage","onMenuOpen","ValueContainer","DropdownIndicator","OrderStateFlowContainerWrapper","Control","Children","child","_DeliveryTimeDialog","DeliveryTimeDialog","sendTimeNotification","OrderStateCategoryFragment","_DateTimeFormatProvider","field","pickerProps","DateTimeFormatProvider","Field","fieldApi","InlineDatePicker","setValue","onOpen","setTouched","format","ampm","okLabel","cancelLabel","clearLabel","todayLabel","maxDateMessage","minDateMessage","FlexRow","MonospaceOutputStyled","p","RegExp","formatOutput","_createStatisticsQuery","_OrdersStatisticsLoader","context","useStatisticsQuery","createStatisticsQuery","OrdersStatisticsQuery","statistics","executeFilter","defaultValues","Form","onSubmit","updateFilter","Provider","_useExecutableQuery","_ClosureHistoryLoader","createContext","useExecutableQuery","ClosureHistoryQuery","formValues","closureBranch","dateFrom","formatDateISO","dateTo","subDays","Date","_CompanyBranchPicker","_ClosureCurrentButton","ButtonToRight","ClosureStatisticsFilter","observer","showCurrent","CompanyBranchPicker","setClosureBranch","ClosureCurrentButton","useObserver","setBranchFilter","clearBranchFilter","_FlexColumn","_FlexRowSingle","_FormInputDateTime","_FormSubmit","FormInputDateTime","autoOk","FormSubmit","0","branchesFilter","_DailyStatisticsLoader","DailyStatisticsQuery","getInitialResult","dateTimeFrom","dateTimeTo","resetResult","_Card","_FullPageLayout","_ClosureHistoryFilter","_ClosureHistoryTable","_ClosureStatisticsFilter","ClosureHistoryLoader","FullPageLayout","pageTitle","useBackButton","backRoute","ClosureHistoryFilter","ClosureHistoryTable","_FormInputDate","FormInputDate","_FlexRow","_Headline","_Loading","_RelativeLink","useClosureHistory","Loading","financialReports","report","RelativeLink","reportSequence","reportDatetime","Typography","_ClosureStatisticsContent","_ClosureStatisticsControl","ClosureStatisticsControl","params","reportId","ClosureStatisticsContent","_MonospaceOutput","_WithRoot","WithRoot","QueryFinancialReport","showReport","renderLoading","lastReport","MonospaceOutput","plainData","FinancialReport","_useRouterContext","_ClosureHistoryButton","_ClosureSubmitButton","history","createClosure","CreateFinancialReport","companyBranchId","ClosureSubmitButton","ClosureHistoryButton","_StatisticsBranchFilter","_StatisticsFilter","_DailyStatisticsContent","DailyStatisticsLoader","StatisticsBranchFilter","StatisticsFilter","DailyStatisticsContent","InlineDateTimePicker","showTabs","useDailyStatistics","dailyStatisticsPlain","categoryStatisticsPlain","deliveryStatisticsPlain","driversStatisticsPlain","_FlexAutoHeight","_PageLayout","_PageLayoutFullHeightItem","_OrdersStatisticsList","_OrdersStatisticsSummary","OrdersStatisticsLoader","PageLayoutFullHeightItem","OrdersStatisticsList","PageLayout","layouts","i","x","y","w","h","showSoundControl","scrollPageTitle","OrdersStatisticsSummary","_reactVirtualized","_CardListTitle","_OrderBox","orderModel","useOrderStatistics","loaderRef","orders","Map","measureCache","useMemo","CellMeasurerCache","defaultHeight","minHeight","clear","clearAll","resetLoadMoreRowsCache","queryMoreOrders","startIndex","stopIndex","list","OrdersStatisticsListQuery","pagination","fromIndex","toIndex","index","set","shift","totalCount","finishedCount","cancelledCount","finishedOrders","AutoSizer","InfiniteLoader","rowCount","isRowLoaded","has","loadMoreRows","onRowsRendered","registerChild","List","rowHeight","deferredMeasurementCache","noRowsRenderer","rowRenderer","parent","get","CellMeasurer","columnIndex","rowIndex","cache","measure","OrderBox","o","StatPanel","StatLabel","h1","StatValue","onlinePayments","fees","orderStatisticsPlain","_PageLayoutItem","_ClosureButton","_DailyStatisticsButton","_OrdersStatisticsButton","PageLayoutItem","OrdersStatisticsButton","DailyStatisticsButton","ClosureButton"],"mappings":"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","file":"static/js/175.9fd79e43.chunk.js","sourcesContent":["import React from 'react'\nimport { Route, RouteComponentProps, Switch } from 'react-router'\n\nimport { PageTitle } from '../../../atoms/PageTitle'\nimport { i18n } from '../../../i18n'\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { SecureRoute } from '../../../routes/SecureRoute'\nimport { ClosureHistoryPage } from '../pages/ClosureHistoryPage'\nimport { ClosurePage } from '../pages/ClosurePage'\nimport { DailyStatisticsPage } from '../pages/DailyStatisticsPage'\nimport { OrdersStatisticsPage } from '../pages/OrdersStatisticsPage'\nimport { OverviewPage } from '../pages/OverviewPage'\n\ninterface ISettingsRoutesProps extends RouteComponentProps<{}> {}\n\nexport const OverviewRoutes: React.SFC<ISettingsRoutesProps> = ({ match }) => (\n  <>\n    <PageTitle title={i18n.t`Overview`} />\n    <Switch>\n      <SecureRoute exact={true} path={match.path} component={OverviewPage} />\n      <SecureRoute\n        path={`${match.path}/closure/history`}\n        component={ClosureHistoryPage}\n      />\n      <SecureRoute\n        path={`${match.path}/closure/:reportId?`}\n        component={ClosurePage}\n      />\n      <SecureRoute\n        path={`${match.path}/statistics`}\n        component={DailyStatisticsPage}\n      />\n      <SecureRoute\n        path={`${match.path}/orders`}\n        component={OrdersStatisticsPage}\n      />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </>\n)\n\nexport default OverviewRoutes\n","import { SvgIconProps } from '@material-ui/core/SvgIcon'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors, Spacing } from '../styling'\nimport { Icon } from './Icon'\n\ninterface IProps {\n  icon?: string | React.ComponentType<SvgIconProps>\n  label?: string\n  labelWidth?: number\n  labelWidthUnits?: string\n  labelMargin?: string\n  className?: string\n}\n\nconst getLabelWidth = ({\n  labelWidth = 0,\n  labelWidthUnits = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  return labelWidth + labelWidthUnits\n}\n\nconst getLabelMargin = ({ labelMargin = '0.5rem 0.2rem 0 auto' }: IProps) => {\n  return labelMargin\n}\n\nconst IconLineWrap = styled.div`\n  display: flex;\n`\nIconLineWrap.displayName = 'IconLineWrap'\n\nconst DescriptionContainer = styled.div`\n  margin: ${getLabelMargin};\n  min-width: ${getLabelWidth};\n  flex: 0 0 auto;\n  text-align: right;\n`\n\nconst IconLineChildren = styled.div`\n  margin-left: 0.5rem;\n  align-self: stretch;\n  flex: 1 1 auto;\n`\nconst LabelStyled = styled.div`\n  padding-top: 0.2rem;\n  display: inline-block;\n`\n\nIconLineChildren.displayName = 'IconLineChildren'\n\nexport const IconLine: React.SFC<IProps> = ({\n  icon,\n  label,\n  labelWidth,\n  labelWidthUnits,\n  labelMargin,\n  children,\n  ...props\n}) => {\n  let iconComponent\n  if (icon) {\n    if (typeof icon === 'string') {\n      iconComponent = <Icon iconName={icon} color={Colors.greyDark} />\n    } else {\n      iconComponent = React.createElement(icon, {\n        nativeColor: Colors.greyDark,\n      })\n    }\n  }\n\n  return (\n    <IconLineWrap {...props}>\n      <DescriptionContainer\n        labelWidth={labelWidth}\n        labelWidthUnits={labelWidthUnits}\n        labelMargin={labelMargin}\n      >\n        {iconComponent}\n        {label ? <LabelStyled>{label}</LabelStyled> : null}\n      </DescriptionContainer>\n      <IconLineChildren>{children}</IconLineChildren>\n    </IconLineWrap>\n  )\n}\n","import React from 'react'\n\nimport { NoAccess } from './NoAccess'\nimport { useRoot } from './RootProvider'\n\ninterface IProps {\n  mutationName: string\n}\n\nexport const CanMutate: React.SFC<IProps> = ({ mutationName, children }) => {\n  const { user } = useRoot()\n  return user.canMutate(mutationName) ? (\n    <>{children}</>\n  ) : (\n    <NoAccess>{`No access to mutation ${mutationName}`}</NoAccess>\n  )\n}\n","import React from 'react'\nimport Select from 'react-select'\nimport { Props } from 'react-select/lib/Select'\nimport { StylesConfig } from 'react-select/lib/styles'\n\nimport { Colors, Spacing } from '../styling'\n\nexport interface ISelectControlProps<OptionType> extends Props<OptionType> {\n  width?: number\n  minWidth?: number\n}\n\nexport const composeSelectControlStyles = (outerStyles: StylesConfig = {}) => ({\n  ...outerStyles,\n  control: (base, state) => {\n    const {\n      selectProps: { width, minWidth },\n    } = state\n    const controlStyles = {\n      ...base,\n      border: `1px solid ${Colors.greyMiddle}`,\n      margin: Spacing.MarginAroundFormComponents,\n      width: width !== undefined ? `${width}rem` : '100%',\n      minWidth: minWidth !== undefined ? `${minWidth}rem` : '8rem',\n    }\n    return outerStyles.control\n      ? outerStyles.control(controlStyles, state)\n      : controlStyles\n  },\n  menu: (base, state) => {\n    const {\n      selectProps: { width },\n    } = state\n    const menuStyles = {\n      ...base,\n      zIndex: 20,\n      color: Colors.black,\n      width: width !== undefined ? `${width}rem` : '100%',\n    }\n    return outerStyles.menu ? outerStyles.menu(menuStyles, state) : menuStyles\n  },\n})\n\nexport function SelectControl<OptionType>(\n  props: ISelectControlProps<OptionType>,\n) {\n  return (\n    <Select<OptionType>\n      {...props}\n      styles={composeSelectControlStyles(props.styles)}\n    />\n  )\n}\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface IHeadlineProps {\n  margin?: string\n  size?: 'smaller'\n  light?: boolean\n}\n\nconst getMargin = ({ margin = '0 0.5rem 0 0.5rem' }: IHeadlineProps) => margin\n\nconst getFontSize = ({ size }: IHeadlineProps) => size === 'smaller' && '1rem'\n\nconst getColor = ({ light = false }: IHeadlineProps) =>\n  light ? Colors.greyLight : Colors.greyDarkest\n\nexport const Headline = styled.h2`\n  color: ${getColor};\n  font-weight: lighter;\n  margin: ${getMargin};\n  font-size: ${getFontSize};\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Spacing } from '../styling'\nimport { MarginBox } from './MarginBox'\n\ninterface IProps {\n  width?: number\n  widthUnit?: string\n  height?: number\n  heightUnit?: string\n  margin?: string\n  className?: string\n}\n\nconst widthProperty = ({\n  width: width,\n  widthUnit: widthUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (width === undefined) {\n    return ''\n  } else {\n    return `width: ${width}${widthUnit}`\n  }\n}\n\nconst heightProperty = ({\n  height: height,\n  heightUnit: heightUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (height === undefined) {\n    return ''\n  } else {\n    return `height: ${height}${heightUnit}`\n  }\n}\n\nconst SizerContainer = styled('div')`\n  ${widthProperty};\n  ${heightProperty};\n`\n\nexport const Sizer: React.FC<IProps> = ({\n  width,\n  widthUnit = Spacing.DefaultSizeUnit,\n  height,\n  heightUnit = Spacing.DefaultSizeUnit,\n  margin,\n  children,\n  className,\n  ...props\n}) => {\n  const wrap = (\n    <SizerContainer\n      width={width}\n      widthUnit={widthUnit}\n      height={height}\n      heightUnit={heightUnit}\n      className={className}\n      {...props}\n    >\n      {children}\n    </SizerContainer>\n  )\n\n  return margin === undefined ? (\n    wrap\n  ) : (\n    <MarginBox margin={margin}>{wrap}</MarginBox>\n  )\n}\n","import styled from 'styled-components'\n\nexport const FlexRowSingle = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: ${({ justify = 'space-between' }: { justify?: string }) =>\n    justify};\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { ScrollArea } from '../atoms/ScrollArea'\nimport { Spacing } from '../styling'\n\ninterface IPageLayoutFullHeightItemProps {\n  row?: number\n  column?: number\n  widthInColumns?: number\n  withScrollArea?: boolean\n  scrollAreaId?: string\n}\n\nconst gridColumnWidth: string = '6.22vw'\nconst gridColumnHeigth: string = '3.9375rem'\n\nconst leftPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.column !== undefined) {\n    return (\n      'calc((' +\n      props.column +\n      ' * ' +\n      gridColumnWidth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return Spacing.LayoutGridCellMargin\n  }\n}\nconst widthComputed = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.widthInColumns !== undefined) {\n    return (\n      'calc((' +\n      props.widthInColumns +\n      ' * ' +\n      gridColumnWidth +\n      ') - ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return 'calc(100vh - (2 * ' + Spacing.LayoutGridCellMargin + '))'\n  }\n}\nconst topPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.row !== undefined) {\n    return (\n      'calc((' +\n      props.row +\n      ' * ' +\n      gridColumnHeigth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return (\n      'calc(' + gridColumnHeigth + ' + ' + Spacing.LayoutGridCellMargin + ')'\n    )\n  }\n}\n\nconst FullHeightDiv = styled.div`\n  position: fixed;\n  bottom: 0.5rem;\n  width: ${widthComputed()};\n  left: ${leftPos()};\n  top: ${topPos()};\n`\n\nconst FullHeightDivStyled = styled.div`\n  height: 100%;\n`\n\nexport const PageLayoutFullHeightItem: React.SFC<\n  IPageLayoutFullHeightItemProps\n> = ({\n  children,\n  row = 1,\n  column = 0,\n  widthInColumns = 16,\n  withScrollArea = false,\n  scrollAreaId,\n}) => (\n  <FullHeightDiv\n    column={column}\n    row={row}\n    widthInColumns={widthInColumns}\n    withScrollArea={withScrollArea}\n  >\n    {withScrollArea ? (\n      <ScrollArea id={scrollAreaId}>{children}</ScrollArea>\n    ) : (\n      <FullHeightDivStyled>{children}</FullHeightDivStyled>\n    )}\n  </FullHeightDiv>\n)\n","import { Tooltip } from '@material-ui/core'\nimport { PanTool } from '@material-ui/icons'\nimport React from 'react'\n\ninterface IProps {\n  children: string\n}\n\nexport const NoAccess: React.SFC<IProps> = ({ children }) =>\n  process.env.REACT_APP_STAGE !== 'prod' ? (\n    <Tooltip title={children}>\n      <PanTool />\n    </Tooltip>\n  ) : null\n","import React from 'react'\n\nimport { NoAccess } from './NoAccess'\nimport { useRoot } from './RootProvider'\n\ninterface IProps {\n  queryName: string\n}\n\nexport const CanQuery: React.SFC<IProps> = ({ queryName, children }) => {\n  const { user } = useRoot()\n  return user.canQuery(queryName) ? (\n    <>{children}</>\n  ) : (\n    <NoAccess>{`No access to query ${queryName}`}</NoAccess>\n  )\n}\n","import styled from 'styled-components'\n\ninterface IFlexColumnProps {\n  fixedWidth?: boolean\n  width?: string\n  widthGrowIndex?: number\n  padding?: string\n  margin?: string\n}\n\nexport const FlexColumn = styled.div`\n  flex: ${getFlexValue};\n  padding: ${getPadding};\n  margin: ${getMargin};\n`\n\nfunction getFlexValue({\n  fixedWidth = false,\n  width,\n  widthGrowIndex = 0,\n}: IFlexColumnProps) {\n  return fixedWidth ? (width ? `0 0 ${width}` : '0 0') : `${widthGrowIndex} 0`\n}\n\nfunction getPadding({ padding = '0.25rem' }: IFlexColumnProps) {\n  return padding\n}\n\nfunction getMargin({ margin = '' }: IFlexColumnProps) {\n  return margin\n}\n","import React from 'react'\n\nimport { formatPrice } from '../helpers/formats'\n\ninterface IPriceProps {\n  price: number\n  currencyCode?: string\n  className?: string\n}\n\nexport const Price: React.SFC<IPriceProps> = ({\n  price,\n  currencyCode,\n  className,\n}) => (\n  <span className={className}>\n    {currencyCode\n      ? `${formatPrice(price)} ${currencyCode}`\n      : formatPrice(price)}\n  </span>\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface IProps {\n  visible?: boolean\n}\n\nconst HorizontalSeparatorStyled = styled.div`\n  border-top: 1px solid ${Colors.greyLight};\n  margin: 0.25rem 0rem;\n`\n\nexport const HorizontalSeparator: React.SFC<IProps> = ({ visible = true }) =>\n  visible ? <HorizontalSeparatorStyled /> : null\n","import { SnackbarContextNext } from 'notistack/build/SnackbarContext'\nimport { useCallback, useContext } from 'react'\n\nenum EVariant {\n  default = 'default',\n  error = 'error',\n  success = 'success',\n  warning = 'warning',\n  info = 'info',\n}\n\ninterface IEnqueueOptions {\n  /** Type of the snackbar */\n  variant: EVariant\n  /** Event fired when user clicks on action button (if any) */\n  onClickAction(): void\n  /**\n   * You can pass material-ui Snackbar props here, and they will be applied to this individual snackbar.\n   * for example, this particular snackbar will be dismissed after 1sec.\n   */\n  autoHideDuration: number\n  action: ReactNode[]\n}\n\ninterface IEnqueueSnackbar {\n  (message: string, options?: Partial<IEnqueueOptions>)\n}\n\nconst successVariant = { variant: EVariant.success }\nconst errorVariant = { variant: EVariant.error }\nconst warningVariant = { variant: EVariant.warning }\nconst infoVariant = { variant: EVariant.info }\n\nexport function useSnackBar() {\n  const enqueueSnackbar: IEnqueueSnackbar = useContext(SnackbarContextNext)\n  const enqueueSuccess = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, successVariant),\n    [],\n  )\n  const enqueueError = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, errorVariant),\n    [],\n  )\n  const enqueueWarning = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, warningVariant),\n    [],\n  )\n  const enqueueInfo = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, infoVariant),\n    [],\n  )\n  return {\n    enqueueSnackbar,\n    enqueueSuccess,\n    enqueueError,\n    enqueueWarning,\n    enqueueInfo,\n  }\n}\n","import { useContext } from 'react'\nimport * as Router from 'react-router'\n\nexport default function useRouterContext<\n  Params extends { [K in keyof Params]?: string } = {}\n>(): Router.RouteComponentProps<Params> {\n  // @ts-ignore\n  return useContext(Router.__RouterContext)\n}\n\n// export default function useRouter<\n// Params extends { [K in keyof Params]?: string } = {}\n// >(): Router.RouteComponentProps<Params> {\n//   // @ts-ignore\n//   let context = useContext(Router.__RouterContext);\n//   let location = options.location || context.location;\n//   let match = options.path\n//     ? matchPath(location.pathname, options)\n//     : context.match;\n\n//   return { ...context, location, match };\n\n// }\n\n// export default function useRouter(options = {}) {\n//   invariant(\n//     typeof useContext === \"function\",\n//     \"The useRouter hook requires React 16.7 or greater\"\n//   );\n\n//   let context = useContext(RouterContext);\n//   let location = options.location || context.location;\n//   let match = options.path\n//     ? matchPath(location.pathname, options)\n//     : context.match;\n\n//   return { ...context, location, match };\n// }\n","import styled from 'styled-components'\n\nexport const ScrollArea = styled.div`\n  overflow-y: scroll;\n  -webkit-overflow-scrolling: touch;\n  height: 100%;\n`\n","import { Trans } from '@lingui/react'\nimport { isApolloError } from 'apollo-client/errors/ApolloError'\nimport { DocumentNode, GraphQLError } from 'graphql'\nimport Raven from 'raven-js'\nimport React, { useCallback } from 'react'\nimport { MutationHookOptions, useMutation } from 'react-apollo-hooks'\n\nimport { RM } from '../helpers/ramda'\nimport { reportError } from '../helpers/sentry'\nimport { i18n } from '../i18n'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { useSnackBar } from './useSnackBar'\n\ninterface IGuardedMutationOptions<TData, TVariables>\n  extends MutationHookOptions<TData, TVariables> {\n  getUserErrors?(data: TData): ReadonlyArray<string> | null\n}\n\nexport function useGuardedMutation<TData, TVariables>(\n  mutation: DocumentNode,\n  options: IGuardedMutationOptions<TData, TVariables> = {},\n) {\n  const defaultMessage = i18n.t`Unexpected error occured while sending a request. Our team was notified about the issue.`\n\n  const { enqueueSnackbar, enqueueError, enqueueWarning } = useSnackBar()\n\n  const handleUserErrors = useCallback((userErrors: ReadonlyArray<string>) => {\n    userErrors.forEach(enqueueWarning)\n  }, [])\n\n  const handleGraphQLErrors = useCallback(\n    (errors: ReadonlyArray<GraphQLError>) => {\n      const userErrors = errors.filter(RM.propEq('showToUser', true))\n      if (userErrors.length === 0) {\n        enqueueError(defaultMessage)\n      } else {\n        handleUserErrors(userErrors.map(RM.prop('message')))\n      }\n    },\n    [],\n  )\n\n  const handleError = useCallback((err: Error) => {\n    if (isApolloError(err)) {\n      if (err.networkError) {\n        enqueueError(\n          i18n.t`Communication with server has failed. Please retry the operation in a moment again.`,\n        )\n        return\n      } else if (err.graphQLErrors) {\n        handleGraphQLErrors(err.graphQLErrors)\n        return\n      }\n    }\n    reportError(err)\n    enqueueSnackbar(defaultMessage, {\n      action: [<ShowFeedbackButton key=\"feedback\" />],\n    })\n  }, [])\n\n  const mutate = useMutation(mutation, options)\n  return async (variables: TVariables) => {\n    try {\n      const result = await mutate({ variables })\n      if (result.errors) {\n        handleGraphQLErrors(result.errors)\n        return null\n      }\n      if (!result.data) {\n        return null\n      }\n      const data = result.data as TData\n      if (options.getUserErrors) {\n        const userErrors = options.getUserErrors(data)\n        if (userErrors !== null) {\n          handleUserErrors(userErrors)\n        }\n      }\n      return data\n    } catch (err) {\n      handleError(err)\n      return null\n    }\n  }\n}\n\nfunction ShowFeedbackButton() {\n  return (\n    <TouchButton onClick={() => Raven.showReportDialog()}>\n      <Trans> Submit feedback </Trans>\n    </TouchButton>\n  )\n}\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { RM } from '../helpers/ramda'\n\nexport interface ISelectControlFlatProps<ItemType = unknown> {\n  items: ReadonlyArray<ItemType>\n  selectedItem?: Maybe<ItemType>\n  onSingleSelection?(selected: Maybe<ItemType>): void\n  selectedItems?: ReadonlyArray<ItemType>\n  onMultiSelection?(selected: ReadonlyArray<ItemType>): void\n  formatItem?: (item: ItemType) => string | ReactNode\n  isMulti?: boolean\n  isClearable?: boolean\n  isInvalid?: boolean\n  textColor?: string\n}\n\ninterface IItemProps {\n  isSelected: boolean\n  textColor: string\n  onClick(): void\n}\n\nconst ItemStyled = styled.div`\n  margin: 0.5rem 0.6rem;\n  display: inline-block;\n  cursor: pointer;\n  color: ${({ textColor }: IItemProps) => textColor};\n  ${applySelectionStyle};\n`\n\nconst SelectorStyled = styled.div`\n  border: ${({ isInvalid }: { isInvalid: boolean }) =>\n    isInvalid === true ? '1px red solid' : 'auto'};\n`\n\nexport class SelectControlFlat<\n  ItemType = { id: ID; displayName: string }\n> extends React.Component<ISelectControlFlatProps<ItemType>> {\n  static defaultProps = {\n    formatItem: RM.prop('displayName'),\n    getItemValue: RM.prop('id'),\n  }\n  hasSelection() {\n    const { isMulti, selectedItem, selectedItems } = this.props\n    if (isMulti) {\n      return Array.isArray(selectedItems) && selectedItems.length > 0\n    }\n    return selectedItem != null\n  }\n  isItemSelected(item: ItemType) {\n    const { isMulti, selectedItem, selectedItems } = this.props\n    if (isMulti && Array.isArray(selectedItems)) {\n      return RM.contains(item, selectedItems)\n    }\n    return RM.equals(selectedItem, item)\n  }\n  updateSelection(item: Maybe<ItemType>) {\n    const {\n      isMulti,\n      selectedItems = [],\n      onSingleSelection,\n      onMultiSelection,\n    } = this.props\n    if (item === null) {\n      if (isMulti && onMultiSelection) {\n        onMultiSelection([])\n      } else if (onSingleSelection) {\n        onSingleSelection(null)\n      }\n    } else if (isMulti && onMultiSelection) {\n      if (this.isItemSelected(item)) {\n        onMultiSelection(\n          Array.isArray(selectedItems)\n            ? RM.without([item], selectedItems)\n            : [item],\n        )\n      } else {\n        onMultiSelection(\n          Array.isArray(selectedItems) ? RM.concat(selectedItems, [item]) : [],\n        )\n      }\n    } else if (onSingleSelection) {\n      onSingleSelection(item)\n    }\n  }\n  render() {\n    const {\n      items,\n      isClearable,\n      isInvalid = false,\n      textColor = 'inherit',\n      formatItem,\n    } = this.props\n    return (\n      <SelectorStyled isInvalid={isInvalid}>\n        {isClearable && (\n          <ItemStyled\n            isSelected={!this.hasSelection()}\n            textColor={textColor}\n            onClick={() => {\n              this.updateSelection(null)\n            }}\n          >\n            <Trans id=\"optionselector.clear-filter\">All</Trans>\n          </ItemStyled>\n        )}\n        {items.map((item, idx) => {\n          return (\n            <ItemStyled\n              key={idx}\n              isSelected={this.isItemSelected(item)}\n              textColor={textColor}\n              onClick={() => {\n                this.updateSelection(item)\n              }}\n            >\n              {formatItem!(item)}\n            </ItemStyled>\n          )\n        })}\n      </SelectorStyled>\n    )\n  }\n}\n\nfunction applySelectionStyle({ isSelected }: IItemProps) {\n  if (!isSelected) {\n    return ''\n  }\n  return css`\n    font-weight: bolder;\n    text-decoration: underline;\n  `\n}\n","import React from 'react'\nimport { FormApi } from 'react-form'\n\nimport { isFormValid } from '../helpers/form'\nimport { ITouchButtonProps, TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\ninterface IProps extends ITouchButtonProps {}\n\nexport const FormSubmit: React.SFC<IProps> = ({ children, ...props }) => (\n  <FormApi>\n    {form => (\n      <TouchButton\n        color={Colors.green}\n        disabled={!isFormValid(form) || form.submitting}\n        onClick={e => {\n          e.preventDefault()\n          form.submitForm(e)\n        }}\n        {...props}\n      >\n        {children}\n      </TouchButton>\n    )}\n  </FormApi>\n)\n","import { IFormState } from 'react-form'\nimport { isEmpty } from 'validator'\n\nimport { i18n } from '../i18n'\n\nexport function isFormValid(formState: IFormState) {\n  return !formState.errors || Object.keys(formState.errors).length === 0\n}\n\nexport function validateIsRequired(fieldName: string) {\n  return (value: string) =>\n    isEmpty(value + '') ? i18n.t`${fieldName} must be entered` : null\n}\n","import React from 'react'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { GCompanyBranch } from '../graph/types'\nimport { RM } from '../helpers/ramda'\nimport {\n  CompanyBranchDropdown,\n  ICompanyBranchDropdownProps,\n} from '../molecules/CompanyBranchDropdown'\nimport { CompanyBranchFlatSelect } from '../molecules/CompanyBranchFlatSelect'\n\ntype TBranch = GCompanyBranch.Fragment\n\ninterface ICompanyBranchPickerProps {\n  selectedBranches?: ID[]\n  onSelectionChange?(branchIds: ID[], branches: TBranch[]): void\n  onSelectionClear?(): void\n  breakpoint?: number\n  isMulti?: boolean\n  isClearable?: boolean\n  textColor?: string\n  getDropdownProps?(): Partial<ICompanyBranchDropdownProps>\n}\n\nexport interface ICompanyBranchPickerImpl {\n  branches: ReadonlyArray<TBranch>\n  isMulti?: boolean\n  isClearable?: boolean\n  selectedBranch?: Maybe<TBranch>\n  onSingleSelection?(branch: Maybe<TBranch>): void\n  selectedBranches?: TBranch[]\n  onMultiSelection?(branches: TBranch[]): void\n  textColor?: string\n}\n\nexport const CompanyBranchPicker: React.FC<ICompanyBranchPickerProps> = ({\n  breakpoint = 3,\n  selectedBranches = [],\n  isMulti = false,\n  isClearable = true,\n  textColor,\n  onSelectionChange,\n  onSelectionClear,\n  getDropdownProps = () => ({}),\n}) => {\n  const { user } = useRoot()\n  const isSelected = branch => selectedBranches.includes(branch.id)\n  const props: ICompanyBranchPickerImpl = {\n    textColor,\n    isClearable,\n    isMulti,\n    branches: user.branches,\n    selectedBranch: user.branches.find(isSelected),\n    selectedBranches: user.branches.filter(isSelected),\n    onSingleSelection(selected: TBranch) {\n      if (selected === null && onSelectionClear) {\n        onSelectionClear()\n      } else if (selected !== null && onSelectionChange) {\n        onSelectionChange([selected.id], [selected])\n      }\n    },\n    onMultiSelection(selected: TBranch[]) {\n      if (selected.length === 0 && onSelectionClear) {\n        onSelectionClear()\n      } else if (selected.length && onSelectionChange) {\n        onSelectionChange(selected.map(RM.prop('id')), selected)\n      }\n    },\n  }\n  if (user.branches.length < breakpoint) {\n    return <CompanyBranchFlatSelect {...props} />\n  }\n  return <CompanyBranchDropdown {...props} {...getDropdownProps()} />\n}\n","import styled from 'styled-components'\n\ninterface IProps {\n  position: 'TopRight' | 'BottomRight' | 'BottomLeft' | 'TopLeft'\n}\n\nconst xPositionProperty = ({ position = 'BottomRight' }: IProps) => {\n  return position === 'BottomRight' || position === 'BottomLeft'\n    ? 'bottom: 0'\n    : 'top: 0'\n}\n\nconst yPositionProperty = ({ position = 'BottomRight' }: IProps) => {\n  return position === 'BottomLeft' || position === 'TopLeft'\n    ? 'left: 0'\n    : 'right: 0'\n}\n\nexport const CardDock = styled('div')`\n  position: absolute;\n  ${yPositionProperty};\n  ${xPositionProperty};\n`\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport { Props } from 'react-select/lib/Select'\n\nimport { CompanyBranch } from '../atoms/CompanyBranch'\nimport { ISelectControlProps, SelectControl } from '../atoms/SelectControl'\nimport { GCompanyBranch } from '../graph/types'\nimport { RM } from '../helpers/ramda'\nimport { i18n } from '../i18n'\nimport { ICompanyBranchPickerImpl } from '../organisms/CompanyBranchPicker'\n\ninterface IProps\n  extends ICompanyBranchPickerImpl,\n    Props<GCompanyBranch.Fragment> {}\n\nexport interface ICompanyBranchDropdownProps\n  extends Pick<\n      ISelectControlProps<GCompanyBranch.Fragment>,\n      'placeholder' | 'width'\n    > {}\n\nconst ClearIndicator = props => {\n  const {\n    getStyles,\n    innerProps: { ref, ...restInnerProps },\n  } = props\n  return (\n    <div\n      {...restInnerProps}\n      ref={ref}\n      style={getStyles('clearIndicator', props)}\n    >\n      <div style={{ padding: '0px 5px' }}>\n        <Trans>All</Trans>\n      </div>\n    </div>\n  )\n}\n\nexport const CompanyBranchDropdown: React.SFC<IProps> = ({\n  branches,\n  selectedBranch,\n  onSingleSelection,\n  selectedBranches,\n  onMultiSelection,\n  ...props\n}) => (\n  <SelectControl<GCompanyBranch.Fragment>\n    value={props.isMulti ? selectedBranches : selectedBranch}\n    placeholder={\n      props.isMulti ? i18n.t`Filter branches...` : i18n.t`Select a branch`\n    }\n    options={branches as GCompanyBranch.Fragment[]}\n    getOptionValue={RM.prop('id')}\n    formatOptionLabel={branch => <CompanyBranch branch={branch} />}\n    filterOption={(branch, rawInput) =>\n      branch.data.name\n        .toLocaleLowerCase()\n        .includes(rawInput.toLocaleLowerCase())\n    }\n    closeMenuOnSelect={!props.isMulti}\n    components={{\n      ClearIndicator,\n    }}\n    styles={{\n      clearIndicator: base => ({\n        ...base,\n        cursor: 'pointer',\n      }),\n    }}\n    onChange={selection => {\n      if (props.isMulti && onMultiSelection && Array.isArray(selection)) {\n        onMultiSelection(selection)\n      }\n      if (!props.isMulti && onSingleSelection) {\n        if (Array.isArray(selection)) {\n          onSingleSelection(RM.head(selection) || null)\n        } else {\n          onSingleSelection(selection || null)\n        }\n      }\n    }}\n    {...props}\n  />\n)\n","import { ApolloError, QueryOptions } from 'apollo-client'\nimport { isApolloError } from 'apollo-client/errors/ApolloError'\nimport { getOperationName } from 'apollo-utilities'\nimport { DocumentNode, GraphQLError } from 'graphql'\nimport { runInAction } from 'mobx'\nimport { useObservable } from 'mobx-react-lite'\nimport { useApolloClient } from 'react-apollo-hooks'\n\nimport { reportError, reportFailingQuery } from '../helpers/sentry'\n\nexport interface IQueryResult<TData> {\n  data: Maybe<TData>\n  loading: boolean\n  errors?: GraphQLError[]\n  error?: ApolloError\n  hasAnyError: boolean\n  wasExecuted: boolean\n}\n\nexport function useExecutableQuery<TData, TVariables>(\n  query: DocumentNode,\n  options: Partial<QueryOptions<TVariables>> = {},\n) {\n  const client = useApolloClient()!\n  const result: IQueryResult<TData> = useObservable({\n    data: null,\n    loading: false,\n    wasExecuted: false,\n    get hasAnyError() {\n      return Boolean((result.errors && result.errors.length) || result.error)\n    },\n  })\n  const execute = async (variables: TVariables) => {\n    result.loading = true\n    try {\n      const queryResult = await client.query<TData, TVariables>({\n        ...options,\n        query,\n        variables,\n      })\n      runInAction(() => {\n        result.wasExecuted = true\n        result.data = queryResult.data\n        result.errors = queryResult.errors\n        result.loading = false\n      })\n    } catch (err) {\n      if (isApolloError(err)) {\n        runInAction(() => {\n          result.error = err\n          result.errors = err.graphQLErrors\n          result.loading = false\n        })\n      } else {\n        runInAction(() => {\n          result.error = err\n          result.loading = false\n        })\n        reportError(err)\n      }\n    }\n    if (result.errors) {\n      reportFailingQuery(result.errors, {\n        query: getOperationName(query),\n        variables,\n      })\n    }\n    return result\n  }\n  const reset = () => {\n    runInAction(() => {\n      result.wasExecuted = false\n      result.data = null\n      result.error = undefined\n      result.errors = undefined\n      result.loading = false\n    })\n  }\n  return { result, execute, reset }\n}\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\nexport const CardListTitle = styled.h2`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  font-size: 1.2rem;\n  margin: 0.8rem 0 0.8rem 0.3rem;\n`\n","import { Trans } from '@lingui/react'\nimport {\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from '@material-ui/core'\nimport React, { MutableRefObject, useState } from 'react'\n\nimport { DeliveryMinutes } from '../atoms/DeliveryMinutes'\nimport { TouchButton } from './TouchButton'\n\ninterface IProps {\n  title: string\n  cancelText?: string\n  onConfirm(minutes: number): void\n  onCancel?(): void\n  refApi?: MutableRefObject<Maybe<IDeliveryTimeDialogApi>>\n  children?(props: IDeliveryTimeDialogApi): React.ReactElement<{}>\n}\n\nexport interface IDeliveryTimeDialogApi {\n  openDialog(): void\n  closeDialog(): void\n}\n\nexport const DeliveryTimeDialog: React.FC<IProps> = ({\n  title,\n  onConfirm,\n  onCancel,\n  children,\n  cancelText,\n  refApi,\n}) => {\n  const [isOpen, setOpen] = useState(false)\n\n  const openDialog = () => setOpen(true)\n  const closeDialog = () => setOpen(false)\n\n  if (refApi) {\n    refApi.current = { openDialog, closeDialog }\n  }\n\n  return (\n    <>\n      {children && children({ openDialog, closeDialog })}\n      <Dialog open={isOpen} onClose={closeDialog}>\n        <DialogTitle>{title}</DialogTitle>\n        <DialogContent>\n          <DeliveryMinutes\n            onMinuteClick={minutes => {\n              closeDialog()\n              onConfirm(minutes)\n            }}\n          />\n        </DialogContent>\n        <DialogActions>\n          <TouchButton\n            onClick={() => {\n              closeDialog()\n              if (onCancel) {\n                onCancel()\n              }\n            }}\n          >\n            {cancelText ? cancelText : <Trans>Cancel</Trans>}\n          </TouchButton>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n","import styled from 'styled-components'\n\nexport interface IProps {\n  margin: string\n  className?: string\n}\n\nexport const MarginBox = styled('div')`\n  margin: ${(props: IProps) => props.margin};\n`\n","import React from 'react'\n\nimport { CursorContainer } from '../atoms/CursorContainer'\nimport { GCompanyBranch } from '../graph/types'\n\ninterface ICompanyBranchProps {\n  branch: GCompanyBranch.Fragment\n  onClick?: () => void\n  short?: boolean\n  showBrand?: boolean\n}\n\nexport const CompanyBranch: React.SFC<ICompanyBranchProps> = ({\n  branch,\n  onClick,\n  short = false,\n  showBrand = true,\n}) => (\n  <CursorContainer cursor=\"pointer\" onClick={onClick}>\n    {short ? (\n      branch.name.substr(0, 8)\n    ) : (\n      <>\n        <span>{branch.name}</span>\n        {showBrand && <span>{` [${branch.brand.name}]`}</span>}\n      </>\n    )}\n  </CursorContainer>\n)\n","import styled from 'styled-components'\n\ntype TCursor = 'pointer' | 'arrow' | 'default'\n\nexport const CursorContainer = styled.div`\n  cursor: ${({ cursor = 'default' }: { cursor?: TCursor }) => cursor};\n`\n","import React from 'react'\n\nimport { SelectControlFlat } from '../atoms/SelectControlFlat'\nimport { GCompanyBranch } from '../graph/types'\nimport { ICompanyBranchPickerImpl } from '../organisms/CompanyBranchPicker'\nimport { Colors } from '../styling'\n\nexport const CompanyBranchFlatSelect: React.SFC<ICompanyBranchPickerImpl> = ({\n  branches,\n  selectedBranch,\n  selectedBranches,\n  textColor = Colors.black,\n  ...props\n}) => (\n  <SelectControlFlat<GCompanyBranch.Fragment>\n    items={branches}\n    selectedItem={selectedBranch}\n    selectedItems={selectedBranches}\n    textColor={textColor}\n    formatItem={item => <span title={item.brand.name}>{item.name}</span>}\n    {...props}\n  />\n)\n","import React, { createElement, HTMLAttributes } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { CanMutate } from '../atoms/CanMutate'\nimport { CanQuery } from '../atoms/CanQuery'\n\ninterface IPageLayoutItemProps extends HTMLAttributes<HTMLElement> {\n  route?: string\n  component: React.ComponentType\n  canQuery?: string\n  canMutate?: string\n}\n\nexport const PageLayoutItem: React.SFC<IPageLayoutItemProps> = ({\n  route,\n  component,\n  canQuery,\n  canMutate,\n  ...props\n}) => {\n  let layoutItem = route ? (\n    <Link to={route}>{createElement(component)}</Link>\n  ) : (\n    createElement(component)\n  )\n\n  if (canQuery) {\n    layoutItem = <CanQuery queryName={canQuery}>{layoutItem}</CanQuery>\n  }\n  if (canMutate) {\n    layoutItem = <CanMutate mutationName={canMutate}>{layoutItem}</CanMutate>\n  }\n  return <div {...props}>{layoutItem}</div>\n}\n","import styled from 'styled-components'\n\nexport const LinkStyled = styled.a`\n  color: inherit;\n  text-decoration-color: rgba(0, 0, 0, 0.08);\n  &:hover {\n    text-decoration-color: rgba(0, 0, 0, 0.5);\n  }\n  &:visited {\n    text-decoration-color: rgba(0, 0, 0, 0.08);\n  }\n`\n","import styled from 'styled-components'\n\nimport { Colors } from '../../../styling'\n\nexport const OrderTimeLabel = styled.div`\n  margin-left: 1rem;\n  display: inline-block;\n  color: ${Colors.greyMiddle};\n`\n","import MomentUtils from '@date-io/moment'\nimport { MuiPickersUtilsProvider } from 'material-ui-pickers'\nimport React from 'react'\n\nexport const DateTimeFormatProvider: React.FC = ({ children }) => {\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      {children}\n    </MuiPickersUtilsProvider>\n  )\n}\n","import { LocationDescriptor } from 'history'\nimport React from 'react'\nimport { Link, LinkProps, Route } from 'react-router-dom'\nimport resolvePathname from 'resolve-pathname'\n\ninterface IRelativeLinkProps extends LinkProps {\n  to: LocationDescriptor\n  from?: string\n}\n\nexport const RelativeLink: React.SFC<IRelativeLinkProps> = ({\n  to,\n  from,\n  ...linkProps\n}) => (\n  <Route\n    children={({ location }) => (\n      <Link\n        to={resolveLocation(to, from || `${location.pathname}/`)}\n        {...linkProps}\n      />\n    )}\n  />\n)\n\nexport function resolveLocation(to: LocationDescriptor, from: string) {\n  if (typeof to === 'string') {\n    return resolvePathname(to, from)\n  }\n  const resolved = resolvePathname(to.pathname || '', from)\n  return { ...to, pathname: resolved }\n}\n","import { CancelOutlined } from '@material-ui/icons'\nimport { differenceInMinutes } from 'date-fns'\nimport { css } from 'emotion'\nimport React from 'react'\n\nimport { ETimeBadgeVariant, TimeBadge } from '../../../atoms/TimeBadge'\nimport { DateTime } from '../../../graph/types'\nimport { MINUTE, useTimer } from '../../../hooks/useTimer'\n\ninterface IDeliveryTimeBadgeProps {\n  deliverAt: Maybe<DateTime>\n  deliveredAt: Maybe<DateTime>\n  isCancelled?: boolean\n  onClick?(): void\n}\n\nconst cancelIconPadding = css`\n  padding: 0.2rem 0.3rem 0.1rem 0.3rem;\n`\n\nexport const DeliveryTimeBadge: React.SFC<IDeliveryTimeBadgeProps> = ({\n  deliverAt,\n  deliveredAt,\n  isCancelled = false,\n  onClick,\n}) => {\n  const timerEnabled = !(deliveredAt || isCancelled)\n  const now = useTimer({ interval: MINUTE, enabled: timerEnabled })\n\n  let variant = ETimeBadgeVariant.UNKNOWN\n\n  if (isCancelled) {\n    return (\n      <TimeBadge variant={variant} className={cancelIconPadding}>\n        <CancelOutlined />\n      </TimeBadge>\n    )\n  }\n\n  if (!deliverAt) {\n    return <TimeBadge variant={variant}>❔</TimeBadge>\n  }\n\n  const minutes = differenceInMinutes(deliverAt, deliveredAt || now)\n\n  if (minutes > 20) {\n    variant = ETimeBadgeVariant.NORMAL\n  } else if (minutes > 0) {\n    variant = ETimeBadgeVariant.WARNING\n  } else {\n    variant = ETimeBadgeVariant.CRITICAL\n  }\n\n  return <TimeBadge minutes={minutes} variant={variant} onClick={onClick} />\n}\n","import { css, cx } from 'emotion'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\nexport enum ETimeBadgeVariant {\n  UNKNOWN,\n  CRITICAL,\n  WARNING,\n  NORMAL,\n}\n\ninterface ITimeBadgeProps {\n  variant: ETimeBadgeVariant\n  minutes?: number\n  children?: React.ReactNode\n  className?: string\n  onClick?(): void\n}\n\nconst TimeBadgeStyled = styled.div`\n  height: 2rem;\n  line-height: 2rem;\n  width: 2rem;\n  border-radius: 50%;\n  overflow: hidden;\n  border: 1px solid white;\n  color: ${Colors.white};\n  background: ${Colors.greyMiddle};\n  text-align: center;\n  font-family: 'Open Sans', sans-serif;\n`\n\nconst variants = {\n  [ETimeBadgeVariant.UNKNOWN]: styled(TimeBadgeStyled)``,\n  [ETimeBadgeVariant.CRITICAL]: styled(TimeBadgeStyled)`\n    background: ${Colors.red};\n  `,\n  [ETimeBadgeVariant.WARNING]: styled(TimeBadgeStyled)`\n    background: ${Colors.orange};\n    color: ${Colors.black};\n    font-weight: bold;\n  `,\n  [ETimeBadgeVariant.NORMAL]: styled(TimeBadgeStyled)`\n    background: ${Colors.green};\n  `,\n}\n\nconst bigNumberStyle = css`\n  font-size: 0.8rem;\n`\nconst dashStyle = css`\n  font-size: 1.7rem;\n  font-weight: bold;\n`\nconst clickable = css`\n  cursor: pointer;\n`\n\nexport const TimeBadge: React.SFC<ITimeBadgeProps> = ({\n  minutes,\n  className,\n  children,\n  variant,\n  onClick,\n}) => {\n  const Variant = variants[variant]\n  let output = children\n  const extraClassNames: string[] = []\n  if (minutes !== undefined) {\n    if (minutes > 99 || minutes < -9) {\n      extraClassNames.push(bigNumberStyle)\n    }\n    if (minutes < -99) {\n      output = '‒'\n      extraClassNames.push(dashStyle)\n    } else {\n      output = minutes.toString()\n    }\n  }\n  if (onClick) {\n    extraClassNames.push(clickable)\n  }\n  return (\n    <Variant onClick={onClick} className={cx(className, ...extraClassNames)}>\n      {output}\n    </Variant>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  onMinuteClick(minute: number): void\n}\n\nconst minutesOption = [20, 30, 45, 60, 75, 90, 105, 120]\n\nconst MinutesContainer = styled.div`\n  display: flex;\n  justify-content: 'center';\n  flex-wrap: 'wrap';\n  font-size: 2rem;\n`\nconst MinutesItem = styled.div`\n  margin: 1rem 1rem 0 0;\n`\n\nexport const DeliveryMinutes: React.FC<IProps> = ({ onMinuteClick }) => {\n  return (\n    <MinutesContainer>\n      {minutesOption.map(minutes => (\n        <MinutesItem key={minutes}>\n          <TouchButton\n            onClick={() => {\n              onMinuteClick(minutes)\n            }}\n            color={Colors.green}\n          >\n            {minutes}\n          </TouchButton>\n        </MinutesItem>\n      ))}\n    </MinutesContainer>\n  )\n}\n","import styled from 'styled-components'\n\nexport const AutoHeight = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n","import gql from 'graphql-tag'\n\nimport { AddressFragment, CustomerFragment } from '../../../graph/fragments'\n\nexport const OrderTickerFragment = gql`\n  fragment GOrderListTicker on Order {\n    id\n    createdAt\n    isPaidWithCard\n    deliveryType {\n      enum\n    }\n    deliverAt\n    deliverAtWorst\n    deliveredAt\n    companyBranch {\n      id\n      name\n      oldOrderThreshold\n    }\n    address {\n      ...GAddress\n    }\n    customer {\n      ...GCustomer\n    }\n    totalSum {\n      value\n      currency {\n        code\n      }\n    }\n  }\n  ${AddressFragment}\n  ${CustomerFragment}\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { ObserverWhen } from '../../../atoms/ObserverWhen'\nimport { GOrderListTicker, GOrderStateCategory } from '../../../graph/types'\nimport { Colors, Radiuses } from '../../../styling'\nimport { OrderTicker } from '../molecules/OrderTicker'\nimport { OrderDetail } from '../organisms/OrderDetail'\n\ntype TOrder = GOrderListTicker.Fragment & GOrderStateCategory.Fragment\n\ninterface IProps {\n  order: TOrder\n  showBranch: boolean\n  toggleOrderDetail(orderId: ID): void\n  isOrderDetailOpen(orderId: ID): boolean\n}\n\nexport const OrderBoxStyled = styled.div`\n  background-color: ${Colors.white};\n  color: ${Colors.greyDarkest};\n  border-radius: ${Radiuses.Card};\n  margin-bottom: 0.5rem;\n  position: relative;\n`\n\nexport const OrderBox: React.SFC<IProps> = ({\n  order,\n  showBranch,\n  toggleOrderDetail,\n  isOrderDetailOpen,\n}) => (\n  <OrderBoxStyled id={`order-${order.id}`}>\n    <OrderTicker\n      order={order}\n      showBranch={showBranch}\n      onClick={() => toggleOrderDetail(order.id)}\n    />\n    <ObserverWhen\n      test={() => isOrderDetailOpen(order.id)}\n      renderSuccess={() => <OrderDetail orderId={order.id} />}\n    />\n  </OrderBoxStyled>\n)\n","import { Observer } from 'mobx-react'\nimport React from 'react'\n\ninterface IObserverWhenProps {\n  test(): boolean\n  renderSuccess(): ReactNode\n  renderFailure?(): ReactNode\n}\n\nexport const ObserverWhen: React.SFC<IObserverWhenProps> = ({\n  test,\n  renderSuccess,\n  renderFailure,\n}) => (\n  <Observer\n    render={() =>\n      test() ? renderSuccess() : renderFailure ? renderFailure() : null\n    }\n  />\n)\n","import { Trans } from '@lingui/react'\nimport Color from 'color'\nimport React from 'react'\nimport { Element } from 'react-scroll'\nimport styled from 'styled-components'\n\nimport { Price } from '../../../atoms/Price'\nimport {\n  DeliveryTypeEnum,\n  GOrderListTicker,\n  GOrderStateCategory,\n  OrderStateCategoryEnum,\n} from '../../../graph/types'\nimport { formatAddress } from '../../../helpers/formats'\nimport { Colors, Radiuses } from '../../../styling'\nimport { CustomerIdentity } from '../atoms/CustomerIdentity'\nimport { DeliveryTimeBadge } from '../atoms/DeliveryTimeBadge'\n\ninterface IOrderTickerProps {\n  onClick(): void\n  order: GOrderListTicker.Fragment & GOrderStateCategory.Fragment\n  showBranch: boolean\n}\n\nconst OrderTickerStyled = styled(Element)`\n  text-align: left;\n  cursor: pointer;\n  &:hover {\n    background-color: ${Color(Colors.turquoise)\n      .alpha(0.05)\n      .string()};\n  }\n  &:active {\n    background-color: ${Color(Colors.turquoise)\n      .alpha(0.2)\n      .string()};\n  }\n`\n\nconst OrderTickerMainContentStyled = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  padding: 0.4rem;\n`\n\nconst DeliveryTimeBadgeContainerStyled = styled.div`\n  flex: 0 0 2rem;\n`\nconst AddressDisplayContainerStyled = styled.div`\n  flex: 1 0;\n  padding: 0 0 0 0.5rem;\n`\nconst CustomerIdentityContainerStyled = styled.div`\n  flex: 1 0;\n  padding: 0 0 0 0.5rem;\n`\nconst PriceContainerStyled = styled.div`\n  flex: 0 0 3.5rem;\n  text-align: right;\n  position: relative;\n`\nconst PaidMarkStyled = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 0.1rem;\n    right: -0.3rem;\n    left: 0.9rem;\n    bottom: 0.3rem;\n    border-top: 2px solid ${Colors.orange};\n    transform: rotate(13deg);\n    transform-origin: 0% 0%;\n    opacity: 0.7;\n  }\n`\nconst PaidTextStyled = styled.div`\n  color: ${Colors.orange};\n`\n\nconst ToBranchContainerStyled = styled.div`\n  padding: 0.3rem 0.6rem;\n  display: inline-block;\n  border-top-left-radius: ${Radiuses.Card};\n  background-color: ${Colors.green};\n  color: ${Colors.white};\n`\n\nconst ToPickupLabel = styled.div`\n  font-style: italic;\n  color: ${Colors.violet};\n`\n\nexport const OrderTicker: React.FC<IOrderTickerProps> = ({\n  order,\n  showBranch,\n  onClick,\n}) => {\n  const getOrderDestination = () => {\n    if (\n      order.deliveryType &&\n      order.deliveryType.enum === DeliveryTypeEnum.Pickup\n    ) {\n      return (\n        <ToPickupLabel>\n          <Trans>To pickup</Trans>\n        </ToPickupLabel>\n      )\n    }\n    return formatAddress(order.address)\n  }\n\n  return (\n    <OrderTickerStyled onClick={onClick} name={`order-${order.id}`}>\n      {showBranch && (\n        <ToBranchContainerStyled>\n          {order.companyBranch.name}\n        </ToBranchContainerStyled>\n      )}\n\n      <OrderTickerMainContentStyled>\n        <DeliveryTimeBadgeContainerStyled>\n          <DeliveryTimeBadge\n            deliverAt={order.deliverAt}\n            deliveredAt={order.deliveredAt}\n            isCancelled={\n              order.orderStateCategory === OrderStateCategoryEnum.Cancel\n            }\n          />\n        </DeliveryTimeBadgeContainerStyled>\n\n        <AddressDisplayContainerStyled>\n          {getOrderDestination()}\n        </AddressDisplayContainerStyled>\n\n        <CustomerIdentityContainerStyled>\n          <CustomerIdentity customer={order.customer} />\n        </CustomerIdentityContainerStyled>\n\n        <PriceContainerStyled>\n          <Price\n            price={order.totalSum.value}\n            currencyCode={order.totalSum.currency.code}\n          />\n          {order.isPaidWithCard && (\n            <>\n              <PaidMarkStyled />\n              <PaidTextStyled>\n                <Trans>Paid</Trans>\n              </PaidTextStyled>\n            </>\n          )}\n        </PriceContainerStyled>\n      </OrderTickerMainContentStyled>\n    </OrderTickerStyled>\n  )\n}\n","import React from 'react'\n\nimport { GCustomer } from '../../../graph/types'\n\ninterface ICustomerNameProps {\n  customer: GCustomer.Fragment | null\n}\n\nexport const CustomerIdentity: React.SFC<ICustomerNameProps> = ({ customer }) =>\n  customer ? (\n    <span>{`${\n      customer.lastName\n        ? `${customer.firstName} ${customer.lastName}`\n        : customer.defaultPhone\n          ? customer.defaultPhone.phone\n          : ``\n    }`}</span>\n  ) : (\n    <i>unknown</i>\n  )\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { HorizontalSeparator } from '../../../atoms/HorizontalSeparator'\nimport { ContactLines } from '../molecules/ContactLines'\nimport { NoteLine } from '../molecules/NoteLine'\nimport { OrderCountLine } from '../molecules/OrderCountLine'\nimport { OrderDetailTotals } from '../molecules/OrderDetailTotals'\nimport { OrderIdLine } from '../molecules/OrderIdLine'\nimport { OrderRuleLines } from '../molecules/OrderRuleLines'\nimport { OrderStats } from '../molecules/OrderStats'\nimport { OrderTimeLine } from '../molecules/OrderTimeLine'\nimport { OrderWareList } from '../molecules/OrderWareList'\nimport { QueryOrderDetail } from './OrderDetail.graphql'\nimport { OrderStateFlow } from './OrderStateFlow'\n\ninterface IOrderDetailProps {\n  orderId: string\n}\n\nconst OrderDetailContainerStyled = styled.div`\n  padding: 0 0.5rem 0.5rem 1.1rem;\n`\n\nexport const OrderDetail: React.SFC<IOrderDetailProps> = ({ orderId }) => (\n  <QueryOrderDetail\n    variables={{ id: orderId }}\n    fetchPolicy=\"cache-and-network\"\n    render={({ order }) => (\n      <>\n        <OrderDetailContainerStyled>\n          <HorizontalSeparator />\n          <OrderWareList orderWares={order.items} />\n          <OrderDetailTotals order={order} />\n          <OrderRuleLines rules={order.allAppliedRules}>\n            <OrderCountLine\n              current={order.customerOrdersCountCurrent}\n              total={order.customerOrdersCountTotal}\n            />\n          </OrderRuleLines>\n          <ContactLines\n            phones={order.customer.phones}\n            emails={order.customer.emails}\n          />\n          <NoteLine note={order.note} previousNote={order.previousNote} />\n          <HorizontalSeparator />\n          <OrderIdLine displayedId={order.id} />\n          <HorizontalSeparator />\n          <OrderTimeLine orderTiming={order.orderTiming} />\n          <OrderStats order={order} />\n        </OrderDetailContainerStyled>\n        <OrderStateFlow orderId={orderId} branchId={order.companyBranch.id} />\n      </>\n    )}\n  />\n)\n","import React from 'react'\n\nimport { HorizontalSeparator } from '../../../atoms/HorizontalSeparator'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { LinkStyled } from '../../../atoms/LinkStyled'\nimport { GEmail, GPhone } from '../../../graph/types'\n\ninterface IContactLinesProps {\n  phones: ReadonlyArray<GPhone.Fragment>\n  emails: ReadonlyArray<GEmail.Fragment>\n}\n\ntype Contact = {\n  icon: string\n  isMail: boolean\n  value: string\n} & (GPhone.Fragment | GEmail.Fragment)\n\nexport const ContactLines: React.SFC<IContactLinesProps> = ({\n  phones,\n  emails,\n}) => {\n  const renderClickableLink = (contact: Contact) =>\n    contact.isMail ? (\n      <LinkStyled href={`mailto:${contact.value}`}>{contact.value}</LinkStyled>\n    ) : (\n      <LinkStyled href={`tel:${contact.value.replace('/ /g', '')}`}>\n        {contact.value}\n      </LinkStyled>\n    )\n\n  const renderContact = (contact: Contact) => (\n    <IconLine icon={contact.icon} key={contact.value} labelMargin=\"0\">\n      <div title={contact.description || ''}>\n        {renderClickableLink(contact)}\n      </div>\n    </IconLine>\n  )\n  return (\n    <>\n      {(phones.length > 0 || emails.length > 0) && <HorizontalSeparator />}\n      {phones.map(phone =>\n        renderContact({\n          icon: 'phone',\n          isMail: false,\n          value: phone.phone,\n          ...phone,\n        }),\n      )}\n      {emails.map(email =>\n        renderContact({\n          icon: 'mail_outline',\n          isMail: true,\n          value: email.email,\n          ...email,\n        }),\n      )}\n    </>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { HorizontalSeparator } from '../../../atoms/HorizontalSeparator'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\nimport { Colors } from '../../../styling'\n\ninterface INoteLineProps {\n  note?: string | null\n  previousNote?: string | null\n}\n\nconst CurrentNoteStyled = styled.span`\n  color: ${Colors.orange};\n`\nconst PreviousNoteStyled = styled.span`\n  color: ${Colors.greyDark};\n  margin-left: 0.5rem;\n`\n\nexport const NoteLine: React.SFC<INoteLineProps> = ({ note, previousNote }) =>\n  note || previousNote ? (\n    <>\n      <HorizontalSeparator />\n      <IconLine icon=\"note\" labelMargin=\"0\">\n        <CurrentNoteStyled>\n          {note || i18n.t`Without note`.toLocaleLowerCase()}\n        </CurrentNoteStyled>\n        <PreviousNoteStyled>{previousNote}</PreviousNoteStyled>\n      </IconLine>\n    </>\n  ) : null\n","import { Plural, SelectOrdinal, Trans } from '@lingui/react'\nimport React from 'react'\n\ninterface IProps {\n  current: number\n  total: number\n}\n\nexport const OrderCountLine: React.SFC<IProps> = ({ current, total }) => (\n  <Trans>\n    It's customer's{' '}\n    <SelectOrdinal value={current} one=\"#st\" two=\"#nd\" few=\"#rd\" other=\"#th\" />{' '}\n    order <Plural value={total} one=\"\" other=\"from total of # orders\" />\n  </Trans>\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { GOrderDetail } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { OrderWarePriceLine } from './OrderWarePriceLine'\n\ninterface IProps {\n  order: GOrderDetail.Order\n}\n\nconst OrderCartTotalsContainer = styled.div`\n  margin: 0 0 0 auto;\n  width: 20rem;\n  text-align: right;\n`\n\nexport const OrderDetailTotals: React.SFC<IProps> = ({ order }) => (\n  <OrderCartTotalsContainer>\n    <OrderWarePriceLine\n      label={i18n.t`Transport fee`}\n      price={order.transportFee.value}\n    />\n    <OrderWarePriceLine\n      label={i18n.t`Covers price`}\n      price={order.coverPrice.value}\n    />\n    <OrderWarePriceLine\n      label={i18n.t`Discount total`}\n      price={order.totalDiscount.value * -1}\n    />\n    <OrderWarePriceLine\n      label={i18n.t`Total price`}\n      price={order.totalSum.value}\n      highlight={true}\n    />\n  </OrderCartTotalsContainer>\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Price } from '../../../atoms/Price'\nimport { Colors } from '../../../styling'\n\ninterface IProps {\n  label: string\n  price: number\n  highlight?: boolean\n}\n\nconst OrderWareLineWrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-left: 3rem;\n`\n\nconst NameContainerStyled = styled.div`\n  flex: 1 0;\n  color: ${Colors.greyMiddle};\n`\nconst PriceContainerStyled = styled.div`\n  flex: 0 0 4.5rem;\n  text-align: right;\n  color: ${Colors.greyMiddle};\n`\n\nexport const OrderWarePriceLine: React.FC<IProps> = ({\n  label,\n  price,\n  highlight = false,\n}) => (\n  <OrderWareLineWrap>\n    <NameContainerStyled>{label}</NameContainerStyled>\n    <PriceContainerStyled>\n      {highlight ? (\n        <b>\n          <Price price={price} />\n        </b>\n      ) : (\n        <Price price={price} />\n      )}\n    </PriceContainerStyled>\n  </OrderWareLineWrap>\n)\n","import React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\n\ninterface IProps {\n  displayedId: string\n}\n\nexport const OrderIdLine: React.FC<IProps> = ({ displayedId }) => (\n  <IconLine icon=\"format_list_numbered\" labelMargin=\"0\">\n    {displayedId}\n  </IconLine>\n)\n","import React from 'react'\n\nimport { HorizontalSeparator } from '../../../atoms/HorizontalSeparator'\nimport { IconLine } from '../../../atoms/IconLine'\n\ninterface IOrderRuleLinesProps {\n  rules: ReadonlyArray<string>\n}\n\nexport const OrderRuleLines: React.SFC<IOrderRuleLinesProps> = ({\n  rules,\n  children,\n}) =>\n  rules.length > 0 || children ? (\n    <>\n      <HorizontalSeparator />\n      <IconLine icon=\"announcement\" labelMargin=\"0\">\n        {children}\n        <br />\n        {rules.join(', ')}\n      </IconLine>\n    </>\n  ) : null\n","import { Trans } from '@lingui/react'\nimport { Timelapse } from '@material-ui/icons'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { GOrderDetail } from '../../../graph/types'\nimport { formatTimeWithoutTodayDate } from '../../../helpers/formats'\nimport { OrderTimeLabel } from '../atoms/OrderTimeLabel'\n\ninterface IProps {\n  order: GOrderDetail.Order\n}\n\nexport const OrderStats: React.SFC<IProps> = ({ order }) => {\n  const stats: ReactNode[] = []\n  if (order.deliverAt) {\n    stats.push(\n      <div key=\"deliverAt\">\n        {formatTimeWithoutTodayDate(order.deliverAt)}\n        <OrderTimeLabel>\n          <Trans>Deliver on time</Trans>\n        </OrderTimeLabel>\n      </div>,\n    )\n  }\n  if (order.driver) {\n    const { firstName, lastName } = order.driver.user\n    stats.push(\n      <div key=\"driver\">\n        {`${firstName} ${lastName}`}\n        <OrderTimeLabel>\n          <Trans>Driver</Trans>\n        </OrderTimeLabel>\n      </div>,\n    )\n  }\n  if (stats.length === 0) {\n    return null\n  }\n  return (\n    <IconLine icon={Timelapse} labelMargin=\"0\">\n      {stats}\n    </IconLine>\n  )\n}\n","import { i18nMark } from '@lingui/react'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { GOrderDetail, OrderStateCategoryEnum } from '../../../graph/types'\nimport { formatTimeWithoutTodayDate } from '../../../helpers/formats'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport { OrderTimeLabel } from '../atoms/OrderTimeLabel'\n\ninterface IProps {\n  orderTiming: ReadonlyArray<GOrderDetail.OrderTiming>\n}\n\nconst labelMap = {\n  [OrderStateCategoryEnum.NewOrders]: i18nMark('Created'),\n  [OrderStateCategoryEnum.Preparing]: i18nMark('Preparing'),\n  [OrderStateCategoryEnum.ReadyToDeliver]: i18nMark('Ready to deliver'),\n  [OrderStateCategoryEnum.OnWay]: i18nMark('On way'),\n  [OrderStateCategoryEnum.Finished]: i18nMark('Finished'),\n}\n\nexport const OrderTimeLine: React.SFC<IProps> = ({ orderTiming }) => (\n  <IconLine icon=\"access_time\" labelMargin=\"0\">\n    {RM.reject(\n      ({ createdAt, orderStateCategory }) =>\n        createdAt === null || !labelMap[orderStateCategory],\n      orderTiming,\n    ).map(timing => (\n      <div key={timing.orderStateCategory}>\n        {formatTimeWithoutTodayDate(timing.createdAt)}\n        <OrderTimeLabel>\n          {i18n._(labelMap[timing.orderStateCategory])}\n        </OrderTimeLabel>\n      </div>\n    ))}\n  </IconLine>\n)\n","import React, { Fragment } from 'react'\n\nimport { GOrderDetail } from '../../../graph/types'\nimport { OrderWareLine } from './OrderWareLine'\n\ninterface IOrderWareListProps {\n  orderWares: ReadonlyArray<GOrderDetail.Items>\n}\n\nexport const OrderWareList: React.SFC<IOrderWareListProps> = ({\n  orderWares,\n}) => {\n  const renderWare = (orderWare: GOrderDetail.Items) => (\n    <Fragment key={orderWare.id}>\n      <OrderWareLine\n        code={orderWare.recipe.code}\n        label={orderWare.recipe.nameLabel}\n        price={orderWare.price.value}\n      />\n      <>\n        {orderWare.sidedishes.map(sidedish => (\n          <OrderWareLine\n            key={sidedish.id}\n            code={`+${sidedish.recipe.code}`}\n            label={sidedish.recipe.nameLabel}\n            price={sidedish.price.value}\n          />\n        ))}\n      </>\n    </Fragment>\n  )\n  return <div>{orderWares.map(renderWare)}</div>\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Price } from '../../../atoms/Price'\nimport { Colors } from '../../../styling'\n\ninterface IOrderWareLineProps {\n  code?: string\n  label: string\n  price: number\n}\n\nconst OrderWareLineWrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-left: 3rem;\n`\nconst CodeContainerStyled = styled.div`\n  flex: 0 0 5rem;\n`\nconst NameContainerStyled = styled.div`\n  flex: 1 0;\n  color: ${Colors.black};\n`\nconst PriceContainerStyled = styled.div`\n  flex: 0 0 4.5rem;\n  text-align: right;\n  color: ${Colors.greyMiddle};\n`\n\nexport const OrderWareLine: React.SFC<IOrderWareLineProps> = ({\n  code,\n  label,\n  price,\n}) => (\n  <OrderWareLineWrap>\n    <CodeContainerStyled>{code}</CodeContainerStyled>\n\n    <NameContainerStyled>{label}</NameContainerStyled>\n    <PriceContainerStyled>\n      <Price price={price} />\n    </PriceContainerStyled>\n  </OrderWareLineWrap>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport {\n  EmailFragment,\n  PhoneFragment,\n  PriceFragment,\n} from '../../../graph/fragments'\nimport { GOrderDetail } from '../../../graph/types'\nimport { OrderDriverFragment } from '../molecules/OrderStateDeliver.graphql'\n\nexport const QueryOrderDetail = buildQuery<\n  GOrderDetail.Query,\n  GOrderDetail.Variables\n>(gql`\n  query GOrderDetail($id: ID!) {\n    order(id: $id) {\n      id\n      createdAt\n      deliverAt\n      companyBranch {\n        id\n      }\n      customer {\n        emails {\n          ...GEmail\n        }\n        phones {\n          ...GPhone\n        }\n      }\n      customerOrdersCountCurrent\n      customerOrdersCountTotal\n      note\n      previousNote\n      allAppliedRules\n      items {\n        ...GOrderDetailWare\n        sidedishes: sideDishes {\n          ...GOrderDetailWare\n        }\n      }\n      totalSum {\n        ...GPrice\n      }\n      transportFee {\n        ...GPrice\n      }\n      coverPrice {\n        ...GPrice\n      }\n      totalDiscount {\n        ...GPrice\n      }\n      orderTiming: orderStateCategoryRelations {\n        createdAt\n        orderStateCategory\n      }\n      ...GOrderDriver\n    }\n  }\n\n  fragment GOrderDetailWare on OrderRecipe {\n    id\n    recipe {\n      id\n      code\n      nameLabel\n    }\n    price {\n      ...GPrice\n    }\n  }\n  ${PriceFragment}\n  ${EmailFragment}\n  ${PhoneFragment}\n  ${OrderDriverFragment}\n`)\n","import React from 'react'\nimport { VError } from 'verror'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport {\n  DeliveryTypeEnum,\n  OrderOriginEnum,\n  OrderStateCategoryEnum,\n  OrderStateEnum,\n} from '../../../graph/types'\nimport { reportError } from '../../../helpers/sentry'\nimport { TOrderStateModel } from '../models/OrderStateModel'\nimport { OrderCancelButton } from '../molecules/OrderCancelButton'\nimport { OrderDeliveryToPickup } from '../molecules/OrderDeliveryToPickup'\nimport { OrderStateButton } from '../molecules/OrderStateButton'\nimport { OrderStateDeliver } from '../molecules/OrderStateDeliver'\nimport { OrderStateFlowContainer } from '../molecules/OrderStateFlowContainer'\nimport { OrderStateTimeNotification } from '../molecules/OrderStateTimeNotification'\nimport { QueryOrderState } from './OrderStateFlow.graphql'\n\ninterface IProps {\n  orderId: ID\n  branchId: ID\n}\n\ninterface IStateProps extends IProps {\n  stateModel: TOrderStateModel\n  orderStateCategory: OrderStateCategoryEnum\n  canCancel: boolean\n  canDeliver: boolean\n  isDelivery: boolean\n}\n\nconst OrderStateNewOrder: React.SFC<IStateProps> = props => (\n  <OrderStateFlowContainer>\n    {props.canCancel && <OrderCancelButton {...props} />}\n    <OrderDeliveryToPickup {...props} />\n    <OrderStateTimeNotification {...props} />\n    <OrderStateButton nextState={OrderStateEnum.Accepted} {...props} />\n  </OrderStateFlowContainer>\n)\n\nconst OrderStateAcceptedOrder: React.SFC<IStateProps> = props => (\n  <OrderStateFlowContainer>\n    {props.canCancel && <OrderCancelButton {...props} />}\n    <OrderDeliveryToPickup {...props} />\n    <OrderStateTimeNotification {...props} />\n    {props.canDeliver ? (\n      <OrderStateDeliver {...props} />\n    ) : (\n      <OrderStateButton nextState={OrderStateEnum.Finished} {...props} />\n    )}\n  </OrderStateFlowContainer>\n)\n\nconst OrderStateOnWayOrder: React.SFC<IStateProps> = props => (\n  <OrderStateFlowContainer>\n    <OrderStateTimeNotification {...props} />\n    <OrderStateDeliver {...props} />\n    <OrderStateButton nextState={OrderStateEnum.Finished} {...props} />\n  </OrderStateFlowContainer>\n)\n\nexport const OrderStateFlow: React.FC<IProps> = ({ orderId, branchId }) => {\n  const {\n    order: { state: stateModel },\n    user,\n  } = useRoot()\n  return (\n    <QueryOrderState\n      variables={{ orderId, branchId }}\n      render={({ order, companyBranch: { allowedCategories } }) => {\n        const { orderStateCategory } = order\n        if (!orderStateCategory) {\n          reportError(new VError('Order %s has got no state categories'))\n          return null\n        }\n        const isDelivery =\n          order.deliveryType != null &&\n          order.deliveryType.enum !== DeliveryTypeEnum.Pickup\n\n        const canDeliver =\n          isDelivery && allowedCategories.includes(OrderStateCategoryEnum.OnWay)\n\n        const canCancel =\n          order.orderOrigin.enum === OrderOriginEnum.Staff &&\n          user.permissions.canCancelOrders\n\n        const stateProps: IStateProps = {\n          orderId,\n          branchId,\n          stateModel,\n          orderStateCategory,\n          canCancel,\n          canDeliver,\n          isDelivery,\n        }\n        switch (orderStateCategory) {\n          case OrderStateCategoryEnum.NewOrders:\n            return <OrderStateNewOrder {...stateProps} />\n          case OrderStateCategoryEnum.Preparing:\n            return <OrderStateAcceptedOrder {...stateProps} />\n          case OrderStateCategoryEnum.OnWay:\n            return <OrderStateOnWayOrder {...stateProps} />\n          default:\n            return null\n        }\n      }}\n    />\n  )\n}\n","import { Trans } from '@lingui/react'\nimport React from 'react'\n\nimport { CardDock } from '../../../atoms/CardDock'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { MCancelOrder } from '../../../graph/types'\nimport { useGuardedMutation } from '../../../hooks/useGuardedMutation'\nimport { ConfirmButton } from '../../../molecules/ConfirmButton'\nimport { CancelOrderMutation } from '../../createorder/models/CreateOrderModel.graphql'\n\ninterface IProps {\n  orderId: ID\n}\n\nexport const OrderCancelButton: React.FC<IProps> = ({ orderId }) => {\n  const cancelOrder = useGuardedMutation<\n    MCancelOrder.Mutation,\n    MCancelOrder.Variables\n  >(CancelOrderMutation)\n\n  return (\n    <CardDock position=\"BottomLeft\">\n      <Sizer width={7.375}>\n        <ConfirmButton\n          confirmNode={<Trans>Really cancel?</Trans>}\n          onConfirm={() => {\n            cancelOrder({ orderId })\n          }}\n        >\n          <Trans>Cancel order</Trans>\n        </ConfirmButton>\n      </Sizer>\n    </CardDock>\n  )\n}\n","import { SECOND } from '@speedlo/hooks'\nimport React, { useEffect, useRef, useState } from 'react'\n\nimport { Colors } from '../styling'\nimport { TouchButton } from './TouchButton'\n\ninterface IProps {\n  confirmNode: ReactNode | string\n  initialColor?: Colors\n  confirmColor?: Colors\n  confirmDisableMs?: number\n  resetToInitialMs?: number\n  onConfirm(): void\n}\n\nexport const ConfirmButton: React.FC<IProps> = ({\n  confirmNode,\n  initialColor = Colors.greyMiddle,\n  confirmColor = Colors.red,\n  confirmDisableMs = 300,\n  resetToInitialMs = 3 * SECOND,\n  children,\n  onConfirm,\n}) => {\n  const [needConfirm, setNeedConfirm] = useState(false)\n  const buttonRef = useRef<HTMLButtonElement | null>(null)\n\n  const onClick = () => {\n    if (needConfirm === false) {\n      buttonRef.current!.disabled = true\n      setTimeout(() => {\n        setNeedConfirm(true)\n        if (buttonRef.current) {\n          buttonRef.current.disabled = false\n        }\n      }, confirmDisableMs)\n    } else {\n      onConfirm()\n    }\n  }\n\n  useEffect(\n    () => {\n      if (needConfirm) {\n        const timer = setTimeout(() => {\n          setNeedConfirm(false)\n        }, resetToInitialMs)\n        return () => {\n          clearTimeout(timer)\n        }\n      }\n      return undefined\n    },\n    [needConfirm],\n  )\n\n  return (\n    <TouchButton\n      ref={buttonRef}\n      onClick={onClick}\n      color={needConfirm ? confirmColor : initialColor}\n    >\n      {needConfirm ? confirmNode : children}\n    </TouchButton>\n  )\n}\n","import React from 'react'\nimport { useMutation } from 'react-apollo-hooks'\n\nimport { MChangeOrderToPickup } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { ChangeOrderToPickupMutation } from '../models/OrderStateModel.graphql'\n\ninterface IProps {\n  orderId: ID\n  isDelivery: boolean\n}\n\nexport const OrderDeliveryToPickup: React.FC<IProps> = ({\n  orderId,\n  isDelivery,\n}) => {\n  const changeToPickup = useMutation<\n    MChangeOrderToPickup.Mutation,\n    MChangeOrderToPickup.Variables\n  >(ChangeOrderToPickupMutation, { variables: { orderId } })\n  if (!isDelivery) {\n    return null\n  }\n  return (\n    <TouchButton\n      text={i18n.t`Change to pickup`}\n      onClick={() => {\n        changeToPickup()\n      }}\n    />\n  )\n}\n","import { i18nMark } from '@lingui/react'\nimport React from 'react'\n\nimport { OrderStateEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { TOrderStateModel } from '../models/OrderStateModel'\n\ninterface IProps {\n  orderId: ID\n  nextState: OrderStateEnum\n  stateModel: TOrderStateModel\n}\n\nconst stateLabels = {\n  [OrderStateEnum.Accepted]: i18nMark('Accept order'),\n  [OrderStateEnum.Finished]: i18nMark('Finish order'),\n}\n\nexport const OrderStateButton: React.FC<IProps> = ({\n  orderId,\n  nextState,\n  stateModel,\n}) => {\n  return (\n    <TouchButton\n      text={i18n._(stateLabels[nextState])}\n      width=\"7.375rem\"\n      onClick={() => {\n        stateModel.updateOrderState(orderId, nextState)\n      }}\n    />\n  )\n}\n","import React from 'react'\n\nimport { OrderStateCategoryEnum } from '../../../graph/types'\nimport { OrderDriverSelect } from '../atoms/OrderDriverSelect'\nimport { TOrderStateModel } from '../models/OrderStateModel'\nimport { QueryDriverSelection } from './OrderStateDeliver.graphql'\n\ninterface IProps {\n  branchId: ID\n  orderId: ID\n  orderStateCategory: OrderStateCategoryEnum\n  stateModel: TOrderStateModel\n}\n\nexport const OrderStateDeliver: React.SFC<IProps> = ({\n  branchId,\n  orderId,\n  orderStateCategory,\n  stateModel,\n}) => (\n  <QueryDriverSelection\n    fetchPolicy=\"network-only\"\n    variables={{ branchId: [branchId], orderId }}\n    render={(\n      { drivers, order: { driver: orderDriver } },\n      { loading, refetch },\n    ) => (\n      <OrderDriverSelect\n        drivers={drivers}\n        selectedDriver={orderDriver ? orderDriver.user : null}\n        isLoading={loading}\n        onReload={refetch}\n        onClear={() => {\n          if (orderDriver) stateModel.removeDriver(orderDriver.id)\n        }}\n        onSelect={driver => {\n          stateModel.selectDriver(orderId, driver.id)\n          if (orderStateCategory !== OrderStateCategoryEnum.OnWay) {\n            stateModel.deliverOrder(orderId)\n          }\n        }}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { components } from 'react-select'\nimport { StylesConfig } from 'react-select/lib/styles'\nimport styled from 'styled-components'\n\nimport { Icon } from '../../../atoms/Icon'\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { GDriver } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport { Colors, Radiuses, Spacing } from '../../../styling'\n\ntype TDriver = GDriver.Fragment\n\ninterface IProps {\n  drivers: ReadonlyArray<TDriver>\n  selectedDriver: Maybe<TDriver>\n  isLoading: boolean\n  onSelect(driver: TDriver): void\n  onClear(): void\n  onReload(): void\n}\n\nconst DriverName = styled.div`\n  margin: 0.1rem 0 0rem 0.2rem;\n  display: inline-block;\n  vertical-align: top;\n  font-size: 1.25rem;\n`\n\nconst backgroundColor = {\n  background: Colors.greyMiddle,\n}\nconst textColor = { color: Colors.white }\n\nconst styles: StylesConfig = {\n  control: base => ({\n    ...base,\n    ...backgroundColor,\n    ...textColor,\n    height: Spacing.ButtonHeight,\n    borderWidth: 0,\n    borderRadius: Radiuses.Button,\n    margin: 0,\n  }),\n  menu: base => ({\n    ...base,\n    ...backgroundColor,\n  }),\n  valueContainer: base => ({\n    ...base,\n    ...textColor,\n  }),\n  singleValue: base => ({\n    ...base,\n    ...textColor,\n  }),\n  placeholder: base => ({\n    ...base,\n    ...textColor,\n    fontSize: '1.2rem',\n  }),\n}\n\nexport const OrderDriverSelect: React.SFC<IProps> = ({\n  drivers,\n  selectedDriver,\n  isLoading,\n  onSelect,\n  onClear,\n  onReload,\n}) => (\n  <SelectControl<TDriver>\n    options={drivers as TDriver[]}\n    value={selectedDriver}\n    getOptionValue={RM.prop('id')}\n    isLoading={isLoading}\n    isSearchable={false}\n    isClearable={true}\n    placeholder=\"Deliver order\"\n    width={16}\n    styles={styles}\n    noOptionsMessage={() => i18n.t`No drivers available`}\n    onChange={driver =>\n      driver === null ? onClear() : onSelect(driver as TDriver)\n    }\n    onMenuOpen={onReload}\n    components={{\n      ValueContainer: props => (\n        <>\n          <Icon iconName=\"directions_car\" fontSize={2} color={Colors.white} />\n          <components.ValueContainer {...props} />\n        </>\n      ),\n      DropdownIndicator: () => null,\n    }}\n    formatOptionLabel={driver => (\n      <DriverName>{`${driver.firstName} ${driver.lastName}`}</DriverName>\n    )}\n  />\n)\n","import React, { Children } from 'react'\nimport styled from 'styled-components'\n\nimport { Spacing } from '../../../styling'\n\ninterface IProps {}\n\nconst OrderStateFlowContainerWrapper = styled.div`\n  margin: 0 0 0 auto;\n  text-align: right;\n  height: ${Spacing.ButtonHeight};\n`\n\nconst Control = styled.div`\n  margin: 0 0 0 0.5rem;\n  display: inline-block;\n  vertical-align: bottom;\n  text-align: left;\n  height: 100%;\n`\n\nexport const OrderStateFlowContainer: React.SFC<IProps> = ({ children }) => (\n  <OrderStateFlowContainerWrapper>\n    {Children.map(children, (child, idx) => (\n      <Control key={idx}>{child}</Control>\n    ))}\n  </OrderStateFlowContainerWrapper>\n)\n","import React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { i18n } from '../../../i18n'\nimport { DeliveryTimeDialog } from '../../../molecules/DeliveryTimeDialog'\nimport { TouchButton } from '../../../molecules/TouchButton'\n\ninterface IProps {\n  orderId: ID\n}\n\nexport const OrderStateTimeNotification: React.FC<IProps> = ({ orderId }) => {\n  const { order } = useRoot()\n\n  return (\n    <DeliveryTimeDialog\n      title={i18n.t`Send expected time of delivery to customer (in minutes)`}\n      onConfirm={minutes => {\n        order.state.sendTimeNotification(orderId, minutes)\n      }}\n    >\n      {({ openDialog }) => (\n        <TouchButton iconName=\"schedule\" onClick={openDialog} />\n      )}\n    </DeliveryTimeDialog>\n  )\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GOrderState } from '../../../graph/types'\nimport { OrderStateCategoryFragment } from '../models/OrderStateModel.graphql'\n\nexport const QueryOrderState = buildQuery<\n  GOrderState.Query,\n  GOrderState.Variables\n>(gql`\n  query GOrderState($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      deliveryType {\n        enum\n      }\n      orderOrigin {\n        enum\n      }\n      ...GOrderStateCategory\n    }\n    companyBranch(id: $branchId) {\n      id\n      allowedCategories\n    }\n  }\n  ${OrderStateCategoryFragment}\n`)\n","import { DatePickerProps, InlineDatePicker } from 'material-ui-pickers'\nimport React from 'react'\nimport { Field, FieldType } from 'react-form'\n\nimport { i18n } from '../i18n'\nimport { DateTimeFormatProvider } from './DateTimeFormatProvider'\n\ninterface IProps extends Omit<DatePickerProps, 'value' | 'onChange'> {\n  field: FieldType\n}\n\nexport const FormInputDate: React.FC<IProps> = ({ field, ...pickerProps }) => {\n  return (\n    <DateTimeFormatProvider>\n      <Field\n        field={field}\n        render={fieldApi => (\n          <InlineDatePicker\n            value={fieldApi.value}\n            onChange={value => fieldApi.setValue(value)}\n            onOpen={() => fieldApi.setTouched(true)}\n            format=\"ll\"\n            ampm={false}\n            okLabel={i18n.t`Ok`}\n            cancelLabel={i18n.t`Cancel`}\n            clearLabel={i18n.t`Clear`}\n            todayLabel={i18n.t`Today`}\n            maxDateMessage={i18n.t`Date is too much in the future`}\n            minDateMessage={i18n.t`Date is too much in the past`}\n            {...pickerProps}\n          />\n        )}\n      />\n    </DateTimeFormatProvider>\n  )\n}\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\nexport const FlexRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  border-bottom: 1px solid ${Colors.greyMiddle};\n  padding: 0.1rem 0 0.1rem 0;\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface IProps {\n  text: string\n}\n\nconst MonospaceOutputStyled = styled.p`\n  color: white;\n  font-family: 'Lucida Console', Monaco, monospace;\n  white-space: pre-wrap;\n  margin: 0.2rem 0.5rem 0.5rem 1rem;\n  line-height: 1.8rem;\n`\n\nconst formatOutput = (output: string) =>\n  output.replace(new RegExp('\\t', 'g'), '\\u0009')\n\nexport const MonospaceOutput: React.SFC<IProps> = ({ text }) => (\n  <MonospaceOutputStyled>{formatOutput(text)}</MonospaceOutputStyled>\n)\n","import React, { useContext } from 'react'\nimport { Form } from 'react-form'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { GOrdersStatistics } from '../../../graph/types'\nimport { createStatisticsQuery } from '../hooks/createStatisticsQuery'\nimport { OrdersStatisticsQuery } from './OrdersStatisticsLoader.graphql'\n\nexport type TOrdersStats = GOrdersStatistics.FinishedOrders\n\nconst { context, useStatisticsQuery } = createStatisticsQuery<\n  GOrdersStatistics.Query,\n  GOrdersStatistics.Variables\n>(OrdersStatisticsQuery)\n\nexport const useOrderStatistics = () => useContext(context)!\n\nexport const OrdersStatisticsLoader: React.FC = ({ children }) => {\n  const { statistics } = useRoot()\n  const { result, executeFilter, defaultValues } = useStatisticsQuery()\n\n  return (\n    <Form\n      onSubmit={executeFilter}\n      onChange={({ values }) => statistics.updateFilter(values)}\n      defaultValues={defaultValues}\n    >\n      <context.Provider value={result}>{children}</context.Provider>\n    </Form>\n  )\n}\n","import { subDays } from 'date-fns'\nimport React, { createContext, useContext } from 'react'\nimport { Form } from 'react-form'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { GClosureHistory } from '../../../graph/types'\nimport { formatDateISO } from '../../../helpers/formats'\nimport {\n  IQueryResult,\n  useExecutableQuery,\n} from '../../../hooks/useExecutableQuery'\nimport { ClosureHistoryQuery } from './ClosureHistoryLoader.graphql'\n\nexport type TReports = GClosureHistory.FinancialReports\n\nconst context = createContext<IQueryResult<GClosureHistory.Query> | null>(null)\n\nexport const useClosureHistory = () => useContext(context)!\n\nexport const ClosureHistoryLoader: React.SFC = ({ children }) => {\n  const { statistics } = useRoot()\n  const { result, execute } = useExecutableQuery<\n    GClosureHistory.Query,\n    GClosureHistory.Variables\n  >(ClosureHistoryQuery)\n\n  return (\n    <Form\n      onSubmit={(formValues: { dateFrom: Date; dateTo: Date }) => {\n        if (statistics.closureBranch) {\n          execute({\n            branchId: statistics.closureBranch,\n            dateFrom: formatDateISO(formValues.dateFrom),\n            dateTo: formatDateISO(formValues.dateTo),\n          })\n        }\n      }}\n      defaultValues={{ dateFrom: subDays(new Date(), 1), dateTo: new Date() }}\n    >\n      <context.Provider value={result}>{children}</context.Provider>\n    </Form>\n  )\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { CompanyBranchPicker } from '../../../organisms/CompanyBranchPicker'\nimport { ClosureCurrentButton } from './ClosureCurrentButton'\n\nconst ButtonToRight = styled.div`\n  float: right;\n  margin: 0.5rem;\n`\n\ninterface IProps {\n  showCurrent: boolean\n}\n\nexport const ClosureStatisticsFilter = observer<IProps>(({ showCurrent }) => {\n  const { statistics } = useRoot()\n  return (\n    <>\n      <CompanyBranchPicker\n        selectedBranches={\n          statistics.closureBranch ? [statistics.closureBranch] : []\n        }\n        onSelectionChange={([branch]) => statistics.setClosureBranch(branch)}\n        onSelectionClear={() => statistics.setClosureBranch(null)}\n        isClearable={false}\n      />\n      {showCurrent && (\n        <ButtonToRight>\n          <ClosureCurrentButton />\n        </ButtonToRight>\n      )}\n    </>\n  )\n})\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { CanQuery } from '../../../atoms/CanQuery'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\n\ninterface IProps {}\n\nexport const ClosureCurrentButton: React.SFC<IProps> = props => {\n  return (\n    <CanQuery queryName=\"lastFinancialReport\">\n      <Link to=\"/overview/closure\">\n        <TouchButton\n          text={i18n.t`Current closure`}\n          color={Colors.orange}\n          width=\"15rem\"\n          height={Spacing.ButtonHeight}\n        />\n      </Link>\n    </CanQuery>\n  )\n}\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { CompanyBranchPicker } from '../../../organisms/CompanyBranchPicker'\n\ninterface IProps {}\n\nexport const StatisticsBranchFilter: React.FC<IProps> = () => {\n  const { statistics } = useRoot()\n  return useObserver(() => (\n    <CompanyBranchPicker\n      selectedBranches={Array.from(statistics.branches)}\n      onSelectionChange={statistics.setBranchFilter}\n      onSelectionClear={statistics.clearBranchFilter}\n      isMulti={true}\n    />\n  ))\n}\n","import { Plural, Trans } from '@lingui/react'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { FormInputDateTime } from '../../../atoms/FormInputDateTime'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { FormSubmit } from '../../../molecules/FormSubmit'\n\nexport const StatisticsFilter = () => {\n  const { statistics } = useRoot()\n  return useObserver(() => (\n    <FlexRowSingle justify=\"flex-start\">\n      <FlexColumn fixedWidth={true} width=\"12rem\">\n        <FormInputDateTime\n          field=\"dateTimeFrom\"\n          label={<Trans>From</Trans>}\n          autoOk={true}\n        />\n      </FlexColumn>\n      <FlexColumn fixedWidth={true} width=\"12rem\">\n        <FormInputDateTime\n          field=\"dateTimeTo\"\n          label={<Trans>To</Trans>}\n          autoOk={true}\n        />\n      </FlexColumn>\n      <FlexColumn>\n        <FormSubmit width=\"15rem\">\n          <Plural\n            value={statistics.branchesFilter.length}\n            one=\"Show for one branch\"\n            few=\"Show for # branches\"\n            other=\"Show for # branches\"\n          />\n        </FormSubmit>\n      </FlexColumn>\n    </FlexRowSingle>\n  ))\n}\n","import React, { useContext } from 'react'\nimport { Form } from 'react-form'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { GDailyStatistics } from '../../../graph/types'\nimport { createStatisticsQuery } from '../hooks/createStatisticsQuery'\nimport { DailyStatisticsQuery } from './DailyStatisticsLoader.graphql'\n\nexport type TOrdersStats = GDailyStatistics.Stats\n\nconst { useStatisticsQuery, context } = createStatisticsQuery<\n  GDailyStatistics.Query,\n  GDailyStatistics.Variables\n>(DailyStatisticsQuery)\n\nexport const useDailyStatistics = () => useContext(context)!\n\nexport const DailyStatisticsLoader: React.SFC = ({ children }) => {\n  const { statistics } = useRoot()\n  const { result, executeFilter, defaultValues } = useStatisticsQuery()\n\n  return (\n    <Form\n      onSubmit={executeFilter}\n      onChange={({ values }) => statistics.updateFilter(values)}\n      defaultValues={defaultValues}\n    >\n      <context.Provider value={result}>{children}</context.Provider>\n    </Form>\n  )\n}\n","import { DocumentNode } from 'graphql'\nimport { createContext } from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { formatDateISO } from '../../../helpers/formats'\nimport {\n  IQueryResult,\n  useExecutableQuery,\n} from '../../../hooks/useExecutableQuery'\n\ninterface IVariables {\n  readonly dateTimeFrom: string\n  readonly dateTimeTo: string\n  readonly branches: ReadonlyArray<string>\n}\n\nconst getInitialResult = () => ({\n  data: null,\n  loading: false,\n  hasAnyError: false,\n  wasExecuted: false,\n})\n\nexport function createStatisticsQuery<TData, TVariables extends IVariables>(\n  query: DocumentNode,\n) {\n  const context = createContext<IQueryResult<TData>>(getInitialResult())\n  const useStatisticsQuery = () => {\n    const { statistics } = useRoot()\n    const { result, execute, reset } = useExecutableQuery<TData, IVariables>(\n      query,\n    )\n    const executeFilter = () => {\n      reset()\n      execute({\n        branches: statistics.branchesFilter,\n        dateTimeFrom: formatDateISO(statistics.dateTimeFrom),\n        dateTimeTo: formatDateISO(statistics.dateTimeTo),\n      })\n    }\n    const defaultValues = {\n      dateTimeFrom: statistics.dateTimeFrom,\n      dateTimeTo: statistics.dateTimeTo,\n    }\n    return { result, executeFilter, resetResult: reset, defaultValues }\n  }\n  return {\n    context,\n    useStatisticsQuery,\n  }\n}\n","import React from 'react'\n\nimport { Card } from '../../../atoms/Card'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { ClosureHistoryFilter } from '../molecules/ClosureHistoryFilter'\nimport { ClosureHistoryTable } from '../molecules/ClosureHistoryTable'\nimport { ClosureStatisticsFilter } from '../molecules/ClosureStatisticsFilter'\nimport { ClosureHistoryLoader } from '../organisms/ClosureHistoryLoader'\n\ninterface IProps {}\n\nexport const ClosureHistoryPage: React.SFC<IProps> = props => (\n  <ClosureHistoryLoader>\n    <FullPageLayout\n      pageTitle={i18n.t`Closure history`}\n      useBackButton={true}\n      backRoute=\"/overview\"\n    >\n      <Card>\n        <ClosureStatisticsFilter showCurrent={true} />\n        <ClosureHistoryFilter />\n      </Card>\n      <Card>\n        <ClosureHistoryTable />\n      </Card>\n    </FullPageLayout>\n  </ClosureHistoryLoader>\n)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\n\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { FormInputDate } from '../../../atoms/FormInputDate'\nimport { FormSubmit } from '../../../molecules/FormSubmit'\n\nexport const ClosureHistoryFilter = () => {\n  return (\n    <FlexRowSingle justify=\"flex-start\">\n      <FlexColumn fixedWidth={true} width=\"12rem\">\n        <FormInputDate\n          field=\"dateFrom\"\n          label={<Trans>From date</Trans>}\n          autoOk={true}\n        />\n      </FlexColumn>\n      <FlexColumn fixedWidth={true} width=\"12rem\">\n        <FormInputDate\n          field=\"dateTo\"\n          label={<Trans>To date</Trans>}\n          autoOk={true}\n        />\n      </FlexColumn>\n      <FlexColumn>\n        <FormSubmit width=\"15rem\">\n          <Trans>Show history for branch</Trans>\n        </FormSubmit>\n      </FlexColumn>\n    </FlexRowSingle>\n  )\n}\n","import { Trans } from '@lingui/react'\nimport { Typography } from '@material-ui/core'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRow } from '../../../atoms/FlexRow'\nimport { Headline } from '../../../atoms/Headline'\nimport { Loading } from '../../../atoms/Loading'\nimport { RelativeLink } from '../../../atoms/RelativeLink'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { formatDateISO } from '../../../helpers/formats'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Spacing } from '../../../styling'\nimport { useClosureHistory } from '../organisms/ClosureHistoryLoader'\n\nexport const ClosureHistoryTable = observer(() => {\n  const { data, loading, wasExecuted } = useClosureHistory()\n  const { statistics } = useRoot()\n  if (!wasExecuted) {\n    return (\n      <Typography variant=\"subheading\">\n        <em>\n          <Trans>Use the filter</Trans>\n        </em>\n      </Typography>\n    )\n  }\n  if (loading) {\n    return (\n      <Headline>\n        <Loading />\n      </Headline>\n    )\n  }\n  if (!statistics.closureBranch) {\n    return (\n      <Headline>\n        <Trans>Select a branch</Trans>\n      </Headline>\n    )\n  }\n  if (data && data.financialReports.length === 0) {\n    return (\n      <Headline>\n        <Trans>No closures found</Trans>\n      </Headline>\n    )\n  }\n  return (\n    <>\n      {data &&\n        data.financialReports.map(report => (\n          <FlexRow key={report.id}>\n            <FlexColumn fixedWidth={true}>\n              <RelativeLink to={`../${report.id}`}>\n                <TouchButton\n                  iconName=\"mode_edit\"\n                  width={Spacing.ButtonHeight}\n                  height={Spacing.ButtonHeight}\n                />\n              </RelativeLink>\n            </FlexColumn>\n            <FlexColumn widthGrowIndex={1}>\n              {`[${report.reportSequence}] ${formatDateISO(\n                report.reportDatetime,\n              )}`}\n            </FlexColumn>\n          </FlexRow>\n        ))}\n    </>\n  )\n})\n","import gql from 'graphql-tag'\n\nexport const ClosureHistoryQuery = gql`\n  query GClosureHistory($branchId: ID!, $dateFrom: Date!, $dateTo: Date!) {\n    financialReports(\n      companyBranchId: $branchId\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n    ) {\n      id\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router'\n\nimport { Card } from '../../../atoms/Card'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { ClosureStatisticsFilter } from '../molecules/ClosureStatisticsFilter'\nimport { ClosureStatisticsContent } from '../organisms/ClosureStatisticsContent'\nimport { ClosureStatisticsControl } from '../organisms/ClosureStatisticsControl'\n\ninterface IRouteParams {\n  reportId?: string\n}\n\ninterface IProps extends RouteComponentProps<IRouteParams> {}\n\nexport const ClosurePage: React.SFC<IProps> = ({ match }) => (\n  <FullPageLayout\n    pageTitle={i18n.t`Closure`}\n    useBackButton={true}\n    backRoute=\"/overview\"\n  >\n    <Card>\n      <ClosureStatisticsFilter showCurrent={false} />\n      <ClosureStatisticsControl showCurrent={Boolean(match.params.reportId)} />\n    </Card>\n    <ClosureStatisticsContent reportId={match.params.reportId} />\n  </FullPageLayout>\n)\n","import React from 'react'\n\nimport { MonospaceOutput } from '../../../atoms/MonospaceOutput'\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { i18n } from '../../../i18n'\nimport { QueryFinancialReport } from './ClosureStatisticsContent.graphql'\n\ninterface IProps {\n  reportId?: string\n}\n\nexport const ClosureStatisticsContent: React.SFC<IProps> = ({\n  reportId = '',\n}) => (\n  <WithRoot\n    render={({ statistics }) =>\n      statistics.closureBranch ? (\n        <QueryFinancialReport\n          variables={{\n            branchId: statistics.closureBranch,\n            reportId,\n            showReport: Boolean(reportId),\n          }}\n          fetchPolicy=\"cache-and-network\"\n          renderLoading={false}\n          render={({ report, lastReport }, { loading }) =>\n            loading ? (\n              <MonospaceOutput text={i18n.t`Computing`} />\n            ) : (\n              <MonospaceOutput\n                text={reportId ? report!.plainData : lastReport.plainData}\n              />\n            )\n          }\n        />\n      ) : null\n    }\n  />\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GClosureReportQuery } from '../../../graph/types'\n\nexport const FinancialReport = gql`\n  query GClosureReportQuery(\n    $branchId: ID!\n    $reportId: ID!\n    $showReport: Boolean!\n  ) {\n    lastReport: lastFinancialReport(companyBranchId: $branchId)\n      @skip(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n    report: financialReport(report: $reportId) @include(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport const QueryFinancialReport = buildQuery<\n  GClosureReportQuery.Query,\n  GClosureReportQuery.Variables\n>(FinancialReport)\n","import { useObserver } from 'mobx-react-lite'\nimport React, { useCallback } from 'react'\nimport styled from 'styled-components'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { GCreateFinancialReport } from '../../../graph/types'\nimport { useGuardedMutation } from '../../../hooks/useGuardedMutation'\nimport useRouterContext from '../../../hooks/useRouterContext'\nimport { useSnackBar } from '../../../hooks/useSnackBar'\nimport { i18n } from '../../../i18n'\nimport { ClosureCurrentButton } from '../molecules/ClosureCurrentButton'\nimport { ClosureHistoryButton } from '../molecules/ClosureHistoryButton'\nimport { ClosureSubmitButton } from '../molecules/ClosureSubmitButton'\nimport { CreateFinancialReport } from './ClosureStatisticsControl.graphql'\n\ninterface IProps {\n  showCurrent: boolean\n}\n\nconst ButtonToRight = styled.div`\n  float: right;\n`\n\nexport const ClosureStatisticsControl: React.FC<IProps> = ({ showCurrent }) => {\n  const { statistics } = useRoot()\n  const { enqueueSuccess } = useSnackBar()\n  const { history } = useRouterContext()\n\n  const createClosure = useGuardedMutation<\n    GCreateFinancialReport.Mutation,\n    GCreateFinancialReport.Variables\n  >(CreateFinancialReport)\n\n  const onSubmit = useCallback(async () => {\n    if (!statistics.closureBranch) {\n      return\n    }\n    const data = await createClosure({\n      companyBranchId: statistics.closureBranch,\n    })\n    if (data) {\n      const { id } = data.result\n      history.push(`/overview/closure/${id}`)\n      enqueueSuccess(i18n.t`Closure has been created`)\n    }\n  }, [])\n\n  return useObserver(() => (\n    <>\n      {showCurrent ? (\n        <ClosureCurrentButton />\n      ) : (\n        <ClosureSubmitButton\n          onClick={onSubmit}\n          disabled={!statistics.closureBranch}\n        />\n      )}\n      <ButtonToRight>\n        <ClosureHistoryButton />\n      </ButtonToRight>\n    </>\n  ))\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { CanQuery } from '../../../atoms/CanQuery'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\n\ninterface IProps {}\n\nexport const ClosureHistoryButton: React.SFC<IProps> = props => {\n  return (\n    <CanQuery queryName=\"financialReports\">\n      <Link to=\"/overview/closure/history\">\n        <TouchButton\n          text={i18n.t`Closure history`}\n          color={Colors.greyDark}\n          width=\"15rem\"\n          height={Spacing.ButtonHeight}\n        />\n      </Link>\n    </CanQuery>\n  )\n}\n","import React, { MouseEvent } from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nexport interface IProps {\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n  disabled: boolean\n}\n\nexport const ClosureSubmitButton: React.SFC<IProps> = props => (\n  <CanMutate mutationName=\"createFinancialReport\">\n    <TouchButton\n      text={i18n.t`Create closure`}\n      color={Colors.green}\n      width=\"12rem\"\n      {...props}\n    />\n  </CanMutate>\n)\n","import React from 'react'\n\nimport { Card } from '../../../atoms/Card'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { StatisticsBranchFilter } from '../molecules/StatisticsBranchFilter'\nimport { StatisticsFilter } from '../molecules/StatisticsFilter'\nimport { DailyStatisticsContent } from '../organisms/DailyStatisticsContent'\nimport { DailyStatisticsLoader } from '../organisms/DailyStatisticsLoader'\n\nexport const DailyStatisticsPage: React.FC = () => (\n  <FullPageLayout pageTitle={i18n.t`Sales statistics`} useBackButton={true}>\n    <DailyStatisticsLoader>\n      <Card>\n        <StatisticsBranchFilter />\n        <StatisticsFilter />\n      </Card>\n      <DailyStatisticsContent />\n    </DailyStatisticsLoader>\n  </FullPageLayout>\n)\n","import { DateTimePickerProps, InlineDateTimePicker } from 'material-ui-pickers'\nimport React from 'react'\nimport { Field, FieldType } from 'react-form'\n\nimport { i18n } from '../i18n'\nimport { DateTimeFormatProvider } from './DateTimeFormatProvider'\n\ninterface IProps extends Omit<DateTimePickerProps, 'value' | 'onChange'> {\n  field: FieldType\n}\n\nexport const FormInputDateTime: React.FC<IProps> = ({\n  field,\n  ...pickerProps\n}) => {\n  return (\n    <DateTimeFormatProvider>\n      <Field\n        field={field}\n        render={fieldApi => (\n          <InlineDateTimePicker\n            value={fieldApi.value}\n            onChange={value => fieldApi.setValue(value)}\n            onOpen={() => fieldApi.setTouched(true)}\n            format=\"lll\"\n            ampm={false}\n            showTabs={false}\n            // okLabel={i18n.t`Ok`}\n            // cancelLabel={i18n.t`Cancel`}\n            // clearLabel={i18n.t`Clear`}\n            // todayLabel={i18n.t`Today`}\n            maxDateMessage={i18n.t`Date is too much in the future`}\n            minDateMessage={i18n.t`Date is too much in the past`}\n            {...pickerProps}\n          />\n        )}\n      />\n    </DateTimeFormatProvider>\n  )\n}\n","import { Trans } from '@lingui/react'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { Headline } from '../../../atoms/Headline'\nimport { MonospaceOutput } from '../../../atoms/MonospaceOutput'\nimport { i18n } from '../../../i18n'\nimport { useDailyStatistics } from './DailyStatisticsLoader'\n\nexport const DailyStatisticsContent = observer(() => {\n  const { data, loading } = useDailyStatistics()\n  if (!data) {\n    return null\n  }\n  if (loading) {\n    return <MonospaceOutput text={i18n.t`Computing`} />\n  }\n  const { stats } = data\n  return (\n    <>\n      <Headline light={true}>\n        <Trans>Daily statistics</Trans>\n      </Headline>\n      <MonospaceOutput text={stats.dailyStatisticsPlain} />\n\n      <Headline light={true}>\n        <Trans>By category</Trans>\n      </Headline>\n      <MonospaceOutput text={stats.categoryStatisticsPlain} />\n\n      <Headline light={true}>\n        <Trans>By type</Trans>\n      </Headline>\n      <MonospaceOutput text={stats.deliveryStatisticsPlain} />\n\n      <Headline light={true}>\n        <Trans>By driver</Trans>\n      </Headline>\n      <MonospaceOutput text={stats.driversStatisticsPlain} />\n    </>\n  )\n})\n","import gql from 'graphql-tag'\n\nexport const DailyStatisticsQuery = gql`\n  query GDailyStatistics(\n    $branches: [ID!]!\n    $dateTimeFrom: DateTime!\n    $dateTimeTo: DateTime!\n  ) {\n    stats: statistics(\n      branches: $branches\n      dateTimeFrom: $dateTimeFrom\n      dateTimeTo: $dateTimeTo\n    ) {\n      categoryStatisticsPlain\n      dailyStatisticsPlain\n      deliveryStatisticsPlain\n      driversStatisticsPlain\n    }\n  }\n`\n","import React from 'react'\n\nimport { Card } from '../../../atoms/Card'\nimport { AutoHeight } from '../../../atoms/FlexAutoHeight'\nimport { i18n } from '../../../i18n'\nimport { PageLayout } from '../../../molecules/PageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { StatisticsBranchFilter } from '../molecules/StatisticsBranchFilter'\nimport { StatisticsFilter } from '../molecules/StatisticsFilter'\nimport { OrdersStatisticsList } from '../organisms/OrdersStatisticsList'\nimport { OrdersStatisticsLoader } from '../organisms/OrdersStatisticsLoader'\nimport { OrdersStatisticsSummary } from '../organisms/OrdersStatisticsSummary'\n\ninterface IProps {}\n\nfunction getLayout() {\n  return [{ i: 'summary', x: 0, y: 1, w: 7, h: 1 }]\n}\n\nexport const OrdersStatisticsPage: React.SFC<IProps> = props => (\n  <OrdersStatisticsLoader>\n    <PageLayoutFullHeightItem\n      withScrollArea={false}\n      row={1}\n      column={7}\n      widthInColumns={9}\n    >\n      <AutoHeight>\n        <OrdersStatisticsList />\n      </AutoHeight>\n    </PageLayoutFullHeightItem>\n\n    <PageLayout\n      layouts={getLayout()}\n      pageTitle={i18n.t`Orders statistics`}\n      showSoundControl={false}\n      scrollPageTitle={false}\n      useBackButton={true}\n    >\n      <div key=\"summary\">\n        <Card>\n          <StatisticsBranchFilter />\n          <StatisticsFilter />\n        </Card>\n\n        <OrdersStatisticsSummary />\n      </div>\n    </PageLayout>\n  </OrdersStatisticsLoader>\n)\n","import { Trans } from '@lingui/react'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect, useMemo, useRef } from 'react'\nimport { useApolloClient } from 'react-apollo-hooks'\nimport {\n  AutoSizer,\n  CellMeasurer,\n  CellMeasurerCache,\n  IndexRange,\n  InfiniteLoader,\n  List,\n} from 'react-virtualized'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { GOrdersStatisticsList } from '../../../graph/types'\nimport { formatDateISO } from '../../../helpers/formats'\nimport { OrderBox } from '../../../segments/order/atoms/OrderBox'\nimport { OrdersStatisticsListQuery } from './OrdersStatisticsList.graphql'\nimport { useOrderStatistics } from './OrdersStatisticsLoader'\n\nexport const OrdersStatisticsList = observer(() => {\n  const { statistics, order: orderModel } = useRoot()\n  const { data, wasExecuted } = useOrderStatistics()\n  const loaderRef = useRef<InfiniteLoader | null>(null)\n\n  const orders = useRef(new Map())\n\n  const measureCache = useMemo(\n    () =>\n      new CellMeasurerCache({\n        fixedWidth: true,\n        defaultHeight: 55,\n        minHeight: 55,\n      }),\n    [],\n  )\n\n  useEffect(\n    () => {\n      // whenever this turns to false it means that filter was executed again\n      // and everything should reset in here\n      if (wasExecuted === false) {\n        orders.current.clear()\n        measureCache.clearAll()\n        if (loaderRef.current) {\n          loaderRef.current.resetLoadMoreRowsCache(true)\n        }\n      }\n    },\n    [wasExecuted],\n  )\n\n  const client = useApolloClient()!\n\n  const queryMoreOrders = async ({ startIndex, stopIndex }: IndexRange) => {\n    const result = await client.query<\n      GOrdersStatisticsList.Query,\n      GOrdersStatisticsList.Variables\n    >({\n      query: OrdersStatisticsListQuery,\n      variables: {\n        branches: statistics.branchesFilter,\n        dateTimeFrom: formatDateISO(statistics.dateTimeFrom),\n        dateTimeTo: formatDateISO(statistics.dateTimeTo),\n        pagination: { fromIndex: startIndex, toIndex: stopIndex },\n      },\n    })\n\n    const list = [...result.data.stats.orders.list]\n    for (let index = startIndex; index <= stopIndex; index++) {\n      orders.current.set(index, list.shift())\n    }\n  }\n\n  let totalCount = 0\n  if (data && data.stats) {\n    const { finishedCount, cancelledCount } = data.stats.finishedOrders\n    totalCount = finishedCount + cancelledCount\n  }\n\n  return (\n    <AutoSizer>\n      {({ width, height }) => (\n        <InfiniteLoader\n          rowCount={totalCount}\n          isRowLoaded={({ index }) => orders.current.has(index)}\n          loadMoreRows={queryMoreOrders}\n          ref={loaderRef}\n        >\n          {({ onRowsRendered, registerChild }) => (\n            <List\n              ref={registerChild}\n              onRowsRendered={onRowsRendered}\n              rowHeight={measureCache.rowHeight}\n              deferredMeasurementCache={measureCache}\n              rowCount={totalCount}\n              width={width}\n              height={height}\n              noRowsRenderer={() => (\n                <CardListTitle>\n                  {wasExecuted ? <Trans>No orders</Trans> : null}\n                </CardListTitle>\n              )}\n              rowRenderer={({ index, key, style, parent }) => {\n                const order = orders.current.get(index)\n                if (!order) {\n                  return (\n                    <div style={style} key={key}>\n                      ...\n                    </div>\n                  )\n                }\n                return (\n                  <CellMeasurer\n                    key={key}\n                    columnIndex={0}\n                    rowIndex={index}\n                    cache={measureCache}\n                    parent={parent}\n                  >\n                    {({ measure }) => (\n                      <div style={style}>\n                        <OrderBox\n                          order={order}\n                          toggleOrderDetail={o => {\n                            orderModel.list.toggleOrderDetail(o)\n                            setTimeout(measure, 500)\n                          }}\n                          isOrderDetailOpen={orderModel.list.isOrderDetailOpen}\n                          showBranch={statistics.branchesFilter.length > 1}\n                        />\n                      </div>\n                    )}\n                  </CellMeasurer>\n                )\n              }}\n            />\n          )}\n        </InfiniteLoader>\n      )}\n    </AutoSizer>\n  )\n})\n","import gql from 'graphql-tag'\n\nimport { OrderTickerFragment } from '../../../segments/order/molecules/OrderTicker.graphql'\nimport { OrderStateCategoryFragment } from '../../order/models/OrderStateModel.graphql'\n\nexport const OrdersStatisticsListQuery = gql`\n  query GOrdersStatisticsList(\n    $branches: [ID!]!\n    $dateTimeFrom: DateTime!\n    $dateTimeTo: DateTime!\n    $pagination: InputPaginationParams!\n  ) {\n    stats: statistics(\n      branches: $branches\n      dateTimeFrom: $dateTimeFrom\n      dateTimeTo: $dateTimeTo\n    ) {\n      orders: finishedOrders {\n        list: orders(includeCanceled: true, pagination: $pagination) {\n          ...GOrderListTicker\n          ...GOrderStateCategory\n        }\n      }\n    }\n  }\n\n  ${OrderTickerFragment}\n  ${OrderStateCategoryFragment}\n`\n","import gql from 'graphql-tag'\n\nexport const OrdersStatisticsQuery = gql`\n  query GOrdersStatistics(\n    $branches: [ID!]!\n    $dateTimeFrom: DateTime!\n    $dateTimeTo: DateTime!\n  ) {\n    stats: statistics(\n      branches: $branches\n      dateTimeFrom: $dateTimeFrom\n      dateTimeTo: $dateTimeTo\n    ) {\n      finishedOrders {\n        fees {\n          ...GStatsPrice\n        }\n        onlinePayments {\n          ...GStatsPrice\n        }\n        total {\n          ...GStatsPrice\n        }\n        finishedCount: ordersCount\n        cancelledCount: ordersCanceledCount\n      }\n      orderStatisticsPlain\n    }\n  }\n\n  fragment GStatsPrice on PriceConverted {\n    value\n    currency {\n      code\n    }\n  }\n`\n","import { Trans } from '@lingui/react'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { MonospaceOutput } from '../../../atoms/MonospaceOutput'\nimport { Price } from '../../../atoms/Price'\nimport { useOrderStatistics } from '../organisms/OrdersStatisticsLoader'\n\nconst StatPanel = styled.div`\n  margin: 1.4rem 4rem 0 0.5rem;\n  display: inline-block;\n`\n\nconst StatLabel = styled.h1`\n  font-size: 1.5rem;\n  font-weight: normal;\n  margin: 0;\n`\n\nconst StatValue = styled.h2`\n  font-size: 4rem;\n  font-weight: normal;\n  margin: 0;\n`\n\nexport const OrdersStatisticsSummary = observer(() => {\n  const { loading, data } = useOrderStatistics()\n  if (loading || !data) {\n    return null\n  }\n  const stats = data.stats.finishedOrders\n  return (\n    <>\n      <StatPanel>\n        <StatLabel>\n          <Trans>Total turnover</Trans>\n        </StatLabel>\n        <StatValue>\n          <Price\n            price={stats.total.value}\n            currencyCode={stats.total.currency.code}\n          />\n        </StatValue>\n      </StatPanel>\n      <StatPanel>\n        <StatLabel>\n          <Trans>Online payments</Trans>\n        </StatLabel>\n        <StatValue>\n          <Price\n            price={stats.onlinePayments.value}\n            currencyCode={stats.onlinePayments.currency.code}\n          />\n        </StatValue>\n      </StatPanel>\n      <StatPanel>\n        <StatLabel>\n          <Trans>Orders count</Trans>\n        </StatLabel>\n        <StatValue>{stats.finishedCount + stats.cancelledCount}</StatValue>\n      </StatPanel>\n      <StatPanel>\n        <StatLabel>\n          <Trans>Total commissions</Trans>\n        </StatLabel>\n        <StatValue>\n          <Price\n            price={stats.fees.value}\n            currencyCode={stats.fees.currency.code}\n          />\n        </StatValue>\n      </StatPanel>\n      <StatPanel>\n        <MonospaceOutput text={data.stats.orderStatisticsPlain} />\n      </StatPanel>\n    </>\n  )\n})\n","import React from 'react'\n\nimport { PageLayout } from '../../../molecules/PageLayout'\nimport { PageLayoutItem } from '../../../molecules/PageLayoutItem'\nimport { ClosureButton } from '../molecules/ClosureButton'\nimport { DailyStatisticsButton } from '../molecules/DailyStatisticsButton'\nimport { OrdersStatisticsButton } from '../molecules/OrdersStatisticsButton'\n\ninterface IProps {}\n\nfunction getLayout() {\n  return [\n    { i: 'OrdersStatistics', x: 0, y: 1, w: 2, h: 2 },\n    { i: 'DailyStatistics', x: 2, y: 1, w: 2, h: 2 },\n    { i: 'Closure', x: 4, y: 1, w: 2, h: 2 },\n  ]\n}\n\nexport const OverviewPage: React.SFC<IProps> = props => (\n  <PageLayout layouts={getLayout()}>\n    <PageLayoutItem\n      key=\"OrdersStatistics\"\n      route=\"/overview/orders\"\n      component={OrdersStatisticsButton}\n      canQuery=\"statistics\"\n    />\n    <PageLayoutItem\n      key=\"DailyStatistics\"\n      route=\"/overview/statistics\"\n      component={DailyStatisticsButton}\n      canQuery=\"statistics\"\n    />\n    <PageLayoutItem\n      key=\"Closure\"\n      route=\"/overview/closure\"\n      component={ClosureButton}\n      canQuery=\"lastFinancialReport\"\n    />\n  </PageLayout>\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nexport const ClosureButton: React.SFC = props => (\n  <TouchButton\n    text={i18n.t`Closure`}\n    iconName=\"assignment\"\n    color={Colors.turquoise}\n  />\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nexport const DailyStatisticsButton: React.SFC = props => (\n  <TouchButton\n    text={i18n.t`Sales statistics`}\n    iconName=\"assignment\"\n    color={Colors.turquoise}\n  />\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nexport const OrdersStatisticsButton: React.SFC = props => (\n  <TouchButton\n    text={i18n.t`Orders statistics`}\n    iconName=\"assignment\"\n    color={Colors.turquoise}\n  />\n)\n"],"sourceRoot":""}