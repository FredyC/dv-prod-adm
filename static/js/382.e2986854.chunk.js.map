{"version":3,"sources":["atoms/CanMutate.tsx","atoms/FlexColumn.tsx","components/forms/FormInput.tsx","atoms/Loading.tsx","molecules/TouchButtonDelete.tsx","atoms/CanQuery.tsx","components/forms/FormSubmitButton.tsx","atoms/DateTimeFormatProvider.tsx","atoms/FlexDiv.tsx","atoms/FlexRow.tsx","hooks/useSettings.ts","atoms/InputDate.tsx","components/forms/FormInputDate.tsx","atoms/InputTime.tsx","segments/businesshours/atoms/BusinessHoursTimeRange.tsx","segments/businesshours/molecules/BusinessHoursWeekday.tsx","segments/businesshours/organisms/BusinessHoursForm.tsx","components/forms/FormInputTime.tsx","components/forms/FormInputTimeSpan.tsx","segments/businesshours/molecules/SpecificModeSelector.tsx","segments/businesshours/organisms/SpecificBusinessHourForm.tsx","segments/businesshours/molecules/SpecificBusinessHourLine.tsx","segments/businesshours/organisms/SpecificBusinessHours.tsx","segments/businesshours/pages/BusinessHoursPage.tsx","segments/businesshours/routes/BusinessHoursRouting.tsx"],"names":["CanMutate","observer","mutationName","children","useCanMutate","FlexColumn","styled","div","fixedWidth","width","widthGrowIndex","padding","margin","FormInput","React","forwardRef","inputRef","fieldName","fullWidth","validate","addHiddenLabelWithPlaceholderText","withLabel","props","getInputProps","useFormInputProps","useObserver","inputFullWidth","ref","placeholder","hidden","htmlFor","id","state","useXFormState","useXFieldForInput","field","disabled","isSubmitting","invalid","touched","Boolean","error","Loading","text","TouchButtonDelete","onDelete","confirmText","className","icon","Delete","color","Colors","greyMiddle","onClick","ev","preventDefault","window","confirm","CanQuery","queryName","useCanQuery","FormSubmitButton","type","green","isValid","undefined","ErrorOutline","iconSize","iconColor","red","cn","heartBeat","DateTimeFormatProvider","utils","DateFnsUtils","locale","DFLocale","FlexDiv","FlexRow","useSettings","useRoot","settings","InputDate","DatePicker","variant","format","maxDateMessage","minDateMessage","FormInputDate","memo","pickerProps","useXField","formState","value","onChange","setValue","onOpen","setTouched","InputTime","TimePicker","ampm","StyledBussinessHoursTimeRange","BusinessHoursTimeRange","hour","openAt","label","closeAt","StyledBusinessHoursWeekday","article","white","Radiuses","Button","BusinessHoursWeekday","weekday","hours","onAdd","onRemove","renderHour","key","data-testid","SizerButton","TouchButton","title","i18n","role","code","length","map","AddCircle","getTodayTime","DFP","parse","Date","BusinessHoursForm","useQRegularBusinessHours","branchId","data","loading","useState","observable","Map","businessHours","useMBusinessHoursSubmit","submitBusinessHours","useEffect","size","weekDays","forEach","set","enum","array","weekDay","get","push","weekDayHours","clear","hourIdCounter","useRef","hourId","idx","findIndex","RM","propEq","splice","enqueueSuccess","useSnackBar","onSubmit","useCallback","a","formatSystemTime","ARRAY_EMPTY","current","startOfDay","endOfDay","Sizer","MarginBox","FormInputTime","InlineWrap","FormInputTimeSpan","fieldFrom","fieldTo","labels","ESpecificHourMode","TIMESPAN","i18nMark","FULLDAY","SpecificModeSelector","SelectControlFlat","items","selectedItem","specificMode","formatItem","mode","_","onSingleSelection","changeSpecificMode","DateContainer","FormContainer","SpecificBusinessHourForm","now","getNow","useNow","useMSpecificBusinessHourCreate","createBsHour","values","isTimespanMode","date","input","companyBranch","specificDate","closed","closedNote","note","refetchQueries","query","QSpecificBusinessHoursDocument","variables","initialValues","setHours","setMinutes","fullDateFormat","minDate","SpecificBusinessHourLine","bsHour","canDelete","formatFullDate","sortByDate","sort","ascend","or","prop","not","rejectOld","isBefore","SpecificBusinessHours","useQSpecificBusinessHours","getStash","updateQuery","useMSpecificBusinessHourDelete","deleteBsHour","bsHours","reject","updateOnDelete","produce","draft","idPropEq","BusinessHoursPage","FullPageLayout","pageTitle","useBackButton","Card","SettingsCompanyBranchPicker","Headline","BusinessHoursRouting","SecureRoute","exact","path","ROUTE_SETTINGS_HOURS","component","NotFoundPage"],"mappings":"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","file":"static/js/382.e2986854.chunk.js","sourcesContent":["import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useCanMutate } from '../hooks/useAccessGuard'\nimport { NoAccess } from './NoAccess'\n\ninterface IProps {\n  mutationName: string\n}\n\nexport const CanMutate = observer<IProps>(({ mutationName, children }) => {\n  const canMutate = useCanMutate(mutationName)\n  return canMutate ? (\n    <>{children}</>\n  ) : (\n    <NoAccess>{`No access to mutation ${mutationName}`}</NoAccess>\n  )\n})\n","import styled from 'styled-components'\n\ninterface IFlexColumnProps {\n  fixedWidth?: boolean\n  width?: string\n  widthGrowIndex?: number\n  padding?: string\n  margin?: string\n}\n\nexport const FlexColumn = styled.div`\n  flex: ${getFlexValue};\n  padding: ${getPadding};\n  margin: ${getMargin};\n`\n\nfunction getFlexValue({\n  fixedWidth = false,\n  width,\n  widthGrowIndex = 0,\n}: IFlexColumnProps) {\n  return fixedWidth ? (width ? `0 0 ${width}` : '0 0') : `${widthGrowIndex} 0`\n}\n\nfunction getPadding({ padding = '0.25rem' }: IFlexColumnProps) {\n  return padding\n}\n\nfunction getMargin({ margin = '' }: IFlexColumnProps) {\n  return margin\n}\n","import {\n  useXFieldForInput,\n  useXFormState,\n  XFieldName,\n  XFieldValidator,\n} from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { StyledFormInput } from '../../atoms/FormInputStyled'\n\ntype TProps = NoChildren &\n  Omit<React.InputHTMLAttributes<never>, 'name'> & {\n    fieldName: XFieldName\n    validate?: XFieldValidator<string>\n    fullWidth?: boolean\n    addHiddenLabelWithPlaceholderText?: boolean\n  }\n\nexport type FormInputProps = TProps\n\nexport const FormInput = React.forwardRef<HTMLInputElement, TProps>(\n  (\n    {\n      fieldName,\n      fullWidth,\n      validate,\n      addHiddenLabelWithPlaceholderText: withLabel = true,\n      ...props\n    },\n    inputRef,\n  ) => {\n    const getInputProps = useFormInputProps({ fieldName, validate })\n    return useObserver(() => (\n      <>\n        <StyledFormInput\n          {...getInputProps()}\n          inputFullWidth={fullWidth}\n          ref={inputRef}\n          {...props}\n        />\n        {withLabel && props.placeholder && (\n          <label hidden={true} htmlFor={getInputProps().id}>\n            {props.placeholder}\n          </label>\n        )}\n      </>\n    ))\n  },\n)\n\ninterface IHookOptions {\n  fieldName: XFieldName\n  validate?: XFieldValidator<string>\n}\n\nexport function useFormInputProps({ fieldName, validate }: IHookOptions) {\n  const state = useXFormState()\n  const [field, getInputProps] = useXFieldForInput<string>(fieldName, {\n    validate,\n  })\n  return () => ({\n    ...getInputProps(),\n    disabled: state.isSubmitting,\n    invalid: field.touched && Boolean(field.error),\n  })\n}\n","import React from 'react'\n\ninterface ILoadingProps {\n  text?: string\n}\n\nexport const Loading: React.FC<ILoadingProps> = ({ text = '...' }) => (\n  <h1>{text}</h1>\n)\n","import { Delete } from '@material-ui/icons'\nimport React from 'react'\n\nimport { SizerButton } from '../atoms/SizerButton'\nimport { Colors } from '../styling'\nimport { ITouchButtonProps, TouchButton } from './TouchButton'\n\ninterface ITouchButtonDeleteProps extends Omit<ITouchButtonProps, 'onClick'> {\n  confirmText?: string\n  onDelete(): void\n}\n\nexport const TouchButtonDelete: React.FC<ITouchButtonDeleteProps> = ({\n  onDelete,\n  confirmText,\n  ...props\n}) => {\n  return (\n    <SizerButton>\n      <TouchButton\n        className=\"delete-button\"\n        icon={Delete}\n        color={Colors.greyMiddle}\n        onClick={ev => {\n          ev.preventDefault()\n          if (!confirmText || window.confirm(confirmText)) {\n            onDelete()\n          }\n        }}\n        {...props}\n      />\n    </SizerButton>\n  )\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useCanQuery } from '../hooks/useAccessGuard'\nimport { NoAccess } from './NoAccess'\n\ninterface IProps {\n  queryName: string\n}\n\nexport const CanQuery = observer<IProps>(({ queryName, children }) => {\n  const canQuery = useCanQuery(queryName)\n  return canQuery ? (\n    <>{children}</>\n  ) : (\n    <NoAccess>{`No access to query ${queryName}`}</NoAccess>\n  )\n})\n","import { ErrorOutline } from '@material-ui/icons'\nimport { cn } from '@speedlo/ui'\nimport { useXFormState } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ITouchButtonProps, TouchButton } from '../../molecules/TouchButton'\nimport { Colors } from '../../styling'\n\ninterface IProps extends ITouchButtonProps {\n  children: ReactNode | ReactNode[] | string\n}\n\nexport const FormSubmitButton: React.FC<IProps> = ({\n  children,\n  id = 'form-submit',\n  ...props\n}) => {\n  const state = useXFormState()\n  return useObserver(() => (\n    <TouchButton\n      id={id}\n      type=\"submit\"\n      color={Colors.green}\n      disabled={state.isSubmitting}\n      icon={!state.isValid ? ErrorOutline : undefined}\n      iconSize={1.1}\n      iconColor={Colors.red}\n      {...props}\n      className={cn(props.className, 'animated', 'infinite', {\n        heartBeat: state.isSubmitting,\n      })}\n    >\n      <>{children}</>\n    </TouchButton>\n  ))\n}\n","import DateFnsUtils from '@date-io/date-fns'\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers'\nimport React from 'react'\n\nimport { DFLocale } from '../tools/datefns'\n\nexport const DateTimeFormatProvider: React.FC<Required<SomeChildren>> = ({\n  children,\n}) => {\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils} locale={DFLocale}>\n      {children}\n    </MuiPickersUtilsProvider>\n  )\n}\n","import styled from 'styled-components/macro'\n\nexport const FlexDiv = styled.div`\n  display: flex;\n`\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\nimport { FlexDiv } from './FlexDiv'\n\nexport const FlexRow = styled(FlexDiv)`\n  flex-direction: row;\n  justify-content: space-between;\n  border-bottom: 1px solid ${Colors.greyMiddle};\n  padding: 0.1rem 0 0.1rem 0;\n`\n","import { useRoot } from '../atoms/RootProvider'\n\nexport function useSettings() {\n  const { settings } = useRoot()\n  return settings\n}\n","import { i18n } from '@lingui/core'\nimport { DatePicker, DatePickerProps } from '@material-ui/pickers'\nimport React from 'react'\n\nimport { DateTimeFormatProvider } from './DateTimeFormatProvider'\n\nexport const InputDate: React.FC<DatePickerProps & NoChildren> = props => {\n  return (\n    <DateTimeFormatProvider>\n      <DatePicker\n        variant=\"inline\"\n        format=\"PPP\"\n        maxDateMessage={i18n.t`Date is too much in the future`}\n        minDateMessage={i18n.t`Date is too much in the past`}\n        {...props}\n      />\n    </DateTimeFormatProvider>\n  )\n}\n","import { DatePickerProps } from '@material-ui/pickers'\nimport { useXField, useXFormState, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { InputDate } from '../../atoms/InputDate'\n\ntype TProps = NoChildren &\n  Omit<DatePickerProps, 'value' | 'onChange'> & {\n    fieldName: XFieldName\n  }\n\nexport const FormInputDate = React.memo<TProps>(\n  ({ fieldName, ...pickerProps }) => {\n    const field = useXField<Maybe<Date>>(fieldName)\n    const formState = useXFormState()\n    return useObserver(() => (\n      <InputDate\n        value={field.value}\n        onChange={field.setValue}\n        onOpen={field.setTouched}\n        disabled={formState.isSubmitting}\n        {...pickerProps}\n      />\n    ))\n  },\n)\n","import { TimePicker, TimePickerProps } from '@material-ui/pickers'\nimport React from 'react'\n\nimport { DateTimeFormatProvider } from './DateTimeFormatProvider'\n\nexport const InputTime: React.FC<TimePickerProps & NoChildren> = props => {\n  return (\n    <DateTimeFormatProvider>\n      <TimePicker format=\"p\" variant=\"inline\" ampm={false} {...props} />\n    </DateTimeFormatProvider>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { InputTime } from '../../../atoms/InputTime'\nimport { TBusinessHour } from '../businesshours.types'\n\ntype TProps = NoChildren & {\n  hour: TBusinessHour\n}\n\nconst StyledBussinessHoursTimeRange = styled.div`\n  & input {\n    width: 5rem;\n  }\n`\n\nexport const BusinessHoursTimeRange = React.memo<TProps>(({ hour }) => {\n  return useObserver(() => (\n    <StyledBussinessHoursTimeRange>\n      <InputTime\n        value={hour.openAt}\n        onChange={value => (hour.openAt = value!)}\n        label={<Trans id=\"input.timespan.from\">from</Trans>}\n        fullWidth={false}\n      />\n      <InputTime\n        value={hour.closeAt}\n        onChange={value => (hour.closeAt = value!)}\n        label={<Trans id=\"input.timespan.to\">to</Trans>}\n        fullWidth={false}\n      />\n    </StyledBussinessHoursTimeRange>\n  ))\n})\n","import { Trans } from '@lingui/macro'\nimport { AddCircle, Delete } from '@material-ui/icons'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { SizerButton } from '../../../atoms/SizerButton'\nimport { FWeekdayFragment } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Radiuses } from '../../../styling'\nimport { BusinessHoursTimeRange } from '../atoms/BusinessHoursTimeRange'\nimport { TBusinessHour } from '../businesshours.types'\n\ntype TProps = NoChildren & {\n  weekday: FWeekdayFragment\n  hours: RoA<TBusinessHour>\n  onAdd(): void\n  onRemove(hourId: ID): void\n}\n\nconst StyledBusinessHoursWeekday = styled.article`\n  display: flex;\n  align-items: baseline;\n  margin: 0 0 0.3rem 0;\n  h5 {\n    width: 5rem;\n  }\n  & .range {\n    display: flex;\n    margin: 0 2rem 0 0;\n    padding-right: 1rem;\n    background: ${Colors.white};\n    border-radius: ${Radiuses.Button};\n  }\n  .remove-btn {\n    margin-right: 1rem;\n  }\n`\n\nexport const BusinessHoursWeekday: React.FC<TProps> = ({\n  weekday,\n  hours,\n  onAdd,\n  onRemove,\n}) => {\n  const renderHour = (hour: TBusinessHour) => {\n    return (\n      <div key={hour.id} data-testid=\"bh-range\" className=\"range\">\n        <SizerButton className=\"remove-btn\">\n          <TouchButton\n            title={i18n.t`Remove business hour`}\n            role=\"button\"\n            onClick={() => onRemove(hour.id)}\n          >\n            <Delete />\n          </TouchButton>\n        </SizerButton>\n        <BusinessHoursTimeRange hour={hour} />\n      </div>\n    )\n  }\n\n  const renderHours = () => {\n    if (hours.length === 0) {\n      return (\n        <em>\n          <Trans>Closed</Trans>\n        </em>\n      )\n    }\n    return hours.map(renderHour)\n  }\n\n  return useObserver(() => (\n    <StyledBusinessHoursWeekday>\n      <h5>{weekday.code}</h5>\n      {renderHours()}\n      <SizerButton>\n        <TouchButton\n          title={i18n.t`Add business hour`}\n          role=\"button\"\n          onClick={onAdd}\n        >\n          <AddCircle />\n        </TouchButton>\n      </SizerButton>\n    </StyledBusinessHoursWeekday>\n  ))\n}\n","import { IObservableArray, observable } from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { Loading } from '../../../atoms/Loading'\nimport { MarginBox } from '../../../atoms/MarginBox'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { Sizer } from '../../../atoms/Sizer'\nimport {\n  InputBusinessHourCreate,\n  useMBusinessHoursSubmit,\n  useQRegularBusinessHours,\n  WeekDayEnum,\n} from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\nimport { formatSystemTime } from '../../../helpers/formats'\nimport { useSnackBar } from '../../../hooks/useSnackBar'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\nimport { DFP } from '../../../tools/datefns'\nimport { RM } from '../../../tools/ramda'\nimport { TBusinessHour } from '../businesshours.types'\nimport { BusinessHoursWeekday } from '../molecules/BusinessHoursWeekday'\n\nconst getTodayTime = DFP.parse(new Date(), 'H:mm')\n\nexport const BusinessHoursForm = observer(() => {\n  const { settings } = useRoot()\n  const { data, loading } = useQRegularBusinessHours({\n    branchId: settings.branchId,\n  })\n\n  const [businessHours] = React.useState(() =>\n    observable(new Map<WeekDayEnum, IObservableArray<TBusinessHour>>()),\n  )\n\n  const [submitBusinessHours] = useMBusinessHoursSubmit()\n\n  React.useEffect(() => {\n    if (data === undefined) {\n      return\n    }\n    if (businessHours.size === 0) {\n      data.weekDays.forEach(weekday => {\n        businessHours.set(weekday.enum, observable.array([]))\n      })\n    }\n    data.businessHours.forEach(({ id, openAt, closeAt, weekDay }) => {\n      if (weekDay) {\n        businessHours.get(weekDay.enum)!.push({\n          id,\n          openAt: getTodayTime(openAt),\n          closeAt: getTodayTime(closeAt),\n          weekDay: weekDay.enum,\n        })\n      }\n    })\n    return () => {\n      businessHours.forEach(weekDayHours => {\n        weekDayHours.clear()\n      })\n    }\n  }, [businessHours, data, settings.branchId])\n\n  const hourIdCounter = React.useRef(0)\n\n  const onAdd = (weekDay: WeekDayEnum) => () => {\n    businessHours.get(weekDay)!.push({\n      weekDay,\n      id: `L${hourIdCounter.current++}`,\n      openAt: DFP.startOfDay(new Date()),\n      closeAt: DFP.endOfDay(new Date()),\n    })\n  }\n\n  const onRemove = (weekDay: WeekDayEnum) => (hourId: ID) => {\n    const hours = businessHours.get(weekDay)!\n    const idx = hours.findIndex(RM.propEq('id', hourId))\n    if (idx >= 0) {\n      hours.splice(idx, 1)\n    }\n  }\n\n  const { enqueueSuccess } = useSnackBar()\n\n  const onSubmit = React.useCallback(async () => {\n    const hours: InputBusinessHourCreate[] = []\n    businessHours.forEach((weekDayHours, weekDay) => {\n      hours.push(\n        ...weekDayHours.map(hour => ({\n          openAt: formatSystemTime(hour.openAt),\n          closeAt: formatSystemTime(hour.closeAt),\n          weekDay,\n        })),\n      )\n    })\n    const result = await submitBusinessHours({\n      branchId: settings.branchId,\n      hours,\n    })\n    if (result) {\n      enqueueSuccess(i18n.t`Regular business hours has been updated`)\n    }\n  }, [businessHours, enqueueSuccess, settings.branchId, submitBusinessHours])\n\n  if (loading) {\n    return <Loading />\n  }\n\n  return (\n    <div>\n      {data &&\n        data.weekDays.map(weekday => (\n          <BusinessHoursWeekday\n            key={weekday.enum}\n            weekday={weekday}\n            hours={businessHours.get(weekday.enum) || ARRAY_EMPTY}\n            onAdd={onAdd(weekday.enum)}\n            onRemove={onRemove(weekday.enum)}\n          />\n        ))}\n      <Sizer width={20}>\n        <MarginBox margin=\"1rem\">\n          <TouchButton\n            text={i18n.t`Save regular hours`}\n            color={Colors.green}\n            onClick={onSubmit}\n          />\n        </MarginBox>\n      </Sizer>\n    </div>\n  )\n})\n","import { TimePickerProps } from '@material-ui/pickers'\nimport { useXField, useXFormState, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { InputTime } from '../../atoms/InputTime'\n\ntype TProps = NoChildren &\n  Omit<TimePickerProps, 'value' | 'onChange'> & {\n    fieldName: XFieldName\n  }\n\nexport const FormInputTime = React.memo<TProps>(\n  ({ fieldName, ...pickerProps }) => {\n    const field = useXField<Maybe<Date>>(fieldName)\n    const formState = useXFormState()\n    return useObserver(() => (\n      <InputTime\n        value={field.value}\n        onChange={field.setValue}\n        onOpen={field.setTouched}\n        disabled={formState.isSubmitting}\n        {...pickerProps}\n      />\n    ))\n  },\n)\n","import { Trans } from '@lingui/macro'\nimport { XFieldName } from '@speedlo/xform'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { FormInputTime } from './FormInputTime'\n\ninterface IFormInputTimeSpanProps {\n  fieldFrom: XFieldName\n  fieldTo: XFieldName\n}\n\nconst InlineWrap = styled.div`\n  width: 5rem;\n  display: inline-block;\n`\n\nexport const FormInputTimeSpan: React.FC<IFormInputTimeSpanProps> = ({\n  fieldFrom,\n  fieldTo,\n}) => (\n  <>\n    <InlineWrap>\n      <FormInputTime\n        fieldName={fieldFrom}\n        label={<Trans id=\"input.timespan.from\">from</Trans>}\n        fullWidth={false}\n      />\n    </InlineWrap>\n    <InlineWrap>\n      <FormInputTime\n        fieldName={fieldTo}\n        label={<Trans id=\"input.timespan.to\">to</Trans>}\n        fullWidth={false}\n      />\n    </InlineWrap>\n  </>\n)\n","import { i18nMark } from '@lingui/core'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { SelectControlFlat } from '../../../atoms/SelectControlFlat'\nimport { useSettings } from '../../../hooks/useSettings'\nimport { i18n } from '../../../i18n'\nimport { ESpecificHourMode } from '../businesshours.types'\n\nconst labels = {\n  [ESpecificHourMode.TIMESPAN]: i18nMark('Open between'),\n  [ESpecificHourMode.FULLDAY]: i18nMark('Closed'),\n}\n\nexport const SpecificModeSelector = React.memo(() => {\n  const { businessHours } = useSettings()\n  return useObserver(() => (\n    <SelectControlFlat<ESpecificHourMode>\n      items={[ESpecificHourMode.TIMESPAN, ESpecificHourMode.FULLDAY]}\n      selectedItem={businessHours.specificMode as ESpecificHourMode}\n      formatItem={mode => i18n._(labels[mode])}\n      onSingleSelection={(mode: ESpecificHourMode) =>\n        businessHours.changeSpecificMode(mode)\n      }\n    />\n  ))\n})\n","import { Trans } from '@lingui/macro'\nimport { useNow } from '@speedlo/hooks'\nimport { XForm } from '@speedlo/xform'\nimport { endOfDay, setHours, setMinutes, startOfDay } from 'date-fns'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { FormInput } from '../../../components/forms/FormInput'\nimport { FormInputDate } from '../../../components/forms/FormInputDate'\nimport { FormInputTimeSpan } from '../../../components/forms/FormInputTimeSpan'\nimport { FormSubmitButton } from '../../../components/forms/FormSubmitButton'\nimport {\n  QSpecificBusinessHoursDocument,\n  useMSpecificBusinessHourCreate,\n} from '../../../graph/generated'\nimport { formatSystemTime, fullDateFormat } from '../../../helpers/formats'\nimport { i18n } from '../../../i18n'\nimport { TSpecificBusinessHoursFormValues } from '../businesshours.types'\nimport { SpecificModeSelector } from '../molecules/SpecificModeSelector'\n\nconst DateContainer = styled.div`\n  display: inline-block;\n  width: 13rem;\n  margin-left: 1rem;\n  margin-top: 2rem;\n`\n\nconst FormContainer = styled.div`\n  display: inline-block;\n  width: 16rem;\n  min-height: 6rem;\n  margin: 0rem 0 0 1rem;\n  vertical-align: top;\n`\n\ntype TFormValues = TSpecificBusinessHoursFormValues\n\nexport const SpecificBusinessHourForm: React.FC = () => {\n  const getNow = useNow()\n  const { settings } = useRoot()\n\n  const [createBsHour] = useMSpecificBusinessHourCreate()\n\n  const onSubmit = React.useCallback(\n    (values: TFormValues) => {\n      const openAt =\n        settings.businessHours.isTimespanMode && values.openAt\n          ? values.openAt\n          : startOfDay(values.date)\n      const closeAt =\n        settings.businessHours.isTimespanMode && values.closeAt\n          ? values.closeAt\n          : endOfDay(values.date)\n      createBsHour(\n        {\n          input: {\n            companyBranch: settings.branchId,\n            specificDate: values.date,\n            closed: !settings.businessHours.isTimespanMode,\n            closedNote: values.note,\n            openAt: formatSystemTime(openAt),\n            closeAt: formatSystemTime(closeAt),\n          },\n        },\n        {\n          refetchQueries: [\n            {\n              query: QSpecificBusinessHoursDocument,\n              variables: { branchId: settings.branchId },\n            },\n          ],\n        },\n      )\n    },\n    [createBsHour, settings],\n  )\n\n  return (\n    <XForm onSubmit={onSubmit} initialValues={getInitialValues(getNow())}>\n      <DateContainer>\n        <FormInputDate\n          fieldName=\"date\"\n          format={fullDateFormat}\n          minDate={new Date()}\n          fullWidth={true}\n          label={<Trans>Date</Trans>}\n        />\n      </DateContainer>\n\n      <FormContainer>\n        <SpecificModeSelector />\n        <Observer>\n          {() =>\n            settings.businessHours.isTimespanMode ? (\n              <FormInputTimeSpan fieldFrom=\"openAt\" fieldTo=\"closeAt\" />\n            ) : (\n              <Sizer width={13}>\n                <FormInput\n                  fieldName=\"note\"\n                  fullWidth={true}\n                  placeholder={i18n.t`Closing reason`}\n                />\n              </Sizer>\n            )\n          }\n        </Observer>\n      </FormContainer>\n\n      <FormSubmitButton width=\"9rem\">\n        <Trans>Add</Trans>\n      </FormSubmitButton>\n    </XForm>\n  )\n}\n\nfunction getInitialValues(now: Date): TFormValues {\n  return {\n    date: now,\n    openAt: setHours(setMinutes(now, 0), 9),\n    closeAt: setHours(setMinutes(now, 0), 20),\n    note: '',\n  }\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRow } from '../../../atoms/FlexRow'\nimport { FSpecificBusinessHourFragment } from '../../../graph/generated'\nimport { formatFullDate } from '../../../helpers/formats'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\n\ninterface ISpecificBusinessHourLineProps {\n  bsHour: FSpecificBusinessHourFragment\n  canDelete: boolean\n  onDelete(): void\n}\n\nexport const SpecificBusinessHourLine: React.FC<\n  ISpecificBusinessHourLineProps\n> = ({ bsHour, canDelete, onDelete }) => (\n  <FlexRow>\n    <FlexColumn fixedWidth>\n      {canDelete && (\n        <TouchButtonDelete\n          onDelete={onDelete}\n          confirmText={`${i18n.t`Really remove specific business hour ${formatFullDate(\n            bsHour.specificDate!,\n          )}?`}`}\n        />\n      )}\n    </FlexColumn>\n    <FlexColumn fixedWidth width=\"14rem\">\n      {formatFullDate(bsHour.specificDate!)}\n    </FlexColumn>\n    <FlexColumn fixedWidth width=\"10rem\">\n      {`${bsHour.openAt} - ${bsHour.closeAt}`}\n    </FlexColumn>\n    <FlexColumn fixedWidth width=\"10rem\">\n      {bsHour.closed ? <Trans>Closed</Trans> : <Trans>Open</Trans>}\n    </FlexColumn>\n    <FlexColumn widthGrowIndex={1}>{bsHour.closedNote}</FlexColumn>\n  </FlexRow>\n)\n","import { Trans } from '@lingui/macro'\nimport { isBefore, startOfDay } from 'date-fns'\nimport produce from 'immer'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { MarginBox } from '../../../atoms/MarginBox'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport {\n  FRegularBusinessHourFragment,\n  FSpecificBusinessHourFragment,\n  QSpecificBusinessHoursQuery,\n  useMSpecificBusinessHourDelete,\n  useQSpecificBusinessHours,\n} from '../../../graph/generated'\nimport { useCanMutate } from '../../../hooks/useAccessGuard'\nimport { idPropEq, RM } from '../../../tools/ramda'\nimport { SpecificBusinessHourLine } from '../molecules/SpecificBusinessHourLine'\n\ntype BsHour = FSpecificBusinessHourFragment\n\nconst sortByDate = RM.sort<BsHour>(\n  RM.ascend(RM.or(RM.prop('specificDate'), RM.not)),\n)\n\nconst rejectOld = ({ specificDate }: BsHour) =>\n  specificDate === null || isBefore(specificDate, startOfDay(new Date()))\n\nexport const SpecificBusinessHours = observer(() => {\n  const { settings } = useRoot()\n\n  const { getStash, updateQuery } = useQSpecificBusinessHours({\n    branchId: settings.branchId,\n  })\n\n  const canDelete = useCanMutate('destroyBusinessHour')\n  const [deleteBsHour] = useMSpecificBusinessHourDelete()\n\n  const bsHours = getStash(data =>\n    sortByDate(RM.reject(rejectOld, data.businessHours)),\n  )\n\n  if (bsHours === null) {\n    return null\n  }\n\n  if (bsHours.length === 0) {\n    return (\n      <MarginBox margin={1}>\n        <Trans>No specific business hours defined</Trans>\n      </MarginBox>\n    )\n  }\n\n  return (\n    <>\n      {bsHours.map(bsHour => (\n        <SpecificBusinessHourLine\n          key={bsHour.id}\n          bsHour={bsHour}\n          canDelete={canDelete}\n          onDelete={async () => {\n            await deleteBsHour({ id: bsHour.id })\n            updateQuery(updateOnDelete(bsHour.id))\n          }}\n        />\n      ))}\n    </>\n  )\n})\n\nfunction updateOnDelete(bsHour: ID) {\n  return produce((draft: QSpecificBusinessHoursQuery) => {\n    ;((draft.businessHours as unknown) as FRegularBusinessHourFragment[]).splice(\n      draft.businessHours.findIndex(idPropEq(bsHour)),\n      1,\n    )\n  })\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { CanQuery } from '../../../atoms/CanQuery'\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { MarginBox } from '../../../atoms/MarginBox'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { SettingsCompanyBranchPicker } from '../../../segments/settings/organisms/SettingsCompanyBranchPicker'\nimport { BusinessHoursForm } from '../organisms/BusinessHoursForm'\nimport { SpecificBusinessHourForm } from '../organisms/SpecificBusinessHourForm'\nimport { SpecificBusinessHours } from '../organisms/SpecificBusinessHours'\n\nexport const BusinessHoursPage: React.FC = () => (\n  <FullPageLayout pageTitle={i18n.t`Business hours`} useBackButton={true}>\n    <Card>\n      <SettingsCompanyBranchPicker />\n      <CanQuery queryName=\"businessHours\">\n        <Headline>\n          <MarginBox margin=\"1rem 0\">\n            <Trans>Regular business hours</Trans>\n          </MarginBox>\n        </Headline>\n        <BusinessHoursForm />\n      </CanQuery>\n\n      <Headline>\n        <MarginBox margin=\"1rem 0\">\n          <Trans>Specific business hours</Trans>\n        </MarginBox>\n      </Headline>\n      <SpecificBusinessHours />\n\n      <CanMutate mutationName=\"addSpecialBusinessHour\">\n        <Headline>\n          <MarginBox margin=\"1rem 0\">\n            <Trans>Add specific business hour</Trans>\n          </MarginBox>\n        </Headline>\n        <SpecificBusinessHourForm />\n      </CanMutate>\n    </Card>\n  </FullPageLayout>\n)\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { SecureRoute } from '../../../routes/SecureRoute'\nimport { ROUTE_SETTINGS_HOURS } from '../../settings/settings.routes'\nimport { BusinessHoursPage } from '../pages/BusinessHoursPage'\n\ninterface IProps {}\n\nexport const BusinessHoursRouting: React.FC<IProps> = () => (\n  <Switch>\n    <SecureRoute\n      exact\n      path={ROUTE_SETTINGS_HOURS}\n      component={BusinessHoursPage}\n    />\n    <Route component={NotFoundPage} />\n  </Switch>\n)\n\nexport default BusinessHoursRouting\n"],"sourceRoot":""}