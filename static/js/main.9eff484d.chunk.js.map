{"version":3,"sources":["styling.ts","segments/menu/models/MenuBaseModel.ts","atoms/SnackProvider.tsx","segments/menu/models/MenuStockModel.graphql.ts","helpers/formats.ts","segments/order/models/OrderStateModel.graphql.ts","atoms/PageTitle.tsx","segments/menu/organisms/CategoryList.graphql.ts","segments/zones/Zones.graphql.ts","helpers/logger.ts","pages/NotFoundPage.tsx","models/BaseModel.ts","routes/RedirectToLogin.tsx","segments/order/molecules/OrderStateDeliver.graphql.ts","helpers/ramda.ts","segments/createorder/models/CreateOrderModel.graphql.ts","segments/menu/organisms/StockList.graphql.ts","molecules/TouchButton.tsx","atoms/Card.tsx","molecules/FullPageLayout.tsx","hooks/useSnackBar.ts","atoms/SoundControl.tsx","organisms/LogoutWidget.graphql.ts","organisms/LogoutWidget.tsx","molecules/HomeButton.tsx","molecules/PageLayout.tsx","atoms/Loading.tsx","atoms/GridLayout.tsx","segments/menu/models/MenuRecipeModel.ts","segments/menu/organisms/RecipeForm.graphql.ts","segments/menu/graph/AllergenFragment.graphql.ts","segments/menu/graph/WareUnitFragment.graphql.ts","segments/businesshours/models/BusinessHoursModel.graphql.ts","segments/businesshours/models/BusinessHoursModel.ts","segments/menu/models/MenuCategoryModel.graphql.ts","segments/menu/models/MenuCategoryModel.ts","locale/numeral.ts","segments/overview/organisms/ClosureStatisticsControl.graphql.ts","locale/moment.ts","i18n.tsx","config.ts","segments/businesshours/organisms/SpecificBusinessHours.graphql.ts","segments/menu/organisms/CategoryForm.graphql.ts","graph/fragments/GeoPointFragment.graphql.ts","graph/fragments/CompanyBranchFragment.graphql.ts","graph/fragments/EmailFragment.graphql.ts","graph/fragments/PhoneFragment.graphql.ts","graph/fragments/CustomerFragment.graphql.ts","graph/fragments/PriceFragment.graphql.ts","graph/fragments/index.ts","atoms/IntervalRender.tsx","atoms/SoundPlayInterval.tsx","assets/connectionWarning.mp3","helpers/sentry.ts","segments/order/models/OrderListModel.ts","helpers/gps.ts","enableDebug.ts","graph/errorHandler.ts","../node_modules/moment/locale lazy /^/.*$/ groupOptions: {} namespace object","../node_modules/numeral/locales lazy /^/.*$/ groupOptions: {} namespace object","../ /^/.*/messages/.po$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","context/RootContext.ts","graph/SubscriptionLink.ts","graph/createClient.ts","graph/AuthLink.ts","helpers/persistModel.ts","segments/login/models/PasswordLoginModel.ts","segments/login/models/LoginProviderModel.ts","models/AuthModel.graphql.ts","models/AuthModel.ts","models/ConfigModel.ts","models/UserModel.graphql.ts","models/UserModel.ts","helpers/faker.ts","segments/createorder/models/CreateOrderModel.ts","models/MapModel.ts","segments/order/models/OrderMapModel.graphql.ts","segments/order/models/OrderMapModel.ts","segments/order/models/OrderStateModel.ts","segments/order/models/OrderModel.ts","segments/overview/models/StatisticsModel.ts","segments/settings/models/SettingsBaseModel.ts","segments/menu/models/MenuStockModel.ts","segments/menu/models/MenuModel.ts","segments/settings/models/SettingsModel.ts","segments/zones/models/ZoneMapModel.ts","segments/zones/models/ZoneModel.graphql.ts","segments/zones/models/ZoneModel.ts","models/RootModel.ts","atoms/RootProvider.tsx","graph/buildQuery.tsx","atoms/WithRoot.tsx","atoms/Pacman.tsx","routes/SecureRoute.tsx","atoms/ConnectionWarning.tsx","atoms/ErrorContainer.tsx","atoms/UpdateHandler.tsx","pages/ErrorPage.tsx","routes/LogRoute.tsx","routes/RedirectAfterLogin.tsx","routes/RedirectAfterLogout.tsx","routes/Routing.tsx","App.tsx","atoms/Router.tsx","atoms/ThemeProvider.tsx","index.tsx","routes/LazyRoute.tsx","graph/generated.ts","atoms/Icon.tsx","helpers/offline.ts","segments/menu/models/MenuRecipeModel.graphql.ts"],"names":["__webpack_require__","d","__webpack_exports__","Colors","applyAlphaToColor","Radiuses","Spacing","FontSizes","color__WEBPACK_IMPORTED_MODULE_0__","color__WEBPACK_IMPORTED_MODULE_0___default","n","_helpers_ramda__WEBPACK_IMPORTED_MODULE_1__","RM","curry","color","alphaValue","Color","alpha","string","MarginAroundFormComponents","Small","Middle","LayoutGridCellMargin","ButtonHeight","DefaultInputWidth","DefaultSizeUnit","ButtonColumnWidthPx","InfoMessageFontSize","CompactCard","CompactCardBig","MenuBaseModel","mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__","BaseModel","named","volatile","filterInput","actions","self","setFilterInput","input","views","branchId","getParent","settings","snackStyles","SnackProvider","emotion__WEBPACK_IMPORTED_MODULE_0__","notistack__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","_styling__WEBPACK_IMPORTED_MODULE_3__","successStyle","css","green","variantSuccess","variantInfo","variantError","red","variantWarning","orange","_ref","children","a","createElement","maxSnack","classes","anchorOrigin","horizontal","vertical","MenuStockItemFragment","gql","_templateObject","WareUnitFragment","AllergenFragment","MenuStockCreateMutation","_templateObject2","MenuStockUpdateMutation","_templateObject3","MenuStockDeleteMutation","_templateObject4","fullDateFormat","formatDateISO","formatTime","formatDateTime","priceFormat","formatPrice","formatTimeWithoutTodayDate","formatAddress","date_fns__WEBPACK_IMPORTED_MODULE_0__","date_fns_fp__WEBPACK_IMPORTED_MODULE_1__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2___default","numeral__WEBPACK_IMPORTED_MODULE_3__","numeral__WEBPACK_IMPORTED_MODULE_3___default","currentLocale","csLocale","formatLocale","formatWithOptions","locale","format","price","numeral","time","isSameDay","Date","address","street","houseNumber","concat","city","state","OrderStateCategoryFragment","UpdateOrderStateMutation","SendOrderNotificationMutation","SelectOrderDriverMutation","OrderDriverFragment","RemoveOrderDriverMutation","_templateObject5","ChangeOrderToPickupMutation","_templateObject6","TitleStyled","styled","h1","withConfig","displayName","componentId","greyLight","observableTitles","observable","array","autorun","lastTitle","Array","from","pop","document","title","appConfig","pageTitleSuffix","PageTitle","_React$Component","Object","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","apply","arguments","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","key","value","push","props","prevProps","idx","findIndex","equals","splice","remove","React","Component","Route","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_8___default","react_router_dom__WEBPACK_IMPORTED_MODULE_9__","assign","render","Display","mobx_react_lite__WEBPACK_IMPORTED_MODULE_7__","join","MenuCategoryListFragment","CategoryListQuery","ZoneFragment","PriceFragment","GeoPointFragment","ZoneLocationQuery","ZoneColorsQuery","logMain","logDebug","logError","logAuth","logRouting","logPersistence","logBootstrap","logGraph","logForm","logSentry","logLang","logUpdate","debug__WEBPACK_IMPORTED_MODULE_0__","debug__WEBPACK_IMPORTED_MODULE_0___default","debug","useColors","console","log","NotFoundPage","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","_atoms_PageTitle__WEBPACK_IMPORTED_MODULE_1__","_i18n__WEBPACK_IMPORTED_MODULE_2__","Fragment","_","mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__","verror__WEBPACK_IMPORTED_MODULE_2__","types","model","getPath","client","getEnv","apolloClient","VError","root","getRoot","RedirectToLogin","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","_ref$useOrigin","useOrigin","path","_ref2","match","location","to","pathname","origin","DriverFragment","OrderDriverSelection","QueryDriverSelection","buildQuery","ramda__WEBPACK_IMPORTED_MODULE_0__","ValidateLocationQuery","CreateOrderMutation","CancelOrderMutation","MenuStockListQuery","QueryMenuStockList","applyAlpha","TouchButtonStyled","button","_ref$width","width","_ref2$height","height","Button","ButtonLabelStyled","div","ButtonLabelNextToIconStyled","TouchButton","forwardRef","_ref3","forwardedRef","iconName","_ref3$iconColor","iconColor","white","_ref3$iconSize","iconSize","_ref3$color","greyMiddle","_ref3$textNextToIcon","textNextToIcon","badge","text","ref","_atoms_Icon__WEBPACK_IMPORTED_MODULE_3__","fontSize","Card","styled_components__WEBPACK_IMPORTED_MODULE_1__","_styling__WEBPACK_IMPORTED_MODULE_2__","lighten","textColor","black","_ref$padding","padding","_ref3$stretchToParent","stretchToParent","getLayout","i","x","y","w","h","FullPageLayout","_molecules_PageLayout__WEBPACK_IMPORTED_MODULE_2__","layouts","useSnackBar","EVariant","notistack_build_SnackbarContext__WEBPACK_IMPORTED_MODULE_0__","successVariant","variant","success","errorVariant","error","warningVariant","warning","infoVariant","info","enqueueSnackbar","useContext","SnackbarContextNext","enqueueSuccess","useCallback","errorMessage","enqueueError","enqueueWarning","enqueueInfo","SoundControlContainerStyled","SoundButtonStyled","SoundControl","_getPrototypeOf2","_this","classCallCheck","_len","length","args","_key","possibleConstructorReturn","getPrototypeOf","call","playPreview","inherits","createClass","react_default","WithRoot","observe","user","soundEnabled","onClick","controlSound","QueryLogoutWidget","LogoutWidgetStyled","LoggedUserNameStyled","span","IconStyled","LogoutWidget","auth","variables","id","userId","renderLoading","data-testid","react_router_dom","firstName","lastName","i18n","getNameDisplay","Icon","HomeButtonStyled","HomeButton","_ref$color","_ref$iconColor","_ref$goBack","goBack","backRoute","objectWithoutProperties","react_router","history","TopLeftButtonContainer","getPosition","scrollPageTitle","TopRightContainer","PageTitleContainer","SoundControlContainer","PageLayout","_ref$pageTitle","pageTitle","_ref$layouts","_ref$hideLogoutWidget","hideLogoutWidget","_ref$showSoundControl","showSoundControl","_ref$useBackButton","useBackButton","_ref$scrollPageTitle","SoundControl_SoundControl","SecureRoute","component","redirect","GridLayout","toConsumableArray","HomeButton_HomeButton","Loading","_ref$text","react_grid_layout__WEBPACK_IMPORTED_MODULE_1__","react_grid_layout__WEBPACK_IMPORTED_MODULE_1___default","ReactGridLayout","WidthProvider","RGL","className","layout","cols","rowHeight","margin","autoSize","isDraggable","isResizable","compactType","measureBeforeMount","MenuRecipeModel","categoryFilterId","changeVisibility","recipeId","visible","mutate","mutation","MenuRecipeVisibilityMutation","optimisticResponse","updateRecipe","__typename","setCategoryFilter","categoryId","createRecipe","formValues","recipeType","recipe","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","companyBranch","wareCategoryType","getRecipeVariables","getQueryErrors","MenuRecipeCreateMutation","MenuRecipeUpdateMutation","deleteRecipe","_deleteRecipe","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","wrap","_context","prev","next","MenuRecipeDeleteMutation","stop","_x","queryDefaults","_queryDefaults","_callee2","data","_data$companyBranch","vats","code","_context2","query","MenuRecipeDefaults","sent","currency","abrupt","reduce","result","vatId","priceType","enum","currencyCode","nameLabel","internalNote","descriptionLabel","enabled","prices","keys","map","warePriceType","vat","sideDishCategories","sideDishes","prop","wareCategories","categories","associatedRecipes","pick","ingredients","stockItem","quantity","Number","parseFloat","replace","getRecipeRoute","MenuRecipePriceFragment","MenuAssocRecipeFragment","MenuRecipeFormQuery","MenuRecipeFormAssocQuery","QueryMenuRecipeFormAssoc","ESpecificHourMode","CreateSpecificBusinessHour","SpecificBusinessHourFragment","DeleteSpecificBusinessHour","BusinessHoursModel","byIdPredicate","complement","propEq","specificMode","optional","enumeration","TIMESPAN","changeSpecificMode","mode","submitSpecificHour","values","specificDate","isoDate","date","closed","FULLDAY","openAt","closeAt","closedNote","note","updateQueries","GSpecificBusinessHours","mutationResult","businessHours","deleteSpecificHour","businessHourId","filter","SortMenuCategoryMutation","MenuCategoryCreateMutation","MenuCategoryUpdateMutation","MenuCategoryFormFragment","MenuCategoryVisibility","MenuCategoryDeleteMutation","MenuCategoryModel","sortCategory","_sortCategory","asyncToGenerator","regenerator_default","offset","Boolean","_x2","createCategory","categoryType","objectSpread","getFormVariables","refetchQueries","updateCategory","_updateCategory","_x3","_x4","deleteCategory","_deleteCategory","_callee3","_context3","_x5","_x6","internalNoteLabel","pictogram","recipes","getCategoryRoute","changeNumeralLocale","_changeNumeralLocale","lang","numberRx","validateNumber","test","CreateFinancialReport","changeMomentLocale","_changeMomentLocale","moment","updateLocale","setupI18n","I18nManager","useRoot","useObserver","language","node_modules_react_default","react","Children","only","Pacman","detectLanguage","languages","detector","getLocales","find","loc","supportedLanguages","includes","fallbackLanguage","changeLanguage","_changeLanguage","Promise","all","loadCatalog","activate","catalog","load","defineProperty","endpoint","persistenceKey","sentryDSN","QuerySpecificBusinessHours","MenuRecipeFragment","MenuCategoryFormQuery","CompanyBranchFragment","CompanyBranchFragment_graphql_templateObject","EmailFragment","EmailFragment_graphql_templateObject","PhoneFragment","PhoneFragment_graphql_templateObject","CustomerFragment","CustomerFragment_graphql_templateObject","PriceFragment_graphql_templateObject","IntervalRender","_Component","isActive","nextTime","getNextTime","timer","executeTimer","clearTimeout","timeMs","differenceInMilliseconds","setTimeout","setState","deactivate","addSeconds","intervalSec","nextLoop","SoundPlayInterval_SoundPlayInterval","SoundPlayInterval","soundUrl","_ref$shouldPlay","shouldPlay","_ref$skipEnableChecks","skipEnableChecks","config","IntervalRender_IntervalRender","lib_default","url","playStatus","onFinishedPlaying","loop","autoLoad","volume","soundVolume","module","exports","p","installSentry","cb","Raven","environment","process","install","context","identifyUser","setUserContext","reportRenderingError","isSetup","captureException","extra","reportFailingQuery","errors","forEach","err","captureMessage","message","Error","reportError","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","cause","setImmediate","OrderListModel","mobx__WEBPACK_IMPORTED_MODULE_0__","react_scroll__WEBPACK_IMPORTED_MODULE_2__","_graph_generated__WEBPACK_IMPORTED_MODULE_3__","branches","collapsedCategories","OrderStateCategoryEnum","Finished","branchesFilter","hasBranchFilter","isSingleBranchSelected","firstBranchId","orderMap","clearBranchFilter","clear","setBranchFilter","panMapToOrder","order","panToOrder","extend","detailOpen","set","isOrderDetailOpen","orderId","has","isCategoryCollapsed","categoryCode","toggleOrderDetail","delete","add","toggleCategoryCollapse","category","index","indexOf","focusOrderDetail","scroller","scrollTo","smooth","containerId","absolute","observerOrderDetail","bind","gpsToLatLng","latLngToGps","generatePolygon","geolib__WEBPACK_IMPORTED_MODULE_0__","gps","lat","latitude","lng","longitude","latLng","center","_ref$metersRadius","metersRadius","_ref$pointsCount","pointsCount","fill","degree","computeDestinationPoint","window","localStorage","setItem","errorHandler","graphQLErrors","operation","operationName","createErrorLink","onError","./af","./af.js","./ar","./ar-dz","./ar-dz.js","./ar-kw","./ar-kw.js","./ar-ly","./ar-ly.js","./ar-ma","./ar-ma.js","./ar-sa","./ar-sa.js","./ar-tn","./ar-tn.js","./ar.js","./az","./az.js","./be","./be.js","./bg","./bg.js","./bm","./bm.js","./bn","./bn.js","./bo","./bo.js","./br","./br.js","./bs","./bs.js","./ca","./ca.js","./cs","./cs.js","./cv","./cv.js","./cy","./cy.js","./da","./da.js","./de","./de-at","./de-at.js","./de-ch","./de-ch.js","./de.js","./dv","./dv.js","./el","./el.js","./en-au","./en-au.js","./en-ca","./en-ca.js","./en-gb","./en-gb.js","./en-ie","./en-ie.js","./en-il","./en-il.js","./en-nz","./en-nz.js","./eo","./eo.js","./es","./es-do","./es-do.js","./es-us","./es-us.js","./es.js","./et","./et.js","./eu","./eu.js","./fa","./fa.js","./fi","./fi.js","./fo","./fo.js","./fr","./fr-ca","./fr-ca.js","./fr-ch","./fr-ch.js","./fr.js","./fy","./fy.js","./gd","./gd.js","./gl","./gl.js","./gom-latn","./gom-latn.js","./gu","./gu.js","./he","./he.js","./hi","./hi.js","./hr","./hr.js","./hu","./hu.js","./hy-am","./hy-am.js","./id","./id.js","./is","./is.js","./it","./it.js","./ja","./ja.js","./jv","./jv.js","./ka","./ka.js","./kk","./kk.js","./km","./km.js","./kn","./kn.js","./ko","./ko.js","./ky","./ky.js","./lb","./lb.js","./lo","./lo.js","./lt","./lt.js","./lv","./lv.js","./me","./me.js","./mi","./mi.js","./mk","./mk.js","./ml","./ml.js","./mn","./mn.js","./mr","./mr.js","./ms","./ms-my","./ms-my.js","./ms.js","./mt","./mt.js","./my","./my.js","./nb","./nb.js","./ne","./ne.js","./nl","./nl-be","./nl-be.js","./nl.js","./nn","./nn.js","./pa-in","./pa-in.js","./pl","./pl.js","./pt","./pt-br","./pt-br.js","./pt.js","./ro","./ro.js","./ru","./ru.js","./sd","./sd.js","./se","./se.js","./si","./si.js","./sk","./sk.js","./sl","./sl.js","./sq","./sq.js","./sr","./sr-cyrl","./sr-cyrl.js","./sr.js","./ss","./ss.js","./sv","./sv.js","./sw","./sw.js","./ta","./ta.js","./te","./te.js","./tet","./tet.js","./tg","./tg.js","./th","./th.js","./tl-ph","./tl-ph.js","./tlh","./tlh.js","./tr","./tr.js","./tzl","./tzl.js","./tzm","./tzm-latn","./tzm-latn.js","./tzm.js","./ug-cn","./ug-cn.js","./uk","./uk.js","./ur","./ur.js","./uz","./uz-latn","./uz-latn.js","./uz.js","./vi","./vi.js","./x-pseudo","./x-pseudo.js","./yo","./yo.js","./zh-cn","./zh-cn.js","./zh-hk","./zh-hk.js","./zh-tw","./zh-tw.js","webpackAsyncContext","req","ids","e","then","t","resolve","./chs","./chs.js","./da-dk","./da-dk.js","./en-za","./en-za.js","./es-es","./es-es.js","./nl-nl","./nl-nl.js","./no","./no.js","./pt-pt","./pt-pt.js","./ru-ua","./ru-ua.js","./uk-ua","./uk-ua.js","./cs/messages.po","./de/messages.po","./en-dev/messages.po","./en/messages.po","./pl/messages.po","./sk/messages.po","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","RootContext","createContext","undefined","getChannelId","Math","round","now","random","toString","isSubscriptionOperation","getOperationDefinitionOrDie","createApolloClient","cache","InMemoryCache","dataIdFromObject","o","authLink","headers","computed","Authorization","communicationToken","ApolloLink","forward","canCommunicate","getContext","setContext","get","Observable","observer","sub","subscribe","networkError","invalidate","complete","unsubscribe","createAuthLink","retryLink","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","offlineLink","QueueLink","isNetworkOnline","open","close","createOfflineLink","errorLink","httpLink","BatchHttpLink","uri","credentials","subscriptionLink","cable","cableUrl","token","connectionParams","isAuthenticated","ActionCable","createConsumer","channelId","subscriptions","create","channel","connected","perform","print","operationId","received","payload","more","createSubscriptionLink","ApolloClient","link","split","persistModel","_persistModel","modelName","stateKey","writeState","getType","name","snapshot","localforage","getItem","applySnapshot","getSnapshot","t0","removeItem","onSnapshot","getLoginUrl","username","password","PasswordLoginModel","errorCode","hasFailed","setFailure","setSuccess","authenticate","requestToken","_requestToken","fetch","response","Accept","json","status","String","LoginProviderModel","passwordLogin","PasswordChangeMutation","AuthModel","provider","isAuthenticatedUser","tokenForPasswordChange","reset","setForPasswordChange","temporaryB64EncodedToken","Base64","decode","changePassword","_changePassword","_ref$updateUserPasswo","fetchPolicy","updateUserPassword","preProcessSnapshot","ConfigModel","orderListPollIntervalSec","orderListSoundIntervalSec","UserModelBootstrapQuery","UserModel_graphql_templateObject","UserModel","maybe","number","soundIgnore","isLoaded","brands","access","permissions","canCancelOrders","canCreateOrder","branchesId","R","defaultBranch","filterBranches","predicate","canQuery","queryName","queries","toLowerCase","canMutate","mutationName","mutations","isReady","applyUserData","uniqBy","applyUserPermissions","applyUserAccess","mapValues","fields","Set","compose","toLower","setLanguage","flow","finishBootstrap","ignore","setSoundVolume","queryUser","rawCode","omit","userAccess","userPermissions","initUser","reaction","fireImmediately","when","faker","CreateOrderModel","getDefaultProps","currentBranch","deliveryType","isDelivery","DeliveryTypeEnum","Messenger","deliverAt","hasAddress","deliveryAddress","fakeAddress","clearGps","phone","phonePrefix","prefix","country","vamCustomer","isFound","_self$vamCustomer","email","lastOrder","defaults","fakeValues","hasOrder","cartRefreshKey","acceptOrderVariables","customer","emails","phones","resetModel","ensureOrder","callEventId","eventId","createOrder","cancelOrder","resetOrder","useLocation","clearLocation","selectBranch","userIsCalling","setDeliveryMinutes","minutes","deliveryMinutes","updateFormValues","touched","updateFromVam","updateFormWithFakeValues","internet","phoneNumberFormat","lorem","sentence","slice","notDeliveryLocation","GPSCzechia","MapModel","zoom","mapRef","setMapRef","updateZoom","getZoom","updatePosition","getCenter","OrderBranchLocationQuery","OrderMapModel_graphql_templateObject","OrderLocationQuery","OrderMapModel","activeDriverId","_panToOrder","panTo","panToBranch","_panToBranch","activateDriver","driverId","position","OrderStateModel","updateOrderState","_updateOrderState","_cancelOrder","alert","deliverOrder","OrderStateEnum","OnWay","sendTimeNotification","_sendTimeNotification","selectDriver","_selectDriver","_callee4","_context4","_x7","removeDriver","_removeDriver","_callee5","orderDriverId","_context5","_x8","OrderModel","list","StatisticsModel","closureBranch","maybeNull","dateTimeFrom","startOfDay","dateTimeTo","endOfDay","updateFilter","setClosureBranch","branch","createClosure","_createClosure","companyBranchId","SettingsBaseModel","MenuStockModel","createItem","updateItem","stockId","deleteItem","_deleteItem","label","plu","allergens","wareUnit","allowNegative","MenuModel","stock","SettingsModel","selectedBranchId","menu","head","queryProps","skip","getQueryProps","otherVariables","ZoneMapModel","currentZonePoints","updateZonePoints","points","clearZonePoints","panToZone","_panToZone","zoneId","zone","CreateZoneMutation","ZoneModel_graphql_templateObject","UpdateZoneMutation","ZoneModel_graphql_templateObject2","UpdateZonePriorityMutation","DestroyZoneMutation","ZoneModel","brandId","brand","branchFilterId","branchFilterPredicate","zoneFilterPredicate","setBrandFilter","brandBranches","clearBrandFilter","createZone","onZoneCreate","GZones","zones","saveZone","_saveZone","update","zoneColor","minimalOrderPrice","priceRangeRules","normalizePriceRangeRule","geoPolygon","zoneIdx","updateZone","destroyZone","changeZonePriority","oldIndex","newIndex","updateZonePriority","priority","numberOrNull","num","isNaN","range","toPrice","RootModel","statistics","persistedModels","RootProvider","_useState","useState","_useState2","slicedToArray","setRoot","_useState3","_useState4","hasNetworkError","setNetworkError","useAsyncEffect","rootModel","index_es","autoHideDuration","action","reload","size","role","react_apollo_browser_umd","ApolloContext","Provider","_ref3$observe","index_module","cleanup","useRef","executeCleanup","current","fn","useEffect","renderFragment","_props$renderLoading","_props$renderError","renderError","_props$refetchOnConne","refetchOnConnectionLost","rest","react_apollo__WEBPACK_IMPORTED_MODULE_2__","loading","_atoms_Loading__WEBPACK_IMPORTED_MODULE_6__","react_router_dom__WEBPACK_IMPORTED_MODULE_4__","whenGoingOnline","refetch","_RootProvider__WEBPACK_IMPORTED_MODULE_1__","react_spinkit__WEBPACK_IMPORTED_MODULE_1__","react_spinkit__WEBPACK_IMPORTED_MODULE_1___default","_ref$noMargin","noMargin","style","display","alignSelf","justifyContent","marginTop","_ref$redirect","lazy","_RedirectToLogin__WEBPACK_IMPORTED_MODULE_6__","_pages_NotFoundPage__WEBPACK_IMPORTED_MODULE_4__","exact","_LazyRoute__WEBPACK_IMPORTED_MODULE_5__","MessageStyled","ConnectionWarning","isNetworkOffline","connectionWarningSound","disableBackdropClick","disableEscapeKeyDown","icons_index_es","_lingui_react","ErrorContainer","_ref$prod","prod","lib","dispatchErrorReporting","UpdateHandler","_ref$onRestart","onRestart","_ref$autoUpdateDelay","autoUpdateDelay","SECOND","_ref$postponeTimeout","postponeTimeout","MINUTE","_ref$updateCheckInter","updateCheckInterval","HOUR","_ref$serviceWorker","serviceWorker","navigator","registrationWorkerRef","updateWorkerRef","useObservable","updatePending","useReleaseCabinet","version","useInterval","onMessage","event","addEventListener","removeEventListener","updateWorker","register","onInit","reg","onUpdate","sw","init","onCancel","onConfirm","postMessage","UpdateSnack","getNow","useNow","_React$useState","addMilliseconds","endTime","useTimer","interval","remainingSeconds","formatDistanceStrict","disableWindowBlurListener","onClose","ErrorPage","LogRoute","RedirectAfterLogin","route","RedirectAfterLogout","PasswordLoginRoute","PasswordChangeRoute","PasswordResetRoute","MainDashboardPage","OrderRoutes","KitchenRoutes","SettingsRoutes","OverviewRoutes","SupportPage","Routing","Suspense","fallback","LogRoute_LogRoute","RedirectAfterLogin_RedirectAfterLogin","LazyRoute","App","ErrorContainer_ErrorContainer","UpdateHandler_UpdateHandler","Routing_Routing","Router","dist_index_es","handleGetUserConfirm","getUserConfirmation","ThemeProvider","theme","createMuiTheme","typography","useNextVariants","styles","Main","ThemeProvider_ThemeProvider","Router_Router","App_App","rootElement","getElementById","src_Main","routeProps","_atoms_Pacman__WEBPACK_IMPORTED_MODULE_3__","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","OrderStateCategoryTargetEnum","WeekDayEnum","AllergenEnum","WarePriceTypeEnum","AvailabilityTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","OrderBillingTypeEnum","OrderRecipeStateEnum","LanguageEnum","OrderOnlineStateEnum","OrderOriginEnum","PaymentGateEnum","PaymentTypeEnum","ZoneTypeEnum","ShiftUserStateEnum","WareUnitEnum","WareCategoryTypeEnum","WareRequirementEnum","MobilePlatformEnum","SettingTypeEnum","SubscriptionActionType","GGeoPointFragmentDoc","GCompanyBranchFragmentDoc","GSpecificBusinessHourFragmentDoc","GOrderMenuRecipeFragmentDoc","GOrderMenuCategoryFragmentDoc","GAllergenFragmentDoc","_templateObject7","GWareUnitFragmentDoc","_templateObject8","GMenuStockItemFragmentDoc","_templateObject9","GPriceFragmentDoc","_templateObject10","GMenuRecipeFragmentDoc","_templateObject11","GMenuCategoryFormFragmentDoc","_templateObject12","GMenuCategoryListItemFragmentDoc","_templateObject13","GMenuRecipePriceFragmentDoc","_templateObject14","GMenuAssocRecipeFragmentDoc","_templateObject15","GOrderStateCategoryFragmentDoc","_templateObject16","GDriverFragmentDoc","_templateObject17","GOrderDriverFragmentDoc","_templateObject18","FAddressFragmentDoc","_templateObject19","GEmailFragmentDoc","_templateObject20","GPhoneFragmentDoc","_templateObject21","GCustomerFragmentDoc","_templateObject22","GOrderListTickerFragmentDoc","_templateObject23","GOrderDetailWareFragmentDoc","_templateObject24","GOrderMarkerFragmentDoc","_templateObject25","GOrderMapDriverFragmentDoc","_templateObject26","GOrderMapDeviceFragmentDoc","_templateObject27","GOrderMapDeliveryFragmentDoc","_templateObject28","GStatsPriceFragmentDoc","_templateObject29","_templateObject30","GZonePriceRangeFragmentDoc","_templateObject31","GZoneFragmentDoc","_templateObject32","FKitchenOrderRecipeFragmentDoc","_templateObject33","FKitchenOrderFragmentDoc","_templateObject34","_templateObject35","_templateObject36","_templateObject37","_templateObject38","_templateObject39","_templateObject40","_templateObject41","_templateObject42","_templateObject43","_templateObject44","_templateObject45","_templateObject46","_templateObject47","_templateObject48","_templateObject49","_templateObject50","_templateObject51","_templateObject52","_templateObject53","_templateObject54","_templateObject55","_templateObject56","_templateObject57","_templateObject58","_templateObject59","_templateObject60","_templateObject61","_templateObject62","_templateObject63","_templateObject64","_templateObject65","_templateObject66","_templateObject67","_templateObject68","_templateObject69","_templateObject70","_templateObject71","_templateObject72","_templateObject73","_templateObject74","_templateObject75","_templateObject76","_templateObject77","_templateObject78","_templateObject79","_templateObject80","_templateObject81","_templateObject82","_templateObject83","_templateObject84","_templateObject85","_templateObject86","_templateObject87","_templateObject88","_templateObject89","_templateObject90","_templateObject91","_templateObject92","_templateObject93","_templateObject94","_templateObject95","_templateObject96","_templateObject97","_templateObject98","_templateObject99","_templateObject100","_templateObject101","_templateObject102","_templateObject103","_templateObject104","_templateObject105","_templateObject106","_templateObject107","_templateObject108","_templateObject109","_templateObject110","_templateObject111","_templateObject112","_templateObject113","_templateObject114","_templateObject115","_templateObject116","_templateObject117","_templateObject118","MKitchenRecipeStateDocument","_templateObject119","useMKitchenRecipeState","baseOptions","Hooks","QKitchenOrderListDocument","_templateObject120","useQKitchenOrderList","SKitchenOrderListDocument","_templateObject121","useSKitchenOrderList","IconSpanStyled","_ref$fontSize","_ref$fontSizeUnit","fontSizeUnit","_ref2$color","isOnline","box","onLine","change","oldValue","newValue"],"mappings":"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AC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,gBAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,aAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,YAAA,CACA,IACA,IAEAC,eAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,gBAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,YAAA,CACA,IACA,IAEAC,eAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,gBAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAA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","file":"static/js/main.9eff484d.chunk.js","sourcesContent":["import Color from 'color'\n\nimport { RM } from './helpers/ramda'\n\nexport enum Colors {\n  yellow = '#FFDB2B',\n  pink = '#FF2B95',\n  blue = '#2441FF',\n  red = '#FF1C1C',\n  green = '#179B12',\n  turquoise = '#2BFFFF',\n  orange = '#FF862B',\n  violet = '#6D4F8C',\n  black = '#000000',\n  greyDarkest = '#080808',\n  greyDark = '#2C2C2C',\n  greyMiddle = '#939393',\n  greyLight = '#EDEDED',\n  white = '#FFFFFF',\n}\n\nexport const applyAlphaToColor = RM.curry((color: Colors, alphaValue: number) =>\n  Color(color)\n    .alpha(alphaValue)\n    .string(),\n)\n\nexport enum Radiuses {\n  Card = '0.5rem',\n  Button = '0.5rem',\n  TextComponent = '0.25rem',\n}\n\nexport const Spacing = {\n  MarginAroundFormComponents: '0.1rem',\n  Small: '0.25rem',\n  Middle: '0.5rem',\n  LayoutGridCellMargin: '0.5rem',\n  ButtonHeight: '3.4375rem',\n  DefaultInputWidth: 20,\n  DefaultSizeUnit: 'rem',\n  ButtonColumnWidthPx: 55,\n  InfoMessageFontSize: '1.375rem',\n}\n\nexport const FontSizes = {\n  CompactCard: '0.75rem',\n  CompactCardBig: '1rem',\n}\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TMenuModel } from './MenuModel'\n\nexport const MenuBaseModel = BaseModel.named('MenuBase')\n  .volatile(() => ({\n    filterInput: '',\n  }))\n  .actions(self => ({\n    setFilterInput(input: string) {\n      self.filterInput = input\n    },\n  }))\n  .views(self => ({\n    get branchId() {\n      return getParent<TMenuModel>(self).settings.branchId\n    },\n  }))\n","import { css } from 'emotion'\nimport { SnackbarProvider } from 'notistack'\nimport React from 'react'\n\nimport { Colors, Spacing } from '../styling'\n\ninterface IProps {}\n\nconst successStyle = css`\n  background: ${Colors.green} !important;\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nconst errorStyle = css`\n  background: ${Colors.red};\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nconst warningStyle = css`\n  background: ${Colors.orange};\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nexport const snackStyles = {\n  variantSuccess: successStyle,\n  variantInfo: successStyle,\n  variantError: errorStyle,\n  variantWarning: warningStyle,\n}\n\nexport const SnackProvider: React.FC<IProps> = ({ children }) => (\n  <SnackbarProvider\n    maxSnack={3}\n    classes={snackStyles}\n    anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\n  >\n    {children}\n  </SnackbarProvider>\n)\n","import gql from 'graphql-tag'\n\nimport { AllergenFragment } from '../graph/AllergenFragment.graphql'\nimport { WareUnitFragment } from '../graph/WareUnitFragment.graphql'\n\nexport const MenuStockItemFragment = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...GAllergen\n    }\n    wareUnit {\n      ...GWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n  ${WareUnitFragment}\n  ${AllergenFragment}\n`\n\nexport const MenuStockCreateMutation = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockUpdateMutation = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockDeleteMutation = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n","import { isSameDay } from 'date-fns'\nimport { format, formatWithOptions } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\nimport numeral from 'numeral'\n\nimport { FAddressFragment } from '../graph/generated'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const fullDateFormat = 'dddd LL'\nexport const formatFullDate = formatLocale(fullDateFormat)\n\nexport const dateFormat = 'D.M.YYYY'\nexport const formatDate = formatLocale(dateFormat)\n\nexport const dateFormatISO = 'YYYY-MM-DD'\nexport const formatDateISO = format(dateFormatISO)\n\nexport const timeFormat = 'H:mm'\nexport const formatTime = formatLocale(timeFormat)\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const priceFormat = '0,0.[00]'\nexport const formatPrice = price => numeral(price).format(priceFormat)\n\nexport const formatTimeWithoutTodayDate = (time: string) =>\n  isSameDay(time, new Date()) ? formatTime(time) : formatDateTime(time)\n\nexport const formatAddress = (address: FAddressFragment) => {\n  if (!address.street) {\n    if (address.city) {\n      return `${address.city} ${address.houseNumber}, ${address.state}`\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n","import gql from 'graphql-tag'\n\nimport { OrderDriverFragment } from '../molecules/OrderStateDeliver.graphql'\n\nexport const OrderStateCategoryFragment = gql`\n  fragment GOrderStateCategory on Order {\n    id\n    orderStateCategory\n  }\n`\n\nexport const UpdateOrderStateMutation = gql`\n  mutation GUpdateOrderState($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...GOrderStateCategory\n      orderTiming: orderStateCategoryRelations {\n        createdAt\n        orderStateCategory\n      }\n    }\n  }\n  ${OrderStateCategoryFragment}\n`\n\nexport const SendOrderNotificationMutation = gql`\n  mutation GSendOrderNotification($orderId: ID!, $minutes: Int!) {\n    orderNotifyCustomer(id: $orderId, minutes: $minutes) {\n      id\n      deliverAt\n    }\n  }\n`\n\nexport const SelectOrderDriverMutation = gql`\n  mutation GSelectOrderDriver($driverId: ID!, $orderId: ID!) {\n    createUserDeliveringOrder(user: $driverId, order: $orderId) {\n      order {\n        ...GOrderDriver\n      }\n    }\n  }\n  ${OrderDriverFragment}\n`\n\nexport const RemoveOrderDriverMutation = gql`\n  mutation GRemoveOrderDriver($orderDriverId: ID!) {\n    destroyUserDeliveringOrder(id: $orderDriverId) {\n      order {\n        ...GOrderDriver\n      }\n    }\n  }\n  ${OrderDriverFragment}\n`\n\nexport const ChangeOrderToPickupMutation = gql`\n  mutation MChangeOrderToPickup($orderId: ID!) {\n    updateOrderDeliveryToPickup(id: $orderId) {\n      id\n      deliveryType {\n        enum\n      }\n    }\n  }\n`\n","import { autorun, observable } from 'mobx'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { appConfig } from '../config'\nimport { RM } from '../helpers/ramda'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  title: string\n}\n\nconst TitleStyled = styled.h1`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  margin: 0.5rem 0.5rem 0 0.5rem;\n  white-space: nowrap;\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.9);\n`\n\nconst observableTitles = observable.array<string>([])\n\nautorun(() => {\n  const lastTitle = Array.from(observableTitles).pop()\n  if (lastTitle) {\n    document.title = `${lastTitle} :: ${appConfig.pageTitleSuffix}`\n  } else {\n    document.title = appConfig.pageTitleSuffix\n  }\n})\n\nconst PageTitleDisplay: React.FC = () => (\n  <Observer>\n    {() => <TitleStyled>{observableTitles.join(' - ')}</TitleStyled>}\n  </Observer>\n)\n\nexport class PageTitle extends React.Component<IProps> {\n  static Route = PageTitleRoute\n  static Display = PageTitleDisplay\n  componentDidMount() {\n    observableTitles.push(this.props.title)\n  }\n  componentDidUpdate(prevProps: IProps) {\n    const idx = observableTitles.findIndex(RM.equals(prevProps.title))\n    if (idx >= 0) {\n      observableTitles.splice(idx, 1, this.props.title)\n    }\n  }\n  componentWillUnmount() {\n    observableTitles.remove(this.props.title)\n  }\n  render() {\n    return null\n  }\n}\n\nfunction PageTitleRoute({ title, ...props }: IProps & RouteProps) {\n  return <Route {...props} render={() => <PageTitle title={title} />} />\n}\n","import gql from 'graphql-tag'\n\nexport const MenuCategoryListFragment = gql`\n  fragment GMenuCategoryListItem on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    countRecipes\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n  }\n`\n\nexport const CategoryListQuery = gql`\n  query GCategoryList($branchId: ID!, $categoryType: WareCategoryTypeEnum!) {\n    categories: wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: $categoryType\n    ) {\n      ...GMenuCategoryListItem\n    }\n  }\n  ${MenuCategoryListFragment}\n`\n","import gql from 'graphql-tag'\n\nimport { GeoPointFragment, PriceFragment } from '../../graph/fragments'\n\nexport const ZoneFragment = gql`\n  fragment GZone on Zone {\n    id\n    name\n    enabled\n    priority\n    companyBranch {\n      id\n      brand {\n        id\n      }\n    }\n    geoPolygon {\n      ...GGeoPoint\n    }\n    priceRangeRules {\n      ...GZonePriceRange\n    }\n    minimalOrderPrice {\n      ...GPrice\n    }\n    zoneColor {\n      id\n      code\n      color\n    }\n  }\n\n  fragment GZonePriceRange on ZonePriceRangeRule {\n    toPrice {\n      ...GPrice\n    }\n    price {\n      ...GPrice\n    }\n  }\n\n  ${PriceFragment}\n  ${GeoPointFragment}\n`\n\nexport const ZoneLocationQuery = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...GGeoPoint\n        }\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n\nexport const ZoneBranchLocationQuery = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n\nexport const ZoneColorsQuery = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n","import debug from 'debug'\n\n// @ts-ignore\ndebug.useColors = () => !process.env.REACT_APP_STAGE\n\nexport const logMain = debug('main')\nexport const logDebug = debug('debug')\nexport const logError = debug('error')\nexport const logAuth = debug('auth')\nexport const logRouting = debug('routing')\nexport const logPersistence = debug('persistence')\nexport const logBootstrap = debug('bootstrap')\nexport const logAccess = debug('access')\nexport const logGraph = debug('graph')\nexport const logForm = debug('form')\nexport const logSentry = debug('sentry')\nexport const logLang = debug('lang')\nexport const logUpdate = debug('update')\n// tslint:disable-next-line:no-console\nexport const logTest = console.log\n","import React from 'react'\n\nimport { PageTitle } from '../atoms/PageTitle'\nimport { i18n } from '../i18n'\n\nexport const NotFoundPage: React.FC = () => (\n  <>\n    <PageTitle title={i18n.t`Not found`} />\n    <h1>{i18n.t`There is nothing here, sorry!`}</h1>\n  </>\n)\n","import debug from 'debug'\nimport { getEnv, getPath, getRoot, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { IRootEnvironment } from '../atoms/RootProvider'\nimport { TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    return debug(`model/${getPath(self)}`)\n  },\n  get client() {\n    const client = getEnv<IRootEnvironment>(self).apolloClient\n    if (!client) {\n      throw new VError('Apollo client is missing from environment setup')\n    }\n    return client\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n}))\n","import debug from 'debug'\nimport React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\n\ninterface IRedirectToLoginProps {\n  useOrigin?: boolean\n}\n\nconst log = debug('routing')\n\nexport const RedirectToLogin: React.FC<IRedirectToLoginProps> = ({\n  useOrigin = true,\n}) => (\n  <Route\n    path=\"/login\"\n    children={({ match, location }) => {\n      if (match) {\n        return null\n      }\n      log('redirecting to login...')\n      return (\n        <Redirect\n          to={{\n            pathname: '/login',\n            state: { origin: useOrigin ? location.pathname : '/' },\n          }}\n        />\n      )\n    }}\n  />\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GOrderDriverSelection } from '../../../graph/types'\n\nconst DriverFragment = gql`\n  fragment GDriver on User {\n    id\n    firstName\n    lastName\n  }\n`\n\nexport const OrderDriverFragment = gql`\n  fragment GOrderDriver on Order {\n    id\n    driver: userDeliveringOrder {\n      id\n      user {\n        ...GDriver\n      }\n    }\n  }\n  ${DriverFragment}\n`\n\nconst OrderDriverSelection = gql`\n  query GOrderDriverSelection($orderId: ID!, $branchId: [ID!]!) {\n    order(id: $orderId) {\n      ...GOrderDriver\n    }\n    drivers(companyBranches: $branchId, onlyAvailable: true) {\n      ...GDriver\n    }\n  }\n  ${OrderDriverFragment}\n`\n\nexport const QueryDriverSelection = buildQuery<\n  GOrderDriverSelection.Query,\n  GOrderDriverSelection.Variables\n>(OrderDriverSelection)\n","import * as RM from 'ramda'\n\nexport { RM }\n","import gql from 'graphql-tag'\n\nexport const ValidateLocationQuery = gql`\n  query GValidateLocation(\n    $branchId: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    resolveLocation(\n      companyBranch: $branchId\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      inDeliveryLocation\n    }\n  }\n`\n\nexport const CreateOrderMutation = gql`\n  mutation GCreateOrder(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $callEventId: ID\n  ) {\n    createOrder(\n      order: {\n        companyBranch: $branchId\n        deliveryType: $deliveryType\n        callEventId: $callEventId\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: {}\n        warePriceType: DELIVERY\n        orderOrigin: STAFF\n      }\n    ) {\n      id\n    }\n  }\n`\n\nexport const CancelOrderMutation = gql`\n  mutation MCancelOrder($orderId: ID!) {\n    addOrderState(order: $orderId, orderState: CANCELED) {\n      id\n    }\n  }\n`\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GMenuStockList } from '../../../graph/types'\nimport { MenuStockItemFragment } from '../models/MenuStockModel.graphql'\n\nexport const MenuStockListQuery = gql`\n  query GMenuStockList($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const QueryMenuStockList = buildQuery<\n  GMenuStockList.Query,\n  GMenuStockList.Variables\n>(MenuStockListQuery)\n","import React, { MouseEvent } from 'react'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { applyAlphaToColor, Colors, Radiuses, Spacing } from '../styling'\n\nexport interface ITouchButtonProps\n  extends React.HTMLAttributes<HTMLButtonElement> {\n  iconName?: string\n  iconColor?: Colors\n  iconSize?: number\n  text?: string\n  color?: Colors\n  badge?: ReactNode\n  disabled?: boolean\n  textNextToIcon?: boolean\n  className?: string\n  width?: string\n  height?: string\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n}\n\nconst applyAlpha = (alphaValue: number) => (props: ITouchButtonProps) =>\n  applyAlphaToColor(props.color!, alphaValue)\n\nconst TouchButtonStyled = styled.button`\n  min-height: ${Spacing.ButtonHeight};\n  min-width: ${Spacing.ButtonHeight};\n  width: ${({ width = '100%' }: ITouchButtonProps) => width};\n  height: ${({ height = '100%' }: ITouchButtonProps) => height};\n  margin: 0;\n  padding: 0 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  /* fallback font size for incompatible browsers */\n  font-size: 1rem;\n  font-size: calc(0.6rem + 0.5vw);\n  transition-duration: 0.2s;\n\n  & .material-icons {\n    vertical-align: middle;\n  }\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nconst ButtonLabelStyled = styled.div`\n  color: white;\n  text-align: center;\n  width: 100%;\n  overflow: hidden;\n`\nconst ButtonLabelNextToIconStyled = styled(ButtonLabelStyled)`\n  width: calc(100% - 4rem);\n  margin: 0 0 0 1rem;\n  text-align: left;\n  display: inline-block;\n  vertical-align: top;\n  overflow: hidden;\n`\n\nexport const TouchButton = React.forwardRef<\n  HTMLButtonElement,\n  ITouchButtonProps\n>(\n  (\n    {\n      children,\n      iconName,\n      iconColor = Colors.white,\n      iconSize = 3,\n      color = Colors.greyMiddle,\n      textNextToIcon = false,\n      badge,\n      text,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    return (\n      <TouchButtonStyled color={color} {...props} ref={forwardedRef}>\n        {iconName && (\n          <Icon iconName={iconName} color={iconColor} fontSize={iconSize} />\n        )}\n\n        {text &&\n          textNextToIcon && (\n            <ButtonLabelNextToIconStyled>{text}</ButtonLabelNextToIconStyled>\n          )}\n\n        {text &&\n          !textNextToIcon && <ButtonLabelStyled>{text}</ButtonLabelStyled>}\n\n        {badge}\n        {children}\n      </TouchButtonStyled>\n    )\n  },\n)\n","import Color from 'color'\nimport styled, { css } from 'styled-components'\n\nimport { Colors, Radiuses } from '../styling'\n\ninterface IProps {\n  color?: string\n  textColor?: string\n  padding?: number\n  stretchToParent?: boolean\n}\n\nexport const Card = styled.div`\n  background: ${getBackgroundColor};\n  color: ${getTextColor};\n  border-radius: ${Radiuses.Card};\n  padding: ${getPadding}rem;\n  margin: 0 0 0.5rem 0;\n  position: relative;\n  ${applyStretchToParentStyle};\n`\n\nCard.displayName = 'Card'\n\nfunction getPadding({ padding = 0.5 }: IProps) {\n  return padding\n}\n\nfunction getBackgroundColor({ color }: IProps) {\n  return Color(color || Colors.greyLight)\n    .alpha(0.8)\n    .lighten(0.4)\n    .string()\n}\n\nfunction getTextColor(props: IProps) {\n  return props.textColor || Colors.black\n}\n\nfunction applyStretchToParentStyle({ stretchToParent = false }: IProps) {\n  if (!stretchToParent) {\n    return ''\n  }\n  return css`\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  `\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\n\nimport { IPageLayoutProps, PageLayout } from '../molecules/PageLayout'\n\ninterface IFullPageLayoutProps extends IPageLayoutProps {\n  width?: number\n}\n\nfunction getLayout(width: number): Layout[] {\n  return [{ i: 'full', x: 0, y: 1, w: width, h: 10 }]\n}\n\nexport const FullPageLayout: React.FC<IFullPageLayoutProps> = ({\n  children,\n  width = 16,\n  ...props\n}) => (\n  <PageLayout layouts={getLayout(width)} {...props}>\n    <div key=\"full\">{children}</div>\n  </PageLayout>\n)\n","import { SnackbarContextNext } from 'notistack/build/SnackbarContext'\nimport { useCallback, useContext } from 'react'\n\nenum EVariant {\n  default = 'default',\n  error = 'error',\n  success = 'success',\n  warning = 'warning',\n  info = 'info',\n}\n\ninterface IEnqueueOptions {\n  /** Type of the snackbar */\n  variant: EVariant\n  /** Event fired when user clicks on action button (if any) */\n  onClickAction(): void\n  /**\n   * You can pass material-ui Snackbar props here, and they will be applied to this individual snackbar.\n   * for example, this particular snackbar will be dismissed after 1sec.\n   */\n  autoHideDuration: number\n  action: ReactNode[]\n}\n\ninterface IEnqueueSnackbar {\n  (message: string, options?: Partial<IEnqueueOptions>)\n}\n\nconst successVariant = { variant: EVariant.success }\nconst errorVariant = { variant: EVariant.error }\nconst warningVariant = { variant: EVariant.warning }\nconst infoVariant = { variant: EVariant.info }\n\nexport function useSnackBar() {\n  const enqueueSnackbar: IEnqueueSnackbar = useContext(SnackbarContextNext)\n  const enqueueSuccess = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, successVariant),\n    [],\n  )\n  const enqueueError = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, errorVariant),\n    [],\n  )\n  const enqueueWarning = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, warningVariant),\n    [],\n  )\n  const enqueueInfo = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, infoVariant),\n    [],\n  )\n  return {\n    enqueueSnackbar,\n    enqueueSuccess,\n    enqueueError,\n    enqueueWarning,\n    enqueueInfo,\n  }\n}\n","import 'rc-slider/assets/index.css'\n\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors, Spacing } from '../styling'\nimport { WithRoot } from './WithRoot'\n\nconst SoundControlContainerStyled = styled.div`\n  position: relative;\n`\n\nconst SoundButtonStyled = styled(TouchButton)`\n  height: ${Spacing.ButtonHeight};\n  width: ${Spacing.ButtonHeight};\n  position: absolute;\n  right: 0;\n  top: 0;\n`\n\nexport class SoundControl extends React.Component {\n  state = { playPreview: false }\n  render() {\n    return (\n      <WithRoot\n        observe={true}\n        render={({ user }) => (\n          <SoundControlContainerStyled>\n            <SoundButtonStyled\n              color={user.soundEnabled ? Colors.green : Colors.red}\n              iconName={user.soundEnabled ? 'volume_up' : 'volume_off'}\n              iconSize={2}\n              onClick={() => {\n                user.controlSound(!user.soundEnabled)\n              }}\n            />\n          </SoundControlContainerStyled>\n        )}\n      />\n    )\n  }\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../graph/buildQuery'\nimport { GLogoutWidget } from '../graph/types'\n\nexport const QueryLogoutWidget = buildQuery<\n  GLogoutWidget.Query,\n  GLogoutWidget.Variables\n>(gql`\n  query GLogoutWidget($id: ID!) {\n    user(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n`)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { WithRoot } from '../atoms/WithRoot'\nimport { GLogoutWidget } from '../graph/types'\nimport { i18n } from '../i18n'\nimport { Colors } from '../styling'\nimport { QueryLogoutWidget } from './LogoutWidget.graphql'\n\nconst LogoutWidgetStyled = styled.div`\n  margin-left: 1rem;\n  color: ${Colors.greyLight};\n  &:hover {\n    color: ${Colors.white};\n  }\n`\nconst LoggedUserNameStyled = styled.span`\n  color: ${Colors.greyLight};\n  text-decoration: none;\n  font-weight: lighter;\n  position: relative;\n  top: 0.6rem;\n  display: inline-block;\n  max-width: 10rem;\n  text-align: right;\n`\n\nconst IconStyled = styled.span`\n  padding: 0.5rem 0.5rem 0 0.5rem;\n  display: inline-block;\n  vertical-align: top;\n`\n\nexport const LogoutWidget: React.FC = () => (\n  <WithRoot\n    render={({ auth }) => (\n      <QueryLogoutWidget\n        variables={{ id: auth.userId }}\n        renderLoading={() => null}\n        render={({ user }) => (\n          <LogoutWidgetStyled data-testid=\"logout-widget\">\n            <Link to=\"/logout\">\n              <LoggedUserNameStyled>\n                {getNameDisplay(user)}\n              </LoggedUserNameStyled>\n              <IconStyled>\n                <Icon iconName=\"exit_to_app\" />\n              </IconStyled>\n            </Link>\n          </LogoutWidgetStyled>\n        )}\n      />\n    )}\n  />\n)\n\nfunction getNameDisplay(user: GLogoutWidget.User) {\n  if (user) {\n    return `${user.firstName} ${user.lastName}`\n  } else {\n    return i18n.t`Not logged in`\n  }\n}\n","import Color from 'color'\nimport React, { MouseEvent } from 'react'\nimport { Link, Route } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { Colors, Radiuses, Spacing } from '../styling'\n\ninterface IHomeButtonProps {\n  iconColor?: Colors\n  color?: Colors\n  disabled?: boolean\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n  goBack?: boolean\n  backRoute?: string\n}\n\nconst applyAlpha = (alphaValue: number) => (props: IHomeButtonProps) =>\n  Color(props.color)\n    .alpha(alphaValue)\n    .string()\n\nconst HomeButtonStyled = styled.button`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 0 0 ${Radiuses.Button} 0 !important;\n  height: ${Spacing.ButtonHeight};\n  width: ${Spacing.ButtonHeight};\n  margin: 0;\n  padding: 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  font-size: 1rem;\n  transition-duration: 0.2s;\n\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nexport const HomeButton: React.FC<IHomeButtonProps> = ({\n  color = Colors.greyMiddle,\n  iconColor = Colors.white,\n  goBack = false,\n  backRoute,\n  ...props\n}) => {\n  if (goBack) {\n    return (\n      <Route>\n        {({ history }) => (\n          <HomeButtonStyled\n            color={color}\n            onClick={() => {\n              if (backRoute) {\n                history.push(backRoute)\n              } else {\n                history.goBack()\n              }\n            }}\n            {...props}\n          >\n            <Icon iconName=\"chevron_left\" color={iconColor} fontSize={2.2} />\n          </HomeButtonStyled>\n        )}\n      </Route>\n    )\n  }\n  return (\n    <Link to=\"/\">\n      <HomeButtonStyled color={color} {...props}>\n        <Icon iconName=\"home\" color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    </Link>\n  )\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\nimport styled from 'styled-components'\n\nimport { GridLayout } from '../atoms/GridLayout'\nimport { PageTitle } from '../atoms/PageTitle'\nimport { SoundControl } from '../atoms/SoundControl'\nimport { LogoutWidget } from '../organisms/LogoutWidget'\nimport { SecureRoute } from '../routes/SecureRoute'\nimport { HomeButton } from './HomeButton'\n\nexport interface IPageLayoutProps {\n  pageTitle?: string\n  layouts?: Layout[]\n  hideLogoutWidget?: boolean\n  showSoundControl?: boolean\n  useBackButton?: boolean\n  backRoute?: string\n  scrollPageTitle?: boolean\n}\n\nconst TopLeftButtonContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n`\n\nconst getPosition = (props: IPageLayoutProps) =>\n  props.scrollPageTitle ? 'absolute' : 'fixed'\n\nconst TopRightContainer = styled.div`\n  position: ${getPosition};\n  top: 0;\n  right: 0;\n  z-index: 100;\n`\n\nconst PageTitleContainer = styled.div`\n  position: ${getPosition};\n  top: 0rem;\n  left: 4rem;\n`\n\nconst SoundControlContainer = styled.div`\n  position: fixed;\n  top: 0rem;\n  right: 15rem;\n`\n\nexport const PageLayout: React.FC<IPageLayoutProps> = ({\n  pageTitle = '',\n  layouts = [],\n  hideLogoutWidget = false,\n  showSoundControl = false,\n  useBackButton = false,\n  scrollPageTitle = true,\n  backRoute,\n  children,\n}) => (\n  <>\n    {pageTitle && <PageTitle title={pageTitle} />}\n    {showSoundControl && (\n      <SoundControlContainer>\n        <SoundControl />\n      </SoundControlContainer>\n    )}\n\n    {!hideLogoutWidget && (\n      <TopRightContainer scrollPageTitle={scrollPageTitle}>\n        <SecureRoute path=\"/\" component={LogoutWidget} redirect={false} />\n      </TopRightContainer>\n    )}\n\n    <PageTitleContainer scrollPageTitle={scrollPageTitle}>\n      <PageTitle.Display />\n    </PageTitleContainer>\n\n    <GridLayout layouts={[...layouts]}>{children}</GridLayout>\n\n    <TopLeftButtonContainer>\n      <HomeButton goBack={useBackButton} backRoute={backRoute} />\n    </TopLeftButtonContainer>\n  </>\n)\n","import React from 'react'\n\ninterface ILoadingProps {\n  text?: string\n}\n\nexport const Loading: React.FC<ILoadingProps> = ({ text = '...' }) => (\n  <h1>{text}</h1>\n)\n","import React from 'react'\nimport RGL, { Layout, WidthProvider } from 'react-grid-layout'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\ninterface IGridLayoutProps {\n  layouts: Layout[]\n}\n\nexport const GridLayout: React.FC<IGridLayoutProps> = ({\n  children,\n  layouts,\n}) => (\n  <ReactGridLayout\n    className=\"layout\"\n    layout={layouts}\n    cols={16}\n    rowHeight={55}\n    margin={[8, 8]}\n    autoSize={false}\n    isDraggable={false}\n    isResizable={false}\n    compactType={null}\n    measureBeforeMount={true}\n  >\n    {children}\n  </ReactGridLayout>\n)\n","import { LocationDescriptor } from 'history'\nimport numeral from 'numeral'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  WareCategoryTypeEnum,\n  WarePriceTypeEnum,\n} from '../../../graph/generated'\nimport {\n  GMenuRecipeCreate,\n  GMenuRecipeDefaults,\n  GMenuRecipeDelete,\n  GMenuRecipeUpdate,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TRecipeFormValues } from '../menutypes'\nimport { MenuRecipeDefaults } from '../organisms/RecipeForm.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuRecipeCreateMutation,\n  MenuRecipeDeleteMutation,\n  MenuRecipeUpdateMutation,\n  MenuRecipeVisibilityMutation,\n} from './MenuRecipeModel.graphql'\n\nexport const MenuRecipeModel = MenuBaseModel.named('MenuRecipe')\n  .volatile(() => ({\n    categoryFilterId: null as MaybeID,\n  }))\n  .actions(self => ({\n    changeVisibility(recipeId: ID, visible: boolean) {\n      self.client.mutate({\n        mutation: MenuRecipeVisibilityMutation,\n        variables: { recipeId, visible },\n        optimisticResponse: {\n          updateRecipe: {\n            __typename: 'Recipe',\n            id: recipeId,\n            visible,\n          },\n        },\n      })\n    },\n    setCategoryFilter(categoryId: MaybeID) {\n      self.categoryFilterId = categoryId\n    },\n    createRecipe(\n      formValues: TRecipeFormValues,\n      recipeType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuRecipeCreate.Variables = {\n        recipe: {\n          companyBranch: self.branchId,\n          wareCategoryType: recipeType,\n          ...getRecipeVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeCreateMutation,\n          variables,\n        }),\n      )\n    },\n    updateRecipe(formValues: TRecipeFormValues) {\n      const variables: GMenuRecipeUpdate.Variables = {\n        recipeId: formValues.id,\n        recipe: {\n          ...getRecipeVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteRecipe(recipeId: ID) {\n      const variables: GMenuRecipeDelete.Variables = {\n        recipeId,\n      }\n      await self.client.mutate({\n        mutation: MenuRecipeDeleteMutation,\n        variables,\n      })\n    },\n    async queryDefaults() {\n      const { data } = await self.client.query<GMenuRecipeDefaults.Query>({\n        query: MenuRecipeDefaults,\n        variables: { branchId: self.branchId },\n      })\n      const {\n        companyBranch: {\n          vats,\n          currency: { code },\n        },\n      } = data\n      return {\n        vats: vats.reduce((result, { vatId, priceType }) => {\n          result[priceType.enum] = vatId\n          return result\n        }, {}),\n        currencyCode: code,\n      }\n    },\n  }))\n\nfunction getRecipeVariables(formValues: TRecipeFormValues) {\n  return {\n    code: formValues.code,\n    nameLabel: formValues.nameLabel,\n    internalNote: formValues.internalNote,\n    descriptionLabel: formValues.descriptionLabel,\n    enabled: formValues.visible,\n    prices: Object.keys(formValues.prices).map(priceType => ({\n      warePriceType: (priceType as unknown) as WarePriceTypeEnum,\n      price: { value: numeral(formValues.prices[priceType].value).value() },\n      vat: formValues.prices[priceType].vatId!,\n    })),\n    sideDishCategories: formValues.sideDishes.map(RM.prop('id')),\n    wareCategories: formValues.categories.map(RM.prop('id')),\n    associatedRecipes: formValues.associatedRecipes.map(\n      RM.pick(['associatedRecipe', 'warePriceType']),\n    ),\n    ingredients: formValues.ingredients.map(({ stockItem, quantity }) => {\n      return { stockItem, quantity: parseNumber(quantity) }\n    }),\n  }\n}\n\nfunction parseNumber(value: string | number) {\n  return typeof value === 'number'\n    ? value\n    : Number.parseFloat(value.replace(',', '.'))\n}\n\nexport const getRecipeRoute = (\n  recipeId: ID,\n  recipeType: WareCategoryTypeEnum,\n): LocationDescriptor => ({\n  pathname: recipeId,\n  state: { recipeType },\n})\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { PriceFragment } from '../../../graph/fragments'\nimport { GMenuRecipeFormAssoc } from '../../../graph/types'\nimport { MenuCategoryListFragment } from './CategoryList.graphql'\n\nexport const MenuRecipePriceFragment = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...GPrice\n    }\n    vat {\n      id\n    }\n  }\n  ${PriceFragment}\n`\n\nexport const MenuAssocRecipeFragment = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const MenuRecipeFormQuery = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...GMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...GMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n  ${MenuRecipePriceFragment}\n  ${MenuCategoryListFragment}\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeFormAssocQuery = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeDefaults = gql`\n  query GMenuRecipeDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport const QueryMenuRecipeFormAssoc = buildQuery<\n  GMenuRecipeFormAssoc.Query,\n  GMenuRecipeFormAssoc.Variables\n>(MenuRecipeFormAssocQuery)\n","import gql from 'graphql-tag'\n\nexport const AllergenFragment = gql`\n  fragment GAllergen on Allergen {\n    id\n    code\n    enum\n    category\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const WareUnitFragment = gql`\n  fragment GWareUnit on WareUnit {\n    id\n    enum\n    code\n  }\n`\n","import gql from 'graphql-tag'\n\nimport { SpecificBusinessHourFragment } from '../organisms/SpecificBusinessHours.graphql'\n\nexport const CreateSpecificBusinessHour = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`\n\nexport const DeleteSpecificBusinessHour = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n","import { isoDate } from '@speedlo/graphql'\nimport { types } from 'mobx-state-tree'\n\nimport {\n  GCreateSpecificBusinessHour,\n  GDeleteSpecificBusinessHour,\n} from '../../../graph/types'\nimport { formatTime } from '../../../helpers/formats'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  CreateSpecificBusinessHour,\n  DeleteSpecificBusinessHour,\n} from './BusinessHoursModel.graphql'\n\nexport enum ESpecificHourMode {\n  TIMESPAN = 'TIMESPAN',\n  FULLDAY = 'FULLDAY',\n}\n\nexport interface ISpecificFormData {\n  date: Date\n  openAt: Date\n  closeAt: Date\n  note: string\n}\n\nconst byIdPredicate = RM.complement(RM.propEq('id'))\n\nexport const BusinessHoursModel = BaseModel.named('BusinessHours')\n  .props({\n    specificMode: types.optional(\n      types.enumeration(['TIMESPAN', 'FULLDAY']),\n      ESpecificHourMode.TIMESPAN,\n    ),\n  })\n  .actions(self => ({\n    changeSpecificMode(mode: ESpecificHourMode) {\n      self.specificMode = mode\n    },\n    submitSpecificHour(values: ISpecificFormData) {\n      const variables: GCreateSpecificBusinessHour.Variables = {\n        input: {\n          companyBranch: self.root.settings.branchId,\n          specificDate: isoDate(values.date),\n          closed: self.specificMode === ESpecificHourMode.FULLDAY,\n          openAt: values.openAt && formatTime(values.openAt),\n          closeAt: values.closeAt && formatTime(values.closeAt),\n          closedNote: values.note,\n        },\n      }\n      self.client.mutate<GCreateSpecificBusinessHour.Mutation>({\n        mutation: CreateSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.concat(\n                  mutationResult.data.result,\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n    deleteSpecificHour(businessHourId: ID) {\n      const variables: GDeleteSpecificBusinessHour.Variables = {\n        id: businessHourId,\n      }\n      self.client.mutate({\n        mutation: DeleteSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.filter(\n                  byIdPredicate(mutationResult.data.result.id),\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n  }))\n","import gql from 'graphql-tag'\n\nimport { MenuCategoryFormFragment } from '../organisms/CategoryForm.graphql'\n\nexport const SortMenuCategoryMutation = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport const MenuCategoryCreateMutation = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport const MenuCategoryUpdateMutation = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...GMenuCategoryForm\n    }\n  }\n  ${MenuCategoryFormFragment}\n`\n\nexport const MenuCategoryVisibility = gql`\n  mutation GMenuCategoryVisibility($categoryId: ID!, $visible: Boolean!) {\n    updateWareCategory(id: $categoryId, wareCategory: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport const MenuCategoryDeleteMutation = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n","import { LocationDescriptor } from 'history'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport { WareCategoryTypeEnum } from '../../../graph/generated'\nimport {\n  GMenuCategoryCreate,\n  GMenuCategoryDelete,\n  GMenuCategoryUpdate,\n  GSortMenuCategory,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TCategoryFormValues } from '../organisms/CategoryFormLoader'\nimport { CategoryListQuery } from '../organisms/CategoryList.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuCategoryCreateMutation,\n  MenuCategoryDeleteMutation,\n  MenuCategoryUpdateMutation,\n  MenuCategoryVisibility,\n  SortMenuCategoryMutation,\n} from './MenuCategoryModel.graphql'\n\nexport const MenuCategoryModel = MenuBaseModel.named('MenuCategory').actions(\n  self => ({\n    async sortCategory(categoryId: ID, offset: number) {\n      const variables: GSortMenuCategory.Variables = {\n        categoryId,\n        offset,\n      }\n      const result = await self.client.mutate({\n        mutation: SortMenuCategoryMutation,\n        variables,\n      })\n      return Boolean(result.data && result.data.success)\n    },\n    changeVisibility(categoryId: ID, visible: boolean) {\n      self.client.mutate({\n        mutation: MenuCategoryVisibility,\n        variables: { categoryId, visible },\n        optimisticResponse: {\n          updateRecipe: {\n            __typename: 'Recipe',\n            id: categoryId,\n            visible,\n          },\n        },\n      })\n    },\n    createCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryCreate.Variables = {\n        input: {\n          companyBranch: self.branchId,\n          wareCategoryType: categoryType,\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryCreateMutation,\n          variables,\n          refetchQueries: [\n            {\n              query: CategoryListQuery,\n              variables: {\n                branchId: self.branchId,\n                categoryType,\n              },\n            },\n          ],\n        }),\n      )\n    },\n    async updateCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryUpdate.Variables = {\n        categoryId: formValues.id,\n        input: {\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteCategory(categoryId: ID, categoryType: WareCategoryTypeEnum) {\n      const variables: GMenuCategoryDelete.Variables = {\n        categoryId,\n      }\n      await self.client.mutate({\n        mutation: MenuCategoryDeleteMutation,\n        variables,\n        refetchQueries: [\n          {\n            query: CategoryListQuery,\n            variables: {\n              branchId: self.branchId,\n              categoryType,\n            },\n          },\n        ],\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(\n  formValues: TCategoryFormValues,\n  categoryType: WareCategoryTypeEnum,\n) {\n  return Object.assign({\n    nameLabel: formValues.nameLabel,\n    internalNoteLabel: formValues.internalNoteLabel,\n    enabled: formValues.visible,\n    pictogram: formValues.pictogram,\n    recipes: formValues.recipes.map(RM.prop('id')),\n  })\n}\n\nexport const getCategoryRoute = (\n  recipeId: ID,\n  categoryType: WareCategoryTypeEnum,\n): LocationDescriptor => ({\n  pathname: recipeId,\n  state: { categoryType },\n})\n","import numeral from 'numeral'\n\nexport async function changeNumeralLocale(lang: string) {\n  if (lang === 'en') {\n    numeral.locale(lang)\n    return\n  }\n  await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"numeral-[index]\" */\n    `numeral/locales/${lang}`\n  )\n  numeral.locale(lang)\n}\n\nconst numberRx = /[\\d\\.,\\s]+/\n\nexport function validateNumber(input: string) {\n  return numberRx.test(input)\n}\n","import gql from 'graphql-tag'\n\nexport const CreateFinancialReport = gql`\n  mutation GCreateFinancialReport($companyBranchId: ID!) {\n    result: createFinancialReport(companyBranchId: $companyBranchId) {\n      id\n    }\n  }\n`\n","import moment from 'moment'\n\nexport async function changeMomentLocale(lang: string) {\n  if (lang === 'en') {\n    moment.locale(lang)\n    return\n  }\n  const locale = await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"moment-[index]\" */\n    `moment/locale/${lang}`\n  )\n  moment.updateLocale(lang, locale)\n}\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport * as detector from 'locales-detector'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport Pacman from './atoms/Pacman'\nimport { useRoot } from './atoms/RootProvider'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\nimport { changeMomentLocale } from './locale/moment'\nimport { changeNumeralLocale } from './locale/numeral'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC = ({ children }) => {\n  const { user } = useRoot()\n  return useObserver(\n    () =>\n      user.language ? (\n        <I18nProvider language={user.language} i18n={i18n}>\n          {React.Children.only(children)}\n        </I18nProvider>\n      ) : (\n        <Pacman />\n      ),\n  )\n}\n\nexport function detectLanguage() {\n  const resolver = new detector.LocaleResolver(\n    [new detector.NavigatorDetector()],\n    [new detector.LanguageOnlyTransformer()],\n  )\n  const languages = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nexport async function changeLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await Promise.all([\n    loadCatalog(lang),\n    changeNumeralLocale(lang),\n    changeMomentLocale(lang),\n  ])\n  i18n.activate(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n  persistenceKey: 'admin@local',\n  pageTitleSuffix: 'LOCAL',\n  sentryDSN: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'admin@dev',\n    pageTitleSuffix: 'DEV',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'admin@prod',\n    pageTitleSuffix: 'Speɘdlo',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GSpecificBusinessHours } from '../../../graph/types'\n\nexport const SpecificBusinessHourFragment = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const QuerySpecificBusinessHours = buildQuery<\n  GSpecificBusinessHours.Query,\n  GSpecificBusinessHours.Variables\n>(gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`)\n","import gql from 'graphql-tag'\n\nimport { MenuRecipeFragment } from '../models/MenuRecipeModel.graphql'\n\nexport const MenuCategoryFormFragment = gql`\n  fragment GMenuCategoryForm on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    pictogram\n    recipes {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuCategoryFormQuery = gql`\n  query GMenuCategoryForm($categoryId: ID!) {\n    wareCategory(id: $categoryId) {\n      ...GMenuCategoryForm\n    }\n  }\n  ${MenuCategoryFormFragment}\n`\n","import gql from 'graphql-tag'\n\nexport const GeoPointFragment = gql`\n  fragment GGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n","import gql from 'graphql-tag'\n\nimport { GeoPointFragment } from './GeoPointFragment.graphql'\n\nexport const CompanyBranchFragment = gql`\n  fragment GCompanyBranch on CompanyBranch {\n    id\n    name\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    gps {\n      ...GGeoPoint\n    }\n    brand {\n      id\n      name\n    }\n  }\n  ${GeoPointFragment}\n`\n","import gql from 'graphql-tag'\n\nexport const EmailFragment = gql`\n  fragment GEmail on Email {\n    email\n    description\n    default\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const PhoneFragment = gql`\n  fragment GPhone on Phone {\n    phone\n    description\n    default\n  }\n`\n","import gql from 'graphql-tag'\n\nimport { EmailFragment } from './EmailFragment.graphql'\nimport { PhoneFragment } from './PhoneFragment.graphql'\n\nexport const CustomerFragment = gql`\n  fragment GCustomer on JsonCustomer {\n    firstName\n    lastName\n    defaultEmail {\n      ...GEmail\n    }\n    defaultPhone {\n      ...GPhone\n    }\n  }\n  ${EmailFragment}\n  ${PhoneFragment}\n`\n","import gql from 'graphql-tag'\n\nexport const PriceFragment = gql`\n  fragment GPrice on PriceConverted {\n    value\n  }\n`\n","export { CompanyBranchFragment } from './CompanyBranchFragment.graphql'\nexport { CustomerFragment } from './CustomerFragment.graphql'\nexport { EmailFragment } from './EmailFragment.graphql'\nexport { GeoPointFragment } from './GeoPointFragment.graphql'\nexport { PhoneFragment } from './PhoneFragment.graphql'\nexport { PriceFragment } from './PriceFragment.graphql'\n","import { addSeconds, differenceInMilliseconds } from 'date-fns'\nimport { Component } from 'react'\n\ninterface IRenderProps {\n  isActive: boolean\n  nextLoop(): void\n}\n\ninterface IProps {\n  intervalSec: number\n  enabled?: boolean\n  render(props: IRenderProps): ReactNode\n}\n\ninterface IState {\n  isActive: boolean\n  nextTime: Date\n}\n\nexport class IntervalRender extends Component<IProps, IState> {\n  state: IState = { isActive: false, nextTime: this.getNextTime() }\n  timer = 0\n  componentDidMount() {\n    this.executeTimer()\n  }\n  componentDidUpdate() {\n    this.executeTimer()\n  }\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer)\n    }\n  }\n  getNextTime() {\n    return addSeconds(new Date(), this.props.intervalSec)\n  }\n  executeTimer = () => {\n    if (this.timer) {\n      clearTimeout(this.timer)\n      this.timer = 0\n    }\n    if (this.props.enabled === false) {\n      return\n    }\n    const timeMs = differenceInMilliseconds(this.state.nextTime, new Date())\n    // @ts-ignore (setTimeout returning NodeJS.Timer) for some weird reason\n    this.timer = setTimeout(this.activate, timeMs)\n  }\n  activate = () => {\n    if (this.props.enabled !== false) {\n      this.setState({\n        isActive: true,\n        nextTime: this.getNextTime(),\n      })\n    }\n  }\n  deactivate = () => {\n    this.setState({ isActive: false })\n    this.executeTimer()\n  }\n  render() {\n    const { isActive } = this.state\n    return this.props.render({\n      isActive,\n      nextLoop: this.deactivate,\n    })\n  }\n}\n","import React from 'react'\nimport Sound from 'react-sound'\n\nimport { logMain } from '../helpers/logger'\nimport { IntervalRender } from './IntervalRender'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {\n  intervalSec: number\n  soundUrl: string\n  shouldPlay?: boolean\n  skipEnableChecks?: boolean\n}\n\nexport const SoundPlayInterval: React.FC<IProps> = ({\n  intervalSec,\n  soundUrl,\n  shouldPlay = true,\n  skipEnableChecks = false,\n}) => (\n  <WithRoot\n    observe={true}\n    render={({ config, user }) => {\n      if (!skipEnableChecks) {\n        if (!config.soundEnabled) {\n          logMain('sound is disabled')\n          return null\n        }\n        if (!user.soundEnabled) {\n          logMain('sound not enabled by user')\n          return null\n        }\n      }\n      logMain('sound play status: %s', shouldPlay)\n      return (\n        <IntervalRender\n          intervalSec={intervalSec}\n          enabled={shouldPlay}\n          render={({ isActive, nextLoop }) => (\n            <Sound\n              url={soundUrl}\n              playStatus={isActive ? 'PLAYING' : 'STOPPED'}\n              onFinishedPlaying={nextLoop}\n              loop={false}\n              autoLoad={true}\n              volume={user.soundVolume}\n            />\n          )}\n        />\n      )\n    }}\n  />\n)\n","module.exports = __webpack_public_path__ + \"static/media/connectionWarning.ac6fe03b.mp3\";","import { GraphQLError } from 'graphql'\nimport Raven from 'raven-js'\nimport { ErrorInfo } from 'react'\nimport { VError } from 'verror'\n\nimport { appConfig } from '../config'\nimport { logSentry } from './logger'\n\nexport const installSentry = (cb: () => void) => {\n  const { sentryDSN } = appConfig\n  if (sentryDSN) {\n    logSentry('enabled with DSN %s', sentryDSN)\n    Raven.config(sentryDSN, {\n      environment: process.env.REACT_APP_STAGE,\n    }).install()\n    Raven.context(cb)\n  } else {\n    cb()\n  }\n}\n\nexport const identifyUser = (userId: string | null) => {\n  Raven.setUserContext({\n    userId,\n  })\n}\n\nexport const reportRenderingError = (error: Error, info: ErrorInfo) => {\n  if (Raven.isSetup()) {\n    Raven.captureException(error, {\n      extra: info,\n    })\n  }\n}\n\nexport const reportFailingQuery = (\n  errors: ReadonlyArray<GraphQLError>,\n  data: object,\n) => {\n  errors.forEach(err => {\n    Raven.captureMessage(err.message, { extra: err })\n  })\n  Raven.captureException(new Error('Failed running a query'), { extra: data })\n}\n\nexport const reportError = (error: Error) => {\n  let extra = {}\n  if (error instanceof VError) {\n    extra = {\n      cause: VError.cause(error),\n      ...VError.info(error),\n    }\n  }\n  Raven.captureException(error, { extra })\n  return error\n}\n","import { ISetDidChange, Lambda, observable } from 'mobx'\nimport { getParent, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { scroller } from 'react-scroll'\n\nimport { OrderStateCategoryEnum } from '../../../graph/generated'\nimport { GOrderList } from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TOrderModel } from './OrderModel'\n\nexport const OrderListModel = BaseModel.named('OrderList')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    collapsedCategories: types.optional(types.array(types.string), [\n      OrderStateCategoryEnum.Finished,\n    ]),\n  })\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length ? Array.from(self.branches) : []\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n    get isSingleBranchSelected() {\n      return self.branches.length === 1\n    },\n    get firstBranchId() {\n      if (self.branches.length === 1) {\n        return self.branches[0]\n      }\n      return null\n    },\n    get orderMap() {\n      return getParent<TOrderModel>(self).map\n    },\n  }))\n  .actions(self => ({\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    panMapToOrder(order: GOrderList.Orders) {\n      self.orderMap.panToOrder(order.id)\n    },\n  }))\n  .extend(self => {\n    const detailOpen = observable.set<ID>()\n\n    return {\n      views: {\n        isOrderDetailOpen(orderId: ID) {\n          return detailOpen.has(orderId)\n        },\n        isCategoryCollapsed(categoryCode: OrderStateCategoryEnum) {\n          return self.collapsedCategories.includes(categoryCode)\n        },\n      },\n      actions: {\n        toggleOrderDetail(orderId: ID) {\n          if (detailOpen.has(orderId)) {\n            detailOpen.delete(orderId)\n          } else {\n            detailOpen.add(orderId)\n          }\n        },\n        toggleCategoryCollapse(category: OrderStateCategoryEnum) {\n          const index = self.collapsedCategories.indexOf(category)\n          if (index >= 0) {\n            self.collapsedCategories.splice(index, 1)\n          } else {\n            self.collapsedCategories.push(category)\n          }\n        },\n        focusOrderDetail(orderId: ID) {\n          if (!detailOpen.has(orderId)) {\n            detailOpen.add(orderId)\n          }\n          setImmediate(() => {\n            scroller.scrollTo(`order-${orderId}`, {\n              smooth: 'easeInOutQuart',\n              containerId: 'order-list',\n              absolute: true,\n              offset: -140,\n            })\n          })\n        },\n        observerOrderDetail: detailOpen.observe.bind(detailOpen) as (\n          listener: (changes: ISetDidChange<ID>) => void,\n        ) => Lambda,\n      },\n    }\n  })\n\nexport interface TOrderListModel extends Instance<typeof OrderListModel> {}\nexport interface TOrderListModelProps\n  extends SnapshotIn<typeof OrderListModel> {}\n","import { computeDestinationPoint, getBounds } from 'geolib'\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n\ninterface IGeneratePolygonInput {\n  center: GeoPoint\n  metersRadius?: number\n  pointsCount?: number\n}\n\nexport const generatePolygon = ({\n  center,\n  metersRadius = 1000,\n  pointsCount = 15,\n}: IGeneratePolygonInput) => {\n  return new Array(pointsCount).fill(null).map((_, idx) => {\n    const degree = 360 / pointsCount * idx\n    return computeDestinationPoint(center, metersRadius, degree)\n  })\n}\n\nexport const getBoundsOfPoints = (points: GeoPoint[]) => {\n  const bounds = getBounds(points)\n  if (!bounds) {\n    return null\n  }\n  return new google.maps.LatLngBounds(\n    {\n      lat: bounds.minLat,\n      lng: bounds.minLng,\n    },\n    {\n      lat: bounds.maxLat,\n      lng: bounds.maxLng,\n    },\n  )\n}\n","// @ts-ignore temporary before figuring out a logging solution that works in prod\nwindow.localStorage.setItem('debug', '*,-sockjs*')\n","import { ErrorResponse, onError } from 'apollo-link-error'\n\nimport { reportFailingQuery } from '../helpers/sentry'\n\nexport const errorHandler = ({ graphQLErrors, operation }: ErrorResponse) => {\n  if (graphQLErrors) {\n    reportFailingQuery(graphQLErrors, {\n      query: operation.operationName,\n      variables: operation.variables,\n    })\n  }\n}\n\nexport const createErrorLink = () => onError(errorHandler)\n\nexport interface IQueryError extends Error {\n  showToUser: boolean\n}\n\nexport type TQueryErrors = IQueryError[] | null\n\n// tslint:disable-next-line:no-any\nexport const getQueryErrors = async (query: Promise<any>) => {\n  const result = await query\n  if (result && result.errors) {\n    return result.errors as IQueryError[]\n  }\n  return null\n}\n","var map = {\n\t\"./af\": [\n\t\t577,\n\t\t4\n\t],\n\t\"./af.js\": [\n\t\t577,\n\t\t4\n\t],\n\t\"./ar\": [\n\t\t584,\n\t\t27\n\t],\n\t\"./ar-dz\": [\n\t\t578,\n\t\t60\n\t],\n\t\"./ar-dz.js\": [\n\t\t578,\n\t\t60\n\t],\n\t\"./ar-kw\": [\n\t\t579,\n\t\t94\n\t],\n\t\"./ar-kw.js\": [\n\t\t579,\n\t\t94\n\t],\n\t\"./ar-ly\": [\n\t\t580,\n\t\t105\n\t],\n\t\"./ar-ly.js\": [\n\t\t580,\n\t\t105\n\t],\n\t\"./ar-ma\": [\n\t\t581,\n\t\t116\n\t],\n\t\"./ar-ma.js\": [\n\t\t581,\n\t\t116\n\t],\n\t\"./ar-sa\": [\n\t\t582,\n\t\t5\n\t],\n\t\"./ar-sa.js\": [\n\t\t582,\n\t\t5\n\t],\n\t\"./ar-tn\": [\n\t\t583,\n\t\t16\n\t],\n\t\"./ar-tn.js\": [\n\t\t583,\n\t\t16\n\t],\n\t\"./ar.js\": [\n\t\t584,\n\t\t27\n\t],\n\t\"./az\": [\n\t\t585,\n\t\t38\n\t],\n\t\"./az.js\": [\n\t\t585,\n\t\t38\n\t],\n\t\"./be\": [\n\t\t586,\n\t\t49\n\t],\n\t\"./be.js\": [\n\t\t586,\n\t\t49\n\t],\n\t\"./bg\": [\n\t\t587,\n\t\t61\n\t],\n\t\"./bg.js\": [\n\t\t587,\n\t\t61\n\t],\n\t\"./bm\": [\n\t\t588,\n\t\t72\n\t],\n\t\"./bm.js\": [\n\t\t588,\n\t\t72\n\t],\n\t\"./bn\": [\n\t\t589,\n\t\t83\n\t],\n\t\"./bn.js\": [\n\t\t589,\n\t\t83\n\t],\n\t\"./bo\": [\n\t\t590,\n\t\t87\n\t],\n\t\"./bo.js\": [\n\t\t590,\n\t\t87\n\t],\n\t\"./br\": [\n\t\t591,\n\t\t88\n\t],\n\t\"./br.js\": [\n\t\t591,\n\t\t88\n\t],\n\t\"./bs\": [\n\t\t592,\n\t\t89\n\t],\n\t\"./bs.js\": [\n\t\t592,\n\t\t89\n\t],\n\t\"./ca\": [\n\t\t593,\n\t\t90\n\t],\n\t\"./ca.js\": [\n\t\t593,\n\t\t90\n\t],\n\t\"./cs\": [\n\t\t594,\n\t\t91\n\t],\n\t\"./cs.js\": [\n\t\t594,\n\t\t91\n\t],\n\t\"./cv\": [\n\t\t595,\n\t\t92\n\t],\n\t\"./cv.js\": [\n\t\t595,\n\t\t92\n\t],\n\t\"./cy\": [\n\t\t596,\n\t\t93\n\t],\n\t\"./cy.js\": [\n\t\t596,\n\t\t93\n\t],\n\t\"./da\": [\n\t\t597,\n\t\t95\n\t],\n\t\"./da.js\": [\n\t\t597,\n\t\t95\n\t],\n\t\"./de\": [\n\t\t600,\n\t\t98\n\t],\n\t\"./de-at\": [\n\t\t598,\n\t\t96\n\t],\n\t\"./de-at.js\": [\n\t\t598,\n\t\t96\n\t],\n\t\"./de-ch\": [\n\t\t599,\n\t\t97\n\t],\n\t\"./de-ch.js\": [\n\t\t599,\n\t\t97\n\t],\n\t\"./de.js\": [\n\t\t600,\n\t\t98\n\t],\n\t\"./dv\": [\n\t\t601,\n\t\t99\n\t],\n\t\"./dv.js\": [\n\t\t601,\n\t\t99\n\t],\n\t\"./el\": [\n\t\t602,\n\t\t100\n\t],\n\t\"./el.js\": [\n\t\t602,\n\t\t100\n\t],\n\t\"./en-au\": [\n\t\t603,\n\t\t101\n\t],\n\t\"./en-au.js\": [\n\t\t603,\n\t\t101\n\t],\n\t\"./en-ca\": [\n\t\t604,\n\t\t102\n\t],\n\t\"./en-ca.js\": [\n\t\t604,\n\t\t102\n\t],\n\t\"./en-gb\": [\n\t\t605,\n\t\t103\n\t],\n\t\"./en-gb.js\": [\n\t\t605,\n\t\t103\n\t],\n\t\"./en-ie\": [\n\t\t606,\n\t\t104\n\t],\n\t\"./en-ie.js\": [\n\t\t606,\n\t\t104\n\t],\n\t\"./en-il\": [\n\t\t607,\n\t\t106\n\t],\n\t\"./en-il.js\": [\n\t\t607,\n\t\t106\n\t],\n\t\"./en-nz\": [\n\t\t608,\n\t\t107\n\t],\n\t\"./en-nz.js\": [\n\t\t608,\n\t\t107\n\t],\n\t\"./eo\": [\n\t\t609,\n\t\t108\n\t],\n\t\"./eo.js\": [\n\t\t609,\n\t\t108\n\t],\n\t\"./es\": [\n\t\t612,\n\t\t111\n\t],\n\t\"./es-do\": [\n\t\t610,\n\t\t109\n\t],\n\t\"./es-do.js\": [\n\t\t610,\n\t\t109\n\t],\n\t\"./es-us\": [\n\t\t611,\n\t\t110\n\t],\n\t\"./es-us.js\": [\n\t\t611,\n\t\t110\n\t],\n\t\"./es.js\": [\n\t\t612,\n\t\t111\n\t],\n\t\"./et\": [\n\t\t613,\n\t\t112\n\t],\n\t\"./et.js\": [\n\t\t613,\n\t\t112\n\t],\n\t\"./eu\": [\n\t\t614,\n\t\t113\n\t],\n\t\"./eu.js\": [\n\t\t614,\n\t\t113\n\t],\n\t\"./fa\": [\n\t\t615,\n\t\t114\n\t],\n\t\"./fa.js\": [\n\t\t615,\n\t\t114\n\t],\n\t\"./fi\": [\n\t\t616,\n\t\t115\n\t],\n\t\"./fi.js\": [\n\t\t616,\n\t\t115\n\t],\n\t\"./fo\": [\n\t\t617,\n\t\t117\n\t],\n\t\"./fo.js\": [\n\t\t617,\n\t\t117\n\t],\n\t\"./fr\": [\n\t\t620,\n\t\t120\n\t],\n\t\"./fr-ca\": [\n\t\t618,\n\t\t118\n\t],\n\t\"./fr-ca.js\": [\n\t\t618,\n\t\t118\n\t],\n\t\"./fr-ch\": [\n\t\t619,\n\t\t119\n\t],\n\t\"./fr-ch.js\": [\n\t\t619,\n\t\t119\n\t],\n\t\"./fr.js\": [\n\t\t620,\n\t\t120\n\t],\n\t\"./fy\": [\n\t\t621,\n\t\t121\n\t],\n\t\"./fy.js\": [\n\t\t621,\n\t\t121\n\t],\n\t\"./gd\": [\n\t\t622,\n\t\t122\n\t],\n\t\"./gd.js\": [\n\t\t622,\n\t\t122\n\t],\n\t\"./gl\": [\n\t\t623,\n\t\t123\n\t],\n\t\"./gl.js\": [\n\t\t623,\n\t\t123\n\t],\n\t\"./gom-latn\": [\n\t\t624,\n\t\t124\n\t],\n\t\"./gom-latn.js\": [\n\t\t624,\n\t\t124\n\t],\n\t\"./gu\": [\n\t\t625,\n\t\t125\n\t],\n\t\"./gu.js\": [\n\t\t625,\n\t\t125\n\t],\n\t\"./he\": [\n\t\t626,\n\t\t126\n\t],\n\t\"./he.js\": [\n\t\t626,\n\t\t126\n\t],\n\t\"./hi\": [\n\t\t627,\n\t\t6\n\t],\n\t\"./hi.js\": [\n\t\t627,\n\t\t6\n\t],\n\t\"./hr\": [\n\t\t628,\n\t\t7\n\t],\n\t\"./hr.js\": [\n\t\t628,\n\t\t7\n\t],\n\t\"./hu\": [\n\t\t629,\n\t\t8\n\t],\n\t\"./hu.js\": [\n\t\t629,\n\t\t8\n\t],\n\t\"./hy-am\": [\n\t\t630,\n\t\t9\n\t],\n\t\"./hy-am.js\": [\n\t\t630,\n\t\t9\n\t],\n\t\"./id\": [\n\t\t631,\n\t\t10\n\t],\n\t\"./id.js\": [\n\t\t631,\n\t\t10\n\t],\n\t\"./is\": [\n\t\t632,\n\t\t11\n\t],\n\t\"./is.js\": [\n\t\t632,\n\t\t11\n\t],\n\t\"./it\": [\n\t\t633,\n\t\t12\n\t],\n\t\"./it.js\": [\n\t\t633,\n\t\t12\n\t],\n\t\"./ja\": [\n\t\t634,\n\t\t13\n\t],\n\t\"./ja.js\": [\n\t\t634,\n\t\t13\n\t],\n\t\"./jv\": [\n\t\t635,\n\t\t14\n\t],\n\t\"./jv.js\": [\n\t\t635,\n\t\t14\n\t],\n\t\"./ka\": [\n\t\t636,\n\t\t15\n\t],\n\t\"./ka.js\": [\n\t\t636,\n\t\t15\n\t],\n\t\"./kk\": [\n\t\t637,\n\t\t17\n\t],\n\t\"./kk.js\": [\n\t\t637,\n\t\t17\n\t],\n\t\"./km\": [\n\t\t638,\n\t\t18\n\t],\n\t\"./km.js\": [\n\t\t638,\n\t\t18\n\t],\n\t\"./kn\": [\n\t\t639,\n\t\t19\n\t],\n\t\"./kn.js\": [\n\t\t639,\n\t\t19\n\t],\n\t\"./ko\": [\n\t\t640,\n\t\t20\n\t],\n\t\"./ko.js\": [\n\t\t640,\n\t\t20\n\t],\n\t\"./ky\": [\n\t\t641,\n\t\t21\n\t],\n\t\"./ky.js\": [\n\t\t641,\n\t\t21\n\t],\n\t\"./lb\": [\n\t\t642,\n\t\t22\n\t],\n\t\"./lb.js\": [\n\t\t642,\n\t\t22\n\t],\n\t\"./lo\": [\n\t\t643,\n\t\t23\n\t],\n\t\"./lo.js\": [\n\t\t643,\n\t\t23\n\t],\n\t\"./lt\": [\n\t\t644,\n\t\t24\n\t],\n\t\"./lt.js\": [\n\t\t644,\n\t\t24\n\t],\n\t\"./lv\": [\n\t\t645,\n\t\t25\n\t],\n\t\"./lv.js\": [\n\t\t645,\n\t\t25\n\t],\n\t\"./me\": [\n\t\t646,\n\t\t26\n\t],\n\t\"./me.js\": [\n\t\t646,\n\t\t26\n\t],\n\t\"./mi\": [\n\t\t647,\n\t\t28\n\t],\n\t\"./mi.js\": [\n\t\t647,\n\t\t28\n\t],\n\t\"./mk\": [\n\t\t648,\n\t\t29\n\t],\n\t\"./mk.js\": [\n\t\t648,\n\t\t29\n\t],\n\t\"./ml\": [\n\t\t649,\n\t\t30\n\t],\n\t\"./ml.js\": [\n\t\t649,\n\t\t30\n\t],\n\t\"./mn\": [\n\t\t650,\n\t\t31\n\t],\n\t\"./mn.js\": [\n\t\t650,\n\t\t31\n\t],\n\t\"./mr\": [\n\t\t651,\n\t\t32\n\t],\n\t\"./mr.js\": [\n\t\t651,\n\t\t32\n\t],\n\t\"./ms\": [\n\t\t653,\n\t\t34\n\t],\n\t\"./ms-my\": [\n\t\t652,\n\t\t33\n\t],\n\t\"./ms-my.js\": [\n\t\t652,\n\t\t33\n\t],\n\t\"./ms.js\": [\n\t\t653,\n\t\t34\n\t],\n\t\"./mt\": [\n\t\t654,\n\t\t35\n\t],\n\t\"./mt.js\": [\n\t\t654,\n\t\t35\n\t],\n\t\"./my\": [\n\t\t655,\n\t\t36\n\t],\n\t\"./my.js\": [\n\t\t655,\n\t\t36\n\t],\n\t\"./nb\": [\n\t\t656,\n\t\t37\n\t],\n\t\"./nb.js\": [\n\t\t656,\n\t\t37\n\t],\n\t\"./ne\": [\n\t\t657,\n\t\t39\n\t],\n\t\"./ne.js\": [\n\t\t657,\n\t\t39\n\t],\n\t\"./nl\": [\n\t\t659,\n\t\t41\n\t],\n\t\"./nl-be\": [\n\t\t658,\n\t\t40\n\t],\n\t\"./nl-be.js\": [\n\t\t658,\n\t\t40\n\t],\n\t\"./nl.js\": [\n\t\t659,\n\t\t41\n\t],\n\t\"./nn\": [\n\t\t660,\n\t\t42\n\t],\n\t\"./nn.js\": [\n\t\t660,\n\t\t42\n\t],\n\t\"./pa-in\": [\n\t\t661,\n\t\t43\n\t],\n\t\"./pa-in.js\": [\n\t\t661,\n\t\t43\n\t],\n\t\"./pl\": [\n\t\t662,\n\t\t44\n\t],\n\t\"./pl.js\": [\n\t\t662,\n\t\t44\n\t],\n\t\"./pt\": [\n\t\t664,\n\t\t46\n\t],\n\t\"./pt-br\": [\n\t\t663,\n\t\t45\n\t],\n\t\"./pt-br.js\": [\n\t\t663,\n\t\t45\n\t],\n\t\"./pt.js\": [\n\t\t664,\n\t\t46\n\t],\n\t\"./ro\": [\n\t\t665,\n\t\t47\n\t],\n\t\"./ro.js\": [\n\t\t665,\n\t\t47\n\t],\n\t\"./ru\": [\n\t\t666,\n\t\t48\n\t],\n\t\"./ru.js\": [\n\t\t666,\n\t\t48\n\t],\n\t\"./sd\": [\n\t\t667,\n\t\t50\n\t],\n\t\"./sd.js\": [\n\t\t667,\n\t\t50\n\t],\n\t\"./se\": [\n\t\t668,\n\t\t51\n\t],\n\t\"./se.js\": [\n\t\t668,\n\t\t51\n\t],\n\t\"./si\": [\n\t\t669,\n\t\t52\n\t],\n\t\"./si.js\": [\n\t\t669,\n\t\t52\n\t],\n\t\"./sk\": [\n\t\t670,\n\t\t53\n\t],\n\t\"./sk.js\": [\n\t\t670,\n\t\t53\n\t],\n\t\"./sl\": [\n\t\t671,\n\t\t54\n\t],\n\t\"./sl.js\": [\n\t\t671,\n\t\t54\n\t],\n\t\"./sq\": [\n\t\t672,\n\t\t55\n\t],\n\t\"./sq.js\": [\n\t\t672,\n\t\t55\n\t],\n\t\"./sr\": [\n\t\t674,\n\t\t57\n\t],\n\t\"./sr-cyrl\": [\n\t\t673,\n\t\t56\n\t],\n\t\"./sr-cyrl.js\": [\n\t\t673,\n\t\t56\n\t],\n\t\"./sr.js\": [\n\t\t674,\n\t\t57\n\t],\n\t\"./ss\": [\n\t\t675,\n\t\t58\n\t],\n\t\"./ss.js\": [\n\t\t675,\n\t\t58\n\t],\n\t\"./sv\": [\n\t\t676,\n\t\t59\n\t],\n\t\"./sv.js\": [\n\t\t676,\n\t\t59\n\t],\n\t\"./sw\": [\n\t\t677,\n\t\t62\n\t],\n\t\"./sw.js\": [\n\t\t677,\n\t\t62\n\t],\n\t\"./ta\": [\n\t\t678,\n\t\t63\n\t],\n\t\"./ta.js\": [\n\t\t678,\n\t\t63\n\t],\n\t\"./te\": [\n\t\t679,\n\t\t64\n\t],\n\t\"./te.js\": [\n\t\t679,\n\t\t64\n\t],\n\t\"./tet\": [\n\t\t680,\n\t\t65\n\t],\n\t\"./tet.js\": [\n\t\t680,\n\t\t65\n\t],\n\t\"./tg\": [\n\t\t681,\n\t\t66\n\t],\n\t\"./tg.js\": [\n\t\t681,\n\t\t66\n\t],\n\t\"./th\": [\n\t\t682,\n\t\t67\n\t],\n\t\"./th.js\": [\n\t\t682,\n\t\t67\n\t],\n\t\"./tl-ph\": [\n\t\t683,\n\t\t68\n\t],\n\t\"./tl-ph.js\": [\n\t\t683,\n\t\t68\n\t],\n\t\"./tlh\": [\n\t\t684,\n\t\t69\n\t],\n\t\"./tlh.js\": [\n\t\t684,\n\t\t69\n\t],\n\t\"./tr\": [\n\t\t685,\n\t\t70\n\t],\n\t\"./tr.js\": [\n\t\t685,\n\t\t70\n\t],\n\t\"./tzl\": [\n\t\t686,\n\t\t71\n\t],\n\t\"./tzl.js\": [\n\t\t686,\n\t\t71\n\t],\n\t\"./tzm\": [\n\t\t688,\n\t\t74\n\t],\n\t\"./tzm-latn\": [\n\t\t687,\n\t\t73\n\t],\n\t\"./tzm-latn.js\": [\n\t\t687,\n\t\t73\n\t],\n\t\"./tzm.js\": [\n\t\t688,\n\t\t74\n\t],\n\t\"./ug-cn\": [\n\t\t689,\n\t\t75\n\t],\n\t\"./ug-cn.js\": [\n\t\t689,\n\t\t75\n\t],\n\t\"./uk\": [\n\t\t690,\n\t\t76\n\t],\n\t\"./uk.js\": [\n\t\t690,\n\t\t76\n\t],\n\t\"./ur\": [\n\t\t691,\n\t\t77\n\t],\n\t\"./ur.js\": [\n\t\t691,\n\t\t77\n\t],\n\t\"./uz\": [\n\t\t693,\n\t\t79\n\t],\n\t\"./uz-latn\": [\n\t\t692,\n\t\t78\n\t],\n\t\"./uz-latn.js\": [\n\t\t692,\n\t\t78\n\t],\n\t\"./uz.js\": [\n\t\t693,\n\t\t79\n\t],\n\t\"./vi\": [\n\t\t694,\n\t\t80\n\t],\n\t\"./vi.js\": [\n\t\t694,\n\t\t80\n\t],\n\t\"./x-pseudo\": [\n\t\t695,\n\t\t81\n\t],\n\t\"./x-pseudo.js\": [\n\t\t695,\n\t\t81\n\t],\n\t\"./yo\": [\n\t\t696,\n\t\t82\n\t],\n\t\"./yo.js\": [\n\t\t696,\n\t\t82\n\t],\n\t\"./zh-cn\": [\n\t\t697,\n\t\t84\n\t],\n\t\"./zh-cn.js\": [\n\t\t697,\n\t\t84\n\t],\n\t\"./zh-hk\": [\n\t\t698,\n\t\t85\n\t],\n\t\"./zh-hk.js\": [\n\t\t698,\n\t\t85\n\t],\n\t\"./zh-tw\": [\n\t\t699,\n\t\t86\n\t],\n\t\"./zh-tw.js\": [\n\t\t699,\n\t\t86\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6139;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./bg\": [\n\t\t700,\n\t\t127\n\t],\n\t\"./bg.js\": [\n\t\t700,\n\t\t127\n\t],\n\t\"./chs\": [\n\t\t701,\n\t\t133\n\t],\n\t\"./chs.js\": [\n\t\t701,\n\t\t133\n\t],\n\t\"./cs\": [\n\t\t702,\n\t\t144\n\t],\n\t\"./cs.js\": [\n\t\t702,\n\t\t144\n\t],\n\t\"./da-dk\": [\n\t\t703,\n\t\t155\n\t],\n\t\"./da-dk.js\": [\n\t\t703,\n\t\t155\n\t],\n\t\"./de\": [\n\t\t705,\n\t\t128\n\t],\n\t\"./de-ch\": [\n\t\t704,\n\t\t160\n\t],\n\t\"./de-ch.js\": [\n\t\t704,\n\t\t160\n\t],\n\t\"./de.js\": [\n\t\t705,\n\t\t128\n\t],\n\t\"./en-au\": [\n\t\t706,\n\t\t129\n\t],\n\t\"./en-au.js\": [\n\t\t706,\n\t\t129\n\t],\n\t\"./en-gb\": [\n\t\t707,\n\t\t130\n\t],\n\t\"./en-gb.js\": [\n\t\t707,\n\t\t130\n\t],\n\t\"./en-za\": [\n\t\t708,\n\t\t131\n\t],\n\t\"./en-za.js\": [\n\t\t708,\n\t\t131\n\t],\n\t\"./es\": [\n\t\t710,\n\t\t134\n\t],\n\t\"./es-es\": [\n\t\t709,\n\t\t132\n\t],\n\t\"./es-es.js\": [\n\t\t709,\n\t\t132\n\t],\n\t\"./es.js\": [\n\t\t710,\n\t\t134\n\t],\n\t\"./et\": [\n\t\t711,\n\t\t135\n\t],\n\t\"./et.js\": [\n\t\t711,\n\t\t135\n\t],\n\t\"./fi\": [\n\t\t712,\n\t\t136\n\t],\n\t\"./fi.js\": [\n\t\t712,\n\t\t136\n\t],\n\t\"./fr\": [\n\t\t715,\n\t\t139\n\t],\n\t\"./fr-ca\": [\n\t\t713,\n\t\t137\n\t],\n\t\"./fr-ca.js\": [\n\t\t713,\n\t\t137\n\t],\n\t\"./fr-ch\": [\n\t\t714,\n\t\t138\n\t],\n\t\"./fr-ch.js\": [\n\t\t714,\n\t\t138\n\t],\n\t\"./fr.js\": [\n\t\t715,\n\t\t139\n\t],\n\t\"./hu\": [\n\t\t716,\n\t\t140\n\t],\n\t\"./hu.js\": [\n\t\t716,\n\t\t140\n\t],\n\t\"./it\": [\n\t\t717,\n\t\t141\n\t],\n\t\"./it.js\": [\n\t\t717,\n\t\t141\n\t],\n\t\"./ja\": [\n\t\t718,\n\t\t142\n\t],\n\t\"./ja.js\": [\n\t\t718,\n\t\t142\n\t],\n\t\"./lv\": [\n\t\t719,\n\t\t143\n\t],\n\t\"./lv.js\": [\n\t\t719,\n\t\t143\n\t],\n\t\"./nl-be\": [\n\t\t720,\n\t\t145\n\t],\n\t\"./nl-be.js\": [\n\t\t720,\n\t\t145\n\t],\n\t\"./nl-nl\": [\n\t\t721,\n\t\t146\n\t],\n\t\"./nl-nl.js\": [\n\t\t721,\n\t\t146\n\t],\n\t\"./no\": [\n\t\t722,\n\t\t147\n\t],\n\t\"./no.js\": [\n\t\t722,\n\t\t147\n\t],\n\t\"./pl\": [\n\t\t723,\n\t\t148\n\t],\n\t\"./pl.js\": [\n\t\t723,\n\t\t148\n\t],\n\t\"./pt-br\": [\n\t\t724,\n\t\t149\n\t],\n\t\"./pt-br.js\": [\n\t\t724,\n\t\t149\n\t],\n\t\"./pt-pt\": [\n\t\t725,\n\t\t150\n\t],\n\t\"./pt-pt.js\": [\n\t\t725,\n\t\t150\n\t],\n\t\"./ru\": [\n\t\t727,\n\t\t152\n\t],\n\t\"./ru-ua\": [\n\t\t726,\n\t\t151\n\t],\n\t\"./ru-ua.js\": [\n\t\t726,\n\t\t151\n\t],\n\t\"./ru.js\": [\n\t\t727,\n\t\t152\n\t],\n\t\"./sk\": [\n\t\t728,\n\t\t153\n\t],\n\t\"./sk.js\": [\n\t\t728,\n\t\t153\n\t],\n\t\"./sl\": [\n\t\t729,\n\t\t154\n\t],\n\t\"./sl.js\": [\n\t\t729,\n\t\t154\n\t],\n\t\"./th\": [\n\t\t730,\n\t\t156\n\t],\n\t\"./th.js\": [\n\t\t730,\n\t\t156\n\t],\n\t\"./tr\": [\n\t\t731,\n\t\t157\n\t],\n\t\"./tr.js\": [\n\t\t731,\n\t\t157\n\t],\n\t\"./uk-ua\": [\n\t\t732,\n\t\t158\n\t],\n\t\"./uk-ua.js\": [\n\t\t732,\n\t\t158\n\t],\n\t\"./vi\": [\n\t\t733,\n\t\t159\n\t],\n\t\"./vi.js\": [\n\t\t733,\n\t\t159\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6140;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.po\": [\n\t\t7638,\n\t\t162\n\t],\n\t\"./de/messages.po\": [\n\t\t7639,\n\t\t163\n\t],\n\t\"./en-dev/messages.po\": [\n\t\t7641,\n\t\t165\n\t],\n\t\"./en/messages.po\": [\n\t\t7640,\n\t\t164\n\t],\n\t\"./pl/messages.po\": [\n\t\t7642,\n\t\t166\n\t],\n\t\"./sk/messages.po\": [\n\t\t7643,\n\t\t167\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6141;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t7644,\n\t\t162\n\t],\n\t\"./de/messages.js\": [\n\t\t7645,\n\t\t163\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t7647,\n\t\t165\n\t],\n\t\"./en/messages.js\": [\n\t\t7646,\n\t\t164\n\t],\n\t\"./pl/messages.js\": [\n\t\t7648,\n\t\t166\n\t],\n\t\"./sk/messages.js\": [\n\t\t7649,\n\t\t167\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6142;\nmodule.exports = webpackAsyncContext;","import { createContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const RootContext = createContext<TRootModel | undefined>(undefined)\n","import ActionCable from 'actioncable'\nimport { ApolloLink, Observable, Operation } from 'apollo-link'\nimport { getOperationDefinitionOrDie } from 'apollo-utilities'\nimport { print } from 'graphql/language'\nimport { computed } from 'mobx'\nimport { VError } from 'verror'\n\nimport { appConfig } from '../config'\nimport { TAuthModel } from '../models/AuthModel'\n\nconst getChannelId = () =>\n  Math.round(Date.now() + Math.random() * 100000).toString(16)\n\nexport default function createSubscriptionLink(auth: TAuthModel) {\n  const cableUrl = computed(\n    () => `${appConfig.endpoint}/cable?token=${auth.token}`,\n  )\n\n  let cable\n  const channelName = 'GraphqlChannel'\n  const actionName = 'execute'\n  const connectionParams = {}\n\n  return new ApolloLink(operation => {\n    if (!auth.isAuthenticated) {\n      throw new VError(\n        `Executing operation ${operation.operationName} before authenticated`,\n        { operation },\n      )\n    }\n    if (!cable) {\n      cable = ActionCable.createConsumer(cableUrl.get())\n    }\n    return new Observable(observer => {\n      const channelId = getChannelId()\n\n      const subscription = cable.subscriptions.create(\n        Object.assign(\n          {},\n          {\n            channel: channelName,\n            channelId,\n          },\n          connectionParams,\n        ),\n        {\n          connected() {\n            this.perform(actionName, {\n              query: operation.query ? print(operation.query) : null,\n              variables: operation.variables,\n              // @ts-ignore\n              operationId: operation.operationId,\n              operationName: operation.operationName,\n            })\n          },\n          received(payload: { result: { data: object }; more: boolean }) {\n            if (payload.result.data) {\n              observer.next(payload.result)\n            }\n\n            if (!payload.more) {\n              this.unsubscribe()\n              observer.complete()\n            }\n          },\n        },\n      )\n\n      return subscription\n    })\n  })\n}\n\nexport function isSubscriptionOperation({ query }: Operation) {\n  const { operation } = getOperationDefinitionOrDie(query)\n  return operation === 'subscription'\n}\n","import { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { BatchHttpLink } from 'apollo-link-batch-http'\nimport QueueLink from 'apollo-link-queue'\nimport { RetryLink } from 'apollo-link-retry'\nimport { autorun } from 'mobx'\n\nimport { appConfig } from '../config'\nimport { logGraph } from '../helpers/logger'\nimport { isNetworkOnline } from '../helpers/offline'\nimport { TAuthModel } from '../models/AuthModel'\nimport createAuthLink from './AuthLink'\nimport { createErrorLink } from './errorHandler'\nimport createSubscriptionLink, {\n  isSubscriptionOperation,\n} from './SubscriptionLink'\n\nexport function createApolloClient(auth: TAuthModel) {\n  const cache = new InMemoryCache({\n    dataIdFromObject: (o: { __typename?: string; id?: string }) => {\n      // tslint:disable-next-line triple-equals\n      if (o.__typename != null && o.id != null) {\n        return `${o.__typename}-${o.id}`\n      }\n      return null\n    },\n  })\n\n  const authLink = createAuthLink(auth)\n  const retryLink = createRetryLink()\n  const offlineLink = createOfflineLink()\n  const errorLink = createErrorLink()\n  const httpLink = createHttpLink()\n  const subscriptionLink = createSubscriptionLink(auth)\n\n  const client = new ApolloClient({\n    link: ApolloLink.from([authLink, retryLink, offlineLink, errorLink]).split(\n      isSubscriptionOperation,\n      subscriptionLink,\n      httpLink,\n    ),\n    cache,\n  })\n\n  return client\n}\n\nfunction createHttpLink() {\n  return new BatchHttpLink({\n    uri: `${appConfig.endpoint}/graphql`,\n    credentials: 'same-origin',\n  })\n}\n\nfunction createRetryLink() {\n  return new RetryLink({\n    delay: {\n      initial: 300,\n      max: Infinity,\n      jitter: true,\n    },\n    attempts: {\n      max: 5,\n      retryIf: error => !!error,\n    },\n  })\n}\n\nfunction createOfflineLink() {\n  const offlineLink = new QueueLink()\n  autorun(() => {\n    if (isNetworkOnline()) {\n      logGraph('client is online')\n      offlineLink.open()\n    } else {\n      logGraph('client is offline')\n      offlineLink.close()\n    }\n  })\n  return offlineLink\n}\n","import { ApolloLink, FetchResult, Observable } from 'apollo-link'\nimport { computed } from 'mobx'\nimport VError from 'verror'\n\nimport { TAuthModel } from '../models/AuthModel'\n\nexport default function createAuthLink(auth: TAuthModel) {\n  const headers = computed(() => ({\n    Authorization: `Bearer ${auth.communicationToken}`,\n  }))\n\n  return new ApolloLink((operation, forward) => {\n    if (!auth.canCommunicate) {\n      throw new VError(\n        `Executing operation ${operation.operationName} before authenticated`,\n        { operation },\n      )\n    }\n\n    const context = operation.getContext()\n    operation.setContext({ ...context, headers: headers.get() })\n\n    return new Observable<FetchResult>(observer => {\n      const sub = forward!(operation).subscribe({\n        error: networkError => {\n          if (\n            networkError.result &&\n            networkError.result.code === 'INVALID_TOKEN'\n          ) {\n            auth.invalidate()\n            return\n          }\n          observer.error(networkError)\n        },\n        next: observer.next.bind(observer),\n        complete: observer.complete.bind(observer),\n      })\n      return () => sub.unsubscribe()\n    })\n  })\n}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersistence } from './logger'\n\nconst persistenceKey = appConfig.persistenceKey\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = (snapshot: object) =>\n    localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersistence('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersistence('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersistence('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { getParent, Instance } from 'mobx-state-tree'\n\nimport { IRootEnvironment } from '../../../atoms/RootProvider'\nimport { appConfig } from '../../../config'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TLoginProviderModel } from './LoginProviderModel'\n\nconst getLoginUrl = ({ username, password }: Dictionary<string>) =>\n  `${appConfig.endpoint}/users/token?username=${username}&password=${password}`\n\nexport const PasswordLoginModel = BaseModel.named('PasswordLogin')\n  .volatile(self => ({\n    errorCode: '',\n    errorMessage: '',\n  }))\n  .views(self => ({\n    get hasFailed() {\n      return Boolean(self.errorCode)\n    },\n  }))\n  .actions(self => ({\n    setFailure(code: string, message: string) {\n      self.errorCode = code\n      self.errorMessage = message\n    },\n    setSuccess(token: string, userId: string) {\n      const provider = getParent<TLoginProviderModel>(self)\n      provider.authenticate(token, userId)\n    },\n  }))\n  .actions(self => ({\n    async requestToken(username: string, password: string) {\n      const url = getLoginUrl({ username, password })\n      const fetch: TFetch = window.fetch\n      const response = await fetch(url, {\n        headers: {\n          Accept: 'application/json',\n        },\n      })\n      const payload = await response.json()\n      self.log('received payload %j', payload)\n\n      if (response.status !== 200) {\n        self.setFailure(payload.code, payload.error)\n        self.log('token request failed for username %s', username)\n      } else {\n        self.setSuccess(payload.token, String(payload.userId))\n        self.log(\n          'token request success for username %s [%s]',\n          username,\n          payload.userId,\n        )\n      }\n    },\n  }))\n\nexport const createPasswordLoginModelMock = (\n  overrides = {},\n  env: IRootEnvironment,\n) => PasswordLoginModel.create({ ...overrides }, env)\n\nexport interface TPasswordLoginModel\n  extends Instance<typeof PasswordLoginModel> {}\n","import { getParent, Instance, types } from 'mobx-state-tree'\n\nimport { TAuthModel } from '../../../models/AuthModel'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { PasswordLoginModel } from './PasswordLoginModel'\n\nexport const LoginProviderModel = BaseModel.named('LoginProvider')\n  .props({\n    passwordLogin: types.optional(PasswordLoginModel, {}),\n  })\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      const auth = getParent<TAuthModel>(self)\n      auth.authenticate(token, userId)\n    },\n  }))\n\nexport interface TLoginProviderModel\n  extends Instance<typeof LoginProviderModel> {}\n","import gql from 'graphql-tag'\n\nexport const PasswordChangeMutation = gql`\n  mutation MPasswordChange($password: String!) {\n    updateUserPassword(newPassword: $password) {\n      id\n      token\n    }\n  }\n`\n","import { Base64 } from 'js-base64'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { MPasswordChange } from '../graph/types'\nimport { identifyUser } from '../helpers/sentry'\nimport { LoginProviderModel } from '../segments/login/models/LoginProviderModel'\nimport { PasswordChangeMutation } from './AuthModel.graphql'\nimport { BaseModel } from './BaseModel'\n\ninterface IVolatileProps {\n  tokenForPasswordChange?: string\n}\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    userId: types.optional(types.string, ''),\n    token: types.optional(types.string, ''),\n    provider: types.optional(LoginProviderModel, {}),\n  })\n  .volatile<IVolatileProps>(() => ({}))\n  .views(self => ({\n    get isAuthenticated() {\n      return self.token.length > 0\n    },\n    get isAuthenticatedUser() {\n      return this.isAuthenticated && self.userId.length > 0\n    },\n    get communicationToken() {\n      return self.tokenForPasswordChange || self.token\n    },\n    get canCommunicate() {\n      return this.isAuthenticated || self.tokenForPasswordChange !== undefined\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      self.tokenForPasswordChange = undefined\n      self.log('authenticated with id %s', userId)\n      identifyUser(userId)\n    },\n    invalidate() {\n      self.token = ''\n      self.userId = ''\n      self.tokenForPasswordChange = undefined\n      self.client.cache.reset()\n      self.log('invalidated authentication')\n      identifyUser(null)\n    },\n  }))\n  .actions(self => ({\n    setForPasswordChange(temporaryB64EncodedToken: string) {\n      self.invalidate()\n      self.log('encoded token %s', temporaryB64EncodedToken)\n      self.tokenForPasswordChange = Base64.decode(temporaryB64EncodedToken)\n      self.log('using temp token %s', self.tokenForPasswordChange)\n    },\n    async changePassword(password: string) {\n      const variables: MPasswordChange.Variables = {\n        password,\n      }\n      const result = await self.client.mutate({\n        mutation: PasswordChangeMutation,\n        variables,\n        fetchPolicy: 'no-cache',\n      })\n\n      const {\n        updateUserPassword: { id, token },\n      } = result.data as MPasswordChange.Mutation\n\n      if (token && id) {\n        self.invalidate()\n        self.authenticate(token, id)\n      }\n    },\n  }))\n  .preProcessSnapshot(snapshot => {\n    if (snapshot.userId) {\n      identifyUser(snapshot.userId)\n    }\n    return snapshot\n  })\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { BaseModel } from '../models/BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  soundEnabled: true,\n  orderListPollIntervalSec: 60,\n  orderListSoundIntervalSec: 60,\n})\n","import gql from 'graphql-tag'\n\nimport { CompanyBranchFragment } from '../graph/fragments'\n\nexport const UserModelBootstrapQuery = gql`\n  query GUserModelBootstrap($userId: ID!) {\n    user(id: $userId) {\n      id\n      language {\n        rawCode\n      }\n      branches: accessibleBranches {\n        ...GCompanyBranch\n      }\n    }\n    userPermissions: permissions {\n      canCancelOrders\n      canCreateOrder\n    }\n    userAccess: __schema {\n      queries: queryType {\n        fields {\n          name\n        }\n      }\n      mutations: mutationType {\n        fields {\n          name\n        }\n      }\n      subscriptions: subscriptionType {\n        fields {\n          name\n        }\n      }\n    }\n  }\n\n  ${CompanyBranchFragment}\n`\n","import _ from 'lodash'\nimport { reaction, when } from 'mobx'\nimport { flow, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\n\nimport { GCompanyBranch, GUserModelBootstrap } from '../graph/types'\nimport { logBootstrap, logLang } from '../helpers/logger'\nimport { RM } from '../helpers/ramda'\nimport { changeLanguage, detectLanguage } from '../i18n'\nimport { BaseModel } from '../models/BaseModel'\nimport { UserModelBootstrapQuery } from './UserModel.graphql'\n\ninterface IVolatileProps {\n  isLoaded: boolean\n  branches: ReadonlyArray<GCompanyBranch.Fragment>\n  brands: ReadonlyArray<GCompanyBranch.Brand>\n  soundEnabled: boolean\n  access: Maybe<IUserAccess>\n  permissions: GUserModelBootstrap.UserPermissions\n}\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    language: types.maybe(types.string),\n    soundVolume: types.optional(types.number, 25),\n    soundIgnore: false,\n  })\n  .volatile<IVolatileProps>(() => ({\n    isLoaded: false,\n    branches: [],\n    brands: [],\n    soundEnabled: false,\n    access: null,\n    permissions: {\n      canCancelOrders: false,\n      canCreateOrder: false,\n    },\n  }))\n  .views(self => ({\n    get branchesId() {\n      return self.branches.map(R.prop('id'))\n    },\n    get defaultBranch() {\n      if (self.branches.length === 0) {\n        throw new Error('No user branches available to get defaultBranchId')\n      }\n      return self.branches[0]\n    },\n    filterBranches(predicate: (value: GCompanyBranch.Fragment) => boolean) {\n      return self.branches.filter(predicate)\n    },\n    canQuery(queryName: string) {\n      return (\n        self.access !== null && self.access.queries.has(queryName.toLowerCase())\n      )\n    },\n    canMutate(mutationName: string) {\n      return (\n        self.access !== null &&\n        self.access.mutations.has(mutationName.toLowerCase())\n      )\n    },\n    get isReady() {\n      return self.isLoaded || !self.root.auth.isAuthenticated\n    },\n  }))\n  .actions(self => ({\n    applyUserData(user: GUserModelBootstrap.User) {\n      self.branches = user.branches\n      self.brands = RM.uniqBy(\n        RM.prop('id'),\n        user.branches.map(RM.prop('brand')),\n      )\n    },\n    applyUserPermissions(permissions: GUserModelBootstrap.UserPermissions) {\n      self.permissions = permissions\n    },\n    applyUserAccess(access: IAccessRaw) {\n      self.access = _.mapValues(\n        access,\n        ({ fields }) =>\n          new Set(\n            fields.map(\n              RM.compose(\n                RM.toLower,\n                RM.prop('name'),\n              ),\n            ),\n          ),\n      )\n    },\n    setLanguage: flow(function*(language: string) {\n      logLang('changing to language %s from user profile', language)\n      yield changeLanguage(language)\n      self.language = language\n    }),\n    finishBootstrap() {\n      self.isLoaded = true\n    },\n    controlSound(enabled: boolean = true, ignore: boolean = false) {\n      self.soundEnabled = enabled\n      self.soundIgnore = ignore\n    },\n    setSoundVolume(volume: number) {\n      self.soundVolume = volume\n    },\n  }))\n  .actions(self => {\n    const queryUser = async (userId: ID) => {\n      logBootstrap('query user')\n      const variables: GUserModelBootstrap.Variables = {\n        userId,\n      }\n      const { data } = await self.client.query<GUserModelBootstrap.Query>({\n        query: UserModelBootstrapQuery,\n        variables,\n      })\n      self.setLanguage(data.user.language.rawCode)\n      self.applyUserData(data.user)\n      // @ts-ignore https://github.com/dotansimha/graphql-code-generator/issues/643\n      self.applyUserAccess(_.omit(data.userAccess, '__typename'))\n      self.applyUserPermissions(data.userPermissions)\n      self.finishBootstrap()\n    }\n\n    const initUser = () => {\n      reaction(\n        () => self.root.auth.userId,\n        userId => {\n          if (userId) {\n            if (!self.language) {\n              self.setLanguage(detectLanguage())\n            }\n            queryUser(userId)\n          } else {\n            self.setLanguage(detectLanguage())\n            self.finishBootstrap()\n          }\n        },\n        { fireImmediately: true },\n      )\n      return new Promise(resolve => {\n        when(() => self.isLoaded, resolve)\n      })\n    }\n\n    return { initUser }\n  })\n\ninterface IUserAccess {\n  queries: Set<string>\n  mutations: Set<string>\n  subscriptions: Set<string>\n}\n\ninterface IAccessType {\n  fields: ReadonlyArray<{ name: string }>\n}\n\ninterface IAccessRaw {\n  queries: IAccessType\n  mutations: IAccessType\n  subscriptions: IAccessType\n}\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import faker from 'faker'\n\nfaker.locale = 'cz'\n\nexport { faker }\n","import { isoDate } from '@speedlo/graphql'\nimport _ from 'lodash'\nimport { flow, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { ExecutionResult } from 'react-apollo'\n\nimport { DeliveryTypeEnum } from '../../../graph/generated'\nimport {\n  GCreateOrder,\n  GOrderVam,\n  MAcceptOrder,\n  MCancelOrder,\n  SOrderCall,\n} from '../../../graph/types'\nimport { faker } from '../../../helpers/faker'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { IAddressWithGps } from '../../../molecules/AddressSuggest'\nimport {\n  CancelOrderMutation,\n  CreateOrderMutation,\n} from './CreateOrderModel.graphql'\n\nexport interface ICall extends Omit<SOrderCall.Call, 'isRinging' | 'eventId'> {\n  eventId?: ID\n}\n\nexport interface IOrderFormValues {\n  deliveryType: DeliveryTypeEnum.Messenger | DeliveryTypeEnum.Pickup\n  deliverAt?: Date\n  phone?: string\n  phonePrefix?: string\n  firstName?: string\n  lastName?: string\n  email?: string\n  note?: string\n}\n\ninterface IVolatileProps {\n  orderId: MaybeID\n  call?: ICall\n  deliveryAddress?: IAddressWithGps\n  deliveryMinutes?: number\n  notDeliveryLocation: boolean\n  values: IOrderFormValues\n  fakeValues?: Partial<IOrderFormValues>\n  fakeAddress?: IAddressWithGps\n  vamCustomer: Maybe<GOrderVam.VamCustomer>\n}\n\nexport const CreateOrderModel = BaseModel.named('CreateOrder')\n  .props({\n    branchId: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(getDefaultProps)\n  .views(self => ({\n    get currentBranch() {\n      return (\n        self.root.user.branches.find(RM.propEq('id', self.branchId)) ||\n        self.root.user.defaultBranch\n      )\n    },\n  }))\n  .views(self => ({\n    get deliveryType() {\n      return self.values.deliveryType\n    },\n    get isDelivery() {\n      return self.values.deliveryType === DeliveryTypeEnum.Messenger\n    },\n    get deliverAt() {\n      return (self.values.deliverAt && new Date(self.values.deliverAt)) || null\n    },\n    get hasAddress() {\n      return Boolean(self.deliveryAddress || self.fakeAddress)\n    },\n    get gps() {\n      if (this.isDelivery && this.hasAddress) {\n        if (self.deliveryAddress && self.deliveryAddress.gps) {\n          return clearGps(self.deliveryAddress.gps)\n        } else if (self.fakeAddress && self.fakeAddress.gps) {\n          return clearGps(self.fakeAddress.gps)\n        }\n      }\n      return { ...clearGps(self.currentBranch.gps) }\n    },\n    get phone() {\n      if (self.values.phone !== undefined) {\n        return self.values.phone\n      }\n      return self.call ? self.call.phone : ''\n    },\n    get phonePrefix() {\n      if (self.values.phonePrefix !== undefined) {\n        return self.values.phonePrefix\n      }\n      if (self.call) {\n        return self.call.prefix\n      }\n      if (self.currentBranch.address.country) {\n        return self.currentBranch.address.country.phonePrefix\n      }\n      return '+'\n    },\n    get formValues() {\n      if (self.vamCustomer !== null && self.vamCustomer.isFound) {\n        const { firstName, lastName, email, lastOrder } = self.vamCustomer\n        return _.defaults(\n          { ...self.values },\n          {\n            phone: this.phone,\n            phonePrefix: this.phonePrefix,\n            firstName,\n            lastName,\n            email,\n            note: (lastOrder && lastOrder.note) || '',\n          },\n        )\n      }\n      if (self.fakeValues) {\n        return _.defaults({ ...self.values }, { ...self.fakeValues })\n      }\n      return _.defaults(\n        { ...self.values },\n        { phone: this.phone, phonePrefix: this.phonePrefix },\n      )\n    },\n    get hasOrder() {\n      return self.orderId !== null\n    },\n    get cartRefreshKey() {\n      return `${self.orderId || 0}-${this.deliveryType}-${this.gps.longitude}-${\n        this.gps.latitude\n      }`\n    },\n    get acceptOrderVariables(): MAcceptOrder.Variables {\n      return {\n        orderId: self.orderId!,\n        deliverAt: this.deliverAt && isoDate(this.deliverAt),\n        customer: {\n          firstName: this.formValues.firstName,\n          lastName: this.formValues.lastName,\n          emails: this.formValues.email\n            ? [{ email: this.formValues.email }]\n            : null,\n          phones: this.formValues.phone\n            ? [\n                {\n                  phone: `${this.formValues.phonePrefix}${\n                    this.formValues.phone\n                  }`,\n                },\n              ]\n            : null,\n        },\n        note: this.formValues.note,\n      }\n    },\n  }))\n  .actions(self => {\n    const resetOrder = () => {\n      self.orderId = null\n    }\n    const resetModel = () => {\n      Object.assign(self, getDefaultProps())\n    }\n    const ensureOrder = flow(function*() {\n      if (self.orderId === null && self.branchId) {\n        const variables: GCreateOrder.Variables = {\n          branchId: self.currentBranch.id,\n          deliveryType: self.values.deliveryType,\n          deliverAt: self.deliverAt && isoDate(self.deliverAt),\n          callEventId: self.call && self.call.eventId,\n          gps: self.gps,\n        }\n        const result: ExecutionResult<\n          GCreateOrder.Mutation\n        > = yield self.client.mutate({\n          mutation: CreateOrderMutation,\n          variables,\n        })\n        if (result.data) {\n          self.orderId = result.data.createOrder.id\n        }\n      }\n      return self.orderId!\n    })\n    const cancelOrder = flow(function*() {\n      if (!self.orderId) {\n        resetModel()\n        return\n      }\n      const variables: MCancelOrder.Variables = {\n        orderId: self.orderId,\n      }\n      self.client.mutate({ mutation: CancelOrderMutation, variables })\n      resetModel()\n    })\n\n    return {\n      ensureOrder,\n      cancelOrder,\n      resetOrder,\n      resetModel,\n    }\n  })\n  .actions(self => ({\n    useLocation(address: IAddressWithGps) {\n      self.deliveryAddress = address\n    },\n    clearLocation() {\n      self.deliveryAddress = undefined\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    userIsCalling(call: ICall | undefined) {\n      self.call = call\n    },\n    setDeliveryMinutes(minutes: number | undefined) {\n      self.deliveryMinutes = minutes\n    },\n    updateFormValues(\n      values: IOrderFormValues,\n      touched: { [K in keyof IOrderFormValues]?: boolean },\n    ) {\n      self.values = {\n        deliveryType: values.deliveryType,\n        ..._.pick(values, Object.keys(touched)),\n        deliverAt: values.deliverAt,\n      }\n      self.log('updated values: %j', self.values)\n    },\n    updateFromVam(vamCustomer: Maybe<GOrderVam.VamCustomer>) {\n      self.vamCustomer = vamCustomer\n      self.log('vam customer: %j', vamCustomer)\n    },\n    updateFormWithFakeValues() {\n      self.fakeValues = {\n        firstName: faker.name.firstName(),\n        lastName: faker.name.lastName(),\n        email: faker.internet.email(),\n        phone: faker.phone.phoneNumberFormat(3).replace(/\\s/g, ''),\n        phonePrefix: '+420',\n        note: faker.lorem.sentence().slice(0, 50 - 1),\n      }\n      self.fakeAddress = {\n        state: '',\n        city: 'Hradec Králové',\n        street: 'Opletalova',\n        houseNumber: '334/2',\n        gps: {\n          latitude: 50.2129839,\n          longitude: 15.8342836,\n        },\n      }\n    },\n  }))\n\nfunction getDefaultProps(): IVolatileProps {\n  return {\n    orderId: null,\n    call: undefined,\n    values: {\n      deliveryType: DeliveryTypeEnum.Messenger,\n      deliverAt: undefined,\n      phone: undefined,\n      email: undefined,\n      firstName: undefined,\n      lastName: undefined,\n      note: undefined,\n    },\n    fakeAddress: undefined,\n    fakeValues: undefined,\n    deliveryAddress: undefined,\n    deliveryMinutes: undefined,\n    vamCustomer: null,\n    notDeliveryLocation: false,\n  }\n}\n\nfunction clearGps({ latitude, longitude }: GeoPoint) {\n  return { latitude, longitude }\n}\n\nexport interface TCreateOrderModel extends Instance<typeof CreateOrderModel> {}\nexport interface TCreateOrderModelProps\n  extends SnapshotIn<typeof CreateOrderModel> {}\n","import { Instance, types } from 'mobx-state-tree'\nimport GoogleMap from 'react-google-maps/lib/components/GoogleMap'\n\nimport { gpsToLatLng } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<GoogleMap>\n}\n\nconst GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 12),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLng(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<GoogleMap>) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\n","import gql from 'graphql-tag'\n\nimport { GeoPointFragment } from '../../../graph/fragments'\n\nexport const OrderBranchLocationQuery = gql`\n  query GOrderBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n\nexport const OrderLocationQuery = gql`\n  query GOrderLocation($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n","import { GOrderBranchLocation, GOrderLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport {\n  OrderBranchLocationQuery,\n  OrderLocationQuery,\n} from './OrderMapModel.graphql'\n\ninterface IVolatileProps {\n  activeDriverId: MaybeID\n}\n\nexport const OrderMapModel = MapModel.named('OrderMap')\n  .volatile<IVolatileProps>(() => ({\n    activeDriverId: null,\n  }))\n  .actions(self => ({\n    async panToOrder(orderId: ID) {\n      if (!self.mapRef) {\n        return\n      }\n      const { data } = await self.client.query<GOrderLocation.Query>({\n        query: OrderLocationQuery,\n        variables: { orderId },\n      })\n      if (data && data.order.gps) {\n        self.mapRef.panTo(gpsToLatLng(data.order.gps))\n      }\n    },\n    async panToBranch(branchId: ID) {\n      const { data } = await self.client.query<GOrderBranchLocation.Query>({\n        query: OrderBranchLocationQuery,\n        variables: { branchId },\n      })\n      if (!self.mapRef) {\n        return\n      }\n      if (data) {\n        self.mapRef.panTo(gpsToLatLng(data.companyBranch.gps))\n      }\n    },\n    activateDriver(driverId: ID, position: GeoPoint) {\n      self.activeDriverId = driverId\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(position))\n      }\n    },\n  }))\n","import { Instance } from 'mobx-state-tree'\n\nimport { OrderStateEnum } from '../../../graph/generated'\nimport {\n  GRemoveOrderDriver,\n  GSelectOrderDriver,\n  GSendOrderNotification,\n  GUpdateOrderState,\n} from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  RemoveOrderDriverMutation,\n  SelectOrderDriverMutation,\n  SendOrderNotificationMutation,\n  UpdateOrderStateMutation,\n} from './OrderStateModel.graphql'\n\nexport const OrderStateModel = BaseModel.named('OrderState')\n  .views(self => ({}))\n  .actions(self => ({\n    async updateOrderState(orderId: ID, state: OrderStateEnum) {\n      const variables: GUpdateOrderState.Variables = {\n        orderId,\n        state,\n      }\n      await self.client.mutate({\n        mutation: UpdateOrderStateMutation,\n        variables,\n      })\n    },\n    async cancelOrder(orderId: ID) {\n      alert('Cancel order')\n      // TODO:\n    },\n  }))\n  .actions(self => ({\n    deliverOrder(orderId: ID) {\n      return self.updateOrderState(orderId, OrderStateEnum.OnWay)\n    },\n    async sendTimeNotification(orderId: ID, minutes: number) {\n      const variables: GSendOrderNotification.Variables = {\n        orderId,\n        minutes,\n      }\n      await self.client.mutate({\n        mutation: SendOrderNotificationMutation,\n        variables,\n      })\n    },\n    async selectDriver(orderId: ID, driverId: ID) {\n      const variables: GSelectOrderDriver.Variables = {\n        orderId,\n        driverId,\n      }\n      await self.client.mutate({\n        mutation: SelectOrderDriverMutation,\n        variables,\n      })\n    },\n    async removeDriver(orderDriverId: ID) {\n      const variables: GRemoveOrderDriver.Variables = {\n        orderDriverId,\n      }\n      await self.client.mutate({\n        mutation: RemoveOrderDriverMutation,\n        variables,\n      })\n    },\n  }))\n\nexport interface TOrderStateModel extends Instance<typeof OrderStateModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { OrderListModel } from './OrderListModel'\nimport { OrderMapModel } from './OrderMapModel'\nimport { OrderStateModel } from './OrderStateModel'\n\nexport const OrderModel = types.model('Order', {\n  list: types.optional(OrderListModel, {}),\n  map: types.optional(OrderMapModel, {}),\n  state: types.optional(OrderStateModel, {}),\n})\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\n","import { endOfDay, startOfDay } from 'date-fns'\nimport { types } from 'mobx-state-tree'\n\nimport { GCreateFinancialReport } from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { CreateFinancialReport } from '../organisms/ClosureStatisticsControl.graphql'\n\nexport interface IStatisticsDateFilter {\n  dateTimeFrom: Date\n  dateTimeTo: Date\n}\n\nexport const StatisticsModel = BaseModel.named('Statistics')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    closureBranch: types.maybeNull(types.string),\n  })\n  .volatile<IStatisticsDateFilter>(self => ({\n    dateTimeFrom: startOfDay(new Date()),\n    dateTimeTo: endOfDay(new Date()),\n  }))\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length > 0\n        ? Array.from(self.branches)\n        : self.root.user.branchesId\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n  }))\n  .actions(self => ({\n    updateFilter(formValues: IStatisticsDateFilter) {\n      self.dateTimeFrom = new Date(formValues.dateTimeFrom)\n      self.dateTimeTo = new Date(formValues.dateTimeTo)\n    },\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    setClosureBranch(branch: MaybeID) {\n      self.closureBranch = branch\n    },\n    async createClosure() {\n      if (self.closureBranch) {\n        const variables: GCreateFinancialReport.Variables = {\n          companyBranchId: self.closureBranch,\n        }\n        return self.client.mutate({\n          mutation: CreateFinancialReport,\n          variables,\n          refetchQueries: [`GClosureReportQuery`],\n        })\n      } else {\n        throw new Error('Tried to create a closure without branch selected')\n      }\n    },\n  }))\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TSettingsModel } from './SettingsModel'\n\nexport const SettingsBaseModel = BaseModel.named('SettingsBase').views(\n  self => ({\n    get settings() {\n      return getParent<TSettingsModel>(self)\n    },\n  }),\n)\n","import { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuStockCreate,\n  GMenuStockDelete,\n  GMenuStockUpdate,\n} from '../../../graph/types'\nimport { TStockFormValues } from '../organisms/StockFormLoader'\nimport { MenuStockListQuery } from '../organisms/StockList.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuStockCreateMutation,\n  MenuStockDeleteMutation,\n  MenuStockUpdateMutation,\n} from './MenuStockModel.graphql'\n\nexport const MenuStockModel = MenuBaseModel.named('MenuStock').actions(\n  self => ({\n    createItem(formValues: TStockFormValues) {\n      const variables: GMenuStockCreate.Variables = {\n        stockItem: {\n          companyBranch: self.branchId,\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockCreateMutation,\n          variables,\n          refetchQueries: [\n            {\n              query: MenuStockListQuery,\n              variables: {\n                branchId: self.branchId,\n              },\n            },\n          ],\n        }),\n      )\n    },\n    updateItem(formValues: TStockFormValues) {\n      const variables: GMenuStockUpdate.Variables = {\n        stockId: formValues.id,\n        stockItem: {\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteItem(stockId: ID) {\n      const variables: GMenuStockDelete.Variables = {\n        stockId,\n      }\n      await self.client.mutate({\n        mutation: MenuStockDeleteMutation,\n        variables,\n        refetchQueries: [\n          {\n            query: MenuStockListQuery,\n            variables: {\n              branchId: self.branchId,\n            },\n          },\n        ],\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(formValues: TStockFormValues) {\n  return {\n    code: formValues.code,\n    label: formValues.nameLabel,\n    note: formValues.note,\n    plu: formValues.plu,\n    allergens: formValues.allergens,\n    wareUnit: formValues.wareUnit!,\n    allowNegative: formValues.allowNegative,\n  }\n}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { SettingsBaseModel } from '../../settings/models/SettingsBaseModel'\nimport { MenuCategoryModel } from './MenuCategoryModel'\nimport { MenuRecipeModel } from './MenuRecipeModel'\nimport { MenuStockModel } from './MenuStockModel'\n\nexport const MenuModel = SettingsBaseModel.named('Menu').props({\n  category: types.optional(MenuCategoryModel, {}),\n  recipe: types.optional(MenuRecipeModel, {}),\n  stock: types.optional(MenuStockModel, {}),\n})\n\nexport interface TMenuModel extends Instance<typeof MenuModel> {}\n","import { FetchPolicy } from 'apollo-client'\nimport { Instance, types } from 'mobx-state-tree'\n\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { BusinessHoursModel } from '../../businesshours/models/BusinessHoursModel'\nimport { MenuModel } from '../../menu/models/MenuModel'\n\nexport const SettingsModel = BaseModel.named('Settings')\n  .props({\n    selectedBranchId: types.maybe(types.string),\n    businessHours: types.optional(BusinessHoursModel, {}),\n    menu: types.optional(MenuModel, {}),\n  })\n  .views(self => ({\n    get branchId() {\n      return self.selectedBranchId || RM.head(self.root.user.branchesId)!\n    },\n    get queryProps() {\n      const branchId = this.branchId\n      if (!branchId) {\n        return { skip: true }\n      }\n      return {\n        fetchPolicy: 'cache-and-network' as FetchPolicy,\n        variables: { branchId },\n      }\n    },\n    getQueryProps<T extends Dictionary>(otherVariables: T) {\n      const branchId = this.branchId\n      if (!branchId) {\n        return { skip: true }\n      }\n      return {\n        variables: Object.assign({ branchId }, otherVariables),\n      }\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.selectedBranchId = branchId\n    },\n  }))\n\nexport interface TSettingsModel extends Instance<typeof SettingsModel> {}\n","import { GCompanyBranch, GZoneLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport { ZoneLocationQuery } from '../Zones.graphql'\n\ninterface IVolatileProps {\n  currentZonePoints: Maybe<GeoPoint[]>\n}\n\nexport const ZoneMapModel = MapModel.named('ZoneMap')\n  .volatile<IVolatileProps>(() => ({\n    currentZonePoints: null,\n  }))\n  .actions(self => ({\n    updateZonePoints(points: GeoPoint[]) {\n      self.currentZonePoints = points\n    },\n    clearZonePoints() {\n      self.currentZonePoints = null\n    },\n    async panToZone(zoneId: ID) {\n      const { data } = await self.client.query({\n        query: ZoneLocationQuery,\n        variables: { zoneId },\n      })\n      if (data) {\n        const {\n          zone: {\n            companyBranch: { gps },\n          },\n        } = data as GZoneLocation.Query\n        if (self.mapRef) {\n          self.mapRef.panTo(gpsToLatLng(gps))\n        }\n      }\n    },\n    async panToBranch(branch: GCompanyBranch.Fragment) {\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(branch.gps))\n      }\n    },\n  }))\n","import gql from 'graphql-tag'\n\nimport { ZoneFragment } from '../Zones.graphql'\n\nexport const CreateZoneMutation = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...GZone\n    }\n  }\n  ${ZoneFragment}\n`\n\nexport const UpdateZoneMutation = gql`\n  mutation GUpdateZone($zoneId: ID!, $update: InputZoneUpdate!) {\n    updateZone(id: $zoneId, zone: $update) {\n      ...GZone\n    }\n  }\n  ${ZoneFragment}\n`\n\nexport const UpdateZonePriorityMutation = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport const DestroyZoneMutation = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n","import { flow, Instance, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\nimport { VError } from 'verror'\n\nimport {\n  GCompanyBranch,\n  GCreateZone,\n  GDestroyZone,\n  GUpdateZone,\n  GUpdateZonePriority,\n  GZone,\n  GZonePriceRange,\n} from '../../../graph/types'\nimport { generatePolygon } from '../../../helpers/gps'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { ZoneMapModel } from '../models/ZoneMapModel'\nimport {\n  CreateZoneMutation,\n  DestroyZoneMutation,\n  UpdateZoneMutation,\n  UpdateZonePriorityMutation,\n} from './ZoneModel.graphql'\n\ninterface IVolatileProps {\n  branch: Maybe<GCompanyBranch.Fragment>\n}\n\nexport const ZoneModel = BaseModel.named('Zone')\n  .props({\n    map: types.optional(ZoneMapModel, {}),\n    brandId: types.maybeNull(types.string),\n  })\n  .volatile<IVolatileProps>(() => ({\n    branch: null,\n  }))\n  .views(self => ({\n    get brand(): Maybe<GCompanyBranch.Brand> {\n      return (\n        (self.brandId &&\n          self.root.user.brands.find(RM.propEq('id', self.brandId))) ||\n        null\n      )\n    },\n    get hasBranchFilter() {\n      return self.branch !== null\n    },\n    get branchFilterId(): MaybeID {\n      return self.branch === null ? null : self.branch.id\n    },\n    get branchFilterPredicate() {\n      if (self.branch) {\n        return R.propEq('id', self.branch.id)\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), ['brand', 'id'])\n    },\n    get zoneFilterPredicate() {\n      if (self.branch !== null) {\n        return R.pathSatisfies(R.equals(self.branch.id), [\n          'companyBranch',\n          'id',\n        ])\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), [\n            'companyBranch',\n            'brand',\n            'id',\n          ])\n    },\n    get branches() {\n      return self.root.user.branches\n    },\n  }))\n  .actions(self => ({\n    setBranchFilter(branch: GCompanyBranch.Fragment) {\n      self.branch = branch\n      self.brandId = branch.brand.id\n      self.map.panToBranch(branch)\n    },\n    setBrandFilter(\n      brand: GCompanyBranch.Brand,\n      brandBranches: GCompanyBranch.Fragment[],\n    ) {\n      self.brandId = brand.id\n      if (!self.branch || self.branch.brand.id !== brand.id) {\n        self.branch =\n          (brandBranches.length === 1 && RM.head(brandBranches)) || null\n      }\n    },\n    clearBranchFilter() {\n      self.branch = null\n    },\n    clearBrandFilter() {\n      self.brandId = null\n      self.branch = null\n    },\n  }))\n  .actions(self => ({\n    createZone: flow(function*(onZoneCreate: (zoneId: ID) => void) {\n      if (self.branch === null) {\n        throw new VError('Called createZone without branch being set')\n      }\n      const points = generatePolygon({\n        center: self.branch.gps,\n        metersRadius: 1000,\n        pointsCount: 5,\n      })\n      const variables: GCreateZone.Variables = {\n        branchId: self.branch.id,\n        points,\n      }\n      const { data } = yield self.client.mutate({\n        mutation: CreateZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: (prev, { mutationResult }) => {\n            const zone = (mutationResult.data as GCreateZone.Mutation)\n              .createZone\n            if (zone) {\n              return {\n                ...prev,\n                zones: prev.zones.concat(zone),\n              }\n            }\n            return prev\n          },\n        },\n      })\n      if (data) {\n        const zone = (data as GCreateZone.Mutation).createZone\n        onZoneCreate(zone.id)\n      }\n    }),\n    // tslint:disable-next-line:no-any\n    async saveZone(zoneId: ID, values: any) {\n      const variables: GUpdateZone.Variables = {\n        zoneId,\n        update: {\n          name: values.name,\n          enabled: values.enabled,\n          companyBranch: values.companyBranch.id,\n          zoneColor: values.zoneColor.id,\n          minimalOrderPrice: {\n            value: Number(values.minimalOrderPrice.value) || 0,\n          },\n          priceRangeRules: values.priceRangeRules\n            .map(normalizePriceRangeRule)\n            .filter(R.reject(R.pathEq(['price', 'value'], null))),\n          geoPolygon: self.map.currentZonePoints || undefined,\n        },\n      }\n      await self.client.mutate({\n        mutation: UpdateZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: (prev, { mutationResult }) => {\n            const zoneIdx = prev.zones.findIndex(R.propEq('id', zoneId))\n            const zone = (mutationResult.data as GUpdateZone.Mutation)\n              .updateZone\n            return {\n              ...prev,\n              zones: R.update(zoneIdx, zone, prev.zones),\n            }\n          },\n        },\n      })\n      self.map.clearZonePoints()\n    },\n    destroyZone(zoneId: ID) {\n      if (!zoneId) {\n        return\n      }\n      const variables: GDestroyZone.Variables = {\n        zoneId,\n      }\n      return self.client.mutate({\n        mutation: DestroyZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: prev => {\n            return {\n              ...prev,\n              zones: R.reject(R.propEq('id', zoneId), prev.zones),\n            }\n          },\n        },\n      })\n    },\n    changeZonePriority: flow(function*(\n      zone: GZone.Fragment,\n      oldIndex: number,\n      newIndex: number,\n    ) {\n      if (!zone || oldIndex === newIndex) {\n        return\n      }\n      const offset = oldIndex - newIndex\n\n      const variables: GUpdateZonePriority.Variables = {\n        zoneId: zone.id,\n        offset,\n      }\n      yield self.client.mutate({\n        mutation: UpdateZonePriorityMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          updateZonePriority: {\n            __typename: 'Zone',\n            id: zone.id,\n            priority: zone.priority + offset,\n          },\n        },\n      })\n    }),\n  }))\n\nfunction numberOrNull(value: string | number | null) {\n  if (value === null) {\n    return null\n  }\n  const num = Number(value)\n  return Number.isNaN(num) ? null : num\n}\n\nfunction normalizePriceRangeRule(range: GZonePriceRange.Fragment) {\n  return {\n    price: { value: numberOrNull(range.price.value) },\n    toPrice: { value: numberOrNull(range.toPrice.value) || -1 },\n  }\n}\n\nexport interface TZoneModel extends Instance<typeof ZoneModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { AuthModel } from '../models/AuthModel'\nimport { ConfigModel } from '../models/ConfigModel'\nimport { UserModel } from '../models/UserModel'\nimport { CreateOrderModel } from '../segments/createorder/models/CreateOrderModel'\nimport { OrderModel } from '../segments/order/models/OrderModel'\nimport { StatisticsModel } from '../segments/overview/models/StatisticsModel'\nimport { SettingsModel } from '../segments/settings/models/SettingsModel'\nimport { ZoneModel } from '../segments/zones/models/ZoneModel'\nimport { BaseModel } from './BaseModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    user: types.optional(UserModel, {}),\n    order: types.optional(OrderModel, {}),\n    createOrder: types.optional(CreateOrderModel, {}),\n    zone: types.optional(ZoneModel, {}),\n    settings: types.optional(SettingsModel, {}),\n    config: types.optional(ConfigModel, {}),\n    statistics: types.optional(StatisticsModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.settings,\n        self.zone,\n        self.order,\n        self.statistics,\n        self.createOrder,\n      ]\n    },\n  }))\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import { Trans } from '@lingui/macro'\nimport { Button, Snackbar, SnackbarContent } from '@material-ui/core'\nimport { useAsyncEffect } from '@speedlo/hooks'\nimport { NormalizedCacheObject } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { Observer } from 'mobx-react'\nimport React, { Children, useContext, useState } from 'react'\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloProvider as ApolloProviderHooked } from 'react-apollo-hooks'\n\nimport { RootContext } from '../context/RootContext'\nimport { createApolloClient } from '../graph/createClient'\nimport { persistModel } from '../helpers/persistModel'\nimport { AuthModel } from '../models/AuthModel'\nimport { RootModel, TRootModel } from '../models/RootModel'\nimport Pacman from './Pacman'\nimport { snackStyles } from './SnackProvider'\n\nexport const RootProvider: React.FC = ({ children }) => {\n  const [root, setRoot] = useState<TRootModel | undefined>(undefined)\n  const [hasNetworkError, setNetworkError] = useState(false)\n\n  useAsyncEffect(async () => {\n    const auth = AuthModel.create({})\n    const apolloClient = createApolloClient(auth)\n\n    const rootModel = RootModel.create(\n      { auth },\n      {\n        fetch: window.fetch,\n        apolloClient,\n      },\n    )\n\n    await Promise.all(rootModel.persistedModels.map(persistModel))\n\n    try {\n      await rootModel.user.initUser()\n    } catch (err) {\n      if (err.networkError) {\n        setNetworkError(true)\n      }\n    }\n\n    setRoot(rootModel)\n  })\n\n  if (hasNetworkError) {\n    return (\n      <Snackbar\n        anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\n        autoHideDuration={Infinity}\n        open={true}\n      >\n        <SnackbarContent\n          className={snackStyles.variantError}\n          message={\n            <Trans>\n              Communication with server has failed. Please retry the operation\n              in a moment again.\n            </Trans>\n          }\n          action={[\n            <Button\n              key=\"restart\"\n              onClick={() => location.reload()}\n              color=\"secondary\"\n              size=\"small\"\n              role=\"button\"\n            >\n              <Trans>Restart application</Trans>\n            </Button>,\n          ]}\n        />\n      </Snackbar>\n    )\n  }\n\n  return root ? (\n    <ApolloProvider client={root.client}>\n      <ApolloProviderHooked client={root.client}>\n        <RootContext.Provider value={root}>\n          {Children.only(children)}\n        </RootContext.Provider>\n      </ApolloProviderHooked>\n    </ApolloProvider>\n  ) : (\n    <Pacman />\n  )\n}\n\nexport const useRoot = () => {\n  const root = useContext(RootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\ninterface IWithRootProps {\n  children(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.FC<IWithRootProps> = ({\n  children,\n  observe = true,\n}) => {\n  const root = useRoot()\n  return observe === true ? (\n    <Observer>{() => children(root)}</Observer>\n  ) : (\n    children(root)\n  )\n}\n\nexport type RootApolloClient = ApolloClient<NormalizedCacheObject>\n\nexport interface IRootEnvironment {\n  fetch: TFetch\n  apolloClient: RootApolloClient\n}\n","import { DocumentNode } from 'graphql'\nimport { Lambda } from 'mobx'\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\nimport { useQuery } from 'react-apollo-hooks'\nimport { Redirect } from 'react-router-dom'\nimport RedBox from 'redbox-react'\n\nimport { Loading } from '../atoms/Loading'\nimport { logError } from '../helpers/logger'\nimport { whenGoingOnline } from '../helpers/offline'\nimport { reportError } from '../helpers/sentry'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean\n    refetchOnConnectionLost?: boolean\n  }\n  const GQuery: React.FC<IProps> = props => {\n    const cleanup = useRef<Lambda[]>([])\n    const executeCleanup = useCallback(() => {\n      cleanup.current.forEach(fn => fn())\n      cleanup.current.length = 0\n    }, [])\n\n    useEffect(\n      () => {\n        return executeCleanup\n      },\n      [cleanup.current.length],\n    )\n\n    const {\n      render,\n      renderFragment,\n      renderLoading = true,\n      renderError = true,\n      refetchOnConnectionLost = false,\n      children,\n      ...rest\n    } = props\n\n    return (\n      <Query query={query} {...rest}>\n        {result => {\n          if (result.loading) {\n            if (typeof renderLoading === 'function') {\n              return renderLoading(result)\n            } else if (renderLoading === true) {\n              return <Loading />\n            }\n          }\n          if (result.error) {\n            reportError(result.error)\n            logError(result.error)\n            if (renderError === true) {\n              return process.env.NODE_ENV === 'production' ? (\n                <Redirect to=\"/error\" />\n              ) : (\n                <RedBox error={result.error} />\n              )\n            } else {\n              return null\n            }\n          }\n          if (refetchOnConnectionLost) {\n            cleanup.current.push(whenGoingOnline(result.refetch))\n          }\n          if (result.data) {\n            if (renderFragment) {\n              return <>{renderFragment(result.data, result)}</>\n            }\n            if (render) {\n              return render(result.data, result)\n            }\n          }\n          return children || null\n        }}\n      </Query>\n    )\n  }\n  return GQuery\n}\n\nexport function buildQueryHook<TData, TVariables>(query: DocumentNode) {\n  return (variables: TVariables) => {\n    return useQuery<TData, TVariables>(query, { variables })\n  }\n}\n","import React from 'react'\n\nimport { TRootModel } from '../models/RootModel'\nimport { WithRoot as RealWithRoot } from './RootProvider'\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.FC<IProps> = ({ render, observe }) => (\n  <RealWithRoot children={render} observe={observe} />\n)\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nimport { Colors } from '../styling'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.FC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n  >\n    <Spinner\n      name=\"pacman\"\n      style={noMargin ? {} : { marginTop: '45vh', color: Colors.orange }}\n    />\n  </div>\n)\n\nexport default Pacman\n","import React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { RedirectToLogin } from './RedirectToLogin'\n\ninterface ISecureRouteProps extends RouteProps {\n  redirect?: boolean\n  lazy?: boolean\n}\n\nexport const SecureRoute: React.FC<ISecureRouteProps> = ({\n  redirect = true,\n  lazy = true,\n  ...props\n}) => {\n  const { auth } = useRoot()\n  if (!auth.isAuthenticatedUser) {\n    return redirect ? <RedirectToLogin /> : <NotFoundPage />\n  }\n  if (props.component && typeof props.component === 'object') {\n    const { component, path, exact } = props\n    return <LazyRoute path={path} exact={exact} component={component} />\n  }\n  return <Route {...props} />\n}\n","import { Trans } from '@lingui/macro'\nimport { Dialog } from '@material-ui/core'\nimport { WarningTwoTone } from '@material-ui/icons'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport connectionWarningSound from '../assets/connectionWarning.mp3'\nimport { isNetworkOffline } from '../helpers/offline'\nimport { Colors } from '../styling'\nimport { SoundPlayInterval } from './SoundPlayInterval'\n\nconst MessageStyled = styled.div`\n  padding: 1rem;\n  background-color: ${Colors.red} !important;\n  font-size: 2rem;\n\n  & svg {\n    position: relative;\n    top: 0.3rem;\n    padding-right: 0.5rem;\n  }\n`\n\nexport const ConnectionWarning = observer(() => {\n  return (\n    <>\n      <SoundPlayInterval\n        shouldPlay={isNetworkOffline()}\n        intervalSec={30}\n        soundUrl={connectionWarningSound}\n      />\n\n      <Dialog\n        open={isNetworkOffline()}\n        disableBackdropClick={true}\n        disableEscapeKeyDown={true}\n      >\n        <MessageStyled>\n          <WarningTwoTone fontSize=\"large\" />\n          <Trans>Internet connection is not available</Trans>\n        </MessageStyled>\n      </Dialog>\n    </>\n  )\n})\n","import React, { ErrorInfo } from 'react'\nimport {\n  DeveloperErrorBoundary,\n  ProductionErrorBoundary,\n} from 'react-error-guard'\n\nimport { reportRenderingError } from '../helpers/sentry'\n\ninterface IProps {\n  prod: boolean\n}\n\nexport const ErrorContainer: React.FC<IProps> = ({\n  children,\n  prod = false,\n}) => {\n  if (prod) {\n    return (\n      <ProductionErrorBoundary\n        dispatchErrorReporting={(data: { error: Error; info: ErrorInfo }) => {\n          reportRenderingError(data.error, data.info)\n        }}\n      >\n        {children}\n      </ProductionErrorBoundary>\n    )\n  } else {\n    return <DeveloperErrorBoundary>{children}</DeveloperErrorBoundary>\n  }\n}\n","import { Button, Snackbar } from '@material-ui/core'\nimport { SnackbarProps } from '@material-ui/core/Snackbar'\nimport {\n  HOUR,\n  MINUTE,\n  SECOND,\n  useInterval,\n  useNow,\n  useTimer,\n} from '@speedlo/hooks'\nimport { updateWorker, useReleaseCabinet } from '@speedlo/tools'\nimport { addMilliseconds, formatDistanceStrict } from 'date-fns'\nimport { useObservable, useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { formatDateTime } from '../helpers/formats'\nimport { logUpdate } from '../helpers/logger'\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { i18n } from '../i18n'\nimport { snackStyles } from './SnackProvider'\n\nexport interface IProps {\n  onRestart?(): void\n  autoUpdateDelay?: number\n  postponeTimeout?: number\n  updateCheckInterval?: number\n  serviceWorker?: ServiceWorkerContainer\n  children: ReactNode\n}\n\nexport const UpdateHandler: React.FC<IProps> = ({\n  onRestart = () => window.location.reload(),\n  autoUpdateDelay = 20 * SECOND,\n  postponeTimeout = 2 * MINUTE,\n  updateCheckInterval = process.env.REACT_APP_STAGE === 'prod'\n    ? 1 * HOUR\n    : 5 * MINUTE,\n  serviceWorker = window.navigator.serviceWorker,\n  children,\n}) => {\n  const registrationWorkerRef = React.useRef<ServiceWorkerRegistration | null>(\n    null,\n  )\n  const updateWorkerRef = React.useRef<ServiceWorker | null>(null)\n\n  const state = useObservable({ updatePending: false })\n\n  const { enqueueInfo } = useSnackBar()\n  useReleaseCabinet(({ version, date }) => {\n    enqueueInfo(`Verze aplikace: ${version}, nasazeno: ${formatDateTime(date)}`)\n  })\n\n  useInterval(() => {\n    if (registrationWorkerRef.current) {\n      logUpdate('checking...')\n      registrationWorkerRef.current.update()\n    }\n  }, updateCheckInterval)\n\n  React.useEffect(\n    () => {\n      const onMessage = (event: MessageEvent) => {\n        if (event.data === 'update-applied') {\n          logUpdate('restarting to apply...')\n          onRestart()\n        }\n      }\n      if (serviceWorker) {\n        serviceWorker.addEventListener('message', onMessage)\n        return () => {\n          serviceWorker.removeEventListener('message', onMessage)\n        }\n      } else {\n        logUpdate('serviceWorker is not supported')\n        return () => {\n          /* noop */\n        }\n      }\n    },\n    [onRestart, serviceWorker],\n  )\n\n  React.useEffect(() => {\n    const init = updateWorker.register({\n      onInit: reg => {\n        registrationWorkerRef.current = reg\n      },\n      onUpdate: sw => {\n        updateWorkerRef.current = sw\n        state.updatePending = true\n        logUpdate('new update is available')\n      },\n    })\n    // service worker is normally using load event, but since this\n    // done after the load, it has to be triggered manually\n    init()\n  }, [])\n\n  const onCancel = () => {\n    logUpdate('user postponed')\n    state.updatePending = false\n    setTimeout(() => {\n      logUpdate('reminding update to user again')\n      state.updatePending = true\n    }, postponeTimeout)\n  }\n\n  const onConfirm = () => {\n    state.updatePending = false\n    if (updateWorkerRef.current) {\n      logUpdate('user confirmed')\n      updateWorkerRef.current.postMessage('apply-update')\n    }\n  }\n\n  return useObserver(() => (\n    <>\n      {state.updatePending ? (\n        <UpdateSnack\n          autoHideDuration={autoUpdateDelay}\n          onCancel={onCancel}\n          onConfirm={onConfirm}\n        />\n      ) : null}\n      {children}\n    </>\n  ))\n}\n\ninterface IUpdateSnackProps extends Omit<SnackbarProps, 'open'> {\n  autoHideDuration: number\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport function UpdateSnack(props: IUpdateSnackProps) {\n  const getNow = useNow()\n  const { onConfirm, onCancel, ...rest } = props\n  const [endTime] = React.useState(() =>\n    addMilliseconds(getNow(), props.autoHideDuration),\n  )\n  const now = useTimer({ interval: SECOND, enabled: true })\n  const remainingSeconds = formatDistanceStrict(endTime, now)\n  return (\n    <Snackbar\n      open={true}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center',\n      }}\n      classes={{ root: snackStyles.variantInfo }}\n      message={\n        <span data-testid=\"message\">{i18n.t`Application will be restarted in ${remainingSeconds} to apply available update.`}</span>\n      }\n      disableWindowBlurListener={true}\n      action={[\n        <Button\n          key=\"later\"\n          color=\"secondary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"postpone-button\"\n          onClick={onCancel}\n        >\n          {i18n.t`Postpone update`}\n        </Button>,\n        <Button\n          key=\"confirm\"\n          color=\"primary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"confirm-button\"\n          onClick={onConfirm}\n        >\n          {i18n.t`Restart now`}\n        </Button>,\n      ]}\n      onClose={onCancel}\n      {...rest}\n    />\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Warning } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\n\nconst IconStyled = styled.div`\n  margin-top: 2rem;\n  color: #d39f40;\n  text-align: center;\n`\n\nexport const ErrorPage: React.FC = props => (\n  <FullPageLayout\n    width={15}\n    pageTitle={i18n.t`Application error`}\n    useBackButton={true}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          We are sorry, but there is an internal error in the app. Our team was\n          notified and will fix this soon.\n        </Trans>\n        <IconStyled>\n          <Warning style={{ fontSize: '5rem' }} />\n        </IconStyled>\n      </h3>\n    </Card>\n  </FullPageLayout>\n)\n","import React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { logRouting } from '../helpers/logger'\n\ninterface IProps {}\n\nexport const LogRoute: React.FC<IProps> = props => (\n  <Route>\n    {({ location }) => {\n      logRouting('at %s', location.pathname)\n      return null\n    }}\n  </Route>\n)\n","import debug from 'debug'\nimport { when } from 'mobx'\nimport React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { WithRoot } from '../atoms/WithRoot'\n\nconst log = debug('routing')\n\nexport const RedirectAfterLogin = () => (\n  <Route\n    children={({ location, history }) => (\n      <WithRoot\n        render={root => {\n          if (!root.auth.isAuthenticatedUser) {\n            const route = (location.state && location.state.origin) || '/'\n            const waitForAuthentication = () => root.auth.isAuthenticated\n            const redirectAfterLogin = () => {\n              history.replace(route)\n            }\n            when(waitForAuthentication, redirectAfterLogin)\n            log('will redirect to %s when auth', route)\n          }\n          return null\n        }}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { WithRoot } from '../atoms/WithRoot'\nimport { RedirectToLogin } from './RedirectToLogin'\n\nexport const RedirectAfterLogout = () => (\n  <WithRoot\n    observe={false}\n    render={root => {\n      if (root.auth.isAuthenticated) {\n        root.auth.invalidate()\n        return <RedirectToLogin useOrigin={false} />\n      }\n      return <Redirect to=\"/\" />\n    }}\n  />\n)\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport Pacman from '../atoms/Pacman'\nimport { ErrorPage } from '../pages/ErrorPage'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { LogRoute } from './LogRoute'\nimport { RedirectAfterLogin } from './RedirectAfterLogin'\nimport { RedirectAfterLogout } from './RedirectAfterLogout'\nimport { SecureRoute } from './SecureRoute'\n\nconst PasswordLoginRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordLoginRoute'),\n)\n\nconst PasswordChangeRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordChangeRoute'),\n)\n\nconst PasswordResetRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordResetRoute'),\n)\n\nconst MainDashboardPage = React.lazy(() =>\n  import('../segments/main/pages/MainDashboardPage'),\n)\n\nconst OrderRoutes = React.lazy(() =>\n  import('../segments/order/routes/OrderRoutes'),\n)\n\nconst KitchenRoutes = React.lazy(() =>\n  import('../segments/kitchen/routes/KitchenRoutes'),\n)\n\nconst SettingsRoutes = React.lazy(() =>\n  import('../segments/settings/routes/SettingsRoutes'),\n)\n\nconst OverviewRoutes = React.lazy(() =>\n  import('../segments/overview/routes/OverviewRoutes'),\n)\n\nconst SupportPage = React.lazy(() =>\n  import('../segments/main/pages/SupportPage'),\n)\n\nexport const Routing = () => (\n  <React.Suspense fallback={<Pacman />}>\n    <LogRoute />\n    <RedirectAfterLogin />\n    <Switch>\n      <LazyRoute path=\"/login\" exact={true} component={PasswordLoginRoute} />\n      <LazyRoute path=\"/reset\" exact={true} component={PasswordResetRoute} />\n      <LazyRoute\n        path=\"/recovery/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <LazyRoute\n        path=\"/register/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <SecureRoute path=\"/\" exact={true} component={MainDashboardPage} />\n      <SecureRoute path=\"/order\" component={OrderRoutes} />\n      <SecureRoute path=\"/kitchen\" component={KitchenRoutes} />\n      <SecureRoute path=\"/settings\" component={SettingsRoutes} />\n      <SecureRoute path=\"/overview\" component={OverviewRoutes} />\n      <LazyRoute path=\"/support\" component={SupportPage} />\n      <Route path=\"/error\" component={ErrorPage} />\n      <Route path=\"/logout\" component={RedirectAfterLogout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </React.Suspense>\n)\n","import './App.css'\n\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ConnectionWarning } from './atoms/ConnectionWarning'\nimport { ErrorContainer } from './atoms/ErrorContainer'\nimport Pacman from './atoms/Pacman'\nimport { useRoot } from './atoms/RootProvider'\nimport { SnackProvider } from './atoms/SnackProvider'\nimport { UpdateHandler } from './atoms/UpdateHandler'\nimport { Routing } from './routes/Routing'\n\nexport const App: React.FC = () => {\n  const { user } = useRoot()\n  return (\n    <ErrorContainer prod={process.env.NODE_ENV === 'production'}>\n      <>\n        <ConnectionWarning />\n        <SnackProvider>\n          <UpdateHandler>\n            <Observer>\n              {() => (user.isReady ? <Routing /> : <Pacman />)}\n            </Observer>\n          </UpdateHandler>\n        </SnackProvider>\n      </>\n    </ErrorContainer>\n  )\n}\n","import React from 'react'\nimport { Provider as GoodByeProvider } from 'react-goodbye'\nimport { BrowserRouter } from 'react-router-dom'\n\ninterface IProps {}\n\nexport const Router: React.FC<IProps> = ({ children }) => (\n  <GoodByeProvider>\n    {({ handleGetUserConfirm }) => (\n      <BrowserRouter getUserConfirmation={handleGetUserConfirm}>\n        {children}\n      </BrowserRouter>\n    )}\n  </GoodByeProvider>\n)\n","import { createMuiTheme, MuiThemeProvider } from '@material-ui/core'\nimport React from 'react'\n\ninterface IProps {}\n\nexport const ThemeProvider: React.FC<IProps> = ({ children }) => {\n  const theme = createMuiTheme({\n    typography: {\n      useNextVariants: true,\n    },\n  })\n\n  return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>\n}\n","import './enableDebug'\n\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport { App } from './App'\nimport { RootProvider } from './atoms/RootProvider'\nimport { Router } from './atoms/Router'\nimport { ThemeProvider } from './atoms/ThemeProvider'\nimport { installSentry } from './helpers/sentry'\nimport { I18nManager } from './i18n'\n\nconst Main = () => (\n  <ThemeProvider>\n    <RootProvider>\n      <I18nManager>\n        <Router>\n          <App />\n        </Router>\n      </I18nManager>\n    </RootProvider>\n  </ThemeProvider>\n)\n\ninstallSentry(() => {\n  const rootElement = document.getElementById('root')\n  render(<Main />, rootElement)\n})\n","import React from 'react'\nimport { Route, RouteComponentProps, RouteProps } from 'react-router-dom'\n\nimport Pacman from '../atoms/Pacman'\n\ninterface IProps<Params> extends Omit<RouteProps, 'render' | 'children'> {\n  component: React.ComponentType<RouteComponentProps<Params>>\n}\n\nexport function LazyRoute<Params = {}>({\n  component: Component,\n  ...props\n}: IProps<Params>) {\n  return (\n    <Route\n      {...props}\n      render={routeProps => (\n        <React.Suspense fallback={<Pacman />}>\n          <Component {...routeProps} />\n        </React.Suspense>\n      )}\n    />\n  )\n}\n","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<string>\n\n  readonly includeOldFinished?: boolean\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: string\n\n  readonly closed?: Maybe<boolean>\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityCreate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityUpdate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment method used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<string>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: Maybe<number>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  FeAdmin = 'FE_ADMIN',\n  FeKitchen = 'FE_KITCHEN',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n  Pwa = 'PWA',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type MPasswordChangeVariables = {\n  readonly password: string\n}\n\nexport type MPasswordChangeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateUserPassword: MPasswordChangeUpdateUserPassword\n}\n\nexport type MPasswordChangeUpdateUserPassword = {\n  readonly __typename?: 'UserUpdatedPassword'\n\n  readonly id: string\n\n  readonly token: string\n}\n\nexport type GUserModelBootstrapVariables = {\n  readonly userId: string\n}\n\nexport type GUserModelBootstrapQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: GUserModelBootstrapUser\n\n  readonly userPermissions: GUserModelBootstrapUserPermissions\n}\n\nexport type GUserModelBootstrapUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly language: GUserModelBootstrapLanguage\n\n  readonly branches: ReadonlyArray<GUserModelBootstrapBranches>\n}\n\nexport type GUserModelBootstrapLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly rawCode: string\n}\n\nexport type GUserModelBootstrapBranches = GCompanyBranchFragment\n\nexport type GUserModelBootstrapUserPermissions = {\n  readonly __typename?: 'UserPermission'\n\n  readonly canCancelOrders: boolean\n\n  readonly canCreateOrder: boolean\n}\n\nexport type GAddressSuggestVariables = {\n  readonly search: string\n}\n\nexport type GAddressSuggestQuery = {\n  readonly __typename?: 'Query'\n\n  readonly suggest: ReadonlyArray<GAddressSuggestSuggest>\n}\n\nexport type GAddressSuggestSuggest = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly state: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly gps: Maybe<GAddressSuggestGps>\n}\n\nexport type GAddressSuggestGps = GGeoPointFragment\n\nexport type GLogoutWidgetVariables = {\n  readonly id: string\n}\n\nexport type GLogoutWidgetQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: GLogoutWidgetUser\n}\n\nexport type GLogoutWidgetUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type GCreateSpecificBusinessHourVariables = {\n  readonly input: InputBusinessHourSpecificDateCreate\n}\n\nexport type GCreateSpecificBusinessHourMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GCreateSpecificBusinessHourResult\n}\n\nexport type GCreateSpecificBusinessHourResult = GSpecificBusinessHourFragment\n\nexport type GDeleteSpecificBusinessHourVariables = {\n  readonly id: string\n}\n\nexport type GDeleteSpecificBusinessHourMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GDeleteSpecificBusinessHourResult\n}\n\nexport type GDeleteSpecificBusinessHourResult = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n}\n\nexport type GSpecificBusinessHoursVariables = {\n  readonly branchId: string\n}\n\nexport type GSpecificBusinessHoursQuery = {\n  readonly __typename?: 'Query'\n\n  readonly businessHours: ReadonlyArray<GSpecificBusinessHoursBusinessHours>\n}\n\nexport type GSpecificBusinessHoursBusinessHours = GSpecificBusinessHourFragment\n\nexport type MAcceptOrderVariables = {\n  readonly orderId: string\n  readonly customer: InputCustomerCreate\n  readonly deliverAt?: Maybe<string>\n  readonly note?: Maybe<string>\n}\n\nexport type MAcceptOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: MAcceptOrderFinishOrder\n}\n\nexport type MAcceptOrderFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MAcceptOrderOrder\n}\n\nexport type MAcceptOrderOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type MSetOrderDeliveryTimeVariables = {\n  readonly orderId: string\n  readonly time: number\n}\n\nexport type MSetOrderDeliveryTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly orderNotifyCustomer: MSetOrderDeliveryTimeOrderNotifyCustomer\n}\n\nexport type MSetOrderDeliveryTimeOrderNotifyCustomer = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n}\n\nexport type MUpdateOrderVariables = {\n  readonly orderId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n}\n\nexport type MUpdateOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MUpdateOrderUpdateOrder\n}\n\nexport type MUpdateOrderUpdateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type GValidateLocationVariables = {\n  readonly branchId: string\n  readonly latitude: number\n  readonly longitude: number\n}\n\nexport type GValidateLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly resolveLocation: GValidateLocationResolveLocation\n}\n\nexport type GValidateLocationResolveLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly inDeliveryLocation: boolean\n}\n\nexport type GCreateOrderVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly callEventId?: Maybe<string>\n}\n\nexport type GCreateOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrder: GCreateOrderCreateOrder\n}\n\nexport type GCreateOrderCreateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type MCancelOrderVariables = {\n  readonly orderId: string\n}\n\nexport type MCancelOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MCancelOrderAddOrderState\n}\n\nexport type MCancelOrderAddOrderState = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type GOrderVamVariables = {\n  readonly branchId: string\n  readonly phone: string\n}\n\nexport type GOrderVamQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vamCustomer: GOrderVamVamCustomer\n}\n\nexport type GOrderVamVamCustomer = {\n  readonly __typename?: 'CustomerInformation'\n\n  readonly isFound: boolean\n\n  readonly email: string\n\n  readonly firstName: string\n\n  readonly lastName: string\n\n  readonly lastOrder: Maybe<GOrderVamLastOrder>\n\n  readonly locations: ReadonlyArray<GOrderVamLocations>\n}\n\nexport type GOrderVamLastOrder = {\n  readonly __typename?: 'Order'\n\n  readonly note: Maybe<string>\n}\n\nexport type GOrderVamLocations = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly state: Maybe<string>\n\n  readonly gps: Maybe<GOrderVamGps>\n}\n\nexport type GOrderVamGps = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type QOrderFormDeliverAtDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderFormDeliverAtDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly times: QOrderFormDeliverAtDefaultsTimes\n}\n\nexport type QOrderFormDeliverAtDefaultsTimes = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly deliveryTime: number\n\n  readonly pickupTime: number\n}\n\nexport type GOrderPromoVariables = {\n  readonly branchId: string\n}\n\nexport type GOrderPromoQuery = {\n  readonly __typename?: 'Query'\n\n  readonly promoCodes: ReadonlyArray<GOrderPromoPromoCodes>\n}\n\nexport type GOrderPromoPromoCodes = {\n  readonly __typename?: 'PromoCode'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type MAddOrderPromoVariables = {\n  readonly orderId: string\n  readonly code: string\n}\n\nexport type MAddOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderPromoCode: MAddOrderPromoAddOrderPromoCode\n}\n\nexport type MAddOrderPromoAddOrderPromoCode = {\n  readonly __typename?: 'OrderWithErrors'\n\n  readonly userErrors: ReadonlyArray<string>\n}\n\nexport type MRemoveOrderPromoVariables = {\n  readonly orderId: string\n  readonly codeId: string\n}\n\nexport type MRemoveOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly removeOrderPromoCode: MRemoveOrderPromoRemoveOrderPromoCode\n}\n\nexport type MRemoveOrderPromoRemoveOrderPromoCode = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type GOrderMenuVariables = {\n  readonly branchId: string\n}\n\nexport type GOrderMenuQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orderMenu: ReadonlyArray<GOrderMenuOrderMenu>\n}\n\nexport type GOrderMenuOrderMenu = GOrderMenuCategoryFragment\n\nexport type SOrderCallVariables = {}\n\nexport type SOrderCallSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly call: SOrderCallCall\n}\n\nexport type SOrderCallCall = {\n  readonly __typename?: 'UserCallingCustomerSubscription'\n\n  readonly eventId: string\n\n  readonly phone: string\n\n  readonly prefix: string\n\n  readonly isRinging: boolean\n}\n\nexport type GOrderCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n  readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type GOrderCountQuery = {\n  readonly __typename?: 'Query'\n\n  readonly ordersCount: number\n}\n\nexport type SOrderCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n  readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type SOrderCountSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrdersCount: SOrderCountUpdatedOrdersCount\n}\n\nexport type SOrderCountUpdatedOrdersCount = {\n  readonly __typename?: 'OrderCountSubscription'\n\n  readonly ordersCount: number\n}\n\nexport type GSortMenuCategoryVariables = {\n  readonly categoryId: string\n  readonly offset: number\n}\n\nexport type GSortMenuCategoryMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly success: boolean\n}\n\nexport type GMenuCategoryCreateVariables = {\n  readonly input: InputWareCategoryCreate\n}\n\nexport type GMenuCategoryCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createWareCategory: GMenuCategoryCreateCreateWareCategory\n}\n\nexport type GMenuCategoryCreateCreateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type GMenuCategoryUpdateVariables = {\n  readonly categoryId: string\n  readonly input: InputWareCategoryUpdate\n}\n\nexport type GMenuCategoryUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: GMenuCategoryUpdateUpdateWareCategory\n}\n\nexport type GMenuCategoryUpdateUpdateWareCategory = GMenuCategoryFormFragment\n\nexport type GMenuCategoryVisibilityVariables = {\n  readonly categoryId: string\n  readonly visible: boolean\n}\n\nexport type GMenuCategoryVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: GMenuCategoryVisibilityUpdateWareCategory\n}\n\nexport type GMenuCategoryVisibilityUpdateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type GMenuCategoryDeleteVariables = {\n  readonly categoryId: string\n}\n\nexport type GMenuCategoryDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyWareCategory: GMenuCategoryDeleteDestroyWareCategory\n}\n\nexport type GMenuCategoryDeleteDestroyWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type GMenuRecipeVisibilityVariables = {\n  readonly recipeId: string\n  readonly visible: boolean\n}\n\nexport type GMenuRecipeVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateRecipe: GMenuRecipeVisibilityUpdateRecipe\n}\n\nexport type GMenuRecipeVisibilityUpdateRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type GMenuRecipeCreateVariables = {\n  readonly recipe: InputRecipeCreate\n}\n\nexport type GMenuRecipeCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createRecipe: GMenuRecipeCreateCreateRecipe\n}\n\nexport type GMenuRecipeCreateCreateRecipe = GMenuRecipeFragment\n\nexport type GMenuRecipeUpdateVariables = {\n  readonly recipeId: string\n  readonly recipe: InputRecipeUpdate\n}\n\nexport type GMenuRecipeUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateRecipe: GMenuRecipeUpdateUpdateRecipe\n}\n\nexport type GMenuRecipeUpdateUpdateRecipe = GMenuRecipeFragment\n\nexport type GMenuRecipeDeleteVariables = {\n  readonly recipeId: string\n}\n\nexport type GMenuRecipeDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyRecipe: GMenuRecipeDeleteDestroyRecipe\n}\n\nexport type GMenuRecipeDeleteDestroyRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type GMenuStockCreateVariables = {\n  readonly stockItem: InputStockItemCreate\n}\n\nexport type GMenuStockCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createStockItem: GMenuStockCreateCreateStockItem\n}\n\nexport type GMenuStockCreateCreateStockItem = GMenuStockItemFragment\n\nexport type GMenuStockUpdateVariables = {\n  readonly stockId: string\n  readonly stockItem: InputStockItemUpdate\n}\n\nexport type GMenuStockUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateStockItem: GMenuStockUpdateUpdateStockItem\n}\n\nexport type GMenuStockUpdateUpdateStockItem = GMenuStockItemFragment\n\nexport type GMenuStockDeleteVariables = {\n  readonly stockId: string\n}\n\nexport type GMenuStockDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyStockItem: GMenuStockDeleteDestroyStockItem\n}\n\nexport type GMenuStockDeleteDestroyStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n}\n\nexport type GAllergensVariables = {}\n\nexport type GAllergensQuery = {\n  readonly __typename?: 'Query'\n\n  readonly allergens: ReadonlyArray<GAllergensAllergens>\n}\n\nexport type GAllergensAllergens = GAllergenFragment\n\nexport type GCurrenciesVariables = {\n  readonly branchId: string\n}\n\nexport type GCurrenciesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly currencies: ReadonlyArray<GCurrenciesCurrencies>\n\n  readonly companyBranch: GCurrenciesCompanyBranch\n}\n\nexport type GCurrenciesCurrencies = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n\n  readonly code: string\n}\n\nexport type GCurrenciesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly address: GCurrenciesAddress\n}\n\nexport type GCurrenciesAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<GCurrenciesCountry>\n}\n\nexport type GCurrenciesCountry = {\n  readonly __typename?: 'Country'\n\n  readonly currency: GCurrenciesCurrency\n}\n\nexport type GCurrenciesCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n}\n\nexport type GVatsVariables = {\n  readonly branchId: string\n}\n\nexport type GVatsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vats: ReadonlyArray<GVatsVats>\n}\n\nexport type GVatsVats = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n\n  readonly vat: number\n}\n\nexport type GWareUnitsVariables = {}\n\nexport type GWareUnitsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareUnits: ReadonlyArray<GWareUnitsWareUnits>\n}\n\nexport type GWareUnitsWareUnits = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: WareUnitEnum\n}\n\nexport type QMenuCategoryFilterVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuCategoryFilterQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryFilterCategories>\n}\n\nexport type QMenuCategoryFilterCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly countRecipes: number\n\n  readonly categoryType: QMenuCategoryFilterCategoryType\n}\n\nexport type QMenuCategoryFilterCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuCategoryFormVariables = {\n  readonly categoryId: string\n}\n\nexport type GMenuCategoryFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareCategory: GMenuCategoryFormWareCategory\n}\n\nexport type GMenuCategoryFormWareCategory = GMenuCategoryFormFragment\n\nexport type GCategoryListVariables = {\n  readonly branchId: string\n  readonly categoryType: WareCategoryTypeEnum\n}\n\nexport type GCategoryListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<GCategoryListCategories>\n}\n\nexport type GCategoryListCategories = GMenuCategoryListItemFragment\n\nexport type QMenuGuideDownloadVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuGuideDownloadQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QMenuGuideDownloadCompanyBranch\n}\n\nexport type QMenuGuideDownloadCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly foodMenuUrl: Maybe<string>\n}\n\nexport type GMenuRecipeFormVariables = {\n  readonly recipeId: string\n}\n\nexport type GMenuRecipeFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: GMenuRecipeFormRecipe\n}\n\nexport type GMenuRecipeFormRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly image: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly visible: boolean\n\n  readonly recipeType: GMenuRecipeFormRecipeType\n\n  readonly sourcePrices: ReadonlyArray<GMenuRecipeFormSourcePrices>\n\n  readonly sideDishes: ReadonlyArray<GMenuRecipeFormSideDishes>\n\n  readonly categories: ReadonlyArray<GMenuRecipeFormCategories>\n\n  readonly sourceAssociatedRecipes: ReadonlyArray<\n    GMenuRecipeFormSourceAssociatedRecipes\n  >\n\n  readonly sourceIngredients: ReadonlyArray<GMenuRecipeFormSourceIngredients>\n}\n\nexport type GMenuRecipeFormRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuRecipeFormSourcePrices = GMenuRecipePriceFragment\n\nexport type GMenuRecipeFormSideDishes = GMenuCategoryListItemFragment\n\nexport type GMenuRecipeFormCategories = GMenuCategoryListItemFragment\n\nexport type GMenuRecipeFormSourceAssociatedRecipes = {\n  readonly __typename?: 'RecipeRelation'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipeFormPriceType\n\n  readonly recipe: GMenuRecipeForm_Recipe\n}\n\nexport type GMenuRecipeFormPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipeForm_Recipe = GMenuAssocRecipeFragment\n\nexport type GMenuRecipeFormSourceIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly quantity: number\n\n  readonly stockItem: GMenuRecipeFormStockItem\n}\n\nexport type GMenuRecipeFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly label: string\n\n  readonly wareUnit: GMenuRecipeFormWareUnit\n\n  readonly allergens: ReadonlyArray<GMenuRecipeFormAllergens>\n}\n\nexport type GMenuRecipeFormWareUnit = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type GMenuRecipeFormAllergens = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly enum: AllergenEnum\n}\n\nexport type GMenuRecipeFormAssocVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuRecipeFormAssocQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<GMenuRecipeFormAssocRecipes>\n}\n\nexport type GMenuRecipeFormAssocRecipes = GMenuAssocRecipeFragment\n\nexport type GMenuRecipeDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuRecipeDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GMenuRecipeDefaultsCompanyBranch\n}\n\nexport type GMenuRecipeDefaultsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly vats: ReadonlyArray<GMenuRecipeDefaultsVats>\n\n  readonly currency: GMenuRecipeDefaultsCurrency\n}\n\nexport type GMenuRecipeDefaultsVats = {\n  readonly __typename?: 'VatPriceType'\n\n  readonly vatId: string\n\n  readonly priceType: GMenuRecipeDefaultsPriceType\n}\n\nexport type GMenuRecipeDefaultsPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipeDefaultsCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GMenuRecipeListVariables = {\n  readonly branchId: string\n  readonly categoryId?: Maybe<string>\n  readonly categoryType?: Maybe<WareCategoryTypeEnum>\n}\n\nexport type GMenuRecipeListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<GMenuRecipeListRecipes>\n}\n\nexport type GMenuRecipeListRecipes = GMenuRecipeFragment\n\nexport type GMenuStockDepositVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuStockDepositQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<GMenuStockDepositStockItems>\n}\n\nexport type GMenuStockDepositStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly note: string\n\n  readonly quantity: number\n\n  readonly wareUnit: GMenuStockDepositWareUnit\n}\n\nexport type GMenuStockDepositWareUnit = GWareUnitFragment\n\nexport type GChangeMenuStockQuantityVariables = {\n  readonly stockItem: string\n  readonly quantityChange: number\n}\n\nexport type GChangeMenuStockQuantityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly changeAmountStockItem: GChangeMenuStockQuantityChangeAmountStockItem\n}\n\nexport type GChangeMenuStockQuantityChangeAmountStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly quantity: number\n}\n\nexport type GMenuStockFormVariables = {\n  readonly stockId: string\n}\n\nexport type GMenuStockFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: GMenuStockFormStockItem\n}\n\nexport type GMenuStockFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly note: string\n\n  readonly nameLabel: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly wareUnit: GMenuStockFormWareUnit\n\n  readonly allergens: ReadonlyArray<GMenuStockFormAllergens>\n\n  readonly companyBranch: GMenuStockFormCompanyBranch\n}\n\nexport type GMenuStockFormWareUnit = GWareUnitFragment\n\nexport type GMenuStockFormAllergens = GAllergenFragment\n\nexport type GMenuStockFormCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuStockDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GMenuStockDefaultsCompanyBranch\n}\n\nexport type GMenuStockDefaultsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockListVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuStockListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<GMenuStockListStockItems>\n}\n\nexport type GMenuStockListStockItems = GMenuStockItemFragment\n\nexport type GStockRecipesVariables = {\n  readonly stockId: string\n}\n\nexport type GStockRecipesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: GStockRecipesStockItem\n}\n\nexport type GStockRecipesStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly ingredients: ReadonlyArray<GStockRecipesIngredients>\n}\n\nexport type GStockRecipesIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly recipe: GStockRecipesRecipe\n}\n\nexport type GStockRecipesRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly recipeType: GStockRecipesRecipeType\n}\n\nexport type GStockRecipesRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GOrderBranchLocationVariables = {\n  readonly branchId: string\n}\n\nexport type GOrderBranchLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GOrderBranchLocationCompanyBranch\n}\n\nexport type GOrderBranchLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GOrderBranchLocationGps\n}\n\nexport type GOrderBranchLocationGps = GGeoPointFragment\n\nexport type GOrderLocationVariables = {\n  readonly orderId: string\n}\n\nexport type GOrderLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GOrderLocationOrder\n}\n\nexport type GOrderLocationOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly gps: Maybe<GOrderLocationGps>\n}\n\nexport type GOrderLocationGps = GGeoPointFragment\n\nexport type GUpdateOrderStateVariables = {\n  readonly orderId: string\n  readonly state: OrderStateEnum\n}\n\nexport type GUpdateOrderStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: GUpdateOrderStateAddOrderState\n}\n\nexport type GUpdateOrderStateAddOrderState = {\n  readonly __typename?: 'Order'\n\n  readonly orderTiming: ReadonlyArray<GUpdateOrderStateOrderTiming>\n} & GOrderStateCategoryFragment\n\nexport type GUpdateOrderStateOrderTiming = {\n  readonly __typename?: 'OrderStateCategoryRelation'\n\n  readonly createdAt: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type GSendOrderNotificationVariables = {\n  readonly orderId: string\n  readonly minutes: number\n}\n\nexport type GSendOrderNotificationMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly orderNotifyCustomer: GSendOrderNotificationOrderNotifyCustomer\n}\n\nexport type GSendOrderNotificationOrderNotifyCustomer = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n}\n\nexport type GSelectOrderDriverVariables = {\n  readonly driverId: string\n  readonly orderId: string\n}\n\nexport type GSelectOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createUserDeliveringOrder: GSelectOrderDriverCreateUserDeliveringOrder\n}\n\nexport type GSelectOrderDriverCreateUserDeliveringOrder = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: GSelectOrderDriverOrder\n}\n\nexport type GSelectOrderDriverOrder = GOrderDriverFragment\n\nexport type GRemoveOrderDriverVariables = {\n  readonly orderDriverId: string\n}\n\nexport type GRemoveOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyUserDeliveringOrder: GRemoveOrderDriverDestroyUserDeliveringOrder\n}\n\nexport type GRemoveOrderDriverDestroyUserDeliveringOrder = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: GRemoveOrderDriverOrder\n}\n\nexport type GRemoveOrderDriverOrder = GOrderDriverFragment\n\nexport type MChangeOrderToPickupVariables = {\n  readonly orderId: string\n}\n\nexport type MChangeOrderToPickupMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderDeliveryToPickup: MChangeOrderToPickupUpdateOrderDeliveryToPickup\n}\n\nexport type MChangeOrderToPickupUpdateOrderDeliveryToPickup = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliveryType: Maybe<MChangeOrderToPickupDeliveryType>\n}\n\nexport type MChangeOrderToPickupDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type QOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QOrderMapDeliveriesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly deliveries: ReadonlyArray<QOrderMapDeliveriesDeliveries>\n}\n\nexport type QOrderMapDeliveriesDeliveries = GOrderMapDeliveryFragment\n\nexport type SOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type SOrderMapDeliveriesSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly update: SOrderMapDeliveriesUpdate\n}\n\nexport type SOrderMapDeliveriesUpdate = {\n  readonly __typename?: 'TransportationDeviceUserUpdateSubscription'\n\n  readonly actionType: SubscriptionActionType\n\n  readonly device: Maybe<SOrderMapDeliveriesDevice>\n}\n\nexport type SOrderMapDeliveriesDevice = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly user: SOrderMapDeliveriesUser\n} & GOrderMapDeviceFragment\n\nexport type SOrderMapDeliveriesUser = GOrderMapDriverFragment\n\nexport type GOrderDriverSelectionVariables = {\n  readonly orderId: string\n  readonly branchId: ReadonlyArray<string>\n}\n\nexport type GOrderDriverSelectionQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GOrderDriverSelectionOrder\n\n  readonly drivers: ReadonlyArray<GOrderDriverSelectionDrivers>\n}\n\nexport type GOrderDriverSelectionOrder = GOrderDriverFragment\n\nexport type GOrderDriverSelectionDrivers = GDriverFragment\n\nexport type GBranchDeliveryTimeVariables = {\n  readonly branchId: string\n}\n\nexport type GBranchDeliveryTimeQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GBranchDeliveryTimeCompanyBranch\n}\n\nexport type GBranchDeliveryTimeCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n}\n\nexport type MUpdateBranchDeliveryTimeVariables = {\n  readonly branchId: string\n  readonly time: number\n}\n\nexport type MUpdateBranchDeliveryTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateDefaultOrderProcessTime: MUpdateBranchDeliveryTimeUpdateDefaultOrderProcessTime\n}\n\nexport type MUpdateBranchDeliveryTimeUpdateDefaultOrderProcessTime = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n}\n\nexport type GOrderDetailVariables = {\n  readonly id: string\n}\n\nexport type GOrderDetailQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GOrderDetailOrder\n}\n\nexport type GOrderDetailOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly companyBranch: GOrderDetailCompanyBranch\n\n  readonly customer: GOrderDetailCustomer\n\n  readonly customerOrdersCountCurrent: number\n\n  readonly customerOrdersCountTotal: number\n\n  readonly note: Maybe<string>\n\n  readonly previousNote: Maybe<string>\n\n  readonly allAppliedRules: ReadonlyArray<string>\n\n  readonly items: ReadonlyArray<GOrderDetailItems>\n\n  readonly totalSum: GOrderDetailTotalSum\n\n  readonly transportFee: GOrderDetailTransportFee\n\n  readonly coverPrice: GOrderDetailCoverPrice\n\n  readonly totalDiscount: GOrderDetailTotalDiscount\n\n  readonly orderTiming: ReadonlyArray<GOrderDetailOrderTiming>\n} & GOrderDriverFragment\n\nexport type GOrderDetailCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type GOrderDetailCustomer = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly emails: ReadonlyArray<GOrderDetailEmails>\n\n  readonly phones: ReadonlyArray<GOrderDetailPhones>\n}\n\nexport type GOrderDetailEmails = GEmailFragment\n\nexport type GOrderDetailPhones = GPhoneFragment\n\nexport type GOrderDetailItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<GOrderDetailSidedishes>\n} & GOrderDetailWareFragment\n\nexport type GOrderDetailSidedishes = GOrderDetailWareFragment\n\nexport type GOrderDetailTotalSum = GPriceFragment\n\nexport type GOrderDetailTransportFee = GPriceFragment\n\nexport type GOrderDetailCoverPrice = GPriceFragment\n\nexport type GOrderDetailTotalDiscount = GPriceFragment\n\nexport type GOrderDetailOrderTiming = {\n  readonly __typename?: 'OrderStateCategoryRelation'\n\n  readonly createdAt: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type GOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n  readonly includeOldFinished?: Maybe<boolean>\n}\n\nexport type GOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<GOrderListOrders>\n\n  readonly orderStateCategories: ReadonlyArray<GOrderListOrderStateCategories>\n}\n\nexport type GOrderListOrders = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (GOrderStateCategoryFragment &\n  GOrderListTickerFragment &\n  GOrderMarkerFragment)\n\nexport type GOrderListOrderStateCategories = {\n  readonly __typename?: 'OrderStateCategory'\n\n  readonly code: string\n\n  readonly enum: OrderStateCategoryEnum\n}\n\nexport type SOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SOrderListUpdatedOrder\n}\n\nexport type SOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SOrderListOrder>\n}\n\nexport type SOrderListOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (GOrderStateCategoryFragment &\n  GOrderListTickerFragment &\n  GOrderMarkerFragment)\n\nexport type GOrderStateVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type GOrderStateQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GOrderStateOrder\n\n  readonly companyBranch: GOrderStateCompanyBranch\n}\n\nexport type GOrderStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly deliveryType: Maybe<GOrderStateDeliveryType>\n\n  readonly isCancelable: boolean\n} & GOrderStateCategoryFragment\n\nexport type GOrderStateDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type GOrderStateCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowedCategories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type GClosureHistoryVariables = {\n  readonly branchId: string\n  readonly dateFrom: string\n  readonly dateTo: string\n}\n\nexport type GClosureHistoryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly financialReports: ReadonlyArray<GClosureHistoryFinancialReports>\n}\n\nexport type GClosureHistoryFinancialReports = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type GClosureReportQueryVariables = {\n  readonly branchId: string\n  readonly reportId: string\n  readonly showReport: boolean\n}\n\nexport type GClosureReportQueryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly lastReport: GClosureReportQueryLastReport\n\n  readonly report: Maybe<GClosureReportQueryReport>\n}\n\nexport type GClosureReportQueryLastReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type GClosureReportQueryReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type GCreateFinancialReportVariables = {\n  readonly companyBranchId: string\n}\n\nexport type GCreateFinancialReportMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GCreateFinancialReportResult\n}\n\nexport type GCreateFinancialReportResult = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n}\n\nexport type GDailyStatisticsVariables = {\n  readonly branches: ReadonlyArray<string>\n  readonly dateTimeFrom: string\n  readonly dateTimeTo: string\n}\n\nexport type GDailyStatisticsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: GDailyStatisticsStats\n}\n\nexport type GDailyStatisticsStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly categoryStatisticsPlain: string\n\n  readonly dailyStatisticsPlain: string\n\n  readonly deliveryStatisticsPlain: string\n\n  readonly driversStatisticsPlain: string\n}\n\nexport type GOrdersStatisticsListVariables = {\n  readonly branches: ReadonlyArray<string>\n  readonly dateTimeFrom: string\n  readonly dateTimeTo: string\n  readonly pagination: InputPaginationParams\n}\n\nexport type GOrdersStatisticsListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: GOrdersStatisticsListStats\n}\n\nexport type GOrdersStatisticsListStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly orders: GOrdersStatisticsListOrders\n}\n\nexport type GOrdersStatisticsListOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly list: ReadonlyArray<GOrdersStatisticsListList>\n}\n\nexport type GOrdersStatisticsListList = GOrderListTickerFragment &\n  GOrderStateCategoryFragment\n\nexport type GOrdersStatisticsVariables = {\n  readonly branches: ReadonlyArray<string>\n  readonly dateTimeFrom: string\n  readonly dateTimeTo: string\n}\n\nexport type GOrdersStatisticsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: GOrdersStatisticsStats\n}\n\nexport type GOrdersStatisticsStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly finishedOrders: GOrdersStatisticsFinishedOrders\n\n  readonly orderStatisticsPlain: string\n}\n\nexport type GOrdersStatisticsFinishedOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly fees: GOrdersStatisticsFees\n\n  readonly onlinePayments: GOrdersStatisticsOnlinePayments\n\n  readonly total: GOrdersStatisticsTotal\n\n  readonly finishedCount: number\n\n  readonly cancelledCount: number\n}\n\nexport type GOrdersStatisticsFees = GStatsPriceFragment\n\nexport type GOrdersStatisticsOnlinePayments = GStatsPriceFragment\n\nexport type GOrdersStatisticsTotal = GStatsPriceFragment\n\nexport type QUserMenuLanguagesVariables = {}\n\nexport type QUserMenuLanguagesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly languages: ReadonlyArray<QUserMenuLanguagesLanguages>\n}\n\nexport type QUserMenuLanguagesLanguages = {\n  readonly __typename?: 'Language'\n\n  readonly code: string\n\n  readonly enum: LanguageEnum\n\n  readonly rawCode: string\n}\n\nexport type MUserMenuChangeLanguageVariables = {\n  readonly userId: string\n  readonly lang: LanguageEnum\n}\n\nexport type MUserMenuChangeLanguageMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateUser: MUserMenuChangeLanguageUpdateUser\n}\n\nexport type MUserMenuChangeLanguageUpdateUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly language: MUserMenuChangeLanguageLanguage\n}\n\nexport type MUserMenuChangeLanguageLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly enum: LanguageEnum\n}\n\nexport type GCreateZoneVariables = {\n  readonly branchId: string\n  readonly points?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n}\n\nexport type GCreateZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createZone: GCreateZoneCreateZone\n}\n\nexport type GCreateZoneCreateZone = GZoneFragment\n\nexport type GUpdateZoneVariables = {\n  readonly zoneId: string\n  readonly update: InputZoneUpdate\n}\n\nexport type GUpdateZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZone: GUpdateZoneUpdateZone\n}\n\nexport type GUpdateZoneUpdateZone = GZoneFragment\n\nexport type GUpdateZonePriorityVariables = {\n  readonly zoneId: string\n  readonly offset: number\n}\n\nexport type GUpdateZonePriorityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZonePriority: ReadonlyArray<\n    GUpdateZonePriorityUpdateZonePriority\n  >\n}\n\nexport type GUpdateZonePriorityUpdateZonePriority = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly priority: number\n}\n\nexport type GDestroyZoneVariables = {\n  readonly zoneId: string\n}\n\nexport type GDestroyZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyZone: GDestroyZoneDestroyZone\n}\n\nexport type GDestroyZoneDestroyZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n}\n\nexport type GZonesVariables = {\n  readonly branchesId: ReadonlyArray<string>\n}\n\nexport type GZonesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zones: ReadonlyArray<GZonesZones>\n}\n\nexport type GZonesZones = GZoneFragment\n\nexport type GZoneLocationVariables = {\n  readonly zoneId: string\n}\n\nexport type GZoneLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zone: GZoneLocationZone\n}\n\nexport type GZoneLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly companyBranch: GZoneLocationCompanyBranch\n}\n\nexport type GZoneLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GZoneLocationGps\n}\n\nexport type GZoneLocationGps = GGeoPointFragment\n\nexport type GZoneBranchLocationVariables = {\n  readonly branchId: string\n}\n\nexport type GZoneBranchLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GZoneBranchLocationCompanyBranch\n}\n\nexport type GZoneBranchLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GZoneBranchLocationGps\n}\n\nexport type GZoneBranchLocationGps = GGeoPointFragment\n\nexport type GZoneColorsVariables = {}\n\nexport type GZoneColorsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zoneColors: ReadonlyArray<GZoneColorsZoneColors>\n}\n\nexport type GZoneColorsZoneColors = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type MKitchenRecipeStateVariables = {\n  readonly recipeId: string\n  readonly state: OrderRecipeStateEnum\n}\n\nexport type MKitchenRecipeStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipeState: MKitchenRecipeStateUpdateOrderRecipeState\n}\n\nexport type MKitchenRecipeStateUpdateOrderRecipeState = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly orderRecipeState: MKitchenRecipeStateOrderRecipeState\n\n  readonly order: MKitchenRecipeStateOrder\n}\n\nexport type MKitchenRecipeStateOrderRecipeState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type MKitchenRecipeStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type QKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QKitchenOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QKitchenOrderListOrders>\n}\n\nexport type QKitchenOrderListOrders = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FKitchenOrderFragment\n\nexport type SKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SKitchenOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SKitchenOrderListUpdatedOrder\n}\n\nexport type SKitchenOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SKitchenOrderListOrder>\n}\n\nexport type SKitchenOrderListOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FKitchenOrderFragment\n\nexport type GAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly state: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n}\n\nexport type GCompanyBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly address: GCompanyBranchAddress\n\n  readonly gps: GCompanyBranchGps\n\n  readonly brand: GCompanyBranchBrand\n}\n\nexport type GCompanyBranchAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<GCompanyBranchCountry>\n}\n\nexport type GCompanyBranchCountry = {\n  readonly __typename?: 'Country'\n\n  readonly phonePrefix: string\n}\n\nexport type GCompanyBranchGps = GGeoPointFragment\n\nexport type GCompanyBranchBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type GCustomerFragment = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly defaultEmail: Maybe<GCustomerDefaultEmail>\n\n  readonly defaultPhone: Maybe<GCustomerDefaultPhone>\n}\n\nexport type GCustomerDefaultEmail = GEmailFragment\n\nexport type GCustomerDefaultPhone = GPhoneFragment\n\nexport type GEmailFragment = {\n  readonly __typename?: 'Email'\n\n  readonly email: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type GGeoPointFragment = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type GPhoneFragment = {\n  readonly __typename?: 'Phone'\n\n  readonly phone: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type GPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n}\n\nexport type GSpecificBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly companyBranch: GSpecificBusinessHourCompanyBranch\n\n  readonly specificDate: Maybe<string>\n\n  readonly specificDateLocalized: Maybe<string>\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n\n  readonly openAt: string\n\n  readonly closeAt: string\n}\n\nexport type GSpecificBusinessHourCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type GOrderMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly price: GOrderMenuRecipePrice\n\n  readonly sidedishCount: number\n}\n\nexport type GOrderMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: GOrderMenuRecipeCurrency\n}\n\nexport type GOrderMenuRecipeCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GOrderMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly pictogram: Maybe<string>\n\n  readonly recipes: ReadonlyArray<GOrderMenuCategoryRecipes>\n}\n\nexport type GOrderMenuCategoryRecipes = GOrderMenuRecipeFragment\n\nexport type GAllergenFragment = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: AllergenEnum\n\n  readonly category: number\n}\n\nexport type GWareUnitFragment = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly enum: WareUnitEnum\n\n  readonly code: string\n}\n\nexport type GMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly visible: boolean\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly availableAmount: number\n\n  readonly prices: ReadonlyArray<GMenuRecipePrices>\n\n  readonly recipeType: GMenuRecipeRecipeType\n}\n\nexport type GMenuRecipePrices = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipePriceType\n\n  readonly price: GMenuRecipePrice\n}\n\nexport type GMenuRecipePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n} & GPriceFragment\n\nexport type GMenuRecipeRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuStockItemFragment = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly note: string\n\n  readonly plu: Maybe<string>\n\n  readonly quantity: number\n\n  readonly nameLabel: string\n\n  readonly allergens: ReadonlyArray<GMenuStockItemAllergens>\n\n  readonly wareUnit: GMenuStockItemWareUnit\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockItemAllergens = GAllergenFragment\n\nexport type GMenuStockItemWareUnit = GWareUnitFragment\n\nexport type GMenuCategoryFormFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly visible: boolean\n\n  readonly categoryType: GMenuCategoryFormCategoryType\n\n  readonly pictogram: Maybe<string>\n\n  readonly recipes: ReadonlyArray<GMenuCategoryFormRecipes>\n}\n\nexport type GMenuCategoryFormCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuCategoryFormRecipes = GMenuRecipeFragment\n\nexport type GMenuCategoryListItemFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly countRecipes: number\n\n  readonly visible: boolean\n\n  readonly categoryType: GMenuCategoryListItemCategoryType\n}\n\nexport type GMenuCategoryListItemCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuRecipePriceFragment = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipePricePriceType\n\n  readonly price: GMenuRecipePricePrice\n\n  readonly vat: GMenuRecipePriceVat\n}\n\nexport type GMenuRecipePricePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipePricePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly currency: GMenuRecipePriceCurrency\n} & GPriceFragment\n\nexport type GMenuRecipePriceCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GMenuRecipePriceVat = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n}\n\nexport type GMenuAssocRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n}\n\nexport type GOrderStateCategoryFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type GDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type GOrderDriverFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly driver: Maybe<GOrderDriverDriver>\n}\n\nexport type GOrderDriverDriver = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly id: string\n\n  readonly user: GOrderDriverUser\n}\n\nexport type GOrderDriverUser = GDriverFragment\n\nexport type GOrderListTickerFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly isPaidWithCard: boolean\n\n  readonly deliveryType: Maybe<GOrderListTickerDeliveryType>\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliverAtWorst: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly companyBranch: GOrderListTickerCompanyBranch\n\n  readonly address: GOrderListTickerAddress\n\n  readonly customer: GOrderListTickerCustomer\n\n  readonly totalSum: GOrderListTickerTotalSum\n}\n\nexport type GOrderListTickerDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type GOrderListTickerCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly oldOrderThreshold: number\n}\n\nexport type GOrderListTickerAddress = FAddressFragment\n\nexport type GOrderListTickerCustomer = GCustomerFragment\n\nexport type GOrderListTickerTotalSum = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: GOrderListTickerCurrency\n}\n\nexport type GOrderListTickerCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GOrderDetailWareFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: GOrderDetailWareRecipe\n\n  readonly price: GOrderDetailWarePrice\n}\n\nexport type GOrderDetailWareRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type GOrderDetailWarePrice = GPriceFragment\n\nexport type GOrderMarkerFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly gps: Maybe<GOrderMarkerGps>\n}\n\nexport type GOrderMarkerGps = GGeoPointFragment\n\nexport type GOrderMapDeviceFragment = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly id: string\n\n  readonly lastPosition: Maybe<GOrderMapDeviceLastPosition>\n\n  readonly isFinalized: boolean\n}\n\nexport type GOrderMapDeviceLastPosition = {\n  readonly __typename?: 'GeoPositionWithTimestamp'\n\n  readonly gps: GOrderMapDeviceGps\n\n  readonly timestamp: string\n}\n\nexport type GOrderMapDeviceGps = GGeoPointFragment\n\nexport type GOrderMapDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n\n  readonly countUndeliveredOrders: number\n}\n\nexport type GOrderMapDeliveryFragment = {\n  readonly __typename?: 'User'\n\n  readonly device: Maybe<GOrderMapDeliveryDevice>\n} & GOrderMapDriverFragment\n\nexport type GOrderMapDeliveryDevice = GOrderMapDeviceFragment\n\nexport type GOrderMapActiveDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly countUndeliveredOrders: number\n\n  readonly userDeliveringOrders: ReadonlyArray<\n    GOrderMapActiveDriverUserDeliveringOrders\n  >\n}\n\nexport type GOrderMapActiveDriverUserDeliveringOrders = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly id: string\n\n  readonly order: GOrderMapActiveDriverOrder\n}\n\nexport type GOrderMapActiveDriverOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type GStatsPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: GStatsPriceCurrency\n}\n\nexport type GStatsPriceCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GZoneFragment = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly enabled: boolean\n\n  readonly priority: number\n\n  readonly companyBranch: GZoneCompanyBranch\n\n  readonly geoPolygon: ReadonlyArray<GZoneGeoPolygon>\n\n  readonly priceRangeRules: ReadonlyArray<GZonePriceRangeRules>\n\n  readonly minimalOrderPrice: GZoneMinimalOrderPrice\n\n  readonly zoneColor: GZoneZoneColor\n}\n\nexport type GZoneCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly brand: GZoneBrand\n}\n\nexport type GZoneBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type GZoneGeoPolygon = GGeoPointFragment\n\nexport type GZonePriceRangeRules = GZonePriceRangeFragment\n\nexport type GZoneMinimalOrderPrice = GPriceFragment\n\nexport type GZoneZoneColor = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type GZonePriceRangeFragment = {\n  readonly __typename?: 'ZonePriceRangeRule'\n\n  readonly toPrice: GZonePriceRangeToPrice\n\n  readonly price: GZonePriceRangePrice\n}\n\nexport type GZonePriceRangeToPrice = GPriceFragment\n\nexport type GZonePriceRangePrice = GPriceFragment\n\nexport type FAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly state: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n}\n\nexport type FKitchenOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly deliveryType: Maybe<FKitchenOrderDeliveryType>\n\n  readonly companyBranch: FKitchenOrderCompanyBranch\n\n  readonly address: FKitchenOrderAddress\n\n  readonly customer: FKitchenOrderCustomer\n\n  readonly note: Maybe<string>\n\n  readonly previousNote: Maybe<string>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n\n  readonly items: ReadonlyArray<FKitchenOrderItems>\n}\n\nexport type FKitchenOrderDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FKitchenOrderCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FKitchenOrderAddress = FAddressFragment\n\nexport type FKitchenOrderCustomer = GCustomerFragment\n\nexport type FKitchenOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<FKitchenOrderSidedishes>\n} & FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderSidedishes = FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderRecipeFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly orderRecipeState: FKitchenOrderRecipeOrderRecipeState\n\n  readonly recipe: FKitchenOrderRecipeRecipe\n}\n\nexport type FKitchenOrderRecipeOrderRecipeState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type FKitchenOrderRecipeRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nimport * as Hooks from '@speedlo/graphql'\nimport gql from 'graphql-tag'\n\n// ====================================================\n// Fragments\n// ====================================================\n\nexport const GAddressFragmentDoc = gql`\n  fragment GAddress on JsonAddress {\n    state\n    city\n    street\n    houseNumber\n  }\n`\n\nexport const GGeoPointFragmentDoc = gql`\n  fragment GGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const GCompanyBranchFragmentDoc = gql`\n  fragment GCompanyBranch on CompanyBranch {\n    id\n    name\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    gps {\n      ...GGeoPoint\n    }\n    brand {\n      id\n      name\n    }\n  }\n\n  ${GGeoPointFragmentDoc}\n`\n\nexport const GSpecificBusinessHourFragmentDoc = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const GOrderMenuRecipeFragmentDoc = gql`\n  fragment GOrderMenuRecipe on Recipe {\n    id\n    code\n    nameLabel\n    descriptionLabel\n    price(warePriceType: DELIVERY) {\n      value\n      currency {\n        code\n      }\n    }\n    sidedishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const GOrderMenuCategoryFragmentDoc = gql`\n  fragment GOrderMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n    recipes(enabled: true, isAvailable: true) {\n      ...GOrderMenuRecipe\n    }\n  }\n\n  ${GOrderMenuRecipeFragmentDoc}\n`\n\nexport const GAllergenFragmentDoc = gql`\n  fragment GAllergen on Allergen {\n    id\n    code\n    enum\n    category\n  }\n`\n\nexport const GWareUnitFragmentDoc = gql`\n  fragment GWareUnit on WareUnit {\n    id\n    enum\n    code\n  }\n`\n\nexport const GMenuStockItemFragmentDoc = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...GAllergen\n    }\n    wareUnit {\n      ...GWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n\n  ${GAllergenFragmentDoc}\n  ${GWareUnitFragmentDoc}\n`\n\nexport const GPriceFragmentDoc = gql`\n  fragment GPrice on PriceConverted {\n    value\n  }\n`\n\nexport const GMenuRecipeFragmentDoc = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...GPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n\n  ${GPriceFragmentDoc}\n`\n\nexport const GMenuCategoryFormFragmentDoc = gql`\n  fragment GMenuCategoryForm on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    pictogram\n    recipes {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport const GMenuCategoryListItemFragmentDoc = gql`\n  fragment GMenuCategoryListItem on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    countRecipes\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n  }\n`\n\nexport const GMenuRecipePriceFragmentDoc = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...GPrice\n    }\n    vat {\n      id\n    }\n  }\n\n  ${GPriceFragmentDoc}\n`\n\nexport const GMenuAssocRecipeFragmentDoc = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const GOrderStateCategoryFragmentDoc = gql`\n  fragment GOrderStateCategory on Order {\n    id\n    orderStateCategory\n  }\n`\n\nexport const GDriverFragmentDoc = gql`\n  fragment GDriver on User {\n    id\n    firstName\n    lastName\n  }\n`\n\nexport const GOrderDriverFragmentDoc = gql`\n  fragment GOrderDriver on Order {\n    id\n    driver: userDeliveringOrder {\n      id\n      user {\n        ...GDriver\n      }\n    }\n  }\n\n  ${GDriverFragmentDoc}\n`\n\nexport const FAddressFragmentDoc = gql`\n  fragment FAddress on JsonAddress {\n    state\n    city\n    street\n    houseNumber\n  }\n`\n\nexport const GEmailFragmentDoc = gql`\n  fragment GEmail on Email {\n    email\n    description\n    default\n  }\n`\n\nexport const GPhoneFragmentDoc = gql`\n  fragment GPhone on Phone {\n    phone\n    description\n    default\n  }\n`\n\nexport const GCustomerFragmentDoc = gql`\n  fragment GCustomer on JsonCustomer {\n    firstName\n    lastName\n    defaultEmail {\n      ...GEmail\n    }\n    defaultPhone {\n      ...GPhone\n    }\n  }\n\n  ${GEmailFragmentDoc}\n  ${GPhoneFragmentDoc}\n`\n\nexport const GOrderListTickerFragmentDoc = gql`\n  fragment GOrderListTicker on Order {\n    id\n    createdAt\n    isPaidWithCard\n    deliveryType {\n      enum\n    }\n    deliverAt\n    deliverAtWorst\n    deliveredAt\n    companyBranch {\n      id\n      name\n      oldOrderThreshold\n    }\n    address {\n      ...FAddress\n    }\n    customer {\n      ...GCustomer\n    }\n    totalSum {\n      value\n      currency {\n        code\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${GCustomerFragmentDoc}\n`\n\nexport const GOrderDetailWareFragmentDoc = gql`\n  fragment GOrderDetailWare on OrderRecipe {\n    id\n    recipe {\n      id\n      code\n      nameLabel\n    }\n    price {\n      ...GPrice\n    }\n  }\n\n  ${GPriceFragmentDoc}\n`\n\nexport const GOrderMarkerFragmentDoc = gql`\n  fragment GOrderMarker on Order {\n    id\n    deliverAt\n    gps {\n      ...GGeoPoint\n    }\n  }\n\n  ${GGeoPointFragmentDoc}\n`\n\nexport const GOrderMapDriverFragmentDoc = gql`\n  fragment GOrderMapDriver on User {\n    id\n    initials\n    countUndeliveredOrders\n  }\n`\n\nexport const GOrderMapDeviceFragmentDoc = gql`\n  fragment GOrderMapDevice on TransportationDeviceUser {\n    id\n    lastPosition {\n      gps: geoPosition {\n        ...GGeoPoint\n      }\n      timestamp\n    }\n    isFinalized\n  }\n\n  ${GGeoPointFragmentDoc}\n`\n\nexport const GOrderMapDeliveryFragmentDoc = gql`\n  fragment GOrderMapDelivery on User {\n    ...GOrderMapDriver\n    device: usedTransportationDevice {\n      ...GOrderMapDevice\n    }\n  }\n\n  ${GOrderMapDriverFragmentDoc}\n  ${GOrderMapDeviceFragmentDoc}\n`\n\nexport const GOrderMapActiveDriverFragmentDoc = gql`\n  fragment GOrderMapActiveDriver on User {\n    id\n    firstName\n    lastName\n    countUndeliveredOrders\n    userDeliveringOrders(onlyUndelivered: true) {\n      id\n      order {\n        id\n      }\n    }\n  }\n`\n\nexport const GStatsPriceFragmentDoc = gql`\n  fragment GStatsPrice on PriceConverted {\n    value\n    currency {\n      code\n    }\n  }\n`\n\nexport const GZonePriceRangeFragmentDoc = gql`\n  fragment GZonePriceRange on ZonePriceRangeRule {\n    toPrice {\n      ...GPrice\n    }\n    price {\n      ...GPrice\n    }\n  }\n\n  ${GPriceFragmentDoc}\n`\n\nexport const GZoneFragmentDoc = gql`\n  fragment GZone on Zone {\n    id\n    name\n    enabled\n    priority\n    companyBranch {\n      id\n      brand {\n        id\n      }\n    }\n    geoPolygon {\n      ...GGeoPoint\n    }\n    priceRangeRules {\n      ...GZonePriceRange\n    }\n    minimalOrderPrice {\n      ...GPrice\n    }\n    zoneColor {\n      id\n      code\n      color\n    }\n  }\n\n  ${GGeoPointFragmentDoc}\n  ${GZonePriceRangeFragmentDoc}\n  ${GPriceFragmentDoc}\n`\n\nexport const FKitchenOrderRecipeFragmentDoc = gql`\n  fragment FKitchenOrderRecipe on OrderRecipe {\n    id\n    orderRecipeState {\n      enum\n    }\n    recipe {\n      id\n      code\n      nameLabel\n    }\n  }\n`\n\nexport const FKitchenOrderFragmentDoc = gql`\n  fragment FKitchenOrder on Order {\n    id\n    deliverAt\n    deliveredAt\n    deliveryType {\n      enum\n    }\n    companyBranch {\n      id\n      name\n    }\n    address {\n      ...FAddress\n    }\n    customer {\n      ...GCustomer\n    }\n    note\n    previousNote\n    orderStateCategory(target: FE_KITCHEN)\n    items {\n      ...FKitchenOrderRecipe\n      sidedishes: sideDishes {\n        ...FKitchenOrderRecipe\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${GCustomerFragmentDoc}\n  ${FKitchenOrderRecipeFragmentDoc}\n`\n\n// ====================================================\n// Hooks\n// ====================================================\n\nexport const MPasswordChangeDocument = gql`\n  mutation MPasswordChange($password: String!) {\n    updateUserPassword(newPassword: $password) {\n      id\n      token\n    }\n  }\n`\n\nexport function useMPasswordChange(\n  baseOptions?: Hooks.MutationHookOptions<\n    MPasswordChangeMutation,\n    MPasswordChangeVariables\n  >,\n) {\n  return Hooks.useMutation<MPasswordChangeMutation, MPasswordChangeVariables>(\n    MPasswordChangeDocument,\n    baseOptions,\n  )\n}\n\nexport const GUserModelBootstrapDocument = gql`\n  query GUserModelBootstrap($userId: ID!) {\n    user(id: $userId) {\n      id\n      language {\n        rawCode\n      }\n      branches: accessibleBranches {\n        ...GCompanyBranch\n      }\n    }\n    userPermissions: permissions {\n      canCancelOrders\n      canCreateOrder\n    }\n    userAccess: __schema {\n      queries: queryType {\n        fields {\n          name\n        }\n      }\n      mutations: mutationType {\n        fields {\n          name\n        }\n      }\n      subscriptions: subscriptionType {\n        fields {\n          name\n        }\n      }\n    }\n  }\n\n  ${GCompanyBranchFragmentDoc}\n`\n\nexport function useGUserModelBootstrap(\n  variables?: GUserModelBootstrapVariables,\n  baseOptions?: Hooks.QueryHookOptions<GUserModelBootstrapVariables>,\n) {\n  return Hooks.useQuery<GUserModelBootstrapQuery, GUserModelBootstrapVariables>(\n    GUserModelBootstrapDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GAddressSuggestDocument = gql`\n  query GAddressSuggest($search: String!) {\n    suggest: suggestGeolocation(address: $search) {\n      state\n      city\n      street\n      houseNumber\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n\n  ${GGeoPointFragmentDoc}\n`\n\nexport function useGAddressSuggest(\n  variables?: GAddressSuggestVariables,\n  baseOptions?: Hooks.QueryHookOptions<GAddressSuggestVariables>,\n) {\n  return Hooks.useQuery<GAddressSuggestQuery, GAddressSuggestVariables>(\n    GAddressSuggestDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GLogoutWidgetDocument = gql`\n  query GLogoutWidget($id: ID!) {\n    user(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n`\n\nexport function useGLogoutWidget(\n  variables?: GLogoutWidgetVariables,\n  baseOptions?: Hooks.QueryHookOptions<GLogoutWidgetVariables>,\n) {\n  return Hooks.useQuery<GLogoutWidgetQuery, GLogoutWidgetVariables>(\n    GLogoutWidgetDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCreateSpecificBusinessHourDocument = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n\n  ${GSpecificBusinessHourFragmentDoc}\n`\n\nexport function useGCreateSpecificBusinessHour(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateSpecificBusinessHourMutation,\n    GCreateSpecificBusinessHourVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreateSpecificBusinessHourMutation,\n    GCreateSpecificBusinessHourVariables\n  >(GCreateSpecificBusinessHourDocument, baseOptions)\n}\n\nexport const GDeleteSpecificBusinessHourDocument = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n\nexport function useGDeleteSpecificBusinessHour(\n  baseOptions?: Hooks.MutationHookOptions<\n    GDeleteSpecificBusinessHourMutation,\n    GDeleteSpecificBusinessHourVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GDeleteSpecificBusinessHourMutation,\n    GDeleteSpecificBusinessHourVariables\n  >(GDeleteSpecificBusinessHourDocument, baseOptions)\n}\n\nexport const GSpecificBusinessHoursDocument = gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n\n  ${GSpecificBusinessHourFragmentDoc}\n`\n\nexport function useGSpecificBusinessHours(\n  variables?: GSpecificBusinessHoursVariables,\n  baseOptions?: Hooks.QueryHookOptions<GSpecificBusinessHoursVariables>,\n) {\n  return Hooks.useQuery<\n    GSpecificBusinessHoursQuery,\n    GSpecificBusinessHoursVariables\n  >(GSpecificBusinessHoursDocument, variables, baseOptions)\n}\n\nexport const MAcceptOrderDocument = gql`\n  mutation MAcceptOrder(\n    $orderId: ID!\n    $customer: InputCustomerCreate!\n    $deliverAt: DateTime\n    $note: String\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        customer: $customer\n        note: $note\n        deliverAt: $deliverAt\n        paymentMethod: CASH\n        paymentGate: CASH\n      }\n    ) {\n      userErrors\n      order {\n        id\n      }\n    }\n  }\n`\n\nexport function useMAcceptOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAcceptOrderMutation,\n    MAcceptOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MAcceptOrderMutation, MAcceptOrderVariables>(\n    MAcceptOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const MSetOrderDeliveryTimeDocument = gql`\n  mutation MSetOrderDeliveryTime($orderId: ID!, $time: Int!) {\n    orderNotifyCustomer(id: $orderId, minutes: $time) {\n      id\n      deliverAt\n    }\n  }\n`\n\nexport function useMSetOrderDeliveryTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSetOrderDeliveryTimeMutation,\n    MSetOrderDeliveryTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSetOrderDeliveryTimeMutation,\n    MSetOrderDeliveryTimeVariables\n  >(MSetOrderDeliveryTimeDocument, baseOptions)\n}\n\nexport const MUpdateOrderDocument = gql`\n  mutation MUpdateOrder(\n    $orderId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n  ) {\n    updateOrder(\n      id: $orderId\n      order: { deliveryType: $deliveryType, deliverAt: $deliverAt, gps: $gps }\n    ) {\n      id\n    }\n  }\n`\n\nexport function useMUpdateOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MUpdateOrderMutation,\n    MUpdateOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MUpdateOrderMutation, MUpdateOrderVariables>(\n    MUpdateOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const GValidateLocationDocument = gql`\n  query GValidateLocation(\n    $branchId: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    resolveLocation(\n      companyBranch: $branchId\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      inDeliveryLocation\n    }\n  }\n`\n\nexport function useGValidateLocation(\n  variables?: GValidateLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GValidateLocationVariables>,\n) {\n  return Hooks.useQuery<GValidateLocationQuery, GValidateLocationVariables>(\n    GValidateLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCreateOrderDocument = gql`\n  mutation GCreateOrder(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $callEventId: ID\n  ) {\n    createOrder(\n      order: {\n        companyBranch: $branchId\n        deliveryType: $deliveryType\n        callEventId: $callEventId\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: {}\n        warePriceType: DELIVERY\n        orderOrigin: STAFF\n      }\n    ) {\n      id\n    }\n  }\n`\n\nexport function useGCreateOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateOrderMutation,\n    GCreateOrderVariables\n  >,\n) {\n  return Hooks.useMutation<GCreateOrderMutation, GCreateOrderVariables>(\n    GCreateOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const MCancelOrderDocument = gql`\n  mutation MCancelOrder($orderId: ID!) {\n    addOrderState(order: $orderId, orderState: CANCELED) {\n      id\n    }\n  }\n`\n\nexport function useMCancelOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCancelOrderMutation,\n    MCancelOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MCancelOrderMutation, MCancelOrderVariables>(\n    MCancelOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const GOrderVamDocument = gql`\n  query GOrderVam($branchId: ID!, $phone: String!) {\n    vamCustomer: vamInformation(companyBranchId: $branchId, phone: $phone) {\n      isFound\n      email\n      firstName\n      lastName\n      lastOrder {\n        note\n      }\n      locations {\n        street\n        houseNumber\n        city\n        state\n        gps {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n`\n\nexport function useGOrderVam(\n  variables?: GOrderVamVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderVamVariables>,\n) {\n  return Hooks.useQuery<GOrderVamQuery, GOrderVamVariables>(\n    GOrderVamDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderFormDeliverAtDefaultsDocument = gql`\n  query QOrderFormDeliverAtDefaults($branchId: ID!) {\n    times: companyBranch(id: $branchId) {\n      id\n      deliveryTime: defaultDeliveryTime\n      pickupTime: defaultPickupTime\n    }\n  }\n`\n\nexport function useQOrderFormDeliverAtDefaults(\n  variables?: QOrderFormDeliverAtDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFormDeliverAtDefaultsVariables>,\n) {\n  return Hooks.useQuery<\n    QOrderFormDeliverAtDefaultsQuery,\n    QOrderFormDeliverAtDefaultsVariables\n  >(QOrderFormDeliverAtDefaultsDocument, variables, baseOptions)\n}\n\nexport const GOrderPromoDocument = gql`\n  query GOrderPromo($branchId: ID!) {\n    promoCodes(promoCode: { companyBranch: $branchId, enabled: true }) {\n      id\n      code\n    }\n  }\n`\n\nexport function useGOrderPromo(\n  variables?: GOrderPromoVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderPromoVariables>,\n) {\n  return Hooks.useQuery<GOrderPromoQuery, GOrderPromoVariables>(\n    GOrderPromoDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MAddOrderPromoDocument = gql`\n  mutation MAddOrderPromo($orderId: ID!, $code: String!) {\n    addOrderPromoCode(order: $orderId, promoCode: $code) {\n      userErrors: errors\n    }\n  }\n`\n\nexport function useMAddOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddOrderPromoMutation,\n    MAddOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<MAddOrderPromoMutation, MAddOrderPromoVariables>(\n    MAddOrderPromoDocument,\n    baseOptions,\n  )\n}\n\nexport const MRemoveOrderPromoDocument = gql`\n  mutation MRemoveOrderPromo($orderId: ID!, $codeId: ID!) {\n    removeOrderPromoCode(order: $orderId, promoCode: $codeId) {\n      id\n    }\n  }\n`\n\nexport function useMRemoveOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >(MRemoveOrderPromoDocument, baseOptions)\n}\n\nexport const GOrderMenuDocument = gql`\n  query GOrderMenu($branchId: ID!) {\n    orderMenu: wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n    ) {\n      ...GOrderMenuCategory\n    }\n  }\n\n  ${GOrderMenuCategoryFragmentDoc}\n`\n\nexport function useGOrderMenu(\n  variables?: GOrderMenuVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderMenuVariables>,\n) {\n  return Hooks.useQuery<GOrderMenuQuery, GOrderMenuVariables>(\n    GOrderMenuDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderCallDocument = gql`\n  subscription SOrderCall {\n    call: updatedUserCallingCustomer {\n      eventId\n      phone\n      prefix\n      isRinging\n    }\n  }\n`\n\nexport function useSOrderCall(\n  variables?: SOrderCallVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderCallSubscription,\n    SOrderCallVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderCallSubscription, SOrderCallVariables>(\n    SOrderCallDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderCountDocument = gql`\n  query GOrderCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    ordersCount(companyBranches: $branchesId, orderStateCategories: $categories)\n  }\n`\n\nexport function useGOrderCount(\n  variables?: GOrderCountVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderCountVariables>,\n) {\n  return Hooks.useQuery<GOrderCountQuery, GOrderCountVariables>(\n    GOrderCountDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderCountDocument = gql`\n  subscription SOrderCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    updatedOrdersCount(companyBranches: $branchesId) {\n      ordersCount(\n        companyBranches: $branchesId\n        orderStateCategoriesOR: $categories\n      )\n    }\n  }\n`\n\nexport function useSOrderCount(\n  variables?: SOrderCountVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderCountSubscription,\n    SOrderCountVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderCountSubscription, SOrderCountVariables>(\n    SOrderCountDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GSortMenuCategoryDocument = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport function useGSortMenuCategory(\n  baseOptions?: Hooks.MutationHookOptions<\n    GSortMenuCategoryMutation,\n    GSortMenuCategoryVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GSortMenuCategoryMutation,\n    GSortMenuCategoryVariables\n  >(GSortMenuCategoryDocument, baseOptions)\n}\n\nexport const GMenuCategoryCreateDocument = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport function useGMenuCategoryCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryCreateMutation,\n    GMenuCategoryCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryCreateMutation,\n    GMenuCategoryCreateVariables\n  >(GMenuCategoryCreateDocument, baseOptions)\n}\n\nexport const GMenuCategoryUpdateDocument = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...GMenuCategoryForm\n    }\n  }\n\n  ${GMenuCategoryFormFragmentDoc}\n`\n\nexport function useGMenuCategoryUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryUpdateMutation,\n    GMenuCategoryUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryUpdateMutation,\n    GMenuCategoryUpdateVariables\n  >(GMenuCategoryUpdateDocument, baseOptions)\n}\n\nexport const GMenuCategoryVisibilityDocument = gql`\n  mutation GMenuCategoryVisibility($categoryId: ID!, $visible: Boolean!) {\n    updateWareCategory(id: $categoryId, wareCategory: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useGMenuCategoryVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryVisibilityMutation,\n    GMenuCategoryVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryVisibilityMutation,\n    GMenuCategoryVisibilityVariables\n  >(GMenuCategoryVisibilityDocument, baseOptions)\n}\n\nexport const GMenuCategoryDeleteDocument = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuCategoryDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryDeleteMutation,\n    GMenuCategoryDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryDeleteMutation,\n    GMenuCategoryDeleteVariables\n  >(GMenuCategoryDeleteDocument, baseOptions)\n}\n\nexport const GMenuRecipeVisibilityDocument = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useGMenuRecipeVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeVisibilityMutation,\n    GMenuRecipeVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeVisibilityMutation,\n    GMenuRecipeVisibilityVariables\n  >(GMenuRecipeVisibilityDocument, baseOptions)\n}\n\nexport const GMenuRecipeCreateDocument = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeCreateMutation,\n    GMenuRecipeCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeCreateMutation,\n    GMenuRecipeCreateVariables\n  >(GMenuRecipeCreateDocument, baseOptions)\n}\n\nexport const GMenuRecipeUpdateDocument = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeUpdateMutation,\n    GMenuRecipeUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeUpdateMutation,\n    GMenuRecipeUpdateVariables\n  >(GMenuRecipeUpdateDocument, baseOptions)\n}\n\nexport const GMenuRecipeDeleteDocument = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuRecipeDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeDeleteMutation,\n    GMenuRecipeDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeDeleteMutation,\n    GMenuRecipeDeleteVariables\n  >(GMenuRecipeDeleteDocument, baseOptions)\n}\n\nexport const GMenuStockCreateDocument = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockCreateMutation,\n    GMenuStockCreateVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockCreateMutation, GMenuStockCreateVariables>(\n    GMenuStockCreateDocument,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockUpdateDocument = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockUpdateMutation,\n    GMenuStockUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockUpdateMutation, GMenuStockUpdateVariables>(\n    GMenuStockUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockDeleteDocument = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuStockDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockDeleteMutation,\n    GMenuStockDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockDeleteMutation, GMenuStockDeleteVariables>(\n    GMenuStockDeleteDocument,\n    baseOptions,\n  )\n}\n\nexport const GAllergensDocument = gql`\n  query GAllergens {\n    allergens {\n      ...GAllergen\n    }\n  }\n\n  ${GAllergenFragmentDoc}\n`\n\nexport function useGAllergens(\n  variables?: GAllergensVariables,\n  baseOptions?: Hooks.QueryHookOptions<GAllergensVariables>,\n) {\n  return Hooks.useQuery<GAllergensQuery, GAllergensVariables>(\n    GAllergensDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCurrenciesDocument = gql`\n  query GCurrencies($branchId: ID!) {\n    currencies {\n      enum\n      code\n    }\n    companyBranch(id: $branchId) {\n      address {\n        country {\n          currency {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useGCurrencies(\n  variables?: GCurrenciesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GCurrenciesVariables>,\n) {\n  return Hooks.useQuery<GCurrenciesQuery, GCurrenciesVariables>(\n    GCurrenciesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GVatsDocument = gql`\n  query GVats($branchId: ID!) {\n    vats(companyBranch: $branchId) {\n      id\n      vat\n    }\n  }\n`\n\nexport function useGVats(\n  variables?: GVatsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GVatsVariables>,\n) {\n  return Hooks.useQuery<GVatsQuery, GVatsVariables>(\n    GVatsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GWareUnitsDocument = gql`\n  query GWareUnits {\n    wareUnits {\n      id\n      code\n      enum\n    }\n  }\n`\n\nexport function useGWareUnits(\n  variables?: GWareUnitsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GWareUnitsVariables>,\n) {\n  return Hooks.useQuery<GWareUnitsQuery, GWareUnitsVariables>(\n    GWareUnitsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuCategoryFilterDocument = gql`\n  query QMenuCategoryFilter($branchId: ID!) {\n    categories: wareCategories(companyBranch: $branchId) {\n      id\n      nameLabel\n      countRecipes\n      categoryType: wareCategoryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useQMenuCategoryFilter(\n  variables?: QMenuCategoryFilterVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryFilterVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryFilterQuery, QMenuCategoryFilterVariables>(\n    QMenuCategoryFilterDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuCategoryFormDocument = gql`\n  query GMenuCategoryForm($categoryId: ID!) {\n    wareCategory(id: $categoryId) {\n      ...GMenuCategoryForm\n    }\n  }\n\n  ${GMenuCategoryFormFragmentDoc}\n`\n\nexport function useGMenuCategoryForm(\n  variables?: GMenuCategoryFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuCategoryFormVariables>,\n) {\n  return Hooks.useQuery<GMenuCategoryFormQuery, GMenuCategoryFormVariables>(\n    GMenuCategoryFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCategoryListDocument = gql`\n  query GCategoryList($branchId: ID!, $categoryType: WareCategoryTypeEnum!) {\n    categories: wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: $categoryType\n    ) {\n      ...GMenuCategoryListItem\n    }\n  }\n\n  ${GMenuCategoryListItemFragmentDoc}\n`\n\nexport function useGCategoryList(\n  variables?: GCategoryListVariables,\n  baseOptions?: Hooks.QueryHookOptions<GCategoryListVariables>,\n) {\n  return Hooks.useQuery<GCategoryListQuery, GCategoryListVariables>(\n    GCategoryListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuGuideDownloadDocument = gql`\n  query QMenuGuideDownload($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      foodMenuUrl\n    }\n  }\n`\n\nexport function useQMenuGuideDownload(\n  variables?: QMenuGuideDownloadVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuGuideDownloadVariables>,\n) {\n  return Hooks.useQuery<QMenuGuideDownloadQuery, QMenuGuideDownloadVariables>(\n    QMenuGuideDownloadDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuRecipeFormDocument = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...GMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...GMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n\n  ${GMenuRecipePriceFragmentDoc}\n  ${GMenuCategoryListItemFragmentDoc}\n  ${GMenuAssocRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeForm(\n  variables?: GMenuRecipeFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeFormVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeFormQuery, GMenuRecipeFormVariables>(\n    GMenuRecipeFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuRecipeFormAssocDocument = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n\n  ${GMenuAssocRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeFormAssoc(\n  variables?: GMenuRecipeFormAssocVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeFormAssocVariables>,\n) {\n  return Hooks.useQuery<\n    GMenuRecipeFormAssocQuery,\n    GMenuRecipeFormAssocVariables\n  >(GMenuRecipeFormAssocDocument, variables, baseOptions)\n}\n\nexport const GMenuRecipeDefaultsDocument = gql`\n  query GMenuRecipeDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport function useGMenuRecipeDefaults(\n  variables?: GMenuRecipeDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeDefaultsVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeDefaultsQuery, GMenuRecipeDefaultsVariables>(\n    GMenuRecipeDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuRecipeListDocument = gql`\n  query GMenuRecipeList(\n    $branchId: ID!\n    $categoryId: ID\n    $categoryType: WareCategoryTypeEnum\n  ) {\n    recipes(\n      companyBranch: $branchId\n      wareCategory: $categoryId\n      wareCategoryType: $categoryType\n    ) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeList(\n  variables?: GMenuRecipeListVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeListVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeListQuery, GMenuRecipeListVariables>(\n    GMenuRecipeListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockDepositDocument = gql`\n  query GMenuStockDeposit($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      id\n      code\n      plu\n      nameLabel: label\n      note\n      quantity\n      wareUnit {\n        ...GWareUnit\n      }\n    }\n  }\n\n  ${GWareUnitFragmentDoc}\n`\n\nexport function useGMenuStockDeposit(\n  variables?: GMenuStockDepositVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockDepositVariables>,\n) {\n  return Hooks.useQuery<GMenuStockDepositQuery, GMenuStockDepositVariables>(\n    GMenuStockDepositDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GChangeMenuStockQuantityDocument = gql`\n  mutation GChangeMenuStockQuantity($stockItem: ID!, $quantityChange: Float!) {\n    changeAmountStockItem(id: $stockItem, amountOffset: $quantityChange) {\n      id\n      quantity\n    }\n  }\n`\n\nexport function useGChangeMenuStockQuantity(\n  baseOptions?: Hooks.MutationHookOptions<\n    GChangeMenuStockQuantityMutation,\n    GChangeMenuStockQuantityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GChangeMenuStockQuantityMutation,\n    GChangeMenuStockQuantityVariables\n  >(GChangeMenuStockQuantityDocument, baseOptions)\n}\n\nexport const GMenuStockFormDocument = gql`\n  query GMenuStockForm($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      code\n      plu\n      note\n      nameLabel: label\n      allowNegative\n      wareUnit {\n        ...GWareUnit\n      }\n      allergens {\n        ...GAllergen\n      }\n      companyBranch {\n        id\n        allowNegative: stockItemsCanBeNegative\n      }\n    }\n  }\n\n  ${GWareUnitFragmentDoc}\n  ${GAllergenFragmentDoc}\n`\n\nexport function useGMenuStockForm(\n  variables?: GMenuStockFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockFormVariables>,\n) {\n  return Hooks.useQuery<GMenuStockFormQuery, GMenuStockFormVariables>(\n    GMenuStockFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockDefaultsDocument = gql`\n  query GMenuStockDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      allowNegative: stockItemsCanBeNegative\n    }\n  }\n`\n\nexport function useGMenuStockDefaults(\n  variables?: GMenuStockDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockDefaultsVariables>,\n) {\n  return Hooks.useQuery<GMenuStockDefaultsQuery, GMenuStockDefaultsVariables>(\n    GMenuStockDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockListDocument = gql`\n  query GMenuStockList($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockList(\n  variables?: GMenuStockListVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockListVariables>,\n) {\n  return Hooks.useQuery<GMenuStockListQuery, GMenuStockListVariables>(\n    GMenuStockListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GStockRecipesDocument = gql`\n  query GStockRecipes($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      ingredients {\n        id\n        recipe {\n          id\n          nameLabel\n          descriptionLabel\n          recipeType: wareCategoryType {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useGStockRecipes(\n  variables?: GStockRecipesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GStockRecipesVariables>,\n) {\n  return Hooks.useQuery<GStockRecipesQuery, GStockRecipesVariables>(\n    GStockRecipesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderBranchLocationDocument = gql`\n  query GOrderBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n\n  ${GGeoPointFragmentDoc}\n`\n\nexport function useGOrderBranchLocation(\n  variables?: GOrderBranchLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderBranchLocationVariables>,\n) {\n  return Hooks.useQuery<\n    GOrderBranchLocationQuery,\n    GOrderBranchLocationVariables\n  >(GOrderBranchLocationDocument, variables, baseOptions)\n}\n\nexport const GOrderLocationDocument = gql`\n  query GOrderLocation($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n\n  ${GGeoPointFragmentDoc}\n`\n\nexport function useGOrderLocation(\n  variables?: GOrderLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderLocationVariables>,\n) {\n  return Hooks.useQuery<GOrderLocationQuery, GOrderLocationVariables>(\n    GOrderLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GUpdateOrderStateDocument = gql`\n  mutation GUpdateOrderState($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...GOrderStateCategory\n      orderTiming: orderStateCategoryRelations {\n        createdAt\n        orderStateCategory\n      }\n    }\n  }\n\n  ${GOrderStateCategoryFragmentDoc}\n`\n\nexport function useGUpdateOrderState(\n  baseOptions?: Hooks.MutationHookOptions<\n    GUpdateOrderStateMutation,\n    GUpdateOrderStateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GUpdateOrderStateMutation,\n    GUpdateOrderStateVariables\n  >(GUpdateOrderStateDocument, baseOptions)\n}\n\nexport const GSendOrderNotificationDocument = gql`\n  mutation GSendOrderNotification($orderId: ID!, $minutes: Int!) {\n    orderNotifyCustomer(id: $orderId, minutes: $minutes) {\n      id\n      deliverAt\n    }\n  }\n`\n\nexport function useGSendOrderNotification(\n  baseOptions?: Hooks.MutationHookOptions<\n    GSendOrderNotificationMutation,\n    GSendOrderNotificationVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GSendOrderNotificationMutation,\n    GSendOrderNotificationVariables\n  >(GSendOrderNotificationDocument, baseOptions)\n}\n\nexport const GSelectOrderDriverDocument = gql`\n  mutation GSelectOrderDriver($driverId: ID!, $orderId: ID!) {\n    createUserDeliveringOrder(user: $driverId, order: $orderId) {\n      order {\n        ...GOrderDriver\n      }\n    }\n  }\n\n  ${GOrderDriverFragmentDoc}\n`\n\nexport function useGSelectOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    GSelectOrderDriverMutation,\n    GSelectOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GSelectOrderDriverMutation,\n    GSelectOrderDriverVariables\n  >(GSelectOrderDriverDocument, baseOptions)\n}\n\nexport const GRemoveOrderDriverDocument = gql`\n  mutation GRemoveOrderDriver($orderDriverId: ID!) {\n    destroyUserDeliveringOrder(id: $orderDriverId) {\n      order {\n        ...GOrderDriver\n      }\n    }\n  }\n\n  ${GOrderDriverFragmentDoc}\n`\n\nexport function useGRemoveOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    GRemoveOrderDriverMutation,\n    GRemoveOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GRemoveOrderDriverMutation,\n    GRemoveOrderDriverVariables\n  >(GRemoveOrderDriverDocument, baseOptions)\n}\n\nexport const MChangeOrderToPickupDocument = gql`\n  mutation MChangeOrderToPickup($orderId: ID!) {\n    updateOrderDeliveryToPickup(id: $orderId) {\n      id\n      deliveryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMChangeOrderToPickup(\n  baseOptions?: Hooks.MutationHookOptions<\n    MChangeOrderToPickupMutation,\n    MChangeOrderToPickupVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MChangeOrderToPickupMutation,\n    MChangeOrderToPickupVariables\n  >(MChangeOrderToPickupDocument, baseOptions)\n}\n\nexport const QOrderMapDeliveriesDocument = gql`\n  query QOrderMapDeliveries($branches: [ID!]!) {\n    deliveries: drivers(companyBranches: $branches, onlyAvailable: false) {\n      ...GOrderMapDelivery\n    }\n  }\n\n  ${GOrderMapDeliveryFragmentDoc}\n`\n\nexport function useQOrderMapDeliveries(\n  variables?: QOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMapDeliveriesVariables>,\n) {\n  return Hooks.useQuery<QOrderMapDeliveriesQuery, QOrderMapDeliveriesVariables>(\n    QOrderMapDeliveriesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderMapDeliveriesDocument = gql`\n  subscription SOrderMapDeliveries($branches: [ID!]!) {\n    update: updatedTransportationDeviceUser(companyBranches: $branches) {\n      actionType\n      device: transportationDeviceUser {\n        ...GOrderMapDevice\n        user {\n          ...GOrderMapDriver\n        }\n      }\n    }\n  }\n\n  ${GOrderMapDeviceFragmentDoc}\n  ${GOrderMapDriverFragmentDoc}\n`\n\nexport function useSOrderMapDeliveries(\n  variables?: SOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >(SOrderMapDeliveriesDocument, variables, baseOptions)\n}\n\nexport const GOrderDriverSelectionDocument = gql`\n  query GOrderDriverSelection($orderId: ID!, $branchId: [ID!]!) {\n    order(id: $orderId) {\n      ...GOrderDriver\n    }\n    drivers(companyBranches: $branchId, onlyAvailable: true) {\n      ...GDriver\n    }\n  }\n\n  ${GOrderDriverFragmentDoc}\n  ${GDriverFragmentDoc}\n`\n\nexport function useGOrderDriverSelection(\n  variables?: GOrderDriverSelectionVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderDriverSelectionVariables>,\n) {\n  return Hooks.useQuery<\n    GOrderDriverSelectionQuery,\n    GOrderDriverSelectionVariables\n  >(GOrderDriverSelectionDocument, variables, baseOptions)\n}\n\nexport const GBranchDeliveryTimeDocument = gql`\n  query GBranchDeliveryTime($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      defaultDeliveryTime\n    }\n  }\n`\n\nexport function useGBranchDeliveryTime(\n  variables?: GBranchDeliveryTimeVariables,\n  baseOptions?: Hooks.QueryHookOptions<GBranchDeliveryTimeVariables>,\n) {\n  return Hooks.useQuery<GBranchDeliveryTimeQuery, GBranchDeliveryTimeVariables>(\n    GBranchDeliveryTimeDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MUpdateBranchDeliveryTimeDocument = gql`\n  mutation MUpdateBranchDeliveryTime($branchId: ID!, $time: Int!) {\n    updateDefaultOrderProcessTime(\n      companyBranch: $branchId\n      deliveryType: MESSENGER\n      defaultTime: $time\n    ) {\n      id\n      defaultDeliveryTime\n    }\n  }\n`\n\nexport function useMUpdateBranchDeliveryTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MUpdateBranchDeliveryTimeMutation,\n    MUpdateBranchDeliveryTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MUpdateBranchDeliveryTimeMutation,\n    MUpdateBranchDeliveryTimeVariables\n  >(MUpdateBranchDeliveryTimeDocument, baseOptions)\n}\n\nexport const GOrderDetailDocument = gql`\n  query GOrderDetail($id: ID!) {\n    order(id: $id) {\n      id\n      createdAt\n      deliverAt\n      companyBranch {\n        id\n      }\n      customer {\n        emails {\n          ...GEmail\n        }\n        phones {\n          ...GPhone\n        }\n      }\n      customerOrdersCountCurrent\n      customerOrdersCountTotal\n      note\n      previousNote\n      allAppliedRules\n      items {\n        ...GOrderDetailWare\n        sidedishes: sideDishes {\n          ...GOrderDetailWare\n        }\n      }\n      totalSum {\n        ...GPrice\n      }\n      transportFee {\n        ...GPrice\n      }\n      coverPrice {\n        ...GPrice\n      }\n      totalDiscount {\n        ...GPrice\n      }\n      orderTiming: orderStateCategoryRelations {\n        createdAt\n        orderStateCategory\n      }\n      ...GOrderDriver\n    }\n  }\n\n  ${GEmailFragmentDoc}\n  ${GPhoneFragmentDoc}\n  ${GOrderDetailWareFragmentDoc}\n  ${GPriceFragmentDoc}\n  ${GOrderDriverFragmentDoc}\n`\n\nexport function useGOrderDetail(\n  variables?: GOrderDetailVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderDetailVariables>,\n) {\n  return Hooks.useQuery<GOrderDetailQuery, GOrderDetailVariables>(\n    GOrderDetailDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderListDocument = gql`\n  query GOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n    $includeOldFinished: Boolean\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoriesOR: $categories\n        includeOldFinished: $includeOldFinished\n      }\n    ) {\n      id\n      ...GOrderStateCategory\n      ...GOrderListTicker\n      ...GOrderMarker\n    }\n    orderStateCategories {\n      code\n      enum\n    }\n  }\n\n  ${GOrderStateCategoryFragmentDoc}\n  ${GOrderListTickerFragmentDoc}\n  ${GOrderMarkerFragmentDoc}\n`\n\nexport function useGOrderList(\n  variables?: GOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderListVariables>,\n) {\n  return Hooks.useQuery<GOrderListQuery, GOrderListVariables>(\n    GOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderListDocument = gql`\n  subscription SOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        id\n        ...GOrderStateCategory\n        ...GOrderListTicker\n        ...GOrderMarker\n      }\n    }\n  }\n\n  ${GOrderStateCategoryFragmentDoc}\n  ${GOrderListTickerFragmentDoc}\n  ${GOrderMarkerFragmentDoc}\n`\n\nexport function useSOrderList(\n  variables?: SOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderListSubscription,\n    SOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderListSubscription, SOrderListVariables>(\n    SOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderStateDocument = gql`\n  query GOrderState($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      deliveryType {\n        enum\n      }\n      isCancelable\n      ...GOrderStateCategory\n    }\n    companyBranch(id: $branchId) {\n      id\n      allowedCategories\n    }\n  }\n\n  ${GOrderStateCategoryFragmentDoc}\n`\n\nexport function useGOrderState(\n  variables?: GOrderStateVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderStateVariables>,\n) {\n  return Hooks.useQuery<GOrderStateQuery, GOrderStateVariables>(\n    GOrderStateDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GClosureHistoryDocument = gql`\n  query GClosureHistory($branchId: ID!, $dateFrom: Date!, $dateTo: Date!) {\n    financialReports(\n      companyBranchId: $branchId\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n    ) {\n      id\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useGClosureHistory(\n  variables?: GClosureHistoryVariables,\n  baseOptions?: Hooks.QueryHookOptions<GClosureHistoryVariables>,\n) {\n  return Hooks.useQuery<GClosureHistoryQuery, GClosureHistoryVariables>(\n    GClosureHistoryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GClosureReportQueryDocument = gql`\n  query GClosureReportQuery(\n    $branchId: ID!\n    $reportId: ID!\n    $showReport: Boolean!\n  ) {\n    lastReport: lastFinancialReport(companyBranchId: $branchId)\n      @skip(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n    report: financialReport(report: $reportId) @include(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useGClosureReportQuery(\n  variables?: GClosureReportQueryVariables,\n  baseOptions?: Hooks.QueryHookOptions<GClosureReportQueryVariables>,\n) {\n  return Hooks.useQuery<GClosureReportQueryQuery, GClosureReportQueryVariables>(\n    GClosureReportQueryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCreateFinancialReportDocument = gql`\n  mutation GCreateFinancialReport($companyBranchId: ID!) {\n    result: createFinancialReport(companyBranchId: $companyBranchId) {\n      id\n    }\n  }\n`\n\nexport function useGCreateFinancialReport(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateFinancialReportMutation,\n    GCreateFinancialReportVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreateFinancialReportMutation,\n    GCreateFinancialReportVariables\n  >(GCreateFinancialReportDocument, baseOptions)\n}\n\nexport const GDailyStatisticsDocument = gql`\n  query GDailyStatistics(\n    $branches: [ID!]!\n    $dateTimeFrom: DateTime!\n    $dateTimeTo: DateTime!\n  ) {\n    stats: statistics(\n      branches: $branches\n      dateTimeFrom: $dateTimeFrom\n      dateTimeTo: $dateTimeTo\n    ) {\n      categoryStatisticsPlain\n      dailyStatisticsPlain\n      deliveryStatisticsPlain\n      driversStatisticsPlain\n    }\n  }\n`\n\nexport function useGDailyStatistics(\n  variables?: GDailyStatisticsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GDailyStatisticsVariables>,\n) {\n  return Hooks.useQuery<GDailyStatisticsQuery, GDailyStatisticsVariables>(\n    GDailyStatisticsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrdersStatisticsListDocument = gql`\n  query GOrdersStatisticsList(\n    $branches: [ID!]!\n    $dateTimeFrom: DateTime!\n    $dateTimeTo: DateTime!\n    $pagination: InputPaginationParams!\n  ) {\n    stats: statistics(\n      branches: $branches\n      dateTimeFrom: $dateTimeFrom\n      dateTimeTo: $dateTimeTo\n    ) {\n      orders: finishedOrders {\n        list: orders(includeCanceled: true, pagination: $pagination) {\n          ...GOrderListTicker\n          ...GOrderStateCategory\n        }\n      }\n    }\n  }\n\n  ${GOrderListTickerFragmentDoc}\n  ${GOrderStateCategoryFragmentDoc}\n`\n\nexport function useGOrdersStatisticsList(\n  variables?: GOrdersStatisticsListVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrdersStatisticsListVariables>,\n) {\n  return Hooks.useQuery<\n    GOrdersStatisticsListQuery,\n    GOrdersStatisticsListVariables\n  >(GOrdersStatisticsListDocument, variables, baseOptions)\n}\n\nexport const GOrdersStatisticsDocument = gql`\n  query GOrdersStatistics(\n    $branches: [ID!]!\n    $dateTimeFrom: DateTime!\n    $dateTimeTo: DateTime!\n  ) {\n    stats: statistics(\n      branches: $branches\n      dateTimeFrom: $dateTimeFrom\n      dateTimeTo: $dateTimeTo\n    ) {\n      finishedOrders {\n        fees {\n          ...GStatsPrice\n        }\n        onlinePayments {\n          ...GStatsPrice\n        }\n        total {\n          ...GStatsPrice\n        }\n        finishedCount: ordersCount\n        cancelledCount: ordersCanceledCount\n      }\n      orderStatisticsPlain\n    }\n  }\n\n  ${GStatsPriceFragmentDoc}\n`\n\nexport function useGOrdersStatistics(\n  variables?: GOrdersStatisticsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrdersStatisticsVariables>,\n) {\n  return Hooks.useQuery<GOrdersStatisticsQuery, GOrdersStatisticsVariables>(\n    GOrdersStatisticsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QUserMenuLanguagesDocument = gql`\n  query QUserMenuLanguages {\n    languages {\n      code\n      enum\n      rawCode\n    }\n  }\n`\n\nexport function useQUserMenuLanguages(\n  variables?: QUserMenuLanguagesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QUserMenuLanguagesVariables>,\n) {\n  return Hooks.useQuery<QUserMenuLanguagesQuery, QUserMenuLanguagesVariables>(\n    QUserMenuLanguagesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MUserMenuChangeLanguageDocument = gql`\n  mutation MUserMenuChangeLanguage($userId: ID!, $lang: LanguageEnum!) {\n    updateUser(id: $userId, user: { language: $lang }) {\n      id\n      language {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMUserMenuChangeLanguage(\n  baseOptions?: Hooks.MutationHookOptions<\n    MUserMenuChangeLanguageMutation,\n    MUserMenuChangeLanguageVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MUserMenuChangeLanguageMutation,\n    MUserMenuChangeLanguageVariables\n  >(MUserMenuChangeLanguageDocument, baseOptions)\n}\n\nexport const GCreateZoneDocument = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...GZone\n    }\n  }\n\n  ${GZoneFragmentDoc}\n`\n\nexport function useGCreateZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateZoneMutation,\n    GCreateZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GCreateZoneMutation, GCreateZoneVariables>(\n    GCreateZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GUpdateZoneDocument = gql`\n  mutation GUpdateZone($zoneId: ID!, $update: InputZoneUpdate!) {\n    updateZone(id: $zoneId, zone: $update) {\n      ...GZone\n    }\n  }\n\n  ${GZoneFragmentDoc}\n`\n\nexport function useGUpdateZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GUpdateZoneMutation,\n    GUpdateZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GUpdateZoneMutation, GUpdateZoneVariables>(\n    GUpdateZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GUpdateZonePriorityDocument = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport function useGUpdateZonePriority(\n  baseOptions?: Hooks.MutationHookOptions<\n    GUpdateZonePriorityMutation,\n    GUpdateZonePriorityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GUpdateZonePriorityMutation,\n    GUpdateZonePriorityVariables\n  >(GUpdateZonePriorityDocument, baseOptions)\n}\n\nexport const GDestroyZoneDocument = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n\nexport function useGDestroyZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GDestroyZoneMutation,\n    GDestroyZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GDestroyZoneMutation, GDestroyZoneVariables>(\n    GDestroyZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GZonesDocument = gql`\n  query GZones($branchesId: [ID!]!) {\n    zones(companyBranches: $branchesId) {\n      ...GZone\n    }\n  }\n\n  ${GZoneFragmentDoc}\n`\n\nexport function useGZones(\n  variables?: GZonesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZonesVariables>,\n) {\n  return Hooks.useQuery<GZonesQuery, GZonesVariables>(\n    GZonesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneLocationDocument = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...GGeoPoint\n        }\n      }\n    }\n  }\n\n  ${GGeoPointFragmentDoc}\n`\n\nexport function useGZoneLocation(\n  variables?: GZoneLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneLocationVariables>,\n) {\n  return Hooks.useQuery<GZoneLocationQuery, GZoneLocationVariables>(\n    GZoneLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneBranchLocationDocument = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n\n  ${GGeoPointFragmentDoc}\n`\n\nexport function useGZoneBranchLocation(\n  variables?: GZoneBranchLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneBranchLocationVariables>,\n) {\n  return Hooks.useQuery<GZoneBranchLocationQuery, GZoneBranchLocationVariables>(\n    GZoneBranchLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneColorsDocument = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n\nexport function useGZoneColors(\n  variables?: GZoneColorsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneColorsVariables>,\n) {\n  return Hooks.useQuery<GZoneColorsQuery, GZoneColorsVariables>(\n    GZoneColorsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MKitchenRecipeStateDocument = gql`\n  mutation MKitchenRecipeState($recipeId: ID!, $state: OrderRecipeStateEnum!) {\n    updateOrderRecipeState(id: $recipeId, orderRecipeState: $state) {\n      id\n      orderRecipeState {\n        enum\n      }\n      order {\n        id\n        orderStateCategory(target: FE_KITCHEN)\n      }\n    }\n  }\n`\n\nexport function useMKitchenRecipeState(\n  baseOptions?: Hooks.MutationHookOptions<\n    MKitchenRecipeStateMutation,\n    MKitchenRecipeStateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MKitchenRecipeStateMutation,\n    MKitchenRecipeStateVariables\n  >(MKitchenRecipeStateDocument, baseOptions)\n}\n\nexport const QKitchenOrderListDocument = gql`\n  query QKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoryTarget: FE_KITCHEN\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      id\n      ...FKitchenOrder\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useQKitchenOrderList(\n  variables?: QKitchenOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QKitchenOrderListVariables>,\n) {\n  return Hooks.useQuery<QKitchenOrderListQuery, QKitchenOrderListVariables>(\n    QKitchenOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SKitchenOrderListDocument = gql`\n  subscription SKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        id\n        ...FKitchenOrder\n      }\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useSKitchenOrderList(\n  variables?: SKitchenOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >(SKitchenOrderListDocument, variables, baseOptions)\n}\n\n// Generated in 2019-02-25T19:20:12+01:00\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface IProps {\n  iconName: string\n  color?: string\n  fontSize?: number\n  fontSizeUnit?: string\n}\n\nconst getFontSize = ({ fontSize = 1.5, fontSizeUnit = 'rem' }: IProps) => {\n  return fontSize + fontSizeUnit\n}\n\nconst IconSpanStyled = styled.span`\n  font-size: ${getFontSize} !important;\n  color: ${(props: IProps) => props.color};\n`\n\nexport const Icon: React.FC<IProps> = ({\n  iconName,\n  color = Colors.white,\n  fontSize,\n  fontSizeUnit,\n}) =>\n  iconName ? (\n    <IconSpanStyled\n      color={color}\n      fontSize={fontSize}\n      fontSizeUnit={fontSizeUnit}\n      iconName={iconName}\n      className=\"material-icons\"\n    >\n      {iconName}\n    </IconSpanStyled>\n  ) : null\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import gql from 'graphql-tag'\n\nimport { PriceFragment } from '../../../graph/fragments'\n\nexport const MenuRecipeFragment = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...GPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n  ${PriceFragment}\n`\n\nexport const MenuRecipeVisibilityMutation = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport const MenuRecipeCreateMutation = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeUpdateMutation = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeDeleteMutation = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n"],"sourceRoot":""}