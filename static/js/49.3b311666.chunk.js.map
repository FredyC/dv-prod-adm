{"version":3,"sources":["atoms/CanMutate.tsx","atoms/NoAccess.tsx","atoms/CanQuery.tsx","hooks/useRouterContext.ts","atoms/TouchButtonBadge.tsx","graph/buildSubscription.tsx","segments/main/molecules/OrderButton.tsx","segments/main/organisms/OrderCallWatch.graphql.ts","segments/main/organisms/OrderCallWatch.tsx","segments/main/molecules/CreateOrderButton.tsx","segments/main/molecules/CallMeButton.tsx","segments/main/molecules/MapViewButton.tsx","segments/main/molecules/OverviewButton.tsx","segments/main/molecules/SettingsButton.tsx","segments/main/molecules/SupportButton.tsx","segments/main/organisms/OrderCountWatch.graphql.ts","segments/main/organisms/OrderCountWatch.tsx","segments/main/pages/MainDashboardPage.tsx"],"names":["__webpack_require__","d","__webpack_exports__","CanMutate","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_NoAccess__WEBPACK_IMPORTED_MODULE_1__","_RootProvider__WEBPACK_IMPORTED_MODULE_2__","mutationName","children","user","Object","canMutate","a","createElement","Fragment","NoAccess","CanQuery","queryName","canQuery","useRouterContext","react_router__WEBPACK_IMPORTED_MODULE_1__","TouchButtonBadge","styled_components__WEBPACK_IMPORTED_MODULE_0__","_styling__WEBPACK_IMPORTED_MODULE_1__","div","withConfig","displayName","red","buildSubscription","_hooks_useEffectOnce__WEBPACK_IMPORTED_MODULE_0__","subscription","props","queryResult","variables","handleUpdate","subscribeToMore","document","updateQuery","prev","subscriptionData","data","OrderButton","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","_atoms_TouchButtonBadge__WEBPACK_IMPORTED_MODULE_2__","_i18n__WEBPACK_IMPORTED_MODULE_3__","_molecules_TouchButton__WEBPACK_IMPORTED_MODULE_4__","_styling__WEBPACK_IMPORTED_MODULE_5__","count","to","text","_","iconName","badge","color","yellow","OrderCallSubscription","OrderCallWatch","render","react_default","react_apollo_browser_umd","userCallingCustomer","updatedUserCallingCustomer","CreateOrderButton","showOnlyText","call","location","pathname","phone","state","eventId","react_router_dom","TouchButton","i18n","undefined","styling","turquoise","isRinging","index_es","CallMeButton","MapViewButton","greyMiddle","OverviewButton","greyDark","SettingsButton","SupportButton","green","OrderCountQuery","src_default","OrderCountSubscription","QueryOrderCount","buildQuery","SubscribeOrderCount","OrderCountWatch","categories","WithRoot","root","order","list","hasBranchFilter","branchesId","branchesFilter","refetchOnConnectionLost","renderLoading","ordersCount","result","update","updatedOrdersCount","MainDashboardPage","PageLayout","layouts","i","x","y","w","h","static","pageTitle","showSoundControl","key","types","NEW_ORDERS"],"mappings":"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","file":"static/js/49.3b311666.chunk.js","sourcesContent":["import React from 'react'\n\nimport { NoAccess } from './NoAccess'\nimport { useRoot } from './RootProvider'\n\ninterface IProps {\n  mutationName: string\n}\n\nexport const CanMutate: React.SFC<IProps> = ({ mutationName, children }) => {\n  const { user } = useRoot()\n  return user.canMutate(mutationName) ? (\n    <>{children}</>\n  ) : (\n    <NoAccess>{`No access to mutation ${mutationName}`}</NoAccess>\n  )\n}\n","import { Tooltip } from '@material-ui/core'\nimport { PanTool } from '@material-ui/icons'\nimport React from 'react'\n\ninterface IProps {\n  children: string\n}\n\nexport const NoAccess: React.SFC<IProps> = ({ children }) =>\n  process.env.REACT_APP_STAGE !== 'prod' ? (\n    <Tooltip title={children}>\n      <PanTool />\n    </Tooltip>\n  ) : null\n","import React from 'react'\n\nimport { NoAccess } from './NoAccess'\nimport { useRoot } from './RootProvider'\n\ninterface IProps {\n  queryName: string\n}\n\nexport const CanQuery: React.SFC<IProps> = ({ queryName, children }) => {\n  const { user } = useRoot()\n  return user.canQuery(queryName) ? (\n    <>{children}</>\n  ) : (\n    <NoAccess>{`No access to query ${queryName}`}</NoAccess>\n  )\n}\n","import { useContext } from 'react'\nimport * as Router from 'react-router'\n\nexport default function useRouterContext<\n  Params extends { [K in keyof Params]?: string } = {}\n>(): Router.RouteComponentProps<Params> {\n  // @ts-ignore\n  return useContext(Router.__RouterContext)\n}\n\n// export default function useRouter<\n// Params extends { [K in keyof Params]?: string } = {}\n// >(): Router.RouteComponentProps<Params> {\n//   // @ts-ignore\n//   let context = useContext(Router.__RouterContext);\n//   let location = options.location || context.location;\n//   let match = options.path\n//     ? matchPath(location.pathname, options)\n//     : context.match;\n\n//   return { ...context, location, match };\n\n// }\n\n// export default function useRouter(options = {}) {\n//   invariant(\n//     typeof useContext === \"function\",\n//     \"The useRouter hook requires React 16.7 or greater\"\n//   );\n\n//   let context = useContext(RouterContext);\n//   let location = options.location || context.location;\n//   let match = options.path\n//     ? matchPath(location.pathname, options)\n//     : context.match;\n\n//   return { ...context, location, match };\n// }\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\nexport const TouchButtonBadge = styled.div`\n  min-height: 1.8rem;\n  line-height: 1.8rem;\n  min-width: 1.8rem;\n  font-size: 1.2rem;\n  margin: 0;\n  background-color: ${Colors.red};\n  color: white;\n  position: absolute;\n  right: -0.25rem;\n  top: -0.25rem;\n  border-radius: 1.8rem;\n  text-align: center;\n  vertical-align: middle;\n  padding: 0;\n`\n","import { DocumentNode } from 'graphql'\nimport { QueryResult } from 'react-apollo'\n\nimport { useEffectOnce } from '../hooks/useEffectOnce'\n\nexport function buildSubscription<TSubscription, TVariables, TQuery = {}>(\n  subscription: DocumentNode,\n) {\n  type TResult = QueryResult<TQuery, TVariables>\n  interface IProps {\n    children: ReactNode\n    queryResult: TResult\n    variables: TVariables\n    handleUpdate(updatedData: TSubscription, prevData: TQuery): TQuery | void\n  }\n  function GSubscription(props: IProps) {\n    useEffectOnce(() => {\n      const { queryResult, variables, handleUpdate } = props\n      return queryResult.subscribeToMore({\n        document: subscription,\n        variables,\n        updateQuery: (prev, { subscriptionData }) => {\n          if (!(subscriptionData && subscriptionData.data)) {\n            return prev\n          }\n          // @ts-ignore Bad typing of updateQuery using TQuery\n          return handleUpdate(subscriptionData.data, prev) || prev\n        },\n      })\n    })\n    return props.children\n  }\n  return GSubscription\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { TouchButtonBadge } from '../../../atoms/TouchButtonBadge'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IProps {\n  count: Maybe<number>\n}\n\nexport const OrderButton: React.SFC<IProps> = ({ count }) => (\n  <Link to=\"/order\">\n    <TouchButton\n      text={i18n.t`Orders`}\n      iconName=\"assignment_returned\"\n      badge={\n        count && count > 0 ? <TouchButtonBadge>{count}</TouchButtonBadge> : null\n      }\n      color={Colors.yellow}\n    />\n  </Link>\n)\n","import gql from 'graphql-tag'\n\nexport const OrderCallSubscription = gql`\n  subscription SOrderCall {\n    updatedUserCallingCustomer {\n      userCallingCustomer {\n        eventId\n        phone\n        isRinging\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Subscription } from 'react-apollo'\n\nimport { SOrderCall } from '../../../graph/types'\nimport { OrderCallSubscription } from './OrderCallWatch.graphql'\n\ninterface IProps {\n  render(call: Maybe<SOrderCall.UserCallingCustomer>): ReactNode\n}\n\nexport const OrderCallWatch: React.SFC<IProps> = ({ render }) => (\n  <Subscription<SOrderCall.Subscription, SOrderCall.Variables>\n    subscription={OrderCallSubscription}\n  >\n    {({ data }) => {\n      if (!data) {\n        return render(null)\n      }\n      const { userCallingCustomer } = data.updatedUserCallingCustomer\n      return render(userCallingCustomer)\n    }}\n  </Subscription>\n)\n","import { RingVolume } from '@material-ui/icons'\nimport { LocationDescriptor } from 'history'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { TouchButtonBadge } from '../../../atoms/TouchButtonBadge'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\nimport { OrderCallWatch } from '../organisms/OrderCallWatch'\n\ninterface INewOrderButtonProps {\n  showOnlyText?: boolean\n}\n\nexport const CreateOrderButton: React.SFC<INewOrderButtonProps> = ({\n  showOnlyText = false,\n}) => (\n  <OrderCallWatch\n    render={call => {\n      const location: LocationDescriptor = {\n        pathname: `/order/create/${call ? call.phone : ''}`,\n        state: {\n          eventId: call ? call.eventId : null,\n        },\n      }\n      return (\n        <Link to={location}>\n          <TouchButton\n            text={i18n.t`Create order`}\n            iconName={showOnlyText ? undefined : 'add_circle'}\n            color={Colors.turquoise}\n            badge={\n              call && call.isRinging ? (\n                <TouchButtonBadge>\n                  <RingVolume />\n                </TouchButtonBadge>\n              ) : null\n            }\n          />\n        </Link>\n      )\n    }}\n  />\n)\n","import React, { useCallback } from 'react'\n\nimport useRouterContext from '../../../hooks/useRouterContext'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IProps {}\n\nexport const CallMeButton: React.SFC<IProps> = props => {\n  if (process.env.REACT_APP_STAGE === 'prod') {\n    return null\n  }\n  const { history } = useRouterContext()\n  const makeCall = useCallback((ev: React.MouseEvent<HTMLButtonElement>) => {\n    const phone = window.prompt('Zadej telefonní číslo, které ti bude volat')\n    if (phone === null) {\n      return\n    }\n    let eventId: MaybeID = null\n    if (ev.shiftKey) {\n      eventId = window.prompt('A teď ještě eventId, jestli víš co děláš ;)')\n    }\n    history.push({\n      pathname: `/order/create/${phone}`,\n      state: {\n        eventId,\n      },\n    })\n  })\n  return (\n    <TouchButton\n      text=\"Zavolej mi [DEV]\"\n      iconName=\"ring_volume\"\n      color={Colors.turquoise}\n      onClick={makeCall}\n    />\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IMapViewButtonProps {}\n\nexport const MapViewButton: React.SFC<IMapViewButtonProps> = ({ children }) => (\n  <Link to=\"/order/map\">\n    <TouchButton text={i18n.t`Map`} iconName=\"map\" color={Colors.greyMiddle}>\n      {children}\n    </TouchButton>\n  </Link>\n)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IOverviewButtonProps {}\n\nexport const OverviewButton: React.SFC<IOverviewButtonProps> = ({\n  children,\n}) => (\n  <Link to=\"/overview\">\n    <TouchButton\n      text={i18n.t`Overview`}\n      iconName=\"trending_up\"\n      color={Colors.greyDark}\n    >\n      {children}\n    </TouchButton>\n  </Link>\n)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface ISettingsButtonProps {}\n\nexport const SettingsButton: React.SFC<ISettingsButtonProps> = ({\n  children,\n}) => (\n  <Link to=\"/settings\">\n    <TouchButton\n      text={i18n.t`Settings`}\n      iconName=\"settings\"\n      color={Colors.greyDark}\n    >\n      {children}\n    </TouchButton>\n  </Link>\n)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface ISupportButtonProps {}\n\nexport const SupportButton: React.SFC<ISupportButtonProps> = ({ children }) => (\n  <Link to=\"/support\">\n    <TouchButton text={i18n.t`Support`} iconName=\"help\" color={Colors.green}>\n      {children}\n    </TouchButton>\n  </Link>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { buildSubscription } from '../../../graph/buildSubscription'\nimport { GOrderCount, SOrderCount } from '../../../graph/types'\n\nconst OrderCountQuery = gql`\n  query GOrderCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    ordersCount(companyBranches: $branchesId, orderStateCategories: $categories)\n  }\n`\n\nconst OrderCountSubscription = gql`\n  subscription SOrderCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    updatedOrdersCount(companyBranches: $branchesId) {\n      ordersCount(\n        companyBranches: $branchesId\n        orderStateCategories: $categories\n      )\n    }\n  }\n`\n\nexport const QueryOrderCount = buildQuery<\n  GOrderCount.Query,\n  GOrderCount.Variables\n>(OrderCountQuery)\n\nexport const SubscribeOrderCount = buildSubscription<\n  SOrderCount.Subscription,\n  SOrderCount.Variables,\n  GOrderCount.Query\n>(OrderCountSubscription)\n","import React from 'react'\n\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { GOrderCount, OrderStateCategoryEnum } from '../../../graph/types'\nimport { QueryOrderCount, SubscribeOrderCount } from './OrderCountWatch.graphql'\n\ninterface IProps {\n  categories: OrderStateCategoryEnum[]\n  render(count: Maybe<number>): ReactNode\n}\n\nexport const OrderCountWatch: React.SFC<IProps> = ({ render, categories }) => (\n  <WithRoot\n    render={root => {\n      if (!root.order.list.hasBranchFilter) {\n        return render(null)\n      }\n      const variables: GOrderCount.Variables = {\n        branchesId: root.order.list.branchesFilter,\n        categories,\n      }\n      return (\n        <QueryOrderCount\n          variables={variables}\n          refetchOnConnectionLost={true}\n          renderLoading={false}\n          render={({ ordersCount }, result) => (\n            <SubscribeOrderCount\n              variables={variables}\n              queryResult={result}\n              handleUpdate={update => ({\n                ordersCount: update.updatedOrdersCount.ordersCount,\n              })}\n            >\n              {render(ordersCount)}\n            </SubscribeOrderCount>\n          )}\n        />\n      )\n    }}\n  />\n)\n","import React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { CanQuery } from '../../../atoms/CanQuery'\nimport { OrderStateCategoryEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { PageLayout } from '../../../molecules/PageLayout'\nimport { CallMeButton } from '../molecules/CallMeButton'\nimport { CreateOrderButton } from '../molecules/CreateOrderButton'\nimport { MapViewButton } from '../molecules/MapViewButton'\nimport { OrderButton } from '../molecules/OrderButton'\nimport { OverviewButton } from '../molecules/OverviewButton'\nimport { SettingsButton } from '../molecules/SettingsButton'\nimport { SupportButton } from '../molecules/SupportButton'\nimport { OrderCountWatch } from '../organisms/OrderCountWatch'\n\ninterface IDashboardPageProps {}\n\nfunction getLayout() {\n  return [\n    { i: 'b1', x: 0, y: 1, w: 2, h: 2, static: true },\n    { i: 'b2', x: 2, y: 1, w: 2, h: 2, static: true },\n    { i: 'b3', x: 4, y: 1, w: 2, h: 2, static: true },\n    { i: 'b4', x: 10, y: 1, w: 1, h: 2, static: true },\n    { i: 'bb1', x: 0, y: 7, w: 2, h: 2, static: true },\n    { i: 'bb2', x: 2, y: 7, w: 2, h: 2, static: true },\n    { i: 'bb3', x: 4, y: 7, w: 2, h: 2, static: true },\n    { i: 'bb4', x: 14, y: 7, w: 2, h: 2, static: true },\n  ]\n}\n\nexport const MainDashboardPage: React.SFC<IDashboardPageProps> = props => (\n  <>\n    <PageLayout\n      layouts={getLayout()}\n      pageTitle={i18n.t`Main menu`}\n      showSoundControl={true}\n    >\n      <div key=\"b1\">\n        <CanQuery queryName=\"orders\">\n          <OrderCountWatch\n            categories={[OrderStateCategoryEnum.NEW_ORDERS]}\n            render={count => <OrderButton count={count} />}\n          />\n        </CanQuery>\n      </div>\n      <div key=\"b2\">\n        <CanQuery queryName=\"orders\">\n          <MapViewButton />\n        </CanQuery>\n      </div>\n      <div key=\"b3\">\n        <CanMutate mutationName=\"createOrder\">\n          <CreateOrderButton />\n        </CanMutate>\n      </div>\n      <div key=\"b4\">\n        <CanMutate mutationName=\"createOrder\">\n          <CallMeButton />\n        </CanMutate>\n      </div>\n      <div key=\"bb1\">\n        <SettingsButton />\n      </div>\n      <div key=\"bb2\">\n        <OverviewButton />\n      </div>\n      <div key=\"bb4\">\n        <SupportButton />\n      </div>\n    </PageLayout>\n  </>\n)\n\nexport default MainDashboardPage\n"],"sourceRoot":""}