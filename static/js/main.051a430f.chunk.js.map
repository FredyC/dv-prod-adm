{"version":3,"sources":["helpers/gps.ts","graph/types.ts","atoms/Icon.tsx","graph/errorHandler.ts","helpers/offline.ts","segments/menu/models/MenuBaseModel.ts","segments/menu/models/MenuRecipeModel.graphql.ts","pages/NotFoundPage.tsx","routes/SecureRoute.tsx","atoms/PageTitle.tsx","segments/menu/organisms/CategoryList.graphql.ts","segments/zones/Zones.graphql.ts","models/BaseModel.ts","routes/LazyRoute.tsx","styling.ts","helpers/ramda.ts","helpers/logger.ts","models/AuthModel.ts","graph/fragments/GeoPointFragment.graphql.ts","graph/fragments/EmailFragment.graphql.ts","graph/fragments/PhoneFragment.graphql.ts","models/MapModel.ts","segments/menu/models/MenuStockModel.graphql.ts","routes/RedirectToLogin.tsx","molecules/TouchButton.tsx","atoms/Card.tsx","helpers/formats.ts","molecules/FullPageLayout.tsx","molecules/PageLayout.tsx","segments/order/models/OrderStateModel.graphql.ts","atoms/Loading.tsx","hooks/useEffectOnce.ts","segments/order/molecules/OrderStateDeliver.graphql.ts","hooks/useTimer.ts","segments/businesshours/models/BusinessHoursModel.ts","segments/menu/models/MenuCategoryModel.ts","segments/menu/models/MenuRecipeModel.ts","segments/menu/organisms/RecipeForm.graphql.ts","segments/menu/organisms/RecipeList.graphql.ts","segments/menu/organisms/StockList.graphql.ts","segments/menu/graph/AllergenFragment.graphql.ts","segments/menu/graph/WareUnitFragment.graphql.ts","atoms/GridLayout.tsx","atoms/SoundPlayInterval.tsx","segments/overview/organisms/ClosureStatisticsControl.graphql.ts","segments/businesshours/organisms/SpecificBusinessHours.graphql.ts","segments/menu/organisms/CategoryForm.graphql.ts","hooks/useStateRef.ts","index.tsx","enableDebug.ts","App.tsx","atoms/ConnectionWarning.tsx","graph/buildQuery.tsx","assets/connectionWarning.mp3","atoms/IntervalRender.tsx","context/RootContext.ts","graph/createClient.ts","graph/AuthLink.ts","graph/SubscriptionLink.ts","helpers/persistModel.ts","hooks/useInitializer.ts","segments/login/models/LoginProviderModel.ts","segments/login/models/PasswordLoginModel.ts","models/AuthModel.graphql.ts","models/RootModel.ts","models/ConfigModel.ts","models/UserModel.ts","locale/numeral.ts","../node_modules/numeral/locales lazy /^/.*$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","models/UserModel.graphql.ts","graph/fragments/AddressFragment.graphql.ts","graph/fragments/CompanyBranchFragment.graphql.ts","graph/fragments/CustomerFragment.graphql.ts","graph/fragments/PriceFragment.graphql.ts","segments/createorder/models/CreateOrderModel.ts","helpers/faker.ts","config.ts","i18n.tsx","segments/createorder/models/CreateOrderModel.graphql.ts","segments/order/models/OrderModel.ts","segments/order/models/OrderListModel.ts","segments/order/models/OrderMapModel.ts","segments/order/models/OrderMapModel.graphql.ts","segments/order/models/OrderStateModel.ts","segments/overview/models/StatisticsModel.ts","segments/settings/models/SettingsModel.ts","segments/businesshours/models/BusinessHoursModel.graphql.ts","segments/menu/models/MenuModel.ts","segments/settings/models/SettingsBaseModel.ts","segments/menu/models/MenuCategoryModel.graphql.ts","segments/menu/models/MenuStockModel.ts","segments/zones/models/ZoneModel.ts","segments/zones/models/ZoneMapModel.ts","segments/zones/models/ZoneModel.graphql.ts","atoms/ErrorContainer.tsx","routes/Routing.tsx","pages/ErrorPage.tsx","atoms/SoundControl.tsx","organisms/LogoutWidget.tsx","organisms/LogoutWidget.graphql.ts","molecules/HomeButton.tsx","routes/LogRoute.tsx","routes/RedirectAfterLogin.tsx","routes/RedirectAfterLogout.tsx","atoms/Router.tsx","atoms/ThemeProvider.tsx","atoms/UpdateHandler.tsx","atoms/RootProvider.tsx","atoms/WithRoot.tsx","graph/fragments/index.ts","helpers/sentry.ts","atoms/Pacman.tsx"],"names":["_geolib","__webpack_require__","gps","lat","Number","latitude","lng","longitude","latLng","center","metersRadius","pointsCount","Array","fill","map","_","idx","degree","computeDestinationPoint","points","bounds","getBounds","google","maps","LatLngBounds","minLat","minLng","maxLat","maxLng","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","WeekDayEnum","AllergenEnum","WarePriceTypeEnum","AvailabilityTypeEnum","FieldStateEnum","LanguageEnum","ShiftUserStateEnum","DeviceStateEnum","DeviceTypeEnum","WareUnitEnum","PaymentGateEnum","PaymentTypeEnum","WareCategoryTypeEnum","WareRequirementEnum","MobilePlatformEnum","OrderOriginEnum","ZoneTypeEnum","OrderBillingTypeEnum","OrderOnlineStateEnum","OrderStateEnum","DeliveryTypeEnum","OrderRecipeStateEnum","SettingTypeEnum","SubscriptionActionType","exports","_react","_interopRequireDefault","_styledComponents","_styling","IconSpanStyled","default","span","withConfig","displayName","fontSize","fontSizeUnit","props","color","iconName","Colors","white","createElement","className","_apolloLinkError","_sentry","errorHandler","graphQLErrors","operation","reportFailingQuery","query","operationName","variables","onError","__awaiter","result","errors","cb","isOnline","observe","change","oldValue","newValue","observable","box","navigator","onLine","window","addEventListener","set","get","_mobxStateTree","MenuBaseModel","BaseModel","named","volatile","filterInput","actions","self","[object Object]","input","views","branchId","getParent","settings","_graphqlTag","_fragments","MenuRecipeFragment","PriceFragment","MenuRecipeVisibilityMutation","MenuRecipeCreateMutation","MenuRecipeUpdateMutation","MenuRecipeDeleteMutation","_PageTitle","_i18n","Fragment","PageTitle","title","i18n","_reactRouter","_RootProvider","_NotFoundPage","_LazyRoute","_RedirectToLogin","_a","redirect","lazy","__rest","auth","useRoot","isAuthenticatedUser","RedirectToLogin","NotFoundPage","component","path","exact","LazyRoute","Route","_mobx","_mobxReactLite","_config","_ramda","TitleStyled","h1","greyLight","observableTitles","array","autorun","lastTitle","from","pop","document","appConfig","pageTitleSuffix","Component","push","this","prevProps","findIndex","RM","equals","splice","remove","_extends","render","Display","Observer","join","_buildQuery","MenuCategoryListFragment","CategoryListQuery","QueryCategoryList","buildQuery","ZoneFragment","GeoPointFragment","ZoneLocationQuery","ZoneBranchLocationQuery","ZoneColorsQuery","_debug","_verror","types","model","log","getPath","client","getEnv","apolloClient","VError","root","getRoot","routeProps","Suspense","fallback","_Pacman","_color","applyAlphaToColor","curry","alphaValue","alpha","string","Radiuses","MarginAroundFormComponents","Small","Middle","LayoutGridCellMargin","ButtonHeight","DefaultInputWidth","DefaultSizeUnit","_interopRequireWildcard","useColors","logMain","logDebug","logError","logAuth","logRouting","logPersistence","logBootstrap","logAccess","logGraph","logForm","logSentry","logLang","logTest","console","_jsBase","_LoginProviderModel","_AuthModel","_BaseModel","AuthModel","userId","optional","token","provider","LoginProviderModel","isAuthenticated","length","communicationToken","tokenForPasswordChange","canCommunicate","undefined","identifyUser","cache","reset","temporaryB64EncodedToken","invalidate","Base64","decode","password","mutate","mutation","PasswordChangeMutation","fetchPolicy","updateUserPassword","id","data","authenticate","preProcessSnapshot","snapshot","EmailFragment","PhoneFragment","_gps","GPSCzechia","MapModel","zoom","number","mapRef","gpsToLatLng","ref","getZoom","getCenter","_AllergenFragment","_WareUnitFragment","MenuStockItemFragment","WareUnitFragment","AllergenFragment","MenuStockCreateMutation","MenuStockUpdateMutation","MenuStockDeleteMutation","useOrigin","children","match","location","Redirect","to","pathname","state","origin","_Icon","applyAlpha","TouchButtonStyled","button","Spacing","width","height","Button","ButtonLabelStyled","div","ButtonLabelNextToIconStyled","iconColor","iconSize","greyMiddle","textNextToIcon","badge","text","Icon","Card","lighten","textColor","black","padding","stretchToParent","css","_dateFns","_fp","_cs","_numeral","currentLocale","formatLocale","formatWithOptions","locale","formatFullDate","formatDate","formatDateISO","format","formatTime","formatDateTime","price","time","isSameDay","Date","address","street","houseNumber","city","_PageLayout","PageLayout","layouts","i","x","y","w","h","getLayout","key","_GridLayout","_SoundControl","_LogoutWidget","_SecureRoute","_HomeButton","TopLeftButtonContainer","getPosition","scrollPageTitle","TopRightContainer","PageTitleContainer","SoundControlContainer","pageTitle","hideLogoutWidget","showSoundControl","useBackButton","backRoute","SoundControl","SecureRoute","LogoutWidget","GridLayout","HomeButton","goBack","_OrderStateDeliver","OrderStateCategoryFragment","UpdateOrderStateMutation","SendOrderNotificationMutation","SelectOrderDriverMutation","OrderDriverFragment","RemoveOrderDriverMutation","effect","useEffect","DriverFragment","OrderDriverSelection","QueryDriverSelection","_raf","_useStateRef","interval","enabled","getNow","now","nextTick","cancelTick","cancel","getLastUpdate","setLastUpdate","useStateRef","handleRef","useRef","onFrame","loop","onStop","current","ESpecificHourMode","_formats","_BusinessHoursModel","byIdPredicate","complement","propEq","BusinessHoursModel","specificMode","enumeration","TIMESPAN","mode","values","companyBranch","specificDate","date","closed","FULLDAY","openAt","closeAt","closedNote","note","CreateSpecificBusinessHour","updateQueries","GSpecificBusinessHours","prev","mutationResult","businessHours","concat","businessHourId","DeleteSpecificBusinessHour","filter","_errorHandler","_CategoryList","_MenuBaseModel","_MenuCategoryModel","MenuCategoryModel","categoryId","offset","SortMenuCategoryMutation","Boolean","success","visible","MenuCategoryVisibility","optimisticResponse","updateRecipe","__typename","formValues","categoryType","Object","assign","wareCategoryType","getFormVariables","getQueryErrors","MenuCategoryCreateMutation","refetchQueries","MenuCategoryUpdateMutation","MenuCategoryDeleteMutation","nameLabel","internalNoteLabel","pictogram","recipes","prop","recipeId","_RecipeForm","_RecipeList","_MenuRecipeModel","MenuRecipeModel","recipeType","recipe","MenuRecipeListQuery","MenuRecipeDefaultVat","defaultVats","reduce","vatId","priceType","enum","code","internalNote","descriptionLabel","prices","keys","warePriceType","value","vat","sideDishCategories","sideDishes","wareCategories","categories","associatedRecipes","pick","ingredients","stockItem","quantity","parseFloat","replace","parseNumber","MenuRecipePriceFragment","MenuAssocRecipeFragment","MenuRecipeFormQuery","MenuRecipeFormAssocQuery","QueryMenuRecipeFormAssoc","QueryRecipeList","_MenuStockModel","MenuStockListQuery","QueryMenuStockList","_reactGridLayout","ReactGridLayout","WidthProvider","layout","cols","rowHeight","margin","autoSize","isDraggable","isResizable","compactType","measureBeforeMount","_reactSound","_logger","_IntervalRender","_WithRoot","intervalSec","soundUrl","shouldPlay","skipEnableChecks","WithRoot","config","user","soundEnabled","IntervalRender","isActive","nextLoop","url","playStatus","onFinishedPlaying","autoLoad","volume","soundVolume","CreateFinancialReport","SpecificBusinessHourFragment","QuerySpecificBusinessHours","MenuCategoryFormFragment","MenuCategoryFormQuery","initialState","setState","useState","_reactDom","_App","_Router","_ThemeProvider","_UpdateHandler","Main","ThemeProvider","RootProvider","I18nManager","UpdateHandler","Router","App","installSentry","rootElement","getElementById","localStorage","setItem","_notistack","_ConnectionWarning","_ErrorContainer","_Routing","ErrorContainer","prod","ConnectionWarning","SnackbarProvider","maxSnack","anchorOrigin","horizontal","vertical","isReady","Routing","_core","_icons","_react2","_connectionWarning","_offline","_SoundPlayInterval","MessageStyled","red","observer","SoundPlayInterval","isNetworkOffline","Dialog","open","disableBackdropClick","disableEscapeKeyDown","WarningTwoTone","Trans","cleanup","executeCleanup","useCallback","forEach","fn","renderFragment","renderLoading","renderError","refetchOnConnectionLost","rest","_reactApollo","Query","loading","_Loading","Loading","error","reportError","whenGoingOnline","refetch","_reactApolloHooks","useQuery","module","p","nextTime","getNextTime","timer","executeTimer","clearTimeout","timeMs","differenceInMilliseconds","setTimeout","activate","deactivate","addSeconds","RootContext","createContext","_apolloCacheInmemory","InMemoryCache","dataIdFromObject","o","authLink","_AuthLink","retryLink","_apolloLinkRetry","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","_operation","offlineLink","_apolloLinkQueue","isNetworkOnline","close","createOfflineLink","errorLink","createErrorLink","httpLink","_apolloLinkBatchHttp","BatchHttpLink","uri","endpoint","credentials","subscriptionLink","_SubscriptionLink","_apolloClient","ApolloClient","link","_apolloLink","ApolloLink","split","isSubscriptionOperation","headers","computed","Authorization","forward","context","getContext","setContext","Observable","sub","subscribe","networkError","next","bind","complete","unsubscribe","cableUrl","cable","connectionParams","_actioncable","createConsumer","channelId","getChannelId","subscription","subscriptions","create","channel","connected","perform","_language","print","operationId","received","payload","more","_apolloUtilities","getOperationDefinitionOrDie","Math","round","random","toString","modelName","getType","name","stateKey","persistenceKey","writeState","_localforage","getItem","applySnapshot","getSnapshot","err","removeItem","onSnapshot","_PasswordLoginModel","passwordLogin","PasswordLoginModel","errorCode","errorMessage","hasFailed","message","username","getLoginUrl","fetch","response","Accept","json","status","setFailure","setSuccess","String","overrides","env","_ConfigModel","_UserModel","_CreateOrderModel","_OrderModel","_StatisticsModel","_SettingsModel","_ZoneModel","RootModel","UserModel","order","OrderModel","createOrder","CreateOrderModel","zone","ZoneModel","SettingsModel","ConfigModel","statistics","StatisticsModel","persistedModels","orderListPollIntervalSec","orderListSoundIntervalSec","_lodash","R","_ramda2","language","maybe","soundIgnore","isLoaded","branches","brands","permissions","branchesId","defaultBranch","Error","filterBranches","predicate","canQuery","queryName","queries","has","toLowerCase","canMutate","mutationName","mutations","uniqBy","mapValues","fields","Set","compose","toLower","setLanguage","flow","changeLanguage","ignore","initUser","Promise","resolve","detectLanguage","UserModelBootstrapQuery","rawCode","applyUserData","applyUserPermissions","finishBootstrap","queryUser","lang","aliasLocales","en","./bg","./bg.js","./chs","./chs.js","./cs","./cs.js","./da-dk","./da-dk.js","./de","./de-ch","./de-ch.js","./de.js","./en-au","./en-au.js","./en-gb","./en-gb.js","./en-za","./en-za.js","./es","./es-es","./es-es.js","./es.js","./et","./et.js","./fi","./fi.js","./fr","./fr-ca","./fr-ca.js","./fr-ch","./fr-ch.js","./fr.js","./hu","./hu.js","./it","./it.js","./ja","./ja.js","./lv","./lv.js","./nl-be","./nl-be.js","./nl-nl","./nl-nl.js","./no","./no.js","./pl","./pl.js","./pt-br","./pt-br.js","./pt-pt","./pt-pt.js","./ru","./ru-ua","./ru-ua.js","./ru.js","./sk","./sk.js","./sl","./sl.js","./th","./th.js","./tr","./tr.js","./uk-ua","./uk-ua.js","./vi","./vi.js","webpackAsyncContext","req","ids","e","then","t","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","CompanyBranchFragment","AddressFragment","_GeoPointFragment","_EmailFragment","_PhoneFragment","CustomerFragment","_types","_faker","getDefaultProps","currentBranch","find","deliveryType","isDelivery","Messenger","hasAddress","deliveryAddress","fakeAddress","clearGps","phone","callingPhone","vamCustomer","isFound","firstName","lastName","email","lastOrder","defaults","fakeValues","hasOrder","orderId","cartRefreshKey","acceptOrderVariables","customer","emails","phones","resetModel","ensureOrder","callEventId","callingEventId","CreateOrderMutation","cancelOrder","CancelOrderMutation","resetOrder","validateLocation","notDeliveryLocation","ValidateLocationQuery","resolveLocation","inDeliveryLocation","eventId","touched","faker","internet","phoneNumberFormat","lorem","sentence","slice","fallbackLanguage","supportedLanguages","sentryDSN","languages","detector","LocaleResolver","NavigatorDetector","LanguageOnlyTransformer","getLocales","loc","includes","catalog","load","loadCatalog","changeNumeralLocale","setupI18n","useObserver","I18nProvider","Children","only","_OrderListModel","_OrderMapModel","_OrderStateModel","list","OrderListModel","OrderMapModel","OrderStateModel","_reactScroll","collapsedCategories","Finished","branchesFilter","hasBranchFilter","isSingleBranchSelected","firstBranchId","orderMap","clear","panToOrder","extend","detailOpen","Map","isOrderDetailOpen","isCategoryCollapsed","categoryCode","delete","panMapToOrder","category","index","indexOf","setImmediate","scroller","scrollTo","smooth","containerId","absolute","_MapModel","OrderLocationQuery","panTo","OrderBranchLocationQuery","deliverOrder","updateOrderState","OnWay","minutes","driverId","orderDriverId","_ClosureStatisticsControl","closureBranch","maybeNull","dateFrom","dateTo","branch","companyBranchId","_MenuModel","selectedBranchId","menu","MenuModel","head","queryProps","skip","otherVariables","_SpecificBusinessHours","_SettingsBaseModel","SettingsBaseModel","stock","MenuStockModel","_CategoryForm","_StockList","stockId","label","plu","allergens","wareUnit","allowNegative","_ZoneMapModel","ZoneMapModel","brandId","brand","branchFilterId","branchFilterPredicate","pathSatisfies","zoneFilterPredicate","panToBranch","brandBranches","createZone","onZoneCreate","generatePolygon","CreateZoneMutation","GZones","zones","zoneId","update","zoneColor","minimalOrderPrice","priceRangeRules","normalizePriceRangeRule","reject","pathEq","geoPolygon","currentZonePoints","UpdateZoneMutation","zoneIdx","updateZone","clearZonePoints","DestroyZoneMutation","changeZonePriority","oldIndex","newIndex","UpdateZonePriorityMutation","updateZonePriority","priority","numberOrNull","num","isNaN","range","toPrice","_Zones","_reactErrorGuard","ProductionErrorBoundary","dispatchErrorReporting","reportRenderingError","info","DeveloperErrorBoundary","_ErrorPage","_LogRoute","_RedirectAfterLogin","_RedirectAfterLogout","PasswordLoginRoute","all","PasswordChangeRoute","MainDashboardPage","OrderRoutes","SettingsRoutes","OverviewRoutes","SupportPage","LogRoute","RedirectAfterLogin","Switch","ErrorPage","RedirectAfterLogout","_Card","_FullPageLayout","IconStyled","FullPageLayout","Warning","style","_TouchButton","SoundControlContainerStyled","SoundButtonStyled","TouchButton","playPreview","green","onClick","controlSound","_reactRouterDom","LogoutWidgetStyled","LoggedUserNameStyled","QueryLogoutWidget","data-testid","Link","getNameDisplay","HomeButtonStyled","history","route","waitForAuthentication","redirectAfterLogin","when","_reactGoodbye","Provider","handleGetUserConfirm","BrowserRouter","getUserConfirmation","theme","createMuiTheme","typography","useNextVariants","MuiThemeProvider","_tools","_useEffectOnce","_useTimer","UpdateSnack","onConfirm","onCancel","endTime","autoHideDuration","useTimer","SECOND","remainingSeconds","formatDistanceStrict","Snackbar","disableWindowBlurListener","action","size","role","onClose","onRestart","reload","autoUpdateDelay","postponeTimeout","MINUTE","updateCheckInterval","HOUR","updateWorker","useObservable","updatePending","postponedAt","onMessage","event","useEffectOnce","checkIntervalRef","serviceWorker","register","onInit","reg","setInterval","onUpdate","sw","init","removeEventListener","clearInterval","postMessage","_emotion","_mobxReact","_RootContext","_createClient","_persistModel","_useInitializer","_RootModel","ApolloContext","errorSnack","colors","setRoot","hasNetworkError","setNetworkError","useInitializer","createApolloClient","rootModel","persistModel","SnackbarContent","ApolloProvider","useContext","_AddressFragment","_CompanyBranchFragment","_CustomerFragment","_PriceFragment","_ravenJs","environment","install","setUserContext","isSetup","captureException","extra","captureMessage","cause","_reactSpinkit","noMargin","display","alignSelf","justifyContent","marginTop","orange"],"mappings":"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AAI,+BCHN,IAAAnyB,EAAA,CACAoyB,OAAA,CACA,KACA,GAEAC,UAAA,CACA,KACA,GAEAC,QAAA,CACA,KACA,GAEAC,WAAA,CACA,KACA,GAEAC,OAAA,CACA,KACA,GAEAC,UAAA,CACA,KACA,GAEAC,UAAA,CACA,KACA,GAEAC,aAAA,CACA,KACA,GAEAC,OAAA,CACA,KACA,GAEAC,UAAA,CACA,KACA,GAEAC,aAAA,CACA,KACA,GAEAC,UAAA,CACA,KACA,GAEAC,UAAA,CACA,KACA,GAEAC,aAAA,CACA,KACA,GAEAC,UAAA,CACA,KACA,GAEAC,aAAA,CACA,KACA,GAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,OAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA,IAEAC,aAAA,CACA,KACA,IAEAC,UAAA,CACA,KACA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","file":"static/js/main.051a430f.chunk.js","sourcesContent":["import { computeDestinationPoint, getBounds } from 'geolib'\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n\ninterface IGeneratePolygonInput {\n  center: GeoPoint\n  metersRadius?: number\n  pointsCount?: number\n}\n\nexport const generatePolygon = ({\n  center,\n  metersRadius = 1000,\n  pointsCount = 15,\n}: IGeneratePolygonInput) => {\n  return new Array(pointsCount).fill(null).map((_, idx) => {\n    const degree = 360 / pointsCount * idx\n    return computeDestinationPoint(center, metersRadius, degree)\n  })\n}\n\nexport const getBoundsOfPoints = (points: GeoPoint[]) => {\n  const bounds = getBounds(points)\n  if (!bounds) {\n    return null\n  }\n  return new google.maps.LatLngBounds(\n    {\n      lat: bounds.minLat,\n      lng: bounds.minLng,\n    },\n    {\n      lat: bounds.maxLat,\n      lng: bounds.maxLng,\n    },\n  )\n}\n","export interface InputOrderIndex {\n  readonly companyBranches?: ReadonlyArray<string> | null\n\n  readonly user?: string | null\n\n  readonly orderStatesAND?: ReadonlyArray<OrderStateEnum> | null\n\n  readonly orderStatesOR?: ReadonlyArray<OrderStateEnum> | null\n\n  readonly orderStateCategoriesOR?: ReadonlyArray<OrderStateCategoryEnum> | null\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum | null\n\n  readonly currency?: CurrencyEnum | null\n\n  readonly location?: InputLocationIndex | null\n\n  readonly stateChangeSince?: string | null\n\n  readonly includeOldFinished?: boolean | null\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: number | null\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputVamStatus {\n  readonly email?: string | null\n\n  readonly phone?: string | null\n\n  readonly firstname?: string | null\n\n  readonly lastname?: string | null\n\n  readonly orderId: string\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: string | null\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum> | null\n\n  readonly name: string\n\n  readonly enabled?: boolean | null\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: string | null\n\n  readonly closeAt?: string | null\n\n  readonly specificDate: string\n\n  readonly closed?: boolean | null\n\n  readonly smsLabel?: InputLabelCreate | null\n\n  readonly webLabel?: InputLabelCreate | null\n\n  readonly closedNote?: string | null\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: InputLabelCreate | null\n\n  readonly webLabel?: InputLabelCreate | null\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: string | null\n\n  readonly internalCode?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate> | null\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: string | null\n\n  readonly dateFrom?: string | null\n\n  readonly timeFrom?: string | null\n\n  readonly dateTo?: string | null\n\n  readonly timeTo?: string | null\n\n  readonly available?: boolean | null\n\n  readonly periodic?: boolean | null\n\n  readonly weekDay?: WeekDayEnum | null\n}\n\nexport interface InputWareUpdate {\n  readonly code?: string | null\n\n  readonly internalCode?: string | null\n\n  readonly companyBranch?: string | null\n\n  readonly nameLabel?: InputLabelUpdate | null\n\n  readonly descriptionLabel?: InputLabelUpdate | null\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: ReadonlyArray<InputLabelTranslation> | null\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: string | null\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: string | null\n\n  readonly wareRequirement?: WareRequirementEnum | null\n\n  readonly enabled?: boolean | null\n\n  readonly public?: boolean | null\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate> | null\n\n  readonly maxRecipesCount?: number | null\n\n  readonly recipes?: ReadonlyArray<string> | null\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: string | null\n\n  readonly pictogram?: string | null\n\n  readonly nameLabel?: string | null\n\n  readonly internalNoteLabel?: string | null\n\n  readonly wareRequirement?: WareRequirementEnum | null\n\n  readonly wareCategoryType?: WareCategoryTypeEnum | null\n\n  readonly enabled?: boolean | null\n\n  readonly public?: boolean | null\n\n  readonly maxRecipesCount?: number | null\n\n  readonly recipes?: ReadonlyArray<string> | null\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number | null\n\n  readonly placeCode: string\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: string | null\n\n  readonly internalNote?: string | null\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean | null\n\n  readonly ingredients?: ReadonlyArray<InputRecipeIngredient> | null\n\n  readonly wareCategories?: ReadonlyArray<string> | null\n\n  readonly sideDishCategories?: ReadonlyArray<string> | null\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate> | null\n\n  readonly video?: string | null\n\n  readonly code?: string | null\n\n  readonly ware?: string | null\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: ReadonlyArray<InputRecipeRelationCreate> | null\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: CurrencyEnum | null\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: string | null\n\n  readonly nameLabel?: string | null\n\n  readonly descriptionLabel?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly internalNote?: string | null\n\n  readonly video?: string | null\n\n  readonly code?: string | null\n\n  readonly ingredients?: ReadonlyArray<InputRecipeIngredient> | null\n\n  readonly wareCategories?: ReadonlyArray<string> | null\n\n  readonly sideDishCategories?: ReadonlyArray<string> | null\n\n  readonly prices?: ReadonlyArray<InputRecipePriceCreate> | null\n\n  readonly associatedRecipes?: ReadonlyArray<InputRecipeRelationCreate> | null\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: OrderRecipeStateEnum | null\n\n  readonly parent?: string | null\n\n  readonly sideDishes?: ReadonlyArray<string> | null\n\n  readonly associatedRecipes?: ReadonlyArray<string> | null\n\n  readonly amount?: number | null\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: string | null\n\n  readonly recipe?: string | null\n\n  readonly orderRecipeState?: string | null\n\n  readonly parent?: string | null\n\n  readonly sideDishes?: ReadonlyArray<string> | null\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: string | null\n\n  readonly zoneType?: ZoneTypeEnum | null\n\n  readonly zoneColor?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly geoPolygon?: ReadonlyArray<InputGeoPointCreate> | null\n\n  readonly availability?: InputAvailabilityCreate | null\n\n  readonly priceRangeRules?: ReadonlyArray<PriceRangeRuleCreate> | null\n\n  readonly minimalOrderPrice?: InputCurrencyCreate | null\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: string | null\n\n  readonly name?: string | null\n\n  readonly zoneColor?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly geoPolygon?: ReadonlyArray<InputGeoPointCreate> | null\n\n  readonly availability?: InputAvailabilityUpdate | null\n\n  readonly priceRangeRules?: ReadonlyArray<PriceRangeRuleCreate> | null\n\n  readonly minimalOrderPrice?: InputCurrencyCreate | null\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: string | null\n\n  readonly dateFrom?: string | null\n\n  readonly timeFrom?: string | null\n\n  readonly dateTo?: string | null\n\n  readonly timeTo?: string | null\n\n  readonly available?: boolean | null\n\n  readonly periodic?: boolean | null\n\n  readonly weekDay?: WeekDayEnum | null\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: string | null\n\n  readonly brand?: string | null\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: DeliveryTypeEnum | null\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: InputGeoPointCreate | null\n\n  readonly warePriceType?: WarePriceTypeEnum | null\n\n  readonly deliveryType?: DeliveryTypeEnum | null\n\n  readonly orderRecipes?: ReadonlyArray<InputOrderRecipeCreates> | null\n\n  readonly customer?: InputCustomerCreate | null\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: ReadonlyArray<string> | null\n\n  readonly associatedRecipes?: ReadonlyArray<string> | null\n\n  readonly amount?: number | null\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: string | null\n\n  readonly lastName?: string | null\n\n  readonly emails?: ReadonlyArray<InputEmailCreate> | null\n\n  readonly phones?: ReadonlyArray<InputPhoneCreate> | null\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: string | null\n\n  readonly default?: boolean | null\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: string | null\n\n  readonly default?: boolean | null\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum | null\n\n  readonly language?: LanguageEnum | null\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: InputGeoPointCreate | null\n\n  readonly notification?: InputNotificationCreate | null\n\n  readonly note?: string | null\n\n  readonly deliverAt?: string | null\n\n  readonly location?: InputLocationCreate | null\n\n  readonly callEventId?: string | null\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: string | null\n\n  readonly chrome?: { [key: string]: string | number } | null\n\n  readonly firebase?: { [key: string]: string | number } | null\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: number | null\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: InputCustomerCreate | null\n  /** payment method used to finalize order */\n  readonly paymentMethod?: PaymentTypeEnum | null\n  /** payment gate used to finalize order */\n  readonly paymentGate?: PaymentGateEnum | null\n\n  readonly deliverAt?: string | null\n\n  readonly note?: string | null\n\n  readonly confirmedAgreements?: ReadonlyArray<string> | null\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: DeliveryTypeEnum | null\n\n  readonly language?: LanguageEnum | null\n\n  readonly customer?: InputCustomerCreate | null\n\n  readonly gps?: InputGeoPointCreate | null\n\n  readonly notification?: InputNotificationCreate | null\n\n  readonly note?: string | null\n\n  readonly deliverAt?: string | null\n\n  readonly location?: InputLocationCreate | null\n\n  readonly warePriceType?: WarePriceTypeEnum | null\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: string | null\n\n  readonly quantity?: number | null\n\n  readonly allergens?: ReadonlyArray<AllergenEnum> | null\n\n  readonly note?: string | null\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: number | null\n\n  readonly label?: string | null\n\n  readonly code?: string | null\n\n  readonly plu?: string | null\n\n  readonly wareUnit?: WareUnitEnum | null\n\n  readonly allergens?: ReadonlyArray<AllergenEnum> | null\n\n  readonly note?: string | null\n\n  readonly allowNegative?: FieldStateEnum | null\n}\n\nexport interface InputUserUpdate {\n  readonly language?: LanguageEnum | null\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  FeAdmin = 'FE_ADMIN',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport namespace MPasswordChange {\n  export type Variables = {\n    readonly password: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateUserPassword: UpdateUserPassword\n  }\n\n  export type UpdateUserPassword = {\n    readonly __typename?: 'UserUpdatedPassword'\n\n    readonly id: string\n\n    readonly token: string\n  }\n}\n\nexport namespace GUserModelBootstrap {\n  export type Variables = {\n    readonly userId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly user: User\n  }\n\n  export type User = {\n    readonly __typename?: 'User'\n\n    readonly id: string\n\n    readonly language: Language\n\n    readonly branches: ReadonlyArray<Branches>\n  }\n\n  export type Language = {\n    readonly __typename?: 'Language'\n\n    readonly rawCode: string\n  }\n\n  export type Branches = GCompanyBranch.Fragment\n}\n\nexport namespace GAddressSuggest {\n  export type Variables = {\n    readonly search: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly suggest: ReadonlyArray<Suggest>\n  }\n\n  export type Suggest = {\n    readonly __typename?: 'JsonAddress'\n\n    readonly state: string | null\n\n    readonly city: string | null\n\n    readonly street: string | null\n\n    readonly houseNumber: string | null\n\n    readonly gps: Gps | null\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\n\nexport namespace GLogoutWidget {\n  export type Variables = {\n    readonly id: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly user: User\n  }\n\n  export type User = {\n    readonly __typename?: 'User'\n\n    readonly id: string\n\n    readonly firstName: string | null\n\n    readonly lastName: string | null\n  }\n}\n\nexport namespace GCreateSpecificBusinessHour {\n  export type Variables = {\n    readonly input: InputBusinessHourSpecificDateCreate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly result: Result\n  }\n\n  export type Result = GSpecificBusinessHour.Fragment\n}\n\nexport namespace GDeleteSpecificBusinessHour {\n  export type Variables = {\n    readonly id: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly result: Result\n  }\n\n  export type Result = {\n    readonly __typename?: 'BusinessHour'\n\n    readonly id: string\n  }\n}\n\nexport namespace GSpecificBusinessHours {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly businessHours: ReadonlyArray<BusinessHours>\n  }\n\n  export type BusinessHours = GSpecificBusinessHour.Fragment\n}\n\nexport namespace MAcceptOrder {\n  export type Variables = {\n    readonly orderId: string\n    readonly customer: InputCustomerCreate\n    readonly note?: string | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly finishOrder: FinishOrder\n  }\n\n  export type FinishOrder = {\n    readonly __typename?: 'FinishedOrder'\n\n    readonly userErrors: ReadonlyArray<string>\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  }\n}\n\nexport namespace MSetOrderDeliveryTime {\n  export type Variables = {\n    readonly orderId: string\n    readonly time: number\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly orderNotifyCustomer: OrderNotifyCustomer\n  }\n\n  export type OrderNotifyCustomer = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly deliverAt: string | null\n  }\n}\n\nexport namespace MUpdateOrder {\n  export type Variables = {\n    readonly orderId: string\n    readonly deliveryType: DeliveryTypeEnum\n    readonly gps: InputGeoPointCreate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateOrder: UpdateOrder\n  }\n\n  export type UpdateOrder = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  }\n}\n\nexport namespace GValidateLocation {\n  export type Variables = {\n    readonly branchId: string\n    readonly latitude: number\n    readonly longitude: number\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly resolveLocation: ResolveLocation\n  }\n\n  export type ResolveLocation = {\n    readonly __typename?: 'AddressResolvedLocation'\n\n    readonly inDeliveryLocation: boolean\n  }\n}\n\nexport namespace GCreateOrder {\n  export type Variables = {\n    readonly branchId: string\n    readonly deliveryType: DeliveryTypeEnum\n    readonly gps: InputGeoPointCreate\n    readonly callEventId?: string | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createOrder: CreateOrder\n  }\n\n  export type CreateOrder = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  }\n}\n\nexport namespace MCancelOrder {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly addOrderState: AddOrderState\n  }\n\n  export type AddOrderState = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  }\n}\n\nexport namespace GOrderVam {\n  export type Variables = {\n    readonly branchId: string\n    readonly phone: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly vamCustomer: VamCustomer\n  }\n\n  export type VamCustomer = {\n    readonly __typename?: 'CustomerInformation'\n\n    readonly isFound: boolean\n\n    readonly email: string\n\n    readonly firstName: string\n\n    readonly lastName: string\n\n    readonly lastOrder: LastOrder | null\n\n    readonly locations: ReadonlyArray<Locations>\n  }\n\n  export type LastOrder = {\n    readonly __typename?: 'Order'\n\n    readonly note: string | null\n  }\n\n  export type Locations = {\n    readonly __typename?: 'JsonAddress'\n\n    readonly street: string | null\n\n    readonly houseNumber: string | null\n\n    readonly city: string | null\n\n    readonly state: string | null\n\n    readonly gps: Gps | null\n  }\n\n  export type Gps = {\n    readonly __typename?: 'GeoPoint'\n\n    readonly latitude: number\n\n    readonly longitude: number\n  }\n}\n\nexport namespace GOrderPromo {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly promoCodes: ReadonlyArray<PromoCodes>\n  }\n\n  export type PromoCodes = {\n    readonly __typename?: 'PromoCode'\n\n    readonly id: string\n\n    readonly code: string\n  }\n}\n\nexport namespace MAddOrderPromo {\n  export type Variables = {\n    readonly orderId: string\n    readonly code: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly addOrderPromoCode: AddOrderPromoCode\n  }\n\n  export type AddOrderPromoCode = {\n    readonly __typename?: 'OrderWithErrors'\n\n    readonly userErrors: ReadonlyArray<string>\n  }\n}\n\nexport namespace MRemoveOrderPromo {\n  export type Variables = {\n    readonly orderId: string\n    readonly codeId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly removeOrderPromoCode: RemoveOrderPromoCode\n  }\n\n  export type RemoveOrderPromoCode = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  }\n}\n\nexport namespace GOrderMenu {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly orderMenu: ReadonlyArray<OrderMenu>\n  }\n\n  export type OrderMenu = GOrderMenuCategory.Fragment\n}\n\nexport namespace SOrderCall {\n  export type Variables = {}\n\n  export type Subscription = {\n    readonly __typename?: 'Subscription'\n\n    readonly updatedUserCallingCustomer: UpdatedUserCallingCustomer\n  }\n\n  export type UpdatedUserCallingCustomer = {\n    readonly __typename?: 'UserCallingCustomerSubscription'\n\n    readonly eventId: string\n\n    readonly phone: string\n\n    readonly isRinging: boolean\n  }\n}\n\nexport namespace GOrderCount {\n  export type Variables = {\n    readonly branchesId: ReadonlyArray<string>\n    readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly ordersCount: number\n  }\n}\n\nexport namespace SOrderCount {\n  export type Variables = {\n    readonly branchesId: ReadonlyArray<string>\n    readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n  }\n\n  export type Subscription = {\n    readonly __typename?: 'Subscription'\n\n    readonly updatedOrdersCount: UpdatedOrdersCount\n  }\n\n  export type UpdatedOrdersCount = {\n    readonly __typename?: 'OrderCountSubscription'\n\n    readonly ordersCount: number\n  }\n}\n\nexport namespace GSortMenuCategory {\n  export type Variables = {\n    readonly categoryId: string\n    readonly offset: number\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly success: boolean\n  }\n}\n\nexport namespace GMenuCategoryCreate {\n  export type Variables = {\n    readonly input: InputWareCategoryCreate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createWareCategory: CreateWareCategory\n  }\n\n  export type CreateWareCategory = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n  }\n}\n\nexport namespace GMenuCategoryUpdate {\n  export type Variables = {\n    readonly categoryId: string\n    readonly input: InputWareCategoryUpdate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateWareCategory: UpdateWareCategory\n  }\n\n  export type UpdateWareCategory = GMenuCategoryForm.Fragment\n}\n\nexport namespace GMenuCategoryVisibility {\n  export type Variables = {\n    readonly categoryId: string\n    readonly visible: boolean\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateWareCategory: UpdateWareCategory\n  }\n\n  export type UpdateWareCategory = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n\n    readonly visible: boolean\n  }\n}\n\nexport namespace GMenuCategoryDelete {\n  export type Variables = {\n    readonly categoryId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly destroyWareCategory: DestroyWareCategory\n  }\n\n  export type DestroyWareCategory = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n  }\n}\n\nexport namespace GMenuRecipeVisibility {\n  export type Variables = {\n    readonly recipeId: string\n    readonly visible: boolean\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateRecipe: UpdateRecipe\n  }\n\n  export type UpdateRecipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly visible: boolean\n  }\n}\n\nexport namespace GMenuRecipeCreate {\n  export type Variables = {\n    readonly recipe: InputRecipeCreate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createRecipe: CreateRecipe\n  }\n\n  export type CreateRecipe = GMenuRecipe.Fragment\n}\n\nexport namespace GMenuRecipeUpdate {\n  export type Variables = {\n    readonly recipeId: string\n    readonly recipe: InputRecipeUpdate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateRecipe: UpdateRecipe\n  }\n\n  export type UpdateRecipe = GMenuRecipe.Fragment\n}\n\nexport namespace GMenuRecipeDelete {\n  export type Variables = {\n    readonly recipeId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly destroyRecipe: DestroyRecipe\n  }\n\n  export type DestroyRecipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n  }\n}\n\nexport namespace GMenuStockCreate {\n  export type Variables = {\n    readonly stockItem: InputStockItemCreate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createStockItem: CreateStockItem\n  }\n\n  export type CreateStockItem = GMenuStockItem.Fragment\n}\n\nexport namespace GMenuStockUpdate {\n  export type Variables = {\n    readonly stockId: string\n    readonly stockItem: InputStockItemUpdate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateStockItem: UpdateStockItem\n  }\n\n  export type UpdateStockItem = GMenuStockItem.Fragment\n}\n\nexport namespace GMenuStockDelete {\n  export type Variables = {\n    readonly stockId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly destroyStockItem: DestroyStockItem\n  }\n\n  export type DestroyStockItem = {\n    readonly __typename?: 'StockItem'\n\n    readonly id: string\n  }\n}\n\nexport namespace GAllergens {\n  export type Variables = {}\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly allergens: ReadonlyArray<Allergens>\n  }\n\n  export type Allergens = GAllergen.Fragment\n}\n\nexport namespace GCurrencies {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly currencies: ReadonlyArray<Currencies>\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type Currencies = {\n    readonly __typename?: 'Currency'\n\n    readonly enum: CurrencyEnum\n\n    readonly code: string\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly address: Address\n  }\n\n  export type Address = {\n    readonly __typename?: 'Address'\n\n    readonly country: Country | null\n  }\n\n  export type Country = {\n    readonly __typename?: 'Country'\n\n    readonly currency: Currency\n  }\n\n  export type Currency = {\n    readonly __typename?: 'Currency'\n\n    readonly enum: CurrencyEnum\n  }\n}\n\nexport namespace GVats {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly vats: ReadonlyArray<Vats>\n  }\n\n  export type Vats = {\n    readonly __typename?: 'Vat'\n\n    readonly id: string\n\n    readonly vat: number\n  }\n}\n\nexport namespace GWareUnits {\n  export type Variables = {}\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly wareUnits: ReadonlyArray<WareUnits>\n  }\n\n  export type WareUnits = {\n    readonly __typename?: 'WareUnit'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly enum: WareUnitEnum\n  }\n}\n\nexport namespace GMenuCategoryForm {\n  export type Variables = {\n    readonly categoryId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly wareCategory: WareCategory\n  }\n\n  export type WareCategory = GMenuCategoryForm.Fragment\n}\n\nexport namespace GCategoryList {\n  export type Variables = {\n    readonly branchId: string\n    readonly categoryType: WareCategoryTypeEnum\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly wareCategories: ReadonlyArray<WareCategories>\n  }\n\n  export type WareCategories = GMenuCategoryListItem.Fragment\n}\n\nexport namespace GMenuRecipeForm {\n  export type Variables = {\n    readonly recipeId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly recipe: Recipe\n  }\n\n  export type Recipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly image: string | null\n\n    readonly nameLabel: string\n\n    readonly internalNote: string | null\n\n    readonly descriptionLabel: string | null\n\n    readonly visible: boolean\n\n    readonly recipeType: RecipeType\n\n    readonly sourcePrices: ReadonlyArray<SourcePrices>\n\n    readonly sideDishes: ReadonlyArray<SideDishes>\n\n    readonly categories: ReadonlyArray<Categories>\n\n    readonly sourceAssociatedRecipes: ReadonlyArray<SourceAssociatedRecipes>\n\n    readonly sourceIngredients: ReadonlyArray<SourceIngredients>\n  }\n\n  export type RecipeType = {\n    readonly __typename?: 'WareCategoryType'\n\n    readonly enum: WareCategoryTypeEnum\n  }\n\n  export type SourcePrices = GMenuRecipePrice.Fragment\n\n  export type SideDishes = GMenuCategoryListItem.Fragment\n\n  export type Categories = GMenuCategoryListItem.Fragment\n\n  export type SourceAssociatedRecipes = {\n    readonly __typename?: 'RecipeRelation'\n\n    readonly id: string\n\n    readonly priceType: PriceType\n\n    readonly recipe: _Recipe\n  }\n\n  export type PriceType = {\n    readonly __typename?: 'WarePriceType'\n\n    readonly enum: WarePriceTypeEnum\n  }\n\n  export type _Recipe = GMenuAssocRecipe.Fragment\n\n  export type SourceIngredients = {\n    readonly __typename?: 'Ingredient'\n\n    readonly id: string\n\n    readonly quantity: number\n\n    readonly stockItem: StockItem\n  }\n\n  export type StockItem = {\n    readonly __typename?: 'StockItem'\n\n    readonly id: string\n\n    readonly label: string\n\n    readonly wareUnit: WareUnit\n\n    readonly allergens: ReadonlyArray<Allergens>\n  }\n\n  export type WareUnit = {\n    readonly __typename?: 'WareUnit'\n\n    readonly id: string\n\n    readonly code: string\n  }\n\n  export type Allergens = {\n    readonly __typename?: 'Allergen'\n\n    readonly id: string\n\n    readonly enum: AllergenEnum\n  }\n}\n\nexport namespace GMenuRecipeFormAssoc {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly recipes: ReadonlyArray<Recipes>\n  }\n\n  export type Recipes = GMenuAssocRecipe.Fragment\n}\n\nexport namespace GMenuRecipeDefaultVat {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly defaultVats: ReadonlyArray<DefaultVats>\n  }\n\n  export type DefaultVats = {\n    readonly __typename?: 'VatPriceType'\n\n    readonly vatId: string\n\n    readonly priceType: PriceType\n  }\n\n  export type PriceType = {\n    readonly __typename?: 'WarePriceType'\n\n    readonly enum: WarePriceTypeEnum\n  }\n}\n\nexport namespace GMenuRecipeList {\n  export type Variables = {\n    readonly branchId: string\n    readonly categoryId?: string | null\n    readonly categoryType?: WareCategoryTypeEnum | null\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly recipes: ReadonlyArray<Recipes>\n  }\n\n  export type Recipes = GMenuRecipe.Fragment\n}\n\nexport namespace GMenuStockDeposit {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly stockItems: ReadonlyArray<StockItems>\n  }\n\n  export type StockItems = {\n    readonly __typename?: 'StockItem'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly plu: string | null\n\n    readonly nameLabel: string\n\n    readonly note: string\n\n    readonly quantity: number\n\n    readonly wareUnit: WareUnit\n  }\n\n  export type WareUnit = GWareUnit.Fragment\n}\n\nexport namespace GChangeMenuStockQuantity {\n  export type Variables = {\n    readonly stockItem: string\n    readonly quantityChange: number\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly changeAmountStockItem: ChangeAmountStockItem\n  }\n\n  export type ChangeAmountStockItem = {\n    readonly __typename?: 'StockItem'\n\n    readonly id: string\n\n    readonly quantity: number\n  }\n}\n\nexport namespace GMenuStockForm {\n  export type Variables = {\n    readonly stockId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly stockItem: StockItem\n  }\n\n  export type StockItem = {\n    readonly __typename?: 'StockItem'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly plu: string | null\n\n    readonly note: string\n\n    readonly nameLabel: string\n\n    readonly allowNegative: FieldStateEnum\n\n    readonly wareUnit: WareUnit\n\n    readonly allergens: ReadonlyArray<Allergens>\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type WareUnit = GWareUnit.Fragment\n\n  export type Allergens = GAllergen.Fragment\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly allowNegative: boolean\n  }\n}\n\nexport namespace GMenuStockDefaults {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly allowNegative: boolean\n  }\n}\n\nexport namespace GMenuStockList {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly stockItems: ReadonlyArray<StockItems>\n  }\n\n  export type StockItems = GMenuStockItem.Fragment\n}\n\nexport namespace GStockRecipes {\n  export type Variables = {\n    readonly stockId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly stockItem: StockItem\n  }\n\n  export type StockItem = {\n    readonly __typename?: 'StockItem'\n\n    readonly id: string\n\n    readonly ingredients: ReadonlyArray<Ingredients>\n  }\n\n  export type Ingredients = {\n    readonly __typename?: 'Ingredient'\n\n    readonly id: string\n\n    readonly recipe: Recipe\n  }\n\n  export type Recipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly descriptionLabel: string | null\n  }\n}\n\nexport namespace GOrderBranchLocation {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly gps: Gps\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\n\nexport namespace GOrderLocation {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly gps: Gps | null\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\n\nexport namespace GUpdateOrderState {\n  export type Variables = {\n    readonly orderId: string\n    readonly state: OrderStateEnum\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly addOrderState: AddOrderState\n  }\n\n  export type AddOrderState = {\n    readonly __typename?: 'Order'\n\n    readonly orderTiming: ReadonlyArray<OrderTiming>\n  } & GOrderStateCategory.Fragment\n\n  export type OrderTiming = {\n    readonly __typename?: 'OrderStateCategoryRelation'\n\n    readonly createdAt: string\n\n    readonly orderStateCategory: OrderStateCategoryEnum\n  }\n}\n\nexport namespace GSendOrderNotification {\n  export type Variables = {\n    readonly orderId: string\n    readonly minutes: number\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly orderNotifyCustomer: OrderNotifyCustomer\n  }\n\n  export type OrderNotifyCustomer = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly deliverAt: string | null\n  }\n}\n\nexport namespace GSelectOrderDriver {\n  export type Variables = {\n    readonly driverId: string\n    readonly orderId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createUserDeliveringOrder: CreateUserDeliveringOrder\n  }\n\n  export type CreateUserDeliveringOrder = {\n    readonly __typename?: 'UserDeliveringOrder'\n\n    readonly order: Order\n  }\n\n  export type Order = GOrderDriver.Fragment\n}\n\nexport namespace GRemoveOrderDriver {\n  export type Variables = {\n    readonly orderDriverId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly destroyUserDeliveringOrder: DestroyUserDeliveringOrder\n  }\n\n  export type DestroyUserDeliveringOrder = {\n    readonly __typename?: 'UserDeliveringOrder'\n\n    readonly order: Order\n  }\n\n  export type Order = GOrderDriver.Fragment\n}\n\nexport namespace GOrderDriverSelection {\n  export type Variables = {\n    readonly orderId: string\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n\n    readonly drivers: ReadonlyArray<Drivers>\n  }\n\n  export type Order = GOrderDriver.Fragment\n\n  export type Drivers = GDriver.Fragment\n}\n\nexport namespace GBranchDeliveryTime {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly defaultDeliveryTime: number\n  }\n}\n\nexport namespace MUpdateBranchDeliveryTime {\n  export type Variables = {\n    readonly branchId: string\n    readonly time: number\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateDefaultDeliveryTime: UpdateDefaultDeliveryTime\n  }\n\n  export type UpdateDefaultDeliveryTime = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly defaultDeliveryTime: number\n  }\n}\n\nexport namespace GOrderDetail {\n  export type Variables = {\n    readonly id: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly createdAt: string\n\n    readonly deliverAt: string | null\n\n    readonly companyBranch: CompanyBranch\n\n    readonly customer: Customer\n\n    readonly customerOrdersCountCurrent: number\n\n    readonly customerOrdersCountTotal: number\n\n    readonly note: string | null\n\n    readonly previousNote: string | null\n\n    readonly allAppliedRules: ReadonlyArray<string>\n\n    readonly items: ReadonlyArray<Items>\n\n    readonly totalSum: TotalSum\n\n    readonly transportFee: TransportFee\n\n    readonly coverPrice: CoverPrice\n\n    readonly totalDiscount: TotalDiscount\n\n    readonly orderTiming: ReadonlyArray<OrderTiming>\n  } & GOrderDriver.Fragment\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n  }\n\n  export type Customer = {\n    readonly __typename?: 'JsonCustomer'\n\n    readonly emails: ReadonlyArray<Emails>\n\n    readonly phones: ReadonlyArray<Phones>\n  }\n\n  export type Emails = GEmail.Fragment\n\n  export type Phones = GPhone.Fragment\n\n  export type Items = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly sidedishes: ReadonlyArray<Sidedishes>\n  } & GOrderDetailWare.Fragment\n\n  export type Sidedishes = GOrderDetailWare.Fragment\n\n  export type TotalSum = GPrice.Fragment\n\n  export type TransportFee = GPrice.Fragment\n\n  export type CoverPrice = GPrice.Fragment\n\n  export type TotalDiscount = GPrice.Fragment\n\n  export type OrderTiming = {\n    readonly __typename?: 'OrderStateCategoryRelation'\n\n    readonly createdAt: string\n\n    readonly orderStateCategory: OrderStateCategoryEnum\n  }\n}\n\nexport namespace GOrderList {\n  export type Variables = {\n    readonly branches?: ReadonlyArray<string> | null\n    readonly categories?: ReadonlyArray<OrderStateCategoryEnum> | null\n    readonly includeOldFinished?: boolean | null\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly orders: ReadonlyArray<Orders>\n\n    readonly orderStateCategories: ReadonlyArray<OrderStateCategories>\n  }\n\n  export type Orders = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  } & (GOrderStateCategory.Fragment &\n    GOrderListTicker.Fragment &\n    GOrderMapMarker.Fragment)\n\n  export type OrderStateCategories = {\n    readonly __typename?: 'OrderStateCategory'\n\n    readonly code: string\n\n    readonly enum: OrderStateCategoryEnum\n  }\n}\n\nexport namespace SOrderList {\n  export type Variables = {\n    readonly branches?: ReadonlyArray<string> | null\n    readonly categories?: ReadonlyArray<OrderStateCategoryEnum> | null\n  }\n\n  export type Subscription = {\n    readonly __typename?: 'Subscription'\n\n    readonly updatedOrder: UpdatedOrder\n  }\n\n  export type UpdatedOrder = {\n    readonly __typename?: 'OrderUpdateSubscription'\n\n    readonly order: Order | null\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  } & (GOrderStateCategory.Fragment &\n    GOrderListTicker.Fragment &\n    GOrderMapMarker.Fragment)\n}\n\nexport namespace GOrderState {\n  export type Variables = {\n    readonly orderId: string\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly deliveryType: DeliveryType | null\n  } & GOrderStateCategory.Fragment\n\n  export type DeliveryType = {\n    readonly __typename?: 'DeliveryType'\n\n    readonly enum: DeliveryTypeEnum\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly allowedCategories: ReadonlyArray<OrderStateCategoryEnum>\n  }\n}\n\nexport namespace GClosureHistory {\n  export type Variables = {\n    readonly branchId: string\n    readonly dateFrom: string\n    readonly dateTo: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly financialReports: ReadonlyArray<FinancialReports>\n  }\n\n  export type FinancialReports = {\n    readonly __typename?: 'FinancialReport'\n\n    readonly id: string\n\n    readonly reportDatetime: string\n\n    readonly reportSequence: number\n  }\n}\n\nexport namespace GClosureReportQuery {\n  export type Variables = {\n    readonly branchId: string\n    readonly reportId: string\n    readonly showReport: boolean\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly lastReport: LastReport\n\n    readonly report: Report | null\n  }\n\n  export type LastReport = {\n    readonly __typename?: 'FinancialReport'\n\n    readonly plainData: string\n\n    readonly reportDatetime: string\n\n    readonly reportSequence: number\n  }\n\n  export type Report = {\n    readonly __typename?: 'FinancialReport'\n\n    readonly plainData: string\n\n    readonly reportDatetime: string\n\n    readonly reportSequence: number\n  }\n}\n\nexport namespace GCreateFinancialReport {\n  export type Variables = {\n    readonly companyBranchId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly result: Result\n  }\n\n  export type Result = {\n    readonly __typename?: 'FinancialReport'\n\n    readonly id: string\n  }\n}\n\nexport namespace GDailyStatistics {\n  export type Variables = {\n    readonly branches: ReadonlyArray<string>\n    readonly dateFrom: string\n    readonly dateTo: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly stats: Stats\n  }\n\n  export type Stats = {\n    readonly __typename?: 'Statistics'\n\n    readonly categoryStatisticsPlain: string\n\n    readonly dailyStatisticsPlain: string\n\n    readonly deliveryStatisticsPlain: string\n\n    readonly driversStatisticsPlain: string\n  }\n}\n\nexport namespace GOrdersStatistics {\n  export type Variables = {\n    readonly branches: ReadonlyArray<string>\n    readonly dateFrom: string\n    readonly dateTo: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly stats: Stats\n  }\n\n  export type Stats = {\n    readonly __typename?: 'Statistics'\n\n    readonly finishedOrders: FinishedOrders\n  }\n\n  export type FinishedOrders = {\n    readonly __typename?: 'StatisticsOrders'\n\n    readonly fees: Fees\n\n    readonly onlinePayments: OnlinePayments\n\n    readonly total: Total\n\n    readonly ordersCount: number\n\n    readonly orders: ReadonlyArray<Orders>\n  }\n\n  export type Fees = GStatsPrice.Fragment\n\n  export type OnlinePayments = GStatsPrice.Fragment\n\n  export type Total = GStatsPrice.Fragment\n\n  export type Orders = GOrderListTicker.Fragment & GOrderStateCategory.Fragment\n}\n\nexport namespace GCreateZone {\n  export type Variables = {\n    readonly branchId: string\n    readonly points?: ReadonlyArray<InputGeoPointCreate> | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createZone: CreateZone\n  }\n\n  export type CreateZone = GZone.Fragment\n}\n\nexport namespace GUpdateZone {\n  export type Variables = {\n    readonly zoneId: string\n    readonly update: InputZoneUpdate\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateZone: UpdateZone\n  }\n\n  export type UpdateZone = GZone.Fragment\n}\n\nexport namespace GUpdateZonePriority {\n  export type Variables = {\n    readonly zoneId: string\n    readonly offset: number\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateZonePriority: ReadonlyArray<UpdateZonePriority>\n  }\n\n  export type UpdateZonePriority = {\n    readonly __typename?: 'Zone'\n\n    readonly id: string\n\n    readonly priority: number\n  }\n}\n\nexport namespace GDestroyZone {\n  export type Variables = {\n    readonly zoneId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly destroyZone: DestroyZone\n  }\n\n  export type DestroyZone = {\n    readonly __typename?: 'Zone'\n\n    readonly id: string\n  }\n}\n\nexport namespace GZones {\n  export type Variables = {\n    readonly branchesId: ReadonlyArray<string>\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly zones: ReadonlyArray<Zones>\n  }\n\n  export type Zones = GZone.Fragment\n}\n\nexport namespace GZoneLocation {\n  export type Variables = {\n    readonly zoneId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly zone: Zone\n  }\n\n  export type Zone = {\n    readonly __typename?: 'Zone'\n\n    readonly id: string\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly gps: Gps\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\n\nexport namespace GZoneBranchLocation {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly gps: Gps\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\n\nexport namespace GZoneColors {\n  export type Variables = {}\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly zoneColors: ReadonlyArray<ZoneColors>\n  }\n\n  export type ZoneColors = {\n    readonly __typename?: 'ZoneColor'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly color: string\n  }\n}\n\nexport namespace GAddress {\n  export type Fragment = {\n    readonly __typename?: 'JsonAddress'\n\n    readonly state: string | null\n\n    readonly city: string | null\n\n    readonly street: string | null\n\n    readonly houseNumber: string | null\n  }\n}\n\nexport namespace GCompanyBranch {\n  export type Fragment = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly gps: Gps\n\n    readonly brand: Brand\n  }\n\n  export type Gps = GGeoPoint.Fragment\n\n  export type Brand = {\n    readonly __typename?: 'Company'\n\n    readonly id: string\n\n    readonly name: string\n  }\n}\n\nexport namespace GCustomer {\n  export type Fragment = {\n    readonly __typename?: 'JsonCustomer'\n\n    readonly firstName: string | null\n\n    readonly lastName: string | null\n\n    readonly defaultEmail: DefaultEmail | null\n\n    readonly defaultPhone: DefaultPhone | null\n  }\n\n  export type DefaultEmail = GEmail.Fragment\n\n  export type DefaultPhone = GPhone.Fragment\n}\n\nexport namespace GEmail {\n  export type Fragment = {\n    readonly __typename?: 'Email'\n\n    readonly email: string\n\n    readonly description: string | null\n\n    readonly default: boolean\n  }\n}\n\nexport namespace GGeoPoint {\n  export type Fragment = {\n    readonly __typename?: 'GeoPoint'\n\n    readonly latitude: number\n\n    readonly longitude: number\n  }\n}\n\nexport namespace GPhone {\n  export type Fragment = {\n    readonly __typename?: 'Phone'\n\n    readonly phone: string\n\n    readonly description: string | null\n\n    readonly default: boolean\n  }\n}\n\nexport namespace GPrice {\n  export type Fragment = {\n    readonly __typename?: 'PriceConverted'\n\n    readonly value: number\n  }\n}\n\nexport namespace GSpecificBusinessHour {\n  export type Fragment = {\n    readonly __typename?: 'BusinessHour'\n\n    readonly id: string\n\n    readonly companyBranch: CompanyBranch\n\n    readonly specificDate: string | null\n\n    readonly specificDateLocalized: string | null\n\n    readonly closed: boolean\n\n    readonly closedNote: string | null\n\n    readonly openAt: string\n\n    readonly closeAt: string\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n  }\n}\n\nexport namespace GOrderMenuRecipe {\n  export type Fragment = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly nameLabel: string\n\n    readonly descriptionLabel: string | null\n\n    readonly price: Price\n\n    readonly sidedishCount: number\n  }\n\n  export type Price = {\n    readonly __typename?: 'PriceConverted'\n\n    readonly value: number\n\n    readonly currency: Currency\n  }\n\n  export type Currency = {\n    readonly __typename?: 'Currency'\n\n    readonly code: string\n  }\n}\n\nexport namespace GOrderMenuCategory {\n  export type Fragment = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly pictogram: string | null\n\n    readonly recipes: ReadonlyArray<Recipes>\n  }\n\n  export type Recipes = GOrderMenuRecipe.Fragment\n}\n\nexport namespace GAllergen {\n  export type Fragment = {\n    readonly __typename?: 'Allergen'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly enum: AllergenEnum\n\n    readonly category: number\n  }\n}\n\nexport namespace GWareUnit {\n  export type Fragment = {\n    readonly __typename?: 'WareUnit'\n\n    readonly id: string\n\n    readonly enum: WareUnitEnum\n\n    readonly code: string\n  }\n}\n\nexport namespace GMenuRecipe {\n  export type Fragment = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly visible: boolean\n\n    readonly nameLabel: string\n\n    readonly internalNote: string | null\n\n    readonly availableAmount: number\n\n    readonly prices: ReadonlyArray<Prices>\n\n    readonly recipeType: RecipeType\n  }\n\n  export type Prices = {\n    readonly __typename?: 'RecipePrice'\n\n    readonly id: string\n\n    readonly priceType: PriceType\n\n    readonly price: Price\n  }\n\n  export type PriceType = {\n    readonly __typename?: 'WarePriceType'\n\n    readonly enum: WarePriceTypeEnum\n  }\n\n  export type Price = {\n    readonly __typename?: 'PriceConverted'\n\n    readonly formattedValue: string\n  } & GPrice.Fragment\n\n  export type RecipeType = {\n    readonly __typename?: 'WareCategoryType'\n\n    readonly enum: WareCategoryTypeEnum\n  }\n}\n\nexport namespace GMenuStockItem {\n  export type Fragment = {\n    readonly __typename?: 'StockItem'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly note: string\n\n    readonly plu: string | null\n\n    readonly quantity: number\n\n    readonly nameLabel: string\n\n    readonly allergens: ReadonlyArray<Allergens>\n\n    readonly wareUnit: WareUnit\n\n    readonly allowNegative: boolean\n  }\n\n  export type Allergens = GAllergen.Fragment\n\n  export type WareUnit = GWareUnit.Fragment\n}\n\nexport namespace GMenuCategoryForm {\n  export type Fragment = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly internalNoteLabel: string | null\n\n    readonly visible: boolean\n\n    readonly categoryType: CategoryType\n\n    readonly pictogram: string | null\n\n    readonly recipes: ReadonlyArray<Recipes>\n  }\n\n  export type CategoryType = {\n    readonly __typename?: 'WareCategoryType'\n\n    readonly enum: WareCategoryTypeEnum\n  }\n\n  export type Recipes = GMenuRecipe.Fragment\n}\n\nexport namespace GMenuCategoryListItem {\n  export type Fragment = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly internalNoteLabel: string | null\n\n    readonly countRecipes: number\n\n    readonly visible: boolean\n\n    readonly categoryType: CategoryType\n  }\n\n  export type CategoryType = {\n    readonly __typename?: 'WareCategoryType'\n\n    readonly enum: WareCategoryTypeEnum\n  }\n}\n\nexport namespace GMenuRecipePrice {\n  export type Fragment = {\n    readonly __typename?: 'RecipePrice'\n\n    readonly id: string\n\n    readonly priceType: PriceType\n\n    readonly price: Price\n\n    readonly vat: Vat\n  }\n\n  export type PriceType = {\n    readonly __typename?: 'WarePriceType'\n\n    readonly enum: WarePriceTypeEnum\n  }\n\n  export type Price = GPrice.Fragment\n\n  export type Vat = {\n    readonly __typename?: 'Vat'\n\n    readonly id: string\n  }\n}\n\nexport namespace GMenuAssocRecipe {\n  export type Fragment = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly nameLabel: string\n  }\n}\n\nexport namespace GOrderStateCategory {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly orderStateCategory: OrderStateCategoryEnum\n  }\n}\n\nexport namespace GOrderMapMarker {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly deliverAt: string | null\n\n    readonly gps: Gps | null\n  }\n\n  export type Gps = GGeoPoint.Fragment\n}\n\nexport namespace GDriver {\n  export type Fragment = {\n    readonly __typename?: 'User'\n\n    readonly id: string\n\n    readonly firstName: string | null\n\n    readonly lastName: string | null\n  }\n}\n\nexport namespace GOrderDriver {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly driver: Driver | null\n  }\n\n  export type Driver = {\n    readonly __typename?: 'UserDeliveringOrder'\n\n    readonly id: string\n\n    readonly user: User\n  }\n\n  export type User = GDriver.Fragment\n}\n\nexport namespace GOrderListTicker {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly createdAt: string\n\n    readonly isPaidWithCard: boolean\n\n    readonly deliverAt: string | null\n\n    readonly deliverAtWorst: string | null\n\n    readonly deliveredAt: string | null\n\n    readonly companyBranch: CompanyBranch\n\n    readonly address: Address\n\n    readonly customer: Customer\n\n    readonly totalSum: TotalSum\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly oldOrderThreshold: number\n  }\n\n  export type Address = GAddress.Fragment\n\n  export type Customer = GCustomer.Fragment\n\n  export type TotalSum = {\n    readonly __typename?: 'PriceConverted'\n\n    readonly value: number\n  }\n}\n\nexport namespace GOrderDetailWare {\n  export type Fragment = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly id: string\n\n    readonly recipe: Recipe\n\n    readonly price: Price\n  }\n\n  export type Recipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly nameLabel: string\n  }\n\n  export type Price = GPrice.Fragment\n}\n\nexport namespace GStatsPrice {\n  export type Fragment = {\n    readonly __typename?: 'PriceConverted'\n\n    readonly value: number\n\n    readonly currency: Currency\n  }\n\n  export type Currency = {\n    readonly __typename?: 'Currency'\n\n    readonly code: string\n  }\n}\n\nexport namespace GZone {\n  export type Fragment = {\n    readonly __typename?: 'Zone'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly enabled: boolean\n\n    readonly priority: number\n\n    readonly companyBranch: CompanyBranch\n\n    readonly geoPolygon: ReadonlyArray<GeoPolygon>\n\n    readonly priceRangeRules: ReadonlyArray<PriceRangeRules>\n\n    readonly minimalOrderPrice: MinimalOrderPrice\n\n    readonly zoneColor: ZoneColor\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly brand: Brand\n  }\n\n  export type Brand = {\n    readonly __typename?: 'Company'\n\n    readonly id: string\n  }\n\n  export type GeoPolygon = GGeoPoint.Fragment\n\n  export type PriceRangeRules = GZonePriceRange.Fragment\n\n  export type MinimalOrderPrice = GPrice.Fragment\n\n  export type ZoneColor = {\n    readonly __typename?: 'ZoneColor'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly color: string\n  }\n}\n\nexport namespace GZonePriceRange {\n  export type Fragment = {\n    readonly __typename?: 'ZonePriceRangeRule'\n\n    readonly toPrice: ToPrice\n\n    readonly price: Price\n  }\n\n  export type ToPrice = GPrice.Fragment\n\n  export type Price = GPrice.Fragment\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface IProps {\n  iconName: string\n  color?: string\n  fontSize?: number\n  fontSizeUnit?: string\n}\n\nconst getFontSize = ({ fontSize = 1.5, fontSizeUnit = 'rem' }: IProps) => {\n  return fontSize + fontSizeUnit\n}\n\nconst IconSpanStyled = styled.span`\n  font-size: ${getFontSize} !important;\n  color: ${(props: IProps) => props.color};\n`\n\nexport const Icon: React.SFC<IProps> = ({\n  iconName,\n  color = Colors.white,\n  fontSize,\n  fontSizeUnit,\n}) =>\n  iconName ? (\n    <IconSpanStyled\n      color={color}\n      fontSize={fontSize}\n      fontSizeUnit={fontSizeUnit}\n      iconName={iconName}\n      className=\"material-icons\"\n    >\n      {iconName}\n    </IconSpanStyled>\n  ) : null\n","import { ErrorResponse, onError } from 'apollo-link-error'\n\nimport { reportFailingQuery } from '../helpers/sentry'\n\nexport const errorHandler = ({ graphQLErrors, operation }: ErrorResponse) => {\n  if (graphQLErrors) {\n    reportFailingQuery(graphQLErrors, {\n      query: operation.operationName,\n      variables: operation.variables,\n    })\n  }\n}\n\nexport const createErrorLink = () => onError(errorHandler)\n\nexport interface IQueryError extends Error {\n  showToUser: boolean\n}\n\nexport type TQueryErrors = IQueryError[] | null\n\n// tslint:disable-next-line:no-any\nexport const getQueryErrors = async (query: Promise<any>) => {\n  const result = await query\n  if (result && result.errors) {\n    return result.errors as IQueryError[]\n  }\n  return null\n}\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TMenuModel } from './MenuModel'\n\nexport const MenuBaseModel = BaseModel.named('MenuBase')\n  .volatile(() => ({\n    filterInput: '',\n  }))\n  .actions(self => ({\n    setFilterInput(input: string) {\n      self.filterInput = input\n    },\n  }))\n  .views(self => ({\n    get branchId() {\n      return getParent<TMenuModel>(self).settings.branchId!\n    },\n  }))\n\nexport type TMenuBaseModel = typeof MenuBaseModel.Type\nexport type TMenuBaseModelProps = typeof MenuBaseModel.SnapshotType\n","import gql from 'graphql-tag'\n\nimport { PriceFragment } from '../../../graph/fragments'\n\nexport const MenuRecipeFragment = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...GPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n  ${PriceFragment}\n`\n\nexport const MenuRecipeVisibilityMutation = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport const MenuRecipeCreateMutation = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeUpdateMutation = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeDeleteMutation = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n","import React from 'react'\n\nimport { PageTitle } from '../atoms/PageTitle'\nimport { i18n } from '../i18n'\n\nexport const NotFoundPage: React.SFC = () => (\n  <>\n    <PageTitle title={i18n.t`Not found`} />\n    <h1>{i18n.t`There is nothing here, sorry!`}</h1>\n  </>\n)\n","import React from 'react'\nimport { Route, RouteProps } from 'react-router'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { RedirectToLogin } from './RedirectToLogin'\n\ninterface ISecureRouteProps extends RouteProps {\n  redirect?: boolean\n  lazy?: boolean\n}\n\nexport const SecureRoute: React.SFC<ISecureRouteProps> = ({\n  redirect = true,\n  lazy = true,\n  ...props\n}) => {\n  const { auth } = useRoot()\n  if (!auth.isAuthenticatedUser) {\n    return redirect ? <RedirectToLogin /> : <NotFoundPage />\n  }\n  if (props.component && typeof props.component === 'object') {\n    const { component, path, exact } = props\n    return <LazyRoute path={path} exact={exact} component={component} />\n  }\n  return <Route {...props} />\n}\n","import { autorun, observable } from 'mobx'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Route, RouteProps } from 'react-router'\nimport styled from 'styled-components'\n\nimport { appConfig } from '../config'\nimport { RM } from '../helpers/ramda'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  title: string\n}\n\nconst TitleStyled = styled.h1`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  margin: 0.5rem 0.5rem 0 0.5rem;\n  white-space: nowrap;\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.9);\n`\n\nconst observableTitles = observable.array<string>([])\n\nautorun(() => {\n  const lastTitle = Array.from(observableTitles).pop()\n  if (lastTitle) {\n    document.title = `${lastTitle} :: ${appConfig.pageTitleSuffix}`\n  } else {\n    document.title = appConfig.pageTitleSuffix\n  }\n})\n\nconst PageTitleRoute: React.SFC<IProps & RouteProps> = ({\n  title,\n  ...props\n}) => <Route {...props} render={() => <PageTitle title={title} />} />\n\nconst PageTitleDisplay: React.FC = () => (\n  <Observer>\n    {() => <TitleStyled>{observableTitles.join(' - ')}</TitleStyled>}\n  </Observer>\n)\n\nexport class PageTitle extends React.Component<IProps> {\n  static Route = PageTitleRoute\n  static Display = PageTitleDisplay\n  componentDidMount() {\n    observableTitles.push(this.props.title)\n  }\n  componentDidUpdate(prevProps: IProps) {\n    const idx = observableTitles.findIndex(RM.equals(prevProps.title))\n    if (idx >= 0) {\n      observableTitles.splice(idx, 1, this.props.title)\n    }\n  }\n  componentWillUnmount() {\n    observableTitles.remove(this.props.title)\n  }\n  render() {\n    return null\n  }\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GCategoryList } from '../../../graph/types'\n\nexport const MenuCategoryListFragment = gql`\n  fragment GMenuCategoryListItem on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    countRecipes\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n  }\n`\n\nexport const CategoryListQuery = gql`\n  query GCategoryList($branchId: ID!, $categoryType: WareCategoryTypeEnum!) {\n    wareCategories(companyBranch: $branchId, wareCategoryType: $categoryType) {\n      ...GMenuCategoryListItem\n    }\n  }\n  ${MenuCategoryListFragment}\n`\n\nexport const QueryCategoryList = buildQuery<\n  GCategoryList.Query,\n  GCategoryList.Variables\n>(CategoryListQuery)\n","import gql from 'graphql-tag'\n\nimport { GeoPointFragment, PriceFragment } from '../../graph/fragments'\n\nexport const ZoneFragment = gql`\n  fragment GZone on Zone {\n    id\n    name\n    enabled\n    priority\n    companyBranch {\n      id\n      brand {\n        id\n      }\n    }\n    geoPolygon {\n      ...GGeoPoint\n    }\n    priceRangeRules {\n      ...GZonePriceRange\n    }\n    minimalOrderPrice {\n      ...GPrice\n    }\n    zoneColor {\n      id\n      code\n      color\n    }\n  }\n\n  fragment GZonePriceRange on ZonePriceRangeRule {\n    toPrice {\n      ...GPrice\n    }\n    price {\n      ...GPrice\n    }\n  }\n\n  ${PriceFragment}\n  ${GeoPointFragment}\n`\n\nexport const ZoneLocationQuery = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...GGeoPoint\n        }\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n\nexport const ZoneBranchLocationQuery = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n\nexport const ZoneColorsQuery = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n","import debug from 'debug'\nimport { getEnv, getPath, getRoot, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { IRootEnvironment } from '../atoms/RootProvider'\nimport { TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    return debug(`model/${getPath(self)}`)\n  },\n  get client() {\n    const client = getEnv<IRootEnvironment>(self).apolloClient\n    if (!client) {\n      throw new VError('Apollo client is missing from environment setup')\n    }\n    return client\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n}))\n","import React from 'react'\nimport { Route, RouteComponentProps, RouteProps } from 'react-router'\n\nimport Pacman from '../atoms/Pacman'\n\ninterface IProps<Params> extends Omit<RouteProps, 'render' | 'children'> {\n  component: React.ComponentType<RouteComponentProps<Params>>\n}\n\nexport function LazyRoute<Params = {}>({\n  component: Component,\n  ...props\n}: IProps<Params>) {\n  return (\n    <Route\n      {...props}\n      render={routeProps => (\n        <React.Suspense fallback={<Pacman />}>\n          <Component {...routeProps} />\n        </React.Suspense>\n      )}\n    />\n  )\n}\n","import Color from 'color'\n\nimport { RM } from './helpers/ramda'\n\nexport enum Colors {\n  yellow = '#FFDB2B',\n  pink = '#FF2B95',\n  blue = '#2441FF',\n  red = '#FF1C1C',\n  green = '#179B12',\n  turquoise = '#2BFFFF',\n  orange = '#FF862B',\n  violet = '#6D4F8C',\n  black = '#000000',\n  greyDarkest = '#080808',\n  greyDark = '#2C2C2C',\n  greyMiddle = '#939393',\n  greyLight = '#EDEDED',\n  white = '#FFFFFF',\n}\n\nexport const applyAlphaToColor = RM.curry((color: Colors, alphaValue: number) =>\n  Color(color)\n    .alpha(alphaValue)\n    .string(),\n)\n\nexport enum Radiuses {\n  Card = '0.5rem',\n  Button = '0.5rem',\n  TextComponent = '0.25rem',\n}\n\nexport const Spacing = {\n  MarginAroundFormComponents: '0.1rem',\n  Small: '0.25rem',\n  Middle: '0.5rem',\n  LayoutGridCellMargin: '0.5rem',\n  ButtonHeight: '3.4375rem',\n  DefaultInputWidth: 20,\n  DefaultSizeUnit: 'rem',\n}\n","import * as RM from 'ramda'\n\nexport { RM }\n","import debug from 'debug'\n\n// @ts-ignore\ndebug.useColors = () => !process.env.REACT_APP_STAGE\n\nexport const logMain = debug('main')\nexport const logDebug = debug('debug')\nexport const logError = debug('error')\nexport const logAuth = debug('auth')\nexport const logRouting = debug('routing')\nexport const logPersistence = debug('persistence')\nexport const logBootstrap = debug('bootstrap')\nexport const logAccess = debug('access')\nexport const logGraph = debug('graph')\nexport const logForm = debug('form')\nexport const logSentry = debug('sentry')\nexport const logLang = debug('lang')\n// tslint:disable-next-line:no-console\nexport const logTest = console.log\n","import { Base64 } from 'js-base64'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { MPasswordChange } from '../graph/types'\nimport { identifyUser } from '../helpers/sentry'\nimport { LoginProviderModel } from '../segments/login/models/LoginProviderModel'\nimport { PasswordChangeMutation } from './AuthModel.graphql'\nimport { BaseModel } from './BaseModel'\n\ninterface IVolatileProps {\n  tokenForPasswordChange?: string\n}\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    userId: types.optional(types.string, ''),\n    token: types.optional(types.string, ''),\n    provider: types.optional(LoginProviderModel, {}),\n  })\n  .volatile<IVolatileProps>(() => ({}))\n  .views(self => ({\n    get isAuthenticated() {\n      return self.token.length > 0\n    },\n    get isAuthenticatedUser() {\n      return this.isAuthenticated && self.userId.length > 0\n    },\n    get communicationToken() {\n      return self.tokenForPasswordChange || self.token\n    },\n    get canCommunicate() {\n      return this.isAuthenticated || self.tokenForPasswordChange !== undefined\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      self.tokenForPasswordChange = undefined\n      self.log('authenticated with id %s', userId)\n      identifyUser(userId)\n    },\n    invalidate() {\n      self.token = ''\n      self.userId = ''\n      self.tokenForPasswordChange = undefined\n      self.client.cache.reset()\n      self.log('invalidated authentication')\n      identifyUser(null)\n    },\n  }))\n  .actions(self => ({\n    setForPasswordChange(temporaryB64EncodedToken: string) {\n      self.invalidate()\n      self.log('encoded token %s', temporaryB64EncodedToken)\n      self.tokenForPasswordChange = Base64.decode(temporaryB64EncodedToken)\n      self.log('using temp token %s', self.tokenForPasswordChange)\n    },\n    async changePassword(password: string) {\n      const variables: MPasswordChange.Variables = {\n        password,\n      }\n      const result = await self.client.mutate({\n        mutation: PasswordChangeMutation,\n        variables,\n        fetchPolicy: 'no-cache',\n      })\n\n      const {\n        updateUserPassword: { id, token },\n      } = result.data as MPasswordChange.Mutation\n\n      if (token && id) {\n        self.invalidate()\n        self.authenticate(token, id)\n      }\n    },\n  }))\n  .preProcessSnapshot(snapshot => {\n    if (snapshot.userId) {\n      identifyUser(snapshot.userId)\n    }\n    return snapshot\n  })\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import gql from 'graphql-tag'\n\nexport const GeoPointFragment = gql`\n  fragment GGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const EmailFragment = gql`\n  fragment GEmail on Email {\n    email\n    description\n    default\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const PhoneFragment = gql`\n  fragment GPhone on Phone {\n    phone\n    description\n    default\n  }\n`\n","import { types } from 'mobx-state-tree'\nimport GoogleMap from 'react-google-maps/lib/components/GoogleMap'\n\nimport { gpsToLatLng } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<GoogleMap>\n}\n\nconst GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 12),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n  }))\n  .views(self => ({\n    get center() {\n      return gpsToLatLng(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<GoogleMap>) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n  }))\n\nexport type TMapModel = typeof MapModel.Type\n","import gql from 'graphql-tag'\n\nimport { AllergenFragment } from '../graph/AllergenFragment.graphql'\nimport { WareUnitFragment } from '../graph/WareUnitFragment.graphql'\n\nexport const MenuStockItemFragment = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...GAllergen\n    }\n    wareUnit {\n      ...GWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n  ${WareUnitFragment}\n  ${AllergenFragment}\n`\n\nexport const MenuStockCreateMutation = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockUpdateMutation = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockDeleteMutation = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n","import debug from 'debug'\nimport React from 'react'\nimport { Redirect, Route } from 'react-router'\n\ninterface IRedirectToLoginProps {\n  useOrigin?: boolean\n}\n\nconst log = debug('routing')\n\nexport const RedirectToLogin: React.SFC<IRedirectToLoginProps> = ({\n  useOrigin = true,\n}) => (\n  <Route\n    path=\"/login\"\n    children={({ match, location }) => {\n      if (match) {\n        return null\n      }\n      log('redirecting to login...')\n      return (\n        <Redirect\n          to={{\n            pathname: '/login',\n            state: { origin: useOrigin ? location.pathname : '/' },\n          }}\n        />\n      )\n    }}\n  />\n)\n","import React, { MouseEvent } from 'react'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { applyAlphaToColor, Colors, Radiuses, Spacing } from '../styling'\n\nexport interface ITouchButtonProps\n  extends React.HTMLAttributes<HTMLButtonElement> {\n  iconName?: string\n  iconColor?: Colors\n  iconSize?: number\n  text?: string\n  color?: Colors\n  badge?: ReactNode\n  disabled?: boolean\n  textNextToIcon?: boolean\n  className?: string\n  width?: string\n  height?: string\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n}\n\nconst applyAlpha = (alphaValue: number) => (props: ITouchButtonProps) =>\n  applyAlphaToColor(props.color!, alphaValue)\n\nconst TouchButtonStyled = styled.button`\n  min-height: ${Spacing.ButtonHeight};\n  min-width: ${Spacing.ButtonHeight};\n  width: ${({ width = '100%' }: ITouchButtonProps) => width};\n  height: ${({ height = '100%' }: ITouchButtonProps) => height};\n  margin: 0;\n  padding: 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  /* fallback font size for incompatible browsers */\n  font-size: 1rem;\n  font-size: calc(0.6rem + 0.5vw);\n  transition-duration: 0.2s;\n\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nconst ButtonLabelStyled = styled.div`\n  color: white;\n  text-align: center;\n  width: 100%;\n  overflow: hidden;\n`\nconst ButtonLabelNextToIconStyled = styled(ButtonLabelStyled)`\n  width: calc(100% - 4rem);\n  margin: 0 0 0 1rem;\n  text-align: left;\n  display: inline-block;\n  vertical-align: top;\n  overflow: hidden;\n`\n\nexport const TouchButton: React.SFC<ITouchButtonProps> = ({\n  children,\n  iconName,\n  iconColor = Colors.white,\n  iconSize = 3,\n  color = Colors.greyMiddle,\n  textNextToIcon = false,\n  badge,\n  text,\n  ...props\n}) => {\n  // const ref = useRef<HTMLButtonElement>(null)\n  // const onClick = useCallback(() => {\n  //   if (props.onClick) {\n\n  //   }\n  // }, [props.onClick, disableOnClick])\n  return (\n    <TouchButtonStyled color={color} {...props}>\n      {iconName && (\n        <Icon iconName={iconName} color={iconColor} fontSize={iconSize} />\n      )}\n\n      {text &&\n        textNextToIcon && (\n          <ButtonLabelNextToIconStyled>{text}</ButtonLabelNextToIconStyled>\n        )}\n\n      {text && !textNextToIcon && <ButtonLabelStyled>{text}</ButtonLabelStyled>}\n\n      {badge}\n      {children}\n    </TouchButtonStyled>\n  )\n}\n","import Color from 'color'\nimport styled, { css } from 'styled-components'\n\nimport { Colors, Radiuses } from '../styling'\n\ninterface IProps {\n  color?: string\n  textColor?: string\n  padding?: number\n  stretchToParent?: boolean\n}\n\nexport const Card = styled.div`\n  background: ${getBackgroundColor};\n  color: ${getTextColor};\n  border-radius: ${Radiuses.Card};\n  padding: ${getPadding}rem;\n  margin: 0 0 0.5rem 0;\n  ${applyStretchToParentStyle};\n`\n\nCard.displayName = 'Card'\n\nfunction getPadding({ padding = 0.5 }: IProps) {\n  return padding\n}\n\nfunction getBackgroundColor({ color }: IProps) {\n  return Color(color || Colors.greyLight)\n    .alpha(0.8)\n    .lighten(0.4)\n    .string()\n}\n\nfunction getTextColor(props: IProps) {\n  return props.textColor || Colors.black\n}\n\nfunction applyStretchToParentStyle({ stretchToParent = false }: IProps) {\n  if (!stretchToParent) {\n    return ''\n  }\n  return css`\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  `\n}\n","import { isSameDay } from 'date-fns'\nimport { format, formatWithOptions } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\nimport numeral from 'numeral'\n\nimport { GAddress } from '../graph/types'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const fullDateFormat = 'dddd LL'\nexport const formatFullDate = formatLocale(fullDateFormat)\n\nexport const dateFormat = 'D.M.YYYY'\nexport const formatDate = formatLocale(dateFormat)\n\nexport const dateFormatISO = 'YYYY-MM-DD'\nexport const formatDateISO = format(dateFormatISO)\n\nexport const timeFormat = 'H:mm'\nexport const formatTime = formatLocale(timeFormat)\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const priceFormat = '0,0.[00]'\nexport const formatPrice = price => numeral(price).format(priceFormat)\n\nexport const formatTimeWithoutTodayDate = (time: string) =>\n  isSameDay(time, new Date()) ? formatTime(time) : formatDateTime(time)\n\nexport const formatAddress = (address: GAddress.Fragment) => {\n  if (!address.street) {\n    if (address.city) {\n      return `${address.city} ${address.houseNumber}, ${address.state}`\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\n\nimport { IPageLayoutProps, PageLayout } from '../molecules/PageLayout'\n\ninterface IFullPageLayoutProps extends IPageLayoutProps {\n  width?: number\n}\n\nfunction getLayout(width: number): Layout[] {\n  return [{ i: 'full', x: 0, y: 1, w: width, h: 10 }]\n}\n\nexport const FullPageLayout: React.SFC<IFullPageLayoutProps> = ({\n  children,\n  width = 16,\n  ...props\n}) => (\n  <PageLayout layouts={getLayout(width)} {...props}>\n    <div key=\"full\">{children}</div>\n  </PageLayout>\n)\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\nimport styled from 'styled-components'\n\nimport { GridLayout } from '../atoms/GridLayout'\nimport { PageTitle } from '../atoms/PageTitle'\nimport { SoundControl } from '../atoms/SoundControl'\nimport { LogoutWidget } from '../organisms/LogoutWidget'\nimport { SecureRoute } from '../routes/SecureRoute'\nimport { HomeButton } from './HomeButton'\n\nexport interface IPageLayoutProps {\n  pageTitle?: string\n  layouts?: Layout[]\n  hideLogoutWidget?: boolean\n  showSoundControl?: boolean\n  useBackButton?: boolean\n  backRoute?: string\n  scrollPageTitle?: boolean\n}\n\nconst TopLeftButtonContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n`\n\nconst getPosition = (props: IPageLayoutProps) =>\n  props.scrollPageTitle ? 'absolute' : 'fixed'\n\nconst TopRightContainer = styled.div`\n  position: ${getPosition};\n  top: 0;\n  right: 0;\n  z-index: 100;\n`\n\nconst PageTitleContainer = styled.div`\n  position: ${getPosition};\n  top: 0rem;\n  left: 4rem;\n`\n\nconst SoundControlContainer = styled.div`\n  position: fixed;\n  top: 0rem;\n  right: 15rem;\n`\n\nexport const PageLayout: React.SFC<IPageLayoutProps> = ({\n  pageTitle = '',\n  layouts = [],\n  hideLogoutWidget = false,\n  showSoundControl = false,\n  useBackButton = false,\n  scrollPageTitle = true,\n  backRoute,\n  children,\n}) => (\n  <>\n    {pageTitle && <PageTitle title={pageTitle} />}\n    {showSoundControl && (\n      <SoundControlContainer>\n        <SoundControl />\n      </SoundControlContainer>\n    )}\n\n    {!hideLogoutWidget && (\n      <TopRightContainer scrollPageTitle={scrollPageTitle}>\n        <SecureRoute path=\"/\" component={LogoutWidget} redirect={false} />\n      </TopRightContainer>\n    )}\n\n    <PageTitleContainer scrollPageTitle={scrollPageTitle}>\n      <PageTitle.Display />\n    </PageTitleContainer>\n\n    <GridLayout layouts={[...layouts]}>{children}</GridLayout>\n\n    <TopLeftButtonContainer>\n      <HomeButton goBack={useBackButton} backRoute={backRoute} />\n    </TopLeftButtonContainer>\n  </>\n)\n","import gql from 'graphql-tag'\n\nimport { OrderDriverFragment } from '../molecules/OrderStateDeliver.graphql'\n\nexport const OrderStateCategoryFragment = gql`\n  fragment GOrderStateCategory on Order {\n    id\n    orderStateCategory\n  }\n`\n\nexport const UpdateOrderStateMutation = gql`\n  mutation GUpdateOrderState($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...GOrderStateCategory\n      orderTiming: orderStateCategoryRelations {\n        createdAt\n        orderStateCategory\n      }\n    }\n  }\n  ${OrderStateCategoryFragment}\n`\n\nexport const SendOrderNotificationMutation = gql`\n  mutation GSendOrderNotification($orderId: ID!, $minutes: Int!) {\n    orderNotifyCustomer(id: $orderId, minutes: $minutes) {\n      id\n      deliverAt\n    }\n  }\n`\n\nexport const SelectOrderDriverMutation = gql`\n  mutation GSelectOrderDriver($driverId: ID!, $orderId: ID!) {\n    createUserDeliveringOrder(user: $driverId, order: $orderId) {\n      order {\n        ...GOrderDriver\n      }\n    }\n  }\n  ${OrderDriverFragment}\n`\n\nexport const RemoveOrderDriverMutation = gql`\n  mutation GRemoveOrderDriver($orderDriverId: ID!) {\n    destroyUserDeliveringOrder(id: $orderDriverId) {\n      order {\n        ...GOrderDriver\n      }\n    }\n  }\n  ${OrderDriverFragment}\n`\n","import React from 'react'\n\ninterface ILoadingProps {\n  text?: string\n}\n\nexport const Loading: React.SFC<ILoadingProps> = ({ text = '...' }) => (\n  <h1>{text}</h1>\n)\n","import { useEffect, EffectCallback } from 'react'\n\nexport const useEffectOnce = (effect: EffectCallback) => {\n  return useEffect(effect, [])\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GOrderDriverSelection } from '../../../graph/types'\n\nconst DriverFragment = gql`\n  fragment GDriver on User {\n    id\n    firstName\n    lastName\n  }\n`\n\nexport const OrderDriverFragment = gql`\n  fragment GOrderDriver on Order {\n    id\n    driver: userDeliveringOrder {\n      id\n      user {\n        ...GDriver\n      }\n    }\n  }\n  ${DriverFragment}\n`\n\nconst OrderDriverSelection = gql`\n  query GOrderDriverSelection($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      ...GOrderDriver\n    }\n    drivers(companyBranch: $branchId, onlyAvailable: false) {\n      ...GDriver\n    }\n  }\n  ${OrderDriverFragment}\n`\n\nexport const QueryDriverSelection = buildQuery<\n  GOrderDriverSelection.Query,\n  GOrderDriverSelection.Variables\n>(OrderDriverSelection)\n","import raf from 'raf'\nimport { useEffect, useRef } from 'react'\n\nimport { useStateRef } from './useStateRef'\n\nexport const SECOND = 1 * 1000\nexport const MINUTE = 60 * SECOND\nexport const HOUR = 60 * MINUTE\n\ninterface IOptions {\n  interval: number\n  enabled: boolean\n  getNow?(): number\n  nextTick?(onTick: () => void): number\n  cancelTick?(handle: number): void\n}\n\nexport const useTimer = ({\n  interval,\n  enabled,\n  getNow = Date.now,\n  nextTick = raf,\n  cancelTick = raf.cancel,\n}: IOptions) => {\n  const [getLastUpdate, setLastUpdate] = useStateRef(getNow)\n  const handleRef = useRef<number | null>(null)\n\n  useEffect(\n    () => {\n      const onFrame = () => {\n        const now = getNow()\n        const last = getLastUpdate()\n        const delta = now - last\n        if (delta >= interval) {\n          setLastUpdate(now)\n        }\n        loop()\n      }\n\n      const onStart = () => {\n        loop()\n      }\n\n      const onStop = () => {\n        if (handleRef.current) {\n          cancelTick(handleRef.current)\n          handleRef.current = null\n        }\n      }\n\n      const loop = () => {\n        if (enabled) {\n          handleRef.current = nextTick(onFrame)\n        } else {\n          onStop()\n        }\n      }\n\n      onStart()\n      return onStop\n    },\n    [interval, enabled],\n  )\n\n  return getLastUpdate()\n}\n","import { types } from 'mobx-state-tree'\n\nimport {\n  GCreateSpecificBusinessHour,\n  GDeleteSpecificBusinessHour,\n} from '../../../graph/types'\nimport { formatTime } from '../../../helpers/formats'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  CreateSpecificBusinessHour,\n  DeleteSpecificBusinessHour,\n} from './BusinessHoursModel.graphql'\n\nexport enum ESpecificHourMode {\n  TIMESPAN = 'TIMESPAN',\n  FULLDAY = 'FULLDAY',\n}\n\nexport interface ISpecificFormData {\n  date: Date\n  openAt: Date\n  closeAt: Date\n  note: string\n}\n\nconst byIdPredicate = RM.complement(RM.propEq('id'))\n\nexport const BusinessHoursModel = BaseModel.named('BusinessHours')\n  .props({\n    specificMode: types.optional(\n      types.enumeration(['TIMESPAN', 'FULLDAY']),\n      ESpecificHourMode.TIMESPAN,\n    ),\n  })\n  .actions(self => ({\n    changeSpecificMode(mode: ESpecificHourMode) {\n      self.specificMode = mode\n    },\n    submitSpecificHour(values: ISpecificFormData) {\n      const variables: GCreateSpecificBusinessHour.Variables = {\n        input: {\n          companyBranch: self.root.settings.branchId!,\n          // @ts-ignore Figure out correct typings\n          specificDate: values.date,\n          closed: self.specificMode === ESpecificHourMode.FULLDAY,\n          openAt: values.openAt && formatTime(values.openAt),\n          closeAt: values.closeAt && formatTime(values.closeAt),\n          closedNote: values.note,\n        },\n      }\n      self.client.mutate<GCreateSpecificBusinessHour.Mutation>({\n        mutation: CreateSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.concat(\n                  mutationResult.data.result,\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n    deleteSpecificHour(businessHourId: ID) {\n      const variables: GDeleteSpecificBusinessHour.Variables = {\n        id: businessHourId,\n      }\n      self.client.mutate({\n        mutation: DeleteSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.filter(\n                  byIdPredicate(mutationResult.data.result.id),\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n  }))\n","import { LocationDescriptor } from 'history'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuCategoryCreate,\n  GMenuCategoryDelete,\n  GMenuCategoryUpdate,\n  GSortMenuCategory,\n  WareCategoryTypeEnum,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TCategoryFormValues } from '../organisms/CategoryFormLoader'\nimport { CategoryListQuery } from '../organisms/CategoryList.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuCategoryCreateMutation,\n  MenuCategoryDeleteMutation,\n  MenuCategoryUpdateMutation,\n  MenuCategoryVisibility,\n  SortMenuCategoryMutation,\n} from './MenuCategoryModel.graphql'\n\nexport const MenuCategoryModel = MenuBaseModel.named('MenuCategory').actions(\n  self => ({\n    async sortCategory(categoryId: ID, offset: number) {\n      const variables: GSortMenuCategory.Variables = {\n        categoryId,\n        offset,\n      }\n      const result = await self.client.mutate({\n        mutation: SortMenuCategoryMutation,\n        variables,\n      })\n      return Boolean(result.data && result.data.success)\n    },\n    changeVisibility(categoryId: ID, visible: boolean) {\n      self.client.mutate({\n        mutation: MenuCategoryVisibility,\n        variables: { categoryId, visible },\n        optimisticResponse: {\n          updateRecipe: {\n            __typename: 'Recipe',\n            id: categoryId,\n            visible,\n          },\n        },\n      })\n    },\n    createCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryCreate.Variables = {\n        input: {\n          companyBranch: self.branchId,\n          wareCategoryType: categoryType,\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryCreateMutation,\n          variables,\n          refetchQueries: [\n            {\n              query: CategoryListQuery,\n              variables: {\n                branchId: self.branchId,\n                categoryType,\n              },\n            },\n          ],\n        }),\n      )\n    },\n    async updateCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryUpdate.Variables = {\n        categoryId: formValues.id,\n        input: {\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteCategory(categoryId: ID, categoryType: WareCategoryTypeEnum) {\n      const variables: GMenuCategoryDelete.Variables = {\n        categoryId,\n      }\n      await self.client.mutate({\n        mutation: MenuCategoryDeleteMutation,\n        variables,\n        refetchQueries: [\n          {\n            query: CategoryListQuery,\n            variables: {\n              branchId: self.branchId,\n              categoryType,\n            },\n          },\n        ],\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(\n  formValues: TCategoryFormValues,\n  categoryType: WareCategoryTypeEnum,\n) {\n  return Object.assign({\n    nameLabel: formValues.nameLabel,\n    internalNoteLabel: formValues.internalNoteLabel,\n    enabled: formValues.visible,\n    pictogram: formValues.pictogram,\n    recipes: formValues.recipes.map(RM.prop('id')),\n  })\n}\n\nexport const getCategoryRoute = (\n  recipeId: ID,\n  categoryType: WareCategoryTypeEnum,\n): LocationDescriptor => ({\n  pathname: recipeId,\n  state: { categoryType },\n})\n\nexport type TMenuCategoryModel = typeof MenuCategoryModel.Type\n","import { LocationDescriptor } from 'history'\nimport numeral from 'numeral'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuRecipeCreate,\n  GMenuRecipeDefaultVat,\n  GMenuRecipeDelete,\n  GMenuRecipeUpdate,\n  WareCategoryTypeEnum,\n  WarePriceTypeEnum,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TRecipeFormValues } from '../menutypes'\nimport { MenuRecipeDefaultVat } from '../organisms/RecipeForm.graphql'\nimport { MenuRecipeListQuery } from '../organisms/RecipeList.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuRecipeCreateMutation,\n  MenuRecipeDeleteMutation,\n  MenuRecipeUpdateMutation,\n  MenuRecipeVisibilityMutation,\n} from './MenuRecipeModel.graphql'\n\nexport const MenuRecipeModel = MenuBaseModel.named('MenuRecipe').actions(\n  self => ({\n    changeVisibility(recipeId: ID, visible: boolean) {\n      self.client.mutate({\n        mutation: MenuRecipeVisibilityMutation,\n        variables: { recipeId, visible },\n        optimisticResponse: {\n          updateRecipe: {\n            __typename: 'Recipe',\n            id: recipeId,\n            visible,\n          },\n        },\n      })\n    },\n    createRecipe(\n      formValues: TRecipeFormValues,\n      recipeType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuRecipeCreate.Variables = {\n        recipe: {\n          companyBranch: self.branchId,\n          wareCategoryType: recipeType,\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeCreateMutation,\n          variables,\n          refetchQueries: [\n            {\n              query: MenuRecipeListQuery,\n              variables: {\n                branchId: self.branchId,\n              },\n            },\n          ],\n        }),\n      )\n    },\n    updateRecipe(formValues: TRecipeFormValues) {\n      const variables: GMenuRecipeUpdate.Variables = {\n        recipeId: formValues.id,\n        recipe: {\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteRecipe(recipeId: ID) {\n      const variables: GMenuRecipeDelete.Variables = {\n        recipeId,\n      }\n      await self.client.mutate({\n        mutation: MenuRecipeDeleteMutation,\n        variables,\n        refetchQueries: [\n          {\n            query: MenuRecipeListQuery,\n            variables: {\n              branchId: self.branchId,\n            },\n          },\n        ],\n      })\n    },\n    async getDefaultVat() {\n      const { data } = await self.client.query<GMenuRecipeDefaultVat.Query>({\n        query: MenuRecipeDefaultVat,\n        variables: { branchId: self.branchId },\n      })\n      if (data) {\n        const {\n          companyBranch: { defaultVats },\n        } = data\n        return defaultVats.reduce((result, { vatId, priceType }) => {\n          result[priceType.enum] = vatId\n          return result\n        }, {})\n      }\n      return {}\n    },\n  }),\n)\n\nfunction getFormVariables(formValues: TRecipeFormValues) {\n  return {\n    code: formValues.code,\n    nameLabel: formValues.nameLabel,\n    internalNote: formValues.internalNote,\n    descriptionLabel: formValues.descriptionLabel,\n    enabled: formValues.visible,\n    prices: Object.keys(formValues.prices).map(priceType => ({\n      warePriceType: (priceType as unknown) as WarePriceTypeEnum,\n      price: { value: numeral(formValues.prices[priceType].value).value() },\n      vat: formValues.prices[priceType].vatId!,\n    })),\n    sideDishCategories: formValues.sideDishes.map(RM.prop('id')),\n    wareCategories: formValues.categories.map(RM.prop('id')),\n    associatedRecipes: formValues.associatedRecipes.map(\n      RM.pick(['associatedRecipe', 'warePriceType']),\n    ),\n    ingredients: formValues.ingredients.map(({ stockItem, quantity }) => {\n      return { stockItem, quantity: parseNumber(quantity) }\n    }),\n  }\n}\n\nfunction parseNumber(value: string | number) {\n  return typeof value === 'number'\n    ? value\n    : Number.parseFloat(value.replace(',', '.'))\n}\n\nexport const getRecipeRoute = (\n  recipeId: ID,\n  recipeType: WareCategoryTypeEnum,\n): LocationDescriptor => ({\n  pathname: recipeId,\n  state: { recipeType },\n})\n\nexport type TMenuRecipeModel = typeof MenuRecipeModel.Type\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { PriceFragment } from '../../../graph/fragments'\nimport { GMenuRecipeFormAssoc } from '../../../graph/types'\nimport { MenuCategoryListFragment } from './CategoryList.graphql'\n\nexport const MenuRecipePriceFragment = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      ...GPrice\n    }\n    vat {\n      id\n    }\n  }\n  ${PriceFragment}\n`\n\nexport const MenuAssocRecipeFragment = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const MenuRecipeFormQuery = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...GMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...GMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n  ${MenuRecipePriceFragment}\n  ${MenuCategoryListFragment}\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeFormAssocQuery = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeDefaultVat = gql`\n  query GMenuRecipeDefaultVat($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n    }\n  }\n`\n\nexport const QueryMenuRecipeFormAssoc = buildQuery<\n  GMenuRecipeFormAssoc.Query,\n  GMenuRecipeFormAssoc.Variables\n>(MenuRecipeFormAssocQuery)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GMenuRecipeList } from '../../../graph/types'\nimport { MenuRecipeFragment } from '../models/MenuRecipeModel.graphql'\n\nexport const MenuRecipeListQuery = gql`\n  query GMenuRecipeList(\n    $branchId: ID!\n    $categoryId: ID\n    $categoryType: WareCategoryTypeEnum\n  ) {\n    recipes(\n      companyBranch: $branchId\n      wareCategory: $categoryId\n      wareCategoryType: $categoryType\n    ) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const QueryRecipeList = buildQuery<\n  GMenuRecipeList.Query,\n  GMenuRecipeList.Variables\n>(MenuRecipeListQuery)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GMenuStockList } from '../../../graph/types'\nimport { MenuStockItemFragment } from '../models/MenuStockModel.graphql'\n\nexport const MenuStockListQuery = gql`\n  query GMenuStockList($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const QueryMenuStockList = buildQuery<\n  GMenuStockList.Query,\n  GMenuStockList.Variables\n>(MenuStockListQuery)\n","import gql from 'graphql-tag'\n\nexport const AllergenFragment = gql`\n  fragment GAllergen on Allergen {\n    id\n    code\n    enum\n    category\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const WareUnitFragment = gql`\n  fragment GWareUnit on WareUnit {\n    id\n    enum\n    code\n  }\n`\n","import React from 'react'\nimport RGL, { Layout, WidthProvider } from 'react-grid-layout'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\ninterface IGridLayoutProps {\n  layouts: Layout[]\n}\n\nexport const GridLayout: React.SFC<IGridLayoutProps> = ({\n  children,\n  layouts,\n}) => (\n  <ReactGridLayout\n    className=\"layout\"\n    layout={layouts}\n    cols={16}\n    rowHeight={55}\n    margin={[8, 8]}\n    autoSize={false}\n    isDraggable={false}\n    isResizable={false}\n    compactType={null}\n    measureBeforeMount={true}\n  >\n    {children}\n  </ReactGridLayout>\n)\n","import React from 'react'\nimport Sound from 'react-sound'\n\nimport { logMain } from '../helpers/logger'\nimport { IntervalRender } from './IntervalRender'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {\n  intervalSec: number\n  soundUrl: string\n  shouldPlay?: boolean\n  skipEnableChecks?: boolean\n}\n\nexport const SoundPlayInterval: React.SFC<IProps> = ({\n  intervalSec,\n  soundUrl,\n  shouldPlay = true,\n  skipEnableChecks = false,\n}) => (\n  <WithRoot\n    observe={true}\n    render={({ config, user }) => {\n      if (!skipEnableChecks) {\n        if (!config.soundEnabled) {\n          logMain('sound is disabled')\n          return null\n        }\n        if (!user.soundEnabled) {\n          logMain('sound not enabled by user')\n          return null\n        }\n      }\n      logMain('sound play status: %s', shouldPlay)\n      return (\n        <IntervalRender\n          intervalSec={intervalSec}\n          enabled={shouldPlay}\n          render={({ isActive, nextLoop }) => (\n            <Sound\n              url={soundUrl}\n              playStatus={isActive ? 'PLAYING' : 'STOPPED'}\n              onFinishedPlaying={nextLoop}\n              loop={false}\n              autoLoad={true}\n              volume={user.soundVolume}\n            />\n          )}\n        />\n      )\n    }}\n  />\n)\n","import gql from 'graphql-tag'\n\nexport const CreateFinancialReport = gql`\n  mutation GCreateFinancialReport($companyBranchId: ID!) {\n    result: createFinancialReport(companyBranchId: $companyBranchId) {\n      id\n    }\n  }\n`\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GSpecificBusinessHours } from '../../../graph/types'\n\nexport const SpecificBusinessHourFragment = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const QuerySpecificBusinessHours = buildQuery<\n  GSpecificBusinessHours.Query,\n  GSpecificBusinessHours.Variables\n>(gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`)\n","import gql from 'graphql-tag'\n\nimport { MenuRecipeFragment } from '../models/MenuRecipeModel.graphql'\n\nexport const MenuCategoryFormFragment = gql`\n  fragment GMenuCategoryForm on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    pictogram\n    recipes {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuCategoryFormQuery = gql`\n  query GMenuCategoryForm($categoryId: ID!) {\n    wareCategory(id: $categoryId) {\n      ...GMenuCategoryForm\n    }\n  }\n  ${MenuCategoryFormFragment}\n`\n","import { useRef, useState } from 'react'\n\nexport function useStateRef<T>(initialState: T | (() => T)) {\n  const [state, setState] = useState(initialState)\n  const ref = useRef<T | null>(null)\n  ref.current = state\n  const getValue = () => ref.current\n  return [getValue, setState] as [(() => T), ((value: T) => void)]\n}\n","import './enableDebug'\n\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport { App } from './App'\nimport { RootProvider } from './atoms/RootProvider'\nimport { Router } from './atoms/Router'\nimport { ThemeProvider } from './atoms/ThemeProvider'\nimport { UpdateHandler } from './atoms/UpdateHandler'\nimport { installSentry } from './helpers/sentry'\nimport { I18nManager } from './i18n'\n\nconst Main = () => (\n  <ThemeProvider>\n    <RootProvider>\n      <I18nManager>\n        <UpdateHandler>\n          <Router>\n            <App />\n          </Router>\n        </UpdateHandler>\n      </I18nManager>\n    </RootProvider>\n  </ThemeProvider>\n)\n\ninstallSentry(() => {\n  const rootElement = document.getElementById('root')\n  render(<Main />, rootElement)\n})\n","// @ts-ignore temporary before figuring out a logging solution that works in prod\nwindow.localStorage.setItem('debug', '*,-sockjs*')\n","import './App.css'\n\nimport { Observer } from 'mobx-react-lite'\nimport { SnackbarProvider } from 'notistack'\nimport React from 'react'\n\nimport { ConnectionWarning } from './atoms/ConnectionWarning'\nimport { ErrorContainer } from './atoms/ErrorContainer'\nimport Pacman from './atoms/Pacman'\nimport { useRoot } from './atoms/RootProvider'\nimport { Routing } from './routes/Routing'\n\nexport const App: React.SFC = () => {\n  const { user } = useRoot()\n  return (\n    <ErrorContainer prod={process.env.NODE_ENV === 'production'}>\n      <>\n        <ConnectionWarning />\n        <SnackbarProvider\n          maxSnack={3}\n          anchorOrigin={{ horizontal: 'right', vertical: 'top' }}\n        >\n          <Observer>{() => (user.isReady ? <Routing /> : <Pacman />)}</Observer>\n        </SnackbarProvider>\n      </>\n    </ErrorContainer>\n  )\n}\n","import { Trans } from '@lingui/react'\nimport { Dialog } from '@material-ui/core'\nimport { WarningTwoTone } from '@material-ui/icons'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport connectionWarningSound from '../assets/connectionWarning.mp3'\nimport { isNetworkOffline } from '../helpers/offline'\nimport { Colors } from '../styling'\nimport { SoundPlayInterval } from './SoundPlayInterval'\n\nconst MessageStyled = styled.div`\n  padding: 1rem;\n  background-color: ${Colors.red} !important;\n  font-size: 2rem;\n\n  & svg {\n    position: relative;\n    top: 0.3rem;\n    padding-right: 0.5rem;\n  }\n`\n\nexport const ConnectionWarning = observer(() => {\n  return (\n    <>\n      <SoundPlayInterval\n        shouldPlay={isNetworkOffline()}\n        intervalSec={30}\n        soundUrl={connectionWarningSound}\n      />\n\n      <Dialog\n        open={isNetworkOffline()}\n        disableBackdropClick={true}\n        disableEscapeKeyDown={true}\n      >\n        <MessageStyled>\n          <WarningTwoTone fontSize=\"large\" />\n          <Trans>Internet connection is not available</Trans>\n        </MessageStyled>\n      </Dialog>\n    </>\n  )\n})\n","import { DocumentNode } from 'graphql'\nimport { Lambda } from 'mobx'\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\nimport { useQuery } from 'react-apollo-hooks'\nimport { Redirect } from 'react-router'\nimport RedBox from 'redbox-react'\n\nimport { Loading } from '../atoms/Loading'\nimport { logError } from '../helpers/logger'\nimport { whenGoingOnline } from '../helpers/offline'\nimport { reportError } from '../helpers/sentry'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean\n    refetchOnConnectionLost?: boolean\n  }\n  const GQuery: React.FC<IProps> = props => {\n    const cleanup = useRef<Lambda[]>([])\n    const executeCleanup = useCallback(() => {\n      cleanup.current.forEach(fn => fn())\n      cleanup.current.length = 0\n    }, [])\n\n    useEffect(\n      () => {\n        executeCleanup()\n        return executeCleanup()\n      },\n      [cleanup.current.length],\n    )\n\n    const {\n      render,\n      renderFragment,\n      renderLoading = true,\n      renderError = true,\n      refetchOnConnectionLost = false,\n      children,\n      ...rest\n    } = props\n\n    return (\n      <Query query={query} {...rest}>\n        {result => {\n          if (result.loading) {\n            if (typeof renderLoading === 'function') {\n              return renderLoading(result)\n            } else if (renderLoading === true) {\n              return <Loading />\n            }\n          }\n          if (result.error) {\n            reportError(result.error)\n            logError(result.error)\n            if (renderError === true) {\n              return process.env.NODE_ENV === 'production' ? (\n                <Redirect to=\"/error\" />\n              ) : (\n                <RedBox error={result.error} />\n              )\n            } else {\n              return null\n            }\n          }\n          if (refetchOnConnectionLost) {\n            cleanup.current.push(whenGoingOnline(result.refetch))\n          }\n          if (result.data) {\n            if (renderFragment) {\n              return <>{renderFragment(result.data, result)}</>\n            }\n            if (render) {\n              return render(result.data, result)\n            }\n          }\n          return children || null\n        }}\n      </Query>\n    )\n  }\n  return GQuery\n}\n\nexport function buildQueryHook<TData, TVariables>(query: DocumentNode) {\n  return (variables: TVariables) => {\n    return useQuery<TData, TVariables>(query, { variables })\n  }\n}\n","module.exports = __webpack_public_path__ + \"static/media/connectionWarning.ac6fe03b.mp3\";","import { addSeconds, differenceInMilliseconds } from 'date-fns'\nimport { Component } from 'react'\n\ninterface IRenderProps {\n  isActive: boolean\n  nextLoop(): void\n}\n\ninterface IProps {\n  intervalSec: number\n  enabled?: boolean\n  render(props: IRenderProps): ReactNode\n}\n\ninterface IState {\n  isActive: boolean\n  nextTime: Date\n}\n\nexport class IntervalRender extends Component<IProps, IState> {\n  state: IState = { isActive: false, nextTime: this.getNextTime() }\n  timer = 0\n  componentDidMount() {\n    this.executeTimer()\n  }\n  componentDidUpdate() {\n    this.executeTimer()\n  }\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer)\n    }\n  }\n  getNextTime() {\n    return addSeconds(new Date(), this.props.intervalSec)\n  }\n  executeTimer = () => {\n    if (this.timer) {\n      clearTimeout(this.timer)\n      this.timer = 0\n    }\n    if (this.props.enabled === false) {\n      return\n    }\n    const timeMs = differenceInMilliseconds(this.state.nextTime, new Date())\n    // @ts-ignore (setTimeout returning NodeJS.Timer) for some weird reason\n    this.timer = setTimeout(this.activate, timeMs)\n  }\n  activate = () => {\n    if (this.props.enabled !== false) {\n      this.setState({\n        isActive: true,\n        nextTime: this.getNextTime(),\n      })\n    }\n  }\n  deactivate = () => {\n    this.setState({ isActive: false })\n    this.executeTimer()\n  }\n  render() {\n    const { isActive } = this.state\n    return this.props.render({\n      isActive,\n      nextLoop: this.deactivate,\n    })\n  }\n}\n","import { createContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const RootContext = createContext<TRootModel | undefined>(undefined)\n","import { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { BatchHttpLink } from 'apollo-link-batch-http'\nimport QueueLink from 'apollo-link-queue'\nimport { RetryLink } from 'apollo-link-retry'\nimport { autorun } from 'mobx'\n\nimport { appConfig } from '../config'\nimport { logGraph } from '../helpers/logger'\nimport { isNetworkOnline } from '../helpers/offline'\nimport { TAuthModel } from '../models/AuthModel'\nimport createAuthLink from './AuthLink'\nimport { createErrorLink } from './errorHandler'\nimport createSubscriptionLink, {\n  isSubscriptionOperation,\n} from './SubscriptionLink'\n\nexport function createApolloClient(auth: TAuthModel) {\n  const cache = new InMemoryCache({\n    dataIdFromObject: (o: { __typename?: string; id?: string }) => {\n      if (o.__typename != null && o.id != null) {\n        return `${o.__typename}-${o.id}`\n      }\n      return null\n    },\n  })\n\n  const authLink = createAuthLink(auth)\n  const retryLink = createRetryLink()\n  const offlineLink = createOfflineLink()\n  const errorLink = createErrorLink()\n  const httpLink = createHttpLink()\n  const subscriptionLink = createSubscriptionLink(auth)\n\n  const client = new ApolloClient({\n    link: ApolloLink.from([authLink, retryLink, offlineLink, errorLink]).split(\n      isSubscriptionOperation,\n      subscriptionLink,\n      httpLink,\n    ),\n    cache,\n  })\n\n  return client\n}\n\nfunction createHttpLink() {\n  return new BatchHttpLink({\n    uri: `${appConfig.endpoint}/graphql`,\n    credentials: 'same-origin',\n  })\n}\n\nfunction createRetryLink() {\n  return new RetryLink({\n    delay: {\n      initial: 300,\n      max: Infinity,\n      jitter: true,\n    },\n    attempts: {\n      max: 5,\n      retryIf: (error, _operation) => !!error,\n    },\n  })\n}\n\nfunction createOfflineLink() {\n  const offlineLink = new QueueLink()\n  autorun(() => {\n    if (isNetworkOnline()) {\n      logGraph('client is online')\n      offlineLink.open()\n    } else {\n      logGraph('client is offline')\n      offlineLink.close()\n    }\n  })\n  return offlineLink\n}\n","import { ApolloLink, FetchResult, Observable } from 'apollo-link'\nimport { computed } from 'mobx'\nimport VError from 'verror'\n\nimport { TAuthModel } from '../models/AuthModel'\n\nexport default function createAuthLink(auth: TAuthModel) {\n  const headers = computed(() => ({\n    Authorization: `Bearer ${auth.communicationToken}`,\n  }))\n\n  return new ApolloLink((operation, forward) => {\n    if (!auth.canCommunicate) {\n      throw new VError(\n        `Executing operation ${operation.operationName} before authenticated`,\n        { operation },\n      )\n    }\n\n    const context = operation.getContext()\n    operation.setContext({ ...context, headers: headers.get() })\n\n    return new Observable<FetchResult>(observer => {\n      const sub = forward!(operation).subscribe({\n        error: networkError => {\n          if (\n            networkError.result &&\n            networkError.result.code === 'INVALID_TOKEN'\n          ) {\n            auth.invalidate()\n            return\n          }\n          observer.error(networkError)\n        },\n        next: observer.next.bind(observer),\n        complete: observer.complete.bind(observer),\n      })\n      return () => sub.unsubscribe()\n    })\n  })\n}\n","import ActionCable from 'actioncable'\nimport { ApolloLink, Observable, Operation } from 'apollo-link'\nimport { getOperationDefinitionOrDie } from 'apollo-utilities'\nimport { print } from 'graphql/language'\nimport { computed } from 'mobx'\nimport { VError } from 'verror'\n\nimport { appConfig } from '../config'\nimport { TAuthModel } from '../models/AuthModel'\n\nconst getChannelId = () =>\n  Math.round(Date.now() + Math.random() * 100000).toString(16)\n\nexport default function createSubscriptionLink(auth: TAuthModel) {\n  const cableUrl = computed(\n    () => `${appConfig.endpoint}/cable?token=${auth.token}`,\n  )\n\n  let cable\n  const channelName = 'GraphqlChannel'\n  const actionName = 'execute'\n  const connectionParams = {}\n\n  return new ApolloLink(operation => {\n    if (!auth.isAuthenticated) {\n      throw new VError(\n        `Executing operation ${operation.operationName} before authenticated`,\n        { operation },\n      )\n    }\n    if (!cable) {\n      cable = ActionCable.createConsumer(cableUrl.get())\n    }\n    return new Observable(observer => {\n      const channelId = getChannelId()\n\n      const subscription = cable.subscriptions.create(\n        Object.assign(\n          {},\n          {\n            channel: channelName,\n            channelId: channelId,\n          },\n          connectionParams,\n        ),\n        {\n          connected: function() {\n            this.perform(actionName, {\n              query: operation.query ? print(operation.query) : null,\n              variables: operation.variables,\n              // @ts-ignore\n              operationId: operation.operationId,\n              operationName: operation.operationName,\n            })\n          },\n          received: function(payload: {\n            result: { data: object }\n            more: boolean\n          }) {\n            if (payload.result.data) {\n              observer.next(payload.result)\n            }\n\n            if (!payload.more) {\n              this.unsubscribe()\n              observer.complete()\n            }\n          },\n        },\n      )\n\n      return subscription\n    })\n  })\n}\n\nexport function isSubscriptionOperation({ query }: Operation) {\n  const { operation } = getOperationDefinitionOrDie(query)\n  return operation === 'subscription'\n}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersistence } from './logger'\n\nconst persistenceKey = appConfig.persistenceKey\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = (snapshot: object) =>\n    localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersistence('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersistence('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersistence('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { useEffect } from 'react'\n\nexport const useInitializer = (effect: () => Promise<void>) => {\n  useEffect(() => {\n    effect()\n  }, [])\n}\n","import { getParent, Instance, types } from 'mobx-state-tree'\n\nimport { TAuthModel } from '../../../models/AuthModel'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { PasswordLoginModel } from './PasswordLoginModel'\n\nexport const LoginProviderModel = BaseModel.named('LoginProvider')\n  .props({\n    passwordLogin: types.optional(PasswordLoginModel, {}),\n  })\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      const auth = getParent<TAuthModel>(self)\n      auth.authenticate(token, userId)\n    },\n  }))\n\nexport interface TLoginProviderModel\n  extends Instance<typeof LoginProviderModel> {}\n","import { getParent } from 'mobx-state-tree'\n\nimport { IRootEnvironment } from '../../../atoms/RootProvider'\nimport { appConfig } from '../../../config'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TLoginProviderModel } from './LoginProviderModel'\n\nconst getLoginUrl = ({ username, password }: Dictionary<string>) =>\n  `${appConfig.endpoint}/users/token?username=${username}&password=${password}`\n\nexport const PasswordLoginModel = BaseModel.named('PasswordLogin')\n  .volatile(self => ({\n    errorCode: '',\n    errorMessage: '',\n  }))\n  .views(self => ({\n    get hasFailed() {\n      return Boolean(self.errorCode)\n    },\n  }))\n  .actions(self => ({\n    setFailure(code: string, message: string) {\n      self.errorCode = code\n      self.errorMessage = message\n    },\n    setSuccess(token: string, userId: string) {\n      const provider = getParent(self) as TLoginProviderModel\n      provider.authenticate(token, userId)\n    },\n  }))\n  .actions(self => ({\n    async requestToken(username: string, password: string) {\n      const url = getLoginUrl({ username, password })\n      const fetch: TFetch = window.fetch\n      const response = await fetch(url, {\n        headers: {\n          Accept: 'application/json',\n        },\n      })\n      const payload = await response.json()\n      self.log('received payload %j', payload)\n\n      if (response.status !== 200) {\n        self.setFailure(payload.code, payload.error)\n        self.log('token request failed for username %s', username)\n      } else {\n        self.setSuccess(payload.token, String(payload.userId))\n        self.log(\n          'token request success for username %s [%s]',\n          username,\n          payload.userId,\n        )\n      }\n    },\n  }))\n\nexport type TPasswordLoginModel = typeof PasswordLoginModel.Type\n\nexport const createPasswordLoginModelMock = (\n  overrides = {},\n  env: IRootEnvironment,\n) => PasswordLoginModel.create({ ...overrides }, env)\n","import gql from 'graphql-tag'\n\nexport const PasswordChangeMutation = gql`\n  mutation MPasswordChange($password: String!) {\n    updateUserPassword(newPassword: $password) {\n      id\n      token\n    }\n  }\n`\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { AuthModel } from '../models/AuthModel'\nimport { ConfigModel } from '../models/ConfigModel'\nimport { UserModel } from '../models/UserModel'\nimport { CreateOrderModel } from '../segments/createorder/models/CreateOrderModel'\nimport { OrderModel } from '../segments/order/models/OrderModel'\nimport { StatisticsModel } from '../segments/overview/models/StatisticsModel'\nimport { SettingsModel } from '../segments/settings/models/SettingsModel'\nimport { ZoneModel } from '../segments/zones/models/ZoneModel'\nimport { BaseModel } from './BaseModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    user: types.optional(UserModel, {}),\n    order: types.optional(OrderModel, {}),\n    createOrder: types.optional(CreateOrderModel, {}),\n    zone: types.optional(ZoneModel, {}),\n    settings: types.optional(SettingsModel, {}),\n    config: types.optional(ConfigModel, {}),\n    statistics: types.optional(StatisticsModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.settings,\n        self.zone,\n        self.order,\n        self.statistics,\n        self.createOrder,\n      ]\n    },\n  }))\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import { BaseModel } from '../models/BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  soundEnabled: true,\n  orderListPollIntervalSec: 60,\n  orderListSoundIntervalSec: 60,\n})\n\nexport type TConfigModel = typeof ConfigModel.Type\nexport type TConfigModelProps = typeof ConfigModel.SnapshotType\n","import _ from 'lodash'\nimport { autorun } from 'mobx'\nimport { flow, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\n\nimport { GCompanyBranch, GUserModelBootstrap } from '../graph/types'\nimport { logBootstrap, logLang } from '../helpers/logger'\nimport { RM } from '../helpers/ramda'\nimport { changeLanguage, detectLanguage } from '../i18n'\nimport { BaseModel } from '../models/BaseModel'\nimport { UserModelBootstrapQuery } from './UserModel.graphql'\n\ninterface IVolatileProps {\n  isLoaded: boolean\n  branches: ReadonlyArray<GCompanyBranch.Fragment>\n  brands: ReadonlyArray<GCompanyBranch.Brand>\n  soundEnabled: boolean\n  permissions: Maybe<IUserPermisssions>\n}\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    language: types.maybe(types.string),\n    soundVolume: types.optional(types.number, 25),\n    soundIgnore: false,\n  })\n  .volatile<IVolatileProps>(() => ({\n    isLoaded: false,\n    branches: [],\n    brands: [],\n    soundEnabled: false,\n    permissions: null,\n  }))\n  .views(self => ({\n    get branchesId() {\n      return self.branches.map(R.prop('id'))\n    },\n    get defaultBranch() {\n      if (self.branches.length === 0) {\n        throw new Error('No user branches available to get defaultBranchId')\n      }\n      return self.branches[0]\n    },\n    filterBranches(predicate: (value: GCompanyBranch.Fragment) => boolean) {\n      return self.branches.filter(predicate)\n    },\n    canQuery(queryName: string) {\n      return (\n        self.permissions !== null &&\n        self.permissions.queries.has(queryName.toLowerCase())\n      )\n    },\n    canMutate(mutationName: string) {\n      return (\n        self.permissions !== null &&\n        self.permissions.mutations.has(mutationName.toLowerCase())\n      )\n    },\n    get isReady() {\n      return self.isLoaded || !self.root.auth.isAuthenticated\n    },\n  }))\n  .actions(self => ({\n    applyUserData(user: GUserModelBootstrap.User) {\n      self.branches = user.branches\n      self.brands = RM.uniqBy(\n        RM.prop('id'),\n        user.branches.map(RM.prop('brand')),\n      )\n    },\n    applyUserPermissions(permissions: IPermisssions) {\n      self.permissions = _.mapValues(\n        permissions,\n        ({ fields }) =>\n          new Set(\n            fields.map(\n              RM.compose(\n                RM.toLower,\n                RM.prop('name'),\n              ),\n            ),\n          ),\n      )\n    },\n    setLanguage: flow(function*(language: string) {\n      logLang('changing to language %s from user profile', language)\n      yield changeLanguage(language)\n      self.language = language\n    }),\n    finishBootstrap() {\n      self.isLoaded = true\n    },\n    controlSound(enabled: boolean = true, ignore: boolean = false) {\n      self.soundEnabled = enabled\n      self.soundIgnore = ignore\n    },\n    setSoundVolume(volume: number) {\n      self.soundVolume = volume\n    },\n  }))\n  .actions(self => {\n    const queryUser = async (userId: ID) => {\n      const variables: GUserModelBootstrap.Variables = {\n        userId,\n      }\n      const { data } = await self.client.query<GUserModelBootstrap.Query>({\n        query: UserModelBootstrapQuery,\n        variables,\n      })\n      self.setLanguage(data.user.language.rawCode)\n      self.applyUserData(data.user)\n      // @ts-ignore https://github.com/dotansimha/graphql-code-generator/issues/643\n      self.applyUserPermissions(data.permissions)\n      self.finishBootstrap()\n    }\n\n    const initUser = () => {\n      return new Promise(resolve => {\n        autorun(() => {\n          if (self.root.auth.userId) {\n            logBootstrap('query user')\n            if (!self.language) {\n              self.setLanguage(detectLanguage())\n            }\n            resolve(queryUser(self.root.auth.userId))\n          } else {\n            logBootstrap('user not authenticated')\n            self.setLanguage(detectLanguage())\n            resolve()\n          }\n        })\n      })\n    }\n\n    return { initUser }\n  })\n\ninterface IUserPermisssions {\n  queries: Set<string>\n  mutations: Set<string>\n  subscriptions: Set<string>\n}\n\ninterface IPermissionType {\n  fields: ReadonlyArray<{ name: string }>\n}\n\ninterface IPermisssions {\n  queries: IPermissionType\n  mutations: IPermissionType\n  subscriptions: IPermissionType\n}\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import numeral from 'numeral'\n\nconst aliasLocales = {\n  en: 'en-gb'\n}\n\nexport async function changeNumeralLocale(lang: string) {\n  await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"numeral-[index]\" */\n    `numeral/locales/${aliasLocales[lang] || lang}`\n  )\n  numeral.locale(aliasLocales[lang] || lang)\n}\n","var map = {\n\t\"./bg\": [\n\t\t5835,\n\t\t2\n\t],\n\t\"./bg.js\": [\n\t\t5835,\n\t\t2\n\t],\n\t\"./chs\": [\n\t\t5836,\n\t\t3\n\t],\n\t\"./chs.js\": [\n\t\t5836,\n\t\t3\n\t],\n\t\"./cs\": [\n\t\t5837,\n\t\t4\n\t],\n\t\"./cs.js\": [\n\t\t5837,\n\t\t4\n\t],\n\t\"./da-dk\": [\n\t\t5838,\n\t\t5\n\t],\n\t\"./da-dk.js\": [\n\t\t5838,\n\t\t5\n\t],\n\t\"./de\": [\n\t\t5840,\n\t\t7\n\t],\n\t\"./de-ch\": [\n\t\t5839,\n\t\t6\n\t],\n\t\"./de-ch.js\": [\n\t\t5839,\n\t\t6\n\t],\n\t\"./de.js\": [\n\t\t5840,\n\t\t7\n\t],\n\t\"./en-au\": [\n\t\t5841,\n\t\t8\n\t],\n\t\"./en-au.js\": [\n\t\t5841,\n\t\t8\n\t],\n\t\"./en-gb\": [\n\t\t5842,\n\t\t9\n\t],\n\t\"./en-gb.js\": [\n\t\t5842,\n\t\t9\n\t],\n\t\"./en-za\": [\n\t\t5843,\n\t\t10\n\t],\n\t\"./en-za.js\": [\n\t\t5843,\n\t\t10\n\t],\n\t\"./es\": [\n\t\t5845,\n\t\t12\n\t],\n\t\"./es-es\": [\n\t\t5844,\n\t\t11\n\t],\n\t\"./es-es.js\": [\n\t\t5844,\n\t\t11\n\t],\n\t\"./es.js\": [\n\t\t5845,\n\t\t12\n\t],\n\t\"./et\": [\n\t\t5846,\n\t\t13\n\t],\n\t\"./et.js\": [\n\t\t5846,\n\t\t13\n\t],\n\t\"./fi\": [\n\t\t5847,\n\t\t14\n\t],\n\t\"./fi.js\": [\n\t\t5847,\n\t\t14\n\t],\n\t\"./fr\": [\n\t\t5850,\n\t\t17\n\t],\n\t\"./fr-ca\": [\n\t\t5848,\n\t\t15\n\t],\n\t\"./fr-ca.js\": [\n\t\t5848,\n\t\t15\n\t],\n\t\"./fr-ch\": [\n\t\t5849,\n\t\t16\n\t],\n\t\"./fr-ch.js\": [\n\t\t5849,\n\t\t16\n\t],\n\t\"./fr.js\": [\n\t\t5850,\n\t\t17\n\t],\n\t\"./hu\": [\n\t\t5851,\n\t\t18\n\t],\n\t\"./hu.js\": [\n\t\t5851,\n\t\t18\n\t],\n\t\"./it\": [\n\t\t5852,\n\t\t19\n\t],\n\t\"./it.js\": [\n\t\t5852,\n\t\t19\n\t],\n\t\"./ja\": [\n\t\t5853,\n\t\t20\n\t],\n\t\"./ja.js\": [\n\t\t5853,\n\t\t20\n\t],\n\t\"./lv\": [\n\t\t5854,\n\t\t21\n\t],\n\t\"./lv.js\": [\n\t\t5854,\n\t\t21\n\t],\n\t\"./nl-be\": [\n\t\t5855,\n\t\t22\n\t],\n\t\"./nl-be.js\": [\n\t\t5855,\n\t\t22\n\t],\n\t\"./nl-nl\": [\n\t\t5856,\n\t\t23\n\t],\n\t\"./nl-nl.js\": [\n\t\t5856,\n\t\t23\n\t],\n\t\"./no\": [\n\t\t5857,\n\t\t24\n\t],\n\t\"./no.js\": [\n\t\t5857,\n\t\t24\n\t],\n\t\"./pl\": [\n\t\t5858,\n\t\t25\n\t],\n\t\"./pl.js\": [\n\t\t5858,\n\t\t25\n\t],\n\t\"./pt-br\": [\n\t\t5859,\n\t\t26\n\t],\n\t\"./pt-br.js\": [\n\t\t5859,\n\t\t26\n\t],\n\t\"./pt-pt\": [\n\t\t5860,\n\t\t27\n\t],\n\t\"./pt-pt.js\": [\n\t\t5860,\n\t\t27\n\t],\n\t\"./ru\": [\n\t\t5862,\n\t\t29\n\t],\n\t\"./ru-ua\": [\n\t\t5861,\n\t\t28\n\t],\n\t\"./ru-ua.js\": [\n\t\t5861,\n\t\t28\n\t],\n\t\"./ru.js\": [\n\t\t5862,\n\t\t29\n\t],\n\t\"./sk\": [\n\t\t5863,\n\t\t30\n\t],\n\t\"./sk.js\": [\n\t\t5863,\n\t\t30\n\t],\n\t\"./sl\": [\n\t\t5864,\n\t\t31\n\t],\n\t\"./sl.js\": [\n\t\t5864,\n\t\t31\n\t],\n\t\"./th\": [\n\t\t5865,\n\t\t32\n\t],\n\t\"./th.js\": [\n\t\t5865,\n\t\t32\n\t],\n\t\"./tr\": [\n\t\t5866,\n\t\t33\n\t],\n\t\"./tr.js\": [\n\t\t5866,\n\t\t33\n\t],\n\t\"./uk-ua\": [\n\t\t5867,\n\t\t34\n\t],\n\t\"./uk-ua.js\": [\n\t\t5867,\n\t\t34\n\t],\n\t\"./vi\": [\n\t\t5868,\n\t\t35\n\t],\n\t\"./vi.js\": [\n\t\t5868,\n\t\t35\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6276;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t7693,\n\t\t41\n\t],\n\t\"./de/messages.js\": [\n\t\t7694,\n\t\t42\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t7696,\n\t\t44\n\t],\n\t\"./en/messages.js\": [\n\t\t7695,\n\t\t43\n\t],\n\t\"./pl/messages.js\": [\n\t\t7697,\n\t\t45\n\t],\n\t\"./sk/messages.js\": [\n\t\t7698,\n\t\t46\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6277;\nmodule.exports = webpackAsyncContext;","import gql from 'graphql-tag'\n\nimport { CompanyBranchFragment } from '../graph/fragments'\n\nexport const UserModelBootstrapQuery = gql`\n  query GUserModelBootstrap($userId: ID!) {\n    user(id: $userId) {\n      id\n      language {\n        rawCode\n      }\n      branches: accessibleBranches {\n        ...GCompanyBranch\n      }\n    }\n    permissions: __schema {\n      queries: queryType {\n        fields {\n          name\n        }\n      }\n      mutations: mutationType {\n        fields {\n          name\n        }\n      }\n      subscriptions: subscriptionType {\n        fields {\n          name\n        }\n      }\n    }\n  }\n\n  ${CompanyBranchFragment}\n`\n","import gql from 'graphql-tag'\n\nexport const AddressFragment = gql`\n  fragment GAddress on JsonAddress {\n    state\n    city\n    street\n    houseNumber\n  }\n`\n","import gql from 'graphql-tag'\n\nimport { GeoPointFragment } from './GeoPointFragment.graphql'\n\nexport const CompanyBranchFragment = gql`\n  fragment GCompanyBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...GGeoPoint\n    }\n    brand {\n      id\n      name\n    }\n  }\n  ${GeoPointFragment}\n`\n","import gql from 'graphql-tag'\n\nimport { EmailFragment } from './EmailFragment.graphql'\nimport { PhoneFragment } from './PhoneFragment.graphql'\n\nexport const CustomerFragment = gql`\n  fragment GCustomer on JsonCustomer {\n    firstName\n    lastName\n    defaultEmail {\n      ...GEmail\n    }\n    defaultPhone {\n      ...GPhone\n    }\n  }\n  ${EmailFragment}\n  ${PhoneFragment}\n`\n","import gql from 'graphql-tag'\n\nexport const PriceFragment = gql`\n  fragment GPrice on PriceConverted {\n    value\n  }\n`\n","import { ApolloQueryResult } from 'apollo-client'\nimport _ from 'lodash'\nimport { flow, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { ExecutionResult } from 'react-apollo'\n\nimport {\n  DeliveryTypeEnum,\n  GCreateOrder,\n  GOrderVam,\n  GValidateLocation,\n  MAcceptOrder,\n  MCancelOrder,\n} from '../../../graph/types'\nimport { faker } from '../../../helpers/faker'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { IAddressWithGps } from '../../../molecules/AddressSuggest'\nimport {\n  CancelOrderMutation,\n  CreateOrderMutation,\n  ValidateLocationQuery,\n} from './CreateOrderModel.graphql'\n\nexport interface IOrderFormValues {\n  deliveryType: DeliveryTypeEnum.Messenger | DeliveryTypeEnum.Pickup\n  phone?: string\n  firstName?: string\n  lastName?: string\n  email?: string\n  note?: string\n}\n\ninterface IVolatileProps {\n  orderId: MaybeID\n  callingPhone?: string\n  callingEventId?: ID\n  deliveryAddress?: IAddressWithGps\n  notDeliveryLocation: boolean\n  values: IOrderFormValues\n  fakeValues?: Partial<IOrderFormValues>\n  fakeAddress?: IAddressWithGps\n  vamCustomer: Maybe<GOrderVam.VamCustomer>\n}\n\nexport const CreateOrderModel = BaseModel.named('CreateOrder')\n  .props({\n    branchId: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(getDefaultProps)\n  .views(self => ({\n    get currentBranch() {\n      return (\n        self.root.user.branches.find(RM.propEq('id', self.branchId)) ||\n        self.root.user.defaultBranch\n      )\n    },\n    get deliveryType() {\n      return self.values.deliveryType\n    },\n    get isDelivery() {\n      return self.values.deliveryType === DeliveryTypeEnum.Messenger\n    },\n    get hasAddress() {\n      return Boolean(self.deliveryAddress || self.fakeAddress)\n    },\n    get gps() {\n      if (this.isDelivery && this.hasAddress) {\n        if (self.deliveryAddress && self.deliveryAddress.gps) {\n          return clearGps(self.deliveryAddress.gps)\n        } else if (self.fakeAddress && self.fakeAddress.gps) {\n          return clearGps(self.fakeAddress.gps)\n        }\n      }\n      return { ...clearGps(this.currentBranch.gps) }\n    },\n    get phone() {\n      if (self.values.phone !== undefined) {\n        return self.values.phone\n      }\n      return self.callingPhone\n    },\n    get formValues() {\n      if (self.vamCustomer !== null && self.vamCustomer.isFound) {\n        const { firstName, lastName, email, lastOrder } = self.vamCustomer\n        return _.defaults(\n          { ...self.values },\n          {\n            phone: this.phone,\n            firstName,\n            lastName,\n            email,\n            note: (lastOrder && lastOrder.note) || '',\n          },\n        )\n      }\n      if (self.fakeValues) {\n        const { firstName, lastName, email, phone, note } = self.fakeValues\n        return _.defaults(\n          { ...self.values },\n          {\n            phone,\n            firstName,\n            lastName,\n            email,\n            note,\n          },\n        )\n      }\n      return _.defaults({ ...self.values }, { phone: self.callingPhone || '' })\n    },\n    get hasOrder() {\n      return self.orderId !== null\n    },\n    get cartRefreshKey() {\n      return `${self.orderId || 0}-${this.deliveryType}-${this.gps.longitude}-${\n        this.gps.latitude\n      }`\n    },\n    get acceptOrderVariables(): MAcceptOrder.Variables {\n      return {\n        orderId: self.orderId!,\n        customer: {\n          firstName: this.formValues.firstName,\n          lastName: this.formValues.lastName,\n          emails: this.formValues.email\n            ? [{ email: this.formValues.email }]\n            : null,\n          phones: this.formValues.phone\n            ? [{ phone: this.formValues.phone }]\n            : null,\n        },\n        note: this.formValues.note,\n      }\n    },\n  }))\n  .actions(self => {\n    const resetOrder = () => {\n      self.orderId = null\n    }\n    const resetModel = () => {\n      Object.assign(self, getDefaultProps())\n    }\n    const ensureOrder = flow<ID>(function*() {\n      if (self.orderId === null && self.branchId) {\n        const variables: GCreateOrder.Variables = {\n          branchId: self.currentBranch.id,\n          deliveryType: self.values.deliveryType,\n          gps: self.gps,\n          callEventId: self.callingEventId,\n        }\n        const result: ExecutionResult<\n          GCreateOrder.Mutation\n        > = yield self.client.mutate({\n          mutation: CreateOrderMutation,\n          variables,\n        })\n        if (result.data) {\n          self.orderId = result.data.createOrder.id\n        }\n      }\n      return self.orderId\n    })\n    const cancelOrder = flow(function*() {\n      if (!self.orderId) {\n        resetModel()\n        return\n      }\n      const variables: MCancelOrder.Variables = {\n        orderId: self.orderId,\n      }\n      self.client.mutate({ mutation: CancelOrderMutation, variables })\n      resetModel()\n    })\n\n    return {\n      ensureOrder,\n      cancelOrder,\n      resetOrder,\n      resetModel,\n    }\n  })\n  .actions(self => {\n    const validateLocation = flow(function*() {\n      if (!(self.deliveryAddress && self.deliveryAddress.gps)) {\n        self.notDeliveryLocation = false\n        return\n      }\n      const { latitude, longitude } = self.deliveryAddress.gps\n      const variables: GValidateLocation.Variables = {\n        branchId: self.currentBranch.id,\n        latitude,\n        longitude,\n      }\n      const result: ApolloQueryResult<\n        GValidateLocation.Query\n      > = yield self.client.query({ query: ValidateLocationQuery, variables })\n\n      self.notDeliveryLocation = !result.data.resolveLocation.inDeliveryLocation\n    })\n    return {\n      useLocation(address: IAddressWithGps) {\n        self.deliveryAddress = address\n        validateLocation()\n      },\n      clearLocation() {\n        self.deliveryAddress = undefined\n      },\n    }\n  })\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    userIsCalling(phone: string, eventId: MaybeID) {\n      self.callingPhone = phone\n      if (eventId) {\n        self.callingEventId = eventId\n      }\n    },\n    updateFormValues(\n      values: IOrderFormValues,\n      touched: { [K in keyof IOrderFormValues]?: boolean },\n    ) {\n      self.values = {\n        deliveryType: values.deliveryType,\n        ..._.pick(values, Object.keys(touched)),\n      }\n      self.log('updated values: %j', self.values)\n    },\n    updateFromVam(vamCustomer: Maybe<GOrderVam.VamCustomer>) {\n      self.vamCustomer = vamCustomer\n      self.log('vam customer: %j', vamCustomer)\n    },\n    updateFormWithFakeValues() {\n      self.fakeValues = {\n        firstName: faker.name.firstName(),\n        lastName: faker.name.lastName(),\n        email: faker.internet.email(),\n        phone: faker.phone.phoneNumberFormat(4),\n        note: faker.lorem.sentence().slice(0, 50 - 1),\n      }\n      self.fakeAddress = {\n        state: '',\n        city: 'Hradec Králové',\n        street: 'Opletalova',\n        houseNumber: '334/2',\n        gps: {\n          latitude: 50.2129839,\n          longitude: 15.8342836,\n        },\n      }\n    },\n  }))\n\nfunction getDefaultProps(): IVolatileProps {\n  return {\n    orderId: null,\n    callingPhone: undefined,\n    callingEventId: undefined,\n    values: {\n      deliveryType: DeliveryTypeEnum.Messenger,\n      phone: undefined,\n      email: undefined,\n      firstName: undefined,\n      lastName: undefined,\n      note: undefined,\n    },\n    fakeAddress: undefined,\n    fakeValues: undefined,\n    deliveryAddress: undefined,\n    vamCustomer: null,\n    notDeliveryLocation: false,\n  }\n}\n\nfunction clearGps({ latitude, longitude }: GeoPoint) {\n  return { latitude, longitude }\n}\n\nexport interface TCreateOrderModel extends Instance<typeof CreateOrderModel> {}\nexport interface TCreateOrderModelProps\n  extends SnapshotIn<typeof CreateOrderModel> {}\n","import faker from 'faker'\n\nfaker.locale = 'cz'\n\nexport { faker }\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n  persistenceKey: 'admin@local',\n  pageTitleSuffix: 'LOCAL',\n  sentryDSN: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'admin@dev',\n    pageTitleSuffix: 'DEV',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'admin@prod',\n    pageTitleSuffix: 'Speɘdlo',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport * as detector from 'locales-detector'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport Pacman from './atoms/Pacman'\nimport { useRoot } from './atoms/RootProvider'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\nimport { changeNumeralLocale } from './locale/numeral'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC = ({ children }) => {\n  const { user } = useRoot()\n  return useObserver(\n    () =>\n      user.language ? (\n        <I18nProvider language={user.language} i18n={i18n}>\n          {React.Children.only(children)}\n        </I18nProvider>\n      ) : (\n        <Pacman />\n      ),\n  )\n}\n\nexport function detectLanguage() {\n  const resolver = new detector.LocaleResolver(\n    [new detector.NavigatorDetector()],\n    [new detector.LanguageOnlyTransformer()],\n  )\n  const languages = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nexport async function changeLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await loadCatalog(lang)\n  i18n.activate(lang)\n  await changeNumeralLocale(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","import gql from 'graphql-tag'\n\nexport const ValidateLocationQuery = gql`\n  query GValidateLocation(\n    $branchId: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    resolveLocation(\n      companyBranch: $branchId\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      inDeliveryLocation\n    }\n  }\n`\n\nexport const CreateOrderMutation = gql`\n  mutation GCreateOrder(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $gps: InputGeoPointCreate!\n    $callEventId: ID\n  ) {\n    createOrder(\n      order: {\n        companyBranch: $branchId\n        deliveryType: $deliveryType\n        callEventId: $callEventId\n        gps: $gps\n        customer: {}\n        warePriceType: DELIVERY\n        orderOrigin: STAFF\n      }\n    ) {\n      id\n    }\n  }\n`\n\nexport const CancelOrderMutation = gql`\n  mutation MCancelOrder($orderId: ID!) {\n    addOrderState(order: $orderId, orderState: CANCELED) {\n      id\n    }\n  }\n`\n","import { types } from 'mobx-state-tree'\n\nimport { OrderListModel } from './OrderListModel'\nimport { OrderMapModel } from './OrderMapModel'\nimport { OrderStateModel } from './OrderStateModel'\n\nexport const OrderModel = types.model('Order', {\n  list: types.optional(OrderListModel, {}),\n  map: types.optional(OrderMapModel, {}),\n  state: types.optional(OrderStateModel, {}),\n})\n\nexport type TOrderModel = typeof OrderModel.Type\n","import { observable } from 'mobx'\nimport { getParent, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { scroller } from 'react-scroll'\n\nimport { GOrderList, OrderStateCategoryEnum } from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TOrderModel } from './OrderModel'\n\nexport const OrderListModel = BaseModel.named('OrderList')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    collapsedCategories: types.optional(types.array(types.string), [\n      OrderStateCategoryEnum.Finished,\n    ]),\n  })\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length ? Array.from(self.branches) : []\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n    get isSingleBranchSelected() {\n      return self.branches.length === 1\n    },\n    get firstBranchId() {\n      if (self.branches.length === 1) {\n        return self.branches[0]\n      }\n      return null\n    },\n    get orderMap() {\n      return getParent<TOrderModel>(self).map\n    },\n  }))\n  .actions(self => ({\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    panMapToOrder(order: GOrderList.Orders) {\n      self.orderMap.panToOrder(order.id)\n    },\n  }))\n  .extend(self => {\n    const detailOpen = observable(new Map())\n\n    return {\n      views: {\n        isOrderDetailOpen(orderId: string) {\n          return detailOpen.has(orderId)\n        },\n        isCategoryCollapsed(categoryCode: OrderStateCategoryEnum) {\n          return self.collapsedCategories.includes(categoryCode)\n        },\n      },\n      actions: {\n        toggleOrderDetail(order: GOrderList.Orders) {\n          const orderId = order.id\n          if (detailOpen.has(orderId)) {\n            detailOpen.delete(orderId)\n          } else {\n            detailOpen.set(orderId, true)\n            self.panMapToOrder(order)\n          }\n        },\n        toggleCategoryCollapse(category: OrderStateCategoryEnum) {\n          const index = self.collapsedCategories.indexOf(category)\n          if (index >= 0) {\n            self.collapsedCategories.splice(index, 1)\n          } else {\n            self.collapsedCategories.push(category)\n          }\n        },\n        focusOrderDetail(orderId: ID) {\n          if (!detailOpen.has(orderId)) {\n            detailOpen.set(orderId, true)\n          }\n          setImmediate(() => {\n            scroller.scrollTo(`order-${orderId}`, {\n              smooth: 'easeInOutQuart',\n              containerId: 'order-list',\n              absolute: true,\n              offset: -140,\n            })\n          })\n        },\n      },\n    }\n  })\n\nexport interface TOrderListModel extends Instance<typeof OrderListModel> {}\nexport interface TOrderListModelProps\n  extends SnapshotIn<typeof OrderListModel> {}\n","import { GOrderBranchLocation, GOrderLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport {\n  OrderBranchLocationQuery,\n  OrderLocationQuery,\n} from './OrderMapModel.graphql'\n\nexport const OrderMapModel = MapModel.named('OrderMap').actions(self => ({\n  async panToOrder(orderId: ID) {\n    if (!self.mapRef) {\n      return\n    }\n    const { data } = await self.client.query<GOrderLocation.Query>({\n      query: OrderLocationQuery,\n      variables: { orderId },\n    })\n    if (data && data.order.gps) {\n      self.mapRef.panTo(gpsToLatLng(data.order.gps))\n    }\n  },\n  async panToBranch(branchId: ID) {\n    const { data } = await self.client.query<GOrderBranchLocation.Query>({\n      query: OrderBranchLocationQuery,\n      variables: { branchId },\n    })\n    if (!self.mapRef) {\n      return\n    }\n    if (data) {\n      self.mapRef.panTo(gpsToLatLng(data.companyBranch.gps))\n    }\n  },\n}))\n\nexport type TOrderMapModel = typeof OrderMapModel.Type\n","import gql from 'graphql-tag'\n\nimport { GeoPointFragment } from '../../../graph/fragments'\n\nexport const OrderBranchLocationQuery = gql`\n  query GOrderBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n\nexport const OrderLocationQuery = gql`\n  query GOrderLocation($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      gps {\n        ...GGeoPoint\n      }\n    }\n  }\n  ${GeoPointFragment}\n`\n","import {\n  GRemoveOrderDriver,\n  GSelectOrderDriver,\n  GSendOrderNotification,\n  GUpdateOrderState,\n  OrderStateEnum,\n} from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  RemoveOrderDriverMutation,\n  SelectOrderDriverMutation,\n  SendOrderNotificationMutation,\n  UpdateOrderStateMutation,\n} from './OrderStateModel.graphql'\n\nexport const OrderStateModel = BaseModel.named('OrderState')\n  .views(self => ({}))\n  .actions(self => ({\n    async updateOrderState(orderId: ID, state: OrderStateEnum) {\n      const variables: GUpdateOrderState.Variables = {\n        orderId,\n        state,\n      }\n      await self.client.mutate({\n        mutation: UpdateOrderStateMutation,\n        variables,\n      })\n    },\n  }))\n  .actions(self => ({\n    deliverOrder(orderId: ID) {\n      return self.updateOrderState(orderId, OrderStateEnum.OnWay)\n    },\n    async sendTimeNotification(orderId: ID, minutes: number) {\n      const variables: GSendOrderNotification.Variables = {\n        orderId,\n        minutes,\n      }\n      await self.client.mutate({\n        mutation: SendOrderNotificationMutation,\n        variables,\n      })\n    },\n    async selectDriver(orderId: ID, driverId: ID) {\n      const variables: GSelectOrderDriver.Variables = {\n        orderId,\n        driverId,\n      }\n      await self.client.mutate({\n        mutation: SelectOrderDriverMutation,\n        variables,\n      })\n    },\n    async removeDriver(orderDriverId: ID) {\n      const variables: GRemoveOrderDriver.Variables = {\n        orderDriverId,\n      }\n      await self.client.mutate({\n        mutation: RemoveOrderDriverMutation,\n        variables,\n      })\n    },\n  }))\n\nexport type TOrderStateModel = typeof OrderStateModel.Type\nexport type TOrderStateModelProps = typeof OrderStateModel.SnapshotType\n","import { types } from 'mobx-state-tree'\n\nimport { GCreateFinancialReport } from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { CreateFinancialReport } from '../organisms/ClosureStatisticsControl.graphql'\n\nexport interface IStatisticsDateFilter {\n  dateFrom: Date\n  dateTo: Date\n}\n\nexport const StatisticsModel = BaseModel.named('Statistics')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    closureBranch: types.maybeNull(types.string),\n  })\n  .volatile<IStatisticsDateFilter>(self => ({\n    dateFrom: new Date(),\n    dateTo: new Date(),\n  }))\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length > 0\n        ? Array.from(self.branches)\n        : self.root.user.branchesId\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n  }))\n  .actions(self => ({\n    updateFilter(formValues: IStatisticsDateFilter) {\n      self.dateFrom = new Date(formValues.dateFrom)\n      self.dateTo = new Date(formValues.dateTo)\n    },\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    setClosureBranch(branch: MaybeID) {\n      self.closureBranch = branch\n    },\n    async createClosure() {\n      if (self.closureBranch) {\n        const variables: GCreateFinancialReport.Variables = {\n          companyBranchId: self.closureBranch,\n        }\n        return self.client.mutate({\n          mutation: CreateFinancialReport,\n          variables,\n          refetchQueries: [`GClosureReportQuery`],\n        })\n      } else {\n        throw new Error('Tried to create a closure without branch selected')\n      }\n    },\n  }))\n\nexport type TStatisticsModel = typeof StatisticsModel.Type\n","import { FetchPolicy } from 'apollo-client'\nimport { types } from 'mobx-state-tree'\n\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { BusinessHoursModel } from '../../businesshours/models/BusinessHoursModel'\nimport { MenuModel } from '../../menu/models/MenuModel'\n\nexport const SettingsModel = BaseModel.named('Settings')\n  .props({\n    selectedBranchId: types.maybe(types.string),\n    businessHours: types.optional(BusinessHoursModel, {}),\n    menu: types.optional(MenuModel, {}),\n  })\n  .views(self => ({\n    get branchId() {\n      return self.selectedBranchId || RM.head(self.root.user.branchesId)\n    },\n    get queryProps() {\n      const branchId = this.branchId\n      if (!branchId) {\n        return { skip: true }\n      }\n      return {\n        fetchPolicy: 'cache-and-network' as FetchPolicy,\n        variables: { branchId },\n      }\n    },\n    getQueryProps<T extends Dictionary>(otherVariables: T) {\n      const branchId = this.branchId\n      if (!branchId) {\n        return { skip: true }\n      }\n      return {\n        variables: Object.assign({ branchId }, otherVariables),\n      }\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.selectedBranchId = branchId\n    },\n  }))\n\nexport type TSettingsModel = typeof SettingsModel.Type\nexport type TSettingsModelProps = typeof SettingsModel.SnapshotType\n","import gql from 'graphql-tag'\n\nimport { SpecificBusinessHourFragment } from '../organisms/SpecificBusinessHours.graphql'\n\nexport const CreateSpecificBusinessHour = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`\n\nexport const DeleteSpecificBusinessHour = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n","import { types } from 'mobx-state-tree'\n\nimport { SettingsBaseModel } from '../../settings/models/SettingsBaseModel'\nimport { MenuCategoryModel } from './MenuCategoryModel'\nimport { MenuRecipeModel } from './MenuRecipeModel'\nimport { MenuStockModel } from './MenuStockModel'\n\nexport const MenuModel = SettingsBaseModel.named('Menu').props({\n  category: types.optional(MenuCategoryModel, {}),\n  recipe: types.optional(MenuRecipeModel, {}),\n  stock: types.optional(MenuStockModel, {}),\n})\n\nexport type TMenuModel = typeof MenuModel.Type\nexport type TMenuModelProps = typeof MenuModel.SnapshotType\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TSettingsModel } from './SettingsModel'\n\nexport const SettingsBaseModel = BaseModel.named('SettingsBase').views(\n  self => ({\n    get settings() {\n      return getParent<TSettingsModel>(self)\n    },\n  }),\n)\n\nexport type TSettingsBaseModel = typeof SettingsBaseModel.Type\nexport type TSettingsBaseModelProps = typeof SettingsBaseModel.SnapshotType\n","import gql from 'graphql-tag'\n\nimport { MenuCategoryFormFragment } from '../organisms/CategoryForm.graphql'\n\nexport const SortMenuCategoryMutation = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport const MenuCategoryCreateMutation = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport const MenuCategoryUpdateMutation = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...GMenuCategoryForm\n    }\n  }\n  ${MenuCategoryFormFragment}\n`\n\nexport const MenuCategoryVisibility = gql`\n  mutation GMenuCategoryVisibility($categoryId: ID!, $visible: Boolean!) {\n    updateWareCategory(id: $categoryId, wareCategory: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport const MenuCategoryDeleteMutation = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n","import { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuStockCreate,\n  GMenuStockDelete,\n  GMenuStockUpdate,\n} from '../../../graph/types'\nimport { TStockFormValues } from '../organisms/StockFormLoader'\nimport { MenuStockListQuery } from '../organisms/StockList.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuStockCreateMutation,\n  MenuStockDeleteMutation,\n  MenuStockUpdateMutation,\n} from './MenuStockModel.graphql'\n\nexport const MenuStockModel = MenuBaseModel.named('MenuStock').actions(\n  self => ({\n    createItem(formValues: TStockFormValues) {\n      const variables: GMenuStockCreate.Variables = {\n        stockItem: {\n          companyBranch: self.branchId,\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockCreateMutation,\n          variables,\n          refetchQueries: [\n            {\n              query: MenuStockListQuery,\n              variables: {\n                branchId: self.branchId,\n              },\n            },\n          ],\n        }),\n      )\n    },\n    updateItem(formValues: TStockFormValues) {\n      const variables: GMenuStockUpdate.Variables = {\n        stockId: formValues.id,\n        stockItem: {\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteItem(stockId: ID) {\n      const variables: GMenuStockDelete.Variables = {\n        stockId,\n      }\n      await self.client.mutate({\n        mutation: MenuStockDeleteMutation,\n        variables,\n        refetchQueries: [\n          {\n            query: MenuStockListQuery,\n            variables: {\n              branchId: self.branchId,\n            },\n          },\n        ],\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(formValues: TStockFormValues) {\n  return {\n    code: formValues.code,\n    label: formValues.nameLabel,\n    note: formValues.note,\n    plu: formValues.plu,\n    allergens: formValues.allergens,\n    wareUnit: formValues.wareUnit!,\n    allowNegative: formValues.allowNegative,\n  }\n}\n\nexport type TMenuStockModel = typeof MenuStockModel.Type\n","import { flow, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\nimport { VError } from 'verror'\n\nimport {\n  GCompanyBranch,\n  GCreateZone,\n  GDestroyZone,\n  GUpdateZone,\n  GUpdateZonePriority,\n  GZone,\n  GZonePriceRange,\n} from '../../../graph/types'\nimport { generatePolygon } from '../../../helpers/gps'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { ZoneMapModel } from '../models/ZoneMapModel'\nimport {\n  CreateZoneMutation,\n  DestroyZoneMutation,\n  UpdateZoneMutation,\n  UpdateZonePriorityMutation,\n} from './ZoneModel.graphql'\n\ninterface IVolatileProps {\n  branch: Maybe<GCompanyBranch.Fragment>\n}\n\nexport const ZoneModel = BaseModel.named('Zone')\n  .props({\n    map: types.optional(ZoneMapModel, {}),\n    brandId: types.maybeNull(types.string),\n  })\n  .volatile<IVolatileProps>(() => ({\n    branch: null,\n  }))\n  .views(self => ({\n    get brand(): Maybe<GCompanyBranch.Brand> {\n      return (\n        (self.brandId &&\n          self.root.user.brands.find(RM.propEq('id', self.brandId))) ||\n        null\n      )\n    },\n    get hasBranchFilter() {\n      return self.branch !== null\n    },\n    get branchFilterId(): MaybeID {\n      return self.branch === null ? null : self.branch.id\n    },\n    get branchFilterPredicate() {\n      if (self.branch) {\n        return R.propEq('id', self.branch.id)\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), ['brand', 'id'])\n    },\n    get zoneFilterPredicate() {\n      if (self.branch !== null) {\n        return R.pathSatisfies(R.equals(self.branch.id), [\n          'companyBranch',\n          'id',\n        ])\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), [\n            'companyBranch',\n            'brand',\n            'id',\n          ])\n    },\n    get branches() {\n      return self.root.user.branches\n    },\n  }))\n  .actions(self => ({\n    setBranchFilter(branch: GCompanyBranch.Fragment) {\n      self.branch = branch\n      self.brandId = branch.brand.id\n      self.map.panToBranch(branch)\n    },\n    setBrandFilter(\n      brand: GCompanyBranch.Brand,\n      brandBranches: GCompanyBranch.Fragment[],\n    ) {\n      self.brandId = brand.id\n      if (!self.branch || self.branch.brand.id !== brand.id) {\n        self.branch =\n          (brandBranches.length === 1 && RM.head(brandBranches)) || null\n      }\n    },\n    clearBranchFilter() {\n      self.branch = null\n    },\n    clearBrandFilter() {\n      self.brandId = null\n      self.branch = null\n    },\n  }))\n  .actions(self => ({\n    createZone: flow(function*(onZoneCreate: (zoneId: ID) => void) {\n      if (self.branch === null) {\n        throw new VError('Called createZone without branch being set')\n      }\n      const points = generatePolygon({\n        center: self.branch.gps,\n        metersRadius: 1000,\n        pointsCount: 5,\n      })\n      const variables: GCreateZone.Variables = {\n        branchId: self.branch.id,\n        points,\n      }\n      const { data } = yield self.client.mutate({\n        mutation: CreateZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: (prev, { mutationResult }) => {\n            const zone = (mutationResult.data as GCreateZone.Mutation)\n              .createZone\n            if (zone) {\n              return {\n                ...prev,\n                zones: prev.zones.concat(zone),\n              }\n            }\n            return prev\n          },\n        },\n      })\n      if (data) {\n        const zone = (data as GCreateZone.Mutation).createZone\n        onZoneCreate(zone.id)\n      }\n    }),\n    // tslint:disable-next-line:no-any\n    async saveZone(zoneId: ID, values: any) {\n      const variables: GUpdateZone.Variables = {\n        zoneId,\n        update: {\n          name: values.name,\n          enabled: values.enabled,\n          companyBranch: values.companyBranch.id,\n          zoneColor: values.zoneColor.id,\n          minimalOrderPrice: {\n            value: Number(values.minimalOrderPrice.value) || 0,\n          },\n          priceRangeRules: values.priceRangeRules\n            .map(normalizePriceRangeRule)\n            .filter(R.reject(R.pathEq(['price', 'value'], null))),\n          geoPolygon: self.map.currentZonePoints || undefined,\n        },\n      }\n      await self.client.mutate({\n        mutation: UpdateZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: (prev, { mutationResult }) => {\n            const zoneIdx = prev.zones.findIndex(R.propEq('id', zoneId))\n            const zone = (mutationResult.data as GUpdateZone.Mutation)\n              .updateZone\n            return {\n              ...prev,\n              zones: R.update(zoneIdx, zone, prev.zones),\n            }\n          },\n        },\n      })\n      self.map.clearZonePoints()\n    },\n    destroyZone(zoneId: ID) {\n      if (!zoneId) {\n        return\n      }\n      const variables: GDestroyZone.Variables = {\n        zoneId,\n      }\n      self.client.mutate({\n        mutation: DestroyZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: prev => {\n            return {\n              ...prev,\n              zones: R.reject(R.propEq('id', zoneId), prev.zones),\n            }\n          },\n        },\n      })\n    },\n    changeZonePriority: flow(function*(\n      zone: GZone.Fragment,\n      oldIndex: number,\n      newIndex: number,\n    ) {\n      if (!zone || oldIndex === newIndex) {\n        return\n      }\n      const offset = oldIndex - newIndex\n\n      const variables: GUpdateZonePriority.Variables = {\n        zoneId: zone.id,\n        offset,\n      }\n      yield self.client.mutate({\n        mutation: UpdateZonePriorityMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          updateZonePriority: {\n            __typename: 'Zone',\n            id: zone.id,\n            priority: zone.priority + offset,\n          },\n        },\n      })\n    }),\n  }))\n\nfunction numberOrNull(value: string | number | null) {\n  if (value === null) {\n    return null\n  }\n  const num = Number(value)\n  return Number.isNaN(num) ? null : num\n}\n\nfunction normalizePriceRangeRule(range: GZonePriceRange.Fragment) {\n  return {\n    price: { value: numberOrNull(range.price.value) },\n    toPrice: { value: numberOrNull(range.toPrice.value) || -1 },\n  }\n}\n\nexport type TZoneModel = typeof ZoneModel.Type\n","import { GCompanyBranch, GZoneLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport { ZoneLocationQuery } from '../Zones.graphql'\n\ninterface IVolatileProps {\n  currentZonePoints: Maybe<GeoPoint[]>\n}\n\nexport const ZoneMapModel = MapModel.named('ZoneMap')\n  .volatile<IVolatileProps>(() => ({\n    currentZonePoints: null,\n  }))\n  .actions(self => ({\n    updateZonePoints(points: GeoPoint[]) {\n      self.currentZonePoints = points\n    },\n    clearZonePoints() {\n      self.currentZonePoints = null\n    },\n    async panToZone(zoneId: ID) {\n      const { data } = await self.client.query({\n        query: ZoneLocationQuery,\n        variables: { zoneId },\n      })\n      if (data) {\n        const {\n          zone: {\n            companyBranch: { gps },\n          },\n        } = data as GZoneLocation.Query\n        if (self.mapRef) {\n          self.mapRef.panTo(gpsToLatLng(gps))\n        }\n      }\n    },\n    async panToBranch(branch: GCompanyBranch.Fragment) {\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(branch.gps))\n      }\n    },\n  }))\n\nexport type TZoneMapModel = typeof ZoneMapModel.Type\n","import gql from 'graphql-tag'\n\nimport { ZoneFragment } from '../Zones.graphql'\n\nexport const CreateZoneMutation = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...GZone\n    }\n  }\n  ${ZoneFragment}\n`\n\nexport const UpdateZoneMutation = gql`\n  mutation GUpdateZone($zoneId: ID!, $update: InputZoneUpdate!) {\n    updateZone(id: $zoneId, zone: $update) {\n      ...GZone\n    }\n  }\n  ${ZoneFragment}\n`\n\nexport const UpdateZonePriorityMutation = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport const DestroyZoneMutation = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n","import React, { ErrorInfo } from 'react'\nimport {\n  DeveloperErrorBoundary,\n  ProductionErrorBoundary,\n} from 'react-error-guard'\n\nimport { reportRenderingError } from '../helpers/sentry'\n\ninterface IProps {\n  prod: boolean\n}\n\nexport const ErrorContainer: React.SFC<IProps> = ({\n  children,\n  prod = false,\n}) => {\n  if (prod) {\n    return (\n      <ProductionErrorBoundary\n        dispatchErrorReporting={(data: { error: Error; info: ErrorInfo }) => {\n          reportRenderingError(data.error, data.info)\n        }}\n      >\n        {children}\n      </ProductionErrorBoundary>\n    )\n  } else {\n    return <DeveloperErrorBoundary>{children}</DeveloperErrorBoundary>\n  }\n}\n","import React from 'react'\nimport { Route, Switch } from 'react-router'\n\nimport Pacman from '../atoms/Pacman'\nimport { ErrorPage } from '../pages/ErrorPage'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { LogRoute } from './LogRoute'\nimport { RedirectAfterLogin } from './RedirectAfterLogin'\nimport { RedirectAfterLogout } from './RedirectAfterLogout'\nimport { SecureRoute } from './SecureRoute'\n\nconst PasswordLoginRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordLoginRoute'),\n)\n\nconst PasswordChangeRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordChangeRoute'),\n)\n\nconst MainDashboardPage = React.lazy(() =>\n  import('../segments/main/pages/MainDashboardPage'),\n)\n\nconst OrderRoutes = React.lazy(() =>\n  import('../segments/order/routes/OrderRoutes'),\n)\n\nconst SettingsRoutes = React.lazy(() =>\n  import('../segments/settings/routes/SettingsRoutes'),\n)\n\nconst OverviewRoutes = React.lazy(() =>\n  import('../segments/overview/routes/OverviewRoutes'),\n)\n\nconst SupportPage = React.lazy(() =>\n  import('../segments/main/pages/SupportPage'),\n)\n\nexport const Routing = () => (\n  <React.Suspense fallback={<Pacman />}>\n    <LogRoute />\n    <RedirectAfterLogin />\n    <Switch>\n      <LazyRoute path=\"/login\" exact={true} component={PasswordLoginRoute} />\n      <LazyRoute\n        path=\"/recovery/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <LazyRoute\n        path=\"/register/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <SecureRoute path=\"/\" exact={true} component={MainDashboardPage} />\n      <SecureRoute path=\"/order\" component={OrderRoutes} />\n      <SecureRoute path=\"/settings\" component={SettingsRoutes} />\n      <SecureRoute path=\"/overview\" component={OverviewRoutes} />\n      <LazyRoute path=\"/support\" component={SupportPage} />\n      <Route path=\"/error\" component={ErrorPage} />\n      <Route path=\"/logout\" component={RedirectAfterLogout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </React.Suspense>\n)\n","import { Trans } from '@lingui/react'\nimport { Warning } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\n\nconst IconStyled = styled.div`\n  margin-top: 2rem;\n  color: #d39f40;\n  text-align: center;\n`\n\nexport const ErrorPage: React.SFC = props => (\n  <FullPageLayout\n    width={15}\n    pageTitle={i18n.t`Application error`}\n    useBackButton={true}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          We are sorry, but there is an internal error in the app. Our team was\n          notified and will fix this soon.\n        </Trans>\n        <IconStyled>\n          <Warning style={{ fontSize: '5rem' }} />\n        </IconStyled>\n      </h3>\n    </Card>\n  </FullPageLayout>\n)\n","import 'rc-slider/assets/index.css'\n\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors, Spacing } from '../styling'\nimport { WithRoot } from './WithRoot'\n\nconst SoundControlContainerStyled = styled.div`\n  position: relative;\n`\n\nconst SoundButtonStyled = styled(TouchButton)`\n  height: ${Spacing.ButtonHeight};\n  width: ${Spacing.ButtonHeight};\n  position: absolute;\n  right: 0;\n  top: 0;\n`\n\nexport class SoundControl extends React.Component {\n  state = { playPreview: false }\n  render() {\n    return (\n      <WithRoot\n        observe={true}\n        render={({ user }) => (\n          <SoundControlContainerStyled>\n            <SoundButtonStyled\n              color={user.soundEnabled ? Colors.green : Colors.red}\n              iconName={user.soundEnabled ? 'volume_up' : 'volume_off'}\n              iconSize={2}\n              onClick={() => {\n                user.controlSound(!user.soundEnabled)\n              }}\n            />\n          </SoundControlContainerStyled>\n        )}\n      />\n    )\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { WithRoot } from '../atoms/WithRoot'\nimport { GLogoutWidget } from '../graph/types'\nimport { i18n } from '../i18n'\nimport { Colors } from '../styling'\nimport { QueryLogoutWidget } from './LogoutWidget.graphql'\n\nconst LogoutWidgetStyled = styled.div`\n  margin-left: 1rem;\n  color: ${Colors.greyLight};\n  &:hover {\n    color: ${Colors.white};\n  }\n`\nconst LoggedUserNameStyled = styled.span`\n  color: ${Colors.greyLight};\n  text-decoration: none;\n  font-weight: lighter;\n  position: relative;\n  top: 0.6rem;\n  display: inline-block;\n  max-width: 10rem;\n  text-align: right;\n`\n\nconst IconStyled = styled.span`\n  padding: 0.5rem 0.5rem 0 0.5rem;\n  display: inline-block;\n  vertical-align: top;\n`\n\nexport const LogoutWidget: React.SFC = () => (\n  <WithRoot\n    render={({ auth }) => (\n      <QueryLogoutWidget\n        variables={{ id: auth.userId }}\n        renderLoading={() => null}\n        render={({ user }) => (\n          <LogoutWidgetStyled data-testid=\"logout-widget\">\n            <Link to=\"/logout\">\n              <LoggedUserNameStyled>\n                {getNameDisplay(user)}\n              </LoggedUserNameStyled>\n              <IconStyled>\n                <Icon iconName=\"exit_to_app\" />\n              </IconStyled>\n            </Link>\n          </LogoutWidgetStyled>\n        )}\n      />\n    )}\n  />\n)\n\nfunction getNameDisplay(user: GLogoutWidget.User) {\n  if (user) {\n    return `${user.firstName} ${user.lastName}`\n  } else {\n    return i18n.t`Not logged in`\n  }\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../graph/buildQuery'\nimport { GLogoutWidget } from '../graph/types'\n\nexport const QueryLogoutWidget = buildQuery<\n  GLogoutWidget.Query,\n  GLogoutWidget.Variables\n>(gql`\n  query GLogoutWidget($id: ID!) {\n    user(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n`)\n","import Color from 'color'\nimport React, { MouseEvent } from 'react'\nimport { Route } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { Colors, Radiuses, Spacing } from '../styling'\n\ninterface IHomeButtonProps {\n  iconColor?: Colors\n  color?: Colors\n  disabled?: boolean\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n  goBack?: boolean\n  backRoute?: string\n}\n\nconst applyAlpha = (alphaValue: number) => (props: IHomeButtonProps) =>\n  Color(props.color)\n    .alpha(alphaValue)\n    .string()\n\nconst HomeButtonStyled = styled.button`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 0 0 ${Radiuses.Button} 0 !important;\n  height: ${Spacing.ButtonHeight};\n  width: ${Spacing.ButtonHeight};\n  margin: 0;\n  padding: 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  font-size: 1rem;\n  transition-duration: 0.2s;\n\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nexport const HomeButton: React.SFC<IHomeButtonProps> = ({\n  color = Colors.greyMiddle,\n  iconColor = Colors.white,\n  goBack = false,\n  backRoute,\n  ...props\n}) => {\n  if (goBack) {\n    return (\n      <Route>\n        {({ history }) => (\n          <HomeButtonStyled\n            color={color}\n            onClick={() => {\n              if (backRoute) {\n                history.push(backRoute)\n              } else {\n                history.goBack()\n              }\n            }}\n            {...props}\n          >\n            <Icon iconName=\"chevron_left\" color={iconColor} fontSize={2.2} />\n          </HomeButtonStyled>\n        )}\n      </Route>\n    )\n  }\n  return (\n    <Link to=\"/\">\n      <HomeButtonStyled color={color} {...props}>\n        <Icon iconName=\"home\" color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    </Link>\n  )\n}\n","import React from 'react'\nimport { Route } from 'react-router'\n\nimport { logRouting } from '../helpers/logger'\n\ninterface IProps {}\n\nexport const LogRoute: React.SFC<IProps> = props => (\n  <Route>\n    {({ location }) => {\n      logRouting('at %s', location.pathname)\n      return null\n    }}\n  </Route>\n)\n","import debug from 'debug'\nimport { when } from 'mobx'\nimport React from 'react'\nimport { Route } from 'react-router'\n\nimport { WithRoot } from '../atoms/WithRoot'\n\nconst log = debug('routing')\n\nexport const RedirectAfterLogin = () => (\n  <Route\n    children={({ location, history }) => (\n      <WithRoot\n        render={root => {\n          if (!root.auth.isAuthenticatedUser) {\n            const route = (location.state && location.state.origin) || '/'\n            const waitForAuthentication = () => root.auth.isAuthenticated\n            const redirectAfterLogin = () => {\n              history.replace(route)\n            }\n            when(waitForAuthentication, redirectAfterLogin)\n            log('will redirect to %s when auth', route)\n          }\n          return null\n        }}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { Redirect } from 'react-router'\n\nimport { WithRoot } from '../atoms/WithRoot'\nimport { RedirectToLogin } from './RedirectToLogin'\n\nexport const RedirectAfterLogout = () => (\n  <WithRoot\n    observe={false}\n    render={root => {\n      if (root.auth.isAuthenticated) {\n        root.auth.invalidate()\n        return <RedirectToLogin useOrigin={false} />\n      }\n      return <Redirect to=\"/\" />\n    }}\n  />\n)\n","import React from 'react'\nimport { Provider as GoodByeProvider } from 'react-goodbye'\nimport { BrowserRouter } from 'react-router-dom'\n\ninterface IProps {}\n\nexport const Router: React.SFC<IProps> = ({ children }) => (\n  <GoodByeProvider>\n    {({ handleGetUserConfirm }) => (\n      <BrowserRouter getUserConfirmation={handleGetUserConfirm}>\n        {children}\n      </BrowserRouter>\n    )}\n  </GoodByeProvider>\n)\n","import { createMuiTheme, MuiThemeProvider } from '@material-ui/core'\nimport React from 'react'\n\ninterface IProps {}\n\nexport const ThemeProvider: React.FC<IProps> = ({ children }) => {\n  const theme = createMuiTheme({\n    typography: {\n      useNextVariants: true,\n    },\n  })\n\n  return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>\n}\n","import { Button, Snackbar } from '@material-ui/core'\nimport { SnackbarProps } from '@material-ui/core/Snackbar'\nimport { serviceWorker } from '@speedlo/tools'\nimport { formatDistanceStrict } from 'date-fns'\nimport { useObservable, useObserver } from 'mobx-react-lite'\nimport React, { useCallback, useRef, useState } from 'react'\n\nimport { logMain } from '../helpers/logger'\nimport { useEffectOnce } from '../hooks/useEffectOnce'\nimport { HOUR, MINUTE, SECOND, useTimer } from '../hooks/useTimer'\nimport { i18n } from '../i18n'\n\nexport interface IProps {\n  onRestart?(): void\n  autoUpdateDelay?: number\n  postponeTimeout?: number\n  updateCheckInterval?: number\n  getNow?(): number\n  children: ReactNode\n}\n\nexport const UpdateHandler: React.FC<IProps> = ({\n  onRestart = () => window.location.reload(),\n  autoUpdateDelay = 20 * SECOND,\n  postponeTimeout = 2 * MINUTE,\n  updateCheckInterval = process.env.REACT_APP_STAGE === 'prod'\n    ? 1 * HOUR\n    : 5 * MINUTE,\n  getNow = Date.now,\n  children,\n}) => {\n  const updateWorker = useRef<ServiceWorker | null>(null)\n\n  const state = useObservable({ updatePending: false, postponedAt: getNow() })\n\n  const onMessage = useCallback((event: MessageEvent) => {\n    if (event.data === 'update-applied') {\n      logMain('restarting to apply update...')\n      onRestart()\n    }\n  }, [])\n\n  useEffectOnce(() => {\n    let checkIntervalRef\n    const init = serviceWorker.register({\n      onInit: reg => {\n        checkIntervalRef = setInterval(() => {\n          logMain('checking for updates...')\n          reg.update()\n        }, updateCheckInterval)\n        logMain('update handler initialized')\n      },\n      onUpdate: sw => {\n        updateWorker.current = sw\n        state.updatePending = true\n        logMain('new update is available')\n        window.navigator.serviceWorker.addEventListener('message', onMessage)\n      },\n    })\n    // service worker is normally using load event, but since this\n    // done after the load, it has to be triggered manually\n    init()\n    return () => {\n      window.navigator.serviceWorker.removeEventListener('message', onMessage)\n      if (checkIntervalRef) {\n        clearInterval(checkIntervalRef)\n      }\n    }\n  })\n\n  const onCancel = useCallback(() => {\n    logMain('user postponed update')\n    state.updatePending = false\n    setTimeout(() => {\n      logMain('reminding update to user again')\n      state.updatePending = true\n    }, postponeTimeout)\n  }, [])\n\n  const onConfirm = useCallback(() => {\n    state.updatePending = false\n    if (updateWorker.current) {\n      logMain('user confirmed update')\n      updateWorker.current.postMessage('apply-update')\n    }\n  }, [])\n\n  return useObserver(() => (\n    <>\n      {state.updatePending ? (\n        <UpdateSnack\n          autoHideDuration={autoUpdateDelay}\n          onCancel={onCancel}\n          onConfirm={onConfirm}\n          getNow={getNow}\n        />\n      ) : null}\n      {children}\n    </>\n  ))\n}\n\ninterface IUpdateSnackProps extends Omit<SnackbarProps, 'open'> {\n  autoHideDuration: number\n  onConfirm(): void\n  onCancel(): void\n  getNow(): number\n}\n\nfunction UpdateSnack(props: IUpdateSnackProps) {\n  const { onConfirm, onCancel, getNow, ...rest } = props\n  const [endTime] = useState(() => getNow() + props.autoHideDuration)\n  const now = useTimer({ interval: SECOND, enabled: true, getNow })\n  const remainingSeconds = formatDistanceStrict(endTime, now)\n  return (\n    <Snackbar\n      open={true}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center',\n      }}\n      message={\n        <span data-testid=\"message\">{i18n.t`Application will be restarted in ${remainingSeconds} to apply available update.`}</span>\n      }\n      disableWindowBlurListener={true}\n      action={[\n        <Button\n          key=\"later\"\n          color=\"secondary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"postpone-button\"\n          onClick={onCancel}\n        >\n          {i18n.t`Postpone update`}\n        </Button>,\n        <Button\n          key=\"confirm\"\n          color=\"primary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"confirm-button\"\n          onClick={onConfirm}\n        >\n          {i18n.t`Restart now`}\n        </Button>,\n      ]}\n      onClose={onCancel}\n      {...rest}\n    />\n  )\n}\n","import { Trans } from '@lingui/react'\nimport { Button, colors, Snackbar, SnackbarContent } from '@material-ui/core'\nimport { NormalizedCacheObject } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { css } from 'emotion'\nimport { Observer } from 'mobx-react'\nimport React, { Children, createContext, useContext, useState } from 'react'\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloProvider as ApolloProviderHooked } from 'react-apollo-hooks'\n\nimport { RootContext } from '../context/RootContext'\nimport { createApolloClient } from '../graph/createClient'\nimport { persistModel } from '../helpers/persistModel'\nimport { useInitializer } from '../hooks/useInitializer'\nimport { AuthModel } from '../models/AuthModel'\nimport { RootModel, TRootModel } from '../models/RootModel'\nimport Pacman from './Pacman'\n\nexport const ApolloContext = createContext<RootApolloClient | undefined>(\n  undefined,\n)\n\nconst errorSnack = css`\n  background-color: ${colors.red[300]};\n`\n\nexport const RootProvider: React.FC = ({ children }) => {\n  const [root, setRoot] = useState<TRootModel | undefined>(undefined)\n  const [hasNetworkError, setNetworkError] = useState(false)\n\n  useInitializer(async () => {\n    const auth = AuthModel.create({})\n    const apolloClient = createApolloClient(auth)\n\n    const rootModel = RootModel.create(\n      { auth },\n      {\n        fetch: window.fetch,\n        apolloClient,\n      },\n    )\n\n    await Promise.all(rootModel.persistedModels.map(persistModel))\n\n    try {\n      await rootModel.user.initUser()\n    } catch (err) {\n      if (err.networkError) {\n        setNetworkError(true)\n      }\n    }\n\n    setRoot(rootModel)\n  })\n\n  if (hasNetworkError) {\n    return (\n      <Snackbar\n        anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\n        autoHideDuration={Infinity}\n        open={true}\n      >\n        <SnackbarContent\n          message={\n            <Trans>\n              Communication with server has failed. Please retry the operation\n              in a moment again.\n            </Trans>\n          }\n          className={errorSnack}\n          action={[\n            <Button\n              key=\"restart\"\n              onClick={() => location.reload()}\n              color=\"secondary\"\n              size=\"small\"\n              role=\"button\"\n            >\n              <Trans>Restart application</Trans>\n            </Button>,\n          ]}\n        />\n      </Snackbar>\n    )\n  }\n\n  return root ? (\n    <ApolloContext.Provider value={root.client}>\n      <ApolloProvider client={root.client}>\n        <ApolloProviderHooked client={root.client}>\n          <RootContext.Provider value={root}>\n            {Children.only(children)}\n          </RootContext.Provider>\n        </ApolloProviderHooked>\n      </ApolloProvider>\n    </ApolloContext.Provider>\n  ) : (\n    <Pacman />\n  )\n}\n\nexport const useRoot = () => {\n  const root = useContext(RootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\nexport const useApolloClient = () => {\n  const client = useContext(ApolloContext)\n  if (!client) {\n    throw new Error('ApolloContext.Provider missing in the tree')\n  }\n  return client\n}\n\ninterface IWithRootProps {\n  children(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.FC<IWithRootProps> = ({\n  children,\n  observe = true,\n}) => {\n  const root = useRoot()\n  return observe === true ? (\n    <Observer>{() => children(root)}</Observer>\n  ) : (\n    children(root)\n  )\n}\n\nexport type RootApolloClient = ApolloClient<NormalizedCacheObject>\n\nexport interface IRootEnvironment {\n  fetch: TFetch\n  apolloClient: RootApolloClient\n}\n","import React from 'react'\n\nimport { TRootModel } from '../models/RootModel'\nimport { WithRoot as RealWithRoot } from './RootProvider'\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.SFC<IProps> = ({ render, observe }) => (\n  <RealWithRoot children={render} observe={observe} />\n)\n","export { AddressFragment } from './AddressFragment.graphql'\nexport { CompanyBranchFragment } from './CompanyBranchFragment.graphql'\nexport { CustomerFragment } from './CustomerFragment.graphql'\nexport { EmailFragment } from './EmailFragment.graphql'\nexport { GeoPointFragment } from './GeoPointFragment.graphql'\nexport { PhoneFragment } from './PhoneFragment.graphql'\nexport { PriceFragment } from './PriceFragment.graphql'\n","import { GraphQLError } from 'graphql'\nimport Raven from 'raven-js'\nimport { ErrorInfo } from 'react'\nimport { VError } from 'verror'\n\nimport { appConfig } from '../config'\nimport { logSentry } from './logger'\n\nexport const installSentry = (cb: () => void) => {\n  const { sentryDSN } = appConfig\n  if (sentryDSN) {\n    logSentry('enabled with DSN %s', sentryDSN)\n    Raven.config(sentryDSN, {\n      environment: process.env.REACT_APP_STAGE,\n    }).install()\n    Raven.context(cb)\n  } else {\n    cb()\n  }\n}\n\nexport const identifyUser = (userId: string | null) => {\n  Raven.setUserContext({\n    userId,\n  })\n}\n\nexport const reportRenderingError = (error: Error, info: ErrorInfo) => {\n  if (Raven.isSetup()) {\n    Raven.captureException(error, {\n      extra: info,\n    })\n  }\n}\n\nexport const reportFailingQuery = (\n  errors: ReadonlyArray<GraphQLError>,\n  data: object,\n) => {\n  errors.forEach(err => {\n    Raven.captureMessage(err.message, { extra: err })\n  })\n  Raven.captureException(new Error('Failed running a query'), { extra: data })\n}\n\nexport const reportError = (error: Error) => {\n  let extra = {}\n  if (error instanceof VError) {\n    extra = {\n      cause: VError.cause(error),\n      ...VError.info(error),\n    }\n  }\n  Raven.captureException(error, { extra })\n  return error\n}\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nimport { Colors } from '../styling'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.SFC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n  >\n    <Spinner\n      name=\"pacman\"\n      style={noMargin ? {} : { marginTop: '45vh', color: Colors.orange }}\n    />\n  </div>\n)\n\nexport default Pacman\n"],"sourceRoot":""}