{"version":3,"sources":["../node_modules/moment/locale lazy /^/.*$/ groupOptions: {} namespace object","../node_modules/numeral/locales lazy /^/.*$/ groupOptions: {} namespace object","../ /^/.*/messages/.po$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","molecules/TouchButton.tsx","atoms/Sizer.tsx","segments/dashboard/dashboard.routes.ts","atoms/ConnectionWarning.tsx","routes/LogRoute.tsx","routes/RedirectAfterLogin.tsx","routes/RedirectAfterLogout.tsx","routes/Routing.tsx","pages/ErrorPage.tsx","pages/ServiceUnreachablePage.tsx","app/DefaultErrorHandler.tsx","app/Router.tsx","app/SnackProvider.tsx","app/UpdateHandler.tsx","app/UserBootstrap.tsx","app/AppMain.tsx","app/AppProvider.tsx","app/GlobalStyles.tsx","index.tsx","atoms/Icon.tsx","helpers/gps.ts","styling.ts","atoms/PageTitle.tsx","segments/stock/models/StockTransferItem.ts","atoms/Card.tsx","hooks/useSnackBar.ts","molecules/FullPageLayout.tsx","pages/NotFoundPage.tsx","routes/RedirectToLogin.tsx","models/BaseModel.ts","helpers/offline.ts","segments/businesshours/businesshours.types.ts","helpers/formats.ts","atoms/SizerButton.tsx","hooks/useLoadingCache.ts","atoms/MarginBox.tsx","segments/settings/settings.routes.ts","atoms/PageLayoutGridItem.tsx","atoms/PageLayoutGrid.tsx","atoms/SoundControl.tsx","molecules/LiveClock.tsx","organisms/LogoutWidget.tsx","molecules/HomeButton.tsx","molecules/PageLayoutResponsive.tsx","segments/overview/overview.routes.ts","segments/order/order.routes.ts","segments/stock/stock.routes.ts","helpers/filter.ts","hooks/useIntervalSound.ts","segments/kitchen/kitchen.routes.ts","locale/moment.ts","i18n.tsx","helpers/logger.ts","app/Responsive.tsx","graph/createClient.ts","locale/numeral.ts","context/RootContext.ts","helpers/persistModel.ts","segments/login/models/PasswordLoginModel.ts","segments/login/models/LoginProviderModel.ts","models/AuthModel.ts","models/ConfigModel.ts","models/UserModel.ts","helpers/faker.ts","segments/createorder/models/CreateOrderModel.ts","models/MapModel.ts","segments/order/models/OrderMapModel.ts","segments/order/models/OrderModel.ts","segments/overview/models/StatisticsModel.ts","segments/businesshours/models/BusinessHoursModel.ts","components/FilterInput/FilterInputModel.ts","segments/menu/models/MenuModel.ts","segments/settings/models/SettingsModel.ts","segments/stock/models/StockTransferModel.ts","segments/stock/models/StockModel.ts","segments/zones/models/ZoneMapModel.ts","segments/zones/models/ZoneModel.ts","models/RootModel.ts","atoms/RootProvider.tsx","atoms/WithRoot.tsx","assets/connectionWarning.mp3","segments/order/models/OrderListModel.ts","assets/loader.gif","assets/bg_antracit.jpg","config.ts","helpers/ramda.ts","enableDebug.ts","graph/generated.ts","segments/login/login.routes.ts","routes/SecureRoute.tsx","atoms/PageLoader.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","applyAlpha","alphaValue","props","applyAlphaToColor","color","StyledTouchButton","styled","button","Spacing","ButtonHeight","DefaultSizeUnit","width","height","Radiuses","Button","mediaDesktop","mediaMobile","ButtonLabelStyled","div","ButtonLabelNextToIconStyled","TouchButton","React","forwardRef","forwardedRef","children","icon","iconColor","Colors","white","iconSize","greyMiddle","textNextToIcon","badge","text","type","ref","fontSize","widthProperty","widthUnit","undefined","heightProperty","heightUnit","StyledSizer","Sizer","margin","className","wrap","ROUTE_MAIN","ROUTE_SUPPORT","MessageStyled","red","ConnectionWarning","observer","audio","useIntervalSound","soundUrl","connectionWarningSound","intervalSec","shouldPlay","isNetworkOffline","Dialog","open","disableBackdropClick","disableEscapeKeyDown","WarningTwoTone","LogRoute","log","debug","RedirectAfterLogin","location","history","WithRoot","render","root","auth","isAuthenticatedUser","route","state","origin","when","isAuthenticated","replace","RedirectAfterLogout","useRoot","user","order","createOrder","settings","zone","invalidate","RedirectToLogin","useOrigin","to","PasswordLoginRoute","lazy","PasswordChangeRoute","PasswordResetRoute","MainDashboardPage","OrderRouting","KitchenRouting","SettingsRouting","OverviewRouting","StockRouting","SupportPage","Routing","Suspense","fallback","PageLoader","SecureRoute","path","exact","component","ROUTE_AUTH_LOGIN","ROUTE_AUTH_RESET_PASSWORD","ROUTE_AUTH_RECOVERY","ROUTE_AUTH_REGISTER","ROUTE_OVERVIEW_DASHBOARD","ROUTE_STOCK","ROUTE_ORDER_OVERVIEW","ROUTE_KITCHEN","ROUTE_SETTINGS","ROUTE_AUTH_LOGOUT","NotFoundPage","IconStyled","orange","Center","ErrorPage","onFeedback","FullPageLayout","pageTitle","i18n","hideLogoutWidget","showHomeButton","Card","Warning","style","onClick","ContactSupport","window","reload","Autorenew","ServiceUnreachablePage","onRetry","useBackButton","href","OfflineBolt","Cached","makeError","message","DefaultErrorHandler","useSnackBar","enqueueWarning","enqueueError","useState","errorKind","setErrorKind","useCallback","onUnhandledError","error","isChunkError","Sentry","withScope","scope","setLevel","Severity","Debug","captureException","flushSentry","isApolloError","isNetworkUnreachableError","onNetworkError","isUnreachable","onOperationError","logError","operationName","onUserErrors","messages","forEach","onError","showFeedback","showReportDialog","labelClose","title","Router","handleGetUserConfirm","getUserConfirmation","successStyle","css","green","FontSizes","InfoMessageFontSize","snackStyles","variantSuccess","variantInfo","variantError","variantWarning","SnackProvider","maxSnack","classes","anchorOrigin","horizontal","vertical","UpdateHandler","onRestart","autoUpdateDelay","SECOND","postponeTimeout","MINUTE","updateCheckInterval","HOUR","serviceWorker","navigator","registrationWorkerRef","useRef","updateWorkerRef","useObservable","updatePending","applyingUpdate","useInterval","current","logUpdate","update","catch","useEffect","onMessage","event","data","addEventListener","removeEventListener","userAgent","indexOf","updateWorker","unregister","register","onInit","reg","onUpdate","sw","init","onCancel","setTimeout","onConfirm","postMessage","useObserver","UpdateSnack","autoHideDuration","rest","now","useTimer","interval","enabled","addMilliseconds","endTime","remainingSeconds","formatDistanceStrict","Snackbar","data-testid","disableWindowBlurListener","action","key","size","role","UserBootstrap","useQUserBootstrap","userId","skip","loading","intercept","change","isLoaded","finishBootstrap","configureScope","setUser","username","setExtra","language","setLanguage","rawCode","applyUserData","applyAccess","access","applyPermissions","permissions","firstName","lastName","setExtras","roles","RM","prop","branches","AppMain","enqueueInfo","useReleaseCabinet","isReady","AppProvider","useSentryInit","appConfig","sentryDSN","RootProvider","GlobalStyles","createGlobalStyle","backgroundImage","rootElement","document","getElementById","StyledIcon","span","fontSizeUnit","Icon","memo","iconName","iconNode","createElement","gpsToLatLng","gps","google","maps","LatLng","Number","latitude","longitude","gpsToLatLngLit","lat","lng","latLngToGps","latLng","generatePolygon","center","metersRadius","pointsCount","Array","fill","_","idx","degree","computeDestinationPoint","curry","Color","alpha","string","MarginAroundFormComponents","Small","Middle","LayoutGridCellMargin","DashboardButtonHeight","DefaultInputWidth","DefaultLabelWidth","ButtonColumnWidthPx","PageHeaderHeight","OrderFlowMenuButtonWidth","CompactCard","CompactCardBig","TitleStyled","h1","greyLight","observableTitles","observable","array","autorun","lastTitle","from","pop","pageTitleSuffix","PageTitle","push","this","prevProps","findIndex","equals","splice","remove","Component","Route","Display","join","startsOrEndsWithSeparator","DEFAULT_IMPORT","DEFAULT_RAW_QUANTITY","DEFAULT_QUANTITY","DEFAULT_MAX","MAX_SAFE_INTEGER","MIN_TRANSFER_QUANTITY","TransferItem","types","model","identifier","import","optional","boolean","rawQuantity","max","number","views","self","length","parsedQuantity","isNaN","quantity","match","amountUnderflow","amountOverflow","actions","setRawQuantity","trimLeft","reset","getBackgroundColor","getTextColor","getPadding","getMinHeight","applyStretchToParentStyle","padding","minHeight","lighten","textColor","black","stretchToParent","displayName","successVariant","variant","errorVariant","warningVariant","infoVariant","enqueueSnackbar","useSnackbarOrig","enqueueSuccess","errorMessage","gridColumn","pathname","BaseModel","getPath","getRoot","apolloClient","isOnline","box","onLine","set","get","whenGoingOnline","cb","observe","oldValue","newValue","ESpecificHourMode","currentLocale","csLocale","formatLocale","formatWithOptions","locale","fullDateFormat","formatDateISO","format","formatTime","formatDateTime","priceFormat","formatPrice","price","numeral","formatTimeWithoutTodayDate","time","isSameDay","Date","formatAddress","address","street","houseNumber","city","formatFullName","trim","SizerButton","useLoadingCache","shouldSkip","cached","getNext","next","MarginBox","top","bottom","left","right","ROUTE_SETTINGS_MENU","ROUTE_SETTINGS_ZONES","ROUTE_SETTINGS_USER","ROUTE_SETTINGS_HOURS","ROUTE_SETTINGS_PREFS","PageLayoutGridItem","gridColumnSpan","toString","gridRow","gridRowSpan","gridColumnInMobile","gridColumnSpanInMobile","gridRowInMobile","gridRowSpanInMobile","getGridTemplatesRows","isForIconDashboard","getGridGap","getDashboardButtonHeight","PageLayoutGrid","SoundControl","soundEnabled","VolumeUp","VolumeOff","controlSound","LiveClock","DF","StyledLogoutWidget","LogoutWidget","useQLogoutWidget","fetchPolicy","refetch","useReaction","getUser","ExitToApp","HomeButtonStyled","HomeButton","goBack","backRoute","useRouterContext","ChevronLeft","Home","StyledPageLayoutResponsive","isScrolledDown","topContent","mediaSmallMobile","PageLayoutResponsive","showSoundControl","y","useWindowScroll","redirect","ROUTE_OVERVIEW_CLOSURE","ROUTE_OVERVIEW_CLOSURE_HISTORY","ROUTE_OVERVIEW_STATS_SALES","ROUTE_OVERVIEW_STATS_ORDERS","ROUTE_ORDER_CREATE","ROUTE_ORDER_MAP","ROUTE_STOCK_OVERVIEW","ROUTE_STOCK_DEPOSIT","ROUTE_STOCK_TRANSFER","ROUTE_STOCK_STATS","isPartialMatch","searchValue","T","search","toLocaleLowerCase","propValue","includes","useAudio","src","autoPlay","loop","controls","config","source","useAsObservableSource","isPlaying","canPlay","playIfYouCan","volume","play","useAutorun","pause","seek","ROUTE_KITCHEN_COMPLETION","changeMomentLocale","lang","a","moment","updateLocale","setupI18n","I18nManager","forceUpdate","useReactionNow","supportedLanguages","logLang","all","loadCatalog","changeNumeralLocale","activate","setupLanguage","languages","LocaleResolver","DETECTORS","NavigatorDetector","TRANSFORMERS","LanguageOnlyTransformer","getLocales","find","loc","fallbackLanguage","detectLanguage","success","i","Children","only","catalog","load","useColors","logAuth","logPersistence","console","mobileBreakpoint","mobileSmallBreakpoint","desktopBreakpoint","Desktop","minWidth","Mobile","maxWidth","useResponsive","isMobile","isSmallMobile","isDesktop","isTablet","setState","useLayoutEffect","innerWidth","createApolloClient","createDefaultApolloClient","createAuthLink","enableTokenCache","getToken","token","onInvalidToken","createLogLink","process","createRetryLink","createOfflineLink","createNetworkLink","endpoint","useUploads","disableBatching","context","noBatch","numberRx","RootContext","createContext","persistenceKey","persistModel","modelName","getType","name","stateKey","writeState","snapshot","localforage","setItem","getItem","applySnapshot","getSnapshot","removeItem","onSnapshot","getLoginUrl","password","PasswordLoginModel","named","volatile","errorCode","Boolean","setFailure","setSuccess","getParent","authenticate","requestToken","url","fetch","headers","Accept","response","json","payload","status","String","LoginProviderModel","passwordLogin","AuthModel","maybeNull","provider","client","cache","ConfigModel","orderListPollIntervalSec","orderListSoundIntervalSec","UserModel","soundVolume","soundIgnore","brands","canCancelOrders","canCreateOrder","R","findBranchById","branchId","idPropEq","filterBranches","predicate","filter","canQuery","queryName","queries","has","toLowerCase","canMutate","mutationName","mutations","uniqBy","makeSet","fields","Set","compose","toLower","subscriptions","ignore","setSoundVolume","faker","fakerCZ","CreateOrderModel","maybe","getDefaultProps","assign","propEq","defaultBranch","values","deliveryType","DeliveryTypeEnum","Messenger","deliverAt","isoDate","startOfMinute","deliveryAddress","fakeAddress","isDelivery","hasAddress","clearGps","currentBranch","paymentTypeEnum","PaymentTypeEnum","Cash","paymentGateEnum","PaymentGateEnum","phone","call","phonePrefix","prefix","country","formValues","emails","email","phones","vamCustomer","isFound","lastOrder","defaults","note","fakeValues","orderId","deliverAtIso","callEventId","eventId","customer","paymentType","paymentGate","resetOrder","resetModel","setOrder","useLocation","clearLocation","setMinimalPrice","minimalPrice","selectBranch","userIsCalling","setDeliveryMinutes","minutes","deliveryMinutes","setPaymentValues","updateFormValues","touched","pick","updateFromVam","updateFormWithFakeValues","internet","phoneNumberFormat","lorem","sentence","slice","resolver","makeResolver","selectSidedishesForRecipe","recipeId","sidedishMode","sidedishRootId","selectSidedishesForItem","itemId","sidedishSelectionConfirmed","sidedishes","isConfirmed","sidedishSelectionCancel","paymentMethod","notDeliveryLocation","sidedishSelection","GPSCzechia","MapModel","zoom","mapRef","setMapRef","updateZoom","getZoom","updatePosition","getCenter","panTo","OrderMapModel","activeDriverId","activateDriver","driverId","position","OrderModel","list","OrderListModel","clearBranchFilter","StatisticsModel","drivers","closureBranch","stockBrandId","cashiers","cashboxes","dateTimeFrom","startOfDay","dateTimeTo","endOfDay","stockSearchInput","branchesId","clear","updateFilter","setBranchFilter","setDriversFilter","setStockBrand","brandId","setClosureBranch","branch","setStockFilter","setCashierFilter","setCashboxFilter","setTodayOrdersFilter","branchesFilter","BusinessHoursModel","specificMode","enumeration","TIMESPAN","changeSpecificMode","mode","FilterInputModel","value","getPredicate","exactMatch","partialMatch","partialMatchPred","predicates","propSatisfies","cond","getCodeAndNamePredicate","setValue","MenuModel","categoryFilterId","defaultLanguage","currentLanguage","setCategoryFilter","categoryId","SettingsModel","selectedBranchId","businessHours","menu","useBranch","StockTransferModel","transferItems","importMode","targetBranchId","targetId","shouldNotImportSome","isImportingItem","item","getItemRawQuantity","getItemTransferQuantity","getItemLimit","isItemQuantityValid","isQuantityValid","isImportMode","setTargetId","initItems","items","clearItems","put","toggleImportAll","isImportingAll","toggleImportItem","setQuantity","clearTransferState","toggleImportMode","StockModel","transfer","ZoneMapModel","ZoneModel","zoneTypes","ZoneTypeEnum","Area","Return","brand","F","pathSatisfies","setBrandFilter","brandBranches","head","setZoneTypes","clearBrandFilter","RootModel","statistics","stock","setClient","isInit","setInit","create","newClient","useAsyncEffect","persistedModels","Provider","useContext","collapsedCategories","OrderStateCategoryEnum","Finished","extend","detailOpen","isOrderDetailOpen","isCategoryCollapsed","categoryCode","toggleOrderDetail","delete","add","toggleCategoryCollapse","category","index","focusOrderDetail","setImmediate","scroller","scrollTo","smooth","containerId","absolute","offset","observerOrderDetail","bind","googleMapsApi","localStorage","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","WeekDayEnum","OrderStateCategoryTargetEnum","LanguageEnum","MobilePlatformEnum","WareUnitEnum","AvailabilityTypeEnum","AllergenEnum","WarePriceTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","DeliveryStateEnum","OrderStateEnum","OrderBillingTypeEnum","OrderRecipeStateEnum","OrderOnlineStateEnum","OrderOriginEnum","SectorTypeEnum","ShiftUserStateEnum","OrderOriginCategoryEnum","WareCategoryTypeEnum","SettingTypeEnum","WareRequirementEnum","SubscriptionActionType","FGeoPointFragmentDoc","gql","FCompanyBranchFragmentDoc","FOrderStateCategoryFragmentDoc","FPriceFragmentDoc","FPriceWithCurrencyFragmentDoc","FRegularBusinessHourFragmentDoc","FSpecificBusinessHourFragmentDoc","FWeekdayFragmentDoc","FPaymentMethodFragmentDoc","FBranchPaymentMethodsFragmentDoc","FCreateOrderItemFragmentDoc","FCreateOrderFragmentDoc","FCreateOrderRecipeSidedishesFragmentDoc","FOrderMenuRecipeFragmentDoc","FOrderMenuCategoryFragmentDoc","FKitchenRecipeFragmentDoc","FKitchenOrderStateFragmentDoc","FKitchenOrderRecipeFragmentDoc","FKitchenOrderBaseFragmentDoc","FKitchenCompletionOrderFragmentDoc","FAddressFragmentDoc","FEmailFragmentDoc","FPhoneFragmentDoc","FCustomerFragmentDoc","FKitchenOrderFragmentDoc","FKitchenSectorStateFragmentDoc","FKitchenSectorRecipeFragmentDoc","FMenuCategoryFragmentDoc","FMenuCategoryLocalizedFragmentDoc","FMenuCategoryInFormFragmentDoc","FMenuAssocRecipeFragmentDoc","FMenuRecipeFragmentDoc","FMenuRecipeLocalizedFragmentDoc","FMenuCategoryInListFragmentDoc","FMenuRecipeInFormFragmentDoc","FMenuRecipePricingFragmentDoc","FMenuRecipeInListFragmentDoc","FMenuAllergenFragmentDoc","FMenuWareUnitFragmentDoc","FMenuStockItemFragmentDoc","FOrderDetailWareFragmentDoc","FUserNameFragmentDoc","FDriverFragmentDoc","FOrderDriverFragmentDoc","FOrderMapDriverFragmentDoc","FOrderMapDeviceFragmentDoc","FOrderMapDeliveryFragmentDoc","FOrderMapOrderFragmentDoc","FOrderPaymentMethodsFragmentDoc","FOrderTickerFragmentDoc","FOrderTimingFragmentDoc","FOrderTotalsFragmentDoc","FStatsCashboxFragmentDoc","FStatsCashierFragmentDoc","FZoneFragmentDoc","FZonePriceRangeFragmentDoc","FZoneInFormFragmentDoc","FZoneInListFragmentDoc","MOrderStateDocument","useMOrderState","baseOptions","Hooks","MSetPriorityOrderDocument","useMSetPriorityOrder","QLogoutWidgetDocument","variables","MBusinessHoursSubmitDocument","useMBusinessHoursSubmit","MSpecificBusinessHourCreateDocument","useMSpecificBusinessHourCreate","MSpecificBusinessHourDeleteDocument","useMSpecificBusinessHourDelete","QRegularBusinessHoursDocument","useQRegularBusinessHours","QSpecificBusinessHoursDocument","useQSpecificBusinessHours","MAddOrderPromoDocument","useMAddOrderPromo","MAddToSectorDocument","useMAddToSector","MCancelOrderDocument","useMCancelOrder","MCreateOrderAcceptDocument","useMCreateOrderAccept","MCreateOrderAddRecipeDocument","useMCreateOrderAddRecipe","MCreateOrderNewDocument","useMCreateOrderNew","MCreateOrderRemoveItemDocument","useMCreateOrderRemoveItem","MCreateOrderUpdateDocument","useMCreateOrderUpdate","MCreateOrderUpdateItemDocument","useMCreateOrderUpdateItem","MRemoveOrderPromoDocument","useMRemoveOrderPromo","QBranchPaymentMethodsDocument","useQBranchPaymentMethods","QCreateOrderItemDocument","QCreateOrderRecipeDocument","QOrderCartDocument","useQOrderCart","QOrderFormDeliverAtDefaultsDocument","useQOrderFormDeliverAtDefaults","QOrderMenuDocument","useQOrderMenu","QValidateLocationDocument","MKitchenOrderHandleDocument","useMKitchenOrderHandle","MKitchenOrderRecipeHandleDocument","useMKitchenOrderRecipeHandle","MKitchenSectorHandleDocument","useMKitchenSectorHandle","MKitchenSectorRecipeHandleDocument","useMKitchenSectorRecipeHandle","QKitchenCompletionOrderListDocument","useQKitchenCompletionOrderList","QKitchenOrderListDocument","useQKitchenOrderList","QKitchenSectorListDocument","useQKitchenSectorList","SKitchenCompletionOrderListDocument","useSKitchenCompletionOrderList","SKitchenOrderListDocument","useSKitchenOrderList","SKitchenSectorListDocument","useSKitchenSectorList","MPasswordChangeDocument","useMPasswordChange","QUserBootstrapDocument","MMenuCategoryCreateDocument","useMMenuCategoryCreate","MMenuCategoryDeleteDocument","useMMenuCategoryDelete","MMenuCategorySortDocument","useMMenuCategorySort","MMenuCategoryUpdateDocument","useMMenuCategoryUpdate","MMenuCategoryVisibilityDocument","useMMenuCategoryVisibility","QMenuCategoryFilterDocument","useQMenuCategoryFilter","QMenuCategoryFormDocument","useExecutableQMenuCategoryForm","options","QMenuCategoryFormTransDocument","useExecutableQMenuCategoryFormTrans","QMenuCategoryListDocument","useQMenuCategoryList","QMenuCategoryOriginsDocument","useQMenuCategoryOrigins","QMenuAllergensDocument","useQMenuAllergens","QMenuGuideDownloadDocument","useQMenuGuideDownload","QMenuVatsDocument","useQMenuVats","QMenuWareUnitsDocument","useQMenuWareUnits","MMenuRecipeCreateDocument","useMMenuRecipeCreate","MMenuRecipeDeleteDocument","useMMenuRecipeDelete","MMenuRecipeUpdateDocument","useMMenuRecipeUpdate","MMenuRecipeVisibilityDocument","useMMenuRecipeVisibility","QMenuRecipeDefaultsDocument","useExecutableQMenuRecipeDefaults","QMenuRecipeFormDocument","useExecutableQMenuRecipeForm","QMenuRecipeFormAssocDocument","useQMenuRecipeFormAssoc","QMenuRecipeFormTransDocument","useExecutableQMenuRecipeFormTrans","QMenuRecipeListDocument","useQMenuRecipeList","MMenuStockCreateDocument","useMMenuStockCreate","MMenuStockDeleteDocument","useMMenuStockDelete","MMenuStockQuantityDocument","useMMenuStockQuantity","MMenuStockUpdateDocument","useMMenuStockUpdate","QMenuStockDefaultsDocument","useExecutableQMenuStockDefaults","QMenuStockFormDocument","useExecutableQMenuStockForm","QMenuStockListDocument","useQMenuStockList","QStockRecipesDocument","useQStockRecipes","MBranchDefaultTimeDocument","useMBranchDefaultTime","MChangePaymentMethodDocument","useMChangePaymentMethod","MFastCloseDocument","useMFastClose","MOrderChangeToPickupDocument","useMOrderChangeToPickup","MOrderTimeNotificationDocument","useMOrderTimeNotification","MRemoveOrderDriverDocument","useMRemoveOrderDriver","MSelectOrderDriverDocument","useMSelectOrderDriver","MTransferOrderDocument","useMTransferOrder","QBranchDefeaultTimesDocument","useQBranchDefeaultTimes","QIsBranchOpenDocument","useQIsBranchOpen","QOrderDetailDocument","useQOrderDetail","QOrderDriversDocument","useQOrderDrivers","QOrderListDocument","useQOrderList","QOrderListCategoriesDocument","useQOrderListCategories","QOrderMapDeliveriesDocument","useQOrderMapDeliveries","QOrderMapOrdersDocument","useQOrderMapOrders","QOrderReturnZonesDocument","useQOrderReturnZones","QOrdersCategoryCountDocument","useQOrdersCategoryCount","QOrderStateDocument","useQOrderState","SDriverReturnsDocument","useSDriverReturns","SOrderCallDocument","useSOrderCall","SOrderListDocument","useSOrderList","SOrderMapDeliveriesDocument","useSOrderMapDeliveries","SOrderMapOrdersDocument","useSOrderMapOrders","SOrdersCategoryCountDocument","useSOrdersCategoryCount","MFinancialReportCreateDocument","useMFinancialReportCreate","QAllDriversDocument","useQAllDrivers","QClosureHistoryDocument","QClosureReportDocument","useQClosureReport","QStatsCashboxesDocument","useQStatsCashboxes","QStatsCashiersDocument","useQStatsCashiers","QStatsDailyDocument","useQStatsDaily","QStatsOrdersDocument","useQStatsOrders","QStatsOrdersCountsDocument","useQStatsOrdersCounts","QStatsOrdersListDocument","MUserMenuLanguageDocument","useMUserMenuLanguage","QUserMenuLanguagesDocument","useQUserMenuLanguages","MCreateTransfersDocument","useMCreateTransfers","QMenuStockDepositDocument","useQMenuStockDeposit","QStockForTransferDocument","useQStockForTransfer","QStockStatsDocument","useQStockStats","MZoneCreateDocument","useMZoneCreate","MZoneDeleteDocument","useMZoneDelete","MZoneUpdateDocument","useMZoneUpdate","MZoneUpdatePriorityDocument","useMZoneUpdatePriority","QZoneColorsDocument","useQZoneColors","QZoneFormDocument","useQZoneForm","QZoneListDocument","useQZoneList","StyledPageLoader","loaderGif","alt"],"mappings":"wIAAA,IAAIA,EAAM,CACT,OAAQ,CACP,IACA,GAED,UAAW,CACV,IACA,GAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,GAED,aAAc,CACb,IACA,GAED,UAAW,CACV,IACA,IAED,aAAc,CACbaAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,gBAAiB,CAChB,IACA,KAED,OAAQ,CACP,IACA,GAED,UAAW,CACV,IACA,GAED,OAAQ,CACP,IACA,GAED,UAAW,CACV,IACA,GAED,OAAQ,CACP,IACA,GAED,UAAW,CACV,IACA,GAED,OAAQ,CACP,IACA,GAED,UAAW,CACV,IACA,GAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,YAAa,CACZ,IACA,IAED,eAAgB,CACf,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,QAAS,CACR,IACA,IAED,WAAY,CACX,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,QAAS,CACR,IACA,IAED,WAAY,CACX,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,QAAS,CACR,IACA,IAED,WAAY,CACX,IACA,IAED,QAAS,CACR,IACA,IAED,aAAc,CACb,IACA,IAED,gBAAiB,CAChB,IACA,IAED,WAAY,CACX,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,YAAa,CACZ,IACA,IAED,eAAgB,CACf,IACA,IAED,UAAW,CACV,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,gBAAiB,CAChB,IACA,IAED,OAAQ,CACP,IACA,IAED,UAAW,CACV,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,IAED,UAAW,CACV,IACA,IAED,aAAc,CACb,IACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,KAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,IAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,KAAK,WACzC,OAAOJ,EAAoBU,EAAED,EAAI,KAGnCX,EAAoBa,KAAO,WAC1B,OAAOC,OAAOD,KAAKd,IAEpBC,EAAoBW,GAAK,KACzBI,EAAOC,QAAUhB,G,qBC5gCjB,IAAID,EAAM,CACT,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,QAAS,CACR,IACA,KAED,WAAY,CACX,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,OAAQ,CACP,IACA,KAED,UAAW,CACV,IACA,KAED,aAAc,CACb,IACA,KAED,UAAW,CACV,IACA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A,E,uBAAAA,E,iBAAAA,E,wBAAAA,E,sBAAAA,E,kBAAAA,E,kCAAAA,E,eAAAA,E,4BAAAA,E,oBAAAA,E,oBAAAA,E,gBAAAA,E,0BAAAA,E,eAAAA,M,cAiBA8B,K,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,SAAAA,M,cAQAC,K,kBAAAA,E,UAAAA,E,WAAAA,M,cAMAC,K,oBAAAA,E,YAAAA,E,cAAAA,E,eAAAA,M,cAOA3N,K,cAAAA,E,gBAAAA,E,gBAAAA,E,aAAAA,M,cAOAH,K,YAAAA,E,gBAAAA,E,kBAAAA,E,qBAAAA,M,cAOA+N,K,YAAAA,E,qBAAAA,M,cAKAC,K,0CAAAA,E,UAAAA,E,sBAAAA,E,YAAAA,E,gBAAAA,E,oBAAAA,E,YAAAA,E,UAAAA,E,gBAAAA,E,kBAAAA,E,gBAAAA,E,sBAAAA,E,cAAAA,E,qBAAAA,M,cAiBAC,K,oBAAAA,E,mBAAAA,M,cAKAC,K,kBAAAA,E,kBAAAA,E,qBAAAA,M,cAMA5D,K,YAAAA,E,cAAAA,E,gBAAAA,E,iBAAAA,M,cAOA6D,K,kBAAAA,E,gBAAAA,E,YAAAA,E,aAAAA,M,cAOAC,K,UAAAA,E,cAAAA,E,aAAAA,M,cAMAC,K,cAAAA,E,eAAAA,E,sBAAAA,E,oBAAAA,E,gCAAAA,M,cAQAC,K,iBAAAA,E,oBAAAA,E,yBAAAA,E,oBAAAA,E,0BAAAA,E,yCAAAA,E,gBAAAA,E,YAAAA,E,8BAAAA,E,gBAAAA,E,8BAAAA,E,qCAAAA,E,UAAAA,E,gBAAAA,E,sBAAAA,E,6BAAAA,E,cAAAA,E,oBAAAA,E,kCAAAA,E,uBAAAA,E,YAAAA,E,eAAAA,E,4BAAAA,E,YAAAA,E,sBAAAA,E,cAAAA,E,oBAAAA,E,0CAAAA,E,2CAAAA,E,mCAAAA,E,4BAAAA,E,oBAAAA,E,6BAAAA,E,iCAAAA,E,kCAAAA,E,yBAAAA,E,2BAAAA,E,8CAAAA,E,6BAAAA,E,2BAAAA,E,yCAAAA,M,cA4CAC,K,qBAAAA,E,wBAAAA,E,UAAAA,E,6BAAAA,E,uBAAAA,M,cAQAnP,K,gBAAAA,E,sBAAAA,E,YAAAA,E,aAAAA,M,cAOAoP,K,cAAAA,E,sB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","file":"static/js/main.7eabbaea.chunk.js","sourcesContent":["var map = {\n\t\"./af\": [\n\t\t522,\n\t\t4\n\t],\n\t\"./af.js\": [\n\t\t522,\n\t\t4\n\t],\n\t\"./ar\": [\n\t\t529,\n\t\t27\n\t],\n\t\"./ar-dz\": [\n\t\t523,\n\t\t60\n\t],\n\t\"./ar-dz.js\": [\n\t\t523,\n\t\t60\n\t],\n\t\"./ar-kw\": [\n\t\t524,\n\t\t98\n\t],\n\t\"./ar-kw.js\": [\n\t\t524,\n\t\t98\n\t],\n\t\"./ar-ly\": [\n\t\t525,\n\t\t109\n\t],\n\t\"./ar-ly.js\": [\n\t\t525,\n\t\t109\n\t],\n\t\"./ar-ma\": [\n\t\t526,\n\t\t120\n\t],\n\t\"./ar-ma.js\": [\n\t\t526,\n\t\t120\n\t],\n\t\"./ar-sa\": [\n\t\t527,\n\t\t5\n\t],\n\t\"./ar-sa.js\": [\n\t\t527,\n\t\t5\n\t],\n\t\"./ar-tn\": [\n\t\t528,\n\t\t16\n\t],\n\t\"./ar-tn.js\": [\n\t\t528,\n\t\t16\n\t],\n\t\"./ar.js\": [\n\t\t529,\n\t\t27\n\t],\n\t\"./az\": [\n\t\t530,\n\t\t38\n\t],\n\t\"./az.js\": [\n\t\t530,\n\t\t38\n\t],\n\t\"./be\": [\n\t\t531,\n\t\t49\n\t],\n\t\"./be.js\": [\n\t\t531,\n\t\t49\n\t],\n\t\"./bg\": [\n\t\t532,\n\t\t61\n\t],\n\t\"./bg.js\": [\n\t\t532,\n\t\t61\n\t],\n\t\"./bm\": [\n\t\t533,\n\t\t72\n\t],\n\t\"./bm.js\": [\n\t\t533,\n\t\t72\n\t],\n\t\"./bn\": [\n\t\t534,\n\t\t83\n\t],\n\t\"./bn.js\": [\n\t\t534,\n\t\t83\n\t],\n\t\"./bo\": [\n\t\t535,\n\t\t91\n\t],\n\t\"./bo.js\": [\n\t\t535,\n\t\t91\n\t],\n\t\"./br\": [\n\t\t536,\n\t\t92\n\t],\n\t\"./br.js\": [\n\t\t536,\n\t\t92\n\t],\n\t\"./bs\": [\n\t\t537,\n\t\t93\n\t],\n\t\"./bs.js\": [\n\t\t537,\n\t\t93\n\t],\n\t\"./ca\": [\n\t\t538,\n\t\t94\n\t],\n\t\"./ca.js\": [\n\t\t538,\n\t\t94\n\t],\n\t\"./cs\": [\n\t\t539,\n\t\t95\n\t],\n\t\"./cs.js\": [\n\t\t539,\n\t\t95\n\t],\n\t\"./cv\": [\n\t\t540,\n\t\t96\n\t],\n\t\"./cv.js\": [\n\t\t540,\n\t\t96\n\t],\n\t\"./cy\": [\n\t\t541,\n\t\t97\n\t],\n\t\"./cy.js\": [\n\t\t541,\n\t\t97\n\t],\n\t\"./da\": [\n\t\t542,\n\t\t99\n\t],\n\t\"./da.js\": [\n\t\t542,\n\t\t99\n\t],\n\t\"./de\": [\n\t\t545,\n\t\t102\n\t],\n\t\"./de-at\": [\n\t\t543,\n\t\t100\n\t],\n\t\"./de-at.js\": [\n\t\t543,\n\t\t100\n\t],\n\t\"./de-ch\": [\n\t\t544,\n\t\t101\n\t],\n\t\"./de-ch.js\": [\n\t\t544,\n\t\t101\n\t],\n\t\"./de.js\": [\n\t\t545,\n\t\t102\n\t],\n\t\"./dv\": [\n\t\t546,\n\t\t103\n\t],\n\t\"./dv.js\": [\n\t\t546,\n\t\t103\n\t],\n\t\"./el\": [\n\t\t547,\n\t\t104\n\t],\n\t\"./el.js\": [\n\t\t547,\n\t\t104\n\t],\n\t\"./en-SG\": [\n\t\t548,\n\t\t105\n\t],\n\t\"./en-SG.js\": [\n\t\t548,\n\t\t105\n\t],\n\t\"./en-au\": [\n\t\t549,\n\t\t106\n\t],\n\t\"./en-au.js\": [\n\t\t549,\n\t\t106\n\t],\n\t\"./en-ca\": [\n\t\t550,\n\t\t107\n\t],\n\t\"./en-ca.js\": [\n\t\t550,\n\t\t107\n\t],\n\t\"./en-gb\": [\n\t\t551,\n\t\t108\n\t],\n\t\"./en-gb.js\": [\n\t\t551,\n\t\t108\n\t],\n\t\"./en-ie\": [\n\t\t552,\n\t\t110\n\t],\n\t\"./en-ie.js\": [\n\t\t552,\n\t\t110\n\t],\n\t\"./en-il\": [\n\t\t553,\n\t\t111\n\t],\n\t\"./en-il.js\": [\n\t\t553,\n\t\t111\n\t],\n\t\"./en-nz\": [\n\t\t554,\n\t\t112\n\t],\n\t\"./en-nz.js\": [\n\t\t554,\n\t\t112\n\t],\n\t\"./eo\": [\n\t\t555,\n\t\t113\n\t],\n\t\"./eo.js\": [\n\t\t555,\n\t\t113\n\t],\n\t\"./es\": [\n\t\t558,\n\t\t116\n\t],\n\t\"./es-do\": [\n\t\t556,\n\t\t114\n\t],\n\t\"./es-do.js\": [\n\t\t556,\n\t\t114\n\t],\n\t\"./es-us\": [\n\t\t557,\n\t\t115\n\t],\n\t\"./es-us.js\": [\n\t\t557,\n\t\t115\n\t],\n\t\"./es.js\": [\n\t\t558,\n\t\t116\n\t],\n\t\"./et\": [\n\t\t559,\n\t\t117\n\t],\n\t\"./et.js\": [\n\t\t559,\n\t\t117\n\t],\n\t\"./eu\": [\n\t\t560,\n\t\t118\n\t],\n\t\"./eu.js\": [\n\t\t560,\n\t\t118\n\t],\n\t\"./fa\": [\n\t\t561,\n\t\t119\n\t],\n\t\"./fa.js\": [\n\t\t561,\n\t\t119\n\t],\n\t\"./fi\": [\n\t\t562,\n\t\t121\n\t],\n\t\"./fi.js\": [\n\t\t562,\n\t\t121\n\t],\n\t\"./fo\": [\n\t\t563,\n\t\t122\n\t],\n\t\"./fo.js\": [\n\t\t563,\n\t\t122\n\t],\n\t\"./fr\": [\n\t\t566,\n\t\t125\n\t],\n\t\"./fr-ca\": [\n\t\t564,\n\t\t123\n\t],\n\t\"./fr-ca.js\": [\n\t\t564,\n\t\t123\n\t],\n\t\"./fr-ch\": [\n\t\t565,\n\t\t124\n\t],\n\t\"./fr-ch.js\": [\n\t\t565,\n\t\t124\n\t],\n\t\"./fr.js\": [\n\t\t566,\n\t\t125\n\t],\n\t\"./fy\": [\n\t\t567,\n\t\t126\n\t],\n\t\"./fy.js\": [\n\t\t567,\n\t\t126\n\t],\n\t\"./ga\": [\n\t\t568,\n\t\t127\n\t],\n\t\"./ga.js\": [\n\t\t568,\n\t\t127\n\t],\n\t\"./gd\": [\n\t\t569,\n\t\t128\n\t],\n\t\"./gd.js\": [\n\t\t569,\n\t\t128\n\t],\n\t\"./gl\": [\n\t\t570,\n\t\t129\n\t],\n\t\"./gl.js\": [\n\t\t570,\n\t\t129\n\t],\n\t\"./gom-latn\": [\n\t\t571,\n\t\t130\n\t],\n\t\"./gom-latn.js\": [\n\t\t571,\n\t\t130\n\t],\n\t\"./gu\": [\n\t\t572,\n\t\t6\n\t],\n\t\"./gu.js\": [\n\t\t572,\n\t\t6\n\t],\n\t\"./he\": [\n\t\t573,\n\t\t7\n\t],\n\t\"./he.js\": [\n\t\t573,\n\t\t7\n\t],\n\t\"./hi\": [\n\t\t574,\n\t\t8\n\t],\n\t\"./hi.js\": [\n\t\t574,\n\t\t8\n\t],\n\t\"./hr\": [\n\t\t575,\n\t\t9\n\t],\n\t\"./hr.js\": [\n\t\t575,\n\t\t9\n\t],\n\t\"./hu\": [\n\t\t576,\n\t\t10\n\t],\n\t\"./hu.js\": [\n\t\t576,\n\t\t10\n\t],\n\t\"./hy-am\": [\n\t\t577,\n\t\t11\n\t],\n\t\"./hy-am.js\": [\n\t\t577,\n\t\t11\n\t],\n\t\"./id\": [\n\t\t578,\n\t\t12\n\t],\n\t\"./id.js\": [\n\t\t578,\n\t\t12\n\t],\n\t\"./is\": [\n\t\t579,\n\t\t13\n\t],\n\t\"./is.js\": [\n\t\t579,\n\t\t13\n\t],\n\t\"./it\": [\n\t\t581,\n\t\t15\n\t],\n\t\"./it-ch\": [\n\t\t580,\n\t\t14\n\t],\n\t\"./it-ch.js\": [\n\t\t580,\n\t\t14\n\t],\n\t\"./it.js\": [\n\t\t581,\n\t\t15\n\t],\n\t\"./ja\": [\n\t\t582,\n\t\t17\n\t],\n\t\"./ja.js\": [\n\t\t582,\n\t\t17\n\t],\n\t\"./jv\": [\n\t\t583,\n\t\t18\n\t],\n\t\"./jv.js\": [\n\t\t583,\n\t\t18\n\t],\n\t\"./ka\": [\n\t\t584,\n\t\t19\n\t],\n\t\"./ka.js\": [\n\t\t584,\n\t\t19\n\t],\n\t\"./kk\": [\n\t\t585,\n\t\t20\n\t],\n\t\"./kk.js\": [\n\t\t585,\n\t\t20\n\t],\n\t\"./km\": [\n\t\t586,\n\t\t21\n\t],\n\t\"./km.js\": [\n\t\t586,\n\t\t21\n\t],\n\t\"./kn\": [\n\t\t587,\n\t\t22\n\t],\n\t\"./kn.js\": [\n\t\t587,\n\t\t22\n\t],\n\t\"./ko\": [\n\t\t588,\n\t\t23\n\t],\n\t\"./ko.js\": [\n\t\t588,\n\t\t23\n\t],\n\t\"./ku\": [\n\t\t589,\n\t\t24\n\t],\n\t\"./ku.js\": [\n\t\t589,\n\t\t24\n\t],\n\t\"./ky\": [\n\t\t590,\n\t\t25\n\t],\n\t\"./ky.js\": [\n\t\t590,\n\t\t25\n\t],\n\t\"./lb\": [\n\t\t591,\n\t\t26\n\t],\n\t\"./lb.js\": [\n\t\t591,\n\t\t26\n\t],\n\t\"./lo\": [\n\t\t592,\n\t\t28\n\t],\n\t\"./lo.js\": [\n\t\t592,\n\t\t28\n\t],\n\t\"./lt\": [\n\t\t593,\n\t\t29\n\t],\n\t\"./lt.js\": [\n\t\t593,\n\t\t29\n\t],\n\t\"./lv\": [\n\t\t594,\n\t\t30\n\t],\n\t\"./lv.js\": [\n\t\t594,\n\t\t30\n\t],\n\t\"./me\": [\n\t\t595,\n\t\t31\n\t],\n\t\"./me.js\": [\n\t\t595,\n\t\t31\n\t],\n\t\"./mi\": [\n\t\t596,\n\t\t32\n\t],\n\t\"./mi.js\": [\n\t\t596,\n\t\t32\n\t],\n\t\"./mk\": [\n\t\t597,\n\t\t33\n\t],\n\t\"./mk.js\": [\n\t\t597,\n\t\t33\n\t],\n\t\"./ml\": [\n\t\t598,\n\t\t34\n\t],\n\t\"./ml.js\": [\n\t\t598,\n\t\t34\n\t],\n\t\"./mn\": [\n\t\t599,\n\t\t35\n\t],\n\t\"./mn.js\": [\n\t\t599,\n\t\t35\n\t],\n\t\"./mr\": [\n\t\t600,\n\t\t36\n\t],\n\t\"./mr.js\": [\n\t\t600,\n\t\t36\n\t],\n\t\"./ms\": [\n\t\t602,\n\t\t39\n\t],\n\t\"./ms-my\": [\n\t\t601,\n\t\t37\n\t],\n\t\"./ms-my.js\": [\n\t\t601,\n\t\t37\n\t],\n\t\"./ms.js\": [\n\t\t602,\n\t\t39\n\t],\n\t\"./mt\": [\n\t\t603,\n\t\t40\n\t],\n\t\"./mt.js\": [\n\t\t603,\n\t\t40\n\t],\n\t\"./my\": [\n\t\t604,\n\t\t41\n\t],\n\t\"./my.js\": [\n\t\t604,\n\t\t41\n\t],\n\t\"./nb\": [\n\t\t605,\n\t\t42\n\t],\n\t\"./nb.js\": [\n\t\t605,\n\t\t42\n\t],\n\t\"./ne\": [\n\t\t606,\n\t\t43\n\t],\n\t\"./ne.js\": [\n\t\t606,\n\t\t43\n\t],\n\t\"./nl\": [\n\t\t608,\n\t\t45\n\t],\n\t\"./nl-be\": [\n\t\t607,\n\t\t44\n\t],\n\t\"./nl-be.js\": [\n\t\t607,\n\t\t44\n\t],\n\t\"./nl.js\": [\n\t\t608,\n\t\t45\n\t],\n\t\"./nn\": [\n\t\t609,\n\t\t46\n\t],\n\t\"./nn.js\": [\n\t\t609,\n\t\t46\n\t],\n\t\"./pa-in\": [\n\t\t610,\n\t\t47\n\t],\n\t\"./pa-in.js\": [\n\t\t610,\n\t\t47\n\t],\n\t\"./pl\": [\n\t\t611,\n\t\t48\n\t],\n\t\"./pl.js\": [\n\t\t611,\n\t\t48\n\t],\n\t\"./pt\": [\n\t\t613,\n\t\t51\n\t],\n\t\"./pt-br\": [\n\t\t612,\n\t\t50\n\t],\n\t\"./pt-br.js\": [\n\t\t612,\n\t\t50\n\t],\n\t\"./pt.js\": [\n\t\t613,\n\t\t51\n\t],\n\t\"./ro\": [\n\t\t614,\n\t\t52\n\t],\n\t\"./ro.js\": [\n\t\t614,\n\t\t52\n\t],\n\t\"./ru\": [\n\t\t615,\n\t\t53\n\t],\n\t\"./ru.js\": [\n\t\t615,\n\t\t53\n\t],\n\t\"./sd\": [\n\t\t616,\n\t\t54\n\t],\n\t\"./sd.js\": [\n\t\t616,\n\t\t54\n\t],\n\t\"./se\": [\n\t\t617,\n\t\t55\n\t],\n\t\"./se.js\": [\n\t\t617,\n\t\t55\n\t],\n\t\"./si\": [\n\t\t618,\n\t\t56\n\t],\n\t\"./si.js\": [\n\t\t618,\n\t\t56\n\t],\n\t\"./sk\": [\n\t\t619,\n\t\t57\n\t],\n\t\"./sk.js\": [\n\t\t619,\n\t\t57\n\t],\n\t\"./sl\": [\n\t\t620,\n\t\t58\n\t],\n\t\"./sl.js\": [\n\t\t620,\n\t\t58\n\t],\n\t\"./sq\": [\n\t\t621,\n\t\t59\n\t],\n\t\"./sq.js\": [\n\t\t621,\n\t\t59\n\t],\n\t\"./sr\": [\n\t\t623,\n\t\t63\n\t],\n\t\"./sr-cyrl\": [\n\t\t622,\n\t\t62\n\t],\n\t\"./sr-cyrl.js\": [\n\t\t622,\n\t\t62\n\t],\n\t\"./sr.js\": [\n\t\t623,\n\t\t63\n\t],\n\t\"./ss\": [\n\t\t624,\n\t\t64\n\t],\n\t\"./ss.js\": [\n\t\t624,\n\t\t64\n\t],\n\t\"./sv\": [\n\t\t625,\n\t\t65\n\t],\n\t\"./sv.js\": [\n\t\t625,\n\t\t65\n\t],\n\t\"./sw\": [\n\t\t626,\n\t\t66\n\t],\n\t\"./sw.js\": [\n\t\t626,\n\t\t66\n\t],\n\t\"./ta\": [\n\t\t627,\n\t\t67\n\t],\n\t\"./ta.js\": [\n\t\t627,\n\t\t67\n\t],\n\t\"./te\": [\n\t\t628,\n\t\t68\n\t],\n\t\"./te.js\": [\n\t\t628,\n\t\t68\n\t],\n\t\"./tet\": [\n\t\t629,\n\t\t69\n\t],\n\t\"./tet.js\": [\n\t\t629,\n\t\t69\n\t],\n\t\"./tg\": [\n\t\t630,\n\t\t70\n\t],\n\t\"./tg.js\": [\n\t\t630,\n\t\t70\n\t],\n\t\"./th\": [\n\t\t631,\n\t\t71\n\t],\n\t\"./th.js\": [\n\t\t631,\n\t\t71\n\t],\n\t\"./tl-ph\": [\n\t\t632,\n\t\t73\n\t],\n\t\"./tl-ph.js\": [\n\t\t632,\n\t\t73\n\t],\n\t\"./tlh\": [\n\t\t633,\n\t\t74\n\t],\n\t\"./tlh.js\": [\n\t\t633,\n\t\t74\n\t],\n\t\"./tr\": [\n\t\t634,\n\t\t75\n\t],\n\t\"./tr.js\": [\n\t\t634,\n\t\t75\n\t],\n\t\"./tzl\": [\n\t\t635,\n\t\t76\n\t],\n\t\"./tzl.js\": [\n\t\t635,\n\t\t76\n\t],\n\t\"./tzm\": [\n\t\t637,\n\t\t78\n\t],\n\t\"./tzm-latn\": [\n\t\t636,\n\t\t77\n\t],\n\t\"./tzm-latn.js\": [\n\t\t636,\n\t\t77\n\t],\n\t\"./tzm.js\": [\n\t\t637,\n\t\t78\n\t],\n\t\"./ug-cn\": [\n\t\t638,\n\t\t79\n\t],\n\t\"./ug-cn.js\": [\n\t\t638,\n\t\t79\n\t],\n\t\"./uk\": [\n\t\t639,\n\t\t80\n\t],\n\t\"./uk.js\": [\n\t\t639,\n\t\t80\n\t],\n\t\"./ur\": [\n\t\t640,\n\t\t81\n\t],\n\t\"./ur.js\": [\n\t\t640,\n\t\t81\n\t],\n\t\"./uz\": [\n\t\t642,\n\t\t84\n\t],\n\t\"./uz-latn\": [\n\t\t641,\n\t\t82\n\t],\n\t\"./uz-latn.js\": [\n\t\t641,\n\t\t82\n\t],\n\t\"./uz.js\": [\n\t\t642,\n\t\t84\n\t],\n\t\"./vi\": [\n\t\t643,\n\t\t85\n\t],\n\t\"./vi.js\": [\n\t\t643,\n\t\t85\n\t],\n\t\"./x-pseudo\": [\n\t\t644,\n\t\t86\n\t],\n\t\"./x-pseudo.js\": [\n\t\t644,\n\t\t86\n\t],\n\t\"./yo\": [\n\t\t645,\n\t\t87\n\t],\n\t\"./yo.js\": [\n\t\t645,\n\t\t87\n\t],\n\t\"./zh-cn\": [\n\t\t646,\n\t\t88\n\t],\n\t\"./zh-cn.js\": [\n\t\t646,\n\t\t88\n\t],\n\t\"./zh-hk\": [\n\t\t647,\n\t\t89\n\t],\n\t\"./zh-hk.js\": [\n\t\t647,\n\t\t89\n\t],\n\t\"./zh-tw\": [\n\t\t648,\n\t\t90\n\t],\n\t\"./zh-tw.js\": [\n\t\t648,\n\t\t90\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1089;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./bg\": [\n\t\t649,\n\t\t131\n\t],\n\t\"./bg.js\": [\n\t\t649,\n\t\t131\n\t],\n\t\"./chs\": [\n\t\t650,\n\t\t137\n\t],\n\t\"./chs.js\": [\n\t\t650,\n\t\t137\n\t],\n\t\"./cs\": [\n\t\t651,\n\t\t148\n\t],\n\t\"./cs.js\": [\n\t\t651,\n\t\t148\n\t],\n\t\"./da-dk\": [\n\t\t652,\n\t\t159\n\t],\n\t\"./da-dk.js\": [\n\t\t652,\n\t\t159\n\t],\n\t\"./de\": [\n\t\t654,\n\t\t132\n\t],\n\t\"./de-ch\": [\n\t\t653,\n\t\t164\n\t],\n\t\"./de-ch.js\": [\n\t\t653,\n\t\t164\n\t],\n\t\"./de.js\": [\n\t\t654,\n\t\t132\n\t],\n\t\"./en-au\": [\n\t\t655,\n\t\t133\n\t],\n\t\"./en-au.js\": [\n\t\t655,\n\t\t133\n\t],\n\t\"./en-gb\": [\n\t\t656,\n\t\t134\n\t],\n\t\"./en-gb.js\": [\n\t\t656,\n\t\t134\n\t],\n\t\"./en-za\": [\n\t\t657,\n\t\t135\n\t],\n\t\"./en-za.js\": [\n\t\t657,\n\t\t135\n\t],\n\t\"./es\": [\n\t\t659,\n\t\t138\n\t],\n\t\"./es-es\": [\n\t\t658,\n\t\t136\n\t],\n\t\"./es-es.js\": [\n\t\t658,\n\t\t136\n\t],\n\t\"./es.js\": [\n\t\t659,\n\t\t138\n\t],\n\t\"./et\": [\n\t\t660,\n\t\t139\n\t],\n\t\"./et.js\": [\n\t\t660,\n\t\t139\n\t],\n\t\"./fi\": [\n\t\t661,\n\t\t140\n\t],\n\t\"./fi.js\": [\n\t\t661,\n\t\t140\n\t],\n\t\"./fr\": [\n\t\t664,\n\t\t143\n\t],\n\t\"./fr-ca\": [\n\t\t662,\n\t\t141\n\t],\n\t\"./fr-ca.js\": [\n\t\t662,\n\t\t141\n\t],\n\t\"./fr-ch\": [\n\t\t663,\n\t\t142\n\t],\n\t\"./fr-ch.js\": [\n\t\t663,\n\t\t142\n\t],\n\t\"./fr.js\": [\n\t\t664,\n\t\t143\n\t],\n\t\"./hu\": [\n\t\t665,\n\t\t144\n\t],\n\t\"./hu.js\": [\n\t\t665,\n\t\t144\n\t],\n\t\"./it\": [\n\t\t666,\n\t\t145\n\t],\n\t\"./it.js\": [\n\t\t666,\n\t\t145\n\t],\n\t\"./ja\": [\n\t\t667,\n\t\t146\n\t],\n\t\"./ja.js\": [\n\t\t667,\n\t\t146\n\t],\n\t\"./lv\": [\n\t\t668,\n\t\t147\n\t],\n\t\"./lv.js\": [\n\t\t668,\n\t\t147\n\t],\n\t\"./nl-be\": [\n\t\t669,\n\t\t149\n\t],\n\t\"./nl-be.js\": [\n\t\t669,\n\t\t149\n\t],\n\t\"./nl-nl\": [\n\t\t670,\n\t\t150\n\t],\n\t\"./nl-nl.js\": [\n\t\t670,\n\t\t150\n\t],\n\t\"./no\": [\n\t\t671,\n\t\t151\n\t],\n\t\"./no.js\": [\n\t\t671,\n\t\t151\n\t],\n\t\"./pl\": [\n\t\t672,\n\t\t152\n\t],\n\t\"./pl.js\": [\n\t\t672,\n\t\t152\n\t],\n\t\"./pt-br\": [\n\t\t673,\n\t\t153\n\t],\n\t\"./pt-br.js\": [\n\t\t673,\n\t\t153\n\t],\n\t\"./pt-pt\": [\n\t\t674,\n\t\t154\n\t],\n\t\"./pt-pt.js\": [\n\t\t674,\n\t\t154\n\t],\n\t\"./ru\": [\n\t\t676,\n\t\t156\n\t],\n\t\"./ru-ua\": [\n\t\t675,\n\t\t155\n\t],\n\t\"./ru-ua.js\": [\n\t\t675,\n\t\t155\n\t],\n\t\"./ru.js\": [\n\t\t676,\n\t\t156\n\t],\n\t\"./sk\": [\n\t\t677,\n\t\t157\n\t],\n\t\"./sk.js\": [\n\t\t677,\n\t\t157\n\t],\n\t\"./sl\": [\n\t\t678,\n\t\t158\n\t],\n\t\"./sl.js\": [\n\t\t678,\n\t\t158\n\t],\n\t\"./th\": [\n\t\t679,\n\t\t160\n\t],\n\t\"./th.js\": [\n\t\t679,\n\t\t160\n\t],\n\t\"./tr\": [\n\t\t680,\n\t\t161\n\t],\n\t\"./tr.js\": [\n\t\t680,\n\t\t161\n\t],\n\t\"./uk-ua\": [\n\t\t681,\n\t\t162\n\t],\n\t\"./uk-ua.js\": [\n\t\t681,\n\t\t162\n\t],\n\t\"./vi\": [\n\t\t682,\n\t\t163\n\t],\n\t\"./vi.js\": [\n\t\t682,\n\t\t163\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1090;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.po\": [\n\t\t1367,\n\t\t169\n\t],\n\t\"./de/messages.po\": [\n\t\t1368,\n\t\t170\n\t],\n\t\"./en-dev/messages.po\": [\n\t\t1370,\n\t\t172\n\t],\n\t\"./en/messages.po\": [\n\t\t1369,\n\t\t171\n\t],\n\t\"./pl/messages.po\": [\n\t\t1371,\n\t\t173\n\t],\n\t\"./sk/messages.po\": [\n\t\t1372,\n\t\t174\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1097;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t1373,\n\t\t169\n\t],\n\t\"./de/messages.js\": [\n\t\t1374,\n\t\t170\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t1376,\n\t\t172\n\t],\n\t\"./en/messages.js\": [\n\t\t1375,\n\t\t171\n\t],\n\t\"./pl/messages.js\": [\n\t\t1377,\n\t\t173\n\t],\n\t\"./sk/messages.js\": [\n\t\t1378,\n\t\t174\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1098;\nmodule.exports = webpackAsyncContext;","import { SvgIconComponent } from '@material-ui/icons'\nimport React, { MouseEvent } from 'react'\nimport styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile } from '../app/Responsive'\nimport { Icon } from '../atoms/Icon'\nimport { applyAlphaToColor, Colors, Radiuses, Spacing } from '../styling'\n\nexport interface ITouchButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  icon?: SvgIconComponent\n  iconColor?: Colors\n  iconSize?: number\n  text?: string\n  color?: Colors\n  badge?: ReactNode\n  disabled?: boolean\n  textNextToIcon?: boolean\n  className?: string\n  width?: string\n  height?: string\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n}\n\nconst applyAlpha = (alphaValue: number) => (props: ITouchButtonProps) =>\n  applyAlphaToColor(props.color!, alphaValue)\n\nconst StyledTouchButton = styled.button`\n  min-height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  min-width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  width: ${({ width = '100%' }: ITouchButtonProps) => width};\n  height: ${({ height = '100%' }: ITouchButtonProps) => height};\n  margin: 0;\n  padding: 0 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  user-select: none;\n  /* fallback font size for incompatible browsers */\n  font-size: 1rem;\n  ${mediaDesktop`\n    font-size: calc(0.6rem + 0.5vw);\n  `}\n  ${mediaMobile`\n    font-size: calc(0.9rem + 0.5vw);\n  `};\n  transition-duration: 0.2s;\n\n  & .materialIcon {\n    vertical-align: middle;\n  }\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nconst ButtonLabelStyled = styled.div`\n  color: white;\n  text-align: center;\n  width: 100%;\n  overflow: hidden;\n`\nconst ButtonLabelNextToIconStyled = styled(ButtonLabelStyled)`\n  width: calc(100% - 4rem);\n  margin: 0 0 0 1rem;\n  text-align: left;\n  display: inline-block;\n  vertical-align: top;\n  overflow: hidden;\n`\n\nexport const TouchButton = React.forwardRef<\n  HTMLButtonElement,\n  ITouchButtonProps\n>(\n  (\n    {\n      children,\n      icon,\n      iconColor = Colors.white,\n      iconSize = 3,\n      color = Colors.greyMiddle,\n      textNextToIcon = false,\n      badge,\n      text,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    return (\n      <StyledTouchButton\n        color={color}\n        type=\"button\"\n        {...props}\n        ref={forwardedRef}\n      >\n        {icon && <Icon icon={icon} color={iconColor} fontSize={iconSize} />}\n\n        {text && textNextToIcon && (\n          <ButtonLabelNextToIconStyled>{text}</ButtonLabelNextToIconStyled>\n        )}\n\n        {text && !textNextToIcon && (\n          <ButtonLabelStyled>{text}</ButtonLabelStyled>\n        )}\n\n        {badge}\n        {children}\n      </StyledTouchButton>\n    )\n  },\n)\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { Spacing } from '../styling'\nimport { MarginBox } from './MarginBox'\n\ninterface IProps {\n  width?: number\n  widthUnit?: string\n  height?: number\n  heightUnit?: string\n  margin?: string\n  className?: string\n}\n\nconst widthProperty = ({\n  width,\n  widthUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (width === undefined) {\n    return ''\n  } else {\n    return `width: ${width}${widthUnit}`\n  }\n}\n\nconst heightProperty = ({\n  height,\n  heightUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (height === undefined) {\n    return ''\n  } else {\n    return `height: ${height}${heightUnit}`\n  }\n}\n\nconst StyledSizer = styled('div')`\n  ${widthProperty};\n  ${heightProperty};\n`\n\nexport const Sizer: React.FC<IProps> = ({\n  width,\n  widthUnit = Spacing.DefaultSizeUnit,\n  height,\n  heightUnit = Spacing.DefaultSizeUnit,\n  margin,\n  children,\n  className,\n  ...props\n}) => {\n  const wrap = (\n    <StyledSizer\n      width={width}\n      widthUnit={widthUnit}\n      height={height}\n      heightUnit={heightUnit}\n      className={className}\n      {...props}\n    >\n      {children}\n    </StyledSizer>\n  )\n\n  return margin === undefined ? (\n    wrap\n  ) : (\n    <MarginBox margin={margin}>{wrap}</MarginBox>\n  )\n}\n","export const ROUTE_MAIN = '/'\nexport const ROUTE_SUPPORT = '/support'\n","import { Trans } from '@lingui/macro'\nimport { Dialog } from '@material-ui/core'\nimport { WarningTwoTone } from '@material-ui/icons'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport connectionWarningSound from '../assets/connectionWarning.mp3'\nimport { isNetworkOffline } from '../helpers/offline'\nimport { useIntervalSound } from '../hooks/useIntervalSound'\nimport { Colors } from '../styling'\n\nconst MessageStyled = styled.div`\n  padding: 1rem;\n  background-color: ${Colors.red} !important;\n  font-size: 2rem;\n\n  & svg {\n    position: relative;\n    top: 0.3rem;\n    padding-right: 0.5rem;\n  }\n`\n\nexport const ConnectionWarning = observer(() => {\n  const audio = useIntervalSound({\n    soundUrl: connectionWarningSound,\n    intervalSec: 30,\n    shouldPlay: isNetworkOffline(),\n  })\n  return (\n    <>\n      {audio}\n      <Dialog\n        open={isNetworkOffline()}\n        disableBackdropClick={true}\n        disableEscapeKeyDown={true}\n      >\n        <MessageStyled>\n          <WarningTwoTone fontSize=\"large\" />\n          <Trans>Internet connection is not available</Trans>\n        </MessageStyled>\n      </Dialog>\n    </>\n  )\n})\n","import React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { logRouting } from '../helpers/logger'\n\nexport const LogRoute: React.FC = () => {\n  if (process.env.NODE_ENV === 'development') {\n    return (\n      <Route>\n        {({ location }) => {\n          logRouting(`at ${location.pathname}`)\n          return null\n        }}\n      </Route>\n    )\n  } else {\n    return null\n  }\n}\n","import debug from 'debug'\nimport { when } from 'mobx'\nimport React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { WithRoot } from '../atoms/WithRoot'\n\nconst log = debug('routing')\n\nexport const RedirectAfterLogin = () => (\n  <Route\n    children={({ location, history }) => (\n      <WithRoot\n        render={root => {\n          if (!root.auth.isAuthenticatedUser) {\n            const route = (location.state && location.state.origin) || '/'\n            const waitForAuthentication = () => root.auth.isAuthenticated\n            const redirectAfterLogin = () => {\n              history.replace(route)\n            }\n            when(waitForAuthentication, redirectAfterLogin)\n            log('will redirect to %s when auth', route)\n          }\n          return null\n        }}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { RedirectToLogin } from './RedirectToLogin'\n\nexport const RedirectAfterLogout = () => {\n  const { auth, user, order, createOrder, settings, zone } = useRoot()\n  if (auth.isAuthenticated) {\n    auth.invalidate()\n    user.invalidate()\n    order.invalidate()\n    createOrder.invalidate()\n    settings.invalidate()\n    zone.invalidate()\n    return <RedirectToLogin useOrigin={false} />\n  }\n  return <Redirect to=\"/\" />\n}\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport PageLoader from '../atoms/PageLoader'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport {\n  ROUTE_MAIN,\n  ROUTE_SUPPORT,\n} from '../segments/dashboard/dashboard.routes'\nimport { ROUTE_KITCHEN } from '../segments/kitchen/kitchen.routes'\nimport {\n  ROUTE_AUTH_LOGIN,\n  ROUTE_AUTH_LOGOUT,\n  ROUTE_AUTH_RECOVERY,\n  ROUTE_AUTH_REGISTER,\n  ROUTE_AUTH_RESET_PASSWORD,\n} from '../segments/login/login.routes'\nimport { ROUTE_ORDER_OVERVIEW } from '../segments/order/order.routes'\nimport { ROUTE_OVERVIEW_DASHBOARD } from '../segments/overview/overview.routes'\nimport { ROUTE_SETTINGS } from '../segments/settings/settings.routes'\nimport { ROUTE_STOCK } from '../segments/stock/stock.routes'\nimport { LogRoute } from './LogRoute'\nimport { RedirectAfterLogin } from './RedirectAfterLogin'\nimport { RedirectAfterLogout } from './RedirectAfterLogout'\nimport { SecureRoute } from './SecureRoute'\n\nconst PasswordLoginRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordLoginRoute'),\n)\n\nconst PasswordChangeRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordChangeRoute'),\n)\n\nconst PasswordResetRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordResetRoute'),\n)\n\nconst MainDashboardPage = React.lazy(() =>\n  import('../segments/dashboard/pages/MainDashboardPage'),\n)\n\nconst OrderRouting = React.lazy(() =>\n  import('../segments/order/routes/OrderRouting'),\n)\n\nconst KitchenRouting = React.lazy(() =>\n  import('../segments/kitchen/routes/KitchenRouting'),\n)\n\nconst SettingsRouting = React.lazy(() =>\n  import('../segments/settings/routes/SettingsRouting'),\n)\n\nconst OverviewRouting = React.lazy(() =>\n  import('../segments/overview/routes/OverviewRouting'),\n)\n\nconst StockRouting = React.lazy(() =>\n  import('../segments/stock/routes/StockRouting'),\n)\n\nconst SupportPage = React.lazy(() =>\n  import('../segments/dashboard/pages/SupportPage'),\n)\n\nexport const Routing = () => (\n  <React.Suspense fallback={<PageLoader />}>\n    <LogRoute />\n    <RedirectAfterLogin />\n    <Switch>\n      <SecureRoute path={ROUTE_MAIN} exact component={MainDashboardPage} />\n      <Route path={ROUTE_AUTH_LOGIN} component={PasswordLoginRoute} />\n      <Route\n        exact\n        path={ROUTE_AUTH_RESET_PASSWORD}\n        component={PasswordResetRoute}\n      />\n      <Route\n        exact\n        path={`${ROUTE_AUTH_RECOVERY}/:token`}\n        component={PasswordChangeRoute}\n      />\n      <Route\n        exact\n        path={`${ROUTE_AUTH_REGISTER}/:token`}\n        component={PasswordChangeRoute}\n      />\n      <SecureRoute\n        path={ROUTE_OVERVIEW_DASHBOARD}\n        component={OverviewRouting}\n      />\n      <SecureRoute path={ROUTE_STOCK} component={StockRouting} />\n      <SecureRoute path={ROUTE_ORDER_OVERVIEW} component={OrderRouting} />\n      <SecureRoute path={ROUTE_KITCHEN} component={KitchenRouting} />\n      <SecureRoute path={ROUTE_SETTINGS} component={SettingsRouting} />\n      <Route path={ROUTE_SUPPORT} component={SupportPage} />\n      <Route path={ROUTE_AUTH_LOGOUT} component={RedirectAfterLogout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </React.Suspense>\n)\n","import { Trans } from '@lingui/macro'\nimport { Autorenew, ContactSupport, Warning } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { Sizer } from '../atoms/Sizer'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\nconst IconStyled = styled.div`\n  color: ${Colors.orange};\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ninterface IProps {\n  onFeedback(): void\n}\n\nexport const ErrorPage: React.FC<IProps> = ({ onFeedback }) => (\n  <FullPageLayout\n    pageTitle={i18n.t`Application error`}\n    hideLogoutWidget={true}\n    showHomeButton={false}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          We are sorry, but there is an unexpected problem in the app. Our team\n          was notified and will fix this soon.\n        </Trans>\n      </h3>\n      <Center>\n        <IconStyled>\n          <Warning style={{ fontSize: '5rem' }} />\n        </IconStyled>\n        <Sizer width={20}>\n          <TouchButton onClick={onFeedback}>\n            <ContactSupport />\n            <Trans>Send feedback</Trans>\n          </TouchButton>\n        </Sizer>\n        <Sizer width={20}>\n          <TouchButton onClick={() => window.location.reload()}>\n            <Autorenew />\n            <Trans>Restart application</Trans>\n          </TouchButton>\n        </Sizer>\n      </Center>\n    </Card>\n  </FullPageLayout>\n)\n","import { Trans } from '@lingui/macro'\nimport { Cached, OfflineBolt } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { Sizer } from '../atoms/Sizer'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { ROUTE_SUPPORT } from '../segments/dashboard/dashboard.routes'\nimport { Colors } from '../styling'\n\nconst IconStyled = styled.div`\n  margin-top: 2rem;\n  color: ${Colors.red};\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ninterface IProps {\n  onRetry(): void\n}\n\nexport const ServiceUnreachablePage: React.FC<IProps> = ({ onRetry }) => (\n  <FullPageLayout\n    pageTitle={i18n.t`Service unreachable`}\n    useBackButton={false}\n    hideLogoutWidget={true}\n    showHomeButton={false}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          Connection to external service is not possible at the moment. Please\n          try again later or <a href={ROUTE_SUPPORT}>contact our support</a>.\n        </Trans>\n      </h3>\n      <Center>\n        <IconStyled>\n          <OfflineBolt style={{ fontSize: '5rem' }} />\n        </IconStyled>\n        <Sizer width={20}>\n          <TouchButton onClick={onRetry} icon={Cached}>\n            {' '}\n            <Trans>Retry the connection</Trans>\n          </TouchButton>\n        </Sizer>\n      </Center>\n    </Card>\n  </FullPageLayout>\n)\n","import {\n  ApolloDefender,\n  ApolloOperationError,\n  isChunkError,\n  isNetworkUnreachableError,\n} from '@speedlo/graphql'\nimport { flushSentry, Sentry } from '@speedlo/sentry'\nimport { SillyErrorBoundary } from '@speedlo/tools'\nimport { isApolloError } from 'apollo-client'\nimport React from 'react'\n\nimport { logError } from '../helpers/logger'\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { i18n } from '../i18n'\nimport { ErrorPage } from '../pages/ErrorPage'\nimport { ServiceUnreachablePage } from '../pages/ServiceUnreachablePage'\n\nexport type ErrorKind = 'none' | 'serviceUnreachable' | 'otherError'\n\nconst makeError = (message: string) =>\n  `${message} ${i18n.t`Our team was notified about the issue.`}`\n\nexport const DefaultErrorHandler: React.FC = ({ children }) => {\n  const { enqueueWarning, enqueueError } = useSnackBar()\n\n  const [errorKind, setErrorKind] = React.useState<ErrorKind>('none')\n\n  const onRetry = React.useCallback(() => {\n    setErrorKind('none')\n  }, [])\n\n  const onUnhandledError = React.useCallback((error: Error) => {\n    if (process.env.NODE_ENV === 'development') {\n      logError(error.message)\n    }\n    if (isChunkError(error)) {\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Debug)\n        Sentry.captureException(error)\n      })\n      flushSentry().then(() => window.location.reload())\n      return\n    }\n    if (isApolloError(error) && isNetworkUnreachableError(error)) {\n      setErrorKind('serviceUnreachable')\n      return\n    }\n    Sentry.captureException(error)\n    setErrorKind('otherError')\n  }, [])\n\n  const onNetworkError = React.useCallback(\n    (error: Error, isUnreachable: boolean) => {\n      if (isUnreachable) {\n        setErrorKind('serviceUnreachable')\n      } else {\n        if (process.env.NODE_ENV === 'development') {\n          logError(error)\n        }\n        enqueueError(\n          makeError(\n            i18n.t`Unexpected error occured in communication with service.`,\n          ),\n        )\n      }\n    },\n    [enqueueError],\n  )\n\n  const onOperationError = React.useCallback(\n    (error: ApolloOperationError) => {\n      logError(error.operationName, error.message)\n      enqueueError(\n        makeError(i18n.t`Unexpected error occured while sending a request.`),\n      )\n    },\n    [enqueueError],\n  )\n\n  const onUserErrors = React.useCallback(\n    (messages: RoA<string>) => {\n      messages.forEach(enqueueWarning)\n    },\n    [enqueueWarning],\n  )\n\n  const render = () => {\n    switch (errorKind) {\n      case 'serviceUnreachable': {\n        return <ServiceUnreachablePage onRetry={onRetry} />\n      }\n      case 'otherError': {\n        return <ErrorPage onFeedback={showFeedback} />\n      }\n      default: {\n        return children\n      }\n    }\n  }\n\n  return (\n    <ApolloDefender\n      onNetworkError={onNetworkError}\n      onUserErrors={onUserErrors}\n      onOperationError={onOperationError}\n    >\n      <SillyErrorBoundary onError={onUnhandledError}>\n        {render()}\n      </SillyErrorBoundary>\n    </ApolloDefender>\n  )\n}\n\nfunction showFeedback() {\n  Sentry.showReportDialog({\n    labelClose: i18n.t`Close`,\n    title: i18n.t`Unexpected error in the app`,\n  })\n}\n","import React from 'react'\nimport { Provider as GoodByeProvider } from 'react-goodbye'\nimport { BrowserRouter } from 'react-router-dom'\n\ninterface IProps {}\n\nexport const Router: React.FC<IProps> = ({ children }) => (\n  <GoodByeProvider>\n    {({ handleGetUserConfirm }) => (\n      <BrowserRouter getUserConfirmation={handleGetUserConfirm}>\n        {children}\n      </BrowserRouter>\n    )}\n  </GoodByeProvider>\n)\n","import { css } from 'emotion'\nimport { SnackbarProvider } from 'notistack'\nimport React from 'react'\n\nimport { Colors, FontSizes } from '../styling'\n\ninterface IProps {}\n\nconst successStyle = css`\n  background: ${Colors.green} !important;\n  font-size: ${FontSizes.InfoMessageFontSize} !important;\n`\nconst errorStyle = css`\n  background: ${Colors.red};\n  font-size: ${FontSizes.InfoMessageFontSize} !important;\n`\nconst warningStyle = css`\n  background: ${Colors.orange};\n  font-size: ${FontSizes.InfoMessageFontSize} !important;\n`\nexport const snackStyles = {\n  variantSuccess: successStyle,\n  variantInfo: successStyle,\n  variantError: errorStyle,\n  variantWarning: warningStyle,\n}\n\nexport const SnackProvider: React.FC<IProps> = ({ children }) => (\n  <SnackbarProvider\n    maxSnack={3}\n    classes={snackStyles}\n    anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\n  >\n    {children}\n  </SnackbarProvider>\n)\n","import { Button, Snackbar } from '@material-ui/core'\nimport { SnackbarProps } from '@material-ui/core/Snackbar'\nimport { HOUR, MINUTE, SECOND, useInterval, useTimer } from '@speedlo/hooks'\nimport { updateWorker } from '@speedlo/tools'\nimport { addMilliseconds, formatDistanceStrict } from 'date-fns'\nimport { useObservable, useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { logUpdate } from '../helpers/logger'\nimport { i18n } from '../i18n'\nimport { snackStyles } from './SnackProvider'\n\nexport interface IProps {\n  onRestart?(): void\n  autoUpdateDelay?: number\n  postponeTimeout?: number\n  updateCheckInterval?: number\n  serviceWorker?: ServiceWorkerContainer\n}\n\nexport const UpdateHandler: React.FC<IProps> = ({\n  onRestart = () => window.location.reload(),\n  autoUpdateDelay = 20 * SECOND,\n  postponeTimeout = 2 * MINUTE,\n  updateCheckInterval = process.env.REACT_APP_STAGE === 'prod'\n    ? 1 * HOUR\n    : 5 * MINUTE,\n  serviceWorker = window.navigator.serviceWorker,\n}) => {\n  const registrationWorkerRef = React.useRef<ServiceWorkerRegistration | null>(\n    null,\n  )\n  const updateWorkerRef = React.useRef<ServiceWorker | null>(null)\n\n  const state = useObservable({ updatePending: false, applyingUpdate: false })\n\n  useInterval(() => {\n    if (registrationWorkerRef.current) {\n      logUpdate('checking...')\n      registrationWorkerRef.current.update().catch(() => {\n        // don't really care if check fails\n      })\n    }\n  }, updateCheckInterval)\n\n  React.useEffect(() => {\n    const onMessage = (event: MessageEvent) => {\n      if (event.data === 'update-applied') {\n        logUpdate('restarting to apply...')\n        onRestart()\n      }\n    }\n    if (serviceWorker) {\n      serviceWorker.addEventListener('message', onMessage)\n      return () => {\n        serviceWorker.removeEventListener('message', onMessage)\n      }\n    } else {\n      logUpdate('serviceWorker is not supported')\n      return () => {\n        /* noop */\n      }\n    }\n  }, [onRestart, serviceWorker])\n\n  React.useEffect(() => {\n    if (window.navigator.userAgent.indexOf('; wv') > 0) {\n      // disable service worker on POS devices\n      updateWorker.unregister()\n      return\n    }\n\n    const init = updateWorker.register({\n      onInit: reg => {\n        registrationWorkerRef.current = reg\n      },\n      onUpdate: sw => {\n        updateWorkerRef.current = sw\n        state.updatePending = true\n        logUpdate('new update is available')\n      },\n    })\n    // service worker is normally using load event, but since this\n    // done after the load, it has to be triggered manually\n    init()\n  }, [state])\n\n  const onCancel = React.useCallback(() => {\n    logUpdate('user postponed')\n    state.updatePending = false\n    setTimeout(() => {\n      logUpdate('reminding update to user again')\n      state.updatePending = true\n    }, postponeTimeout)\n  }, [postponeTimeout, state])\n\n  const onConfirm = React.useCallback(() => {\n    state.updatePending = false\n    if (updateWorkerRef.current) {\n      logUpdate('user confirmed')\n      state.applyingUpdate = true\n      updateWorkerRef.current.postMessage('apply-update')\n    }\n  }, [state])\n\n  if (state.applyingUpdate && process.env.NODE_ENV !== 'test') {\n    throw new Promise(() => {\n      // Suspense will catch it and show loader while the update is being applied\n    })\n  }\n\n  return useObserver(() =>\n    state.updatePending ? (\n      <UpdateSnack\n        autoHideDuration={autoUpdateDelay}\n        onCancel={onCancel}\n        onConfirm={onConfirm}\n      />\n    ) : null,\n  )\n}\n\ninterface IUpdateSnackProps extends Omit<SnackbarProps, 'open'> {\n  autoHideDuration: number\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport function UpdateSnack(props: IUpdateSnackProps) {\n  const { onConfirm, onCancel, ...rest } = props\n  const now = useTimer({ interval: SECOND, enabled: true })\n  const [endTime] = React.useState(() =>\n    addMilliseconds(now, props.autoHideDuration),\n  )\n  const remainingSeconds = formatDistanceStrict(endTime, now)\n\n  React.useEffect(() => {\n    if (now >= endTime) {\n      onConfirm()\n    }\n  }, [now, endTime, onConfirm])\n\n  return (\n    <Snackbar\n      open={true}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center',\n      }}\n      className={snackStyles.variantInfo}\n      message={\n        <span data-testid=\"message\">{i18n.t`Application will be restarted in ${remainingSeconds} to apply available update.`}</span>\n      }\n      disableWindowBlurListener={true}\n      action={[\n        <Button\n          key=\"later\"\n          color=\"secondary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"postpone-button\"\n          onClick={onCancel}\n        >\n          {i18n.t`Postpone update`}\n        </Button>,\n        <Button\n          key=\"confirm\"\n          color=\"primary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"confirm-button\"\n          onClick={onConfirm}\n        >\n          {i18n.t`Restart now`}\n        </Button>,\n      ]}\n      {...rest}\n    />\n  )\n}\n","import { Sentry } from '@speedlo/sentry'\nimport { intercept } from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { useQUserBootstrap } from '../graph/generated'\nimport { RM } from '../helpers/ramda'\n\nexport const UserBootstrap = observer(() => {\n  const { auth, user } = useRoot()\n\n  const { data, loading } = useQUserBootstrap(\n    { userId: auth.userId! },\n    { skip: !auth.isAuthenticatedUser },\n  )\n\n  // UserModel needs to be reset whenever auth user changes\n  React.useEffect(() =>\n    intercept(auth, 'userId', change => {\n      user.invalidate()\n      return change\n    }),\n  )\n\n  // un-authenticated user\n  React.useEffect(() => {\n    if (user.isLoaded) {\n      return\n    }\n\n    if (!auth.userId) {\n      user.finishBootstrap()\n      Sentry.configureScope(scope => {\n        scope.setUser({\n          id: undefined,\n          username: undefined,\n        })\n        scope.setExtra('roles', [])\n        scope.setExtra('branches', [])\n      })\n    }\n\n    if (auth.isAuthenticatedUser && !loading) {\n      // FIXME: Should be removed when BE drops language caching\n      if (user.language === null) {\n        user.setLanguage(data.user.language.rawCode)\n      }\n      user.applyUserData(data.user)\n      user.applyAccess(data.access)\n      user.applyPermissions(data.permissions)\n      user.finishBootstrap()\n      Sentry.configureScope(scope => {\n        scope.setUser({\n          id: auth.userId!,\n          username: `${data.user.firstName} ${data.user.lastName}`,\n        })\n        scope.setExtras({\n          roles: data.user.roles.map(RM.prop('name')),\n          branches: data.user.branches.map(RM.prop('id')),\n        })\n      })\n    }\n  })\n\n  return null\n})\n","import { useReleaseCabinet } from '@speedlo/tools/dist/useReleaseCabinet'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ConnectionWarning } from '../atoms/ConnectionWarning'\nimport PageLoader from '../atoms/PageLoader'\nimport { useRoot } from '../atoms/RootProvider'\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { Routing } from '../routes/Routing'\nimport { DefaultErrorHandler } from './DefaultErrorHandler'\nimport { Router } from './Router'\nimport { UpdateHandler } from './UpdateHandler'\nimport { UserBootstrap } from './UserBootstrap'\n\nexport const AppMain: React.FC = () => {\n  const { user } = useRoot()\n\n  const { enqueueInfo } = useSnackBar()\n  useReleaseCabinet(enqueueInfo)\n\n  return (\n    <DefaultErrorHandler>\n      <UserBootstrap />\n      <UpdateHandler />\n      <ConnectionWarning />\n      <React.Suspense fallback={<PageLoader />}>\n        <Router>\n          <Observer>\n            {() => (user.isReady ? <Routing /> : <PageLoader />)}\n          </Observer>\n        </Router>\n      </React.Suspense>\n    </DefaultErrorHandler>\n  )\n}\n","import { useSentryInit } from '@speedlo/sentry'\nimport React from 'react'\n\nimport { RootProvider } from '../atoms/RootProvider'\nimport { appConfig } from '../config'\nimport { I18nManager } from '../i18n'\nimport { SnackProvider } from './SnackProvider'\n\nexport const AppProvider: React.FC = ({ children }) => {\n  useSentryInit(appConfig.sentryDSN)\n  return (\n    <RootProvider>\n      <I18nManager>\n        <SnackProvider>{children}</SnackProvider>\n      </I18nManager>\n    </RootProvider>\n  )\n}\n","import { createGlobalStyle } from 'styled-components'\n\nimport backgroundImage from '../assets/bg_antracit.jpg'\n\nexport const GlobalStyles = createGlobalStyle`\n  body,\n  input,\n  textarea,\n  select,\n  button {\n    margin: 0;\n    padding: 0;\n    font-family: 'Open Sans', sans-serif;\n    font-size: 16px;\n  }\n  body {\n    background-color: #322e2d;\n    color: white;\n    background-image: url(${backgroundImage});\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-size: cover;\n  }\n\n  input {\n    padding: 0.5rem;\n    border: 1px solid #95989a;\n    border-radius: 0.25rem;\n  }\n\n  /* react-grid disabling animation */\n  .react-grid-item {\n    transition: all 0s;\n  }\n\n  /* apply a natural box layout model to all elements, but allowing components to change */\n  html {\n    box-sizing: border-box;\n  }\n  *,\n  *:before,\n  *:after {\n    box-sizing: inherit;\n  }\n`\n","import './enableDebug'\n\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport { AppMain } from './app/AppMain'\nimport { AppProvider } from './app/AppProvider'\nimport { GlobalStyles } from './app/GlobalStyles'\nimport PageLoader from './atoms/PageLoader'\n\nconst Main = () => {\n  return (\n    <React.Suspense fallback={<PageLoader />}>\n      <>\n        <GlobalStyles />\n        <AppProvider>\n          <AppMain />\n        </AppProvider>\n      </>\n    </React.Suspense>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nrender(<Main />, rootElement)\n","import { SvgIconComponent } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { logError } from '../helpers/logger'\nimport { Colors, Spacing } from '../styling'\n\ninterface IProps {\n  icon?: SvgIconComponent\n  iconName?: string\n  color?: string\n  fontSize?: number\n  fontSizeUnit?: string\n}\n\nconst StyledIcon = styled.span<IProps>`\n  color: ${({ color }) => color};\n  > svg {\n    font-size: ${({ fontSize, fontSizeUnit }) => `${fontSize}${fontSizeUnit}`};\n  }\n`\n\nexport const Icon = React.memo<IProps>(\n  ({\n    iconName,\n    icon,\n    children,\n    color = Colors.white,\n    fontSize = 1.5,\n    fontSizeUnit = Spacing.DefaultSizeUnit,\n  }) => {\n    if (iconName) {\n      // tslint:disable-next-line: no-console\n      logError(\n        `Icon: Do not use iconName! Replace \"${iconName}\" with the one imported from @material-ui/icons and pass in icon prop instead.`,\n      )\n      return null\n    }\n    if (icon && children) {\n      // tslint:disable-next-line: no-console\n      logError(\n        `Icon: Do not use both icon prop & children! Only one of them is allowed.`,\n      )\n      return null\n    }\n    const iconNode = icon ? React.createElement(icon) : children\n    return (\n      <StyledIcon\n        color={color}\n        fontSize={fontSize}\n        fontSizeUnit={fontSizeUnit}\n        className=\"materialIcon\"\n      >\n        {iconNode}\n      </StyledIcon>\n    )\n  },\n)\n","import { computeDestinationPoint, getBounds } from 'geolib'\n\n/* global google */\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLng =>\n  new google.maps.LatLng(Number(gps.latitude), Number(gps.longitude))\n\nexport const gpsToLatLngLit = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n\ninterface IGeneratePolygonInput {\n  center: GeoPoint\n  metersRadius?: number\n  pointsCount?: number\n}\n\nexport const generatePolygon = ({\n  center,\n  metersRadius = 1000,\n  pointsCount = 15,\n}: IGeneratePolygonInput) => {\n  return new Array(pointsCount).fill(null).map((_, idx) => {\n    const degree = (360 / pointsCount) * idx\n    return computeDestinationPoint(center, metersRadius, degree)\n  })\n}\n\nexport const getBoundsOfPoints = (points: GeoPoint[]) => {\n  const bounds = getBounds(points)\n  if (!bounds) {\n    return null\n  }\n  return new google.maps.LatLngBounds(\n    {\n      lat: bounds.minLat,\n      lng: bounds.minLng,\n    },\n    {\n      lat: bounds.maxLat,\n      lng: bounds.maxLng,\n    },\n  )\n}\n","import Color from 'color'\n\nimport { RM } from './helpers/ramda'\n\nexport enum Colors {\n  yellow = '#FFDB2B',\n  pink = '#FF2B95',\n  blue = '#2441FF',\n  red = '#FF1C1C',\n  green = '#179B12',\n  turquoise = '#2BFFFF',\n  orange = '#FF862B',\n  violet = '#6D4F8C',\n  black = '#000000',\n  greyDarkest = '#080808',\n  greyDark = '#2C2C2C',\n  greyMiddle = '#939393',\n  greyLight = '#EDEDED',\n  white = '#FFFFFF',\n  errorBackground = '#FF1C1C11',\n}\n\nexport const applyAlphaToColor = RM.curry((color: Colors, alphaValue: number) =>\n  Color(color)\n    .alpha(alphaValue)\n    .string(),\n)\n\nexport enum Radiuses {\n  Card = '0.5rem',\n  Button = '0.5rem',\n  TextComponent = '0.25rem',\n}\n\nexport const Spacing = {\n  MarginAroundFormComponents: '0.1rem',\n  Small: '0.25rem',\n  Middle: '0.5rem',\n  LayoutGridCellMargin: '0.5rem',\n  ButtonHeight: 3.4375,\n  DashboardButtonHeight: 6,\n  DefaultInputWidth: 20,\n  DefaultLabelWidth: 7,\n  DefaultSizeUnit: 'rem',\n  ButtonColumnWidthPx: 55,\n  PageHeaderHeight: 4.4375,\n  OrderFlowMenuButtonWidth: 7.375,\n}\n\nexport const FontSizes = {\n  InfoMessageFontSize: '1.375rem',\n  CompactCard: '0.95rem',\n  CompactCardBig: '1rem',\n}\n","import { autorun, observable } from 'mobx'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { mediaMobile } from '../app/Responsive'\nimport { appConfig } from '../config'\nimport { RM } from '../helpers/ramda'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  title: string\n}\n\nconst TitleStyled = styled.h1`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  margin: 0.5rem 0.5rem 0 0.5rem;\n  white-space: nowrap;\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.9);\n  ${mediaMobile`\n    font-size: 1.2rem;\n  `};\n`\n\nconst observableTitles = observable.array<string>([])\n\nautorun(() => {\n  const lastTitle = Array.from(observableTitles).pop()\n  if (lastTitle) {\n    document.title = `${lastTitle} :: ${appConfig.pageTitleSuffix}`\n  } else {\n    document.title = appConfig.pageTitleSuffix\n  }\n})\n\nconst PageTitleDisplay: React.FC = () => (\n  <Observer>\n    {() => <TitleStyled>{observableTitles.join(' - ')}</TitleStyled>}\n  </Observer>\n)\n\nexport class PageTitle extends React.Component<IProps> {\n  static Route = PageTitleRoute\n  static Display = PageTitleDisplay\n  componentDidMount() {\n    observableTitles.push(this.props.title)\n  }\n  componentDidUpdate(prevProps: IProps) {\n    const idx = observableTitles.findIndex(RM.equals(prevProps.title))\n    if (idx >= 0) {\n      observableTitles.splice(idx, 1, this.props.title)\n    }\n  }\n  componentWillUnmount() {\n    observableTitles.remove(this.props.title)\n  }\n  render() {\n    return null\n  }\n}\n\nfunction PageTitleRoute({ title, ...props }: IProps & RouteProps) {\n  return <Route {...props} render={() => <PageTitle title={title} />} />\n}\n","import { types } from 'mobx-state-tree'\n\nconst startsOrEndsWithSeparator = /^[.,]+.*|.*[.,]+$/\n\nexport const DEFAULT_IMPORT = false\nexport const DEFAULT_RAW_QUANTITY = ''\nexport const DEFAULT_QUANTITY = null\nexport const DEFAULT_MAX = Number.MAX_SAFE_INTEGER\nexport const MIN_TRANSFER_QUANTITY = 0\n\nexport const TransferItem = types\n  .model('TransferItem', {\n    id: types.identifier,\n    import: types.optional(types.boolean, DEFAULT_IMPORT),\n    rawQuantity: types.optional(types.string, DEFAULT_RAW_QUANTITY),\n    max: types.optional(types.number, DEFAULT_MAX),\n  })\n  .views(self => ({\n    get quantity() {\n      if (self.rawQuantity.length === 0) {\n        return DEFAULT_QUANTITY\n      }\n      const parsedQuantity = Number(self.rawQuantity.replace(',', '.'))\n      return Number.isNaN(parsedQuantity) ? DEFAULT_QUANTITY : parsedQuantity\n    },\n    get isQuantityValid() {\n      if (this.quantity === null && self.rawQuantity.length > 0) {\n        // there is just a string in the input\n        return false\n      }\n\n      if (self.rawQuantity.match(startsOrEndsWithSeparator)) {\n        // the user input starts or ends with . or ,\n        return false\n      }\n\n      if (this.quantity === null) {\n        // empty input\n        return true\n      }\n\n      const amountUnderflow = this.quantity < MIN_TRANSFER_QUANTITY\n      const amountOverflow = this.quantity > self.max\n      return !amountUnderflow && !amountOverflow\n    },\n  }))\n  .actions(self => ({\n    setRawQuantity(rawQuantity: string) {\n      self.rawQuantity = rawQuantity.trimLeft()\n    },\n    reset() {\n      self.rawQuantity = DEFAULT_RAW_QUANTITY\n      self.import = DEFAULT_IMPORT\n    },\n  }))\n","import Color from 'color'\nimport styled, { css } from 'styled-components/macro'\n\nimport { Colors, Radiuses, Spacing } from '../styling'\n\ninterface IProps {\n  color?: string\n  textColor?: string\n  padding?: number\n  minHeight?: number\n  stretchToParent?: boolean\n}\n\nexport const Card = styled.div`\n  background: ${getBackgroundColor};\n  color: ${getTextColor};\n  border-radius: ${Radiuses.Card};\n  padding: ${getPadding}rem;\n  margin: 0 0 0.5rem 0;\n  min-height: ${getMinHeight};\n  position: relative;\n  ${applyStretchToParentStyle};\n`\n\nCard.displayName = 'Card'\n\nfunction getPadding({ padding = 0.5 }: IProps) {\n  return padding\n}\n\nfunction getMinHeight({ minHeight = 0 }: IProps) {\n  return minHeight + Spacing.DefaultSizeUnit\n}\n\nfunction getBackgroundColor({ color }: IProps) {\n  return Color(color || Colors.greyLight)\n    .alpha(0.8)\n    .lighten(0.4)\n    .string()\n}\n\nfunction getTextColor(props: IProps) {\n  return props.textColor || Colors.black\n}\n\nfunction applyStretchToParentStyle({ stretchToParent = false }: IProps) {\n  if (!stretchToParent) {\n    return ''\n  }\n  return css`\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  `\n}\n","import { useSnackbar as useSnackbarOrig, VariantType } from 'notistack'\nimport React from 'react'\n\nconst successVariant = { variant: 'success' as VariantType }\nconst errorVariant = { variant: 'error' as VariantType }\nconst warningVariant = { variant: 'warning' as VariantType }\nconst infoVariant = { variant: 'info' as VariantType }\n\nexport function useSnackBar() {\n  const { enqueueSnackbar } = useSnackbarOrig()\n  return {\n    enqueueSnackbar,\n    enqueueSuccess: React.useCallback(\n      (errorMessage: string) => enqueueSnackbar(errorMessage, successVariant),\n      [enqueueSnackbar],\n    ),\n    enqueueError: React.useCallback(\n      (errorMessage: string) => enqueueSnackbar(errorMessage, errorVariant),\n      [enqueueSnackbar],\n    ),\n    enqueueWarning: React.useCallback(\n      (errorMessage: string) => enqueueSnackbar(errorMessage, warningVariant),\n      [enqueueSnackbar],\n    ),\n    enqueueInfo: React.useCallback(\n      (errorMessage: string) => enqueueSnackbar(errorMessage, infoVariant),\n      [enqueueSnackbar],\n    ),\n  }\n}\n","import React from 'react'\n\nimport { PageLayoutGridItem } from '../atoms/PageLayoutGridItem'\nimport {\n  IPageLayoutResponsiveProps,\n  PageLayoutResponsive,\n} from './PageLayoutResponsive'\n\ninterface IFullPageLayoutProps extends IPageLayoutResponsiveProps {}\n\nexport const FullPageLayout: React.FC<IFullPageLayoutProps> = ({\n  children,\n  ...props\n}) => (\n  <PageLayoutResponsive {...props}>\n    <PageLayoutGridItem gridColumn=\"span 16\">{children}</PageLayoutGridItem>\n  </PageLayoutResponsive>\n)\n","import React from 'react'\n\nimport { PageTitle } from '../atoms/PageTitle'\nimport { i18n } from '../i18n'\n\nexport const NotFoundPage: React.FC = () => (\n  <>\n    <PageTitle title={i18n.t`Not found`} />\n    <h1>{i18n.t`There is nothing here, sorry!`}</h1>\n  </>\n)\n","import debug from 'debug'\nimport React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\n\nimport { ROUTE_AUTH_LOGIN } from '../segments/login/login.routes'\n\ninterface IRedirectToLoginProps {\n  useOrigin?: boolean\n}\n\nconst log = debug('routing')\n\nexport const RedirectToLogin: React.FC<IRedirectToLoginProps> = ({\n  useOrigin = true,\n}) => (\n  <Route\n    path={ROUTE_AUTH_LOGIN}\n    children={({ match, location }) => {\n      if (match) {\n        return null\n      }\n      log('redirecting to login...')\n      return (\n        <Redirect\n          to={{\n            pathname: ROUTE_AUTH_LOGIN,\n            state: { origin: useOrigin ? location.pathname : '/' },\n          }}\n        />\n      )\n    }}\n  />\n)\n","import { DefaultApolloClient } from '@speedlo/graphql'\nimport debug from 'debug'\nimport { getPath, getRoot, types } from 'mobx-state-tree'\n\nimport { TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    return debug(`model${getPath(self)}`)\n  },\n  get root(): TRootModel {\n    return getRoot(self)\n  },\n  get client(): DefaultApolloClient {\n    return this.root.apolloClient\n  },\n}))\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import { WeekDayEnum } from '../../graph/generated'\n\nexport enum ESpecificHourMode {\n  TIMESPAN = 'TIMESPAN',\n  FULLDAY = 'FULLDAY',\n}\n\nexport interface TBusinessHour {\n  id: ID\n  weekDay: WeekDayEnum\n  openAt: Date\n  closeAt: Date\n}\n\nexport type TSpecificBusinessHoursFormValues = {\n  date: Date\n  openAt: Date\n  closeAt: Date\n  note: string\n}\n","import { isSameDay } from 'date-fns'\nimport { format, formatWithOptions } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\nimport numeral from 'numeral'\n\nimport { FAddressFragment, FUserNameFragment } from '../graph/generated'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const fullDateFormat = 'dddd LL'\nexport const formatFullDate = formatLocale(fullDateFormat)\n\nexport const dateFormat = 'D.M.YYYY'\nexport const formatDate = formatLocale(dateFormat)\n\nexport const dateFormatISO = 'YYYY-MM-DD'\nexport const formatDateISO = format(dateFormatISO)\n\nexport const timeFormat = 'H:mm'\nexport const formatTime = formatLocale(timeFormat)\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const priceFormat = '0,0.[00]'\nexport const formatPrice = price => numeral(price).format(priceFormat)\n\nexport const formatTimeWithoutTodayDate = (time: string) =>\n  isSameDay(time, new Date()) ? formatTime(time) : formatDateTime(time)\n\nexport const formatAddress = (address: FAddressFragment) => {\n  if (!address) {\n    return ''\n  }\n  if (!address.street) {\n    if (address.city && address.houseNumber) {\n      return `${address.city} ${address.houseNumber}, ${address.state}`\n    }\n    if (address.city) {\n      if (address.state) {\n        return `${address.city}, ${address.state}`\n      }\n      return address.city\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n\nexport function formatFullName(user: FUserNameFragment) {\n  return `${user.lastName} ${user.firstName}`.trim()\n}\n","import React from 'react'\n\nimport { Spacing } from '../styling'\nimport { Sizer } from './Sizer'\n\ninterface IProps {\n  className?: string\n}\n\nexport const SizerButton: React.FC<IProps> = ({ children, ...props }) => {\n  return (\n    <Sizer\n      width={Spacing.ButtonHeight}\n      height={Spacing.ButtonHeight}\n      {...props}\n    >\n      {children}\n    </Sizer>\n  )\n}\n","import React from 'react'\n\nexport function useLoadingCache<TValue>(shouldSkip: boolean = false) {\n  const cached = React.useRef<TValue | null>(null)\n\n  // clear cache when skipping\n  React.useEffect(() => {\n    if (shouldSkip) {\n      cached.current = null\n    }\n  }, [shouldSkip])\n\n  const buildValue = (loading: boolean, getNext: () => TValue) => {\n    if (loading && !shouldSkip) {\n      return cached.current\n    } else {\n      const next = getNext()\n      cached.current = next\n      return next\n    }\n  }\n\n  return buildValue\n}\n","import styled from 'styled-components/macro'\n\nimport { Spacing } from '../styling'\n\nexport interface IProps {\n  margin?: string | number\n  bottom?: number\n  left?: number\n  right?: number\n  top?: number\n  className?: string\n}\n\nexport const MarginBox = styled('div')`\n  margin: ${({ margin, top = 0, bottom = 0, left = 0, right = 0 }: IProps) => {\n    if (typeof margin === 'string') {\n      return margin\n    }\n    if (typeof margin === 'number') {\n      return `${margin}${Spacing.DefaultSizeUnit}`\n    }\n    return `${top}${Spacing.DefaultSizeUnit} ${right}${Spacing.DefaultSizeUnit} ${bottom}${Spacing.DefaultSizeUnit} ${left}${Spacing.DefaultSizeUnit}`\n  }};\n`\n","export const ROUTE_SETTINGS = '/settings'\nexport const ROUTE_SETTINGS_MENU = `${ROUTE_SETTINGS}/menu`\nexport const ROUTE_SETTINGS_ZONES = `${ROUTE_SETTINGS}/zones`\nexport const ROUTE_SETTINGS_USER = `${ROUTE_SETTINGS}/user`\nexport const ROUTE_SETTINGS_HOURS = `${ROUTE_SETTINGS}/businesshours`\nexport const ROUTE_SETTINGS_PREFS = `${ROUTE_SETTINGS}/preferences`\n","import styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile } from '../app/Responsive'\n\nexport interface IPageLayoutGridItemProps {\n  gridRow?: string | number\n  gridRowInMobile?: string | number\n  gridRowSpan?: number\n  gridRowSpanInMobile?: number\n  gridColumn?: string | number\n  gridColumnInMobile?: string | number\n  gridColumnSpan?: number\n  gridColumnSpanInMobile?: number\n}\n\nconst gridColumnProperty = ({\n  gridColumn = '1',\n  gridColumnSpan = 1,\n}: IPageLayoutGridItemProps) =>\n  gridColumn.toString().indexOf('/') === -1\n    ? `${gridColumn} / span ${gridColumnSpan}`\n    : gridColumn\n\nconst gridRowProperty = ({\n  gridRow = '1',\n  gridRowSpan = 1,\n}: IPageLayoutGridItemProps) =>\n  gridRow.toString().indexOf('/') === -1\n    ? `${gridRow} / span ${gridRowSpan}`\n    : gridRow\n\nconst gridColumnInMobileProperty = ({\n  gridColumn = '1',\n  gridColumnInMobile = 1,\n  gridColumnSpanInMobile = 16,\n}: IPageLayoutGridItemProps) => {\n  if (gridColumnInMobile.toString().indexOf('/') === -1) {\n    return `${gridColumnInMobile} / span ${gridColumnSpanInMobile}`\n  } else {\n    return gridColumnInMobile\n  }\n}\n\nconst gridRowInMobileProperty = ({\n  gridRow = '1',\n  gridRowInMobile,\n  gridRowSpanInMobile = 1,\n}: IPageLayoutGridItemProps) => {\n  if (gridRowInMobile === undefined) {\n    return 'unset'\n  }\n  if (gridRowInMobile.toString().indexOf('/') === -1) {\n    return `${gridRowInMobile} / span ${gridRowSpanInMobile}`\n  } else {\n    return gridRowInMobile\n  }\n}\n\nexport const PageLayoutGridItem = styled.div<IPageLayoutGridItemProps>`\n  ${mediaDesktop`\n    grid-column: ${gridColumnProperty};\n    grid-row: ${gridRowProperty};\n  `};\n  ${mediaMobile`\n    grid-column: ${gridColumnInMobileProperty};\n    grid-row: ${gridRowInMobileProperty};\n  `};\n`\n","import styled, { css } from 'styled-components/macro'\n\nimport { Spacing } from '../styling'\n\ninterface IProps {\n  isForIconDashboard: boolean\n}\n\nconst getGridTemplatesRows = (props: IProps) =>\n  props.isForIconDashboard\n    ? `repeat(4, ${Spacing.DashboardButtonHeight + Spacing.DefaultSizeUnit})`\n    : 'repeat(16, auto)'\n\nconst getGridGap = (props: IProps) =>\n  props.isForIconDashboard ? `${Spacing.Middle}` : `0 ${Spacing.Small}`\n\nconst getDashboardButtonHeight = (props: IProps) =>\n  props.isForIconDashboard &&\n  css`\n    height: ${`${Spacing.DashboardButtonHeight}${Spacing.DefaultSizeUnit}`};\n  `\n\nexport const PageLayoutGrid = styled.div<IProps>`\n  display: grid;\n  width: 100vw;\n  max-width: 100%;\n  grid-gap: ${getGridGap};\n  grid-template-columns: repeat(16, 1fr);\n  grid-template-rows: ${getGridTemplatesRows};\n  padding: 0 ${Spacing.Small} ${Spacing.Small} ${Spacing.Small};\n  grid-auto-flow: row dense;\n\n  & > div {\n    ${getDashboardButtonHeight};\n  }\n`\n","import { VolumeOff, VolumeUp } from '@material-ui/icons'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\nimport { useRoot } from './RootProvider'\nimport { SizerButton } from './SizerButton'\n\nexport const SoundControl: React.FC = () => {\n  const { user } = useRoot()\n  return useObserver(() => (\n    <SizerButton>\n      <TouchButton\n        id=\"sound-control-button\"\n        color={user.soundEnabled ? Colors.green : Colors.red}\n        icon={user.soundEnabled ? VolumeUp : VolumeOff}\n        iconSize={2}\n        onClick={() => {\n          user.controlSound(!user.soundEnabled)\n        }}\n      />\n    </SizerButton>\n  ))\n}\n","import { SECOND, useTimer } from '@speedlo/hooks'\nimport { DF } from '@speedlo/tools'\nimport React from 'react'\n\ninterface IProps {}\n\nexport const LiveClock: React.FC<IProps> = props => {\n  const now = useTimer({ enabled: true, interval: SECOND })\n  return <div className=\"clock\">{DF.format(now, 'H:mm:ss')}</div>\n}\n","import { ExitToApp } from '@material-ui/icons'\nimport { useReaction } from '@speedlo/hooks'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile } from '../app/Responsive'\nimport { useRoot } from '../atoms/RootProvider'\nimport { QLogoutWidgetUser, useQLogoutWidget } from '../graph/generated'\nimport { useLoadingCache } from '../hooks/useLoadingCache'\nimport { i18n } from '../i18n'\nimport { LiveClock } from '../molecules/LiveClock'\nimport { ROUTE_AUTH_LOGOUT } from '../segments/login/login.routes'\nimport { Colors, Spacing } from '../styling'\n\nconst StyledLogoutWidget = styled.div`\n  color: ${Colors.greyLight};\n  ${mediaDesktop`\n    margin-left: ${Spacing.Middle};\n  `};\n  ${mediaMobile`\n    margin-left: ${Spacing.Small};\n  `};\n  &:hover {\n    color: ${Colors.white};\n  }\n  & a {\n    white-space: nowrap;\n  }\n  & span.name {\n    color: ${Colors.greyLight};\n    text-decoration: none;\n    font-weight: lighter;\n    position: relative;\n    display: inline-block;\n    max-width: 10rem;\n    text-align: right;\n    ${mediaDesktop`\n    top: 0.6rem;\n    `}\n    ${mediaMobile`\n       top: 0.3rem;\n    `}\n  }\n\n  & svg {\n    color: ${Colors.greyLight};\n    vertical-align: top;\n    margin: 0.4rem;\n    ${mediaMobile`\n       margin: 0.2rem;\n    `}\n  }\n\n  & div.clock {\n    font-size: 1.3rem;\n  }\n`\n\nexport const LogoutWidget = observer(() => {\n  const { auth } = useRoot()\n  const { data, loading, refetch } = useQLogoutWidget(\n    { id: auth.userId! },\n    { skip: !auth.isAuthenticated, fetchPolicy: 'cache-first' },\n  )\n\n  useReaction(\n    () => auth.userId,\n    userId => {\n      if (userId !== null) {\n        refetch({ id: userId })\n      }\n    },\n  )\n\n  const getUser = useLoadingCache<QLogoutWidgetUser>(!auth.isAuthenticated)\n\n  const user = getUser(loading, () => data.user)\n\n  const displayName =\n    user === null\n      ? i18n.t`Not logged in`\n      : `${data.user.firstName} ${data.user.lastName}`\n\n  return (\n    <StyledLogoutWidget data-testid=\"logout-widget\">\n      <Link to={ROUTE_AUTH_LOGOUT}>\n        <span className=\"name\">{displayName}</span>\n        <ExitToApp />\n      </Link>\n      <LiveClock />\n    </StyledLogoutWidget>\n  )\n})\n","import { ChevronLeft, Home } from '@material-ui/icons'\nimport { useRouterContext } from '@speedlo/hooks'\nimport Color from 'color'\nimport React, { MouseEvent } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { ROUTE_MAIN } from '../segments/dashboard/dashboard.routes'\nimport { Colors, Radiuses, Spacing } from '../styling'\n\ninterface IHomeButtonProps {\n  iconColor?: Colors\n  color?: Colors\n  disabled?: boolean\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n  goBack?: boolean\n  backRoute?: string\n}\n\nconst applyAlpha = (alphaValue: number) => (props: IHomeButtonProps) =>\n  Color(props.color)\n    .alpha(alphaValue)\n    .string()\n\nconst HomeButtonStyled = styled.button`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 0 0 ${Radiuses.Button} 0 !important;\n  height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  margin: 0;\n  padding: 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  font-size: 1rem;\n  transition-duration: 0.2s;\n\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nexport const HomeButton: React.FC<IHomeButtonProps> = ({\n  color = Colors.greyMiddle,\n  iconColor = Colors.white,\n  goBack = false,\n  backRoute,\n  ...props\n}) => {\n  const { history } = useRouterContext()\n  if (goBack) {\n    return (\n      <HomeButtonStyled\n        type=\"button\"\n        color={color}\n        onClick={() => {\n          if (backRoute) {\n            history.push(backRoute)\n          } else {\n            history.goBack()\n          }\n        }}\n        {...props}\n      >\n        <Icon icon={ChevronLeft} color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    )\n  }\n  return (\n    <Link to={ROUTE_MAIN}>\n      <HomeButtonStyled type=\"button\" color={color} {...props}>\n        <Icon icon={Home} color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    </Link>\n  )\n}\n","import React from 'react'\nimport useWindowScroll from 'react-use/lib/useWindowScroll'\nimport styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile, mediaSmallMobile } from '../app/Responsive'\nimport { PageLayoutGrid } from '../atoms/PageLayoutGrid'\nimport { PageTitle } from '../atoms/PageTitle'\nimport { SoundControl } from '../atoms/SoundControl'\nimport { LogoutWidget } from '../organisms/LogoutWidget'\nimport { SecureRoute } from '../routes/SecureRoute'\nimport { Spacing } from '../styling'\nimport { HomeButton } from './HomeButton'\n\ninterface ICommonProps {\n  topContent?: React.ReactNode\n}\n\ninterface IStyledProps extends ICommonProps {\n  isScrolledDown: boolean\n}\n\nexport interface IPageLayoutResponsiveProps extends ICommonProps {\n  pageTitle?: string\n  hideLogoutWidget?: boolean\n  showSoundControl?: boolean\n  showHomeButton?: boolean\n  useBackButton?: boolean\n  backRoute?: string\n  isForIconDashboard?: boolean\n  className?: string\n}\n\nconst StyledPageLayoutResponsive = styled.div<IStyledProps>`\n  .page-header {\n    position: sticky;\n    top: 0;\n    width: 100vw;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    z-index: 30;\n    height: ${Spacing.PageHeaderHeight + Spacing.DefaultSizeUnit};\n    background-color: ${({ isScrolledDown }) =>\n      isScrolledDown ? 'rgba(0, 0, 0, 0.7)' : 'initial'};\n  }\n\n  .home-button-container {\n    flex: 0 0 auto;\n    z-index: 100;\n  }\n\n  .menu-container {\n    flex: 1 1 0;\n    align-self: flex-start;\n    z-index: 80;\n    display: flex;\n    justify-content: flex-end;\n    flex-wrap: wrap;\n    overflow: hidden;\n    ${mediaDesktop`\n    height: 4rem;\n    `};\n    ${mediaMobile`\n    height: 3.7rem;\n    `};\n  }\n\n  .menu-item-title {\n    flex: 1 1 0;\n    ${mediaMobile`\n      display: ${({ topContent }: IPageLayoutResponsiveProps) =>\n        topContent !== undefined ? 'none' : 'initial'};\n    `};\n  }\n\n  .menu-item {\n    ${mediaDesktop`\n      margin: ${Spacing.Middle} ${Spacing.Small};\n    `};\n    ${mediaMobile`\n     margin: 0 ${Spacing.Small};\n    `};\n  }\n\n  .menu-item-logout {\n    ${mediaSmallMobile`\n      display: ${({ topContent }: IPageLayoutResponsiveProps) =>\n        topContent !== undefined ? 'none' : 'initial'};\n    `};\n  }\n`\n\nexport const PageLayoutResponsive: React.FC<IPageLayoutResponsiveProps> = ({\n  pageTitle = '',\n  hideLogoutWidget = false,\n  showSoundControl = false,\n  showHomeButton = true,\n  useBackButton = false,\n  backRoute,\n  children,\n  topContent,\n  isForIconDashboard = false,\n  className,\n}) => {\n  const { y } = useWindowScroll()\n\n  return (\n    <StyledPageLayoutResponsive\n      topContent={topContent}\n      isScrolledDown={y > 10}\n      className={className}\n    >\n      {pageTitle && <PageTitle title={pageTitle} />}\n\n      <div className=\"page-header\">\n        <div className=\"home-button-container\">\n          {showHomeButton ? (\n            <HomeButton goBack={useBackButton} backRoute={backRoute} />\n          ) : null}\n        </div>\n\n        <div className=\"menu-container\">\n          <div className=\"menu-item-title\">\n            <PageTitle.Display />\n          </div>\n\n          <div className=\"menu-item\">{topContent}</div>\n\n          {showSoundControl && (\n            <div className=\"menu-item\">\n              <SoundControl />\n            </div>\n          )}\n\n          <div className=\"menu-item-logout\">\n            {!hideLogoutWidget && (\n              <SecureRoute path=\"/\" component={LogoutWidget} redirect={false} />\n            )}\n          </div>\n        </div>\n      </div>\n      <PageLayoutGrid isForIconDashboard={isForIconDashboard}>\n        {children}\n      </PageLayoutGrid>\n    </StyledPageLayoutResponsive>\n  )\n}\n","export const ROUTE_OVERVIEW_DASHBOARD = '/overview'\nexport const ROUTE_OVERVIEW_CLOSURE = `${ROUTE_OVERVIEW_DASHBOARD}/closure`\nexport const ROUTE_OVERVIEW_CLOSURE_HISTORY = `${ROUTE_OVERVIEW_CLOSURE}/history`\nexport const ROUTE_OVERVIEW_STATS_SALES = `${ROUTE_OVERVIEW_DASHBOARD}/sales`\nexport const ROUTE_OVERVIEW_STATS_ORDERS = `${ROUTE_OVERVIEW_DASHBOARD}/orders`\nexport const ROUTE_OVERVIEW_STATS_STOCK = `${ROUTE_OVERVIEW_DASHBOARD}/stock`\n","export const ROUTE_ORDER_OVERVIEW = '/order'\nexport const ROUTE_ORDER_CREATE = `${ROUTE_ORDER_OVERVIEW}/create`\nexport const ROUTE_ORDER_MAP = `${ROUTE_ORDER_OVERVIEW}/map`\n","export const ROUTE_STOCK = '/stock'\nexport const ROUTE_STOCK_OVERVIEW = `${ROUTE_STOCK}/overview`\nexport const ROUTE_STOCK_DEPOSIT = `${ROUTE_STOCK}/deposit`\nexport const ROUTE_STOCK_TRANSFER = `${ROUTE_STOCK}/transfer`\nexport const ROUTE_STOCK_STATS = `${ROUTE_STOCK}/stats`\n","import { RM } from '@speedlo/tools'\n\nexport function isPartialMatch(searchValue: string) {\n  if (!searchValue) {\n    return RM.T\n  }\n  const search = searchValue.toLocaleLowerCase()\n  return (propValue: string) => {\n    if (!propValue) {\n      return true\n    }\n    return propValue.toLocaleLowerCase().includes(search)\n  }\n}\n","import { useAutorun, useInterval, useReaction } from '@speedlo/hooks'\nimport { useAsObservableSource } from 'mobx-react-lite'\nimport useAudio from 'react-use/lib/useAudio'\n\nimport { useRoot } from '../atoms/RootProvider'\n\ninterface IOptions {\n  soundUrl: string\n  shouldPlay: boolean\n  intervalSec: number\n}\n\nexport function useIntervalSound({\n  soundUrl,\n  shouldPlay,\n  intervalSec,\n}: IOptions) {\n  const [audio, state, controls] = useAudio({\n    src: soundUrl,\n    autoPlay: false,\n    loop: false,\n  })\n\n  const { user, config } = useRoot()\n  const source = useAsObservableSource({\n    shouldPlay,\n    isPlaying: state.isPlaying,\n  })\n\n  const canPlay = () => {\n    return config.soundEnabled && user.soundEnabled\n  }\n\n  const playIfYouCan = () => {\n    if (canPlay() && source.shouldPlay) {\n      controls.volume(0.5)\n      controls.play()\n    }\n  }\n\n  useInterval(playIfYouCan, intervalSec * 1000)\n\n  useReaction(() => source.shouldPlay, playIfYouCan)\n\n  useAutorun(() => {\n    if (!canPlay() || !source.shouldPlay) {\n      controls.pause()\n      controls.seek(0)\n    }\n  })\n\n  return audio\n}\n","export const ROUTE_KITCHEN = '/kitchen'\nexport const ROUTE_KITCHEN_COMPLETION = `${ROUTE_KITCHEN}/completion`\n","import moment from 'moment'\n\nexport async function changeMomentLocale(lang: string) {\n  if (lang === 'en') {\n    moment.locale(lang)\n    return\n  }\n  const locale = await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"moment-[index]\" */\n    `moment/locale/${lang}`\n  )\n  moment.updateLocale(lang, locale)\n}\n\nexport { moment }\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { useReactionNow } from '@speedlo/hooks'\nimport { DETECTORS, LocaleResolver, TRANSFORMERS } from 'locales-detector'\nimport React from 'react'\n\nimport { useRoot } from './atoms/RootProvider'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\nimport { changeMomentLocale } from './locale/moment'\nimport { changeNumeralLocale } from './locale/numeral'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC = ({ children }) => {\n  const { user } = useRoot()\n  const [, forceUpdate] = React.useState(0)\n\n  useReactionNow(\n    () => user.language,\n    lang => {\n      const language = lang || detectLanguage()\n      setupLanguage(language).then(success => {\n        if (success) {\n          forceUpdate(i => i + 1)\n        }\n      })\n    },\n  )\n\n  return (\n    <I18nProvider i18n={i18n}>{React.Children.only(children)}</I18nProvider>\n  )\n}\n\nexport function detectLanguage() {\n  const resolver = new LocaleResolver(\n    [new DETECTORS.NavigatorDetector()],\n    [new TRANSFORMERS.LanguageOnlyTransformer()],\n  )\n  const languages = resolver.getLocales()\n  logLang(`detected languages ${languages.join('; ')}`)\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nfunction setupLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang(`language ${lang} is not supported`)\n    return Promise.resolve(false)\n  }\n  return Promise.all([\n    loadCatalog(lang),\n    changeNumeralLocale(lang),\n    changeMomentLocale(lang),\n  ]).then(() => {\n    i18n.activate(lang)\n    logLang(`setup done for ${lang}`)\n    return true\n  })\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang(`loaded catalog ${lang}`)\n}\n","import debug from 'debug'\n\n// @ts-ignore\ndebug.useColors = () => !process.env.REACT_APP_STAGE\n\nexport const logMain = debug('main')\nexport const logDebug = debug('debug')\nexport const logAuth = debug('auth')\nexport const logPersistence = debug('persistence')\nexport const logBootstrap = debug('bootstrap')\nexport const logAccess = debug('access')\nexport const logGraph = debug('graph')\nexport const logForm = debug('form')\nexport const logSentry = debug('sentry')\nexport const logLang = debug('lang')\nexport const logUpdate = debug('update')\nexport const logSound = debug('sound')\n// tslint:disable-next-line:no-console\nexport const logRouting = console.debug\n// tslint:disable-next-line:no-console\nexport const logTest = console.log\n// tslint:disable-next-line:no-console\nexport const logError = console.error\n","import React from 'react'\nimport ReactResponsive from 'react-responsive'\nimport { css } from 'styled-components/macro'\n\nexport const mobileBreakpoint = 600\nexport const mobileSmallBreakpoint = 375\nexport const desktopBreakpoint = 1300\n\nexport const Desktop = props => (\n  <ReactResponsive {...props} minWidth={mobileBreakpoint} />\n)\nexport const Mobile = props => (\n  <ReactResponsive {...props} maxWidth={mobileBreakpoint} />\n)\n\nexport const mediaMobile = (...args) => css`\n  @media (max-width: ${mobileBreakpoint}px) {\n    // @ts-ignore\n    ${css(...args)}\n  }\n`\nexport const mediaSmallMobile = (...args) => css`\n  @media (max-width: ${mobileSmallBreakpoint}px) {\n    // @ts-ignore\n    ${css(...args)}\n  }\n`\nexport const mediaDesktop = (...args) => css`\n  @media (min-width: ${mobileBreakpoint + 1}px) {\n    // @ts-ignore\n    ${css(...args)}\n  }\n`\n\nexport function useResponsive() {\n  const [state, setState] = React.useState({\n    isMobile: false,\n    isSmallMobile: false,\n    isDesktop: false,\n    isTablet: true,\n  })\n\n  React.useLayoutEffect(() => {\n    update() // initial set\n\n    window.addEventListener('resize', update)\n    return () => {\n      window.removeEventListener('resize', update)\n    }\n\n    function update() {\n      const { innerWidth } = window\n      const isMobile = innerWidth <= mobileBreakpoint\n      const isSmallMobile = innerWidth <= mobileSmallBreakpoint\n      const isDesktop = innerWidth >= desktopBreakpoint\n      const isTablet = !isMobile && !isDesktop\n      setState({ isMobile, isSmallMobile, isDesktop, isTablet })\n    }\n  }, [])\n\n  return state\n}\n","import {\n  createAuthLink,\n  createDefaultApolloClient,\n  createLogLink,\n  createNetworkLink,\n  createOfflineLink,\n  createRetryLink,\n} from '@speedlo/graphql'\n\nimport { appConfig } from '../config'\nimport { TRootModel } from '../models/RootModel'\n\nexport function createApolloClient(root: TRootModel) {\n  return createDefaultApolloClient(\n    createAuthLink({\n      enableTokenCache: false,\n      getToken: () => root.auth.token!,\n      onInvalidToken: () => root.auth.invalidate(),\n    }),\n    createLogLink({ enabled: process.env.REACT_APP_STAGE !== 'prod' }),\n    createRetryLink(),\n    createOfflineLink(),\n    // Warning: When using upload in the mutation, the batching has to be disabled!\n    createNetworkLink({ endpoint: appConfig.endpoint, useUploads: true }),\n  )\n}\n\nexport const disableBatching = {\n  context: {\n    noBatch: true,\n  },\n}\n","import numeral from 'numeral'\n\nexport async function changeNumeralLocale(lang: string) {\n  if (lang === 'en') {\n    numeral.locale(lang)\n    return\n  }\n  await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"numeral-[index]\" */\n    `numeral/locales/${lang}`\n  )\n  numeral.locale(lang)\n}\n\nexport const numberRx = /^\\d[\\d.,\\s]*$/\n\nexport function validateNumber(input: string) {\n  return numberRx.test(input)\n}\n\nexport { numeral }\n","import { createContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const RootContext = createContext<TRootModel | undefined>(undefined)\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersistence } from './logger'\n\nconst persistenceKey = appConfig.persistenceKey\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = (snapshot: object) =>\n    localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersistence('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersistence('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersistence('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { Sentry } from '@speedlo/sentry'\nimport { getParent, Instance } from 'mobx-state-tree'\n\nimport { appConfig } from '../../../config'\nimport { i18n } from '../../../i18n'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TLoginProviderModel } from './LoginProviderModel'\n\nconst getLoginUrl = ({ username, password }: Dictionary<string>) =>\n  `${appConfig.endpoint}/users/token?username=${username}&password=${password}`\n\nexport const PasswordLoginModel = BaseModel.named('PasswordLogin')\n  .volatile(() => ({\n    errorCode: '',\n    errorMessage: '',\n  }))\n  .views(self => ({\n    get hasFailed() {\n      return Boolean(self.errorCode)\n    },\n  }))\n  .actions(self => ({\n    setFailure(code: string, message: string) {\n      self.errorCode = code\n      self.errorMessage = message\n    },\n    setSuccess(token: string, userId: string) {\n      const provider = getParent<TLoginProviderModel>(self)\n      provider.authenticate(token, userId)\n    },\n  }))\n  .actions(self => ({\n    async requestToken(username: string, password: string) {\n      const url = getLoginUrl({ username, password })\n      const fetch: TFetch = window.fetch\n      try {\n        const response = await fetch(url, {\n          headers: {\n            Accept: 'application/json',\n          },\n        })\n        const payload = await response.json()\n        self.log('received payload %j', payload)\n\n        if (response.status !== 200) {\n          self.setFailure(payload.code, payload.error)\n          self.log('token request failed for username %s', username)\n        } else {\n          self.setSuccess(payload.token, String(payload.userId))\n          self.log(\n            'token request success for username %s [%s]',\n            username,\n            payload.userId,\n          )\n        }\n      } catch (err) {\n        self.setFailure(\n          'FAIL',\n          i18n.t`Cannot login right now, please try again later`,\n        )\n        Sentry.withScope(scope => {\n          scope.setExtra('username', username)\n          scope.setLevel(Sentry.Severity.Debug)\n          Sentry.captureException(err)\n        })\n      }\n    },\n  }))\n\nexport interface TPasswordLoginModel\n  extends Instance<typeof PasswordLoginModel> {}\n","import { getParent, Instance, types } from 'mobx-state-tree'\n\nimport { TAuthModel } from '../../../models/AuthModel'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { PasswordLoginModel } from './PasswordLoginModel'\n\nexport const LoginProviderModel = BaseModel.named('LoginProvider')\n  .props({\n    passwordLogin: types.optional(PasswordLoginModel, {}),\n  })\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      const auth = getParent<TAuthModel>(self)\n      auth.authenticate(token, userId)\n    },\n  }))\n\nexport interface TLoginProviderModel\n  extends Instance<typeof LoginProviderModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { LoginProviderModel } from '../segments/login/models/LoginProviderModel'\nimport { BaseModel } from './BaseModel'\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    userId: types.maybeNull(types.string),\n    token: types.maybeNull(types.string),\n    provider: types.optional(LoginProviderModel, {}),\n  })\n  .views(self => ({\n    get isAuthenticated() {\n      return self.token !== null\n    },\n    get isAuthenticatedUser() {\n      return this.isAuthenticated && self.userId !== null\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      self.log('authenticated with id %s', userId)\n    },\n    invalidate() {\n      self.token = null\n      self.userId = null\n      if (self.client) {\n        self.client.cache.reset()\n      }\n      self.log('invalidated authentication')\n    },\n  }))\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { BaseModel } from '../models/BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  soundEnabled: true,\n  orderListPollIntervalSec: 60,\n  orderListSoundIntervalSec: 60,\n})\n","import { idPropEq } from '@speedlo/tools'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\n\nimport {\n  FCompanyBranchBrand,\n  FCompanyBranchFragment,\n  QUserBootstrapAccess,\n  QUserBootstrapFields,\n  QUserBootstrapPermissions,\n  QUserBootstrapUser,\n} from '../graph/generated'\nimport { RM } from '../helpers/ramda'\nimport { BaseModel } from '../models/BaseModel'\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    soundVolume: types.optional(types.number, 25),\n    soundIgnore: false,\n    language: types.maybeNull(types.string),\n  })\n  .volatile(() => ({\n    isLoaded: false,\n    branches: [] as RoA<FCompanyBranchFragment>,\n    brands: [] as RoA<FCompanyBranchBrand>,\n    soundEnabled: false,\n    access: null as Maybe<IUserAccess>,\n    permissions: {\n      canCancelOrders: false,\n      canCreateOrder: false,\n    } as QUserBootstrapPermissions,\n  }))\n  .views(self => ({\n    get branchesId() {\n      return self.branches.map(R.prop('id'))\n    },\n    get defaultBranch() {\n      if (self.branches.length === 0) {\n        throw new Error('No user branches available to get defaultBranchId')\n      }\n      return self.branches[0]\n    },\n    get hasSingleBranch() {\n      return self.branches.length === 1\n    },\n    findBranchById(branchId: ID) {\n      return self.branches.find(idPropEq(branchId))\n    },\n    filterBranches(predicate: (value: FCompanyBranchFragment) => boolean) {\n      return self.branches.filter(predicate)\n    },\n    canQuery(queryName: string) {\n      return (\n        self.access !== null && self.access.queries.has(queryName.toLowerCase())\n      )\n    },\n    canMutate(mutationName: string) {\n      return (\n        self.access !== null &&\n        self.access.mutations.has(mutationName.toLowerCase())\n      )\n    },\n    get isReady(): boolean {\n      return self.isLoaded || !self.root.auth.isAuthenticated\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.isLoaded = false\n      self.language = null\n      self.branches = []\n      self.brands = []\n      self.access = null\n    },\n    applyUserData(user: QUserBootstrapUser) {\n      self.branches = user.branches\n      self.brands = RM.uniqBy(\n        RM.prop('id'),\n        user.branches.map(RM.prop('brand')),\n      )\n    },\n    applyPermissions(permissions: QUserBootstrapPermissions) {\n      self.permissions = permissions\n    },\n    applyAccess(access: QUserBootstrapAccess) {\n      const makeSet = (fields: RoA<QUserBootstrapFields>) =>\n        new Set(\n          fields.map(\n            RM.compose(\n              RM.toLower,\n              RM.prop('name'),\n            ),\n          ),\n        )\n\n      self.access = {\n        queries: makeSet(access.queries.fields ? access.queries.fields : []),\n        mutations: makeSet(\n          access.mutations && access.mutations.fields\n            ? access.mutations.fields\n            : [],\n        ),\n        subscriptions: makeSet(\n          access.subscriptions && access.subscriptions.fields\n            ? access.subscriptions.fields\n            : [],\n        ),\n      }\n    },\n    finishBootstrap() {\n      self.isLoaded = true\n    },\n    setLanguage(lang: string) {\n      self.language = lang\n    },\n    controlSound(enabled: boolean = true, ignore: boolean = false) {\n      self.soundEnabled = enabled\n      self.soundIgnore = ignore\n    },\n    setSoundVolume(volume: number) {\n      self.soundVolume = volume\n    },\n  }))\n\ninterface IUserAccess {\n  queries: Set<string>\n  mutations: Set<string>\n  subscriptions: Set<string>\n}\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import { fakerCZ } from '@speedlo/testing/dist/faker'\n\nexport const faker = fakerCZ\n","import { isoDate } from '@speedlo/graphql'\nimport { startOfMinute } from 'date-fns'\nimport _ from 'lodash'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { ISuggestion } from '../../../components/AddressSuggest'\nimport {\n  DeliveryTypeEnum,\n  FCompanyBranchFragment,\n  MCreateOrderAcceptVariables,\n  MCreateOrderNewVariables,\n  MCreateOrderUpdateVariables,\n  PaymentGateEnum,\n  PaymentTypeEnum,\n} from '../../../graph/generated'\nimport { GOrderVam, SOrderCall } from '../../../graph/types'\nimport { faker } from '../../../helpers/faker'\nimport { formatAddress } from '../../../helpers/formats'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\n\nexport interface IOrderSidedishControlResult {\n  sidedishes: RoA<ID>\n  isConfirmed: boolean\n}\n\nexport interface ICall extends Omit<SOrderCall.Call, 'isRinging' | 'eventId'> {\n  eventId?: ID\n}\n\nexport interface IOrderFormValues {\n  deliveryType: DeliveryTypeEnum.Messenger | DeliveryTypeEnum.Pickup\n  deliverAt?: Date\n  phone?: string\n  phonePrefix?: string\n  firstName?: string\n  lastName?: string\n  email?: string\n  note?: string\n  paymentMethod?: MaybeID\n}\n\ninterface IVolatileProps {\n  orderId: MaybeID\n  call?: ICall\n  deliveryAddress?: ISuggestion\n  deliveryMinutes?: number\n  // ! remove next 2 lines when BE is ready to accept paymentMethodID in finishOrder\n  paymentTypeEnum: Maybe<PaymentTypeEnum>\n  paymentGateEnum: Maybe<PaymentGateEnum>\n  minimalPrice?: string\n  notDeliveryLocation: boolean\n  values: IOrderFormValues\n  fakeValues?: Partial<IOrderFormValues>\n  fakeAddress?: ISuggestion\n  vamCustomer: Maybe<GOrderVam.VamCustomer>\n  sidedishMode: 'none' | 'recipe' | 'item'\n  sidedishRootId?: ID\n  sidedishSelection?: RoA<ID>\n}\n\nexport const CreateOrderModel = BaseModel.named('CreateOrder')\n  .props({\n    branchId: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(getDefaultProps)\n  .actions(self => ({\n    invalidate() {\n      self.branchId = undefined\n      Object.assign(self, getDefaultProps())\n    },\n  }))\n  .views(self => ({\n    get currentBranch(): FCompanyBranchFragment {\n      return (\n        self.root.user.branches.find(RM.propEq('id', self.branchId)) ||\n        self.root.user.defaultBranch\n      )\n    },\n  }))\n  .views(self => ({\n    get deliveryType() {\n      return self.values.deliveryType\n    },\n    get isDelivery() {\n      return self.values.deliveryType === DeliveryTypeEnum.Messenger\n    },\n    get deliverAt() {\n      return (self.values.deliverAt && new Date(self.values.deliverAt)) || null\n    },\n    get deliverAtIso() {\n      return (this.deliverAt && isoDate(startOfMinute(this.deliverAt))) || null\n    },\n    get hasAddress() {\n      return Boolean(self.deliveryAddress || self.fakeAddress)\n    },\n    get gps() {\n      if (this.isDelivery && this.hasAddress) {\n        if (self.deliveryAddress && self.deliveryAddress.gps) {\n          return clearGps(self.deliveryAddress.gps)\n        } else if (self.fakeAddress && self.fakeAddress.gps) {\n          return clearGps(self.fakeAddress.gps)\n        }\n      }\n      return { ...clearGps(self.currentBranch.gps) }\n    },\n    get paymentType() {\n      return self.paymentTypeEnum ? self.paymentTypeEnum : PaymentTypeEnum.Cash\n    },\n    get paymentGate() {\n      return self.paymentGateEnum ? self.paymentGateEnum : PaymentGateEnum.Cash\n    },\n    get phone() {\n      if (self.values.phone !== undefined) {\n        return self.values.phone\n      }\n      return self.call ? self.call.phone : ''\n    },\n    get phonePrefix() {\n      if (self.values.phonePrefix !== undefined) {\n        return self.values.phonePrefix\n      }\n      if (self.call) {\n        return self.call.prefix\n      }\n      if (self.currentBranch.address.country) {\n        return self.currentBranch.address.country.phonePrefix\n      }\n      return '+'\n    },\n    get customer() {\n      const formValues = this.formValues as IOrderFormValues\n      return {\n        firstName: formValues.firstName,\n        lastName: formValues.lastName,\n        emails: formValues.email ? [{ email: formValues.email }] : null,\n        phones: formValues.phone\n          ? [\n              {\n                phone: `${formValues.phonePrefix}${formValues.phone}`,\n              },\n            ]\n          : null,\n      }\n    },\n    get formValues() {\n      if (self.vamCustomer !== null && self.vamCustomer.isFound) {\n        const { firstName, lastName, email, lastOrder } = self.vamCustomer\n        return _.defaults(\n          { ...self.values },\n          {\n            phone: this.phone,\n            phonePrefix: this.phonePrefix,\n            firstName,\n            lastName,\n            email,\n            note: (lastOrder && lastOrder.note) || '',\n          },\n        )\n      }\n      if (self.fakeValues) {\n        return _.defaults({ ...self.values }, { ...self.fakeValues })\n      }\n      return _.defaults(\n        { ...self.values },\n        { phone: this.phone, phonePrefix: this.phonePrefix },\n      )\n    },\n    get hasOrder() {\n      return self.orderId !== null\n    },\n  }))\n  .views(self => ({\n    get createOrderVariables(): MCreateOrderNewVariables {\n      return {\n        branchId: self.currentBranch.id,\n        deliveryType: self.values.deliveryType,\n        deliverAt: self.deliverAtIso,\n        callEventId: self.call && self.call.eventId,\n        gps: self.gps,\n      }\n    },\n    get updateOrderVariables(): MCreateOrderUpdateVariables {\n      return {\n        orderId: self.orderId!,\n        deliveryType: self.deliveryType,\n        deliverAt: self.deliverAtIso,\n        customer: self.customer,\n        gps: self.gps,\n      }\n    },\n    get acceptOrderVariables(): MCreateOrderAcceptVariables {\n      return {\n        orderId: self.orderId!,\n        customer: self.customer,\n        deliverAt: self.deliverAtIso,\n        note: self.formValues.note,\n        paymentType: self.paymentType,\n        paymentGate: self.paymentGate,\n      }\n    },\n  }))\n  .actions(self => ({\n    resetOrder() {\n      self.orderId = null\n    },\n    resetModel() {\n      Object.assign(self, getDefaultProps())\n    },\n    setOrder(orderId: ID) {\n      self.orderId = orderId\n      return orderId\n    },\n  }))\n  .actions(self => ({\n    useLocation(address: ISuggestion) {\n      self.deliveryAddress = address\n    },\n    clearLocation() {\n      self.deliveryAddress = undefined\n    },\n    setMinimalPrice(price: string | undefined) {\n      self.minimalPrice = price\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    userIsCalling(call: ICall | undefined) {\n      self.call = call\n    },\n    setDeliveryMinutes(minutes: number | undefined) {\n      self.deliveryMinutes = minutes\n    },\n    setPaymentValues(\n      paymentType: Maybe<PaymentTypeEnum>,\n      paymentGate: Maybe<PaymentGateEnum>,\n    ) {\n      // ! remove this action when BE is ready to accept paymentMethodID in finishOrder\n      self.paymentTypeEnum = paymentType\n      self.paymentGateEnum = paymentGate\n    },\n    updateFormValues(\n      values: IOrderFormValues,\n      touched: { [K in keyof IOrderFormValues]?: boolean },\n    ) {\n      self.values = {\n        deliveryType: values.deliveryType,\n        ..._.pick(values, Object.keys(touched)),\n        deliverAt: values.deliverAt,\n      }\n      self.log('updated values: %j', self.values)\n    },\n    updateFromVam(vamCustomer: Maybe<GOrderVam.VamCustomer>) {\n      self.vamCustomer = vamCustomer\n      self.log('vam customer: %j', vamCustomer)\n    },\n    updateFormWithFakeValues() {\n      self.fakeValues = {\n        firstName: faker.name.firstName(),\n        lastName: faker.name.lastName(),\n        email: faker.internet.email(),\n        phone: faker.phone.phoneNumberFormat(3).replace(/\\s/g, ''),\n        phonePrefix: '+420',\n        note: faker.lorem.sentence().slice(0, 50 - 1),\n      }\n      self.fakeAddress = {\n        address: formatAddress({\n          city: 'Hradec Králové',\n          street: 'Opletalova',\n          houseNumber: '334/2',\n          state: '',\n        }),\n        gps: {\n          latitude: 50.2129839,\n          longitude: 15.8342836,\n        },\n      }\n    },\n  }))\n  .actions(self => {\n    let resolver: Maybe<(result: IOrderSidedishControlResult) => void> = null\n    const makeResolver = () => {\n      return new Promise<IOrderSidedishControlResult>(resolve => {\n        resolver = resolve\n      })\n    }\n    return {\n      selectSidedishesForRecipe(recipeId: ID) {\n        self.sidedishMode = 'recipe'\n        self.sidedishRootId = recipeId\n        return makeResolver()\n      },\n      selectSidedishesForItem(itemId: ID) {\n        self.sidedishMode = 'item'\n        self.sidedishRootId = itemId\n        return makeResolver()\n      },\n      sidedishSelectionConfirmed(sidedishes: RoA<ID>) {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: true,\n            sidedishes,\n          })\n          resolver = null\n        }\n      },\n      sidedishSelectionCancel() {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: false,\n            sidedishes: [],\n          })\n          resolver = null\n        }\n      },\n    }\n  })\n\nfunction getDefaultProps(): IVolatileProps {\n  return {\n    orderId: null,\n    call: undefined,\n    values: {\n      deliveryType: DeliveryTypeEnum.Messenger,\n      deliverAt: undefined,\n      phone: undefined,\n      email: undefined,\n      firstName: undefined,\n      lastName: undefined,\n      note: undefined,\n      paymentMethod: undefined,\n    },\n    fakeAddress: undefined,\n    fakeValues: undefined,\n    deliveryAddress: undefined,\n    deliveryMinutes: undefined,\n    minimalPrice: undefined,\n    vamCustomer: null,\n    notDeliveryLocation: false,\n    sidedishMode: 'none',\n    sidedishRootId: undefined,\n    sidedishSelection: undefined,\n    paymentTypeEnum: null,\n    paymentGateEnum: null,\n  }\n}\n\nfunction clearGps({ latitude, longitude }: GeoPoint) {\n  return { latitude, longitude }\n}\n\nexport interface TCreateOrderModel extends Instance<typeof CreateOrderModel> {}\nexport interface TCreateOrderModelProps\n  extends SnapshotIn<typeof CreateOrderModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { gpsToLatLng, gpsToLatLngLit } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<google.maps.Map>\n}\n\nconst GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 12),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLngLit(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: google.maps.Map) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n    panTo(gps: GeoPoint) {\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(gps))\n      }\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\n","import { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\n\ninterface IVolatileProps {\n  activeDriverId: MaybeID\n}\n\nexport const OrderMapModel = MapModel.named('OrderMap')\n  .volatile<IVolatileProps>(() => ({\n    activeDriverId: null,\n  }))\n  .actions(self => ({\n    activateDriver(driverId: ID, position: GeoPoint) {\n      self.activeDriverId = driverId\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(position))\n      }\n    },\n  }))\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { OrderListModel } from './OrderListModel'\nimport { OrderMapModel } from './OrderMapModel'\n\nexport const OrderModel = types\n  .model('Order', {\n    list: types.optional(OrderListModel, {}),\n    map: types.optional(OrderMapModel, {}),\n  })\n  .actions(self => ({\n    invalidate() {\n      self.list.clearBranchFilter()\n    },\n  }))\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\n","import { endOfDay, startOfDay } from 'date-fns'\nimport { types } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\n\nexport interface IStatisticsDateFilter {\n  dateTimeFrom: Date\n  dateTimeTo: Date\n}\n\ninterface IVolatileProps extends IStatisticsDateFilter {\n  stockSearchInput: string\n}\n\nexport const StatisticsModel = BaseModel.named('Statistics')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    drivers: types.optional(types.array(types.string), []),\n    closureBranch: types.maybeNull(types.string),\n    stockBrandId: types.maybeNull(types.string),\n    cashiers: types.optional(types.array(types.string), []),\n    cashboxes: types.optional(types.array(types.string), []),\n  })\n  .volatile<IVolatileProps>(() => ({\n    dateTimeFrom: startOfDay(new Date()),\n    dateTimeTo: endOfDay(new Date()),\n    stockSearchInput: '',\n  }))\n  .views(self => ({\n    get branchesFilter(): RoA<ID> {\n      return self.branches.length > 0\n        ? Array.from(self.branches)\n        : self.root.user.branchesId\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.branches.clear()\n      self.drivers.clear()\n      self.cashiers.clear()\n      self.cashboxes.clear()\n      self.closureBranch = null\n    },\n    updateFilter(formValues: IStatisticsDateFilter) {\n      self.dateTimeFrom = new Date(formValues.dateTimeFrom)\n      self.dateTimeTo = new Date(formValues.dateTimeTo)\n    },\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    setDriversFilter(drivers: ID[]) {\n      self.drivers.replace(drivers)\n    },\n    setStockBrand(brandId: MaybeID) {\n      self.stockBrandId = brandId\n    },\n    setClosureBranch(branch: MaybeID) {\n      self.closureBranch = branch\n    },\n    setStockFilter(filter: string) {\n      self.stockSearchInput = filter\n    },\n    setCashierFilter(cashiers: ID[]) {\n      self.cashiers.replace(cashiers)\n    },\n    setCashboxFilter(cashboxes: ID[]) {\n      self.cashboxes.replace(cashboxes)\n    },\n    setTodayOrdersFilter() {\n      self.dateTimeFrom = startOfDay(new Date())\n      self.dateTimeTo = endOfDay(new Date())\n      self.branches.replace(self.root.order.list.branchesFilter)\n    },\n  }))\n","import { types } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { ESpecificHourMode } from '../businesshours.types'\n\nexport const BusinessHoursModel = BaseModel.named('BusinessHours')\n  .props({\n    specificMode: types.optional(\n      types.enumeration(['TIMESPAN', 'FULLDAY']),\n      ESpecificHourMode.TIMESPAN,\n    ),\n  })\n  .views(self => ({\n    get isTimespanMode() {\n      return self.specificMode === ESpecificHourMode.TIMESPAN\n    },\n  }))\n  .actions(self => ({\n    changeSpecificMode(mode: ESpecificHourMode) {\n      self.specificMode = mode\n    },\n  }))\n","import { RM } from '@speedlo/tools'\nimport { Instance, types } from 'mobx-state-tree'\n\nimport { isPartialMatch } from '../../helpers/filter'\n\ninterface IPredicateOptions {\n  exactMatch?: string[]\n  partialMatch?: string[]\n}\n\nexport const FilterInputModel = types\n  .model('FilterInput')\n  .props({\n    value: types.optional(types.string, ''),\n  })\n  .views(self => ({\n    getPredicate<T>({ exactMatch = [], partialMatch = [] }: IPredicateOptions) {\n      const partialMatchPred = isPartialMatch(self.value)\n      const predicates = [\n        ...exactMatch.map(prop => [RM.propEq(prop, self.value), RM.T]),\n        ...partialMatch.map(prop => [\n          RM.propSatisfies(partialMatchPred, prop),\n          RM.T,\n        ]),\n      ]\n      return RM.cond(predicates as any) as (item: T) => boolean\n    },\n    getCodeAndNamePredicate() {\n      return this.getPredicate({ partialMatch: ['code', 'nameLabel'] })\n    },\n  }))\n  .actions(self => ({\n    setValue(value: string) {\n      self.value = value\n    },\n  }))\n\nexport interface TFilterInputModel extends Instance<typeof FilterInputModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { FilterInputModel } from '../../../components/FilterInput/FilterInputModel'\nimport { FCompanyBranchFragment, LanguageEnum } from '../../../graph/generated'\nimport { BaseModel } from '../../../models/BaseModel'\n\nexport const MenuModel = BaseModel.named('Menu')\n  .props({\n    filter: types.optional(FilterInputModel, {}),\n    language: types.maybeNull(types.string),\n  })\n  .volatile(() => ({\n    categoryFilterId: null as MaybeID,\n  }))\n  .views(self => ({\n    get branchId(): ID {\n      return self.root.settings.branchId\n    },\n    get branch(): FCompanyBranchFragment | undefined {\n      return self.root.user.findBranchById(this.branchId)\n    },\n    get currentLanguage() {\n      return (self.language as Maybe<LanguageEnum>) || this.defaultLanguage\n    },\n    get defaultLanguage() {\n      return this.branch!.defaultLanguage\n    },\n    get supportedLanguages() {\n      const branch = this.branch\n      return branch ? branch.supportedLanguages : []\n    },\n    get isDefaultLanguage() {\n      return this.defaultLanguage === this.currentLanguage\n    },\n  }))\n  .actions(self => ({\n    setLanguage(language: Language) {\n      self.language = language\n    },\n    setCategoryFilter(categoryId: MaybeID) {\n      self.categoryFilterId = categoryId\n    },\n  }))\n\nexport interface TMenuModel extends Instance<typeof MenuModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { FCompanyBranchFragment } from '../../../graph/generated'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { BusinessHoursModel } from '../../businesshours/models/BusinessHoursModel'\nimport { MenuModel } from '../../menu/models/MenuModel'\n\nexport const SettingsModel = BaseModel.named('Settings')\n  .props({\n    selectedBranchId: types.maybe(types.string),\n    businessHours: types.optional(BusinessHoursModel, {}),\n    menu: types.optional(MenuModel, {}),\n  })\n  .views(self => ({\n    get branch(): FCompanyBranchFragment {\n      let useBranch: Maybe<FCompanyBranchFragment> = null\n      if (self.selectedBranchId) {\n        useBranch = self.root.user.findBranchById(self.selectedBranchId) || null\n      }\n      return useBranch || self.root.user.defaultBranch\n    },\n    get branchId(): ID {\n      return self.selectedBranchId || self.root.user.defaultBranch.id\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.selectedBranchId = undefined\n    },\n    selectBranch(branchId: ID) {\n      self.selectedBranchId = branchId\n    },\n  }))\n\nexport interface TSettingsModel extends Instance<typeof SettingsModel> {}\n","import { RM } from '@speedlo/tools'\nimport { Instance, types } from 'mobx-state-tree'\n\nimport { FilterInputModel } from '../../../components/FilterInput/FilterInputModel'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  DEFAULT_IMPORT,\n  DEFAULT_QUANTITY,\n  DEFAULT_RAW_QUANTITY,\n  TransferItem,\n} from './StockTransferItem'\n\nconst IMPORT_QUANTITY = 0\n\nexport type TInitItem = {\n  id: string\n  max: number\n}\n\nexport const StockTransferModel = BaseModel.named('StockTransfer')\n  .props({\n    transferItems: types.map(TransferItem),\n    filter: types.optional(FilterInputModel, {}),\n  })\n  .volatile(() => ({\n    importMode: false,\n    targetBranchId: null as MaybeID,\n  }))\n  .views(self => ({\n    get isImportMode() {\n      return self.importMode === true\n    },\n    get isTransferMode() {\n      return self.importMode === false\n    },\n    get targetId(): MaybeID {\n      return self.targetBranchId !== self.root.settings.branchId\n        ? self.targetBranchId\n        : null\n    },\n    get hasTarget() {\n      return this.targetId !== null\n    },\n    get sourceId(): ID {\n      return self.root.settings.branchId\n    },\n    get isImportingAll() {\n      const shouldNotImportSome = Array.from(self.transferItems.values()).find(\n        RM.propEq('import', false),\n      )\n      return self.transferItems.size > 0 && !shouldNotImportSome\n    },\n    isImportingItem(itemId: ID) {\n      const item = self.transferItems.get(itemId)\n      return item ? item.import : DEFAULT_IMPORT\n    },\n    getItemRawQuantity(itemId: ID) {\n      const item = self.transferItems.get(itemId)\n      return item ? item.rawQuantity : DEFAULT_RAW_QUANTITY\n    },\n    getItemTransferQuantity(itemId: ID) {\n      const item = self.transferItems.get(itemId)\n      return item ? item.quantity : DEFAULT_QUANTITY\n    },\n    getItemLimit(itemId: ID) {\n      const item = self.transferItems.get(itemId)\n      return item ? item.max : 0\n    },\n    isItemQuantityValid(itemId: ID) {\n      const item = self.transferItems.get(itemId)\n      return item ? item.isQuantityValid : false\n    },\n    get itemsForTransfer() {\n      return Array.from(self.transferItems.values())\n        .filter(item =>\n          this.isImportMode\n            ? item.import === true\n            : item.quantity !== null && item.quantity > 0,\n        )\n        .map(item =>\n          this.isImportMode ? { ...item, quantity: IMPORT_QUANTITY } : item,\n        )\n    },\n  }))\n  .actions(self => ({\n    setTargetId(branchId: MaybeID) {\n      self.targetBranchId = branchId\n    },\n    initItems(items: RoA<TInitItem>) {\n      this.clearItems()\n      items.forEach(item => {\n        self.transferItems.put(item)\n      })\n    },\n    toggleImportAll() {\n      const newValue = !self.isImportingAll\n      self.transferItems.forEach(item => (item.import = newValue))\n    },\n    toggleImportItem(itemId: ID) {\n      const item = self.transferItems.get(itemId)\n      if (item) {\n        self.transferItems.put({ ...item, import: !item.import })\n      }\n    },\n    setQuantity(itemId: ID, quantity: string) {\n      const item = self.transferItems.get(itemId)\n      if (item) {\n        item.setRawQuantity(quantity)\n      }\n    },\n    clearTransferState() {\n      self.transferItems.forEach(item => {\n        item.reset()\n      })\n    },\n    clearItems() {\n      self.transferItems.clear()\n    },\n    toggleImportMode() {\n      self.importMode = !self.importMode\n    },\n  }))\n\nexport interface TStockTransferModel\n  extends Instance<typeof StockTransferModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { StockTransferModel } from './StockTransferModel'\n\nexport const StockModel = BaseModel.named('Stock').props({\n  transfer: types.optional(StockTransferModel, {}),\n})\n\nexport interface TStockModelModel extends Instance<typeof StockModel> {}\nexport interface TStockModelModelProps extends SnapshotIn<typeof StockModel> {}\n","import { MapModel } from '../../../models/MapModel'\n\nexport const ZoneMapModel = MapModel.named('ZoneMap')\n","import { RM } from '@speedlo/tools'\nimport { Instance, types } from 'mobx-state-tree'\n\nimport { FCompanyBranchFragment, ZoneTypeEnum } from '../../../graph/generated'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { ZoneMapModel } from '../models/ZoneMapModel'\nimport { TBranch, TBrand } from '../zones.types'\n\nexport const ZoneModel = BaseModel.named('Zone')\n  .props({\n    map: types.optional(ZoneMapModel, {}),\n    brandId: types.maybeNull(types.string),\n    branchId: types.maybeNull(types.string),\n  })\n  .volatile(() => ({\n    zoneTypes: [ZoneTypeEnum.Area, ZoneTypeEnum.Return],\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.brandId = null\n      self.branchId = null\n    },\n  }))\n  .views(self => ({\n    get branch(): Maybe<TBranch> {\n      return (\n        (self.branchId &&\n          self.root.user.branches.find(RM.propEq('id', self.branchId))) ||\n        null\n      )\n    },\n    get brand(): Maybe<TBrand> {\n      return (\n        (self.brandId &&\n          self.root.user.brands.find(RM.propEq('id', self.brandId))) ||\n        null\n      )\n    },\n    get hasBranchFilter() {\n      return this.branch !== null\n    },\n    get branchFilterId(): MaybeID {\n      return this.branch === null ? null : this.branch.id\n    },\n    get branchFilterPredicate() {\n      if (this.branch) {\n        return RM.propEq('id', this.branch.id)\n      }\n      return this.brand === null\n        ? RM.F\n        : RM.pathSatisfies(RM.equals(this.brand.id), ['brand', 'id'])\n    },\n    get zoneFilterPredicate() {\n      if (this.branch !== null) {\n        return RM.pathSatisfies(RM.equals(this.branch.id), [\n          'companyBranch',\n          'id',\n        ])\n      }\n      return this.brand === null\n        ? () => false\n        : RM.pathSatisfies(RM.equals(this.brand.id), [\n            'companyBranch',\n            'brand',\n            'id',\n          ])\n    },\n    get branches(): RoA<FCompanyBranchFragment> {\n      return self.root.user.branches\n    },\n  }))\n  .actions(self => ({\n    setBranchFilter(branch: TBranch) {\n      self.branchId = branch.id\n      self.brandId = branch.brand.id\n    },\n    setBrandFilter(brand: TBrand, brandBranches: TBranch[]) {\n      self.brandId = brand.id\n      if (!self.branch || self.branch.brand.id !== brand.id) {\n        self.branchId =\n          (brandBranches.length === 1 && RM.head(brandBranches).id) || null\n      }\n    },\n    setZoneTypes(types: ZoneTypeEnum[]) {\n      self.zoneTypes = types\n    },\n    clearBranchFilter() {\n      self.branchId = null\n    },\n    clearBrandFilter() {\n      self.brandId = null\n      self.branchId = null\n    },\n  }))\n\nexport interface TZoneModel extends Instance<typeof ZoneModel> {}\n","import { DefaultApolloClient } from '@speedlo/graphql'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { AuthModel } from '../models/AuthModel'\nimport { ConfigModel } from '../models/ConfigModel'\nimport { UserModel } from '../models/UserModel'\nimport { CreateOrderModel } from '../segments/createorder/models/CreateOrderModel'\nimport { OrderModel } from '../segments/order/models/OrderModel'\nimport { StatisticsModel } from '../segments/overview/models/StatisticsModel'\nimport { SettingsModel } from '../segments/settings/models/SettingsModel'\nimport { StockModel } from '../segments/stock/models/StockModel'\nimport { ZoneModel } from '../segments/zones/models/ZoneModel'\nimport { BaseModel } from './BaseModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    user: types.optional(UserModel, {}),\n    order: types.optional(OrderModel, {}),\n    createOrder: types.optional(CreateOrderModel, {}),\n    zone: types.optional(ZoneModel, {}),\n    settings: types.optional(SettingsModel, {}),\n    config: types.optional(ConfigModel, {}),\n    statistics: types.optional(StatisticsModel, {}),\n    stock: types.optional(StockModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.settings,\n        self.zone,\n        self.order,\n        self.statistics,\n        self.createOrder,\n      ]\n    },\n  }))\n  .volatile(() => ({\n    apolloClient: (null as unknown) as DefaultApolloClient,\n  }))\n  .actions(self => ({\n    setClient(client: DefaultApolloClient) {\n      self.apolloClient = client\n    },\n  }))\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import { ApolloProvider } from '@speedlo/graphql'\nimport { useAsyncEffect } from '@speedlo/hooks'\nimport React from 'react'\n\nimport { RootContext } from '../context/RootContext'\nimport { createApolloClient } from '../graph/createClient'\nimport { persistModel } from '../helpers/persistModel'\nimport { RootModel } from '../models/RootModel'\nimport PageLoader from './PageLoader'\n\nexport const RootProvider: React.FC = ({ children }) => {\n  const [isInit, setInit] = React.useState(false)\n\n  const [root] = React.useState(() => RootModel.create())\n  const [client] = React.useState(() => {\n    const newClient = createApolloClient(root)\n    // FIXME: Required for legacy code of calling GraphQL from models\n    root.setClient(newClient)\n    return newClient\n  })\n\n  useAsyncEffect(async () => {\n    if (process.env.REACT_APP_STAGE === 'dev') {\n      // @ts-ignore\n      window.root = root\n    }\n    await Promise.all(root.persistedModels.map(persistModel))\n    setInit(true)\n  }, [root])\n\n  if (!isInit) {\n    return <PageLoader />\n  }\n\n  return (\n    <ApolloProvider client={client}>\n      <RootContext.Provider value={root}>\n        {React.Children.only(children)}\n      </RootContext.Provider>\n    </ApolloProvider>\n  )\n}\n\nexport const useRoot = () => {\n  const root = React.useContext(RootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n","import { Observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { TRootModel } from '../models/RootModel'\nimport { useRoot } from './RootProvider'\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.FC<IProps> = ({ render, observe = true }) => {\n  const root = useRoot()\n  return observe === true ? (\n    <Observer>{() => <>{render(root)}</>}</Observer>\n  ) : (\n    render(root)\n  )\n}\n","module.exports = __webpack_public_path__ + \"static/media/connectionWarning.ac6fe03b.mp3\";","import { ISetDidChange, Lambda, observable } from 'mobx'\nimport { getParent, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { scroller } from 'react-scroll'\n\nimport { OrderStateCategoryEnum } from '../../../graph/generated'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TOrderModel } from './OrderModel'\n\nexport const OrderListModel = BaseModel.named('OrderList')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    collapsedCategories: types.optional(types.array(types.string), [\n      OrderStateCategoryEnum.Finished,\n    ]),\n  })\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length ? Array.from(self.branches) : []\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n    get isSingleBranchSelected() {\n      return self.branches.length === 1\n    },\n    get firstBranchId() {\n      if (self.branches.length === 1) {\n        return self.branches[0]\n      }\n      return null\n    },\n    get orderMap() {\n      return getParent<TOrderModel>(self).map\n    },\n  }))\n  .actions(self => ({\n    invalidate() {\n      self.branches.clear()\n    },\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n  }))\n  .extend(self => {\n    const detailOpen = observable.set<ID>()\n\n    return {\n      views: {\n        isOrderDetailOpen(orderId: ID) {\n          return detailOpen.has(orderId)\n        },\n        isCategoryCollapsed(categoryCode: OrderStateCategoryEnum) {\n          return self.collapsedCategories.includes(categoryCode)\n        },\n      },\n      actions: {\n        toggleOrderDetail(orderId: ID) {\n          if (detailOpen.has(orderId)) {\n            detailOpen.delete(orderId)\n          } else {\n            detailOpen.add(orderId)\n          }\n        },\n        toggleCategoryCollapse(category: OrderStateCategoryEnum) {\n          const index = self.collapsedCategories.indexOf(category)\n          if (index >= 0) {\n            self.collapsedCategories.splice(index, 1)\n          } else {\n            self.collapsedCategories.push(category)\n          }\n        },\n        focusOrderDetail(orderId: ID) {\n          if (!detailOpen.has(orderId)) {\n            detailOpen.add(orderId)\n          }\n          setImmediate(() => {\n            scroller.scrollTo(`order-${orderId}`, {\n              smooth: 'easeInOutQuart',\n              containerId: 'order-list',\n              absolute: true,\n              offset: -140,\n            })\n          })\n        },\n        observerOrderDetail: detailOpen.observe.bind(detailOpen) as (\n          listener: (changes: ISetDidChange<ID>) => void,\n        ) => Lambda,\n      },\n    }\n  })\n\nexport interface TOrderListModel extends Instance<typeof OrderListModel> {}\nexport interface TOrderListModelProps\n  extends SnapshotIn<typeof OrderListModel> {}\n","module.exports = __webpack_public_path__ + \"static/media/loader.533cace4.gif\";","module.exports = __webpack_public_path__ + \"static/media/bg_antracit.edb33205.jpg\";","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: 'https://app.dev.speedlo.cloud',\n  googleMapsApi: 'AIzaSyAMytFvlKm4fxw8LCcMHofNDHcrJ8ibOTY',\n  persistenceKey: 'admin@local',\n  pageTitleSuffix: 'LOCAL',\n  sentryDSN: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    persistenceKey: 'admin@dev',\n    pageTitleSuffix: 'DEV',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'admin@prod',\n    pageTitleSuffix: 'Speɘdlo',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n","import * as RM from 'ramda'\n\nexport { RM }\n","// @ts-ignore temporary before figuring out a logging solution that works in prod\nwindow.localStorage.setItem('debug', '*,-sockjs*')\n","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<string>\n\n  readonly includeOldFinished?: boolean\n\n  readonly sectors?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputStatisticCreate {\n  readonly dateFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly dateTimeFrom?: Maybe<string>\n\n  readonly dateTimeTo?: Maybe<string>\n\n  readonly branches: ReadonlyArray<string>\n\n  readonly drivers?: Maybe<ReadonlyArray<string>>\n\n  readonly cashBoxes?: Maybe<ReadonlyArray<string>>\n\n  readonly cashiers?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly internalNumber?: Maybe<string>\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: string\n\n  readonly closed?: boolean\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n\n  readonly overwritesRegular?: boolean\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourSpecificCloseCreate {\n  readonly companyBranchId: string\n  /** close for defined interval in minutes */\n  readonly closingInterval: number\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly minCount?: number\n\n  readonly maxCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly translations?: Maybe<ReadonlyArray<InputWareCategoryTranslation>>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly minCount?: Maybe<number>\n\n  readonly maxCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareCategoryTranslation {\n  readonly language: LanguageEnum\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n\n  readonly image?: Maybe<InputFile>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly translations?: Maybe<ReadonlyArray<InputRecipeTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n\n  readonly image?: Maybe<InputRecipeImage>\n}\n\nexport interface InputRecipeTranslation {\n  readonly language: LanguageEnum\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n}\n\nexport interface InputRecipeImage {\n  readonly file?: Maybe<InputFile>\n\n  readonly delete: boolean\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityCreate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityUpdate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly address?: Maybe<string>\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly address?: Maybe<string>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly cancelUnpaid?: boolean\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly address?: Maybe<string>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n\n  readonly sector?: Maybe<string>\n\n  readonly occasion?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderWifiCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly sector?: Maybe<string>\n\n  readonly occasion?: Maybe<string>\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment method used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<string>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderStaffImport {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly companyBranch: string\n\n  readonly acceptedAt?: Maybe<string>\n\n  readonly acceptedAtRaw?: Maybe<string>\n\n  readonly orderRecipes: ReadonlyArray<InputOrderRecipeCreates>\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly invoice: string\n\n  readonly invoiceNumber: number\n\n  readonly paymentMethods: ReadonlyArray<InputOrderPaymentMethodsCreate>\n\n  readonly canceled?: Maybe<boolean>\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly address?: Maybe<string>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputOrderPaymentMethodUpdate {\n  readonly paymentMethodId: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: number\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputStockTransferCreate {\n  readonly stockItemId: string\n\n  readonly quantity: number\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n\nexport interface InputSectorRecipeCreate {\n  readonly recipe: string\n\n  readonly sector: string\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n\n  readonly warePriceType?: WarePriceTypeEnum\n}\n\nexport interface InputOccasionCreate {\n  readonly companyBranch: string\n\n  readonly title: string\n  /** Short title for mobile view */\n  readonly titleShort: string\n  /** Date of occasion */\n  readonly date: string\n  /** Beginning of preorder */\n  readonly preorderFrom: string\n  /** End of preorder */\n  readonly preorderTo: string\n\n  readonly image?: Maybe<InputFile>\n}\n\nexport interface InputOccasionUpdate {\n  readonly title?: Maybe<string>\n  /** Short title for mobile view */\n  readonly titleShort?: Maybe<string>\n  /** Date of occasion */\n  readonly date?: Maybe<string>\n  /** Beginning of preorder */\n  readonly preorderFrom?: Maybe<string>\n  /** End of preorder */\n  readonly preorderTo?: Maybe<string>\n\n  readonly image?: Maybe<InputRecipeImage>\n}\n/** CompanyType enum */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** AddressType enum */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Currency enum */\nexport enum CurrencyEnum {\n  Hop = 'HOP',\n  Usd = 'USD',\n  Pln = 'PLN',\n  Eur = 'EUR',\n  Czk = 'CZK',\n  Zar = 'ZAR',\n}\n/** WeekDay enum */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** OrderStateCategoryTarget enum */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  FeAdmin = 'FE_ADMIN',\n  FeKitchen = 'FE_KITCHEN',\n  Driver = 'DRIVER',\n  FeCompletion = 'FE_COMPLETION',\n}\n/** OrderStateCategory enum */\nexport enum OrderStateCategoryEnum {\n  Main = 'MAIN',\n  NewOrders = 'NEW_ORDERS',\n  InCart = 'IN_CART',\n  Production = 'PRODUCTION',\n  Preparing = 'PREPARING',\n  Payment = 'PAYMENT',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  Notification = 'NOTIFICATION',\n  Delivery = 'DELIVERY',\n  Finished = 'FINISHED',\n  Cancel = 'CANCEL',\n  Reclamation = 'RECLAMATION',\n  Bills = 'BILLS',\n}\n/** Language enum */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  Pl = 'PL',\n  De = 'DE',\n  En = 'EN',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n  Pwa = 'PWA',\n}\n/** WareUnit enum */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** PaymentGate enum */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** PaymentType enum */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n  Discount = 'DISCOUNT',\n}\n/** AvailabilityType enum */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n  Specific = 'SPECIFIC',\n}\n/** Allergen enum */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Egg = 'EGG',\n  Shellfish = 'SHELLFISH',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** WarePriceType enum */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** FieldState enum */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** ZoneType enum */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n  Return = 'RETURN',\n}\n/** DeviceState enum */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Free = 'FREE',\n  Busy = 'BUSY',\n}\n/** DeviceType enum */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** DeliveryState enum */\nexport enum DeliveryStateEnum {\n  Fresh = 'FRESH',\n  OnWay = 'ON_WAY',\n  Delivered = 'DELIVERED',\n  Canceled = 'CANCELED',\n  DriverChanged = 'DRIVER_CHANGED',\n}\n/** OrderState enum */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n  HighPriority = 'HIGH_PRIORITY',\n  WifiDelayed = 'WIFI_DELAYED',\n  AssignedToDeliver = 'ASSIGNED_TO_DELIVER',\n}\n/** OrderBillingType enum */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** DeliveryType enum */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** OrderRecipeState enum */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Finished = 'FINISHED',\n  Ready = 'READY',\n}\n/** OrderOnlineState enum */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** OrderOrigin enum */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n  Pwa = 'PWA',\n  WebMenu = 'WEB_MENU',\n  WifiPreorder = 'WIFI_PREORDER',\n}\n/** SectorType enum */\nexport enum SectorTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n}\n/** ShiftUserState enum */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n}\n/** OrderOriginCategory enum */\nexport enum OrderOriginCategoryEnum {\n  Doveze = 'DOVEZE',\n  Wifi = 'WIFI',\n  Staff = 'STAFF',\n  Website = 'WEBSITE',\n}\n/** WareCategoryType enum */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Tip = 'TIP',\n  Mixin = 'MIXIN',\n}\n/** SettingType enum */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n/** WareRequirement enum */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n/** Input file type for Apollo upload using multipart requests */\nexport type InputFile = any\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type GOrderVamVariables = {\n  readonly branchId: string\n  readonly phone: string\n}\n\nexport type GOrderVamQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vamCustomer: GOrderVamVamCustomer\n}\n\nexport type GOrderVamVamCustomer = {\n  readonly __typename?: 'CustomerInformation'\n\n  readonly isFound: boolean\n\n  readonly email: string\n\n  readonly firstName: string\n\n  readonly lastName: string\n\n  readonly lastOrder: Maybe<GOrderVamLastOrder>\n\n  readonly locations: ReadonlyArray<GOrderVamLocations>\n}\n\nexport type GOrderVamLastOrder = {\n  readonly __typename?: 'Order'\n\n  readonly note: Maybe<string>\n}\n\nexport type GOrderVamLocations = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly state: Maybe<string>\n\n  readonly gps: Maybe<GOrderVamGps>\n}\n\nexport type GOrderVamGps = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type GOrderPromoVariables = {\n  readonly branchId: string\n}\n\nexport type GOrderPromoQuery = {\n  readonly __typename?: 'Query'\n\n  readonly promoCodes: ReadonlyArray<GOrderPromoPromoCodes>\n}\n\nexport type GOrderPromoPromoCodes = {\n  readonly __typename?: 'PromoCode'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type QAddressSuggestVariables = {\n  readonly search: string\n}\n\nexport type QAddressSuggestQuery = {\n  readonly __typename?: 'Query'\n\n  readonly suggest: ReadonlyArray<QAddressSuggestSuggest>\n}\n\nexport type QAddressSuggestSuggest = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly gps: Maybe<QAddressSuggestGps>\n} & FAddressFragment\n\nexport type QAddressSuggestGps = FGeoPointFragment\n\nexport type MOrderStateVariables = {\n  readonly orderId: string\n  readonly state: OrderStateEnum\n}\n\nexport type MOrderStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MOrderStateAddOrderState\n}\n\nexport type MOrderStateAddOrderState = FOrderStateCategoryFragment &\n  FOrderTimingFragment\n\nexport type MSetPriorityOrderVariables = {\n  readonly orderId: string\n  readonly isPriority: boolean\n}\n\nexport type MSetPriorityOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly setPriorityOrder: MSetPriorityOrderSetPriorityOrder\n}\n\nexport type MSetPriorityOrderSetPriorityOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly isPriority: boolean\n}\n\nexport type QLogoutWidgetVariables = {\n  readonly id: string\n}\n\nexport type QLogoutWidgetQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: QLogoutWidgetUser\n}\n\nexport type QLogoutWidgetUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type MBusinessHoursSubmitVariables = {\n  readonly branchId: string\n  readonly hours: ReadonlyArray<InputBusinessHourCreate>\n}\n\nexport type MBusinessHoursSubmitMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createBusinessHours: ReadonlyArray<\n    MBusinessHoursSubmitCreateBusinessHours\n  >\n}\n\nexport type MBusinessHoursSubmitCreateBusinessHours = FRegularBusinessHourFragment\n\nexport type MSpecificBusinessHourCreateVariables = {\n  readonly input: InputBusinessHourSpecificDateCreate\n}\n\nexport type MSpecificBusinessHourCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MSpecificBusinessHourCreateResult\n}\n\nexport type MSpecificBusinessHourCreateResult = FSpecificBusinessHourFragment\n\nexport type MSpecificBusinessHourDeleteVariables = {\n  readonly id: string\n}\n\nexport type MSpecificBusinessHourDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MSpecificBusinessHourDeleteResult\n}\n\nexport type MSpecificBusinessHourDeleteResult = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n}\n\nexport type QRegularBusinessHoursVariables = {\n  readonly branchId: string\n}\n\nexport type QRegularBusinessHoursQuery = {\n  readonly __typename?: 'Query'\n\n  readonly businessHours: ReadonlyArray<QRegularBusinessHoursBusinessHours>\n\n  readonly weekDays: ReadonlyArray<QRegularBusinessHoursWeekDays>\n}\n\nexport type QRegularBusinessHoursBusinessHours = FRegularBusinessHourFragment\n\nexport type QRegularBusinessHoursWeekDays = FWeekdayFragment\n\nexport type QSpecificBusinessHoursVariables = {\n  readonly branchId: string\n}\n\nexport type QSpecificBusinessHoursQuery = {\n  readonly __typename?: 'Query'\n\n  readonly businessHours: ReadonlyArray<QSpecificBusinessHoursBusinessHours>\n}\n\nexport type QSpecificBusinessHoursBusinessHours = FSpecificBusinessHourFragment\n\nexport type MAddOrderPromoVariables = {\n  readonly orderId: string\n  readonly code: string\n}\n\nexport type MAddOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderPromoCode: MAddOrderPromoAddOrderPromoCode\n}\n\nexport type MAddOrderPromoAddOrderPromoCode = {\n  readonly __typename?: 'OrderWithErrors'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MAddOrderPromoOrder\n}\n\nexport type MAddOrderPromoOrder = FCreateOrderFragment\n\nexport type MAddToSectorVariables = {\n  readonly sectorId: string\n  readonly recipeId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MAddToSectorMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createSectorRecipe: ReadonlyArray<MAddToSectorCreateSectorRecipe>\n}\n\nexport type MAddToSectorCreateSectorRecipe = {\n  readonly __typename?: 'SectorRecipe'\n\n  readonly id: string\n}\n\nexport type MCancelOrderVariables = {\n  readonly orderId: string\n}\n\nexport type MCancelOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MCancelOrderAddOrderState\n}\n\nexport type MCancelOrderAddOrderState = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FOrderStateCategoryFragment\n\nexport type MCreateOrderAcceptVariables = {\n  readonly orderId: string\n  readonly customer: InputCustomerCreate\n  readonly deliverAt?: Maybe<string>\n  readonly note?: Maybe<string>\n  readonly paymentType?: Maybe<PaymentTypeEnum>\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n}\n\nexport type MCreateOrderAcceptMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: MCreateOrderAcceptFinishOrder\n}\n\nexport type MCreateOrderAcceptFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MCreateOrderAcceptOrder\n}\n\nexport type MCreateOrderAcceptOrder = FCreateOrderFragment\n\nexport type MCreateOrderAddRecipeVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderAddRecipeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrderRecipe: MCreateOrderAddRecipeCreateOrderRecipe\n}\n\nexport type MCreateOrderAddRecipeCreateOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderNewVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly callEventId?: Maybe<string>\n}\n\nexport type MCreateOrderNewMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrder: MCreateOrderNewCreateOrder\n}\n\nexport type MCreateOrderNewCreateOrder = FCreateOrderFragment\n\nexport type MCreateOrderRemoveItemVariables = {\n  readonly itemId: string\n}\n\nexport type MCreateOrderRemoveItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyOrderRecipe: MCreateOrderRemoveItemDestroyOrderRecipe\n}\n\nexport type MCreateOrderRemoveItemDestroyOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderUpdateVariables = {\n  readonly orderId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport type MCreateOrderUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MCreateOrderUpdateUpdateOrder\n}\n\nexport type MCreateOrderUpdateUpdateOrder = FCreateOrderFragment\n\nexport type MCreateOrderUpdateItemVariables = {\n  readonly itemId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderUpdateItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipe: MCreateOrderUpdateItemUpdateOrderRecipe\n}\n\nexport type MCreateOrderUpdateItemUpdateOrderRecipe = FCreateOrderFragment\n\nexport type MRemoveOrderPromoVariables = {\n  readonly orderId: string\n  readonly codeId: string\n}\n\nexport type MRemoveOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly removeOrderPromoCode: MRemoveOrderPromoRemoveOrderPromoCode\n}\n\nexport type MRemoveOrderPromoRemoveOrderPromoCode = FCreateOrderFragment\n\nexport type QBranchPaymentMethodsVariables = {\n  readonly branchId: string\n}\n\nexport type QBranchPaymentMethodsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QBranchPaymentMethodsCompanyBranch\n}\n\nexport type QBranchPaymentMethodsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n} & FBranchPaymentMethodsFragment\n\nexport type QCreateOrderItemVariables = {\n  readonly itemId: string\n}\n\nexport type QCreateOrderItemQuery = {\n  readonly __typename?: 'Query'\n\n  readonly item: QCreateOrderItemItem\n}\n\nexport type QCreateOrderItemItem = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItemRecipe\n\n  readonly selectedSidedishes: ReadonlyArray<QCreateOrderItemSelectedSidedishes>\n}\n\nexport type QCreateOrderItemRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QCreateOrderItemSelectedSidedishes = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItem_Recipe\n}\n\nexport type QCreateOrderItem_Recipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type QCreateOrderRecipeVariables = {\n  readonly recipeId: string\n}\n\nexport type QCreateOrderRecipeQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QCreateOrderRecipeRecipe\n}\n\nexport type QCreateOrderRecipeRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QOrderCartVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderCartQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderCartOrder\n}\n\nexport type QOrderCartOrder = FCreateOrderFragment\n\nexport type QOrderFormDeliverAtDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderFormDeliverAtDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly times: QOrderFormDeliverAtDefaultsTimes\n}\n\nexport type QOrderFormDeliverAtDefaultsTimes = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly deliveryTime: number\n\n  readonly pickupTime: number\n}\n\nexport type QOrderMenuVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderMenuQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orderMenu: ReadonlyArray<QOrderMenuOrderMenu>\n}\n\nexport type QOrderMenuOrderMenu = FOrderMenuCategoryFragment\n\nexport type QValidateLocationVariables = {\n  readonly branchId: string\n  readonly latitude: number\n  readonly longitude: number\n}\n\nexport type QValidateLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly resolveLocation: QValidateLocationResolveLocation\n}\n\nexport type QValidateLocationResolveLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly inDeliveryLocation: boolean\n\n  readonly zone: Maybe<QValidateLocationZone>\n}\n\nexport type QValidateLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly minimalOrderPrice: QValidateLocationMinimalOrderPrice\n}\n\nexport type QValidateLocationMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type MKitchenOrderHandleVariables = {\n  readonly orderId: string\n  readonly state: OrderStateEnum\n}\n\nexport type MKitchenOrderHandleMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MKitchenOrderHandleAddOrderState\n}\n\nexport type MKitchenOrderHandleAddOrderState = FOrderStateCategoryFragment\n\nexport type MKitchenOrderRecipeHandleVariables = {\n  readonly orderRecipeId: string\n  readonly state: OrderRecipeStateEnum\n}\n\nexport type MKitchenOrderRecipeHandleMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly orderRecipe: MKitchenOrderRecipeHandleOrderRecipe\n}\n\nexport type MKitchenOrderRecipeHandleOrderRecipe = FKitchenOrderStateFragment\n\nexport type MKitchenSectorHandleVariables = {\n  readonly sectorId: string\n  readonly state: OrderRecipeStateEnum\n}\n\nexport type MKitchenSectorHandleMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly sectorRecipe: ReadonlyArray<MKitchenSectorHandleSectorRecipe>\n}\n\nexport type MKitchenSectorHandleSectorRecipe = FKitchenSectorStateFragment\n\nexport type MKitchenSectorRecipeHandleVariables = {\n  readonly sectorRecipeId: string\n  readonly state: OrderRecipeStateEnum\n}\n\nexport type MKitchenSectorRecipeHandleMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly sectorRecipe: MKitchenSectorRecipeHandleSectorRecipe\n}\n\nexport type MKitchenSectorRecipeHandleSectorRecipe = FKitchenSectorStateFragment\n\nexport type QKitchenCompletionOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QKitchenCompletionOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QKitchenCompletionOrderListOrders>\n}\n\nexport type QKitchenCompletionOrderListOrders = FKitchenCompletionOrderFragment\n\nexport type QKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QKitchenOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QKitchenOrderListOrders>\n}\n\nexport type QKitchenOrderListOrders = FKitchenOrderFragment\n\nexport type QKitchenSectorListVariables = {\n  readonly branch: string\n  readonly sectors?: Maybe<ReadonlyArray<string>>\n  readonly states?: Maybe<ReadonlyArray<OrderRecipeStateEnum>>\n}\n\nexport type QKitchenSectorListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly sectors: ReadonlyArray<QKitchenSectorListSectors>\n\n  readonly sectorRecipes: ReadonlyArray<QKitchenSectorListSectorRecipes>\n}\n\nexport type QKitchenSectorListSectors = {\n  readonly __typename?: 'Sector'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type QKitchenSectorListSectorRecipes = FKitchenSectorRecipeFragment\n\nexport type SKitchenCompletionOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SKitchenCompletionOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SKitchenCompletionOrderListUpdatedOrder\n}\n\nexport type SKitchenCompletionOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SKitchenCompletionOrderListOrder>\n}\n\nexport type SKitchenCompletionOrderListOrder = FKitchenCompletionOrderFragment\n\nexport type SKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SKitchenOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SKitchenOrderListUpdatedOrder\n}\n\nexport type SKitchenOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SKitchenOrderListOrder>\n}\n\nexport type SKitchenOrderListOrder = FKitchenOrderFragment\n\nexport type SKitchenSectorListVariables = {\n  readonly branch: string\n  readonly sectors?: Maybe<ReadonlyArray<string>>\n  readonly states?: Maybe<ReadonlyArray<OrderRecipeStateEnum>>\n}\n\nexport type SKitchenSectorListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedSectorRecipe: SKitchenSectorListUpdatedSectorRecipe\n}\n\nexport type SKitchenSectorListUpdatedSectorRecipe = {\n  readonly __typename?: 'SectorRecipeUpdateSubscription'\n\n  readonly id: string\n\n  readonly sectorRecipe: Maybe<SKitchenSectorListSectorRecipe>\n}\n\nexport type SKitchenSectorListSectorRecipe = FKitchenSectorRecipeFragment\n\nexport type MPasswordChangeVariables = {\n  readonly password: string\n}\n\nexport type MPasswordChangeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly change: MPasswordChangeChange\n}\n\nexport type MPasswordChangeChange = {\n  readonly __typename?: 'UserUpdatedPassword'\n\n  readonly userId: string\n\n  readonly newToken: string\n}\n\nexport type QUserBootstrapVariables = {\n  readonly userId: string\n}\n\nexport type QUserBootstrapQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: QUserBootstrapUser\n\n  readonly permissions: QUserBootstrapPermissions\n\n  readonly access: QUserBootstrapAccess\n}\n\nexport type QUserBootstrapUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly language: QUserBootstrapLanguage\n\n  readonly roles: ReadonlyArray<QUserBootstrapRoles>\n\n  readonly branches: ReadonlyArray<QUserBootstrapBranches>\n}\n\nexport type QUserBootstrapLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly rawCode: string\n}\n\nexport type QUserBootstrapRoles = {\n  readonly __typename?: 'Role'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type QUserBootstrapBranches = FCompanyBranchFragment\n\nexport type QUserBootstrapPermissions = {\n  readonly __typename?: 'UserPermission'\n\n  readonly canCancelOrders: boolean\n\n  readonly canCreateOrder: boolean\n}\n\nexport type QUserBootstrapAccess = {\n  readonly __typename?: '__Schema'\n\n  readonly queries: QUserBootstrapQueries\n\n  readonly mutations: Maybe<QUserBootstrapMutations>\n\n  readonly subscriptions: Maybe<QUserBootstrapSubscriptions>\n}\n\nexport type QUserBootstrapQueries = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrapFields>>\n}\n\nexport type QUserBootstrapFields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QUserBootstrapMutations = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrap_Fields>>\n}\n\nexport type QUserBootstrap_Fields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QUserBootstrapSubscriptions = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrap__Fields>>\n}\n\nexport type QUserBootstrap__Fields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type MMenuCategoryCreateVariables = {\n  readonly category: InputWareCategoryCreate\n}\n\nexport type MMenuCategoryCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createCategory: MMenuCategoryCreateCreateCategory\n}\n\nexport type MMenuCategoryCreateCreateCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type MMenuCategoryDeleteVariables = {\n  readonly categoryId: string\n}\n\nexport type MMenuCategoryDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly deleteCategory: MMenuCategoryDeleteDeleteCategory\n}\n\nexport type MMenuCategoryDeleteDeleteCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type MMenuCategorySortVariables = {\n  readonly categoryId: string\n  readonly offset: number\n}\n\nexport type MMenuCategorySortMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly success: boolean\n}\n\nexport type MMenuCategoryUpdateVariables = {\n  readonly categoryId: string\n  readonly category: InputWareCategoryUpdate\n}\n\nexport type MMenuCategoryUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateCategory: MMenuCategoryUpdateUpdateCategory\n}\n\nexport type MMenuCategoryUpdateUpdateCategory = FMenuCategoryFragment\n\nexport type MMenuCategoryVisibilityVariables = {\n  readonly categoryId: string\n  readonly visible: boolean\n}\n\nexport type MMenuCategoryVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: MMenuCategoryVisibilityUpdateWareCategory\n}\n\nexport type MMenuCategoryVisibilityUpdateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type QMenuCategoryFilterVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuCategoryFilterQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryFilterCategories>\n}\n\nexport type QMenuCategoryFilterCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly countRecipes: number\n\n  readonly categoryType: QMenuCategoryFilterCategoryType\n}\n\nexport type QMenuCategoryFilterCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type QMenuCategoryFormVariables = {\n  readonly categoryId: string\n  readonly language: LanguageEnum\n}\n\nexport type QMenuCategoryFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly category: QMenuCategoryFormCategory\n}\n\nexport type QMenuCategoryFormCategory = FMenuCategoryInFormFragment\n\nexport type QMenuCategoryFormTransVariables = {\n  readonly categoryId: string\n  readonly language: LanguageEnum\n}\n\nexport type QMenuCategoryFormTransQuery = {\n  readonly __typename?: 'Query'\n\n  readonly category: QMenuCategoryFormTransCategory\n}\n\nexport type QMenuCategoryFormTransCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n} & FMenuCategoryLocalizedFragment\n\nexport type QMenuCategoryListVariables = {\n  readonly branchId: string\n  readonly categoryType: WareCategoryTypeEnum\n}\n\nexport type QMenuCategoryListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryListCategories>\n}\n\nexport type QMenuCategoryListCategories = FMenuCategoryInListFragment\n\nexport type QMenuCategoryOriginsVariables = {}\n\nexport type QMenuCategoryOriginsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly origins: ReadonlyArray<QMenuCategoryOriginsOrigins>\n}\n\nexport type QMenuCategoryOriginsOrigins = {\n  readonly __typename?: 'OrderOriginCategory'\n\n  readonly enum: OrderOriginCategoryEnum\n\n  readonly code: string\n}\n\nexport type QMenuAllergensVariables = {}\n\nexport type QMenuAllergensQuery = {\n  readonly __typename?: 'Query'\n\n  readonly allergens: ReadonlyArray<QMenuAllergensAllergens>\n}\n\nexport type QMenuAllergensAllergens = FMenuAllergenFragment\n\nexport type QMenuCurrenciesVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuCurrenciesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly currencies: ReadonlyArray<QMenuCurrenciesCurrencies>\n\n  readonly companyBranch: QMenuCurrenciesCompanyBranch\n}\n\nexport type QMenuCurrenciesCurrencies = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n\n  readonly code: string\n}\n\nexport type QMenuCurrenciesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly address: QMenuCurrenciesAddress\n}\n\nexport type QMenuCurrenciesAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<QMenuCurrenciesCountry>\n}\n\nexport type QMenuCurrenciesCountry = {\n  readonly __typename?: 'Country'\n\n  readonly currency: QMenuCurrenciesCurrency\n}\n\nexport type QMenuCurrenciesCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n}\n\nexport type QMenuGuideDownloadVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuGuideDownloadQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QMenuGuideDownloadCompanyBranch\n}\n\nexport type QMenuGuideDownloadCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly foodMenuUrl: Maybe<string>\n}\n\nexport type QMenuVatsVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuVatsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vats: ReadonlyArray<QMenuVatsVats>\n}\n\nexport type QMenuVatsVats = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n\n  readonly vat: number\n}\n\nexport type QMenuWareUnitsVariables = {}\n\nexport type QMenuWareUnitsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareUnits: ReadonlyArray<QMenuWareUnitsWareUnits>\n}\n\nexport type QMenuWareUnitsWareUnits = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: WareUnitEnum\n}\n\nexport type MMenuRecipeCreateVariables = {\n  readonly recipe: InputRecipeCreate\n}\n\nexport type MMenuRecipeCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly recipe: MMenuRecipeCreateRecipe\n}\n\nexport type MMenuRecipeCreateRecipe = FMenuRecipeInListFragment\n\nexport type MMenuRecipeDeleteVariables = {\n  readonly recipeId: string\n}\n\nexport type MMenuRecipeDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyRecipe: MMenuRecipeDeleteDestroyRecipe\n}\n\nexport type MMenuRecipeDeleteDestroyRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type MMenuRecipeUpdateVariables = {\n  readonly recipeId: string\n  readonly recipe: InputRecipeUpdate\n}\n\nexport type MMenuRecipeUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly recipe: MMenuRecipeUpdateRecipe\n}\n\nexport type MMenuRecipeUpdateRecipe = FMenuRecipeInListFragment\n\nexport type MMenuRecipeVisibilityVariables = {\n  readonly recipeId: string\n  readonly visible: boolean\n}\n\nexport type MMenuRecipeVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateVisibility: MMenuRecipeVisibilityUpdateVisibility\n}\n\nexport type MMenuRecipeVisibilityUpdateVisibility = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type QMenuRecipeDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuRecipeDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly defaults: QMenuRecipeDefaultsDefaults\n}\n\nexport type QMenuRecipeDefaultsDefaults = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly vats: ReadonlyArray<QMenuRecipeDefaultsVats>\n\n  readonly currency: QMenuRecipeDefaultsCurrency\n}\n\nexport type QMenuRecipeDefaultsVats = {\n  readonly __typename?: 'VatPriceType'\n\n  readonly vatId: string\n\n  readonly priceType: QMenuRecipeDefaultsPriceType\n}\n\nexport type QMenuRecipeDefaultsPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type QMenuRecipeDefaultsCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type QMenuRecipeFormVariables = {\n  readonly recipeId: string\n  readonly language: LanguageEnum\n}\n\nexport type QMenuRecipeFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QMenuRecipeFormRecipe\n}\n\nexport type QMenuRecipeFormRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly sourcePrices: ReadonlyArray<QMenuRecipeFormSourcePrices>\n\n  readonly sourceAssociatedRecipes: ReadonlyArray<\n    QMenuRecipeFormSourceAssociatedRecipes\n  >\n\n  readonly sourceIngredients: ReadonlyArray<QMenuRecipeFormSourceIngredients>\n} & FMenuRecipeInFormFragment\n\nexport type QMenuRecipeFormSourcePrices = FMenuRecipePricingFragment\n\nexport type QMenuRecipeFormSourceAssociatedRecipes = {\n  readonly __typename?: 'RecipeRelation'\n\n  readonly id: string\n\n  readonly priceType: QMenuRecipeFormPriceType\n\n  readonly recipe: QMenuRecipeForm_Recipe\n}\n\nexport type QMenuRecipeFormPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type QMenuRecipeForm_Recipe = FMenuAssocRecipeFragment\n\nexport type QMenuRecipeFormSourceIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly quantity: number\n\n  readonly stockItem: QMenuRecipeFormStockItem\n}\n\nexport type QMenuRecipeFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly label: string\n\n  readonly wareUnit: QMenuRecipeFormWareUnit\n\n  readonly allergens: ReadonlyArray<QMenuRecipeFormAllergens>\n}\n\nexport type QMenuRecipeFormWareUnit = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type QMenuRecipeFormAllergens = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly enum: AllergenEnum\n}\n\nexport type QMenuRecipeFormAssocVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuRecipeFormAssocQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<QMenuRecipeFormAssocRecipes>\n}\n\nexport type QMenuRecipeFormAssocRecipes = FMenuAssocRecipeFragment\n\nexport type QMenuRecipeFormTransVariables = {\n  readonly recipeId: string\n  readonly language: LanguageEnum\n}\n\nexport type QMenuRecipeFormTransQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QMenuRecipeFormTransRecipe\n}\n\nexport type QMenuRecipeFormTransRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n} & FMenuRecipeLocalizedFragment\n\nexport type QMenuRecipeListVariables = {\n  readonly branchId: string\n  readonly categoryId?: Maybe<string>\n  readonly categoryType?: Maybe<WareCategoryTypeEnum>\n}\n\nexport type QMenuRecipeListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<QMenuRecipeListRecipes>\n}\n\nexport type QMenuRecipeListRecipes = FMenuRecipeInListFragment\n\nexport type MMenuStockCreateVariables = {\n  readonly stockItem: InputStockItemCreate\n}\n\nexport type MMenuStockCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createStockItem: MMenuStockCreateCreateStockItem\n}\n\nexport type MMenuStockCreateCreateStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly allowNegative: FieldStateEnum\n} & FMenuStockItemFragment\n\nexport type MMenuStockDeleteVariables = {\n  readonly stockId: string\n}\n\nexport type MMenuStockDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly deleteStockItem: MMenuStockDeleteDeleteStockItem\n}\n\nexport type MMenuStockDeleteDeleteStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n}\n\nexport type MMenuStockQuantityVariables = {\n  readonly stockItem: string\n  readonly quantityChange: number\n}\n\nexport type MMenuStockQuantityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly changeAmountStockItem: MMenuStockQuantityChangeAmountStockItem\n}\n\nexport type MMenuStockQuantityChangeAmountStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly quantity: number\n}\n\nexport type MMenuStockUpdateVariables = {\n  readonly stockId: string\n  readonly stockItem: InputStockItemUpdate\n}\n\nexport type MMenuStockUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateStockItem: MMenuStockUpdateUpdateStockItem\n}\n\nexport type MMenuStockUpdateUpdateStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly allowNegative: FieldStateEnum\n} & FMenuStockItemFragment\n\nexport type QMenuStockDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly defaults: QMenuStockDefaultsDefaults\n}\n\nexport type QMenuStockDefaultsDefaults = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type QMenuStockFormVariables = {\n  readonly stockId: string\n}\n\nexport type QMenuStockFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: QMenuStockFormStockItem\n}\n\nexport type QMenuStockFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly companyBranch: QMenuStockFormCompanyBranch\n} & FMenuStockItemFragment\n\nexport type QMenuStockFormCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type QMenuStockListVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QMenuStockListStockItems>\n}\n\nexport type QMenuStockListStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly allowNegativeValue: boolean\n} & FMenuStockItemFragment\n\nexport type QStockRecipesVariables = {\n  readonly stockId: string\n}\n\nexport type QStockRecipesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: QStockRecipesStockItem\n}\n\nexport type QStockRecipesStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly ingredients: ReadonlyArray<QStockRecipesIngredients>\n}\n\nexport type QStockRecipesIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly recipe: QStockRecipesRecipe\n}\n\nexport type QStockRecipesRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly recipeType: QStockRecipesRecipeType\n}\n\nexport type QStockRecipesRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type MBranchDefaultTimeVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly time: number\n}\n\nexport type MBranchDefaultTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateDefaultOrderProcessTime: MBranchDefaultTimeUpdateDefaultOrderProcessTime\n}\n\nexport type MBranchDefaultTimeUpdateDefaultOrderProcessTime = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type MChangePaymentMethodVariables = {\n  readonly orderId: string\n  readonly paymentMethodId: string\n}\n\nexport type MChangePaymentMethodMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderPaymentMethod: MChangePaymentMethodUpdateOrderPaymentMethod\n}\n\nexport type MChangePaymentMethodUpdateOrderPaymentMethod = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FOrderPaymentMethodsFragment\n\nexport type MFastCloseVariables = {\n  readonly branchId: string\n  readonly interval: number\n  readonly note?: Maybe<string>\n}\n\nexport type MFastCloseMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addSpecialClosingBusinessHours: MFastCloseAddSpecialClosingBusinessHours\n}\n\nexport type MFastCloseAddSpecialClosingBusinessHours = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n}\n\nexport type MOrderChangeToPickupVariables = {\n  readonly orderId: string\n}\n\nexport type MOrderChangeToPickupMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderDeliveryToPickup: MOrderChangeToPickupUpdateOrderDeliveryToPickup\n}\n\nexport type MOrderChangeToPickupUpdateOrderDeliveryToPickup = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliveryType: Maybe<MOrderChangeToPickupDeliveryType>\n}\n\nexport type MOrderChangeToPickupDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type MOrderTimeNotificationVariables = {\n  readonly orderId: string\n  readonly minutes: number\n}\n\nexport type MOrderTimeNotificationMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly orderNotifyCustomer: MOrderTimeNotificationOrderNotifyCustomer\n}\n\nexport type MOrderTimeNotificationOrderNotifyCustomer = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n}\n\nexport type MRemoveOrderDriverVariables = {\n  readonly orderDriverId: string\n}\n\nexport type MRemoveOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyUserDeliveringOrder: MRemoveOrderDriverDestroyUserDeliveringOrder\n}\n\nexport type MRemoveOrderDriverDestroyUserDeliveringOrder = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: MRemoveOrderDriverOrder\n}\n\nexport type MRemoveOrderDriverOrder = FOrderDriverFragment\n\nexport type MSelectOrderDriverVariables = {\n  readonly driverId: string\n  readonly orderId: string\n}\n\nexport type MSelectOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MSelectOrderDriverResult\n}\n\nexport type MSelectOrderDriverResult = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: MSelectOrderDriverOrder\n}\n\nexport type MSelectOrderDriverOrder = FOrderDriverFragment\n\nexport type MTransferOrderVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type MTransferOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly transferOrder: MTransferOrderTransferOrder\n}\n\nexport type MTransferOrderTransferOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type QBranchDefeaultTimesVariables = {\n  readonly branchId: string\n}\n\nexport type QBranchDefeaultTimesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QBranchDefeaultTimesCompanyBranch\n}\n\nexport type QBranchDefeaultTimesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type QIsBranchOpenVariables = {\n  readonly branchId: string\n}\n\nexport type QIsBranchOpenQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QIsBranchOpenCompanyBranch\n}\n\nexport type QIsBranchOpenCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n}\n\nexport type QOrderDetailVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderDetailQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderDetailOrder\n}\n\nexport type QOrderDetailOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly companyBranch: QOrderDetailCompanyBranch\n\n  readonly customer: QOrderDetailCustomer\n\n  readonly customerOrdersCountCurrent: number\n\n  readonly customerOrdersCountTotal: number\n\n  readonly note: Maybe<string>\n\n  readonly allAppliedRules: ReadonlyArray<string>\n\n  readonly items: ReadonlyArray<QOrderDetailItems>\n\n  readonly orderOrigin: QOrderDetailOrderOrigin\n} & (FOrderTotalsFragment & FOrderTimingFragment & FOrderDriverFragment)\n\nexport type QOrderDetailCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type QOrderDetailCustomer = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly emails: ReadonlyArray<QOrderDetailEmails>\n\n  readonly phones: ReadonlyArray<QOrderDetailPhones>\n}\n\nexport type QOrderDetailEmails = FEmailFragment\n\nexport type QOrderDetailPhones = FPhoneFragment\n\nexport type QOrderDetailItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<QOrderDetailSidedishes>\n} & FOrderDetailWareFragment\n\nexport type QOrderDetailSidedishes = FOrderDetailWareFragment\n\nexport type QOrderDetailOrderOrigin = {\n  readonly __typename?: 'OrderOrigin'\n\n  readonly code: string\n\n  readonly enum: OrderOriginEnum\n}\n\nexport type QOrderDriversVariables = {\n  readonly orderId: string\n  readonly branchId: ReadonlyArray<string>\n}\n\nexport type QOrderDriversQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderDriversOrder\n\n  readonly drivers: ReadonlyArray<QOrderDriversDrivers>\n}\n\nexport type QOrderDriversOrder = FOrderDriverFragment\n\nexport type QOrderDriversDrivers = FDriverFragment\n\nexport type QOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QOrderListOrders>\n}\n\nexport type QOrderListOrders = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (FOrderStateCategoryFragment & FOrderTickerFragment)\n\nexport type QOrderListCategoriesVariables = {}\n\nexport type QOrderListCategoriesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QOrderListCategoriesCategories>\n}\n\nexport type QOrderListCategoriesCategories = {\n  readonly __typename?: 'OrderStateCategory'\n\n  readonly label: string\n\n  readonly enum: OrderStateCategoryEnum\n}\n\nexport type QOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QOrderMapDeliveriesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly deliveries: ReadonlyArray<QOrderMapDeliveriesDeliveries>\n}\n\nexport type QOrderMapDeliveriesDeliveries = FOrderMapDeliveryFragment\n\nexport type QOrderMapOrdersVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QOrderMapOrdersQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QOrderMapOrdersOrders>\n}\n\nexport type QOrderMapOrdersOrders = FOrderMapOrderFragment\n\nexport type QOrderReturnZonesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QOrderReturnZonesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zones: ReadonlyArray<QOrderReturnZonesZones>\n}\n\nexport type QOrderReturnZonesZones = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly zoneColor: QOrderReturnZonesZoneColor\n\n  readonly zoneType: QOrderReturnZonesZoneType\n\n  readonly geoPolygon: ReadonlyArray<QOrderReturnZonesGeoPolygon>\n}\n\nexport type QOrderReturnZonesZoneColor = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly color: string\n}\n\nexport type QOrderReturnZonesZoneType = {\n  readonly __typename?: 'ZoneType'\n\n  readonly enum: ZoneTypeEnum\n}\n\nexport type QOrderReturnZonesGeoPolygon = FGeoPointFragment\n\nexport type QOrdersCategoryCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n  readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type QOrdersCategoryCountQuery = {\n  readonly __typename?: 'Query'\n\n  readonly ordersCategoryCount: ReadonlyArray<\n    QOrdersCategoryCountOrdersCategoryCount\n  >\n}\n\nexport type QOrdersCategoryCountOrdersCategoryCount = {\n  readonly __typename?: 'OrderStateCategoryCount'\n\n  readonly category: QOrdersCategoryCountCategory\n\n  readonly count: number\n}\n\nexport type QOrdersCategoryCountCategory = {\n  readonly __typename?: 'OrderStateCategory'\n\n  readonly enum: OrderStateCategoryEnum\n}\n\nexport type QOrderStateVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type QOrderStateQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderStateOrder\n\n  readonly companyBranch: QOrderStateCompanyBranch\n}\n\nexport type QOrderStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly deliveryType: Maybe<QOrderStateDeliveryType>\n\n  readonly isCancelable: boolean\n\n  readonly isPriority: boolean\n} & (FOrderPaymentMethodsFragment & FOrderStateCategoryFragment)\n\nexport type QOrderStateDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type QOrderStateCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowedCategories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type SDriverReturnsVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type SDriverReturnsSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly update: SDriverReturnsUpdate\n}\n\nexport type SDriverReturnsUpdate = {\n  readonly __typename?: 'TransportationDeviceUserUpdateSubscription'\n\n  readonly device: Maybe<SDriverReturnsDevice>\n}\n\nexport type SDriverReturnsDevice = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly id: string\n\n  readonly returning: boolean\n\n  readonly returnZone: Maybe<SDriverReturnsReturnZone>\n\n  readonly user: SDriverReturnsUser\n}\n\nexport type SDriverReturnsReturnZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type SDriverReturnsUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type SOrderCallVariables = {}\n\nexport type SOrderCallSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly call: SOrderCallCall\n}\n\nexport type SOrderCallCall = {\n  readonly __typename?: 'UserCallingCustomerSubscription'\n\n  readonly eventId: string\n\n  readonly phone: string\n\n  readonly prefix: string\n\n  readonly isRinging: boolean\n}\n\nexport type SOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SOrderListUpdatedOrder\n}\n\nexport type SOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SOrderListOrder>\n}\n\nexport type SOrderListOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (FOrderStateCategoryFragment & FOrderTickerFragment)\n\nexport type SOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type SOrderMapDeliveriesSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly update: SOrderMapDeliveriesUpdate\n}\n\nexport type SOrderMapDeliveriesUpdate = {\n  readonly __typename?: 'TransportationDeviceUserUpdateSubscription'\n\n  readonly device: Maybe<SOrderMapDeliveriesDevice>\n}\n\nexport type SOrderMapDeliveriesDevice = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly user: SOrderMapDeliveriesUser\n} & FOrderMapDeviceFragment\n\nexport type SOrderMapDeliveriesUser = FOrderMapDriverFragment\n\nexport type SOrderMapOrdersVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SOrderMapOrdersSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SOrderMapOrdersUpdatedOrder\n}\n\nexport type SOrderMapOrdersUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SOrderMapOrdersOrder>\n}\n\nexport type SOrderMapOrdersOrder = FOrderMapOrderFragment\n\nexport type SOrdersCategoryCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n  readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type SOrdersCategoryCountSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedCount: SOrdersCategoryCountUpdatedCount\n}\n\nexport type SOrdersCategoryCountUpdatedCount = {\n  readonly __typename?: 'OrderCategoryCountSubscription'\n\n  readonly order: SOrdersCategoryCountOrder\n\n  readonly nextCategory: OrderStateCategoryEnum\n\n  readonly prevCategory: OrderStateCategoryEnum\n}\n\nexport type SOrdersCategoryCountOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type MFinancialReportCreateVariables = {\n  readonly branchId: string\n}\n\nexport type MFinancialReportCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MFinancialReportCreateResult\n}\n\nexport type MFinancialReportCreateResult = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n}\n\nexport type QAllDriversVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QAllDriversQuery = {\n  readonly __typename?: 'Query'\n\n  readonly drivers: ReadonlyArray<QAllDriversDrivers>\n}\n\nexport type QAllDriversDrivers = FDriverFragment\n\nexport type QClosureHistoryVariables = {\n  readonly branchId: string\n  readonly dateFrom: string\n  readonly dateTo: string\n}\n\nexport type QClosureHistoryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly history: ReadonlyArray<QClosureHistoryHistory>\n}\n\nexport type QClosureHistoryHistory = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QClosureReportVariables = {\n  readonly branchId: string\n  readonly reportId: string\n  readonly showReport: boolean\n}\n\nexport type QClosureReportQuery = {\n  readonly __typename?: 'Query'\n\n  readonly lastReport: QClosureReportLastReport\n\n  readonly report: Maybe<QClosureReportReport>\n}\n\nexport type QClosureReportLastReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QClosureReportReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QStatsCashboxesVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n}\n\nexport type QStatsCashboxesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly cashBoxes: ReadonlyArray<QStatsCashboxesCashBoxes>\n}\n\nexport type QStatsCashboxesCashBoxes = FStatsCashboxFragment\n\nexport type QStatsCashiersVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n}\n\nexport type QStatsCashiersQuery = {\n  readonly __typename?: 'Query'\n\n  readonly cashiers: ReadonlyArray<QStatsCashiersCashiers>\n}\n\nexport type QStatsCashiersCashiers = FStatsCashierFragment\n\nexport type QStatsDailyVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsDailyQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsDailyStats\n}\n\nexport type QStatsDailyStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly category: string\n\n  readonly daily: string\n\n  readonly delivery: string\n\n  readonly drivers: string\n}\n\nexport type QStatsOrdersVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsOrdersQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersStats\n}\n\nexport type QStatsOrdersStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly finishedOrders: QStatsOrdersFinishedOrders\n\n  readonly orderStatisticsPlain: string\n}\n\nexport type QStatsOrdersFinishedOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly fees: QStatsOrdersFees\n\n  readonly onlinePayments: QStatsOrdersOnlinePayments\n\n  readonly total: QStatsOrdersTotal\n\n  readonly finishedCount: number\n\n  readonly cancelledCount: number\n}\n\nexport type QStatsOrdersFees = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersOnlinePayments = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersTotal = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersCountsVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsOrdersCountsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersCountsStats\n}\n\nexport type QStatsOrdersCountsStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly counts: QStatsOrdersCountsCounts\n}\n\nexport type QStatsOrdersCountsCounts = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly finished: number\n\n  readonly cancelled: number\n}\n\nexport type QStatsOrdersListVariables = {\n  readonly filter: InputStatisticCreate\n  readonly pagination?: Maybe<InputPaginationParams>\n}\n\nexport type QStatsOrdersListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersListStats\n}\n\nexport type QStatsOrdersListStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly orders: QStatsOrdersListOrders\n}\n\nexport type QStatsOrdersListOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly list: ReadonlyArray<QStatsOrdersListList>\n}\n\nexport type QStatsOrdersListList = FOrderTickerFragment &\n  FOrderStateCategoryFragment\n\nexport type MUserMenuLanguageVariables = {\n  readonly userId: string\n  readonly lang: LanguageEnum\n}\n\nexport type MUserMenuLanguageMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateUser: MUserMenuLanguageUpdateUser\n}\n\nexport type MUserMenuLanguageUpdateUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly language: MUserMenuLanguageLanguage\n}\n\nexport type MUserMenuLanguageLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly enum: LanguageEnum\n}\n\nexport type QUserMenuLanguagesVariables = {}\n\nexport type QUserMenuLanguagesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly languages: ReadonlyArray<QUserMenuLanguagesLanguages>\n}\n\nexport type QUserMenuLanguagesLanguages = {\n  readonly __typename?: 'Language'\n\n  readonly code: string\n\n  readonly enum: LanguageEnum\n\n  readonly rawCode: string\n}\n\nexport type MCreateTransfersVariables = {\n  readonly targetBranch: string\n  readonly transfers: ReadonlyArray<InputStockTransferCreate>\n}\n\nexport type MCreateTransfersMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createStockItemTransfers: ReadonlyArray<\n    MCreateTransfersCreateStockItemTransfers\n  >\n}\n\nexport type MCreateTransfersCreateStockItemTransfers = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly quantity: number\n}\n\nexport type QMenuStockDepositVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockDepositQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QMenuStockDepositStockItems>\n}\n\nexport type QMenuStockDepositStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly note: string\n\n  readonly quantity: number\n\n  readonly wareUnit: QMenuStockDepositWareUnit\n}\n\nexport type QMenuStockDepositWareUnit = FMenuWareUnitFragment\n\nexport type QStockForTransferVariables = {\n  readonly branchId: string\n}\n\nexport type QStockForTransferQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QStockForTransferStockItems>\n}\n\nexport type QStockForTransferStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly allowNegativeValue: boolean\n\n  readonly quantity: number\n\n  readonly wareUnit: QStockForTransferWareUnit\n}\n\nexport type QStockForTransferWareUnit = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type QStockStatsVariables = {\n  readonly brandId: string\n}\n\nexport type QStockStatsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QStockStatsStockItems>\n}\n\nexport type QStockStatsStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly companyBranch: QStockStatsCompanyBranch\n\n  readonly plu: Maybe<string>\n\n  readonly quantity: number\n\n  readonly nameLabel: string\n\n  readonly wareUnit: QStockStatsWareUnit\n}\n\nexport type QStockStatsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type QStockStatsWareUnit = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type MZoneCreateVariables = {\n  readonly branchId: string\n  readonly points?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n  readonly type: ZoneTypeEnum\n}\n\nexport type MZoneCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createZone: MZoneCreateCreateZone\n}\n\nexport type MZoneCreateCreateZone = FZoneFragment\n\nexport type MZoneDeleteVariables = {\n  readonly zoneId: string\n}\n\nexport type MZoneDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly deleteZone: MZoneDeleteDeleteZone\n}\n\nexport type MZoneDeleteDeleteZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n}\n\nexport type MZoneUpdateVariables = {\n  readonly zoneId: string\n  readonly update: InputZoneUpdate\n}\n\nexport type MZoneUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZone: MZoneUpdateUpdateZone\n}\n\nexport type MZoneUpdateUpdateZone = FZoneFragment\n\nexport type MZoneUpdatePriorityVariables = {\n  readonly zoneId: string\n  readonly offset: number\n}\n\nexport type MZoneUpdatePriorityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZonePriority: ReadonlyArray<\n    MZoneUpdatePriorityUpdateZonePriority\n  >\n}\n\nexport type MZoneUpdatePriorityUpdateZonePriority = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly priority: number\n}\n\nexport type QZoneColorsVariables = {}\n\nexport type QZoneColorsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zoneColors: ReadonlyArray<QZoneColorsZoneColors>\n}\n\nexport type QZoneColorsZoneColors = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type QZoneFormVariables = {\n  readonly zoneId: string\n}\n\nexport type QZoneFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zone: QZoneFormZone\n}\n\nexport type QZoneFormZone = FZoneInFormFragment\n\nexport type QZoneListVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QZoneListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zones: ReadonlyArray<QZoneListZones>\n}\n\nexport type QZoneListZones = FZoneInListFragment\n\nexport type FAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly state: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n}\n\nexport type FCompanyBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly address: FCompanyBranchAddress\n\n  readonly gps: FCompanyBranchGps\n\n  readonly brand: FCompanyBranchBrand\n\n  readonly defaultLanguage: LanguageEnum\n\n  readonly supportedLanguages: ReadonlyArray<LanguageEnum>\n}\n\nexport type FCompanyBranchAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<FCompanyBranchCountry>\n}\n\nexport type FCompanyBranchCountry = {\n  readonly __typename?: 'Country'\n\n  readonly phonePrefix: string\n}\n\nexport type FCompanyBranchGps = FGeoPointFragment\n\nexport type FCompanyBranchBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FCustomerFragment = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly defaultEmail: Maybe<FCustomerDefaultEmail>\n\n  readonly defaultPhone: Maybe<FCustomerDefaultPhone>\n}\n\nexport type FCustomerDefaultEmail = FEmailFragment\n\nexport type FCustomerDefaultPhone = FPhoneFragment\n\nexport type FEmailFragment = {\n  readonly __typename?: 'Email'\n\n  readonly email: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FGeoPointFragment = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type FOrderStateCategoryFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type FPaymentMethodFragment = {\n  readonly __typename?: 'PaymentMethod'\n\n  readonly id: string\n\n  readonly description: Maybe<string>\n\n  readonly paymentType: FPaymentMethodPaymentType\n\n  readonly paymentGate: FPaymentMethodPaymentGate\n}\n\nexport type FPaymentMethodPaymentType = {\n  readonly __typename?: 'PaymentType'\n\n  readonly enum: PaymentTypeEnum\n}\n\nexport type FPaymentMethodPaymentGate = {\n  readonly __typename?: 'PaymentGate'\n\n  readonly enum: PaymentGateEnum\n\n  readonly code: string\n}\n\nexport type FPhoneFragment = {\n  readonly __typename?: 'Phone'\n\n  readonly phone: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n}\n\nexport type FPriceWithCurrencyFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly currency: FPriceWithCurrencyCurrency\n} & FPriceFragment\n\nexport type FPriceWithCurrencyCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FUserNameFragment = {\n  readonly __typename?: 'User'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type FRegularBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly weekDay: Maybe<FRegularBusinessHourWeekDay>\n}\n\nexport type FRegularBusinessHourWeekDay = {\n  readonly __typename?: 'WeekDay'\n\n  readonly enum: WeekDayEnum\n}\n\nexport type FSpecificBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly companyBranch: FSpecificBusinessHourCompanyBranch\n\n  readonly specificDate: Maybe<string>\n\n  readonly specificDateLocalized: Maybe<string>\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n\n  readonly openAt: string\n\n  readonly closeAt: string\n}\n\nexport type FSpecificBusinessHourCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type FWeekdayFragment = {\n  readonly __typename?: 'WeekDay'\n\n  readonly enum: WeekDayEnum\n\n  readonly code: string\n}\n\nexport type FBranchPaymentMethodsFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly paymentMethods: ReadonlyArray<FBranchPaymentMethodsPaymentMethods>\n}\n\nexport type FBranchPaymentMethodsPaymentMethods = FPaymentMethodFragment\n\nexport type FCreateOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly items: ReadonlyArray<FCreateOrderItems>\n\n  readonly coverPrice: FCreateOrderCoverPrice\n\n  readonly transportFee: FCreateOrderTransportFee\n\n  readonly discounts: ReadonlyArray<FCreateOrderDiscounts>\n\n  readonly minimalOrderPrice: Maybe<FCreateOrderMinimalOrderPrice>\n\n  readonly totalDiscount: FCreateOrderTotalDiscount\n\n  readonly totalSum: FCreateOrderTotalSum\n}\n\nexport type FCreateOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly recipe: FCreateOrderRecipe\n\n  readonly priceWithSidedishes: FCreateOrderPriceWithSidedishes\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderSidedishes>\n} & FCreateOrderItemFragment\n\nexport type FCreateOrderRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly sidedishCount: number\n}\n\nexport type FCreateOrderPriceWithSidedishes = FPriceFragment\n\nexport type FCreateOrderSidedishes = FCreateOrderItemFragment\n\nexport type FCreateOrderCoverPrice = FPriceFragment\n\nexport type FCreateOrderTransportFee = FPriceFragment\n\nexport type FCreateOrderDiscounts = {\n  readonly __typename?: 'PriceWithDescription'\n\n  readonly code: string\n\n  readonly description: string\n\n  readonly price: FCreateOrderPrice\n}\n\nexport type FCreateOrderPrice = FPriceFragment\n\nexport type FCreateOrderMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type FCreateOrderTotalDiscount = FPriceFragment\n\nexport type FCreateOrderTotalSum = FPriceFragment\n\nexport type FCreateOrderItemFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly price: FCreateOrderItemPrice\n\n  readonly recipe: FCreateOrderItemRecipe\n}\n\nexport type FCreateOrderItemPrice = FPriceFragment\n\nexport type FCreateOrderItemRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FCreateOrderRecipeSidedishesFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly sidedishCategories: ReadonlyArray<\n    FCreateOrderRecipeSidedishesSidedishCategories\n  >\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderRecipeSidedishesSidedishes>\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly price: FCreateOrderRecipeSidedishesPrice\n}\n\nexport type FCreateOrderRecipeSidedishesPrice = FPriceFragment\n\nexport type FOrderMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly pictogram: Maybe<string>\n\n  readonly recipes: ReadonlyArray<FOrderMenuCategoryRecipes>\n}\n\nexport type FOrderMenuCategoryRecipes = FOrderMenuRecipeFragment\n\nexport type FOrderMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly price: FOrderMenuRecipePrice\n\n  readonly sidedishCount: number\n}\n\nexport type FOrderMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FOrderMenuRecipeCurrency\n}\n\nexport type FOrderMenuRecipeCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FKitchenCompletionOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly cashBox: Maybe<FKitchenCompletionOrderCashBox>\n\n  readonly orderNumber: Maybe<number>\n\n  readonly orderOrigin: FKitchenCompletionOrderOrderOrigin\n\n  readonly sector: Maybe<FKitchenCompletionOrderSector>\n\n  readonly note: Maybe<string>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n} & FKitchenOrderBaseFragment\n\nexport type FKitchenCompletionOrderCashBox = {\n  readonly __typename?: 'CashBox'\n\n  readonly id: string\n}\n\nexport type FKitchenCompletionOrderOrderOrigin = {\n  readonly __typename?: 'OrderOrigin'\n\n  readonly code: string\n}\n\nexport type FKitchenCompletionOrderSector = {\n  readonly __typename?: 'Sector'\n\n  readonly name: string\n}\n\nexport type FKitchenOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly address: FKitchenOrderAddress\n\n  readonly customer: FKitchenOrderCustomer\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly note: Maybe<string>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n\n  readonly sector: Maybe<FKitchenOrderSector>\n} & FKitchenOrderBaseFragment\n\nexport type FKitchenOrderAddress = FAddressFragment\n\nexport type FKitchenOrderCustomer = FCustomerFragment\n\nexport type FKitchenOrderSector = {\n  readonly __typename?: 'Sector'\n\n  readonly name: string\n}\n\nexport type FKitchenOrderBaseFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliveryType: Maybe<FKitchenOrderBaseDeliveryType>\n\n  readonly companyBranch: FKitchenOrderBaseCompanyBranch\n\n  readonly isPriority: boolean\n\n  readonly items: ReadonlyArray<FKitchenOrderBaseItems>\n}\n\nexport type FKitchenOrderBaseDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FKitchenOrderBaseCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FKitchenOrderBaseItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<FKitchenOrderBaseSidedishes>\n} & FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderBaseSidedishes = FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderRecipeFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FKitchenOrderRecipeRecipe\n} & FKitchenOrderStateFragment\n\nexport type FKitchenOrderRecipeRecipe = FKitchenRecipeFragment\n\nexport type FKitchenOrderStateFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly state: FKitchenOrderStateState\n}\n\nexport type FKitchenOrderStateState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type FKitchenRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly name: string\n}\n\nexport type FKitchenSectorRecipeFragment = {\n  readonly __typename?: 'SectorRecipe'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly recipe: FKitchenSectorRecipeRecipe\n\n  readonly sideDishes: ReadonlyArray<FKitchenSectorRecipeSideDishes>\n\n  readonly sector: FKitchenSectorRecipeSector\n} & FKitchenSectorStateFragment\n\nexport type FKitchenSectorRecipeRecipe = FKitchenRecipeFragment\n\nexport type FKitchenSectorRecipeSideDishes = {\n  readonly __typename?: 'SectorRecipe'\n\n  readonly id: string\n\n  readonly recipe: FKitchenSectorRecipe_Recipe\n}\n\nexport type FKitchenSectorRecipe_Recipe = FKitchenRecipeFragment\n\nexport type FKitchenSectorRecipeSector = {\n  readonly __typename?: 'Sector'\n\n  readonly id: string\n}\n\nexport type FKitchenSectorStateFragment = {\n  readonly __typename?: 'SectorRecipe'\n\n  readonly id: string\n\n  readonly state: FKitchenSectorStateState\n}\n\nexport type FKitchenSectorStateState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type FMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly visible: boolean\n\n  readonly categoryType: FMenuCategoryCategoryType\n\n  readonly origins: ReadonlyArray<OrderOriginCategoryEnum>\n}\n\nexport type FMenuCategoryCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuCategoryInFormFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly pictogram: Maybe<string>\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly recipes: ReadonlyArray<FMenuCategoryInFormRecipes>\n} & (FMenuCategoryFragment & FMenuCategoryLocalizedFragment)\n\nexport type FMenuCategoryInFormRecipes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: Maybe<string>\n\n  readonly internalNote: Maybe<string>\n\n  readonly prices: ReadonlyArray<FMenuCategoryInFormPrices>\n}\n\nexport type FMenuCategoryInFormPrices = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly priceType: FMenuCategoryInFormPriceType\n\n  readonly price: FMenuCategoryInFormPrice\n}\n\nexport type FMenuCategoryInFormPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type FMenuCategoryInFormPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FMenuCategoryInFormCurrency\n}\n\nexport type FMenuCategoryInFormCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FMenuCategoryInListFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly countRecipes: number\n} & FMenuCategoryFragment\n\nexport type FMenuCategoryLocalizedFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly nameLabel: Maybe<string>\n\n  readonly internalNoteLabel: Maybe<string>\n}\n\nexport type FMenuAllergenFragment = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: AllergenEnum\n\n  readonly category: number\n}\n\nexport type FMenuWareUnitFragment = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly enum: WareUnitEnum\n\n  readonly code: string\n}\n\nexport type FMenuAssocRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n}\n\nexport type FMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly internalCode: string\n\n  readonly visible: boolean\n\n  readonly recipeType: FMenuRecipeRecipeType\n}\n\nexport type FMenuRecipeRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuRecipeInFormFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly image: Maybe<string>\n\n  readonly sideDishes: ReadonlyArray<FMenuRecipeInFormSideDishes>\n\n  readonly categories: ReadonlyArray<FMenuRecipeInFormCategories>\n} & (FMenuRecipeFragment & FMenuRecipeLocalizedFragment)\n\nexport type FMenuRecipeInFormSideDishes = FMenuCategoryInListFragment\n\nexport type FMenuRecipeInFormCategories = FMenuCategoryInListFragment\n\nexport type FMenuRecipeInListFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly availableAmount: number\n\n  readonly prices: ReadonlyArray<FMenuRecipeInListPrices>\n} & FMenuRecipeFragment\n\nexport type FMenuRecipeInListPrices = FMenuRecipePricingFragment\n\nexport type FMenuRecipeLocalizedFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly nameLabel: Maybe<string>\n\n  readonly descriptionLabel: Maybe<string>\n}\n\nexport type FMenuRecipePricingFragment = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: FMenuRecipePricingPriceType\n\n  readonly price: FMenuRecipePricingPrice\n\n  readonly vat: FMenuRecipePricingVat\n}\n\nexport type FMenuRecipePricingPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type FMenuRecipePricingPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FMenuRecipePricingCurrency\n}\n\nexport type FMenuRecipePricingCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FMenuRecipePricingVat = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n}\n\nexport type FMenuStockItemFragment = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly note: string\n\n  readonly plu: Maybe<string>\n\n  readonly quantity: number\n\n  readonly nameLabel: string\n\n  readonly allergens: ReadonlyArray<FMenuStockItemAllergens>\n\n  readonly wareUnit: FMenuStockItemWareUnit\n}\n\nexport type FMenuStockItemAllergens = FMenuAllergenFragment\n\nexport type FMenuStockItemWareUnit = FMenuWareUnitFragment\n\nexport type FDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n} & FUserNameFragment\n\nexport type FOrderDetailWareFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FOrderDetailWareRecipe\n\n  readonly price: FOrderDetailWarePrice\n}\n\nexport type FOrderDetailWareRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FOrderDetailWarePrice = FPriceFragment\n\nexport type FOrderDriverFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly driver: Maybe<FOrderDriverDriver>\n}\n\nexport type FOrderDriverDriver = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly id: string\n\n  readonly user: FOrderDriverUser\n}\n\nexport type FOrderDriverUser = FDriverFragment\n\nexport type FOrderMapDeliveryFragment = {\n  readonly __typename?: 'User'\n\n  readonly device: Maybe<FOrderMapDeliveryDevice>\n} & FOrderMapDriverFragment\n\nexport type FOrderMapDeliveryDevice = FOrderMapDeviceFragment\n\nexport type FOrderMapDeviceFragment = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly id: string\n\n  readonly lastPosition: Maybe<FOrderMapDeviceLastPosition>\n\n  readonly isFinalized: boolean\n\n  readonly transportationDevice: FOrderMapDeviceTransportationDevice\n}\n\nexport type FOrderMapDeviceLastPosition = {\n  readonly __typename?: 'GeoPositionWithTimestamp'\n\n  readonly gps: FOrderMapDeviceGps\n\n  readonly timestamp: string\n}\n\nexport type FOrderMapDeviceGps = FGeoPointFragment\n\nexport type FOrderMapDeviceTransportationDevice = {\n  readonly __typename?: 'TransportationDevice'\n\n  readonly deviceState: FOrderMapDeviceDeviceState\n}\n\nexport type FOrderMapDeviceDeviceState = {\n  readonly __typename?: 'DeviceState'\n\n  readonly enum: DeviceStateEnum\n}\n\nexport type FOrderMapDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n\n  readonly countUndeliveredOrders: number\n}\n\nexport type FOrderMapOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliveryType: Maybe<FOrderMapOrderDeliveryType>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n\n  readonly gps: Maybe<FOrderMapOrderGps>\n}\n\nexport type FOrderMapOrderDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FOrderMapOrderGps = FGeoPointFragment\n\nexport type FOrderPaymentMethodsFragment = {\n  readonly __typename?: 'Order'\n\n  readonly paymentMethods: ReadonlyArray<FOrderPaymentMethodsPaymentMethods>\n}\n\nexport type FOrderPaymentMethodsPaymentMethods = FPaymentMethodFragment\n\nexport type FOrderTickerFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly isPaidWithCard: boolean\n\n  readonly isPriority: boolean\n\n  readonly deliveryType: Maybe<FOrderTickerDeliveryType>\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliverAtWorst: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly companyBranch: FOrderTickerCompanyBranch\n\n  readonly address: FOrderTickerAddress\n\n  readonly customer: FOrderTickerCustomer\n\n  readonly totalSum: FOrderTickerTotalSum\n\n  readonly sector: Maybe<FOrderTickerSector>\n}\n\nexport type FOrderTickerDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FOrderTickerCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly oldOrderThreshold: number\n}\n\nexport type FOrderTickerAddress = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly original: Maybe<string>\n} & FAddressFragment\n\nexport type FOrderTickerCustomer = FCustomerFragment\n\nexport type FOrderTickerTotalSum = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type FOrderTickerSector = {\n  readonly __typename?: 'Sector'\n\n  readonly name: string\n}\n\nexport type FOrderTimingFragment = {\n  readonly __typename?: 'Order'\n\n  readonly orderTiming: ReadonlyArray<FOrderTimingOrderTiming>\n}\n\nexport type FOrderTimingOrderTiming = {\n  readonly __typename?: 'OrderStateCategoryRelation'\n\n  readonly createdAt: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type FOrderTotalsFragment = {\n  readonly __typename?: 'Order'\n\n  readonly totalSum: FOrderTotalsTotalSum\n\n  readonly transportFee: FOrderTotalsTransportFee\n\n  readonly coverPrice: FOrderTotalsCoverPrice\n\n  readonly totalDiscount: FOrderTotalsTotalDiscount\n\n  readonly tip: FOrderTotalsTip\n\n  readonly extraCharge: FOrderTotalsExtraCharge\n}\n\nexport type FOrderTotalsTotalSum = FPriceFragment\n\nexport type FOrderTotalsTransportFee = FPriceFragment\n\nexport type FOrderTotalsCoverPrice = FPriceFragment\n\nexport type FOrderTotalsTotalDiscount = FPriceFragment\n\nexport type FOrderTotalsTip = FPriceFragment\n\nexport type FOrderTotalsExtraCharge = FPriceFragment\n\nexport type FStatsCashboxFragment = {\n  readonly __typename?: 'CashBox'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly uuid: string\n\n  readonly user: Maybe<FStatsCashboxUser>\n}\n\nexport type FStatsCashboxUser = {\n  readonly __typename?: 'User'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type FStatsCashierFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type FZoneFragment = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly enabled: boolean\n\n  readonly priority: number\n\n  readonly zoneColor: FZoneZoneColor\n\n  readonly zoneType: FZoneZoneType\n\n  readonly geoPolygon: ReadonlyArray<FZoneGeoPolygon>\n}\n\nexport type FZoneZoneColor = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type FZoneZoneType = {\n  readonly __typename?: 'ZoneType'\n\n  readonly enum: ZoneTypeEnum\n}\n\nexport type FZoneGeoPolygon = FGeoPointFragment\n\nexport type FZoneInFormFragment = {\n  readonly __typename?: 'Zone'\n\n  readonly enabled: boolean\n\n  readonly priceRangeRules: ReadonlyArray<FZoneInFormPriceRangeRules>\n\n  readonly minimalOrderPrice: FZoneInFormMinimalOrderPrice\n\n  readonly branchWithCurrency: FZoneInFormBranchWithCurrency\n} & FZoneFragment\n\nexport type FZoneInFormPriceRangeRules = FZonePriceRangeFragment\n\nexport type FZoneInFormMinimalOrderPrice = FPriceFragment\n\nexport type FZoneInFormBranchWithCurrency = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly currency: FZoneInFormCurrency\n}\n\nexport type FZoneInFormCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FZoneInListFragment = {\n  readonly __typename?: 'Zone'\n\n  readonly companyBranch: FZoneInListCompanyBranch\n} & FZoneFragment\n\nexport type FZoneInListCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly brand: FZoneInListBrand\n}\n\nexport type FZoneInListBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type FZonePriceRangeFragment = {\n  readonly __typename?: 'ZonePriceRangeRule'\n\n  readonly toPrice: FZonePriceRangeToPrice\n\n  readonly price: FZonePriceRangePrice\n}\n\nexport type FZonePriceRangeToPrice = FPriceFragment\n\nexport type FZonePriceRangePrice = FPriceFragment\n\nimport * as Hooks from '@speedlo/graphql/dist/hooks'\nimport gql from 'graphql-tag'\n\n// ====================================================\n// Fragments\n// ====================================================\n\nexport const FGeoPointFragmentDoc = gql`\n  fragment FGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const FCompanyBranchFragmentDoc = gql`\n  fragment FCompanyBranch on CompanyBranch {\n    id\n    name\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    gps {\n      ...FGeoPoint\n    }\n    brand {\n      id\n      name\n    }\n    defaultLanguage\n    supportedLanguages\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderStateCategoryFragmentDoc = gql`\n  fragment FOrderStateCategory on Order {\n    id\n    orderStateCategory\n  }\n`\n\nexport const FPriceFragmentDoc = gql`\n  fragment FPrice on PriceConverted {\n    value\n  }\n`\n\nexport const FPriceWithCurrencyFragmentDoc = gql`\n  fragment FPriceWithCurrency on PriceConverted {\n    ...FPrice\n    currency {\n      code\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FRegularBusinessHourFragmentDoc = gql`\n  fragment FRegularBusinessHour on BusinessHour {\n    id\n    openAt\n    closeAt\n    weekDay {\n      enum\n    }\n  }\n`\n\nexport const FSpecificBusinessHourFragmentDoc = gql`\n  fragment FSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const FWeekdayFragmentDoc = gql`\n  fragment FWeekday on WeekDay {\n    enum\n    code\n  }\n`\n\nexport const FPaymentMethodFragmentDoc = gql`\n  fragment FPaymentMethod on PaymentMethod {\n    id\n    description\n    paymentType {\n      enum\n    }\n    paymentGate {\n      enum\n      code\n    }\n  }\n`\n\nexport const FBranchPaymentMethodsFragmentDoc = gql`\n  fragment FBranchPaymentMethods on CompanyBranch {\n    paymentMethods: canBeUpdatedToPaymentMethods {\n      ...FPaymentMethod\n    }\n  }\n\n  ${FPaymentMethodFragmentDoc}\n`\n\nexport const FCreateOrderItemFragmentDoc = gql`\n  fragment FCreateOrderItem on OrderRecipe {\n    id\n    price {\n      ...FPrice\n    }\n    recipe {\n      id\n      code\n      nameLabel\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderFragmentDoc = gql`\n  fragment FCreateOrder on Order {\n    id\n    countWares\n    items {\n      ...FCreateOrderItem\n      recipe {\n        sidedishCount: sideDishesWareCategoriesCount\n      }\n      priceWithSidedishes: priceWithSideDishes {\n        ...FPrice\n      }\n      sidedishes: sideDishes {\n        ...FCreateOrderItem\n      }\n    }\n    coverPrice {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...FPrice\n      }\n    }\n    minimalOrderPrice {\n      formattedValue\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    totalSum {\n      ...FPrice\n    }\n  }\n\n  ${FCreateOrderItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderRecipeSidedishesFragmentDoc = gql`\n  fragment FCreateOrderRecipeSidedishes on Recipe {\n    id\n    nameLabel\n    sidedishCategories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sidedishes: sideDishes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderMenuRecipeFragmentDoc = gql`\n  fragment FOrderMenuRecipe on Recipe {\n    id\n    code\n    nameLabel\n    descriptionLabel\n    price(warePriceType: DELIVERY) {\n      value\n      currency {\n        code\n      }\n    }\n    sidedishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const FOrderMenuCategoryFragmentDoc = gql`\n  fragment FOrderMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n    recipes(enabled: true, isAvailable: true) {\n      ...FOrderMenuRecipe\n    }\n  }\n\n  ${FOrderMenuRecipeFragmentDoc}\n`\n\nexport const FKitchenRecipeFragmentDoc = gql`\n  fragment FKitchenRecipe on Recipe {\n    id\n    code\n    name: nameLabel\n  }\n`\n\nexport const FKitchenOrderStateFragmentDoc = gql`\n  fragment FKitchenOrderState on OrderRecipe {\n    id\n    state: orderRecipeState {\n      enum\n    }\n  }\n`\n\nexport const FKitchenOrderRecipeFragmentDoc = gql`\n  fragment FKitchenOrderRecipe on OrderRecipe {\n    id\n    recipe {\n      ...FKitchenRecipe\n    }\n    ...FKitchenOrderState\n  }\n\n  ${FKitchenRecipeFragmentDoc}\n  ${FKitchenOrderStateFragmentDoc}\n`\n\nexport const FKitchenOrderBaseFragmentDoc = gql`\n  fragment FKitchenOrderBase on Order {\n    id\n    createdAt\n    deliverAt\n    deliveryType {\n      enum\n    }\n    companyBranch {\n      id\n      name\n    }\n    isPriority\n    items {\n      ...FKitchenOrderRecipe\n      sidedishes: sideDishes {\n        ...FKitchenOrderRecipe\n      }\n    }\n  }\n\n  ${FKitchenOrderRecipeFragmentDoc}\n`\n\nexport const FKitchenCompletionOrderFragmentDoc = gql`\n  fragment FKitchenCompletionOrder on Order {\n    ...FKitchenOrderBase\n    cashBox {\n      id\n    }\n    orderNumber: invoiceSequenceResettable\n    orderOrigin {\n      code\n    }\n    sector {\n      name\n    }\n    note\n    orderStateCategory(target: FE_COMPLETION)\n  }\n\n  ${FKitchenOrderBaseFragmentDoc}\n`\n\nexport const FAddressFragmentDoc = gql`\n  fragment FAddress on JsonAddress {\n    state\n    city\n    street\n    houseNumber\n  }\n`\n\nexport const FEmailFragmentDoc = gql`\n  fragment FEmail on Email {\n    email\n    description\n    default\n  }\n`\n\nexport const FPhoneFragmentDoc = gql`\n  fragment FPhone on Phone {\n    phone\n    description\n    default\n  }\n`\n\nexport const FCustomerFragmentDoc = gql`\n  fragment FCustomer on JsonCustomer {\n    firstName\n    lastName\n    defaultEmail {\n      ...FEmail\n    }\n    defaultPhone {\n      ...FPhone\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n`\n\nexport const FKitchenOrderFragmentDoc = gql`\n  fragment FKitchenOrder on Order {\n    ...FKitchenOrderBase\n    address {\n      ...FAddress\n    }\n    customer {\n      ...FCustomer\n    }\n    deliverAt\n    deliveredAt\n    delayedDeliveryTime\n    note\n    orderStateCategory(target: FE_KITCHEN)\n    sector {\n      name\n    }\n  }\n\n  ${FKitchenOrderBaseFragmentDoc}\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n`\n\nexport const FKitchenSectorStateFragmentDoc = gql`\n  fragment FKitchenSectorState on SectorRecipe {\n    id\n    state: orderRecipeState {\n      enum\n    }\n  }\n`\n\nexport const FKitchenSectorRecipeFragmentDoc = gql`\n  fragment FKitchenSectorRecipe on SectorRecipe {\n    id\n    createdAt\n    recipe {\n      ...FKitchenRecipe\n    }\n    sideDishes {\n      id\n      recipe {\n        ...FKitchenRecipe\n      }\n    }\n    sector {\n      id\n    }\n    ...FKitchenSectorState\n  }\n\n  ${FKitchenRecipeFragmentDoc}\n  ${FKitchenSectorStateFragmentDoc}\n`\n\nexport const FMenuCategoryFragmentDoc = gql`\n  fragment FMenuCategory on WareCategory {\n    id\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    origins: orderOriginCategories\n  }\n`\n\nexport const FMenuCategoryLocalizedFragmentDoc = gql`\n  fragment FMenuCategoryLocalized on WareCategory {\n    nameLabel: nameLabelTranslated\n    internalNoteLabel: internalNoteLabelTranslated\n  }\n`\n\nexport const FMenuCategoryInFormFragmentDoc = gql`\n  fragment FMenuCategoryInForm on WareCategory {\n    ...FMenuCategory\n    ...FMenuCategoryLocalized\n    pictogram\n    minCount\n    maxCount\n    recipes {\n      id\n      code\n      nameLabel: nameLabelTranslated\n      internalNote\n      prices {\n        priceType: warePriceType {\n          enum\n        }\n        price {\n          value\n          currency {\n            code\n          }\n        }\n      }\n    }\n  }\n\n  ${FMenuCategoryFragmentDoc}\n  ${FMenuCategoryLocalizedFragmentDoc}\n`\n\nexport const FMenuAssocRecipeFragmentDoc = gql`\n  fragment FMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const FMenuRecipeFragmentDoc = gql`\n  fragment FMenuRecipe on Recipe {\n    id\n    code\n    internalNote\n    internalCode\n    visible: enabled\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n`\n\nexport const FMenuRecipeLocalizedFragmentDoc = gql`\n  fragment FMenuRecipeLocalized on Recipe {\n    nameLabel: nameLabelTranslated\n    descriptionLabel: descriptionLabelTranslated\n  }\n`\n\nexport const FMenuCategoryInListFragmentDoc = gql`\n  fragment FMenuCategoryInList on WareCategory {\n    ...FMenuCategory\n    nameLabel\n    internalNoteLabel\n    countRecipes\n  }\n\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport const FMenuRecipeInFormFragmentDoc = gql`\n  fragment FMenuRecipeInForm on Recipe {\n    ...FMenuRecipe\n    ...FMenuRecipeLocalized\n    image\n    sideDishes: sideDishesWareCategories {\n      ...FMenuCategoryInList\n    }\n    categories: wareCategories {\n      ...FMenuCategoryInList\n    }\n  }\n\n  ${FMenuRecipeFragmentDoc}\n  ${FMenuRecipeLocalizedFragmentDoc}\n  ${FMenuCategoryInListFragmentDoc}\n`\n\nexport const FMenuRecipePricingFragmentDoc = gql`\n  fragment FMenuRecipePricing on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      value\n      currency {\n        code\n      }\n    }\n    vat {\n      id\n    }\n  }\n`\n\nexport const FMenuRecipeInListFragmentDoc = gql`\n  fragment FMenuRecipeInList on Recipe {\n    ...FMenuRecipe\n    nameLabel\n    descriptionLabel\n    availableAmount\n    prices {\n      ...FMenuRecipePricing\n    }\n  }\n\n  ${FMenuRecipeFragmentDoc}\n  ${FMenuRecipePricingFragmentDoc}\n`\n\nexport const FMenuAllergenFragmentDoc = gql`\n  fragment FMenuAllergen on Allergen {\n    id\n    code\n    enum\n    category\n  }\n`\n\nexport const FMenuWareUnitFragmentDoc = gql`\n  fragment FMenuWareUnit on WareUnit {\n    id\n    enum\n    code\n  }\n`\n\nexport const FMenuStockItemFragmentDoc = gql`\n  fragment FMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...FMenuAllergen\n    }\n    wareUnit {\n      ...FMenuWareUnit\n    }\n  }\n\n  ${FMenuAllergenFragmentDoc}\n  ${FMenuWareUnitFragmentDoc}\n`\n\nexport const FOrderDetailWareFragmentDoc = gql`\n  fragment FOrderDetailWare on OrderRecipe {\n    id\n    recipe {\n      id\n      code\n      nameLabel\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FUserNameFragmentDoc = gql`\n  fragment FUserName on User {\n    firstName\n    lastName\n  }\n`\n\nexport const FDriverFragmentDoc = gql`\n  fragment FDriver on User {\n    id\n    initials\n    ...FUserName\n  }\n\n  ${FUserNameFragmentDoc}\n`\n\nexport const FOrderDriverFragmentDoc = gql`\n  fragment FOrderDriver on Order {\n    id\n    driver: userDeliveringOrder {\n      id\n      user {\n        ...FDriver\n      }\n    }\n  }\n\n  ${FDriverFragmentDoc}\n`\n\nexport const FOrderMapDriverFragmentDoc = gql`\n  fragment FOrderMapDriver on User {\n    id\n    initials\n    countUndeliveredOrders\n  }\n`\n\nexport const FOrderMapDeviceFragmentDoc = gql`\n  fragment FOrderMapDevice on TransportationDeviceUser {\n    id\n    lastPosition {\n      gps: geoPosition {\n        ...FGeoPoint\n      }\n      timestamp\n    }\n    isFinalized\n    transportationDevice {\n      deviceState {\n        enum\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderMapDeliveryFragmentDoc = gql`\n  fragment FOrderMapDelivery on User {\n    ...FOrderMapDriver\n    device: usedTransportationDevice {\n      ...FOrderMapDevice\n    }\n  }\n\n  ${FOrderMapDriverFragmentDoc}\n  ${FOrderMapDeviceFragmentDoc}\n`\n\nexport const FOrderMapOrderFragmentDoc = gql`\n  fragment FOrderMapOrder on Order {\n    id\n    deliverAt\n    deliveryType {\n      enum\n    }\n    delayedDeliveryTime\n    orderStateCategory\n    gps {\n      ...FGeoPoint\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderPaymentMethodsFragmentDoc = gql`\n  fragment FOrderPaymentMethods on Order {\n    paymentMethods: canBeUpdatedToPaymentMethods {\n      ...FPaymentMethod\n    }\n  }\n\n  ${FPaymentMethodFragmentDoc}\n`\n\nexport const FOrderTickerFragmentDoc = gql`\n  fragment FOrderTicker on Order {\n    id\n    createdAt\n    isPaidWithCard\n    isPriority\n    deliveryType {\n      enum\n    }\n    deliverAt\n    deliverAtWorst\n    deliveredAt\n    delayedDeliveryTime\n    companyBranch {\n      id\n      name\n      oldOrderThreshold\n    }\n    address {\n      ...FAddress\n      original\n    }\n    customer {\n      ...FCustomer\n    }\n    totalSum {\n      formattedValue\n    }\n    sector {\n      name\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n`\n\nexport const FOrderTimingFragmentDoc = gql`\n  fragment FOrderTiming on Order {\n    orderTiming: orderStateCategoryRelations {\n      createdAt\n      orderStateCategory\n    }\n  }\n`\n\nexport const FOrderTotalsFragmentDoc = gql`\n  fragment FOrderTotals on Order {\n    totalSum {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    coverPrice {\n      ...FPrice\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    tip {\n      ...FPrice\n    }\n    extraCharge {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FStatsCashboxFragmentDoc = gql`\n  fragment FStatsCashbox on CashBox {\n    id\n    name\n    uuid\n    user {\n      firstName\n      lastName\n    }\n  }\n`\n\nexport const FStatsCashierFragmentDoc = gql`\n  fragment FStatsCashier on User {\n    id\n    firstName\n    lastName\n  }\n`\n\nexport const FZoneFragmentDoc = gql`\n  fragment FZone on Zone {\n    id\n    name\n    enabled\n    priority\n    zoneColor {\n      id\n      code\n      color\n    }\n    zoneType {\n      enum\n    }\n    geoPolygon {\n      ...FGeoPoint\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FZonePriceRangeFragmentDoc = gql`\n  fragment FZonePriceRange on ZonePriceRangeRule {\n    toPrice {\n      ...FPrice\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FZoneInFormFragmentDoc = gql`\n  fragment FZoneInForm on Zone {\n    ...FZone\n    enabled\n    priceRangeRules {\n      ...FZonePriceRange\n    }\n    minimalOrderPrice {\n      ...FPrice\n    }\n    branchWithCurrency: companyBranch {\n      id\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n\n  ${FZoneFragmentDoc}\n  ${FZonePriceRangeFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FZoneInListFragmentDoc = gql`\n  fragment FZoneInList on Zone {\n    ...FZone\n    companyBranch {\n      id\n      brand {\n        id\n      }\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\n// ====================================================\n// Hooks\n// ====================================================\n\nexport const GOrderVamDocument = gql`\n  query GOrderVam($branchId: ID!, $phone: String!) {\n    vamCustomer: vamInformation(companyBranchId: $branchId, phone: $phone) {\n      isFound\n      email\n      firstName\n      lastName\n      lastOrder {\n        note\n      }\n      locations {\n        street\n        houseNumber\n        city\n        state\n        gps {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n`\n\nexport function useGOrderVam(\n  variables?: GOrderVamVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderVamVariables>,\n) {\n  return Hooks.useQuery<GOrderVamQuery, GOrderVamVariables>(\n    GOrderVamDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGOrderVam(\n  options?: Hooks.ExecutableQueryOptions<GOrderVamVariables>,\n) {\n  return Hooks.useExecutableQuery<GOrderVamQuery, GOrderVamVariables>(\n    GOrderVamDocument,\n    options,\n  )\n}\n\nexport const GOrderPromoDocument = gql`\n  query GOrderPromo($branchId: ID!) {\n    promoCodes(promoCode: { companyBranch: $branchId, enabled: true }) {\n      id\n      code\n    }\n  }\n`\n\nexport function useGOrderPromo(\n  variables?: GOrderPromoVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderPromoVariables>,\n) {\n  return Hooks.useQuery<GOrderPromoQuery, GOrderPromoVariables>(\n    GOrderPromoDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableGOrderPromo(\n  options?: Hooks.ExecutableQueryOptions<GOrderPromoVariables>,\n) {\n  return Hooks.useExecutableQuery<GOrderPromoQuery, GOrderPromoVariables>(\n    GOrderPromoDocument,\n    options,\n  )\n}\n\nexport const QAddressSuggestDocument = gql`\n  query QAddressSuggest($search: String!) {\n    suggest: suggestGeolocation(address: $search) {\n      ...FAddress\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useQAddressSuggest(\n  variables?: QAddressSuggestVariables,\n  baseOptions?: Hooks.QueryHookOptions<QAddressSuggestVariables>,\n) {\n  return Hooks.useQuery<QAddressSuggestQuery, QAddressSuggestVariables>(\n    QAddressSuggestDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQAddressSuggest(\n  options?: Hooks.ExecutableQueryOptions<QAddressSuggestVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QAddressSuggestQuery,\n    QAddressSuggestVariables\n  >(QAddressSuggestDocument, options)\n}\n\nexport const MOrderStateDocument = gql`\n  mutation MOrderState($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...FOrderStateCategory\n      ...FOrderTiming\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTimingFragmentDoc}\n`\n\nexport function useMOrderState(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderStateMutation,\n    MOrderStateVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderStateMutation, MOrderStateVariables>(\n    MOrderStateDocument,\n    baseOptions,\n  )\n}\n\nexport const MSetPriorityOrderDocument = gql`\n  mutation MSetPriorityOrder($orderId: ID!, $isPriority: Boolean!) {\n    setPriorityOrder(order: $orderId, isPriority: $isPriority) {\n      id\n      isPriority\n    }\n  }\n`\n\nexport function useMSetPriorityOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSetPriorityOrderMutation,\n    MSetPriorityOrderVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSetPriorityOrderMutation,\n    MSetPriorityOrderVariables\n  >(MSetPriorityOrderDocument, baseOptions)\n}\n\nexport const QLogoutWidgetDocument = gql`\n  query QLogoutWidget($id: ID!) {\n    user(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n`\n\nexport function useQLogoutWidget(\n  variables?: QLogoutWidgetVariables,\n  baseOptions?: Hooks.QueryHookOptions<QLogoutWidgetVariables>,\n) {\n  return Hooks.useQuery<QLogoutWidgetQuery, QLogoutWidgetVariables>(\n    QLogoutWidgetDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQLogoutWidget(\n  options?: Hooks.ExecutableQueryOptions<QLogoutWidgetVariables>,\n) {\n  return Hooks.useExecutableQuery<QLogoutWidgetQuery, QLogoutWidgetVariables>(\n    QLogoutWidgetDocument,\n    options,\n  )\n}\n\nexport const MBusinessHoursSubmitDocument = gql`\n  mutation MBusinessHoursSubmit(\n    $branchId: ID!\n    $hours: [InputBusinessHourCreate!]!\n  ) {\n    createBusinessHours(companyBranch: $branchId, businessHours: $hours) {\n      ...FRegularBusinessHour\n    }\n  }\n\n  ${FRegularBusinessHourFragmentDoc}\n`\n\nexport function useMBusinessHoursSubmit(\n  baseOptions?: Hooks.MutationHookOptions<\n    MBusinessHoursSubmitMutation,\n    MBusinessHoursSubmitVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MBusinessHoursSubmitMutation,\n    MBusinessHoursSubmitVariables\n  >(MBusinessHoursSubmitDocument, baseOptions)\n}\n\nexport const MSpecificBusinessHourCreateDocument = gql`\n  mutation MSpecificBusinessHourCreate(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...FSpecificBusinessHour\n    }\n  }\n\n  ${FSpecificBusinessHourFragmentDoc}\n`\n\nexport function useMSpecificBusinessHourCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSpecificBusinessHourCreateMutation,\n    MSpecificBusinessHourCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSpecificBusinessHourCreateMutation,\n    MSpecificBusinessHourCreateVariables\n  >(MSpecificBusinessHourCreateDocument, baseOptions)\n}\n\nexport const MSpecificBusinessHourDeleteDocument = gql`\n  mutation MSpecificBusinessHourDelete($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n\nexport function useMSpecificBusinessHourDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSpecificBusinessHourDeleteMutation,\n    MSpecificBusinessHourDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSpecificBusinessHourDeleteMutation,\n    MSpecificBusinessHourDeleteVariables\n  >(MSpecificBusinessHourDeleteDocument, baseOptions)\n}\n\nexport const QRegularBusinessHoursDocument = gql`\n  query QRegularBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId) {\n      ...FRegularBusinessHour\n    }\n    weekDays {\n      ...FWeekday\n    }\n  }\n\n  ${FRegularBusinessHourFragmentDoc}\n  ${FWeekdayFragmentDoc}\n`\n\nexport function useQRegularBusinessHours(\n  variables?: QRegularBusinessHoursVariables,\n  baseOptions?: Hooks.QueryHookOptions<QRegularBusinessHoursVariables>,\n) {\n  return Hooks.useQuery<\n    QRegularBusinessHoursQuery,\n    QRegularBusinessHoursVariables\n  >(QRegularBusinessHoursDocument, variables, baseOptions)\n}\n\nexport function useExecutableQRegularBusinessHours(\n  options?: Hooks.ExecutableQueryOptions<QRegularBusinessHoursVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QRegularBusinessHoursQuery,\n    QRegularBusinessHoursVariables\n  >(QRegularBusinessHoursDocument, options)\n}\n\nexport const QSpecificBusinessHoursDocument = gql`\n  query QSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...FSpecificBusinessHour\n    }\n  }\n\n  ${FSpecificBusinessHourFragmentDoc}\n`\n\nexport function useQSpecificBusinessHours(\n  variables?: QSpecificBusinessHoursVariables,\n  baseOptions?: Hooks.QueryHookOptions<QSpecificBusinessHoursVariables>,\n) {\n  return Hooks.useQuery<\n    QSpecificBusinessHoursQuery,\n    QSpecificBusinessHoursVariables\n  >(QSpecificBusinessHoursDocument, variables, baseOptions)\n}\n\nexport function useExecutableQSpecificBusinessHours(\n  options?: Hooks.ExecutableQueryOptions<QSpecificBusinessHoursVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QSpecificBusinessHoursQuery,\n    QSpecificBusinessHoursVariables\n  >(QSpecificBusinessHoursDocument, options)\n}\n\nexport const MAddOrderPromoDocument = gql`\n  mutation MAddOrderPromo($orderId: ID!, $code: String!) {\n    addOrderPromoCode(order: $orderId, promoCode: $code) {\n      userErrors: errors\n      order {\n        ...FCreateOrder\n      }\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMAddOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddOrderPromoMutation,\n    MAddOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<MAddOrderPromoMutation, MAddOrderPromoVariables>(\n    MAddOrderPromoDocument,\n    baseOptions,\n  )\n}\n\nexport const MAddToSectorDocument = gql`\n  mutation MAddToSector($sectorId: ID!, $recipeId: ID!, $sideDishes: [ID!]) {\n    createSectorRecipe(\n      sectorRecipe: {\n        sector: $sectorId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      id\n    }\n  }\n`\n\nexport function useMAddToSector(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddToSectorMutation,\n    MAddToSectorVariables\n  >,\n) {\n  return Hooks.useMutation<MAddToSectorMutation, MAddToSectorVariables>(\n    MAddToSectorDocument,\n    baseOptions,\n  )\n}\n\nexport const MCancelOrderDocument = gql`\n  mutation MCancelOrder($orderId: ID!) {\n    addOrderState(order: $orderId, orderState: CANCELED) {\n      id\n      ...FOrderStateCategory\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useMCancelOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCancelOrderMutation,\n    MCancelOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MCancelOrderMutation, MCancelOrderVariables>(\n    MCancelOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderAcceptDocument = gql`\n  mutation MCreateOrderAccept(\n    $orderId: ID!\n    $customer: InputCustomerCreate!\n    $deliverAt: DateTime\n    $note: String\n    $paymentType: PaymentTypeEnum\n    $paymentGate: PaymentGateEnum\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        customer: $customer\n        note: $note\n        deliverAt: $deliverAt\n        paymentMethod: $paymentType\n        paymentGate: $paymentGate\n      }\n    ) {\n      userErrors\n      order {\n        ...FCreateOrder\n      }\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderAccept(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >(MCreateOrderAcceptDocument, baseOptions)\n}\n\nexport const MCreateOrderAddRecipeDocument = gql`\n  mutation MCreateOrderAddRecipe(\n    $orderId: ID!\n    $recipeId: ID!\n    $sidedishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sidedishes\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderAddRecipe(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >(MCreateOrderAddRecipeDocument, baseOptions)\n}\n\nexport const MCreateOrderNewDocument = gql`\n  mutation MCreateOrderNew(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $callEventId: ID\n  ) {\n    createOrder(\n      order: {\n        companyBranch: $branchId\n        deliveryType: $deliveryType\n        callEventId: $callEventId\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: {}\n        warePriceType: DELIVERY\n        orderOrigin: STAFF\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderNew(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderNewMutation,\n    MCreateOrderNewVariables\n  >,\n) {\n  return Hooks.useMutation<MCreateOrderNewMutation, MCreateOrderNewVariables>(\n    MCreateOrderNewDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderRemoveItemDocument = gql`\n  mutation MCreateOrderRemoveItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderRemoveItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >(MCreateOrderRemoveItemDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateDocument = gql`\n  mutation MCreateOrderUpdate(\n    $orderId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $customer: InputCustomerCreate\n  ) {\n    updateOrder(\n      id: $orderId\n      order: {\n        deliveryType: $deliveryType\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: $customer\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >(MCreateOrderUpdateDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateItemDocument = gql`\n  mutation MCreateOrderUpdateItem($itemId: ID!, $sidedishes: [ID!]) {\n    updateOrderRecipe(id: $itemId, orderRecipe: { sideDishes: $sidedishes }) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderUpdateItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >(MCreateOrderUpdateItemDocument, baseOptions)\n}\n\nexport const MRemoveOrderPromoDocument = gql`\n  mutation MRemoveOrderPromo($orderId: ID!, $codeId: ID!) {\n    removeOrderPromoCode(order: $orderId, promoCode: $codeId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMRemoveOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >(MRemoveOrderPromoDocument, baseOptions)\n}\n\nexport const QBranchPaymentMethodsDocument = gql`\n  query QBranchPaymentMethods($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      ...FBranchPaymentMethods\n    }\n  }\n\n  ${FBranchPaymentMethodsFragmentDoc}\n`\n\nexport function useQBranchPaymentMethods(\n  variables?: QBranchPaymentMethodsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QBranchPaymentMethodsVariables>,\n) {\n  return Hooks.useQuery<\n    QBranchPaymentMethodsQuery,\n    QBranchPaymentMethodsVariables\n  >(QBranchPaymentMethodsDocument, variables, baseOptions)\n}\n\nexport function useExecutableQBranchPaymentMethods(\n  options?: Hooks.ExecutableQueryOptions<QBranchPaymentMethodsVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QBranchPaymentMethodsQuery,\n    QBranchPaymentMethodsVariables\n  >(QBranchPaymentMethodsDocument, options)\n}\n\nexport const QCreateOrderItemDocument = gql`\n  query QCreateOrderItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...FCreateOrderRecipeSidedishes\n      }\n      selectedSidedishes: sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderItem(\n  variables?: QCreateOrderItemVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCreateOrderItemVariables>,\n) {\n  return Hooks.useQuery<QCreateOrderItemQuery, QCreateOrderItemVariables>(\n    QCreateOrderItemDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQCreateOrderItem(\n  options?: Hooks.ExecutableQueryOptions<QCreateOrderItemVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QCreateOrderItemQuery,\n    QCreateOrderItemVariables\n  >(QCreateOrderItemDocument, options)\n}\n\nexport const QCreateOrderRecipeDocument = gql`\n  query QCreateOrderRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...FCreateOrderRecipeSidedishes\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderRecipe(\n  variables?: QCreateOrderRecipeVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCreateOrderRecipeVariables>,\n) {\n  return Hooks.useQuery<QCreateOrderRecipeQuery, QCreateOrderRecipeVariables>(\n    QCreateOrderRecipeDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQCreateOrderRecipe(\n  options?: Hooks.ExecutableQueryOptions<QCreateOrderRecipeVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QCreateOrderRecipeQuery,\n    QCreateOrderRecipeVariables\n  >(QCreateOrderRecipeDocument, options)\n}\n\nexport const QOrderCartDocument = gql`\n  query QOrderCart($orderId: ID!) {\n    order(id: $orderId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useQOrderCart(\n  variables?: QOrderCartVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderCartVariables>,\n) {\n  return Hooks.useQuery<QOrderCartQuery, QOrderCartVariables>(\n    QOrderCartDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderCart(\n  options?: Hooks.ExecutableQueryOptions<QOrderCartVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderCartQuery, QOrderCartVariables>(\n    QOrderCartDocument,\n    options,\n  )\n}\n\nexport const QOrderFormDeliverAtDefaultsDocument = gql`\n  query QOrderFormDeliverAtDefaults($branchId: ID!) {\n    times: companyBranch(id: $branchId) {\n      id\n      deliveryTime: defaultDeliveryTime\n      pickupTime: defaultPickupTime\n    }\n  }\n`\n\nexport function useQOrderFormDeliverAtDefaults(\n  variables?: QOrderFormDeliverAtDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFormDeliverAtDefaultsVariables>,\n) {\n  return Hooks.useQuery<\n    QOrderFormDeliverAtDefaultsQuery,\n    QOrderFormDeliverAtDefaultsVariables\n  >(QOrderFormDeliverAtDefaultsDocument, variables, baseOptions)\n}\n\nexport function useExecutableQOrderFormDeliverAtDefaults(\n  options?: Hooks.ExecutableQueryOptions<QOrderFormDeliverAtDefaultsVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderFormDeliverAtDefaultsQuery,\n    QOrderFormDeliverAtDefaultsVariables\n  >(QOrderFormDeliverAtDefaultsDocument, options)\n}\n\nexport const QOrderMenuDocument = gql`\n  query QOrderMenu($branchId: ID!) {\n    orderMenu: wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n      orderOriginCategory: STAFF\n      enabled: true\n      isAvailable: true\n    ) {\n      ...FOrderMenuCategory\n    }\n  }\n\n  ${FOrderMenuCategoryFragmentDoc}\n`\n\nexport function useQOrderMenu(\n  variables?: QOrderMenuVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMenuVariables>,\n) {\n  return Hooks.useQuery<QOrderMenuQuery, QOrderMenuVariables>(\n    QOrderMenuDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderMenu(\n  options?: Hooks.ExecutableQueryOptions<QOrderMenuVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderMenuQuery, QOrderMenuVariables>(\n    QOrderMenuDocument,\n    options,\n  )\n}\n\nexport const QValidateLocationDocument = gql`\n  query QValidateLocation(\n    $branchId: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    resolveLocation(\n      companyBranch: $branchId\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      inDeliveryLocation\n      zone {\n        minimalOrderPrice {\n          formattedValue\n        }\n      }\n    }\n  }\n`\n\nexport function useQValidateLocation(\n  variables?: QValidateLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<QValidateLocationVariables>,\n) {\n  return Hooks.useQuery<QValidateLocationQuery, QValidateLocationVariables>(\n    QValidateLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQValidateLocation(\n  options?: Hooks.ExecutableQueryOptions<QValidateLocationVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QValidateLocationQuery,\n    QValidateLocationVariables\n  >(QValidateLocationDocument, options)\n}\n\nexport const MKitchenOrderHandleDocument = gql`\n  mutation MKitchenOrderHandle($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...FOrderStateCategory\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useMKitchenOrderHandle(\n  baseOptions?: Hooks.MutationHookOptions<\n    MKitchenOrderHandleMutation,\n    MKitchenOrderHandleVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MKitchenOrderHandleMutation,\n    MKitchenOrderHandleVariables\n  >(MKitchenOrderHandleDocument, baseOptions)\n}\n\nexport const MKitchenOrderRecipeHandleDocument = gql`\n  mutation MKitchenOrderRecipeHandle(\n    $orderRecipeId: ID!\n    $state: OrderRecipeStateEnum!\n  ) {\n    orderRecipe: updateOrderRecipeState(\n      id: $orderRecipeId\n      orderRecipeState: $state\n    ) {\n      ...FKitchenOrderState\n    }\n  }\n\n  ${FKitchenOrderStateFragmentDoc}\n`\n\nexport function useMKitchenOrderRecipeHandle(\n  baseOptions?: Hooks.MutationHookOptions<\n    MKitchenOrderRecipeHandleMutation,\n    MKitchenOrderRecipeHandleVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MKitchenOrderRecipeHandleMutation,\n    MKitchenOrderRecipeHandleVariables\n  >(MKitchenOrderRecipeHandleDocument, baseOptions)\n}\n\nexport const MKitchenSectorHandleDocument = gql`\n  mutation MKitchenSectorHandle($sectorId: ID!, $state: OrderRecipeStateEnum!) {\n    sectorRecipe: updateSectorRecipes(\n      sectorId: $sectorId\n      orderRecipeState: $state\n    ) {\n      ...FKitchenSectorState\n    }\n  }\n\n  ${FKitchenSectorStateFragmentDoc}\n`\n\nexport function useMKitchenSectorHandle(\n  baseOptions?: Hooks.MutationHookOptions<\n    MKitchenSectorHandleMutation,\n    MKitchenSectorHandleVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MKitchenSectorHandleMutation,\n    MKitchenSectorHandleVariables\n  >(MKitchenSectorHandleDocument, baseOptions)\n}\n\nexport const MKitchenSectorRecipeHandleDocument = gql`\n  mutation MKitchenSectorRecipeHandle(\n    $sectorRecipeId: ID!\n    $state: OrderRecipeStateEnum!\n  ) {\n    sectorRecipe: updateSectorRecipe(\n      id: $sectorRecipeId\n      orderRecipeState: $state\n    ) {\n      ...FKitchenSectorState\n    }\n  }\n\n  ${FKitchenSectorStateFragmentDoc}\n`\n\nexport function useMKitchenSectorRecipeHandle(\n  baseOptions?: Hooks.MutationHookOptions<\n    MKitchenSectorRecipeHandleMutation,\n    MKitchenSectorRecipeHandleVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MKitchenSectorRecipeHandleMutation,\n    MKitchenSectorRecipeHandleVariables\n  >(MKitchenSectorRecipeHandleDocument, baseOptions)\n}\n\nexport const QKitchenCompletionOrderListDocument = gql`\n  query QKitchenCompletionOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoryTarget: FE_COMPLETION\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      ...FKitchenCompletionOrder\n    }\n  }\n\n  ${FKitchenCompletionOrderFragmentDoc}\n`\n\nexport function useQKitchenCompletionOrderList(\n  variables?: QKitchenCompletionOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QKitchenCompletionOrderListVariables>,\n) {\n  return Hooks.useQuery<\n    QKitchenCompletionOrderListQuery,\n    QKitchenCompletionOrderListVariables\n  >(QKitchenCompletionOrderListDocument, variables, baseOptions)\n}\n\nexport function useExecutableQKitchenCompletionOrderList(\n  options?: Hooks.ExecutableQueryOptions<QKitchenCompletionOrderListVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QKitchenCompletionOrderListQuery,\n    QKitchenCompletionOrderListVariables\n  >(QKitchenCompletionOrderListDocument, options)\n}\n\nexport const QKitchenOrderListDocument = gql`\n  query QKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoryTarget: FE_KITCHEN\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      ...FKitchenOrder\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useQKitchenOrderList(\n  variables?: QKitchenOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QKitchenOrderListVariables>,\n) {\n  return Hooks.useQuery<QKitchenOrderListQuery, QKitchenOrderListVariables>(\n    QKitchenOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQKitchenOrderList(\n  options?: Hooks.ExecutableQueryOptions<QKitchenOrderListVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QKitchenOrderListQuery,\n    QKitchenOrderListVariables\n  >(QKitchenOrderListDocument, options)\n}\n\nexport const QKitchenSectorListDocument = gql`\n  query QKitchenSectorList(\n    $branch: ID!\n    $sectors: [ID!]\n    $states: [OrderRecipeStateEnum!]\n  ) {\n    sectors(companyBranch: $branch, enabled: true) {\n      id\n      name\n    }\n    sectorRecipes(\n      companyBranch: $branch\n      sectors: $sectors\n      orderRecipeStateOR: $states\n    ) {\n      ...FKitchenSectorRecipe\n    }\n  }\n\n  ${FKitchenSectorRecipeFragmentDoc}\n`\n\nexport function useQKitchenSectorList(\n  variables?: QKitchenSectorListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QKitchenSectorListVariables>,\n) {\n  return Hooks.useQuery<QKitchenSectorListQuery, QKitchenSectorListVariables>(\n    QKitchenSectorListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQKitchenSectorList(\n  options?: Hooks.ExecutableQueryOptions<QKitchenSectorListVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QKitchenSectorListQuery,\n    QKitchenSectorListVariables\n  >(QKitchenSectorListDocument, options)\n}\n\nexport const SKitchenCompletionOrderListDocument = gql`\n  subscription SKitchenCompletionOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n      orderStateCategoryTarget: FE_COMPLETION\n    ) {\n      order {\n        ...FKitchenCompletionOrder\n      }\n    }\n  }\n\n  ${FKitchenCompletionOrderFragmentDoc}\n`\n\nexport function useSKitchenCompletionOrderList(\n  variables?: SKitchenCompletionOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SKitchenCompletionOrderListSubscription,\n    SKitchenCompletionOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SKitchenCompletionOrderListSubscription,\n    SKitchenCompletionOrderListVariables\n  >(SKitchenCompletionOrderListDocument, variables, baseOptions)\n}\n\nexport const SKitchenOrderListDocument = gql`\n  subscription SKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n      orderStateCategoryTarget: FE_KITCHEN\n    ) {\n      order {\n        ...FKitchenOrder\n      }\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useSKitchenOrderList(\n  variables?: SKitchenOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >(SKitchenOrderListDocument, variables, baseOptions)\n}\n\nexport const SKitchenSectorListDocument = gql`\n  subscription SKitchenSectorList(\n    $branch: ID!\n    $sectors: [ID!]\n    $states: [OrderRecipeStateEnum!]\n  ) {\n    updatedSectorRecipe(\n      companyBranch: $branch\n      sectors: $sectors\n      orderRecipeStateOR: $states\n    ) {\n      id\n      sectorRecipe {\n        ...FKitchenSectorRecipe\n      }\n    }\n  }\n\n  ${FKitchenSectorRecipeFragmentDoc}\n`\n\nexport function useSKitchenSectorList(\n  variables?: SKitchenSectorListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SKitchenSectorListSubscription,\n    SKitchenSectorListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SKitchenSectorListSubscription,\n    SKitchenSectorListVariables\n  >(SKitchenSectorListDocument, variables, baseOptions)\n}\n\nexport const MPasswordChangeDocument = gql`\n  mutation MPasswordChange($password: String!) {\n    change: updateUserPassword(newPassword: $password) {\n      userId: id\n      newToken: token\n    }\n  }\n`\n\nexport function useMPasswordChange(\n  baseOptions?: Hooks.MutationHookOptions<\n    MPasswordChangeMutation,\n    MPasswordChangeVariables\n  >,\n) {\n  return Hooks.useMutation<MPasswordChangeMutation, MPasswordChangeVariables>(\n    MPasswordChangeDocument,\n    baseOptions,\n  )\n}\n\nexport const QUserBootstrapDocument = gql`\n  query QUserBootstrap($userId: ID!) {\n    user(id: $userId) {\n      id\n      firstName\n      lastName\n      language {\n        rawCode\n      }\n      roles {\n        id\n        name\n      }\n      branches: accessibleBranches {\n        ...FCompanyBranch\n      }\n    }\n    permissions: permissions {\n      canCancelOrders\n      canCreateOrder\n    }\n    access: __schema {\n      queries: queryType {\n        fields {\n          name\n        }\n      }\n      mutations: mutationType {\n        fields {\n          name\n        }\n      }\n      subscriptions: subscriptionType {\n        fields {\n          name\n        }\n      }\n    }\n  }\n\n  ${FCompanyBranchFragmentDoc}\n`\n\nexport function useQUserBootstrap(\n  variables?: QUserBootstrapVariables,\n  baseOptions?: Hooks.QueryHookOptions<QUserBootstrapVariables>,\n) {\n  return Hooks.useQuery<QUserBootstrapQuery, QUserBootstrapVariables>(\n    QUserBootstrapDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQUserBootstrap(\n  options?: Hooks.ExecutableQueryOptions<QUserBootstrapVariables>,\n) {\n  return Hooks.useExecutableQuery<QUserBootstrapQuery, QUserBootstrapVariables>(\n    QUserBootstrapDocument,\n    options,\n  )\n}\n\nexport const MMenuCategoryCreateDocument = gql`\n  mutation MMenuCategoryCreate($category: InputWareCategoryCreate!) {\n    createCategory: createWareCategory(wareCategory: $category) {\n      id\n    }\n  }\n`\n\nexport function useMMenuCategoryCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategoryCreateMutation,\n    MMenuCategoryCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategoryCreateMutation,\n    MMenuCategoryCreateVariables\n  >(MMenuCategoryCreateDocument, baseOptions)\n}\n\nexport const MMenuCategoryDeleteDocument = gql`\n  mutation MMenuCategoryDelete($categoryId: ID!) {\n    deleteCategory: destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n\nexport function useMMenuCategoryDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategoryDeleteMutation,\n    MMenuCategoryDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategoryDeleteMutation,\n    MMenuCategoryDeleteVariables\n  >(MMenuCategoryDeleteDocument, baseOptions)\n}\n\nexport const MMenuCategorySortDocument = gql`\n  mutation MMenuCategorySort($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport function useMMenuCategorySort(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategorySortMutation,\n    MMenuCategorySortVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategorySortMutation,\n    MMenuCategorySortVariables\n  >(MMenuCategorySortDocument, baseOptions)\n}\n\nexport const MMenuCategoryUpdateDocument = gql`\n  mutation MMenuCategoryUpdate(\n    $categoryId: ID!\n    $category: InputWareCategoryUpdate!\n  ) {\n    updateCategory: updateWareCategory(\n      id: $categoryId\n      wareCategory: $category\n    ) {\n      ...FMenuCategory\n    }\n  }\n\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport function useMMenuCategoryUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategoryUpdateMutation,\n    MMenuCategoryUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategoryUpdateMutation,\n    MMenuCategoryUpdateVariables\n  >(MMenuCategoryUpdateDocument, baseOptions)\n}\n\nexport const MMenuCategoryVisibilityDocument = gql`\n  mutation MMenuCategoryVisibility($categoryId: ID!, $visible: Boolean!) {\n    updateWareCategory(id: $categoryId, wareCategory: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useMMenuCategoryVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >(MMenuCategoryVisibilityDocument, baseOptions)\n}\n\nexport const QMenuCategoryFilterDocument = gql`\n  query QMenuCategoryFilter($branchId: ID!) {\n    categories: wareCategories(companyBranch: $branchId) {\n      id\n      nameLabel\n      countRecipes\n      categoryType: wareCategoryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useQMenuCategoryFilter(\n  variables?: QMenuCategoryFilterVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryFilterVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryFilterQuery, QMenuCategoryFilterVariables>(\n    QMenuCategoryFilterDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuCategoryFilter(\n  options?: Hooks.ExecutableQueryOptions<QMenuCategoryFilterVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuCategoryFilterQuery,\n    QMenuCategoryFilterVariables\n  >(QMenuCategoryFilterDocument, options)\n}\n\nexport const QMenuCategoryFormDocument = gql`\n  query QMenuCategoryForm($categoryId: ID!, $language: LanguageEnum!) {\n    category: wareCategory(id: $categoryId, language: $language) {\n      ...FMenuCategoryInForm\n    }\n  }\n\n  ${FMenuCategoryInFormFragmentDoc}\n`\n\nexport function useQMenuCategoryForm(\n  variables?: QMenuCategoryFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryFormVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryFormQuery, QMenuCategoryFormVariables>(\n    QMenuCategoryFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuCategoryForm(\n  options?: Hooks.ExecutableQueryOptions<QMenuCategoryFormVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuCategoryFormQuery,\n    QMenuCategoryFormVariables\n  >(QMenuCategoryFormDocument, options)\n}\n\nexport const QMenuCategoryFormTransDocument = gql`\n  query QMenuCategoryFormTrans($categoryId: ID!, $language: LanguageEnum!) {\n    category: wareCategory(id: $categoryId, language: $language) {\n      id\n      ...FMenuCategoryLocalized\n    }\n  }\n\n  ${FMenuCategoryLocalizedFragmentDoc}\n`\n\nexport function useQMenuCategoryFormTrans(\n  variables?: QMenuCategoryFormTransVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryFormTransVariables>,\n) {\n  return Hooks.useQuery<\n    QMenuCategoryFormTransQuery,\n    QMenuCategoryFormTransVariables\n  >(QMenuCategoryFormTransDocument, variables, baseOptions)\n}\n\nexport function useExecutableQMenuCategoryFormTrans(\n  options?: Hooks.ExecutableQueryOptions<QMenuCategoryFormTransVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuCategoryFormTransQuery,\n    QMenuCategoryFormTransVariables\n  >(QMenuCategoryFormTransDocument, options)\n}\n\nexport const QMenuCategoryListDocument = gql`\n  query QMenuCategoryList(\n    $branchId: ID!\n    $categoryType: WareCategoryTypeEnum!\n  ) {\n    categories: wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: $categoryType\n    ) {\n      ...FMenuCategoryInList\n    }\n  }\n\n  ${FMenuCategoryInListFragmentDoc}\n`\n\nexport function useQMenuCategoryList(\n  variables?: QMenuCategoryListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryListVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryListQuery, QMenuCategoryListVariables>(\n    QMenuCategoryListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuCategoryList(\n  options?: Hooks.ExecutableQueryOptions<QMenuCategoryListVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuCategoryListQuery,\n    QMenuCategoryListVariables\n  >(QMenuCategoryListDocument, options)\n}\n\nexport const QMenuCategoryOriginsDocument = gql`\n  query QMenuCategoryOrigins {\n    origins: orderOriginCategories {\n      enum\n      code\n    }\n  }\n`\n\nexport function useQMenuCategoryOrigins(\n  variables?: QMenuCategoryOriginsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryOriginsVariables>,\n) {\n  return Hooks.useQuery<\n    QMenuCategoryOriginsQuery,\n    QMenuCategoryOriginsVariables\n  >(QMenuCategoryOriginsDocument, variables, baseOptions)\n}\n\nexport function useExecutableQMenuCategoryOrigins(\n  options?: Hooks.ExecutableQueryOptions<QMenuCategoryOriginsVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuCategoryOriginsQuery,\n    QMenuCategoryOriginsVariables\n  >(QMenuCategoryOriginsDocument, options)\n}\n\nexport const QMenuAllergensDocument = gql`\n  query QMenuAllergens {\n    allergens {\n      ...FMenuAllergen\n    }\n  }\n\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport function useQMenuAllergens(\n  variables?: QMenuAllergensVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuAllergensVariables>,\n) {\n  return Hooks.useQuery<QMenuAllergensQuery, QMenuAllergensVariables>(\n    QMenuAllergensDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuAllergens(\n  options?: Hooks.ExecutableQueryOptions<QMenuAllergensVariables>,\n) {\n  return Hooks.useExecutableQuery<QMenuAllergensQuery, QMenuAllergensVariables>(\n    QMenuAllergensDocument,\n    options,\n  )\n}\n\nexport const QMenuCurrenciesDocument = gql`\n  query QMenuCurrencies($branchId: ID!) {\n    currencies {\n      enum\n      code\n    }\n    companyBranch(id: $branchId) {\n      address {\n        country {\n          currency {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useQMenuCurrencies(\n  variables?: QMenuCurrenciesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCurrenciesVariables>,\n) {\n  return Hooks.useQuery<QMenuCurrenciesQuery, QMenuCurrenciesVariables>(\n    QMenuCurrenciesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuCurrencies(\n  options?: Hooks.ExecutableQueryOptions<QMenuCurrenciesVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuCurrenciesQuery,\n    QMenuCurrenciesVariables\n  >(QMenuCurrenciesDocument, options)\n}\n\nexport const QMenuGuideDownloadDocument = gql`\n  query QMenuGuideDownload($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      foodMenuUrl\n    }\n  }\n`\n\nexport function useQMenuGuideDownload(\n  variables?: QMenuGuideDownloadVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuGuideDownloadVariables>,\n) {\n  return Hooks.useQuery<QMenuGuideDownloadQuery, QMenuGuideDownloadVariables>(\n    QMenuGuideDownloadDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuGuideDownload(\n  options?: Hooks.ExecutableQueryOptions<QMenuGuideDownloadVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuGuideDownloadQuery,\n    QMenuGuideDownloadVariables\n  >(QMenuGuideDownloadDocument, options)\n}\n\nexport const QMenuVatsDocument = gql`\n  query QMenuVats($branchId: ID!) {\n    vats(companyBranch: $branchId) {\n      id\n      vat\n    }\n  }\n`\n\nexport function useQMenuVats(\n  variables?: QMenuVatsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuVatsVariables>,\n) {\n  return Hooks.useQuery<QMenuVatsQuery, QMenuVatsVariables>(\n    QMenuVatsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuVats(\n  options?: Hooks.ExecutableQueryOptions<QMenuVatsVariables>,\n) {\n  return Hooks.useExecutableQuery<QMenuVatsQuery, QMenuVatsVariables>(\n    QMenuVatsDocument,\n    options,\n  )\n}\n\nexport const QMenuWareUnitsDocument = gql`\n  query QMenuWareUnits {\n    wareUnits {\n      id\n      code\n      enum\n    }\n  }\n`\n\nexport function useQMenuWareUnits(\n  variables?: QMenuWareUnitsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuWareUnitsVariables>,\n) {\n  return Hooks.useQuery<QMenuWareUnitsQuery, QMenuWareUnitsVariables>(\n    QMenuWareUnitsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuWareUnits(\n  options?: Hooks.ExecutableQueryOptions<QMenuWareUnitsVariables>,\n) {\n  return Hooks.useExecutableQuery<QMenuWareUnitsQuery, QMenuWareUnitsVariables>(\n    QMenuWareUnitsDocument,\n    options,\n  )\n}\n\nexport const MMenuRecipeCreateDocument = gql`\n  mutation MMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    recipe: createRecipe(recipe: $recipe) {\n      ...FMenuRecipeInList\n    }\n  }\n\n  ${FMenuRecipeInListFragmentDoc}\n`\n\nexport function useMMenuRecipeCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuRecipeCreateMutation,\n    MMenuRecipeCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuRecipeCreateMutation,\n    MMenuRecipeCreateVariables\n  >(MMenuRecipeCreateDocument, baseOptions)\n}\n\nexport const MMenuRecipeDeleteDocument = gql`\n  mutation MMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n\nexport function useMMenuRecipeDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuRecipeDeleteMutation,\n    MMenuRecipeDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuRecipeDeleteMutation,\n    MMenuRecipeDeleteVariables\n  >(MMenuRecipeDeleteDocument, baseOptions)\n}\n\nexport const MMenuRecipeUpdateDocument = gql`\n  mutation MMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    recipe: updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...FMenuRecipeInList\n    }\n  }\n\n  ${FMenuRecipeInListFragmentDoc}\n`\n\nexport function useMMenuRecipeUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuRecipeUpdateMutation,\n    MMenuRecipeUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuRecipeUpdateMutation,\n    MMenuRecipeUpdateVariables\n  >(MMenuRecipeUpdateDocument, baseOptions)\n}\n\nexport const MMenuRecipeVisibilityDocument = gql`\n  mutation MMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateVisibility: updateRecipe(\n      id: $recipeId\n      recipe: { enabled: $visible }\n    ) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useMMenuRecipeVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuRecipeVisibilityMutation,\n    MMenuRecipeVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuRecipeVisibilityMutation,\n    MMenuRecipeVisibilityVariables\n  >(MMenuRecipeVisibilityDocument, baseOptions)\n}\n\nexport const QMenuRecipeDefaultsDocument = gql`\n  query QMenuRecipeDefaults($branchId: ID!) {\n    defaults: companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport function useQMenuRecipeDefaults(\n  variables?: QMenuRecipeDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuRecipeDefaultsVariables>,\n) {\n  return Hooks.useQuery<QMenuRecipeDefaultsQuery, QMenuRecipeDefaultsVariables>(\n    QMenuRecipeDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuRecipeDefaults(\n  options?: Hooks.ExecutableQueryOptions<QMenuRecipeDefaultsVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuRecipeDefaultsQuery,\n    QMenuRecipeDefaultsVariables\n  >(QMenuRecipeDefaultsDocument, options)\n}\n\nexport const QMenuRecipeFormDocument = gql`\n  query QMenuRecipeForm($recipeId: ID!, $language: LanguageEnum!) {\n    recipe(id: $recipeId, language: $language) {\n      ...FMenuRecipeInForm\n      sourcePrices: prices {\n        ...FMenuRecipePricing\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...FMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n\n  ${FMenuRecipeInFormFragmentDoc}\n  ${FMenuRecipePricingFragmentDoc}\n  ${FMenuAssocRecipeFragmentDoc}\n`\n\nexport function useQMenuRecipeForm(\n  variables?: QMenuRecipeFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuRecipeFormVariables>,\n) {\n  return Hooks.useQuery<QMenuRecipeFormQuery, QMenuRecipeFormVariables>(\n    QMenuRecipeFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuRecipeForm(\n  options?: Hooks.ExecutableQueryOptions<QMenuRecipeFormVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuRecipeFormQuery,\n    QMenuRecipeFormVariables\n  >(QMenuRecipeFormDocument, options)\n}\n\nexport const QMenuRecipeFormAssocDocument = gql`\n  query QMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...FMenuAssocRecipe\n    }\n  }\n\n  ${FMenuAssocRecipeFragmentDoc}\n`\n\nexport function useQMenuRecipeFormAssoc(\n  variables?: QMenuRecipeFormAssocVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuRecipeFormAssocVariables>,\n) {\n  return Hooks.useQuery<\n    QMenuRecipeFormAssocQuery,\n    QMenuRecipeFormAssocVariables\n  >(QMenuRecipeFormAssocDocument, variables, baseOptions)\n}\n\nexport function useExecutableQMenuRecipeFormAssoc(\n  options?: Hooks.ExecutableQueryOptions<QMenuRecipeFormAssocVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuRecipeFormAssocQuery,\n    QMenuRecipeFormAssocVariables\n  >(QMenuRecipeFormAssocDocument, options)\n}\n\nexport const QMenuRecipeFormTransDocument = gql`\n  query QMenuRecipeFormTrans($recipeId: ID!, $language: LanguageEnum!) {\n    recipe(id: $recipeId, language: $language) {\n      id\n      ...FMenuRecipeLocalized\n    }\n  }\n\n  ${FMenuRecipeLocalizedFragmentDoc}\n`\n\nexport function useQMenuRecipeFormTrans(\n  variables?: QMenuRecipeFormTransVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuRecipeFormTransVariables>,\n) {\n  return Hooks.useQuery<\n    QMenuRecipeFormTransQuery,\n    QMenuRecipeFormTransVariables\n  >(QMenuRecipeFormTransDocument, variables, baseOptions)\n}\n\nexport function useExecutableQMenuRecipeFormTrans(\n  options?: Hooks.ExecutableQueryOptions<QMenuRecipeFormTransVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuRecipeFormTransQuery,\n    QMenuRecipeFormTransVariables\n  >(QMenuRecipeFormTransDocument, options)\n}\n\nexport const QMenuRecipeListDocument = gql`\n  query QMenuRecipeList(\n    $branchId: ID!\n    $categoryId: ID\n    $categoryType: WareCategoryTypeEnum\n  ) {\n    recipes(\n      companyBranch: $branchId\n      wareCategory: $categoryId\n      wareCategoryType: $categoryType\n    ) {\n      ...FMenuRecipeInList\n    }\n  }\n\n  ${FMenuRecipeInListFragmentDoc}\n`\n\nexport function useQMenuRecipeList(\n  variables?: QMenuRecipeListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuRecipeListVariables>,\n) {\n  return Hooks.useQuery<QMenuRecipeListQuery, QMenuRecipeListVariables>(\n    QMenuRecipeListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuRecipeList(\n  options?: Hooks.ExecutableQueryOptions<QMenuRecipeListVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuRecipeListQuery,\n    QMenuRecipeListVariables\n  >(QMenuRecipeListDocument, options)\n}\n\nexport const MMenuStockCreateDocument = gql`\n  mutation MMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...FMenuStockItem\n      allowNegative\n    }\n  }\n\n  ${FMenuStockItemFragmentDoc}\n`\n\nexport function useMMenuStockCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuStockCreateMutation,\n    MMenuStockCreateVariables\n  >,\n) {\n  return Hooks.useMutation<MMenuStockCreateMutation, MMenuStockCreateVariables>(\n    MMenuStockCreateDocument,\n    baseOptions,\n  )\n}\n\nexport const MMenuStockDeleteDocument = gql`\n  mutation MMenuStockDelete($stockId: ID!) {\n    deleteStockItem: destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n\nexport function useMMenuStockDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuStockDeleteMutation,\n    MMenuStockDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<MMenuStockDeleteMutation, MMenuStockDeleteVariables>(\n    MMenuStockDeleteDocument,\n    baseOptions,\n  )\n}\n\nexport const MMenuStockQuantityDocument = gql`\n  mutation MMenuStockQuantity($stockItem: ID!, $quantityChange: Float!) {\n    changeAmountStockItem(id: $stockItem, amountOffset: $quantityChange) {\n      id\n      quantity\n    }\n  }\n`\n\nexport function useMMenuStockQuantity(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >(MMenuStockQuantityDocument, baseOptions)\n}\n\nexport const MMenuStockUpdateDocument = gql`\n  mutation MMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...FMenuStockItem\n      allowNegative\n    }\n  }\n\n  ${FMenuStockItemFragmentDoc}\n`\n\nexport function useMMenuStockUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuStockUpdateMutation,\n    MMenuStockUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<MMenuStockUpdateMutation, MMenuStockUpdateVariables>(\n    MMenuStockUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const QMenuStockDefaultsDocument = gql`\n  query QMenuStockDefaults($branchId: ID!) {\n    defaults: companyBranch(id: $branchId) {\n      id\n      allowNegative: stockItemsCanBeNegative\n    }\n  }\n`\n\nexport function useQMenuStockDefaults(\n  variables?: QMenuStockDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuStockDefaultsVariables>,\n) {\n  return Hooks.useQuery<QMenuStockDefaultsQuery, QMenuStockDefaultsVariables>(\n    QMenuStockDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuStockDefaults(\n  options?: Hooks.ExecutableQueryOptions<QMenuStockDefaultsVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuStockDefaultsQuery,\n    QMenuStockDefaultsVariables\n  >(QMenuStockDefaultsDocument, options)\n}\n\nexport const QMenuStockFormDocument = gql`\n  query QMenuStockForm($stockId: ID!) {\n    stockItem(id: $stockId) {\n      ...FMenuStockItem\n      allowNegative\n      companyBranch {\n        id\n        allowNegative: stockItemsCanBeNegative\n      }\n    }\n  }\n\n  ${FMenuStockItemFragmentDoc}\n`\n\nexport function useQMenuStockForm(\n  variables?: QMenuStockFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuStockFormVariables>,\n) {\n  return Hooks.useQuery<QMenuStockFormQuery, QMenuStockFormVariables>(\n    QMenuStockFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuStockForm(\n  options?: Hooks.ExecutableQueryOptions<QMenuStockFormVariables>,\n) {\n  return Hooks.useExecutableQuery<QMenuStockFormQuery, QMenuStockFormVariables>(\n    QMenuStockFormDocument,\n    options,\n  )\n}\n\nexport const QMenuStockListDocument = gql`\n  query QMenuStockList($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      ...FMenuStockItem\n      allowNegativeValue\n    }\n  }\n\n  ${FMenuStockItemFragmentDoc}\n`\n\nexport function useQMenuStockList(\n  variables?: QMenuStockListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuStockListVariables>,\n) {\n  return Hooks.useQuery<QMenuStockListQuery, QMenuStockListVariables>(\n    QMenuStockListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuStockList(\n  options?: Hooks.ExecutableQueryOptions<QMenuStockListVariables>,\n) {\n  return Hooks.useExecutableQuery<QMenuStockListQuery, QMenuStockListVariables>(\n    QMenuStockListDocument,\n    options,\n  )\n}\n\nexport const QStockRecipesDocument = gql`\n  query QStockRecipes($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      ingredients {\n        id\n        recipe {\n          id\n          nameLabel\n          descriptionLabel\n          recipeType: wareCategoryType {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useQStockRecipes(\n  variables?: QStockRecipesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStockRecipesVariables>,\n) {\n  return Hooks.useQuery<QStockRecipesQuery, QStockRecipesVariables>(\n    QStockRecipesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQStockRecipes(\n  options?: Hooks.ExecutableQueryOptions<QStockRecipesVariables>,\n) {\n  return Hooks.useExecutableQuery<QStockRecipesQuery, QStockRecipesVariables>(\n    QStockRecipesDocument,\n    options,\n  )\n}\n\nexport const MBranchDefaultTimeDocument = gql`\n  mutation MBranchDefaultTime(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $time: Int!\n  ) {\n    updateDefaultOrderProcessTime(\n      companyBranch: $branchId\n      deliveryType: $deliveryType\n      defaultTime: $time\n    ) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useMBranchDefaultTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >(MBranchDefaultTimeDocument, baseOptions)\n}\n\nexport const MChangePaymentMethodDocument = gql`\n  mutation MChangePaymentMethod($orderId: ID!, $paymentMethodId: ID!) {\n    updateOrderPaymentMethod(\n      orderId: $orderId\n      paymentMethodId: $paymentMethodId\n    ) {\n      id\n      ...FOrderPaymentMethods\n    }\n  }\n\n  ${FOrderPaymentMethodsFragmentDoc}\n`\n\nexport function useMChangePaymentMethod(\n  baseOptions?: Hooks.MutationHookOptions<\n    MChangePaymentMethodMutation,\n    MChangePaymentMethodVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MChangePaymentMethodMutation,\n    MChangePaymentMethodVariables\n  >(MChangePaymentMethodDocument, baseOptions)\n}\n\nexport const MFastCloseDocument = gql`\n  mutation MFastClose($branchId: ID!, $interval: Int!, $note: String) {\n    addSpecialClosingBusinessHours(\n      closingSpecification: {\n        companyBranchId: $branchId\n        closingInterval: $interval\n        closedNote: $note\n      }\n    ) {\n      id\n      isOpen\n    }\n  }\n`\n\nexport function useMFastClose(\n  baseOptions?: Hooks.MutationHookOptions<\n    MFastCloseMutation,\n    MFastCloseVariables\n  >,\n) {\n  return Hooks.useMutation<MFastCloseMutation, MFastCloseVariables>(\n    MFastCloseDocument,\n    baseOptions,\n  )\n}\n\nexport const MOrderChangeToPickupDocument = gql`\n  mutation MOrderChangeToPickup($orderId: ID!) {\n    updateOrderDeliveryToPickup(id: $orderId) {\n      id\n      deliveryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMOrderChangeToPickup(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderChangeToPickupMutation,\n    MOrderChangeToPickupVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderChangeToPickupMutation,\n    MOrderChangeToPickupVariables\n  >(MOrderChangeToPickupDocument, baseOptions)\n}\n\nexport const MOrderTimeNotificationDocument = gql`\n  mutation MOrderTimeNotification($orderId: ID!, $minutes: Int!) {\n    orderNotifyCustomer(id: $orderId, minutes: $minutes) {\n      id\n      deliverAt\n    }\n  }\n`\n\nexport function useMOrderTimeNotification(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderTimeNotificationMutation,\n    MOrderTimeNotificationVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderTimeNotificationMutation,\n    MOrderTimeNotificationVariables\n  >(MOrderTimeNotificationDocument, baseOptions)\n}\n\nexport const MRemoveOrderDriverDocument = gql`\n  mutation MRemoveOrderDriver($orderDriverId: ID!) {\n    destroyUserDeliveringOrder(id: $orderDriverId) {\n      order {\n        ...FOrderDriver\n      }\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useMRemoveOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderDriverMutation,\n    MRemoveOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderDriverMutation,\n    MRemoveOrderDriverVariables\n  >(MRemoveOrderDriverDocument, baseOptions)\n}\n\nexport const MSelectOrderDriverDocument = gql`\n  mutation MSelectOrderDriver($driverId: ID!, $orderId: ID!) {\n    result: createUserDeliveringOrder(user: $driverId, order: $orderId) {\n      order {\n        ...FOrderDriver\n      }\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useMSelectOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSelectOrderDriverMutation,\n    MSelectOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSelectOrderDriverMutation,\n    MSelectOrderDriverVariables\n  >(MSelectOrderDriverDocument, baseOptions)\n}\n\nexport const MTransferOrderDocument = gql`\n  mutation MTransferOrder($orderId: ID!, $branchId: ID!) {\n    transferOrder(id: $orderId, companyBranch: $branchId) {\n      id\n    }\n  }\n`\n\nexport function useMTransferOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MTransferOrderMutation,\n    MTransferOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MTransferOrderMutation, MTransferOrderVariables>(\n    MTransferOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const QBranchDefeaultTimesDocument = gql`\n  query QBranchDefeaultTimes($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useQBranchDefeaultTimes(\n  variables?: QBranchDefeaultTimesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QBranchDefeaultTimesVariables>,\n) {\n  return Hooks.useQuery<\n    QBranchDefeaultTimesQuery,\n    QBranchDefeaultTimesVariables\n  >(QBranchDefeaultTimesDocument, variables, baseOptions)\n}\n\nexport function useExecutableQBranchDefeaultTimes(\n  options?: Hooks.ExecutableQueryOptions<QBranchDefeaultTimesVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QBranchDefeaultTimesQuery,\n    QBranchDefeaultTimesVariables\n  >(QBranchDefeaultTimesDocument, options)\n}\n\nexport const QIsBranchOpenDocument = gql`\n  query QIsBranchOpen($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      isOpen\n    }\n  }\n`\n\nexport function useQIsBranchOpen(\n  variables?: QIsBranchOpenVariables,\n  baseOptions?: Hooks.QueryHookOptions<QIsBranchOpenVariables>,\n) {\n  return Hooks.useQuery<QIsBranchOpenQuery, QIsBranchOpenVariables>(\n    QIsBranchOpenDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQIsBranchOpen(\n  options?: Hooks.ExecutableQueryOptions<QIsBranchOpenVariables>,\n) {\n  return Hooks.useExecutableQuery<QIsBranchOpenQuery, QIsBranchOpenVariables>(\n    QIsBranchOpenDocument,\n    options,\n  )\n}\n\nexport const QOrderDetailDocument = gql`\n  query QOrderDetail($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      createdAt\n      deliverAt\n      delayedDeliveryTime\n      companyBranch {\n        id\n      }\n      customer {\n        emails {\n          ...FEmail\n        }\n        phones {\n          ...FPhone\n        }\n      }\n      customerOrdersCountCurrent\n      customerOrdersCountTotal\n      note\n      allAppliedRules\n      items {\n        ...FOrderDetailWare\n        sidedishes: sideDishes {\n          ...FOrderDetailWare\n        }\n      }\n      orderOrigin {\n        code\n        enum\n      }\n      ...FOrderTotals\n      ...FOrderTiming\n      ...FOrderDriver\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n  ${FOrderDetailWareFragmentDoc}\n  ${FOrderTotalsFragmentDoc}\n  ${FOrderTimingFragmentDoc}\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useQOrderDetail(\n  variables?: QOrderDetailVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderDetailVariables>,\n) {\n  return Hooks.useQuery<QOrderDetailQuery, QOrderDetailVariables>(\n    QOrderDetailDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderDetail(\n  options?: Hooks.ExecutableQueryOptions<QOrderDetailVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderDetailQuery, QOrderDetailVariables>(\n    QOrderDetailDocument,\n    options,\n  )\n}\n\nexport const QOrderDriversDocument = gql`\n  query QOrderDrivers($orderId: ID!, $branchId: [ID!]!) {\n    order(id: $orderId) {\n      ...FOrderDriver\n    }\n    drivers(companyBranches: $branchId, onlyAvailable: true) {\n      ...FDriver\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n  ${FDriverFragmentDoc}\n`\n\nexport function useQOrderDrivers(\n  variables?: QOrderDriversVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderDriversVariables>,\n) {\n  return Hooks.useQuery<QOrderDriversQuery, QOrderDriversVariables>(\n    QOrderDriversDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderDrivers(\n  options?: Hooks.ExecutableQueryOptions<QOrderDriversVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderDriversQuery, QOrderDriversVariables>(\n    QOrderDriversDocument,\n    options,\n  )\n}\n\nexport const QOrderListDocument = gql`\n  query QOrderList($branches: [ID!], $categories: [OrderStateCategoryEnum!]) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      id\n      ...FOrderStateCategory\n      ...FOrderTicker\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTickerFragmentDoc}\n`\n\nexport function useQOrderList(\n  variables?: QOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderListVariables>,\n) {\n  return Hooks.useQuery<QOrderListQuery, QOrderListVariables>(\n    QOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderList(\n  options?: Hooks.ExecutableQueryOptions<QOrderListVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderListQuery, QOrderListVariables>(\n    QOrderListDocument,\n    options,\n  )\n}\n\nexport const QOrderListCategoriesDocument = gql`\n  query QOrderListCategories {\n    categories: orderStateCategories {\n      label: code\n      enum\n    }\n  }\n`\n\nexport function useQOrderListCategories(\n  variables?: QOrderListCategoriesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderListCategoriesVariables>,\n) {\n  return Hooks.useQuery<\n    QOrderListCategoriesQuery,\n    QOrderListCategoriesVariables\n  >(QOrderListCategoriesDocument, variables, baseOptions)\n}\n\nexport function useExecutableQOrderListCategories(\n  options?: Hooks.ExecutableQueryOptions<QOrderListCategoriesVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderListCategoriesQuery,\n    QOrderListCategoriesVariables\n  >(QOrderListCategoriesDocument, options)\n}\n\nexport const QOrderMapDeliveriesDocument = gql`\n  query QOrderMapDeliveries($branches: [ID!]!) {\n    deliveries: drivers(companyBranches: $branches, onlyAvailable: true) {\n      ...FOrderMapDelivery\n    }\n  }\n\n  ${FOrderMapDeliveryFragmentDoc}\n`\n\nexport function useQOrderMapDeliveries(\n  variables?: QOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMapDeliveriesVariables>,\n) {\n  return Hooks.useQuery<QOrderMapDeliveriesQuery, QOrderMapDeliveriesVariables>(\n    QOrderMapDeliveriesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderMapDeliveries(\n  options?: Hooks.ExecutableQueryOptions<QOrderMapDeliveriesVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderMapDeliveriesQuery,\n    QOrderMapDeliveriesVariables\n  >(QOrderMapDeliveriesDocument, options)\n}\n\nexport const QOrderMapOrdersDocument = gql`\n  query QOrderMapOrders(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      ...FOrderMapOrder\n    }\n  }\n\n  ${FOrderMapOrderFragmentDoc}\n`\n\nexport function useQOrderMapOrders(\n  variables?: QOrderMapOrdersVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMapOrdersVariables>,\n) {\n  return Hooks.useQuery<QOrderMapOrdersQuery, QOrderMapOrdersVariables>(\n    QOrderMapOrdersDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderMapOrders(\n  options?: Hooks.ExecutableQueryOptions<QOrderMapOrdersVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderMapOrdersQuery,\n    QOrderMapOrdersVariables\n  >(QOrderMapOrdersDocument, options)\n}\n\nexport const QOrderReturnZonesDocument = gql`\n  query QOrderReturnZones($branches: [ID!]!) {\n    zones(enabled: true, companyBranches: $branches) {\n      id\n      name\n      zoneColor {\n        id\n        color\n      }\n      zoneType {\n        enum\n      }\n      geoPolygon {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useQOrderReturnZones(\n  variables?: QOrderReturnZonesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderReturnZonesVariables>,\n) {\n  return Hooks.useQuery<QOrderReturnZonesQuery, QOrderReturnZonesVariables>(\n    QOrderReturnZonesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderReturnZones(\n  options?: Hooks.ExecutableQueryOptions<QOrderReturnZonesVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderReturnZonesQuery,\n    QOrderReturnZonesVariables\n  >(QOrderReturnZonesDocument, options)\n}\n\nexport const QOrdersCategoryCountDocument = gql`\n  query QOrdersCategoryCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    ordersCategoryCount(\n      companyBranches: $branchesId\n      orderStateCategoriesOR: $categories\n    ) {\n      category: orderStateCategory {\n        enum\n      }\n      count: ordersCount\n    }\n  }\n`\n\nexport function useQOrdersCategoryCount(\n  variables?: QOrdersCategoryCountVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrdersCategoryCountVariables>,\n) {\n  return Hooks.useQuery<\n    QOrdersCategoryCountQuery,\n    QOrdersCategoryCountVariables\n  >(QOrdersCategoryCountDocument, variables, baseOptions)\n}\n\nexport function useExecutableQOrdersCategoryCount(\n  options?: Hooks.ExecutableQueryOptions<QOrdersCategoryCountVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrdersCategoryCountQuery,\n    QOrdersCategoryCountVariables\n  >(QOrdersCategoryCountDocument, options)\n}\n\nexport const QOrderStateDocument = gql`\n  query QOrderState($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      deliveryType {\n        enum\n      }\n      isCancelable\n      isPriority\n      ...FOrderPaymentMethods\n      ...FOrderStateCategory\n    }\n    companyBranch(id: $branchId) {\n      id\n      allowedCategories\n    }\n  }\n\n  ${FOrderPaymentMethodsFragmentDoc}\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useQOrderState(\n  variables?: QOrderStateVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderStateVariables>,\n) {\n  return Hooks.useQuery<QOrderStateQuery, QOrderStateVariables>(\n    QOrderStateDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderState(\n  options?: Hooks.ExecutableQueryOptions<QOrderStateVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderStateQuery, QOrderStateVariables>(\n    QOrderStateDocument,\n    options,\n  )\n}\n\nexport const SDriverReturnsDocument = gql`\n  subscription SDriverReturns($branches: [ID!]!) {\n    update: updatedTransportationDeviceUser(companyBranches: $branches) {\n      device: transportationDeviceUser {\n        id\n        returning\n        returnZone {\n          id\n          name\n        }\n        user {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n`\n\nexport function useSDriverReturns(\n  variables?: SDriverReturnsVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SDriverReturnsSubscription,\n    SDriverReturnsVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SDriverReturnsSubscription,\n    SDriverReturnsVariables\n  >(SDriverReturnsDocument, variables, baseOptions)\n}\n\nexport const SOrderCallDocument = gql`\n  subscription SOrderCall {\n    call: updatedUserCallingCustomer {\n      eventId\n      phone\n      prefix\n      isRinging\n    }\n  }\n`\n\nexport function useSOrderCall(\n  variables?: SOrderCallVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderCallSubscription,\n    SOrderCallVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderCallSubscription, SOrderCallVariables>(\n    SOrderCallDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderListDocument = gql`\n  subscription SOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        id\n        ...FOrderStateCategory\n        ...FOrderTicker\n      }\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTickerFragmentDoc}\n`\n\nexport function useSOrderList(\n  variables?: SOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderListSubscription,\n    SOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderListSubscription, SOrderListVariables>(\n    SOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderMapDeliveriesDocument = gql`\n  subscription SOrderMapDeliveries($branches: [ID!]!) {\n    update: updatedTransportationDeviceUser(companyBranches: $branches) {\n      device: transportationDeviceUser {\n        ...FOrderMapDevice\n        user {\n          ...FOrderMapDriver\n        }\n      }\n    }\n  }\n\n  ${FOrderMapDeviceFragmentDoc}\n  ${FOrderMapDriverFragmentDoc}\n`\n\nexport function useSOrderMapDeliveries(\n  variables?: SOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >(SOrderMapDeliveriesDocument, variables, baseOptions)\n}\n\nexport const SOrderMapOrdersDocument = gql`\n  subscription SOrderMapOrders(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        ...FOrderMapOrder\n      }\n    }\n  }\n\n  ${FOrderMapOrderFragmentDoc}\n`\n\nexport function useSOrderMapOrders(\n  variables?: SOrderMapOrdersVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderMapOrdersSubscription,\n    SOrderMapOrdersVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrderMapOrdersSubscription,\n    SOrderMapOrdersVariables\n  >(SOrderMapOrdersDocument, variables, baseOptions)\n}\n\nexport const SOrdersCategoryCountDocument = gql`\n  subscription SOrdersCategoryCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    updatedCount: updatedOrderCategoryCount(\n      companyBranches: $branchesId\n      orderStateCategories: $categories\n    ) {\n      order {\n        id\n      }\n      nextCategory: newOrderStateCategory\n      prevCategory: oldOrderStateCategory\n    }\n  }\n`\n\nexport function useSOrdersCategoryCount(\n  variables?: SOrdersCategoryCountVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrdersCategoryCountSubscription,\n    SOrdersCategoryCountVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrdersCategoryCountSubscription,\n    SOrdersCategoryCountVariables\n  >(SOrdersCategoryCountDocument, variables, baseOptions)\n}\n\nexport const MFinancialReportCreateDocument = gql`\n  mutation MFinancialReportCreate($branchId: ID!) {\n    result: createFinancialReport(companyBranchId: $branchId) {\n      id\n    }\n  }\n`\n\nexport function useMFinancialReportCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MFinancialReportCreateMutation,\n    MFinancialReportCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MFinancialReportCreateMutation,\n    MFinancialReportCreateVariables\n  >(MFinancialReportCreateDocument, baseOptions)\n}\n\nexport const QAllDriversDocument = gql`\n  query QAllDrivers($branches: [ID!]!) {\n    drivers(companyBranches: $branches, onlyAvailable: false) {\n      ...FDriver\n    }\n  }\n\n  ${FDriverFragmentDoc}\n`\n\nexport function useQAllDrivers(\n  variables?: QAllDriversVariables,\n  baseOptions?: Hooks.QueryHookOptions<QAllDriversVariables>,\n) {\n  return Hooks.useQuery<QAllDriversQuery, QAllDriversVariables>(\n    QAllDriversDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQAllDrivers(\n  options?: Hooks.ExecutableQueryOptions<QAllDriversVariables>,\n) {\n  return Hooks.useExecutableQuery<QAllDriversQuery, QAllDriversVariables>(\n    QAllDriversDocument,\n    options,\n  )\n}\n\nexport const QClosureHistoryDocument = gql`\n  query QClosureHistory($branchId: ID!, $dateFrom: Date!, $dateTo: Date!) {\n    history: financialReports(\n      companyBranchId: $branchId\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n    ) {\n      id\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useQClosureHistory(\n  variables?: QClosureHistoryVariables,\n  baseOptions?: Hooks.QueryHookOptions<QClosureHistoryVariables>,\n) {\n  return Hooks.useQuery<QClosureHistoryQuery, QClosureHistoryVariables>(\n    QClosureHistoryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQClosureHistory(\n  options?: Hooks.ExecutableQueryOptions<QClosureHistoryVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QClosureHistoryQuery,\n    QClosureHistoryVariables\n  >(QClosureHistoryDocument, options)\n}\n\nexport const QClosureReportDocument = gql`\n  query QClosureReport($branchId: ID!, $reportId: ID!, $showReport: Boolean!) {\n    lastReport: lastFinancialReport(companyBranchId: $branchId)\n      @skip(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n    report: financialReport(report: $reportId) @include(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useQClosureReport(\n  variables?: QClosureReportVariables,\n  baseOptions?: Hooks.QueryHookOptions<QClosureReportVariables>,\n) {\n  return Hooks.useQuery<QClosureReportQuery, QClosureReportVariables>(\n    QClosureReportDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQClosureReport(\n  options?: Hooks.ExecutableQueryOptions<QClosureReportVariables>,\n) {\n  return Hooks.useExecutableQuery<QClosureReportQuery, QClosureReportVariables>(\n    QClosureReportDocument,\n    options,\n  )\n}\n\nexport const QStatsCashboxesDocument = gql`\n  query QStatsCashboxes($branches: [ID!]) {\n    cashBoxes(companyBranches: $branches) {\n      ...FStatsCashbox\n    }\n  }\n\n  ${FStatsCashboxFragmentDoc}\n`\n\nexport function useQStatsCashboxes(\n  variables?: QStatsCashboxesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsCashboxesVariables>,\n) {\n  return Hooks.useQuery<QStatsCashboxesQuery, QStatsCashboxesVariables>(\n    QStatsCashboxesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQStatsCashboxes(\n  options?: Hooks.ExecutableQueryOptions<QStatsCashboxesVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QStatsCashboxesQuery,\n    QStatsCashboxesVariables\n  >(QStatsCashboxesDocument, options)\n}\n\nexport const QStatsCashiersDocument = gql`\n  query QStatsCashiers($branches: [ID!]) {\n    cashiers(companyBranches: $branches) {\n      ...FStatsCashier\n    }\n  }\n\n  ${FStatsCashierFragmentDoc}\n`\n\nexport function useQStatsCashiers(\n  variables?: QStatsCashiersVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsCashiersVariables>,\n) {\n  return Hooks.useQuery<QStatsCashiersQuery, QStatsCashiersVariables>(\n    QStatsCashiersDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQStatsCashiers(\n  options?: Hooks.ExecutableQueryOptions<QStatsCashiersVariables>,\n) {\n  return Hooks.useExecutableQuery<QStatsCashiersQuery, QStatsCashiersVariables>(\n    QStatsCashiersDocument,\n    options,\n  )\n}\n\nexport const QStatsDailyDocument = gql`\n  query QStatsDaily($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      category: categoryStatisticsPlain\n      daily: dailyStatisticsPlain\n      delivery: deliveryStatisticsPlain\n      drivers: driversStatisticsPlain\n    }\n  }\n`\n\nexport function useQStatsDaily(\n  variables?: QStatsDailyVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsDailyVariables>,\n) {\n  return Hooks.useQuery<QStatsDailyQuery, QStatsDailyVariables>(\n    QStatsDailyDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQStatsDaily(\n  options?: Hooks.ExecutableQueryOptions<QStatsDailyVariables>,\n) {\n  return Hooks.useExecutableQuery<QStatsDailyQuery, QStatsDailyVariables>(\n    QStatsDailyDocument,\n    options,\n  )\n}\n\nexport const QStatsOrdersDocument = gql`\n  query QStatsOrders($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      finishedOrders {\n        fees {\n          ...FPriceWithCurrency\n        }\n        onlinePayments {\n          ...FPriceWithCurrency\n        }\n        total {\n          ...FPriceWithCurrency\n        }\n        finishedCount: ordersCount\n        cancelledCount: ordersCanceledCount\n      }\n      orderStatisticsPlain\n    }\n  }\n\n  ${FPriceWithCurrencyFragmentDoc}\n`\n\nexport function useQStatsOrders(\n  variables?: QStatsOrdersVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersQuery, QStatsOrdersVariables>(\n    QStatsOrdersDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQStatsOrders(\n  options?: Hooks.ExecutableQueryOptions<QStatsOrdersVariables>,\n) {\n  return Hooks.useExecutableQuery<QStatsOrdersQuery, QStatsOrdersVariables>(\n    QStatsOrdersDocument,\n    options,\n  )\n}\n\nexport const QStatsOrdersCountsDocument = gql`\n  query QStatsOrdersCounts($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      counts: finishedOrders {\n        finished: ordersCount\n        cancelled: ordersCanceledCount\n      }\n    }\n  }\n`\n\nexport function useQStatsOrdersCounts(\n  variables?: QStatsOrdersCountsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersCountsVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersCountsQuery, QStatsOrdersCountsVariables>(\n    QStatsOrdersCountsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQStatsOrdersCounts(\n  options?: Hooks.ExecutableQueryOptions<QStatsOrdersCountsVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QStatsOrdersCountsQuery,\n    QStatsOrdersCountsVariables\n  >(QStatsOrdersCountsDocument, options)\n}\n\nexport const QStatsOrdersListDocument = gql`\n  query QStatsOrdersList(\n    $filter: InputStatisticCreate!\n    $pagination: InputPaginationParams\n  ) {\n    stats: statistics(statisticsInput: $filter) {\n      orders: finishedOrders {\n        list: orders(includeCanceled: true, pagination: $pagination) {\n          ...FOrderTicker\n          ...FOrderStateCategory\n        }\n      }\n    }\n  }\n\n  ${FOrderTickerFragmentDoc}\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useQStatsOrdersList(\n  variables?: QStatsOrdersListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersListVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersListQuery, QStatsOrdersListVariables>(\n    QStatsOrdersListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQStatsOrdersList(\n  options?: Hooks.ExecutableQueryOptions<QStatsOrdersListVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QStatsOrdersListQuery,\n    QStatsOrdersListVariables\n  >(QStatsOrdersListDocument, options)\n}\n\nexport const MUserMenuLanguageDocument = gql`\n  mutation MUserMenuLanguage($userId: ID!, $lang: LanguageEnum!) {\n    updateUser(id: $userId, user: { language: $lang }) {\n      id\n      language {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMUserMenuLanguage(\n  baseOptions?: Hooks.MutationHookOptions<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >(MUserMenuLanguageDocument, baseOptions)\n}\n\nexport const QUserMenuLanguagesDocument = gql`\n  query QUserMenuLanguages {\n    languages {\n      code\n      enum\n      rawCode\n    }\n  }\n`\n\nexport function useQUserMenuLanguages(\n  variables?: QUserMenuLanguagesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QUserMenuLanguagesVariables>,\n) {\n  return Hooks.useQuery<QUserMenuLanguagesQuery, QUserMenuLanguagesVariables>(\n    QUserMenuLanguagesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQUserMenuLanguages(\n  options?: Hooks.ExecutableQueryOptions<QUserMenuLanguagesVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QUserMenuLanguagesQuery,\n    QUserMenuLanguagesVariables\n  >(QUserMenuLanguagesDocument, options)\n}\n\nexport const MCreateTransfersDocument = gql`\n  mutation MCreateTransfers(\n    $targetBranch: ID!\n    $transfers: [InputStockTransferCreate!]!\n  ) {\n    createStockItemTransfers(\n      destinationBranchId: $targetBranch\n      transfers: $transfers\n    ) {\n      id\n      quantity\n    }\n  }\n`\n\nexport function useMCreateTransfers(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateTransfersMutation,\n    MCreateTransfersVariables\n  >,\n) {\n  return Hooks.useMutation<MCreateTransfersMutation, MCreateTransfersVariables>(\n    MCreateTransfersDocument,\n    baseOptions,\n  )\n}\n\nexport const QMenuStockDepositDocument = gql`\n  query QMenuStockDeposit($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      id\n      code\n      plu\n      nameLabel: label\n      note\n      quantity\n      wareUnit {\n        ...FMenuWareUnit\n      }\n    }\n  }\n\n  ${FMenuWareUnitFragmentDoc}\n`\n\nexport function useQMenuStockDeposit(\n  variables?: QMenuStockDepositVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuStockDepositVariables>,\n) {\n  return Hooks.useQuery<QMenuStockDepositQuery, QMenuStockDepositVariables>(\n    QMenuStockDepositDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMenuStockDeposit(\n  options?: Hooks.ExecutableQueryOptions<QMenuStockDepositVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMenuStockDepositQuery,\n    QMenuStockDepositVariables\n  >(QMenuStockDepositDocument, options)\n}\n\nexport const QStockForTransferDocument = gql`\n  query QStockForTransfer($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      id\n      code\n      plu\n      nameLabel: label\n      allowNegativeValue\n      quantity\n      wareUnit {\n        id\n        code\n      }\n    }\n  }\n`\n\nexport function useQStockForTransfer(\n  variables?: QStockForTransferVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStockForTransferVariables>,\n) {\n  return Hooks.useQuery<QStockForTransferQuery, QStockForTransferVariables>(\n    QStockForTransferDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQStockForTransfer(\n  options?: Hooks.ExecutableQueryOptions<QStockForTransferVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QStockForTransferQuery,\n    QStockForTransferVariables\n  >(QStockForTransferDocument, options)\n}\n\nexport const QStockStatsDocument = gql`\n  query QStockStats($brandId: ID!) {\n    stockItems(company: $brandId) {\n      id\n      code\n      companyBranch {\n        id\n        name\n      }\n      plu\n      quantity\n      nameLabel: label\n      wareUnit {\n        id\n        code\n      }\n    }\n  }\n`\n\nexport function useQStockStats(\n  variables?: QStockStatsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStockStatsVariables>,\n) {\n  return Hooks.useQuery<QStockStatsQuery, QStockStatsVariables>(\n    QStockStatsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQStockStats(\n  options?: Hooks.ExecutableQueryOptions<QStockStatsVariables>,\n) {\n  return Hooks.useExecutableQuery<QStockStatsQuery, QStockStatsVariables>(\n    QStockStatsDocument,\n    options,\n  )\n}\n\nexport const MZoneCreateDocument = gql`\n  mutation MZoneCreate(\n    $branchId: ID!\n    $points: [InputGeoPointCreate!]\n    $type: ZoneTypeEnum!\n  ) {\n    createZone(\n      zone: { companyBranch: $branchId, geoPolygon: $points, zoneType: $type }\n    ) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useMZoneCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MZoneCreateMutation,\n    MZoneCreateVariables\n  >,\n) {\n  return Hooks.useMutation<MZoneCreateMutation, MZoneCreateVariables>(\n    MZoneCreateDocument,\n    baseOptions,\n  )\n}\n\nexport const MZoneDeleteDocument = gql`\n  mutation MZoneDelete($zoneId: ID!) {\n    deleteZone: destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n\nexport function useMZoneDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    MZoneDeleteMutation,\n    MZoneDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<MZoneDeleteMutation, MZoneDeleteVariables>(\n    MZoneDeleteDocument,\n    baseOptions,\n  )\n}\n\nexport const MZoneUpdateDocument = gql`\n  mutation MZoneUpdate($zoneId: ID!, $update: InputZoneUpdate!) {\n    updateZone(id: $zoneId, zone: $update) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useMZoneUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MZoneUpdateMutation,\n    MZoneUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<MZoneUpdateMutation, MZoneUpdateVariables>(\n    MZoneUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const MZoneUpdatePriorityDocument = gql`\n  mutation MZoneUpdatePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport function useMZoneUpdatePriority(\n  baseOptions?: Hooks.MutationHookOptions<\n    MZoneUpdatePriorityMutation,\n    MZoneUpdatePriorityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MZoneUpdatePriorityMutation,\n    MZoneUpdatePriorityVariables\n  >(MZoneUpdatePriorityDocument, baseOptions)\n}\n\nexport const QZoneColorsDocument = gql`\n  query QZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n\nexport function useQZoneColors(\n  variables?: QZoneColorsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QZoneColorsVariables>,\n) {\n  return Hooks.useQuery<QZoneColorsQuery, QZoneColorsVariables>(\n    QZoneColorsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQZoneColors(\n  options?: Hooks.ExecutableQueryOptions<QZoneColorsVariables>,\n) {\n  return Hooks.useExecutableQuery<QZoneColorsQuery, QZoneColorsVariables>(\n    QZoneColorsDocument,\n    options,\n  )\n}\n\nexport const QZoneFormDocument = gql`\n  query QZoneForm($zoneId: ID!) {\n    zone(id: $zoneId) {\n      ...FZoneInForm\n    }\n  }\n\n  ${FZoneInFormFragmentDoc}\n`\n\nexport function useQZoneForm(\n  variables?: QZoneFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<QZoneFormVariables>,\n) {\n  return Hooks.useQuery<QZoneFormQuery, QZoneFormVariables>(\n    QZoneFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQZoneForm(\n  options?: Hooks.ExecutableQueryOptions<QZoneFormVariables>,\n) {\n  return Hooks.useExecutableQuery<QZoneFormQuery, QZoneFormVariables>(\n    QZoneFormDocument,\n    options,\n  )\n}\n\nexport const QZoneListDocument = gql`\n  query QZoneList($branches: [ID!]!) {\n    zones(companyBranches: $branches) {\n      ...FZoneInList\n    }\n  }\n\n  ${FZoneInListFragmentDoc}\n`\n\nexport function useQZoneList(\n  variables?: QZoneListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QZoneListVariables>,\n) {\n  return Hooks.useQuery<QZoneListQuery, QZoneListVariables>(\n    QZoneListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQZoneList(\n  options?: Hooks.ExecutableQueryOptions<QZoneListVariables>,\n) {\n  return Hooks.useExecutableQuery<QZoneListQuery, QZoneListVariables>(\n    QZoneListDocument,\n    options,\n  )\n}\n\n// Generated in 2019-09-27T14:15:40+02:00\n","export const ROUTE_AUTH_LOGIN = '/login'\nexport const ROUTE_AUTH_LOGOUT = '/logout'\nexport const ROUTE_AUTH_RESET_PASSWORD = '/reset'\nexport const ROUTE_AUTH_RECOVERY = '/recovery'\nexport const ROUTE_AUTH_REGISTER = '/register'\n","import React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { RedirectToLogin } from './RedirectToLogin'\n\ninterface ISecureRouteProps extends RouteProps {\n  redirect?: boolean\n  lazy?: boolean\n}\n\nexport const SecureRoute: React.FC<ISecureRouteProps> = ({\n  redirect = true,\n  lazy = true,\n  ...props\n}) => {\n  const { auth } = useRoot()\n  if (!auth.isAuthenticatedUser) {\n    return redirect ? <RedirectToLogin /> : <NotFoundPage />\n  }\n  if (props.component && typeof props.component === 'object') {\n    const { component, path, exact } = props\n    return <Route path={path} exact={exact} component={component} />\n  }\n  return <Route {...props} />\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport loaderGif from '../assets/loader.gif'\nimport { appConfig } from '../config'\n\nconst StyledPageLoader = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n`\n\nconst PageLoader: React.FC = () => (\n  <StyledPageLoader role=\"banner\">\n    <img\n      src={loaderGif}\n      alt={appConfig.pageTitleSuffix}\n      width={200}\n      height={200}\n    />\n  </StyledPageLoader>\n)\n\nexport default PageLoader\n"],"sourceRoot":""}