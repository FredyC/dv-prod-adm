{"version":3,"sources":["atoms/FormInputTextBox.tsx","atoms/FormInputStyled.tsx","molecules/FormSubmit.tsx","helpers/form.ts","atoms/LoginPageBackground.tsx","assets/bg_login.jpg","assets/bg_login@2x.jpg","segments/login/molecules/PasswordPageGrid.tsx","atoms/NotifyMessage.tsx","segments/login/molecules/PasswordLoginError.tsx","segments/login/molecules/PasswordResetLink.tsx","segments/login/organisms/PasswordLoginForm.tsx","segments/login/pages/PasswordLoginPage.tsx","segments/login/routes/PasswordLoginRoute.tsx"],"names":["FormInputTextBox","React","forwardRef","_ref","inputRef","field","_ref$inputFullWidth","inputFullWidth","isRequired","validatioName","validationMessage","validate","props","Object","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","react_form__WEBPACK_IMPORTED_MODULE_2__","value","isEmpty","_i18n__WEBPACK_IMPORTED_MODULE_4__","_","fieldApi","_FormInputStyled__WEBPACK_IMPORTED_MODULE_5__","assign","onChange","ev","target","validity","valid","setTouched","setValue","invalid","Boolean","error","ref","invalidInputStyle","css","_templateObject","fullWidthStyle","_templateObject2","FormInputStyled","styled","input","_templateObject3","Spacing","MarginAroundFormComponents","_ref2","FormSubmit","children","form","_molecules_TouchButton__WEBPACK_IMPORTED_MODULE_4__","color","Colors","green","disabled","isFormValid","submitting","onClick","e","preventDefault","submitForm","__webpack_require__","d","__webpack_exports__","validateIsRequired","validator__WEBPACK_IMPORTED_MODULE_0__","_i18n__WEBPACK_IMPORTED_MODULE_1__","formState","errors","keys","length","fieldName","LoginPageBackground","div","backgroundImage","backgroundImage2x","module","exports","p","PasswordPageGrid","withConfig","displayName","componentId","Middle","Small","NotifyMessageContainerStyled","isError","red","NotifyMessageStyled","FontSizes","InfoMessageFontSize","NotifyMessage","isVisible","_ref$isError","objectWithoutProperties","react_default","data-testid","concat","PasswordLoginError","observer","model","hasFailed","NotifyMessage_NotifyMessage","errorMessage","PasswordResetLink","react_router_dom","to","TouchButton","greyMiddle","_lingui_react","id","PasswordLoginForm","es","onSubmit","username","password","requestToken","render","formApi","name","i18n","autoFocus","autoCorrect","autoCapitalize","spellCheck","placeholder","type","MarginBox","margin","StyledPasswordLoginPage","PasswordLoginPage","PageTitle","title","PageLayoutGridItem","gridRow","gridRowSpan","gridColumn","gridColumnInMobile","gridColumnSpan","gridRowInMobile","gridColumnSpanInMobile","Display","gridRowSpanInMobile","PasswordLoginForm_PasswordLoginForm","PasswordResetLink_PasswordResetLink","PasswordLoginRoute_PasswordLoginRoute","PasswordLoginRoute","auth","useRoot","match","useRouter","path","useEffect","authenticate","window","atob","params","token","userId","isAuthenticatedUser","react_router","PasswordLoginPage_PasswordLoginPage","provider","passwordLogin"],"mappings":"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","file":"static/js/182.a74e9786.chunk.js","sourcesContent":["import React from 'react'\nimport { Field, FieldType, ValidationResult } from 'react-form'\nimport { isEmpty } from 'validator'\n\nimport { i18n } from '../i18n'\nimport { FormInputStyled } from './FormInputStyled'\n\ninterface IProps extends React.InputHTMLAttributes<never> {\n  field: FieldType\n  defaultValue?: string\n  isRequired?: boolean\n  validatioName?: string\n  validationMessage?: string\n  inputFullWidth?: boolean\n  validate?(value: string): ValidationResult\n}\n\nexport type TFormInputTextBoxProps = IProps\n\nexport const FormInputTextBox = React.forwardRef<HTMLInputElement, IProps>(\n  (\n    {\n      field,\n      inputFullWidth = false,\n      isRequired,\n      validatioName,\n      validationMessage,\n      validate,\n      ...props\n    },\n    inputRef,\n  ) => (\n    <Field\n      field={field}\n      validate={\n        validate ||\n        (value => {\n          if (isRequired && isEmpty(value + '')) {\n            if (validationMessage) {\n              return validationMessage\n            }\n            return i18n.t`${validatioName} is required`\n          }\n          return null\n        })\n      }\n    >\n      {fieldApi => (\n        <FormInputStyled\n          value={!fieldApi.value && fieldApi.value !== 0 ? '' : fieldApi.value}\n          onChange={ev => {\n            if (ev.target.validity.valid) {\n              fieldApi.setTouched(true)\n              fieldApi.setValue(ev.target.value)\n            }\n          }}\n          inputFullWidth={inputFullWidth}\n          invalid={Boolean(fieldApi.error)}\n          // @ts-ignore\n          ref={inputRef}\n          {...props}\n        />\n      )}\n    </Field>\n  ),\n)\n","import styled, { css } from 'styled-components'\n\nimport { Spacing } from '../styling'\n\ninterface IFormInputStyled {\n  invalid?: boolean\n  inputFullWidth?: boolean\n}\n\nexport const invalidInputStyle = css`\n  border: 1px red solid;\n`\n\nexport const fullWidthStyle = css`\n  width: 100%;\n`\n\nexport const FormInputStyled = styled.input`\n  margin: ${Spacing.MarginAroundFormComponents};\n  ${({ inputFullWidth }: IFormInputStyled) => inputFullWidth && fullWidthStyle};\n  ${({ invalid }: IFormInputStyled) => invalid && invalidInputStyle};\n`\n","import React from 'react'\nimport { FormApi } from 'react-form'\n\nimport { isFormValid } from '../helpers/form'\nimport { ITouchButtonProps, TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\ninterface IProps extends ITouchButtonProps {}\n\nexport const FormSubmit: React.FC<IProps> = ({ children, ...props }) => (\n  <FormApi>\n    {form => (\n      <TouchButton\n        color={Colors.green}\n        disabled={!isFormValid(form) || form.submitting}\n        onClick={e => {\n          e.preventDefault()\n          form.submitForm(e)\n        }}\n        {...props}\n      >\n        {children}\n      </TouchButton>\n    )}\n  </FormApi>\n)\n","import { IFormState } from 'react-form'\nimport { isEmpty } from 'validator'\n\nimport { i18n } from '../i18n'\n\nexport function isFormValid(formState: IFormState) {\n  return !formState.errors || Object.keys(formState.errors).length === 0\n}\n\nexport function validateIsRequired(fieldName: string) {\n  return (value: string) =>\n    isEmpty(value + '') ? i18n.t`${fieldName} must be entered` : null\n}\n","import styled from 'styled-components'\n\nimport backgroundImage from '../assets/bg_login.jpg'\nimport backgroundImage2x from '../assets/bg_login@2x.jpg'\n\nexport const LoginPageBackground = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-image: url(${backgroundImage});\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n\n  @media only screen and (-webkit-min-device-pixel-ratio: 1.3),\n    only screen and (min--moz-device-pixel-ratio: 1.3),\n    only screen and (-o-min-device-pixel-ratio: 2.6/2),\n    only screen and (min-device-pixel-ratio: 1.3),\n    only screen and (min-width: 1024px) {\n    background-image: url(${backgroundImage2x});\n  }\n`\n","module.exports = __webpack_public_path__ + \"static/media/bg_login.382d98be.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_login@2x.35ab1818.jpg\";","import styled from 'styled-components/macro'\n\nimport { Spacing } from '../../../styling'\n\nexport const PasswordPageGrid = styled.div`\n  display: grid;\n  width: 100vw;\n  height: 100vh;\n  grid-gap: ${Spacing.Middle};\n  grid-template-columns: repeat(16, 1fr);\n  grid-template-rows: repeat(7, 3rem);\n  padding: 0 ${Spacing.Small} 0 ${Spacing.Small};\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors, FontSizes } from '../styling'\n\ninterface INotifyMessageProps {\n  isError?: boolean\n  isVisible: boolean\n  onClick?(): void\n}\n\nconst backgroundProperty = (props: INotifyMessageProps) =>\n  props.isError ? Colors.red : Colors.green\n\nconst NotifyMessageContainerStyled = styled.div`\n  position: relative;\n  border-radius: 1rem;\n  width: 60%;\n  height: 3.9rem;\n  opacity: 0.85;\n  left: 20%;\n  background: ${backgroundProperty};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst NotifyMessageStyled = styled.div`\n  color: white;\n  text-align: center;\n  margin: 0 0.5rem 0.4rem 0.5rem;\n  font-size: ${FontSizes.InfoMessageFontSize};\n`\n\nexport const NotifyMessage: React.FC<INotifyMessageProps> = ({\n  children,\n  isVisible,\n  isError = false,\n  onClick,\n  ...props\n}) =>\n  isVisible ? (\n    <NotifyMessageContainerStyled\n      onClick={onClick}\n      isVisible={isVisible}\n      isError={isError}\n      {...props}\n    >\n      <NotifyMessageStyled data-testid={`notify${isError ? '-error' : ''}`}>\n        {children}\n      </NotifyMessageStyled>\n    </NotifyMessageContainerStyled>\n  ) : null\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { NotifyMessage } from '../../../atoms/NotifyMessage'\nimport { TPasswordLoginModel } from '../models/PasswordLoginModel'\n\ninterface IPasswordLoginErrorProps {\n  model: TPasswordLoginModel\n}\n\nexport const PasswordLoginError = observer<IPasswordLoginErrorProps>(\n  ({ model }) =>\n    model.hasFailed ? (\n      <NotifyMessage isVisible={true} isError={true}>\n        {model.errorMessage}\n      </NotifyMessage>\n    ) : null,\n)\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IProps {}\n\nexport const PasswordResetLink: React.FC<IProps> = props => {\n  return (\n    <Link to=\"/reset\">\n      <TouchButton color={Colors.greyMiddle}>\n        <Trans>Forgotten password</Trans>\n      </TouchButton>\n    </Link>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { Form } from 'react-form'\n\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { MarginBox } from '../../../atoms/MarginBox'\nimport { i18n } from '../../../i18n'\nimport { FormSubmit } from '../../../molecules/FormSubmit'\nimport { Spacing } from '../../../styling'\nimport { TPasswordLoginModel } from '../models/PasswordLoginModel'\n\ninterface IPasswordLoginFormProps {\n  model: TPasswordLoginModel\n}\n\ninterface IFormValues {\n  username: string\n  password: string\n}\n\nexport const PasswordLoginForm: React.FC<IPasswordLoginFormProps> = ({\n  model,\n}) => (\n  <Form\n    onSubmit={({ username, password }: IFormValues) =>\n      model.requestToken(username, password)\n    }\n    render={formApi => (\n      <form onSubmit={formApi.submitForm}>\n        <FormInputTextBox\n          field=\"username\"\n          name=\"username\"\n          isRequired={true}\n          inputFullWidth={true}\n          validatioName={i18n.t`username`}\n          autoFocus={true}\n          autoCorrect=\"off\"\n          autoCapitalize=\"off\"\n          spellCheck={false}\n          placeholder={i18n.t`username`}\n        />\n\n        <FormInputTextBox\n          field=\"password\"\n          name=\"password\"\n          isRequired={true}\n          inputFullWidth={true}\n          validatioName={i18n.t`password`}\n          type=\"password\"\n          placeholder={i18n.t`password`}\n        />\n\n        <MarginBox margin={`${Spacing.Middle} -0.1rem 0 0.1rem`}>\n          <FormSubmit>\n            <Trans>Sign-in</Trans>\n          </FormSubmit>\n        </MarginBox>\n      </form>\n    )}\n  />\n)\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { LoginPageBackground } from '../../../atoms/LoginPageBackground'\nimport { PageLayoutGridItem } from '../../../atoms/PageLayoutGridItem'\nimport { PageTitle } from '../../../atoms/PageTitle'\nimport { i18n } from '../../../i18n'\nimport { TPasswordLoginModel } from '../models/PasswordLoginModel'\nimport { PasswordLoginError } from '../molecules/PasswordLoginError'\nimport { PasswordPageGrid } from '../molecules/PasswordPageGrid'\nimport { PasswordResetLink } from '../molecules/PasswordResetLink'\nimport { PasswordLoginForm } from '../organisms/PasswordLoginForm'\n\ninterface IPasswordLoginPageProps {\n  model: TPasswordLoginModel\n}\n\nconst StyledPasswordLoginPage = styled(LoginPageBackground)`\n  h1 {\n    text-align: center;\n  }\n`\n\nexport const PasswordLoginPage: React.FC<IPasswordLoginPageProps> = ({\n  model,\n}) => (\n  <StyledPasswordLoginPage>\n    <PageTitle title={i18n.t`Login page`} />\n    <PasswordPageGrid>\n      <PageLayoutGridItem\n        gridRow={2}\n        gridRowSpan={2}\n        gridColumn={6}\n        gridColumnInMobile={2}\n        gridColumnSpan={6}\n        gridRowInMobile={2}\n        gridColumnSpanInMobile={14}\n      >\n        <PageTitle.Display />\n      </PageLayoutGridItem>\n      <PageLayoutGridItem\n        gridRow={4}\n        gridRowSpan={6}\n        gridColumn={6}\n        gridColumnSpan={6}\n        gridRowInMobile={3}\n        gridRowSpanInMobile={3}\n        gridColumnInMobile={2}\n        gridColumnSpanInMobile={14}\n      >\n        <PasswordLoginForm model={model} />\n      </PageLayoutGridItem>\n      <PageLayoutGridItem\n        gridRow={1}\n        gridRowInMobile={6}\n        gridColumn={14}\n        gridColumnSpan={3}\n        gridColumnInMobile={2}\n        gridColumnSpanInMobile={14}\n      >\n        <PasswordResetLink />\n      </PageLayoutGridItem>\n    </PasswordPageGrid>\n    <PasswordLoginError model={model} />\n  </StyledPasswordLoginPage>\n)\n","import { useRouter } from '@speedlo/hooks'\nimport React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { PasswordLoginPage } from '../pages/PasswordLoginPage'\n\nexport const PasswordLoginRoute: React.FC = () => {\n  const { auth } = useRoot()\n\n  const { match } = useRouter<{ token: string; userId: ID }>({\n    path: '/login/:token/:userId',\n  })\n\n  React.useEffect(() => {\n    if (match) {\n      auth.authenticate(window.atob(match.params.token), match.params.userId)\n    }\n  }, [match])\n\n  return auth.isAuthenticatedUser ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <PasswordLoginPage model={auth.provider.passwordLogin} />\n  )\n}\n\nexport default PasswordLoginRoute\n"],"sourceRoot":""}