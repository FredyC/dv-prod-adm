{"version":3,"sources":["atoms/CanMutate.tsx","atoms/ScrollArea.tsx","molecules/PageLayoutFullHeightItem.tsx","atoms/FlexRowSingle.tsx","atoms/FlexColumn.tsx","components/forms/FormInput.tsx","atoms/VerticalGap.tsx","molecules/TouchButtonDelete.tsx","helpers/form.ts","components/forms/FormSubmitButton.tsx","atoms/BaseMap.tsx","components/forms/FormDropdown.tsx","components/forms/FormDisplayValue.tsx","atoms/DragHandle.tsx","atoms/ConfirmDialog.tsx","atoms/CardListTitle.tsx","molecules/CompanyBrandDropdown.tsx","components/forms/useFormLoader.ts","segments/zones/hooks/useZoneRouteControl.tsx","segments/zones/molecules/ZoneFormLoader.tsx","molecules/MapCompanyBranchMarker.tsx","segments/zones/atoms/ZoneMapArea.tsx","segments/zones/atoms/ZoneMapEditableArea.tsx","segments/zones/hooks/useZoneColors.ts","segments/zones/hooks/useZoneModel.ts","segments/zones/hooks/useZoneListQuery.ts","segments/zones/molecules/ZoneMap.tsx","segments/zones/hooks/useZoneMapControl.ts","segments/zones/molecules/ZoneColorSelector.tsx","segments/zones/atoms/ZoneFormForPrice.tsx","segments/zones/atoms/ZoneFormToPrice.tsx","segments/zones/atoms/ZoneFormRuleInputs.tsx","segments/zones/molecules/ZoneFormPriceRules.tsx","segments/zones/molecules/ZoneFormContent.tsx","segments/zones/molecules/ZoneFormControls.tsx","segments/zones/organisms/ZoneFormPanel.tsx","atoms/UserHasMultipleBranches.tsx","segments/zones/atoms/ZoneListSection.tsx","segments/zones/molecules/CreateZoneButton.tsx","segments/zones/atoms/ZoneListCard.tsx","segments/zones/atoms/ZoneListCardGroup.tsx","segments/zones/hooks/useZoneListControl.ts","segments/zones/molecules/ZoneList.tsx","segments/zones/organisms/ZoneFilter.tsx","segments/zones/organisms/ZoneMenuPanel.tsx","segments/zones/pages/ZonesOverviewPage.tsx","segments/zones/routes/ZoneMenuRouting.tsx"],"names":["CanMutate","observer","mutationName","children","useCanMutate","ScrollArea","styled","div","StyledPageLayoutFullHeightItem","mediaDesktop","props","undefined","widthInColumns","Spacing","LayoutGridCellMargin","column","row","mediaMobile","rowInMobile","forcePercentHeightInMobile","PageHeaderHeight","DefaultSizeUnit","PageLayoutFullHeightItem","withScrollArea","scrollAreaId","forceHeightInMobile","isMobile","useResponsive","id","Sizer","height","heightUnit","FlexRowSingle","flexWrap","justify","FlexColumn","fixedWidth","width","widthGrowIndex","padding","margin","FormInput","React","forwardRef","inputRef","fieldName","fullWidth","validate","addHiddenLabelWithPlaceholderText","withLabel","getInputProps","useFormInputProps","useObserver","inputFullWidth","ref","placeholder","hidden","htmlFor","useXFieldForInput","field","invalid","touched","Boolean","error","VerticalGap","size","sizeUnit","displayName","TouchButtonDelete","onDelete","confirmText","icon","Delete","color","Colors","greyMiddle","onClick","ev","preventDefault","window","confirm","isFormValid","formState","errors","Object","keys","length","parseNumber","value","Number","parseFloat","replace","FormSubmitButton","state","useXFormState","type","green","disabled","isSubmitting","isDirty","isValid","ErrorOutline","iconSize","iconColor","red","libraries","createContext","BaseMap","model","options","streetViewControl","mapTypeControl","fullscreenControl","user","useRoot","useLoadScript","version","googleMapsApiKey","appConfig","googleMapsApi","language","isLoaded","loadError","googleMapUrl","url","googleAvailable","Reflect","has","Sentry","withScope","scope","setExtras","captureException","zoom","center","onCenterChanged","updatePosition","onZoomChanged","updateZoom","onLoad","setMapRef","mapContainerStyle","borderRadius","Radiuses","Card","overflow","useGoogleMap","map","useGoogleMapOrig","Error","FormDropdown","useXField","isMulti","getOptionValue","selection","isSelected","Array","isArray","option","includes","RM","F","filter","onChange","selectedOptions","setValue","getPropsForMulti","find","item","getPropsForSingle","onFocus","setTouched","hasError","FormDisplayValue","className","useXFieldState","StyledDragHandle","DragHandle","SortableHandle","Reorder","ConfirmDialog","isShow","onCancel","onConfirm","useEffect","CardListTitle","h2","greyLight","ClearIndicator","getStyles","innerProps","restInnerProps","style","CompanyBrandDropdown","brands","selectedBrand","onSelection","formatOptionLabel","prop","getOptionLabel","isClearable","isSearchable","autoFocus","components","logger","useFormLoader","onSubmit","initialValues","loadValues","validationSchema","submitMessage","submitRedirectPath","history","useRouterContext","useSnackBar","enqueueSuccess","enqueueWarning","onSubmitSuccess","useCallback","values","a","push","onSubmitFailed","msg","hasLoaded","useRef","onReset","current","xform","useXForm","initialValidationEnabled","ignoreUnknownFieldsInValidation","onFormChanges","Promise","resolve","then","api","mergeValues","pristineValues","enableValidation","useZoneRouteControl","getRouteToZone","zoneId","ROUTE_SETTINGS_ZONES","routeToZoneEdit","editZoneId","canQuery","routeToZoneList","ZoneFormLoader","useMZoneUpdate","zoneUpdate","useObjectValidation","yup","name","string","required","minimalOrderPrice","number","min","update","getWriteVariables","i18n","ZoneTypeEnum","Area","enabled","branchId","zoneColor","geoPolygon","minimalPrice","priceRules","priceRulesOrder","currencyCode","skip","useQZoneForm","data","loading","zone","useLoadingCache","getZone","zoneType","enum","branchWithCurrency","withoutTypeName","currency","code","indexedPriceRules","priceRangeRules","rule","idx","clientId","String","toPrice","price","reduce","acc","normalizePriceRules","normalizeZoneToValues","resetForm","omit","companyBranch","isLast","BranchNameStyled","isActive","css","white","greyDark","MapCompanyBranchMarker","branch","getPixelPositionOffset","x","y","mapPaneName","OverlayView","MARKER_LAYER","position","gpsToLatLng","gps","ZoneMapArea","points","priority","onAreaFocus","e","stop","path","Return","fillColor","strokeWeight","strokeColor","zIndex","fillOpacity","editable","draggable","onDblClick","ZoneMapEditableArea","initialPoints","polygonRef","listenersRef","onAreaChange","getPath","getArray","latLngToGps","polygon","addListener","onUnmount","forEach","lis","remove","initialPointsRef","initialPath","useMemo","onDragEnd","EMPTY_COLORS","useZoneColors","useQZoneColors","fetchPolicy","getColors","zoneColors","useZoneModel","useZoneListQuery","branches","branchFilterPredicate","idProp","useQZoneList","zones","getZones","ZoneMap","zoneModel","companyBranchId","hasBranchFilter","branchFilterId","source","useAsObservableSource","useAutorun","isReady","idPropEq","getCenter","panTo","useZoneMapControl","polygonField","typeField","colorField","renderBranchLabel","key","renderEditZone","ColorOption","ZoneColorSelector","isLoading","styles","base","menu","maxWidth","defaultValue","head","ZoneFormForPrice","fieldInputProps","_","ZoneFormToPrice","asInfinity","inputProps","label","ZoneFormRuleInputs","fieldPath","shouldFocus","isLastRule","toPriceRef","forPriceRef","focus","StyledZoneFormPriceRules","Middle","blue","ZoneFormPriceRules","rulesOrderField","rulesField","useState","focusId","setFocusId","idCounter","ruleId","rules","TouchButton","ButtonHeight","afterRule","findIndex","equals","splice","addRule","AddCircle","title","removeRule","StyledZoneFormContent","black","ZoneFormContent","IconLine","Label","ColorLens","toLocaleLowerCase","Headline","ZoneFormControls","text","DeleteButtonContainer","ZoneFormPanel","useMZoneDelete","deleteZone","when","handleOk","handleCancel","UserHasMultipleBranches","hasSingleBranch","StyledZoneListSection","p","ZoneListSection","CreateZoneButton","useMZoneCreate","createZone","generatePolygon","metersRadius","pointsCount","result","createTextByType","colorByType","turquoise","textNextToIcon","StyledZoneListCard","baseColor","Color","alpha","darken","lighterColor","lighten","ZoneNameStyled","ZoneDescriptionStyled","ZoneFlexRowStyled","ZoneListCard","SortableElement","onEdit","SizerButton","Edit","ZoneListContainerStyled","SortableZoneList","SortableContainer","ZoneListCardGroup","onSort","onSortEnd","useDragHandle","lockAxis","lockToContainerEdges","sortZones","sortWith","ascend","descend","groupByBranch","groupBy","isZoneType","pathEq","ZoneList","zonesByBranch","mapObjIndexed","useMZoneUpdatePriority","updatePriority","onZoneSort","oldIndex","newIndex","collection","offset","optimisticResponse","__typename","updateZonePriority","useZoneListControl","primaryOpacity","secondaryOpacity","root","filterBranches","renderZone","index","branchZones","renderBranch","ZoneFilter","getBrandBranches","brand","autorun","setBranchFilter","singleBrand","setBrandFilter","clearBrandFilter","CompanyBranchDropdown","selectedBranch","onSingleSelection","clearBranchFilter","StyledZoneMenuPanel","ZoneMenuPanel","memo","useAutorunWhenSingleBranch","zoneTypes","ZonesOverviewPage","match","params","isEditing","PageLayoutResponsive","pageTitle","backRoute","ROUTE_SETTINGS","useBackButton","ZonesRouting","component","NotFoundPage"],"mappings":"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","file":"static/js/184.dbe00ee4.chunk.js","sourcesContent":["import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useCanMutate } from '../hooks/useAccessGuard'\nimport { NoAccess } from './NoAccess'\n\ninterface IProps {\n  mutationName: string\n}\n\nexport const CanMutate = observer<IProps>(({ mutationName, children }) => {\n  const canMutate = useCanMutate(mutationName)\n  return canMutate ? (\n    <>{children}</>\n  ) : (\n    <NoAccess>{`No access to mutation ${mutationName}`}</NoAccess>\n  )\n})\n","import styled from 'styled-components'\n\nexport const ScrollArea = styled.div`\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  height: 100%;\n`\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile, useResponsive } from '../app/Responsive'\nimport { ScrollArea } from '../atoms/ScrollArea'\nimport { Sizer } from '../atoms/Sizer'\nimport { Spacing } from '../styling'\n\ninterface IPageLayoutFullHeightItemProps {\n  row?: number\n  column?: number\n  rowInMobile?: number\n  widthInColumns?: number\n  withScrollArea?: boolean\n  forcePercentHeightInMobile?: number\n  scrollAreaId?: string\n}\n\nconst gridColumnWidth: string = '6.22vw'\nconst gridColumnHeigth: string = '3.9375rem'\n\nconst leftPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.column !== undefined) {\n    return (\n      'calc((' +\n      props.column +\n      ' * ' +\n      gridColumnWidth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return Spacing.LayoutGridCellMargin\n  }\n}\nconst widthComputed = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.widthInColumns !== undefined) {\n    return (\n      'calc((' +\n      props.widthInColumns +\n      ' * ' +\n      gridColumnWidth +\n      ') - ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return 'calc(100vh - (2 * ' + Spacing.LayoutGridCellMargin + '))'\n  }\n}\nconst topPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.row !== undefined) {\n    return (\n      'calc((' +\n      props.row +\n      ' * ' +\n      gridColumnHeigth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return (\n      'calc(' + gridColumnHeigth + ' + ' + Spacing.LayoutGridCellMargin + ')'\n    )\n  }\n}\n\n// eslint-disable-next-line no-unexpected-multiline\nconst StyledPageLayoutFullHeightItem = styled.div<\n  IPageLayoutFullHeightItemProps\n>`\n  ${mediaDesktop`\n  position: fixed;\n  bottom: 0.5rem;\n  width: ${widthComputed()};\n  left: ${leftPos()};\n  top: ${topPos()};`}\n\n  ${mediaMobile`\n    margin: 0;\n    grid-row: ${({ rowInMobile }: IPageLayoutFullHeightItemProps) =>\n      rowInMobile} ;\n    grid-column: span 16;\n    height: ${({\n      forcePercentHeightInMobile,\n    }: IPageLayoutFullHeightItemProps) =>\n      forcePercentHeightInMobile\n        ? `calc(${forcePercentHeightInMobile}vh - ${Spacing.PageHeaderHeight +\n            0.25 +\n            Spacing.DefaultSizeUnit})`\n        : 'unset'} ;\n    position: relative;\n  `}\n`\n\nexport const PageLayoutFullHeightItem: React.FC<\n  IPageLayoutFullHeightItemProps\n> = ({\n  children,\n  row = 1,\n  rowInMobile = 16,\n  column = 0,\n  widthInColumns = 16,\n  withScrollArea = false,\n  scrollAreaId,\n  forcePercentHeightInMobile: forceHeightInMobile,\n}) => {\n  const { isMobile } = useResponsive()\n\n  return (\n    <StyledPageLayoutFullHeightItem\n      column={column}\n      row={row}\n      rowInMobile={rowInMobile}\n      widthInColumns={widthInColumns}\n      withScrollArea={withScrollArea}\n      forcePercentHeightInMobile={forceHeightInMobile}\n    >\n      {withScrollArea && !isMobile ? (\n        <ScrollArea id={scrollAreaId}>{children}</ScrollArea>\n      ) : (\n        <Sizer height={100} heightUnit=\"%\">\n          {children}\n        </Sizer>\n      )}\n    </StyledPageLayoutFullHeightItem>\n  )\n}\n","import styled from 'styled-components'\n\ninterface IProps {\n  flexWrap?: string\n  justify?: string\n}\n\nexport const FlexRowSingle = styled.div<IProps>`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: ${({ flexWrap = 'unset' }: IProps) => flexWrap};\n  justify-content: ${({ justify = 'space-between' }: IProps) => justify};\n`\n","import styled from 'styled-components'\n\ninterface IFlexColumnProps {\n  fixedWidth?: boolean\n  width?: string\n  widthGrowIndex?: number\n  padding?: string\n  margin?: string\n}\n\nexport const FlexColumn = styled.div`\n  flex: ${getFlexValue};\n  padding: ${getPadding};\n  margin: ${getMargin};\n`\n\nfunction getFlexValue({\n  fixedWidth = false,\n  width,\n  widthGrowIndex = 0,\n}: IFlexColumnProps) {\n  return fixedWidth ? (width ? `0 0 ${width}` : '0 0') : `${widthGrowIndex} 0`\n}\n\nfunction getPadding({ padding = '0.25rem' }: IFlexColumnProps) {\n  return padding\n}\n\nfunction getMargin({ margin = '' }: IFlexColumnProps) {\n  return margin\n}\n","import { useXFieldForInput, XFieldName, XFieldValidator } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { StyledFormInput } from '../../atoms/FormInputStyled'\n\ninterface IProps extends LegacyOmit<React.InputHTMLAttributes<never>, 'name'> {\n  fieldName: XFieldName\n  validate?: XFieldValidator<string>\n  fullWidth?: boolean\n  children?: never\n  addHiddenLabelWithPlaceholderText?: boolean\n}\n\nexport type FormInputProps = IProps\n\nexport const FormInput = React.forwardRef<HTMLInputElement, IProps>(\n  (\n    {\n      fieldName,\n      fullWidth,\n      validate,\n      addHiddenLabelWithPlaceholderText: withLabel = true,\n      ...props\n    },\n    inputRef,\n  ) => {\n    const getInputProps = useFormInputProps({ fieldName, validate })\n    return useObserver(() => (\n      <>\n        <StyledFormInput\n          {...getInputProps()}\n          inputFullWidth={fullWidth}\n          ref={inputRef}\n          {...props}\n        />\n        {withLabel && props.placeholder && (\n          <label hidden={true} htmlFor={getInputProps().id}>\n            {props.placeholder}\n          </label>\n        )}\n      </>\n    ))\n  },\n)\n\ninterface IHookOptions {\n  fieldName: XFieldName\n  validate?: XFieldValidator<string>\n}\n\nexport function useFormInputProps({ fieldName, validate }: IHookOptions) {\n  const [field, getInputProps] = useXFieldForInput<string>(fieldName, {\n    validate,\n  })\n  return () => ({\n    ...getInputProps(),\n    invalid: field.touched && Boolean(field.error),\n  })\n}\n","import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import { Delete } from '@material-ui/icons'\nimport React from 'react'\n\nimport { SizerButton } from '../atoms/SizerButton'\nimport { Colors } from '../styling'\nimport { ITouchButtonProps, TouchButton } from './TouchButton'\n\ninterface ITouchButtonDeleteProps\n  extends LegacyOmit<ITouchButtonProps, 'onClick'> {\n  confirmText?: string\n  onDelete(): void\n}\n\nexport const TouchButtonDelete: React.FC<ITouchButtonDeleteProps> = ({\n  onDelete,\n  confirmText,\n  ...props\n}) => {\n  return (\n    <SizerButton>\n      <TouchButton\n        icon={Delete}\n        color={Colors.greyMiddle}\n        onClick={ev => {\n          ev.preventDefault()\n          if (!confirmText || window.confirm(confirmText)) {\n            onDelete()\n          }\n        }}\n        {...props}\n      />\n    </SizerButton>\n  )\n}\n","import { IFormState } from 'react-form'\nimport { isEmpty } from 'validator'\n\nimport { i18n } from '../i18n'\n\nexport function isFormValid(formState: IFormState) {\n  return !formState.errors || Object.keys(formState.errors).length === 0\n}\n\nexport function validateIsRequired(fieldName: string) {\n  return (value: string) =>\n    isEmpty(value + '') ? i18n.t`${fieldName} must be entered` : null\n}\n\nexport function parseNumber(value: string | number) {\n  return typeof value === 'number'\n    ? value\n    : Number.parseFloat(value.replace(',', '.'))\n}\n","import { ErrorOutline } from '@material-ui/icons'\nimport { useXFormState } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ITouchButtonProps, TouchButton } from '../../molecules/TouchButton'\nimport { Colors } from '../../styling'\n\ninterface IProps extends ITouchButtonProps {\n  children: ReactNode | ReactNode[] | string\n}\n\nexport const FormSubmitButton: React.FC<IProps> = ({\n  children,\n  id = 'form-submit',\n  ...props\n}) => {\n  const state = useXFormState()\n  return useObserver(() => (\n    <TouchButton\n      type=\"submit\"\n      color={Colors.green}\n      disabled={state.isSubmitting && state.isDirty}\n      id={id}\n      icon={!state.isValid ? ErrorOutline : undefined}\n      iconSize={1.1}\n      iconColor={Colors.red}\n      {...props}\n    >\n      <>{children}</>\n    </TouchButton>\n  ))\n}\n","import { Trans } from '@lingui/macro'\nimport {\n  GoogleMap,\n  useGoogleMap as useGoogleMapOrig,\n  useLoadScript,\n} from '@react-google-maps/api'\nimport { Sentry } from '@speedlo/sentry'\nimport { Observer } from 'mobx-react-lite'\nimport React, { useContext } from 'react'\n\nimport { appConfig } from '../config'\nimport { TMapModel } from '../models/MapModel'\nimport { Radiuses } from '../styling'\nimport { useRoot } from './RootProvider'\n\ninterface IBaseMapProps {\n  model: TMapModel\n}\n\nconst mapModelContext = React.createContext<TMapModel | null>(null)\n\nconst libraries = ['places']\n\nexport const BaseMap: React.FC<IBaseMapProps> = ({ model, children }) => {\n  const options: google.maps.MapOptions = {\n    streetViewControl: false,\n    mapTypeControl: false,\n    fullscreenControl: false,\n  }\n\n  const { user } = useRoot()\n  const { isLoaded, loadError, url: googleMapUrl } = useLoadScript({\n    id: 'script-loader',\n    version: 'weekly',\n    googleMapsApiKey: appConfig.googleMapsApi,\n    libraries,\n    language: user.language!,\n  })\n\n  const renderMap = () => (\n    <Observer>\n      {() => (\n        <GoogleMap\n          zoom={model.zoom}\n          center={model.center}\n          onCenterChanged={model.updatePosition}\n          onZoomChanged={model.updateZoom}\n          onLoad={model.setMapRef}\n          options={options}\n          mapContainerStyle={{\n            borderRadius: Radiuses.Card,\n            overflow: 'hidden',\n            height: '100%',\n          }}\n        >\n          {children}\n        </GoogleMap>\n      )}\n    </Observer>\n  )\n\n  const googleAvailable = Reflect.has(window, 'google')\n\n  if (loadError || (isLoaded && !googleAvailable)) {\n    Sentry.withScope(scope => {\n      scope.setExtras({ googleMapUrl })\n      Sentry.captureException(loadError)\n    })\n    return (\n      <h2>\n        <Trans>Cannot load map right now. Please try again later.</Trans>\n      </h2>\n    )\n  }\n\n  return isLoaded ? renderMap() : null\n}\n\nexport function useMapModel() {\n  const model = useContext(mapModelContext)\n  if (!model) {\n    throw new Error('Trying to useMapModel, but BaseMap is missing in the tree')\n  }\n  return model\n}\n\nexport function useGoogleMap() {\n  const map = useGoogleMapOrig()\n  if (!map) {\n    throw new Error(\n      'Trying to useGoogleMap, but BaseMap is missing in the tree',\n    )\n  }\n  return map\n}\n","import { RM } from '@speedlo/tools'\nimport { useXField, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ISelectControlProps, SelectControl } from '../../atoms/SelectControl'\n\ntype DefaultOptionType = object\n\nexport interface FormDropdownProps<\n  OptionType extends DefaultOptionType = DefaultOptionType\n> extends ISelectControlProps<OptionType> {\n  fieldName: XFieldName\n}\n\nexport const FormDropdown = <OptionType extends DefaultOptionType>({\n  fieldName,\n  ...props\n}: FormDropdownProps<OptionType>) => {\n  const field = useXField(fieldName)\n  const { isMulti, options, getOptionValue } = props\n\n  const getPropsForMulti = () => {\n    const selection = field.value\n    const isSelected = Array.isArray(selection)\n      ? (option: OptionType) => selection.includes(getOptionValue!(option))\n      : RM.F\n\n    return {\n      value: Array.isArray(options)\n        ? (options as OptionType[]).filter(isSelected)\n        : [],\n      onChange: selectedOptions => {\n        field.setValue(selectedOptions.map(getOptionValue))\n      },\n    }\n  }\n\n  const getPropsForSingle = () => {\n    const selection = field.value\n    return {\n      value:\n        selection &&\n        (options as OptionType[]).find(\n          item => getOptionValue!(item) === selection,\n        ),\n      onChange: option => {\n        field.setValue(getOptionValue!(option))\n      },\n    }\n  }\n\n  return useObserver(() => (\n    <SelectControl\n      {...(isMulti ? getPropsForMulti() : getPropsForSingle())}\n      onFocus={() => field.setTouched()}\n      invalid={field.touched && field.hasError}\n      {...props}\n    />\n  ))\n}\n","import { useXFieldState, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\ninterface IProps {\n  fieldName: XFieldName\n  className?: string\n  children?: never\n}\n\nexport const FormDisplayValue: React.FC<IProps> = ({\n  fieldName,\n  className,\n}) => {\n  const field = useXFieldState<string>(fieldName)\n  return useObserver(() => <span className={className}>{field.value}</span>)\n}\n","import { Reorder } from '@material-ui/icons'\nimport React from 'react'\nimport { SortableHandle } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Icon } from './Icon'\n\ninterface IProps {}\n\nconst StyledDragHandle = styled.div`\n  padding: 1rem 0.4rem;\n  cursor: grab;\n`\nexport const DragHandle = SortableHandle<IProps>(() => (\n  <StyledDragHandle>\n    <Icon icon={Reorder} />\n  </StyledDragHandle>\n))\n","import React, { useEffect } from 'react'\n\ninterface IProps {\n  isShow: boolean\n  confirmText: string\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport const ConfirmDialog: React.FC<IProps> = ({\n  isShow,\n  confirmText,\n  onCancel,\n  onConfirm,\n}) => {\n  useEffect(() => {\n    if (isShow) {\n      if (window.confirm(confirmText)) {\n        onConfirm()\n      } else {\n        onCancel()\n      }\n    }\n  }, [confirmText, isShow, onCancel, onConfirm])\n  return null\n}\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\nexport const CardListTitle = styled.h2`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  font-size: 1.2rem;\n  margin: 0.8rem 0 0.8rem 0.3rem;\n`\n","import { Trans } from '@lingui/macro'\nimport { RM } from '@speedlo/tools'\nimport React from 'react'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { ISelectControlProps, SelectControl } from '../atoms/SelectControl'\nimport { FCompanyBranchBrand } from '../graph/generated'\nimport { i18n } from '../i18n'\n\ntype TBrand = FCompanyBranchBrand\n\ninterface IProps extends ISelectControlProps<TBrand> {\n  brands?: RoA<TBrand>\n  selectedBrand: Maybe<TBrand>\n  onSelection(brand: Maybe<TBrand>): void\n}\n\nconst ClearIndicator = props => {\n  const {\n    getStyles,\n    innerProps: { ref, ...restInnerProps },\n  } = props\n  return (\n    <div\n      {...restInnerProps}\n      ref={ref}\n      style={getStyles('clearIndicator', props)}\n    >\n      <div style={{ padding: '0px 5px' }}>\n        <Trans>All</Trans>\n      </div>\n    </div>\n  )\n}\n\nexport const CompanyBrandDropdown: React.FC<IProps> = ({\n  brands,\n  selectedBrand,\n  onSelection,\n  ...props\n}) => {\n  const { user } = useRoot()\n\n  return (\n    <SelectControl<TBrand>\n      placeholder={i18n.t`Select brand`}\n      options={brands || user.brands}\n      value={selectedBrand}\n      formatOptionLabel={RM.prop('name')}\n      getOptionValue={RM.prop('id')}\n      getOptionLabel={RM.prop('name')}\n      isClearable={true}\n      isSearchable={true}\n      onChange={value => onSelection(value as Maybe<TBrand>)}\n      autoFocus={true}\n      components={{ ClearIndicator }}\n      {...props}\n    />\n  )\n}\n","import { useRouterContext } from '@speedlo/hooks'\nimport { TValidationSchema, useXForm, XFormErrors } from '@speedlo/xform'\nimport React from 'react'\n\nimport { logForm } from '../../helpers/logger'\nimport { useSnackBar } from '../../hooks/useSnackBar'\n\ninterface IOptions<TValues> {\n  initialValues: TValues\n  loadValues?(initialValues: TValues): Promise<Partial<TValues> | undefined>\n  onSubmit(values: TValues): Promise<any>\n  submitMessage?: string\n  submitRedirectPath?: string\n  validationSchema?: TValidationSchema\n}\n\nexport type TFormLoaderOptions<TValues = any> = IOptions<TValues>\n\nconst logger =\n  process.env.REACT_APP_STAGE !== 'prod' ? obj => logForm('%o', obj) : undefined\n\nexport function useFormLoader<TValues>({\n  onSubmit,\n  initialValues,\n  loadValues,\n  validationSchema,\n  submitMessage,\n  submitRedirectPath,\n}: IOptions<TValues>) {\n  const { history } = useRouterContext()\n  const { enqueueSuccess, enqueueWarning } = useSnackBar()\n\n  const onSubmitSuccess = React.useCallback(\n    async (values: TValues) => {\n      await onSubmit(values)\n      if (submitMessage) {\n        enqueueSuccess(submitMessage)\n      }\n      if (submitRedirectPath) {\n        history.push(submitRedirectPath)\n      }\n    },\n    [enqueueSuccess, history, onSubmit, submitMessage, submitRedirectPath],\n  )\n\n  const onSubmitFailed = React.useCallback(\n    (values: TValues, errors: XFormErrors) => {\n      for (const msg of errors.values()) {\n        if (msg) {\n          enqueueWarning(msg)\n        }\n      }\n    },\n    [enqueueWarning],\n  )\n\n  const hasLoaded = React.useRef(false)\n\n  const onReset = React.useCallback(() => {\n    hasLoaded.current = false\n  }, [])\n\n  const xform = useXForm<TValues>({\n    onSubmit: onSubmitSuccess,\n    onSubmitFailed,\n    onReset,\n    validationSchema,\n    initialValues,\n    initialValidationEnabled: loadValues === undefined,\n    ignoreUnknownFieldsInValidation: true,\n    onFormChanges: logger,\n  })\n\n  React.useEffect(() => {\n    if (!hasLoaded.current) {\n      if (loadValues) {\n        Promise.resolve(loadValues(xform.state.initialValues)).then(values => {\n          if (values) {\n            xform.api.mergeValues(values)\n            xform.state.pristineValues = xform.state.values\n          }\n          xform.api.enableValidation()\n        })\n      }\n      hasLoaded.current = true\n    }\n  }, [loadValues, xform])\n\n  return xform\n}\n","import { useRouterContext } from '@speedlo/hooks'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { ROUTE_SETTINGS_ZONES } from '../../settings/settings.routes'\n\nexport function useZoneRouteControl() {\n  const { user } = useRoot()\n  const { history } = useRouterContext()\n  const getRouteToZone = React.useCallback((zoneId: ID) => {\n    return `${ROUTE_SETTINGS_ZONES}/${zoneId}`\n  }, [])\n\n  return {\n    getRouteToZone,\n    routeToZoneEdit: React.useCallback(\n      (editZoneId: ID) => {\n        if (user.canQuery('zone')) {\n          history.push(getRouteToZone(editZoneId))\n        }\n      },\n      [getRouteToZone, history, user],\n    ),\n    routeToZoneList: React.useCallback(() => {\n      history.push(ROUTE_SETTINGS_ZONES)\n    }, [history]),\n  }\n}\n","import { RM } from '@speedlo/tools'\nimport { useObjectValidation, XFormRender } from '@speedlo/xform'\nimport React from 'react'\n\nimport { useFormLoader } from '../../../components/forms/useFormLoader'\nimport {\n  InputZoneUpdate,\n  useMZoneUpdate,\n  useQZoneForm,\n  ZoneTypeEnum,\n} from '../../../graph/generated'\nimport { parseNumber } from '../../../helpers/form'\nimport { useLoadingCache } from '../../../hooks/useLoadingCache'\nimport { useSnackBar } from '../../../hooks/useSnackBar'\nimport { i18n } from '../../../i18n'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport {\n  TZoneFormPriceRule,\n  TZoneFormValues,\n  TZoneInForm,\n} from '../zones.types'\n\ninterface IProps {\n  zoneId: MaybeID\n}\n\nexport const ZoneFormLoader: React.FC<IProps> = ({ children, zoneId }) => {\n  const { routeToZoneList } = useZoneRouteControl()\n  const { enqueueSuccess } = useSnackBar()\n\n  const [zoneUpdate] = useMZoneUpdate()\n\n  const validationSchema = useObjectValidation<Partial<TZoneFormValues>>(\n    yup => ({\n      name: yup.string().required(),\n      minimalOrderPrice: yup\n        .number()\n        .required()\n        .min(0),\n    }),\n  )\n\n  const onSubmit = async (values: TZoneFormValues) => {\n    const result = await zoneUpdate({\n      zoneId: values.id,\n      update: getWriteVariables(values),\n    })\n    if (result) {\n      routeToZoneList()\n      enqueueSuccess(i18n.t`Zone has been updated`)\n    }\n  }\n\n  const xform = useFormLoader({\n    initialValues: getInitialValues(),\n    onSubmit,\n    validationSchema,\n  })\n\n  const skip = !zoneId\n  const { data, loading } = useQZoneForm({ zoneId: zoneId! }, { skip })\n\n  const getZone = useLoadingCache<TZoneFormValues | null>(skip)\n  const zone = getZone(loading, () =>\n    skip ? null : normalizeZoneToValues(data.zone),\n  )\n\n  // FIXME: Not working because ApolloDefender swallows everything when error happens\n  // React.useEffect(() => {\n  //   if (zoneId && !loading && !zone) {\n  //     routeToZoneList()\n  //     return\n  //   }\n  // }, [loading, routeToZoneList, zone, zoneId])\n\n  React.useEffect(() => {\n    if (zone) {\n      xform.api.mergeValues(zone)\n      xform.state.pristineValues = zone\n    }\n    return () => {\n      xform.api.resetForm()\n    }\n  }, [zone, xform.api, xform.state])\n\n  return <XFormRender xform={xform}>{children as ReactNodes}</XFormRender>\n}\n\nfunction getInitialValues(): TZoneFormValues {\n  return {\n    id: '',\n    type: ZoneTypeEnum.Area,\n    name: '',\n    enabled: true,\n    branchId: '',\n    zoneColor: '',\n    geoPolygon: [],\n    minimalPrice: 0,\n    priceRules: {},\n    priceRulesOrder: [],\n    currencyCode: '',\n  }\n}\n\nconst withoutTypeName = RM.omit(['__typename'])\n\nfunction normalizeZoneToValues(zone: TZoneInForm): TZoneFormValues {\n  return {\n    id: zone.id,\n    type: zone.zoneType.enum,\n    name: zone.name,\n    enabled: zone.enabled,\n    zoneColor: zone.zoneColor.id,\n    branchId: zone.branchWithCurrency.id,\n    geoPolygon: zone.geoPolygon.map(withoutTypeName),\n    currencyCode: zone.branchWithCurrency.currency.code,\n    minimalPrice: zone.minimalOrderPrice.value,\n    ...normalizePriceRules(zone),\n  }\n}\n\nfunction normalizePriceRules(zone: TZoneInForm) {\n  // it's neccessary to add temporary ID for the collection to be modified safely\n  const indexedPriceRules: TZoneFormPriceRule[] = zone.priceRangeRules.map(\n    (rule, idx) => ({\n      clientId: String(idx + 1),\n      toPrice: rule.toPrice.value,\n      price: rule.price.value,\n    }),\n  )\n  return {\n    priceRulesOrder: indexedPriceRules.map(RM.prop('clientId')),\n    priceRules: indexedPriceRules.reduce((acc, rule) => {\n      acc[rule.clientId] = rule\n      return acc\n    }, {}),\n  }\n}\n\nfunction getWriteVariables(values: TZoneFormValues): InputZoneUpdate {\n  return {\n    name: values.name,\n    enabled: values.enabled,\n    companyBranch: values.branchId,\n    zoneColor: values.zoneColor,\n    geoPolygon: values.geoPolygon,\n    minimalOrderPrice: {\n      value: Number(values.minimalPrice),\n    },\n    priceRangeRules: values.priceRulesOrder.map((clientId, idx) =>\n      normalizePriceRuleToWrite(\n        values.priceRules[clientId],\n        idx === values.priceRulesOrder.length - 1,\n      ),\n    ),\n  }\n}\n\nfunction normalizePriceRuleToWrite(rule: TZoneFormPriceRule, isLast: boolean) {\n  return {\n    price: { value: parseNumber(rule.price!) },\n    toPrice: { value: isLast ? -1 : parseNumber(rule.toPrice!) },\n  }\n}\n","import { OverlayView } from '@react-google-maps/api'\nimport React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { FCompanyBranchFragment } from '../graph/generated'\nimport { gpsToLatLng } from '../helpers/gps'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  branch: FCompanyBranchFragment\n  isActive?: boolean\n}\n\nconst BranchNameStyled = styled.div`\n  ${getColors} font-size: 1.3rem;\n  white-space: nowrap;\n  padding: 0.2rem 0.5rem;\n`\n\nexport const MapCompanyBranchMarker: React.FC<IProps> = ({\n  branch,\n  isActive = true,\n}) => (\n  <OverlayView\n    getPixelPositionOffset={(width, height) => ({\n      x: -(width / 2),\n      y: -(height / 2),\n    })}\n    mapPaneName={OverlayView.MARKER_LAYER}\n    position={gpsToLatLng(branch.gps)}\n  >\n    <BranchNameStyled isActive={isActive}>{branch.name}</BranchNameStyled>\n  </OverlayView>\n)\n\nfunction getColors({ isActive }: { isActive: boolean }) {\n  return css`\n    background-color: ${isActive ? Colors.green : Colors.greyLight};\n    color: ${isActive ? Colors.white : Colors.greyDark};\n  `\n}\n","import { Polygon } from '@react-google-maps/api'\nimport React from 'react'\n\nimport { ZoneTypeEnum } from '../../../graph/generated'\nimport { gpsToLatLng } from '../../../helpers/gps'\n\ninterface IZoneMapAreaProps {\n  points: RoA<GeoPoint>\n  type: ZoneTypeEnum\n  color: string\n  priority: number\n  onFocus?(): void\n}\n\nexport const ZoneMapArea: React.FC<IZoneMapAreaProps> = ({\n  points,\n  type,\n  color,\n  priority,\n  onFocus,\n}) => {\n  const onAreaFocus = React.useCallback(\n    (e: google.maps.PolyMouseEvent) => {\n      if (onFocus) {\n        e.stop()\n        onFocus()\n      }\n    },\n    [onFocus],\n  )\n\n  const getOptions = (): google.maps.PolygonOptions => {\n    if (type === ZoneTypeEnum.Return) {\n      return {\n        fillColor: 'transparent',\n        strokeWeight: 3,\n        strokeColor: color,\n        zIndex: 10000 - priority,\n      }\n    }\n    return {\n      fillColor: color,\n      fillOpacity: 0.3,\n      strokeWeight: 0,\n      zIndex: 5000 - priority,\n    }\n  }\n\n  return (\n    <Polygon\n      path={points.map(gpsToLatLng)}\n      options={getOptions()}\n      editable={false}\n      draggable={false}\n      onDblClick={onAreaFocus}\n    />\n  )\n}\n","import { Polygon } from '@react-google-maps/api'\nimport React from 'react'\n\nimport { ZoneTypeEnum } from '../../../graph/generated'\nimport { gpsToLatLng, latLngToGps } from '../../../helpers/gps'\n\ninterface IProps {\n  type: ZoneTypeEnum\n  color: string\n  initialPoints: RoA<GeoPoint>\n  onChange(points: GeoPoint[]): void\n}\n\nexport const ZoneMapEditableArea: React.FC<IProps> = ({\n  type,\n  color,\n  onChange,\n  initialPoints,\n}) => {\n  const polygonRef = React.useRef<google.maps.Polygon | null>(null)\n  const listenersRef = React.useRef<google.maps.MapsEventListener[]>([])\n\n  const onAreaChange = React.useCallback(() => {\n    if (polygonRef.current) {\n      const path = polygonRef.current.getPath()\n      onChange(path.getArray().map(latLngToGps))\n    }\n  }, [onChange])\n\n  const onLoad = React.useCallback(\n    (polygon: google.maps.Polygon) => {\n      polygonRef.current = polygon\n      const path = polygon.getPath()\n      listenersRef.current.push(\n        path.addListener('set_at', onAreaChange),\n        path.addListener('insert_at', onAreaChange),\n        path.addListener('remove_at', onAreaChange),\n      )\n    },\n    [onAreaChange],\n  )\n\n  const onUnmount = React.useCallback(() => {\n    listenersRef.current.forEach(lis => lis.remove())\n    listenersRef.current.length = 0\n    polygonRef.current = null\n  }, [])\n\n  const initialPointsRef = React.useRef(initialPoints)\n  const initialPath = React.useMemo(\n    () => initialPointsRef.current.map(gpsToLatLng),\n    [],\n  )\n\n  const getOptions = (): google.maps.PolygonOptions => {\n    if (type === ZoneTypeEnum.Return) {\n      return {\n        fillColor: 'transparent',\n        strokeWeight: 5,\n        strokeColor: color,\n        zIndex: 20000,\n      }\n    }\n    return {\n      fillColor: color,\n      fillOpacity: 0.1,\n      strokeWeight: 2,\n      zIndex: 20000,\n    }\n  }\n\n  return (\n    <Polygon\n      path={initialPath}\n      options={getOptions()}\n      editable={true}\n      draggable={true}\n      onDragEnd={onAreaChange}\n      onLoad={onLoad}\n      onUnmount={onUnmount}\n    />\n  )\n}\n","import { QZoneColorsZoneColors, useQZoneColors } from '../../../graph/generated'\nimport { useLoadingCache } from '../../../hooks/useLoadingCache'\n\nconst EMPTY_COLORS = []\n\nexport function useZoneColors() {\n  const { data, loading } = useQZoneColors({}, { fetchPolicy: 'cache-first' })\n  const getColors = useLoadingCache<RoA<QZoneColorsZoneColors>>()\n  return getColors(loading, () => data.zoneColors) || EMPTY_COLORS\n}\n","import { useRoot } from '../../../atoms/RootProvider'\n\nexport function useZoneModel() {\n  const { zone: zoneModel } = useRoot()\n  return zoneModel\n}\n","import { idProp } from '@speedlo/tools'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { useQZoneList } from '../../../graph/generated'\nimport { useLoadingCache } from '../../../hooks/useLoadingCache'\nimport { TZoneInList } from '../zones.types'\n\nexport function useZoneListQuery() {\n  const { zone } = useRoot()\n  const branches = zone.branches.filter(zone.branchFilterPredicate).map(idProp)\n  const skip = branches.length === 0\n\n  const { data, loading } = useQZoneList({ branches }, { skip })\n\n  const getZones = useLoadingCache<Maybe<RoA<TZoneInList>>>(skip)\n  const zones = getZones(loading, () => (skip ? null : data.zones))\n\n  return { zones, loading }\n}\n","import { idPropEq } from '@speedlo/tools'\nimport { useXField, useXFieldState } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React, { useCallback } from 'react'\n\nimport { BaseMap } from '../../../atoms/BaseMap'\nimport { FCompanyBranchFragment } from '../../../graph/generated'\nimport { MapCompanyBranchMarker } from '../../../molecules/MapCompanyBranchMarker'\nimport { Colors } from '../../../styling'\nimport { ZoneMapArea } from '../atoms/ZoneMapArea'\nimport { ZoneMapEditableArea } from '../atoms/ZoneMapEditableArea'\nimport { useZoneColors } from '../hooks/useZoneColors'\nimport { useZoneMapControl } from '../hooks/useZoneMapControl'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { TZoneFormValues, TZoneInList } from '../zones.types'\n\ninterface IProps {\n  zoneId: MaybeID\n}\n\nexport const ZoneMap = observer<IProps>(({ zoneId }) => {\n  const zoneModel = useZoneModel()\n\n  const { isActive, branches, zones } = useZoneMapControl(zoneId)\n  const { routeToZoneEdit } = useZoneRouteControl()\n\n  const renderZoneArea = (zone: TZoneInList) => {\n    if (zone.id === zoneId) {\n      return null\n    }\n\n    return (\n      <ZoneMapArea\n        key={`zone${zone.id}`}\n        type={zone.zoneType.enum}\n        points={zone.geoPolygon}\n        priority={zone.priority}\n        color={\n          isActive(zone.companyBranch.id) && zone.enabled && zoneId === null\n            ? zone.zoneColor.color\n            : Colors.greyMiddle\n        }\n        onFocus={() => {\n          if (isActive(zone.companyBranch.id)) {\n            routeToZoneEdit(zone.id)\n          }\n        }}\n      />\n    )\n  }\n\n  const polygonField = useXField<TZoneFormValues['geoPolygon']>('geoPolygon')\n  const typeField = useXFieldState<TZoneFormValues['type']>('type')\n  const colorField = useXFieldState<TZoneFormValues['zoneColor']>('zoneColor')\n  const zoneColors = useZoneColors()\n\n  const renderEditZone = () => {\n    if (polygonField.value.length === 0) {\n      return null\n    }\n    const zoneColor = zoneColors.find(idPropEq(colorField.value))\n    return (\n      <ZoneMapEditableArea\n        key={`zone${zoneId}`}\n        type={typeField.value}\n        color={zoneColor ? zoneColor.color : ''}\n        initialPoints={polygonField.value}\n        onChange={polygonField.setValue}\n      />\n    )\n  }\n\n  const renderBranchLabel = useCallback(\n    (branch: FCompanyBranchFragment) => (\n      <MapCompanyBranchMarker\n        key={`branch${branch.id}`}\n        branch={branch}\n        isActive={isActive(branch.id)}\n      />\n    ),\n    [isActive],\n  )\n\n  return (\n    <BaseMap model={zoneModel.map}>\n      {zones && zones.map(renderZoneArea)}\n      {zoneId && renderEditZone()}\n      {branches && branches.map(renderBranchLabel)}\n    </BaseMap>\n  )\n})\n","import { useAutorun } from '@speedlo/hooks'\nimport { idPropEq } from '@speedlo/tools'\nimport { getCenter } from 'geolib'\nimport { useAsObservableSource } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneListQuery } from './useZoneListQuery'\n\nexport function useZoneMapControl(zoneId: MaybeID) {\n  const zoneModel = useZoneModel()\n  const { zones } = useZoneListQuery()\n\n  const branches = zoneModel.branches.filter(zoneModel.branchFilterPredicate)\n\n  const isActive = React.useCallback(\n    (companyBranchId: ID) => {\n      return (\n        !zoneModel.hasBranchFilter ||\n        companyBranchId === zoneModel.branchFilterId\n      )\n    },\n    [zoneModel],\n  )\n\n  const source = useAsObservableSource({ zoneId, zones })\n\n  // when editing zone, pan map to branch with that zone\n  useAutorun(() => {\n    if (zoneModel.map.isReady && source.zoneId && source.zones) {\n      const zone = source.zones.find(idPropEq(source.zoneId))\n      if (zone) {\n        const center = getCenter(zone.geoPolygon as GeoPoint[])\n        zoneModel.map.panTo(center as GeoPoint)\n      }\n    }\n  })\n\n  // when branch changes and we are not editing zone, pan to branch gps\n  useAutorun(() => {\n    if (zoneModel.map.isReady && zoneModel.branch && !source.zoneId) {\n      zoneModel.map.panTo(zoneModel.branch.gps)\n    }\n  })\n\n  return { isActive, branches, zones }\n}\n","import { RM } from '@speedlo/tools'\nimport { XFieldName } from '@speedlo/xform'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { FormDropdown } from '../../../components/forms/FormDropdown'\nimport { QZoneColorsZoneColors } from '../../../graph/generated'\nimport { Colors } from '../../../styling'\nimport { useZoneColors } from '../hooks/useZoneColors'\n\ninterface IProps {\n  fieldName: XFieldName\n}\n\nconst ColorOption = styled.div`\n  background-color: ${({ color }: { color: string }) => color};\n  color: ${Colors.white};\n  width: 6rem;\n  padding: 0.4rem 1rem;\n  margin: 0;\n  height: 100%;\n`\n\nconst makeStyles = () => ({\n  option: base => ({\n    ...base,\n    padding: 0,\n    margin: 0,\n  }),\n  menu: base => ({\n    ...base,\n    width: '8rem',\n    maxWidth: '8rem',\n  }),\n})\n\nexport const ZoneColorSelector: React.FC<IProps> = ({ fieldName }) => {\n  const zoneColors = useZoneColors()\n  return (\n    <FormDropdown<QZoneColorsZoneColors>\n      fieldName={fieldName}\n      options={zoneColors}\n      isLoading={zoneColors.length === 0}\n      width={8}\n      styles={makeStyles()}\n      defaultValue={RM.head(zoneColors)}\n      getOptionValue={RM.prop('id')}\n      formatOptionLabel={zoneColor => (\n        <ColorOption color={zoneColor.color}>{zoneColor.code}</ColorOption>\n      )}\n    />\n  )\n}\n","import { t } from '@lingui/macro'\nimport { XFieldName } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { StyledFormInput } from '../../../atoms/FormInputStyled'\nimport { FormDisplayValue } from '../../../components/forms/FormDisplayValue'\nimport { useFormInputProps } from '../../../components/forms/FormInput'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {\n  fieldName: XFieldName\n}\n\nexport const ZoneFormForPrice = observer<IProps, HTMLInputElement>(\n  ({ fieldName }, ref) => {\n    const fieldInputProps = useFormInputProps({\n      fieldName,\n    })()\n\n    return (\n      <>\n        <label className=\"forPriceLabel\" htmlFor={fieldInputProps.id}>\n          {i18n._(\n            /*i18n: Label for input with transport fee used when zone rule applies */ t`for`,\n          )}\n        </label>\n        <StyledFormInput\n          {...fieldInputProps}\n          className=\"forPrice\"\n          ref={ref}\n          inputFullWidth={true}\n        />\n        <FormDisplayValue fieldName=\"currencyCode\" />\n      </>\n    )\n  },\n  { forwardRef: true },\n)\n","import { t } from '@lingui/macro'\nimport { XFieldName } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { StyledFormInput } from '../../../atoms/FormInputStyled'\nimport { FormDisplayValue } from '../../../components/forms/FormDisplayValue'\nimport { useFormInputProps } from '../../../components/forms/FormInput'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {\n  fieldName: XFieldName\n  asInfinity?: boolean\n}\n\nexport const ZoneFormToPrice = observer<IProps, HTMLInputElement>(\n  ({ fieldName, asInfinity = false }, ref) => {\n    const fieldInputProps = useFormInputProps({\n      fieldName,\n    })()\n\n    const inputProps = {\n      ...fieldInputProps,\n      className: 'toPrice',\n      ref,\n    }\n\n    const label = (\n      <label className=\"toPriceLabel\" htmlFor={fieldInputProps.id}>\n        {i18n._(\n          /*i18n: Label for input with upper bound of order price where zone rule is applied */ t`to`,\n        )}\n      </label>\n    )\n\n    if (asInfinity) {\n      return (\n        <>\n          {label}\n          <StyledFormInput\n            {...inputProps}\n            value=\"\"\n            disabled\n            placeholder=\"&infin;\"\n          />\n        </>\n      )\n    }\n\n    return (\n      <>\n        {label}\n        <StyledFormInput {...inputProps} />\n        <FormDisplayValue fieldName=\"currencyCode\" />\n      </>\n    )\n  },\n  { forwardRef: true },\n)\n","import { XFieldPath } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ZoneFormForPrice } from './ZoneFormForPrice'\nimport { ZoneFormToPrice } from './ZoneFormToPrice'\n\ninterface IProps {\n  fieldPath: XFieldPath\n  shouldFocus: boolean\n  isLastRule: boolean\n}\n\nexport const ZoneFormRuleInputs = observer<IProps>(\n  ({ fieldPath, shouldFocus, isLastRule }) => {\n    const toPriceRef = React.useRef<HTMLInputElement>(null)\n    const forPriceRef = React.useRef<HTMLInputElement>(null)\n\n    React.useEffect(() => {\n      if (!shouldFocus) {\n        return\n      }\n      if (toPriceRef.current && !isLastRule) {\n        toPriceRef.current.focus()\n      } else if (forPriceRef.current) {\n        forPriceRef.current.focus()\n      }\n    }, [shouldFocus, isLastRule])\n\n    return (\n      <>\n        <div className=\"toPriceField\">\n          <div className=\"verticalLine\"></div>\n          <ZoneFormToPrice\n            fieldName={[...fieldPath, 'toPrice']}\n            ref={toPriceRef}\n            asInfinity={isLastRule}\n          />\n        </div>\n        <div className=\"forPriceField\">\n          <ZoneFormForPrice\n            fieldName={[...fieldPath, 'price']}\n            ref={forPriceRef}\n          />\n        </div>\n      </>\n    )\n  },\n)\n","import { AddCircle } from '@material-ui/icons'\nimport { RM } from '@speedlo/tools'\nimport { useXField, useXFieldState, useXFormState } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React, { Fragment } from 'react'\nimport styled from 'styled-components'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Colors, Spacing } from '../../../styling'\nimport { ZoneFormRuleInputs } from '../atoms/ZoneFormRuleInputs'\nimport { ZoneFormToPrice } from '../atoms/ZoneFormToPrice'\nimport { TZoneFormValues } from '../zones.types'\n\ninterface IProps {}\n\nconst StyledZoneFormPriceRules = styled.div`\n  display: grid;\n\n  grid-template-columns: 4.5rem 7rem 8rem 4.5rem;\n\n  & input {\n    width: 4rem;\n    z-index: 1;\n  }\n  & label {\n    margin: ${Spacing.Middle};\n  }\n\n  & .minimalPriceField {\n    grid-column: 2;\n    display: flex;\n    align-items: center;\n  }\n  & .minimalPriceField span {\n    margin: ${Spacing.Middle};\n  }\n  & .addRule {\n    grid-column: 1;\n    justify-self: start;\n    align-self: center;\n    margin-bottom: 3rem;\n  }\n  & .toPriceField {\n    grid-column: 2;\n    display: flex;\n    align-items: center;\n    align-self: end;\n    position: relative;\n  }\n  & .toPriceField span {\n    margin: ${Spacing.Middle};\n  }\n  & .forPriceField {\n    grid-column: 3;\n    display: flex;\n    align-items: center;\n    align-self: center;\n    margin-bottom: 3rem;\n  }\n  & .forPriceField input {\n    color: ${Colors.blue};\n    width: 4rem;\n  }\n  & .forPriceField span {\n    margin: ${Spacing.Middle};\n  }\n  & .removeRule {\n    height: 5rem;\n    margin-bottom: 3rem;\n    grid-column: 4;\n    display: flex;\n    align-items: center;\n    justify-self: end;\n    align-self: center;\n  }\n  & .verticalLine {\n    width: 3px;\n    height: 8rem;\n    background: ${Colors.greyMiddle};\n    position: absolute;\n    top: -112px;\n    left: 62px;\n  }\n`\n\nexport const ZoneFormPriceRules: React.FC<IProps> = () => {\n  const rulesOrderField = useXField<TZoneFormValues['priceRulesOrder']>(\n    'priceRulesOrder',\n  )\n  const rulesField = useXFieldState<TZoneFormValues['priceRules']>('priceRules')\n  const state = useXFormState()\n\n  const [focusId, setFocusId] = React.useState<MaybeID>(null)\n\n  // artificial ID for a dynamic changes of array\n  const idCounter = React.useRef(rulesOrderField.value.length)\n\n  React.useEffect(() => {\n    if (idCounter.current < rulesOrderField.value.length) {\n      idCounter.current = rulesOrderField.value.length\n    }\n  }, [rulesOrderField.value])\n\n  const addRule = (afterRule: ID) => {\n    const idx = rulesOrderField.value.findIndex(RM.equals(afterRule))\n    const ruleId = String(++idCounter.current)\n    rulesOrderField.value.splice(idx, 0, ruleId)\n    rulesField.value[ruleId] = {\n      clientId: String(ruleId),\n      toPrice: null,\n      price: null,\n    }\n    setFocusId(ruleId)\n  }\n\n  const removeRule = (rule: ID) => {\n    const idx = rulesOrderField.value.findIndex(RM.equals(rule))\n    rulesOrderField.value.splice(idx, 1)\n    delete rulesField.value[rule]\n  }\n\n  return useObserver(() => (\n    <StyledZoneFormPriceRules>\n      <div className=\"minimalPriceField\">\n        <ZoneFormToPrice fieldName={['minimalPrice']} />\n      </div>\n      {rulesOrderField.value.map((ruleId, idx, rules) => (\n        <Fragment key={ruleId}>\n          <TouchButton\n            className=\"addRule\"\n            disabled={state.isSubmitting}\n            width={Spacing.ButtonHeight + Spacing.DefaultSizeUnit}\n            height={Spacing.ButtonHeight + Spacing.DefaultSizeUnit}\n            onClick={() => addRule(ruleId)}\n            icon={AddCircle}\n            title={i18n.t`Add another range`}\n          />\n          <ZoneFormRuleInputs\n            fieldPath={['priceRules', ruleId]}\n            shouldFocus={ruleId === focusId}\n            isLastRule={idx === rules.length - 1}\n          />\n          <div className=\"removeRule\">\n            <TouchButtonDelete\n              onDelete={() => removeRule(ruleId)}\n              title={i18n.t`Remove price range`}\n              disabled={rules.length <= 1}\n            />\n          </div>\n        </Fragment>\n      ))}\n    </StyledZoneFormPriceRules>\n  ))\n}\n","import { Trans } from '@lingui/macro'\nimport { ColorLens, Label } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Headline } from '../../../atoms/Headline'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FormInput } from '../../../components/forms/FormInput'\nimport { FormCheckbox } from '../../../components/forms/FormInputCheckbox'\nimport { ZoneTypeEnum } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { Colors, Spacing } from '../../../styling'\nimport { ZoneColorSelector } from '../molecules/ZoneColorSelector'\nimport { ZoneFormPriceRules } from '../molecules/ZoneFormPriceRules'\n\ninterface IProps {\n  type: ZoneTypeEnum\n}\n\nconst StyledZoneFormContent = styled.div`\n  margin: ${Spacing.Middle};\n  color: ${Colors.black};\n\n  .description {\n    color: ${Colors.greyDark};\n    padding-bottom: 0.2rem;\n  }\n`\n\nexport const ZoneFormContent: React.FC<IProps> = ({ type }) => (\n  <StyledZoneFormContent>\n    <IconLine icon={Label}>\n      <FormInput fieldName=\"name\" />\n    </IconLine>\n\n    <IconLine icon={ColorLens}>\n      <ZoneColorSelector fieldName=\"zoneColor\" />\n    </IconLine>\n\n    <FormCheckbox\n      fieldName=\"enabled\"\n      label={i18n.t`Is active`.toLocaleLowerCase()}\n    />\n\n    {type === ZoneTypeEnum.Area && (\n      <>\n        <Trans>\n          <Headline margin=\"0.5rem 0 0 0\">Delivery cost</Headline>\n          <div className=\"description\">according order total cost</div>\n        </Trans>\n\n        <ZoneFormPriceRules />\n      </>\n    )}\n  </StyledZoneFormContent>\n)\n","import { Trans } from '@lingui/macro'\nimport { useXFormState } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { FormSubmitButton } from '../../../components/forms/FormSubmitButton'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\n\ninterface IProps {}\n\nexport const ZoneFormControls: React.FC<IProps> = () => {\n  const state = useXFormState()\n  const { routeToZoneList } = useZoneRouteControl()\n  return useObserver(() => (\n    <FlexRowSingle>\n      <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n        <TouchButton\n          color={Colors.greyMiddle}\n          text={i18n.t`Back`}\n          onClick={routeToZoneList}\n          disabled={state.isSubmitting}\n        />\n      </FlexColumn>\n      <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n        <CanMutate mutationName=\"updateZone\">\n          <FormSubmitButton>\n            <Trans>Save zone</Trans>\n          </FormSubmitButton>\n        </CanMutate>\n      </FlexColumn>\n    </FlexRowSingle>\n  ))\n}\n","import { useXFieldState, useXFormState } from '@speedlo/xform'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport Goodbye from 'react-goodbye'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { ConfirmDialog } from '../../../atoms/ConfirmDialog'\nimport { useMZoneDelete } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Spacing } from '../../../styling'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { ZoneFormContent } from '../molecules/ZoneFormContent'\nimport { ZoneFormControls } from '../molecules/ZoneFormControls'\nimport { TZoneFormValues } from '../zones.types'\n\nconst DeleteButtonContainer = styled.div`\n  width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  margin-top: ${Spacing.Middle};\n`\n\ninterface IProps {\n  zoneId: MaybeID\n}\n\nexport const ZoneFormPanel = observer<IProps>(({ zoneId }) => {\n  const { routeToZoneList } = useZoneRouteControl()\n\n  const [deleteZone] = useMZoneDelete()\n\n  const onDelete = React.useCallback(async () => {\n    if (zoneId) {\n      await deleteZone({ zoneId })\n    }\n    routeToZoneList()\n  }, [deleteZone, routeToZoneList, zoneId])\n\n  const state = useXFormState<TZoneFormValues>()\n\n  const { value: type } = useXFieldState('type')\n\n  return (\n    <Card padding={0}>\n      <ZoneFormControls />\n      <ZoneFormContent type={type} />\n\n      <CanMutate mutationName=\"destroyZone\">\n        <DeleteButtonContainer>\n          <TouchButtonDelete\n            disabled={state.isSubmitting}\n            confirmText={i18n.t`Remove zone ${state.values.name}?`}\n            onDelete={onDelete}\n          />\n        </DeleteButtonContainer>\n      </CanMutate>\n\n      <Goodbye when={state.isDirty}>\n        {({ isShow, handleOk, handleCancel }) => (\n          <ConfirmDialog\n            isShow={isShow}\n            confirmText={i18n.t`Do you want to cancel changes for the zone?`}\n            onConfirm={handleOk}\n            onCancel={handleCancel}\n          />\n        )}\n      </Goodbye>\n    </Card>\n  )\n})\n","import { observer } from 'mobx-react-lite'\n\nimport { useRoot } from './RootProvider'\n\nexport const UserHasMultipleBranches = observer(({ children }) => {\n  const { user } = useRoot()\n  return user.hasSingleBranch ? null : (children as any)\n})\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { ZoneTypeEnum } from '../../../graph/generated'\nimport { Colors } from '../../../styling'\n\ninterface IProps {\n  type: ZoneTypeEnum\n}\n\nconst StyledZoneListSection = styled.p`\n  color: ${Colors.greyMiddle};\n`\n\nexport const ZoneListSection: React.FC<IProps> = ({ type }) => {\n  if (type === ZoneTypeEnum.Return) {\n    return (\n      <StyledZoneListSection>\n        <Trans>\n          Notification will be shown when driver enters one of these zones.\n        </Trans>\n      </StyledZoneListSection>\n    )\n  }\n  return null\n}\n","import { AddCircle } from '@material-ui/icons'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useMZoneCreate, ZoneTypeEnum } from '../../../graph/generated'\nimport { generatePolygon } from '../../../helpers/gps'\nimport { useSnackBar } from '../../../hooks/useSnackBar'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\n\ninterface IProps {\n  type: ZoneTypeEnum\n}\n\nexport const CreateZoneButton = observer<IProps>(({ type }) => {\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n\n  const [createZone] = useMZoneCreate()\n  const { enqueueSuccess } = useSnackBar()\n\n  const onClick = async () => {\n    if (!zoneModel.branch) {\n      return\n    }\n    const result = await createZone({\n      type,\n      branchId: zoneModel.branch.id,\n      points: generatePolygon({\n        center: zoneModel.branch.gps,\n        metersRadius: 1000,\n        pointsCount: 5,\n      }),\n    })\n    if (result) {\n      enqueueSuccess(i18n.t`Zone has been created`)\n      routeToZoneEdit(result.createZone.id)\n    }\n  }\n\n  const createTextByType = {\n    [ZoneTypeEnum.Area]: i18n.t`Create delivery zone for branch`,\n    [ZoneTypeEnum.Return]: i18n.t`Create return zone for branch`,\n  }\n\n  const colorByType = {\n    [ZoneTypeEnum.Area]: Colors.turquoise,\n    [ZoneTypeEnum.Return]: Colors.greyMiddle,\n  }\n\n  const text = zoneModel.hasBranchFilter\n    ? createTextByType[type]\n    : i18n.t`Select branch to create zone`\n\n  return (\n    <TouchButton\n      text={text}\n      onClick={onClick}\n      disabled={!zoneModel.hasBranchFilter}\n      color={colorByType[type]}\n      height={Spacing.ButtonHeight + Spacing.DefaultSizeUnit}\n      textNextToIcon\n      icon={AddCircle}\n    />\n  )\n})\n","import { Edit } from '@material-ui/icons'\nimport Color from 'color'\nimport React from 'react'\nimport { SortableElement } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Card } from '../../../atoms/Card'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { SizerButton } from '../../../atoms/SizerButton'\nimport {\n  FCompanyBranchFragment,\n  FZoneFragment,\n  ZoneTypeEnum,\n} from '../../../graph/generated'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\n\ninterface IProps {\n  type: ZoneTypeEnum\n  zone: FZoneFragment\n  branch: FCompanyBranchFragment\n  onEdit(): void\n}\n\ninterface IStyledProps {\n  type: ZoneTypeEnum\n  color: string\n}\n\nconst StyledZoneListCard = styled(Card)<IStyledProps>`\n  background: ${getBackgroundColor};\n`\n\nfunction getBackgroundColor({ color, type }: IStyledProps) {\n  if (type === ZoneTypeEnum.Area) {\n    return ''\n  }\n  const baseColor = Color(color)\n    .alpha(0.8)\n    .darken(0.2)\n  const lighterColor = baseColor.lighten(0.4)\n  return `repeating-linear-gradient(135deg, ${baseColor}, ${baseColor} 10px, ${lighterColor} 10px, ${lighterColor} 20px)`\n}\n\nconst ZoneNameStyled = styled.div`\n  font-size: 1.125rem;\n  margin-top: 0.2rem;\n`\n\nconst ZoneDescriptionStyled = styled.div`\n  font-size: 0.875rem;\n`\nconst ZoneFlexRowStyled = styled(FlexRowSingle)`\n  height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n`\n\nexport const ZoneListCard = SortableElement(\n  ({ zone, branch, type, onEdit }: IProps) => (\n    <StyledZoneListCard\n      key={zone.id}\n      type={type}\n      padding={0}\n      color={zone.enabled ? zone.zoneColor.color : Colors.greyMiddle}\n      onClick={onEdit}\n    >\n      <ZoneFlexRowStyled>\n        <FlexColumn fixedWidth padding=\"0 0.5rem 0 0\">\n          <SizerButton>\n            <TouchButton icon={Edit} />\n          </SizerButton>\n        </FlexColumn>\n        <FlexColumn widthGrowIndex={1}>\n          <ZoneNameStyled>\n            {zone.name}\n            {` [P${zone.priority}]`}\n          </ZoneNameStyled>\n          <ZoneDescriptionStyled>{branch.name}</ZoneDescriptionStyled>\n        </FlexColumn>\n        <FlexColumn padding=\"0\">\n          <DragHandle />\n        </FlexColumn>\n      </ZoneFlexRowStyled>\n    </StyledZoneListCard>\n  ),\n)\n","import React from 'react'\nimport { SortableContainer, SortEndHandler } from 'react-sortable-hoc'\nimport styled from 'styled-components/macro'\n\nimport { ZoneTypeEnum } from '../../../graph/generated'\n\ninterface IProps {\n  type: ZoneTypeEnum\n  children: ReactNodes\n  onSort: SortEndHandler\n}\n\nconst ZoneListContainerStyled = styled.div`\n  margin-top: 0.5rem;\n  cursor: arrow;\n`\n\nconst SortableZoneList = SortableContainer(ZoneListContainerStyled)\n\nexport const ZoneListCardGroup: React.FC<IProps> = ({\n  type,\n  onSort,\n  children,\n}) => {\n  return (\n    <SortableZoneList\n      onSortEnd={onSort}\n      useDragHandle\n      lockAxis=\"y\"\n      lockToContainerEdges\n    >\n      {children}\n    </SortableZoneList>\n  )\n}\n","import { RM } from '@speedlo/tools'\nimport React from 'react'\nimport { SortEndHandler } from 'react-sortable-hoc'\n\nimport { useMZoneUpdatePriority, ZoneTypeEnum } from '../../../graph/generated'\nimport { TZoneInList } from '../zones.types'\nimport { useZoneListQuery } from './useZoneListQuery'\n\nconst sortZones = RM.sortWith<TZoneInList>([\n  RM.ascend(RM.path(['companyBranch', 'name'])),\n  RM.descend(RM.prop('priority')),\n])\n\nconst groupByBranch = RM.groupBy((zone: TZoneInList) => zone.companyBranch.id)\nconst isZoneType = RM.pathEq(['zoneType', 'enum'])\n\nexport function useZoneListControl(type: ZoneTypeEnum) {\n  const { zones, loading } = useZoneListQuery()\n\n  const zonesByBranch = React.useMemo(() => {\n    if (!zones) {\n      return null\n    }\n    return RM.mapObjIndexed(\n      sortZones,\n      groupByBranch(zones.filter(isZoneType(type))),\n    )\n  }, [type, zones])\n\n  const [updatePriority] = useMZoneUpdatePriority()\n\n  const onZoneSort: SortEndHandler = React.useCallback(\n    ({ oldIndex, newIndex, collection }) => {\n      if (!zonesByBranch) {\n        return\n      }\n      const group = zonesByBranch[collection]\n      const zone = group[oldIndex]\n\n      const offset = oldIndex - newIndex\n\n      updatePriority(\n        {\n          zoneId: zone.id,\n          offset,\n        },\n        {\n          optimisticResponse: {\n            __typename: 'Mutation',\n            updateZonePriority: [\n              {\n                __typename: 'Zone',\n                id: zone.id,\n                priority: zone.priority + offset,\n              },\n            ],\n          },\n        },\n      )\n    },\n    [zonesByBranch, updatePriority],\n  )\n\n  return { isLoading: loading, zonesByBranch, onZoneSort }\n}\n","import { Trans } from '@lingui/macro'\nimport { idPropEq } from '@speedlo/tools'\nimport { observer } from 'mobx-react-lite'\nimport React, { Fragment } from 'react'\nimport { BulletList } from 'react-content-loader'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { ZoneTypeEnum } from '../../../graph/generated'\nimport { ZoneListCard } from '../atoms/ZoneListCard'\nimport { ZoneListCardGroup } from '../atoms/ZoneListCardGroup'\nimport { useZoneListControl } from '../hooks/useZoneListControl'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { TBranch, TZoneInList } from '../zones.types'\n\ninterface IProps {\n  type: ZoneTypeEnum\n}\n\nexport const ZoneList = observer<IProps>(({ type }) => {\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n  const { isLoading, zonesByBranch, onZoneSort } = useZoneListControl(type)\n\n  if (isLoading === null) {\n    return <BulletList primaryOpacity={0.2} secondaryOpacity={0.2} />\n  }\n\n  if (zonesByBranch === null) {\n    return (\n      <CardListTitle>\n        <Trans>Select brand to see its zones</Trans>\n      </CardListTitle>\n    )\n  }\n\n  const branches = zoneModel.root.user.filterBranches(\n    zoneModel.branchFilterPredicate,\n  )\n\n  const renderZone = (zone: TZoneInList, idx: number) => (\n    <ZoneListCard\n      key={zone.id}\n      type={type}\n      zone={zone}\n      branch={branches.find(idPropEq(zone.companyBranch.id))!}\n      onEdit={() => routeToZoneEdit(zone.id)}\n      index={idx}\n      collection={zone.companyBranch.id}\n    />\n  )\n\n  const renderBranch = (branch: TBranch, branchZones: RoA<TZoneInList>) => (\n    <Fragment key={branch.id}>\n      <CardListTitle>{branch.name}</CardListTitle>\n      {branchZones.map(renderZone)}\n    </Fragment>\n  )\n\n  return (\n    <ZoneListCardGroup type={type} onSort={onZoneSort}>\n      {branches.map(branch => {\n        const branchZones = zonesByBranch[branch.id]\n        return branchZones ? renderBranch(branch, branchZones) : null\n      })}\n    </ZoneListCardGroup>\n  )\n})\n","import { autorun } from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { FCompanyBranchBrand } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { CompanyBranchDropdown } from '../../../molecules/CompanyBranchDropdown'\nimport { CompanyBrandDropdown } from '../../../molecules/CompanyBrandDropdown'\n\nexport const ZoneFilter: React.FC = observer(() => {\n  const { user, zone } = useRoot()\n  const branches = user.branches\n\n  const getBrandBranches = React.useCallback(\n    (brand: Maybe<FCompanyBranchBrand>) =>\n      brand === null\n        ? []\n        : user.branches.filter(RM.pathEq(['brand', 'id'], brand.id)),\n    [user.branches],\n  )\n\n  React.useEffect(\n    () =>\n      autorun(() => {\n        if (branches.length === 1) {\n          zone.setBranchFilter(RM.head(branches)!)\n        }\n      }),\n    [branches, zone],\n  )\n\n  // no filter is shown for less than 1 branch available\n  if (branches.length <= 1) {\n    return null\n  }\n\n  const singleBrand = user.brands.length === 1 ? RM.head(user.brands)! : null\n  if (singleBrand) {\n    zone.setBrandFilter(singleBrand, getBrandBranches(zone.brand))\n  }\n\n  return (\n    <>\n      {!singleBrand && (\n        <CompanyBrandDropdown\n          selectedBrand={zone.brand}\n          onSelection={brand => {\n            if (brand === null) {\n              zone.clearBrandFilter()\n            } else {\n              zone.setBrandFilter(brand, getBrandBranches(brand))\n            }\n          }}\n        />\n      )}\n      {!singleBrand && <VerticalGap />}\n      <CompanyBranchDropdown\n        branches={getBrandBranches(zone.brand)}\n        selectedBranch={zone.branch}\n        autoFocus={Boolean(singleBrand)}\n        formatOptionLabel={RM.prop('name')}\n        isClearable={true}\n        onSingleSelection={branch => {\n          if (!branch) {\n            zone.clearBranchFilter()\n          } else {\n            zone.setBranchFilter(branch)\n          }\n        }}\n      />\n    </>\n  )\n})\n","import { Trans } from '@lingui/react'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { UserHasMultipleBranches } from '../../../atoms/UserHasMultipleBranches'\nimport { ZoneTypeEnum } from '../../../graph/generated'\nimport { useAutorunWhenSingleBranch } from '../../../hooks/useAutorunWhenSingleBranch'\nimport { ZoneListSection } from '../atoms/ZoneListSection'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { CreateZoneButton } from '../molecules/CreateZoneButton'\nimport { ZoneList } from '../molecules/ZoneList'\nimport { ZoneFilter } from './ZoneFilter'\n\nconst StyledZoneMenuPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n\n  & div.header {\n    flex: 0 0 auto;\n  }\n\n  & div.zone-list {\n    flex: 1 1 0;\n  }\n\n  & h3 {\n    margin-top: 6rem;\n  }\n`\n\nexport const ZoneMenuPanel = React.memo(() => {\n  const zoneModel = useZoneModel()\n\n  useAutorunWhenSingleBranch(branch => {\n    zoneModel.setBranchFilter(branch)\n  })\n\n  return useObserver(() => (\n    <StyledZoneMenuPanel>\n      <div className=\"header\">\n        <UserHasMultipleBranches>\n          <Card>\n            <ZoneFilter />\n          </Card>\n        </UserHasMultipleBranches>\n      </div>\n\n      <div className=\"zone-list\">\n        {zoneModel.zoneTypes.map((type, idx) => (\n          <div className={`list${idx}`}>\n            {type === ZoneTypeEnum.Return && (\n              <h3>\n                <Trans>Service zones</Trans>\n              </h3>\n            )}\n            <CanMutate mutationName=\"createZone\">\n              <CreateZoneButton type={type} />\n            </CanMutate>\n            <ZoneListSection type={type} />\n\n            <ZoneList type={type} />\n          </div>\n        ))}\n      </div>\n    </StyledZoneMenuPanel>\n  ))\n})\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport { i18n } from '../../../i18n'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { PageLayoutResponsive } from '../../../molecules/PageLayoutResponsive'\nimport { ROUTE_SETTINGS } from '../../settings/settings.routes'\nimport { ZoneFormLoader } from '../molecules/ZoneFormLoader'\nimport { ZoneMap } from '../molecules/ZoneMap'\nimport { ZoneFormPanel } from '../organisms/ZoneFormPanel'\nimport { ZoneMenuPanel } from '../organisms/ZoneMenuPanel'\n\ninterface IProps extends RouteComponentProps<{ zoneId?: ID }> {}\n\nexport const ZonesOverviewPage: React.FC<IProps> = ({ match }) => {\n  const zoneId = match.params.zoneId || null\n  const isEditing = Boolean(zoneId)\n  return (\n    <PageLayoutResponsive\n      pageTitle={i18n.t`Delivery zones`}\n      backRoute={ROUTE_SETTINGS}\n      useBackButton\n    >\n      <ZoneFormLoader zoneId={zoneId}>\n        <PageLayoutFullHeightItem\n          widthInColumns={6}\n          column={10}\n          rowInMobile={2}\n          withScrollArea={true}\n        >\n          {isEditing ? <ZoneFormPanel zoneId={zoneId} /> : <ZoneMenuPanel />}\n        </PageLayoutFullHeightItem>\n        <PageLayoutFullHeightItem\n          widthInColumns={10}\n          rowInMobile={1}\n          forcePercentHeightInMobile={60}\n        >\n          <ZoneMap zoneId={zoneId} />\n        </PageLayoutFullHeightItem>\n      </ZoneFormLoader>\n    </PageLayoutResponsive>\n  )\n}\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { ROUTE_SETTINGS_ZONES } from '../../settings/settings.routes'\nimport { ZonesOverviewPage } from '../pages/ZonesOverviewPage'\n\ninterface IProps {}\n\nexport const ZonesRouting: React.FC<IProps> = () => (\n  <Switch>\n    <Route\n      path={`${ROUTE_SETTINGS_ZONES}/:zoneId?`}\n      component={ZonesOverviewPage}\n    />\n    <Route component={NotFoundPage} />\n  </Switch>\n)\n\nexport default ZonesRouting\n"],"sourceRoot":""}