{"version":3,"sources":["molecules/PageLayoutFullHeightItem.tsx","atoms/FlexRowSingle.tsx","atoms/VerticalGap.tsx","atoms/ScrollArea.tsx","atoms/BaseMap.tsx","atoms/CardListTitle.tsx","atoms/DragHandle.tsx","atoms/ConfirmDialog.tsx","atoms/FormInputSelect.tsx","segments/zones/hooks/useZoneId.ts","segments/zones/hooks/useZoneRouteControl.tsx","segments/zones/atoms/ZonePriceInput.tsx","segments/zones/molecules/ZoneColorSelector.tsx","segments/zones/atoms/ZonePlaceholderInput.tsx","segments/zones/molecules/ZoneFormPriceRange.tsx","segments/zones/molecules/ZoneFormContent.tsx","segments/zones/molecules/ZoneFormControls.tsx","segments/zones/organisms/ZoneListLoader.graphql.ts","segments/zones/organisms/ZoneListLoader.tsx","segments/zones/organisms/ZoneFormPanel.tsx","molecules/MapCompanyBranchMarker.tsx","segments/zones/atoms/ZoneMapArea.tsx","segments/zones/atoms/ZoneMapEditableArea.tsx","segments/zones/hooks/useZoneModel.ts","segments/zones/organisms/ZoneMapControl.tsx","segments/zones/molecules/CreateZoneButton.tsx","segments/zones/atoms/ZoneListCard.tsx","segments/zones/molecules/ZoneList.tsx","segments/zones/organisms/ZoneListControl.tsx","segments/zones/molecules/ZoneFIlterBranch.tsx","segments/zones/molecules/ZoneFilterBrand.tsx","segments/zones/organisms/ZoneFilter.tsx","segments/zones/organisms/ZoneMenuPanel.tsx","segments/zones/pages/ZonePageLayout.tsx","segments/zones/routes/ZoneMenuRoutes.tsx"],"names":["__webpack_require__","d","__webpack_exports__","PageLayoutFullHeightItem","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","styled_components__WEBPACK_IMPORTED_MODULE_1__","_atoms_ScrollArea__WEBPACK_IMPORTED_MODULE_2__","_styling__WEBPACK_IMPORTED_MODULE_3__","FullHeightDiv","styled","div","withConfig","displayName","componentId","props","undefined","widthInColumns","Spacing","LayoutGridCellMargin","column","row","FullHeightDivStyled","_ref","children","_ref$row","_ref$column","_ref$widthInColumns","_ref$withScrollArea","withScrollArea","scrollAreaId","a","createElement","id","FlexRowSingle","_ref$justify","justify","VerticalGap","_ref$size","size","_ref$sizeUnit","sizeUnit","concat","ScrollArea","MapContainerStyled","Radiuses","Card","BaseMapContainer","withGoogleMap","react__WEBPACK_IMPORTED_MODULE_8___default","Fragment","mapModelContext","React","createContext","mapContext","GoogleMapProvider","context","_this","Object","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","map","MAP","Provider","value","PureComponent","contextTypes","object","BaseMap","_ref2","model","options","streetViewControl","mapTypeControl","fullscreenControl","containerElement","mapElement","style","height","mobx_react__WEBPACK_IMPORTED_MODULE_6__","react_google_maps__WEBPACK_IMPORTED_MODULE_9__","ref","setMapRef","zoom","center","onCenterChanged","updatePosition","onZoomChanged","updateZoom","useGoogleMap","useContext","Error","CardListTitle","styled_components__WEBPACK_IMPORTED_MODULE_0__","_styling__WEBPACK_IMPORTED_MODULE_1__","h2","Colors","greyLight","DragHandle","react_sortable_hoc__WEBPACK_IMPORTED_MODULE_1__","styled_components__WEBPACK_IMPORTED_MODULE_2__","_Icon__WEBPACK_IMPORTED_MODULE_3__","DragHandleContainerStyled","SortableHandle","iconName","ConfirmDialog","useEffect","isShow","window","confirm","confirmText","onConfirm","onCancel","FormInputSelect","_React$Component","_getPrototypeOf2","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_len","arguments","length","args","Array","_key","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","apply","validate","isRequired","_i18n__WEBPACK_IMPORTED_MODULE_10__","_","0","validatioName","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","key","fieldApi","_this$props","isMulti","getOptionValue","defaultValue","selection","isSelected","isArray","item","includes","RM","F","filter","onChange","selectedOptions","setValue","find","option","_this2","_this$props2","field","_this$props2$fieldIsP","fieldIsPure","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_7___default","react_form__WEBPACK_IMPORTED_MODULE_8__","pure","_SelectControl__WEBPACK_IMPORTED_MODULE_11__","assign","getControlProps","onFocus","setTouched","styles","control","base","Boolean","error","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","borderColor","Component","defaultProps","getItemId","prop","useZoneId","useRouterContext","match","params","zoneId","useZoneRouteControl","_useRoot","useRoot","user","zoneModel","zone","history","getRouteToZone","routeToZoneEdit","editZoneId","panToZone","canQuery","push","routeToZoneList","LabelStyled","FormInputTextBoxStyled","FormInputTextBox","FormInputTextBoxDeliveryStyled","blue","DeliveryContainer","PriceRangeContainer","VerticalLine","validatePrice","trim","Number","isNaN","parseFloat","i18n","ZonePriceInput","forwardRef","label","isDeliveryPrice","_ref$autoFocus","autoFocus","react_default","ColorOption","color","white","QueryZoneColors","buildQuery","ZoneColorsQuery","ZoneColorSelector","_ref2$field","render","_ref3","zoneColors","toConsumableArray","width","objectSpread","padding","margin","menu","maxWidth","head","formatOptionLabel","zoneColor","code","FormInputForPlaceholderStyled","FormInputStyled","Container","ZonePlaceholderInput","display","ZonePlaceholderInput_LabelStyled","disabled","placeholder","AddButtonContainer","RemoveButtonContainer","ZoneFormPriceRange","values","idx","react","ZonePlaceholderInput_ZonePlaceholderInput","TouchButtonDelete","onDelete","removeValue","es","formApi","TouchButton","submitting","ButtonHeight","DefaultSizeUnit","onClick","addValue","price","toPrice","ZoneFormContentStyled","Middle","black","DescriptionUnderHeadline","greyDark","ZoneFormContent","IconLine","icon","validateIsRequired","ZoneColorSelector_ZoneColorSelector","FormInputCheckbox","name","toLocaleLowerCase","_lingui_react","components","Headline","component","ZoneFormControls","isSubmitting","isModified","onGoBack","onSave","FlexColumn","widthGrowIndex","greyMiddle","text","CanMutate","mutationName","green","ZonesQuery","gql","_templateObject","FZoneFragmentDoc","QueryZones","ZoneListContext","ZoneListLoader","observer","branches","branchFilterPredicate","fetchPolicy","variables","branchesId","renderLoading","zones","loading","useZoneList","DeleteButtonContainer","ZoneFormPanel","zoneList","_useState","useState","_useState2","slicedToArray","setModified","formApiRef","useRef","_useSnackBar","useSnackBar","enqueueError","enqueueSuccess","_useMZoneUpdate","useMZoneUpdate","zoneUpdate","onSubmit","useCallback","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","getZoneVariables","sent","stop","_x","_callee2","_context2","destroyZone","useDisposable","reaction","currentZonePoints","propEq","clearZonePoints","defaultValues","formState","logDebug","current","ZoneFormControls_ZoneFormControls","submitForm","ZoneFormContent_ZoneFormContent","index_es","when","handleOk","handleCancel","Loading","BranchNameStyled","isActive","css","MapCompanyBranchMarker","branch","_ref$isActive","lib","getPixelPositionOffset","x","y","mapPaneName","OverlayView","MARKER_LAYER","position","gpsToLatLng","gps","ZoneMapArea","onAreaFocus","e","points","priority","defaultPath","fillColor","fillOpacity","strokeWeight","zIndex","editable","draggable","onDblClick","ZoneMapEditableArea","polygonRef","onAreaChange","path","getPath","getArray","latLngToGps","listeners","addListener","onClear","forEach","lis","remove","onDragEnd","useZoneModel","ZoneMapControl","companyBranchId","hasBranchFilter","branchFilterId","renderBranchLabel","MapCompanyBranchMarker_MapCompanyBranchMarker","areaProps","geoPolygon","companyBranch","enabled","ZoneMapEditableArea_ZoneMapEditableArea","updateZonePoints","ZoneMapArea_ZoneMapArea","CreateZoneButton","createZone","turquoise","textNextToIcon","ZoneNameStyled","ZoneDescriptionStyled","ZoneFlexRowStyled","ZoneListCard","SortableElement","onEdit","fixedWidth","SizerButton","ZoneListContainerStyled","SortableContainer","sortZones","R","groupByBranch","ZoneList","output","onSortEnd","onZoneEdit","renderZone","index","collection","sorted","oldIndex","newIndex","changeZonePriority","grouped","branchZones","renderBranch","useDragHandle","lockAxis","ZoneListControl","react_content_loader_es","primaryOpacity","secondaryOpacity","brand","ZoneList_ZoneList","zoneFilterPredicate","root","filterBranches","ZoneFilterBranch","selectedBranch","onSelection","CompanyBranchDropdown","onSingleSelection","isClearable","ZoneFilterBrand","brands","selectedBrand","SelectControl","getOptionLabel","isSearchable","ZoneFilter","getBrandBranches","pathEq","autorun","setBranchFilter","singleBrand","setBrandFilter","ZoneFilterBrand_ZoneFilterBrand","clearBrandFilter","ZoneFIlterBranch_ZoneFilterBranch","clearBranchFilter","ZoneMenuContainer","FixedHeaderContainer","ScrollAreaContainer","ZoneMenuPanel","ZoneListControl_ZoneListControl","ZonePageLayout","isEditing","PageLayout","pageTitle","useBackButton","backRoute","ZoneFormPanel_ZoneFormPanel","ZoneMenuPanel_ZoneMenuPanel","ZoneMapControl_ZoneMapControl","ZoneMenuRoutes_ZoneMenuRoutes","ZoneMenuRoutes","react_router","NotFoundPage"],"mappings":"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","file":"static/js/177.d08f0704.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nimport { ScrollArea } from '../atoms/ScrollArea'\nimport { Spacing } from '../styling'\n\ninterface IPageLayoutFullHeightItemProps {\n  row?: number\n  column?: number\n  widthInColumns?: number\n  withScrollArea?: boolean\n  scrollAreaId?: string\n}\n\nconst gridColumnWidth: string = '6.22vw'\nconst gridColumnHeigth: string = '3.9375rem'\n\nconst leftPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.column !== undefined) {\n    return (\n      'calc((' +\n      props.column +\n      ' * ' +\n      gridColumnWidth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return Spacing.LayoutGridCellMargin\n  }\n}\nconst widthComputed = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.widthInColumns !== undefined) {\n    return (\n      'calc((' +\n      props.widthInColumns +\n      ' * ' +\n      gridColumnWidth +\n      ') - ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return 'calc(100vh - (2 * ' + Spacing.LayoutGridCellMargin + '))'\n  }\n}\nconst topPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.row !== undefined) {\n    return (\n      'calc((' +\n      props.row +\n      ' * ' +\n      gridColumnHeigth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return (\n      'calc(' + gridColumnHeigth + ' + ' + Spacing.LayoutGridCellMargin + ')'\n    )\n  }\n}\n\nconst FullHeightDiv = styled.div`\n  position: fixed;\n  bottom: 0.5rem;\n  width: ${widthComputed()};\n  left: ${leftPos()};\n  top: ${topPos()};\n`\n\nconst FullHeightDivStyled = styled.div`\n  height: 100%;\n`\n\nexport const PageLayoutFullHeightItem: React.FC<\n  IPageLayoutFullHeightItemProps\n> = ({\n  children,\n  row = 1,\n  column = 0,\n  widthInColumns = 16,\n  withScrollArea = false,\n  scrollAreaId,\n}) => (\n  <FullHeightDiv\n    column={column}\n    row={row}\n    widthInColumns={widthInColumns}\n    withScrollArea={withScrollArea}\n  >\n    {withScrollArea ? (\n      <ScrollArea id={scrollAreaId}>{children}</ScrollArea>\n    ) : (\n      <FullHeightDivStyled>{children}</FullHeightDivStyled>\n    )}\n  </FullHeightDiv>\n)\n","import styled from 'styled-components'\n\nexport const FlexRowSingle = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: ${({ justify = 'space-between' }: { justify?: string }) =>\n    justify};\n`\n","import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import styled from 'styled-components'\n\nexport const ScrollArea = styled.div`\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  height: 100%;\n`\n","import { Observer } from 'mobx-react'\nimport { object } from 'prop-types'\nimport React, { useContext } from 'react'\nimport { GoogleMap, GoogleMapProps, withGoogleMap } from 'react-google-maps'\nimport { MAP } from 'react-google-maps/lib/constants'\nimport styled from 'styled-components'\n\nimport { TMapModel } from '../models/MapModel'\nimport { Radiuses } from '../styling'\n\ninterface IBaseMapProps extends GoogleMapProps {\n  model: TMapModel\n}\n\nconst MapContainerStyled = styled.div`\n  border-radius: ${Radiuses.Card};\n  overflow: hidden;\n  height: 100%;\n`\n\nconst BaseMapContainer = withGoogleMap(({ children }) => <>{children}</>)\n\nconst mapModelContext = React.createContext<TMapModel | null>(null)\nconst mapContext = React.createContext<google.maps.Map | null>(null)\n\nclass GoogleMapProvider extends React.PureComponent {\n  static contextTypes = { [MAP]: object }\n  private map: google.maps.Map\n  constructor(props, context) {\n    super(props)\n    this.map = context[MAP]\n  }\n  render() {\n    return (\n      <mapContext.Provider value={this.map}>\n        {this.props.children}\n      </mapContext.Provider>\n    )\n  }\n}\n\nexport const BaseMap: React.FC<IBaseMapProps> = ({ model, children }) => {\n  const options: google.maps.MapOptions = {\n    streetViewControl: false,\n    mapTypeControl: false,\n    fullscreenControl: false,\n  }\n  return (\n    <mapModelContext.Provider value={model}>\n      <BaseMapContainer\n        containerElement={<MapContainerStyled />}\n        mapElement={<div style={{ height: `100%` }} />}\n      >\n        <GoogleMapProvider>\n          <Observer>\n            {() => (\n              <GoogleMap\n                ref={model.setMapRef}\n                zoom={model.zoom}\n                center={model.center}\n                onCenterChanged={model.updatePosition}\n                onZoomChanged={model.updateZoom}\n                options={options}\n              >\n                {children}\n              </GoogleMap>\n            )}\n          </Observer>\n        </GoogleMapProvider>\n      </BaseMapContainer>\n    </mapModelContext.Provider>\n  )\n}\n\nexport function useMapModel() {\n  const model = useContext(mapModelContext)\n  if (!model) {\n    throw new Error('Trying to useMapModel, but BaseMap is missing in the tree')\n  }\n  return model\n}\n\nexport function useGoogleMap() {\n  const map = useContext(mapContext)\n  if (!map) {\n    throw new Error(\n      'Trying to useGoogleMap, but BaseMap is missing in the tree',\n    )\n  }\n  return map\n}\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\nexport const CardListTitle = styled.h2`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  font-size: 1.2rem;\n  margin: 0.8rem 0 0.8rem 0.3rem;\n`\n","import React from 'react'\nimport { SortableHandle } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Icon } from './Icon'\n\ninterface IDragHandleProps {}\n\nconst DragHandleContainerStyled = styled.div`\n  padding: 1rem 0.4rem;\n  cursor: grab;\n`\nexport const DragHandle = SortableHandle<IDragHandleProps>(() => (\n  <DragHandleContainerStyled>\n    <Icon iconName=\"reorder\" />\n  </DragHandleContainerStyled>\n))\n","import React, { useEffect } from 'react'\n\ninterface IProps {\n  isShow: boolean\n  confirmText: string\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport const ConfirmDialog: React.FC<IProps> = props => {\n  useEffect(\n    () => {\n      if (props.isShow) {\n        if (window.confirm(props.confirmText)) {\n          props.onConfirm()\n        } else {\n          props.onCancel()\n        }\n      }\n    },\n    [props.isShow],\n  )\n  return null\n}\n","import React from 'react'\nimport { Field, FieldType, IFieldApi } from 'react-form'\n\nimport { RM } from '../helpers/ramda'\nimport { i18n } from '../i18n'\nimport { ISelectControlProps, SelectControl } from './SelectControl'\n\nexport interface IFormInputSelectProps<OptionType>\n  extends ISelectControlProps<OptionType> {\n  field: FieldType\n  fieldIsPure?: boolean\n  defaultValue?: OptionType\n  isRequired?: boolean\n  validatioName?: string\n}\n\nexport class FormInputSelect<OptionType> extends React.Component<\n  IFormInputSelectProps<OptionType>\n> {\n  static defaultProps = {\n    validatioName: 'Value',\n    getItemId: RM.prop('id'),\n  }\n\n  validate = (value: OptionType | undefined) => {\n    if (this.props.isRequired && !value) {\n      return i18n.t`${this.props.validatioName} must be selected`\n    }\n    return null\n  }\n\n  getControlProps(fieldApi: IFieldApi) {\n    const { isMulti, options, getOptionValue, defaultValue } = this.props\n    const selection = fieldApi.value || defaultValue\n\n    if (isMulti) {\n      const isSelected = Array.isArray(selection)\n        ? (item: OptionType) => selection.includes(getOptionValue!(item))\n        : RM.F\n      return {\n        value: Array.isArray(options)\n          ? (options as OptionType[]).filter(isSelected)\n          : [],\n        onChange: selectedOptions => {\n          fieldApi.setValue(selectedOptions.map(getOptionValue))\n        },\n      }\n    }\n\n    return {\n      value:\n        selection &&\n        (options as OptionType[]).find(\n          item => getOptionValue!(item) === selection,\n        ),\n      onChange: option => {\n        fieldApi.setValue(getOptionValue!(option))\n      },\n    }\n  }\n\n  render() {\n    const {\n      field,\n      fieldIsPure = false,\n      isRequired = false,\n      defaultValue,\n      ...props\n    } = this.props\n    return (\n      <Field field={field} validate={this.validate} pure={fieldIsPure}>\n        {fieldApi => (\n          <SelectControl\n            {...this.getControlProps(fieldApi)}\n            onFocus={() => fieldApi.setTouched(true)}\n            styles={{\n              control: base => {\n                if (Boolean(fieldApi.error)) {\n                  return {\n                    ...base,\n                    borderColor: 'red',\n                  }\n                }\n                return base\n              },\n            }}\n            {...props}\n          />\n        )}\n      </Field>\n    )\n  }\n}\n","import { useRouterContext } from '@speedlo/hooks'\n\ninterface IZoneRouteParams {\n  zoneId?: ID\n}\n\nexport function useZoneId() {\n  const { match } = useRouterContext<IZoneRouteParams>()\n  const { zoneId } = match.params\n  return zoneId\n}\n","import { useRouterContext } from '@speedlo/hooks'\n\nimport { useRoot } from '../../../atoms/RootProvider'\n\nexport function useZoneRouteControl() {\n  const { user, zone: zoneModel } = useRoot()\n  const { history } = useRouterContext()\n  const baseRoute = '/settings/zones'\n  const getRouteToZone = (zoneId: ID) => {\n    return `${baseRoute}/${zoneId}`\n  }\n  return {\n    getRouteToZone,\n    routeToZoneEdit(editZoneId: ID) {\n      zoneModel.map.panToZone(editZoneId)\n      if (user.canQuery('zone')) {\n        history.push(getRouteToZone(editZoneId))\n      }\n    },\n    routeToZoneList() {\n      history.push(baseRoute)\n    },\n  }\n}\n","import React from 'react'\nimport { FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { i18n } from '../../../i18n'\nimport { Colors } from '../../../styling'\n\ninterface IZoneInputProps {\n  field: FieldType\n  label?: string\n  autoFocus?: boolean\n  isDeliveryPrice?: boolean\n}\n\nconst LabelStyled = styled.div`\n  min-width: 2rem;\n  display: inline-block;\n`\n\nconst FormInputTextBoxStyled = styled(FormInputTextBox)`\n  width: 3rem;\n  position: relative;\n  z-index: 4;\n`\nconst FormInputTextBoxDeliveryStyled = styled(FormInputTextBoxStyled)`\n  color: ${Colors.blue};\n`\n\nconst DeliveryContainer = styled.div`\n  position: relative;\n  left: 8rem;\n  top: 0rem;\n`\n\nconst PriceRangeContainer = styled.div`\n  position: relative;\n  left: 4rem;\n  top: -0.3rem;\n  width: 3rem;\n`\n\nconst VerticalLine = styled.div`\n  border-left: 3px solid #707070;\n  width: 3px;\n  position: relative;\n  left: -2rem;\n  height: 4rem;\n  float: left;\n  margin: -0.5rem 0 0 0;\n`\n\nconst validatePrice = (value: string) => {\n  if (typeof value === 'number') {\n    return null\n  }\n  const trim = value.trim()\n  return trim.length && Number.isNaN(Number.parseFloat(trim))\n    ? i18n.t`Must be number`\n    : null\n}\n\nexport const ZonePriceInput = React.forwardRef<\n  HTMLInputElement,\n  IZoneInputProps\n>(\n  ({ field, label, isDeliveryPrice, autoFocus = false }, ref) =>\n    isDeliveryPrice ? (\n      <DeliveryContainer>\n        <VerticalLine />\n        <LabelStyled>{label}</LabelStyled>\n        <FormInputTextBoxDeliveryStyled\n          field={field}\n          validate={validatePrice}\n          // @ts-ignore\n          ref={ref}\n        />\n      </DeliveryContainer>\n    ) : (\n      <PriceRangeContainer>\n        <FormInputTextBoxStyled\n          field={field}\n          validate={validatePrice}\n          autoFocus={autoFocus}\n        />\n      </PriceRangeContainer>\n    ),\n)\n","import React from 'react'\nimport { FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputSelect } from '../../../atoms/FormInputSelect'\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GZoneColors } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { Colors } from '../../../styling'\nimport { ZoneColorsQuery } from '../Zones.graphql'\n\ninterface IZoneColorSelectorProps {\n  field?: FieldType\n}\n\nconst ColorOption = styled.div`\n  background-color: ${({ color }: { color: string }) => color};\n  color: ${Colors.white};\n  width: 6rem;\n  padding: 0.4rem 1rem;\n  margin: 0;\n  height: 100%;\n`\n\nconst QueryZoneColors = buildQuery<GZoneColors.Query, GZoneColors.Variables>(\n  ZoneColorsQuery,\n)\n\nconst makeStyles = () => ({\n  option: base => ({\n    ...base,\n    padding: 0,\n    margin: 0,\n  }),\n  menu: base => ({\n    ...base,\n    width: '8rem',\n    maxWidth: '8rem',\n  }),\n})\n\nexport const ZoneColorSelector: React.FC<IZoneColorSelectorProps> = ({\n  field = 'zoneColor.id',\n}) => (\n  <QueryZoneColors\n    render={({ zoneColors }) => (\n      <FormInputSelect<GZoneColors.ZoneColors>\n        field={field}\n        fieldIsPure={true}\n        options={[...zoneColors]}\n        width={8}\n        styles={makeStyles()}\n        defaultValue={RM.head(zoneColors)}\n        getOptionValue={RM.prop('id')}\n        formatOptionLabel={zoneColor => (\n          <ColorOption color={zoneColor.color}>{zoneColor.code}</ColorOption>\n        )}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { FormInputStyled } from '../../../atoms/FormInputStyled'\n\ninterface IZonePlaceholderInputProps {\n  label: string\n  display: string\n}\n\nconst LabelStyled = styled.div`\n  width: 3rem;\n  display: inline-block;\n`\n\nconst FormInputForPlaceholderStyled = styled(FormInputStyled)`\n  width: 3rem;\n  position: relative;\n  z-index: 4;\n`\n\nconst Container = styled.div`\n  margin: 0 0 0 1rem;\n`\n\nexport const ZonePlaceholderInput: React.FC<IZonePlaceholderInputProps> = ({\n  label,\n  display,\n}) => (\n  <Container>\n    <LabelStyled>{label}</LabelStyled>\n    <FormInputForPlaceholderStyled disabled={true} placeholder={display} />\n  </Container>\n)\n","import React, { Fragment } from 'react'\nimport { FormApi, NestedFieldComponentProps } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FZonePriceRangeFragment } from '../../../graph/generated'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Spacing } from '../../../styling'\nimport { ZonePlaceholderInput } from '../atoms/ZonePlaceholderInput'\nimport { ZonePriceInput } from '../atoms/ZonePriceInput'\n\ninterface IProps extends NestedFieldComponentProps<FZonePriceRangeFragment[]> {}\n\nconst AddButtonContainer = styled.div`\n  position: relative;\n  top: -6rem;\n`\n\nconst RemoveButtonContainer = styled.div`\n  position: relative;\n  top: -7rem;\n  left: 16rem;\n  height: 0;\n`\n\nexport const ZoneFormPriceRange: React.FC<IProps> = ({ fieldApi }) => {\n  return (\n    <>\n      {fieldApi.values.map((value, idx, values) => (\n        <Fragment key={idx}>\n          <ZonePriceInput\n            label=\"za\"\n            isDeliveryPrice={true}\n            field={[idx, 'price', 'value']}\n          />\n\n          {idx === values.length - 1 ? (\n            <ZonePlaceholderInput display=\"&infin;\" label=\"do\" />\n          ) : (\n            <ZonePriceInput\n              field={[idx, 'toPrice', 'value']}\n              autoFocus={true}\n            />\n          )}\n\n          {values.length > 1 && (\n            <RemoveButtonContainer>\n              <TouchButtonDelete\n                onDelete={() => fieldApi.removeValue('', idx)}\n              />\n            </RemoveButtonContainer>\n          )}\n        </Fragment>\n      ))}\n      <FormApi\n        render={formApi => (\n          <AddButtonContainer>\n            <TouchButton\n              disabled={formApi.submitting}\n              width={Spacing.ButtonHeight + Spacing.DefaultSizeUnit}\n              iconName=\"add_circle\"\n              onClick={() =>\n                fieldApi.addValue('', {\n                  price: { value: 0 },\n                  toPrice: { value: 0 },\n                })\n              }\n            />\n          </AddButtonContainer>\n        )}\n      />\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { NestedField } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputCheckbox } from '../../../atoms/FormInputCheckbox'\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { Headline } from '../../../atoms/Headline'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { validateIsRequired } from '../../../helpers/form'\nimport { i18n } from '../../../i18n'\nimport { Colors, Spacing } from '../../../styling'\nimport { ZonePriceInput } from '../atoms/ZonePriceInput'\nimport { ZoneColorSelector } from '../molecules/ZoneColorSelector'\nimport { ZoneFormPriceRange } from '../molecules/ZoneFormPriceRange'\n\ninterface IZoneFormContentProps {}\n\nconst ZoneFormContentStyled = styled.div`\n  margin: ${Spacing.Middle};\n  color: ${Colors.black};\n`\n\nconst DescriptionUnderHeadline = styled.div`\n  color: ${Colors.greyDark};\n  padding-bottom: 0.2rem;\n`\n\nexport const ZoneFormContent: React.FC<IZoneFormContentProps> = props => (\n  <ZoneFormContentStyled>\n    <IconLine icon=\"label\">\n      <FormInputTextBox\n        field=\"name\"\n        validate={validateIsRequired(i18n.t`Zone name`)}\n      />\n    </IconLine>\n\n    <IconLine icon=\"color_lens\">\n      <ZoneColorSelector />\n    </IconLine>\n\n    <FormInputCheckbox\n      field=\"enabled\"\n      name=\"enabled\"\n      label={i18n.t`Is active`.toLocaleLowerCase()}\n    />\n\n    <Trans>\n      <Headline margin=\"0.5rem 0 0 0\">Delivery cost</Headline>\n      <DescriptionUnderHeadline>\n        according order total cost\n      </DescriptionUnderHeadline>\n    </Trans>\n    <ZonePriceInput field=\"minimalOrderPrice.value\" />\n    <NestedField field=\"priceRangeRules\" component={ZoneFormPriceRange} />\n  </ZoneFormContentStyled>\n)\n","import React, { MouseEvent } from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IProps {\n  isSubmitting: boolean\n  isModified: boolean\n  onSave(e: MouseEvent<HTMLButtonElement>): void\n  onGoBack(): void\n}\n\nexport const ZoneFormControls: React.FC<IProps> = ({\n  isSubmitting,\n  isModified,\n  onGoBack,\n  onSave,\n}) => (\n  <FlexRowSingle>\n    <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n      <TouchButton\n        color={Colors.greyMiddle}\n        onClick={onGoBack}\n        text={i18n.t`Back`}\n        disabled={isSubmitting}\n      />\n    </FlexColumn>\n    <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n      <CanMutate mutationName=\"updateZone\">\n        <TouchButton\n          color={Colors.green}\n          text={i18n.t`Save zone`}\n          onClick={onSave}\n          disabled={isSubmitting || !isModified}\n        />\n      </CanMutate>\n    </FlexColumn>\n  </FlexRowSingle>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { FZoneFragmentDoc } from '../../../graph/generated'\nimport { GZones } from '../../../graph/types'\n\nexport const ZonesQuery = gql`\n  query GZones($branchesId: [ID!]!) {\n    zones(companyBranches: $branchesId) {\n      ...FZone\n    }\n  }\n  ${FZoneFragmentDoc}\n`\n\nexport const QueryZones = buildQuery<GZones.Query, GZones.Variables>(ZonesQuery)\n","import { observer } from 'mobx-react-lite'\nimport React, { useContext } from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { FZoneFragment } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { QueryZones } from './ZoneListLoader.graphql'\n\ninterface IProps {}\n\nexport type TZone = FZoneFragment\n\nconst ZoneListContext = React.createContext<Maybe<ReadonlyArray<TZone>>>(null)\n\nexport const ZoneListLoader: React.FC<IProps> = observer(({ children }) => {\n  const { zone } = useRoot()\n  const branches = zone.branches.filter(zone.branchFilterPredicate)\n  if (branches.length === 0) {\n    return (\n      <ZoneListContext.Provider value={[]}>{children}</ZoneListContext.Provider>\n    )\n  }\n  return (\n    <QueryZones\n      fetchPolicy=\"cache-and-network\"\n      variables={{ branchesId: branches.map(RM.prop('id')) }}\n      renderLoading={false}\n      render={({ zones }, { loading }) => (\n        <ZoneListContext.Provider value={loading ? null : zones}>\n          {children}\n        </ZoneListContext.Provider>\n      )}\n    />\n  )\n})\n\nexport const useZoneList = () => {\n  return useContext(ZoneListContext)\n}\n","import { reaction } from 'mobx'\nimport { useDisposable } from 'mobx-react-lite'\nimport React, { useCallback, useRef, useState } from 'react'\nimport { Form, IFormApi } from 'react-form'\nimport Goodbye from 'react-goodbye'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { ConfirmDialog } from '../../../atoms/ConfirmDialog'\nimport { Loading } from '../../../atoms/Loading'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { useMZoneUpdate } from '../../../graph/generated'\nimport { logDebug } from '../../../helpers/logger'\nimport { RM } from '../../../helpers/ramda'\nimport { useSnackBar } from '../../../hooks/useSnackBar'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Spacing } from '../../../styling'\nimport { useZoneId } from '../hooks/useZoneId'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { ZoneFormContent } from '../molecules/ZoneFormContent'\nimport { ZoneFormControls } from '../molecules/ZoneFormControls'\nimport { useZoneList } from './ZoneListLoader'\n\nconst DeleteButtonContainer = styled.div`\n  width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  margin-top: ${Spacing.Middle};\n`\n\nexport const ZoneFormPanel: React.FC = () => {\n  const zoneId = useZoneId()\n  const zoneList = useZoneList()\n  const { zone: zoneModel } = useRoot()\n  const { routeToZoneList } = useZoneRouteControl()\n  const [isModified, setModified] = useState(false)\n  const formApiRef = useRef<IFormApi | null>(null)\n  const { enqueueError, enqueueSuccess } = useSnackBar()\n\n  const [zoneUpdate] = useMZoneUpdate()\n\n  const onSubmit = useCallback(\n    async values => {\n      if (zoneId) {\n        const data = await zoneUpdate(\n          zoneModel.getZoneVariables(zoneId, values),\n        )\n        if (data) {\n          setModified(false)\n          routeToZoneList()\n          enqueueSuccess(i18n.t`Zone has been updated`)\n        }\n      }\n    },\n    [zoneId],\n  )\n\n  const onDelete = useCallback(\n    async () => {\n      if (zoneId) {\n        await zoneModel.destroyZone(zoneId)\n      }\n      routeToZoneList()\n    },\n    [zoneId],\n  )\n\n  useDisposable(() =>\n    reaction(() => zoneModel.map.currentZonePoints !== null, setModified),\n  )\n\n  React.useEffect(\n    () => {\n      if (zoneList && zoneList.length === 0) {\n        enqueueError(i18n.t`Requested zone wasn't found`)\n        routeToZoneList()\n      }\n    },\n    [zoneList],\n  )\n\n  const zone =\n    zoneId && zoneList ? zoneList.find(RM.propEq('id', zoneId)) || null : null\n\n  React.useEffect(\n    () => {\n      zoneModel.map.clearZonePoints()\n    },\n    [zone],\n  )\n\n  if (!zone) {\n    return <Loading text={i18n.t`Loading form...`} />\n  }\n\n  return (\n    <Form\n      defaultValues={zone}\n      onChange={formState => {\n        logDebug('zone form change', formState.values)\n        setModified(true)\n      }}\n      onSubmit={onSubmit}\n      render={formApi => {\n        formApiRef.current = formApi\n        return (\n          <Card padding={0}>\n            <ZoneFormControls\n              isSubmitting={formApi.submitting}\n              isModified={isModified}\n              onSave={formApi.submitForm}\n              onGoBack={routeToZoneList}\n            />\n            <ZoneFormContent />\n\n            <CanMutate mutationName=\"destroyZone\">\n              <DeleteButtonContainer>\n                <TouchButtonDelete\n                  disabled={formApi.submitting}\n                  confirmText={i18n.t`Remove zone ${zone.name}?`}\n                  onDelete={onDelete}\n                />\n              </DeleteButtonContainer>\n            </CanMutate>\n\n            <Goodbye when={isModified}>\n              {({ isShow, handleOk, handleCancel }) => (\n                <ConfirmDialog\n                  isShow={isShow}\n                  confirmText={i18n.t`Do you want to cancel changes for the zone?`}\n                  onConfirm={handleOk}\n                  onCancel={handleCancel}\n                />\n              )}\n            </Goodbye>\n          </Card>\n        )\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport { OverlayView } from 'react-google-maps'\nimport styled, { css } from 'styled-components'\n\nimport { FCompanyBranchFragment } from '../graph/generated'\nimport { gpsToLatLng } from '../helpers/gps'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  branch: FCompanyBranchFragment\n  isActive?: boolean\n}\n\nconst BranchNameStyled = styled.div`\n  ${getColors} font-size: 1.3rem;\n  white-space: nowrap;\n  padding: 0.2rem 0.5rem;\n`\n\nexport const MapCompanyBranchMarker: React.FC<IProps> = ({\n  branch,\n  isActive = true,\n}) => (\n  <OverlayView\n    getPixelPositionOffset={(width, height) => ({\n      x: -(width / 2),\n      y: -(height / 2),\n    })}\n    mapPaneName={OverlayView.MARKER_LAYER}\n    position={gpsToLatLng(branch.gps)}\n  >\n    <BranchNameStyled isActive={isActive}>{branch.name}</BranchNameStyled>\n  </OverlayView>\n)\n\nfunction getColors({ isActive }: { isActive: boolean }) {\n  return css`\n    background-color: ${isActive ? Colors.green : Colors.greyLight};\n    color: ${isActive ? Colors.white : Colors.greyDark};\n  `\n}\n","import React, { useCallback } from 'react'\nimport { Polygon } from 'react-google-maps'\n\nimport { gpsToLatLng } from '../../../helpers/gps'\n\ninterface IZoneMapAreaProps {\n  points: ReadonlyArray<GeoPoint>\n  color: string\n  priority: number\n  onFocus?(): void\n}\n\nexport const ZoneMapArea: React.FC<IZoneMapAreaProps> = props => {\n  const onAreaFocus = useCallback(\n    (e: google.maps.PolyMouseEvent) => {\n      if (props.onFocus) {\n        e.stop()\n        props.onFocus()\n      }\n    },\n    [props.onFocus],\n  )\n\n  const { points, color, priority } = props\n  return (\n    <Polygon\n      defaultPath={points.map(gpsToLatLng)}\n      options={{\n        fillColor: color,\n        fillOpacity: 0.3,\n        strokeWeight: 0,\n        zIndex: 5000 - priority,\n      }}\n      editable={false}\n      draggable={false}\n      onDblClick={onAreaFocus}\n    />\n  )\n}\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport { Polygon } from 'react-google-maps'\n\nimport { gpsToLatLng, latLngToGps } from '../../../helpers/gps'\n\ninterface IZoneMapAreaProps {\n  points: ReadonlyArray<GeoPoint>\n  color: string\n  priority: number\n  onChange(points: GeoPoint[]): void\n  onClear(): void\n}\n\nexport const ZoneMapEditableArea: React.FC<IZoneMapAreaProps> = props => {\n  const polygonRef = useRef<Polygon | null>(null)\n\n  const onAreaChange = useCallback(\n    () => {\n      if (polygonRef.current) {\n        const path = polygonRef.current.getPath()\n        props.onChange(path.getArray().map(latLngToGps))\n      }\n    },\n    [props.onChange],\n  )\n\n  useEffect(() => {\n    let listeners\n    if (polygonRef.current && props.onChange) {\n      const path = polygonRef.current.getPath()\n      listeners = [\n        path.addListener('set_at', onAreaChange),\n        path.addListener('insert_at', onAreaChange),\n        path.addListener('remove_at', onAreaChange),\n      ]\n    }\n    return () => {\n      props.onClear()\n      if (listeners) {\n        listeners.forEach(lis => lis.remove())\n      }\n    }\n  }, [])\n\n  const { points, color } = props\n  return (\n    <Polygon\n      defaultPath={points.map(gpsToLatLng)}\n      options={{\n        fillColor: color,\n        fillOpacity: 0.6,\n        strokeWeight: 2,\n        zIndex: 10000,\n      }}\n      editable={true}\n      draggable={true}\n      ref={polygonRef}\n      onDragEnd={onAreaChange}\n    />\n  )\n}\n","import { useRoot } from '../../../atoms/RootProvider'\n\nexport function useZoneModel() {\n  const { zone: zoneModel } = useRoot()\n  return zoneModel\n}\n","import React, { useCallback } from 'react'\n\nimport { BaseMap } from '../../../atoms/BaseMap'\nimport { FCompanyBranchFragment } from '../../../graph/generated'\nimport { MapCompanyBranchMarker } from '../../../molecules/MapCompanyBranchMarker'\nimport { Colors } from '../../../styling'\nimport { ZoneMapArea } from '../atoms/ZoneMapArea'\nimport { ZoneMapEditableArea } from '../atoms/ZoneMapEditableArea'\nimport { useZoneId } from '../hooks/useZoneId'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { TZone, useZoneList } from '../organisms/ZoneListLoader'\n\nexport const ZoneMapControl: React.FC = () => {\n  const zoneModel = useZoneModel()\n  const editZoneId = useZoneId()\n  const zoneList = useZoneList()\n  const { routeToZoneEdit } = useZoneRouteControl()\n\n  const branches = zoneModel.branches.filter(zoneModel.branchFilterPredicate)\n\n  const isActive = (companyBranchId: ID) =>\n    !zoneModel.hasBranchFilter || companyBranchId === zoneModel.branchFilterId\n\n  const renderZoneArea = (zone: TZone) => {\n    const areaProps = {\n      key: `zone${zone.id}`,\n      points: zone.geoPolygon,\n      priority: zone.priority,\n      color:\n        isActive(zone.companyBranch.id) && zone.enabled\n          ? zone.zoneColor.color\n          : Colors.greyMiddle,\n    }\n\n    if (zone.id === editZoneId) {\n      return (\n        <ZoneMapEditableArea\n          {...areaProps}\n          onChange={zoneModel.map.updateZonePoints}\n          onClear={zoneModel.map.clearZonePoints}\n        />\n      )\n    }\n\n    return (\n      <ZoneMapArea\n        {...areaProps}\n        onFocus={() => {\n          if (isActive(zone.companyBranch.id)) {\n            routeToZoneEdit(zone.id)\n          }\n        }}\n      />\n    )\n  }\n\n  const renderBranchLabel = useCallback(\n    (branch: FCompanyBranchFragment) => (\n      <MapCompanyBranchMarker\n        key={`branch${branch.id}`}\n        branch={branch}\n        isActive={isActive(branch.id)}\n      />\n    ),\n    [],\n  )\n\n  return (\n    <BaseMap model={zoneModel.map}>\n      {zoneList && zoneList.map(renderZoneArea)}\n      {branches && branches.map(renderBranchLabel)}\n    </BaseMap>\n  )\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\n\nexport const CreateZoneButton: React.FC = observer(() => {\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n  return (\n    <TouchButton\n      text={\n        zoneModel.hasBranchFilter\n          ? i18n.t`Create zone for branch`\n          : i18n.t`Select branch to create zone`\n      }\n      onClick={() => zoneModel.createZone(routeToZoneEdit)}\n      disabled={!zoneModel.hasBranchFilter}\n      color={Colors.turquoise}\n      textNextToIcon={true}\n      height={Spacing.ButtonHeight + Spacing.DefaultSizeUnit}\n      iconName=\"add_circle\"\n    />\n  )\n})\n","import React from 'react'\nimport { SortableElement } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Card } from '../../../atoms/Card'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { SizerButton } from '../../../atoms/SizerButton'\nimport { FCompanyBranchFragment, FZoneFragment } from '../../../graph/generated'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\n\ninterface IZoneListCardProps {\n  zone: FZoneFragment\n  branch: FCompanyBranchFragment\n  onEdit(): void\n}\n\nconst ZoneNameStyled = styled.div`\n  font-size: 1.125rem;\n  margin-top: 0.2rem;\n`\n\nconst ZoneDescriptionStyled = styled.div`\n  font-size: 0.875rem;\n`\nconst ZoneFlexRowStyled = styled(FlexRowSingle)`\n  height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n`\n\nexport const ZoneListCard = SortableElement<IZoneListCardProps>(\n  ({ zone, branch, onEdit }) => (\n    <Card\n      key={zone.id}\n      padding={0}\n      color={zone.enabled ? zone.zoneColor.color : Colors.greyMiddle}\n      onClick={onEdit}\n    >\n      <ZoneFlexRowStyled>\n        <FlexColumn fixedWidth={true} padding=\"0 0.5rem 0 0\">\n          <SizerButton>\n            <TouchButton iconName=\"mode_edit\" />\n          </SizerButton>\n        </FlexColumn>\n        <FlexColumn widthGrowIndex={1}>\n          <ZoneNameStyled>\n            {zone.name}\n            {` [P${zone.priority}]`}\n          </ZoneNameStyled>\n          <ZoneDescriptionStyled>{branch.name}</ZoneDescriptionStyled>\n        </FlexColumn>\n        <FlexColumn padding=\"0\">\n          <DragHandle />\n        </FlexColumn>\n      </ZoneFlexRowStyled>\n    </Card>\n  ),\n)\n","import * as R from 'ramda'\nimport React, { Fragment } from 'react'\nimport { SortableContainer, SortEndHandler } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { FCompanyBranchFragment, FZoneFragment } from '../../../graph/generated'\nimport { TZoneModel } from '../../../segments/zones/models/ZoneModel'\nimport { ZoneListCard } from '../atoms/ZoneListCard'\n\ntype TBranch = FCompanyBranchFragment\ntype TZone = FZoneFragment\n\ninterface IZoneListProps {\n  branches: TBranch[]\n  zones: TZone[]\n  zoneModel: TZoneModel\n  onZoneEdit(zoneID: ID): void\n}\n\nconst ZoneListContainerStyled = SortableContainer(styled.div`\n  margin-top: 0.5rem;\n  cursor: arrow;\n`)\n\nconst sortZones = R.sortWith<TZone>([\n  R.ascend(R.path(['companyBranch', 'name'])),\n  R.descend(R.prop('priority')),\n])\n\nconst groupByBranch = R.groupBy((zone: TZone) => zone.companyBranch.id)\n\nexport const ZoneList: React.FC<IZoneListProps> = ({\n  branches,\n  zones,\n  zoneModel,\n  onZoneEdit,\n}) => {\n  const renderZone = (zone: TZone, idx: number) => (\n    <ZoneListCard\n      key={zone.id}\n      zone={zone}\n      branch={branches.find(R.propEq('id', zone.companyBranch.id))!}\n      index={idx}\n      collection={zone.companyBranch.id}\n      onEdit={() => onZoneEdit(zone.id)}\n    />\n  )\n  const renderBranch = (branch: TBranch, branchZones: TZone[]) => (\n    <Fragment key={branch.id}>\n      <CardListTitle>{branch.name}</CardListTitle>\n      {branchZones.map(renderZone)}\n    </Fragment>\n  )\n\n  let output\n  let onSortEnd: SortEndHandler\n\n  if (branches.length === 1) {\n    const sorted = sortZones(zones)\n    output = sorted.map(renderZone)\n    onSortEnd = ({ oldIndex, newIndex }) => {\n      const zone = sorted[oldIndex]\n      zoneModel.changeZonePriority(zone, oldIndex, newIndex)\n    }\n  } else {\n    const grouped = R.mapObjIndexed(sortZones, groupByBranch(zones))\n    output = branches.map(branch => {\n      const branchZones = grouped[branch.id]\n      return branchZones ? renderBranch(branch, branchZones) : null\n    })\n    onSortEnd = ({ oldIndex, newIndex, collection }) => {\n      const group = grouped[collection]\n      const zone = group[oldIndex]\n      zoneModel.changeZonePriority(zone, oldIndex, newIndex)\n    }\n  }\n\n  return (\n    <ZoneListContainerStyled\n      useDragHandle={true}\n      lockAxis=\"y\"\n      onSortEnd={onSortEnd}\n    >\n      {output}\n    </ZoneListContainerStyled>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { BulletList } from 'react-content-loader'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { ZoneList } from '../molecules/ZoneList'\nimport { useZoneList } from './ZoneListLoader'\n\nexport const ZoneListControl: React.FC = () => {\n  const zoneList = useZoneList()\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n  if (zoneList === null) {\n    return <BulletList primaryOpacity={0.2} secondaryOpacity={0.2} />\n  }\n  if (zoneModel.brand === null) {\n    return (\n      <CardListTitle>\n        <Trans>Select brand to see its zones</Trans>\n      </CardListTitle>\n    )\n  }\n  return (\n    <ZoneList\n      zoneModel={zoneModel}\n      zones={zoneList.filter(zoneModel.zoneFilterPredicate)}\n      branches={zoneModel.root.user.filterBranches(\n        zoneModel.branchFilterPredicate,\n      )}\n      onZoneEdit={routeToZoneEdit}\n    />\n  )\n}\n","import React from 'react'\n\nimport { FCompanyBranchFragment } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport { CompanyBranchDropdown } from '../../../molecules/CompanyBranchDropdown'\n\ntype TBranch = FCompanyBranchFragment\n\ninterface IProps {\n  branches: TBranch[]\n  selectedBranch: Maybe<TBranch>\n  onSelection(branch: Maybe<TBranch>): void\n  autoFocus: boolean\n}\n\nexport const ZoneFilterBranch: React.FC<IProps> = ({\n  branches,\n  selectedBranch,\n  onSelection,\n  autoFocus,\n}) => (\n  <CompanyBranchDropdown\n    placeholder={i18n.t`Select branch`}\n    branches={branches}\n    selectedBranch={selectedBranch}\n    onSingleSelection={onSelection}\n    formatOptionLabel={RM.prop('name')}\n    isClearable={true}\n    autoFocus={autoFocus}\n  />\n)\n","import React from 'react'\n\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { FCompanyBranchBrand } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\n\ntype TBrand = FCompanyBranchBrand\n\ninterface IProps {\n  brands: ReadonlyArray<TBrand>\n  selectedBrand: Maybe<TBrand>\n  onSelection(brand: Maybe<TBrand>): void\n}\n\nexport const ZoneFilterBrand: React.FC<IProps> = ({\n  brands,\n  selectedBrand,\n  onSelection,\n}) => (\n  <SelectControl<TBrand>\n    placeholder={i18n.t`Select brand`}\n    options={brands as TBrand[]}\n    value={selectedBrand}\n    formatOptionLabel={RM.prop('name')}\n    getOptionValue={RM.prop('id')}\n    getOptionLabel={RM.prop('name')}\n    isClearable={true}\n    isSearchable={true}\n    onChange={value => onSelection(value as Maybe<TBrand>)}\n    autoFocus={true}\n  />\n)\n","import { autorun } from 'mobx'\nimport { observer, useDisposable } from 'mobx-react-lite'\nimport React, { useCallback } from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { FCompanyBranchBrand } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { ZoneFilterBranch } from '../molecules/ZoneFIlterBranch'\nimport { ZoneFilterBrand } from '../molecules/ZoneFilterBrand'\n\nexport const ZoneFilter: React.FC = observer(() => {\n  const { user, zone } = useRoot()\n  const branches = user.branches\n\n  const getBrandBranches = useCallback(\n    (brand: Maybe<FCompanyBranchBrand>) =>\n      brand === null\n        ? []\n        : user.branches.filter(RM.pathEq(['brand', 'id'], brand.id)),\n    [],\n  )\n\n  useDisposable(() =>\n    autorun(() => {\n      if (branches.length === 1) {\n        zone.setBranchFilter(RM.head(branches)!)\n      }\n    }),\n  )\n\n  // no filter is shown for less than 1 branch available\n  if (branches.length <= 1) {\n    return null\n  }\n\n  const singleBrand = user.brands.length === 1 ? RM.head(user.brands)! : null\n  if (singleBrand) {\n    zone.setBrandFilter(singleBrand, getBrandBranches(zone.brand))\n  }\n\n  return (\n    <>\n      {!singleBrand && (\n        <ZoneFilterBrand\n          brands={user.brands}\n          selectedBrand={zone.brand}\n          onSelection={brand => {\n            if (brand === null) {\n              zone.clearBrandFilter()\n            } else {\n              zone.setBrandFilter(brand, getBrandBranches(brand))\n            }\n          }}\n        />\n      )}\n      {!singleBrand && <VerticalGap />}\n      <ZoneFilterBranch\n        branches={getBrandBranches(zone.brand)}\n        selectedBranch={zone.branch}\n        autoFocus={Boolean(singleBrand)}\n        onSelection={branch => {\n          if (!branch) {\n            zone.clearBranchFilter()\n          } else {\n            zone.setBranchFilter(branch)\n          }\n        }}\n      />\n    </>\n  )\n})\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { ScrollArea } from '../../../atoms/ScrollArea'\nimport { CreateZoneButton } from '../molecules/CreateZoneButton'\nimport { ZoneListControl } from '../organisms/ZoneListControl'\nimport { ZoneFilter } from './ZoneFilter'\n\nconst ZoneMenuContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst FixedHeaderContainer = styled.div`\n  flex: 0 0 auto;\n`\nconst ScrollAreaContainer = styled.div`\n  flex: 1 1 0;\n  min-height: 0;\n`\nexport const ZoneMenuPanel: React.FC = () => (\n  <ZoneMenuContainer>\n    <FixedHeaderContainer>\n      <Card>\n        <ZoneFilter />\n      </Card>\n      <CanMutate mutationName=\"createZone\">\n        <CreateZoneButton />\n      </CanMutate>\n    </FixedHeaderContainer>\n\n    <ScrollAreaContainer>\n      <ScrollArea>\n        <ZoneListControl />\n      </ScrollArea>\n    </ScrollAreaContainer>\n  </ZoneMenuContainer>\n)\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport { i18n } from '../../../i18n'\nimport { PageLayout } from '../../../molecules/PageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { ZoneFormPanel } from '../organisms/ZoneFormPanel'\nimport { ZoneListLoader } from '../organisms/ZoneListLoader'\nimport { ZoneMapControl } from '../organisms/ZoneMapControl'\nimport { ZoneMenuPanel } from '../organisms/ZoneMenuPanel'\n\ninterface IProps extends RouteComponentProps<{ zoneId?: ID }> {}\n\nexport const ZonePageLayout: React.FC<IProps> = ({ match }) => {\n  const isEditing = Boolean(match.params.zoneId)\n  return (\n    <ZoneListLoader>\n      <PageLayout\n        pageTitle={i18n.t`Delivery zones`}\n        useBackButton={true}\n        backRoute=\"/settings\"\n      />\n      <PageLayoutFullHeightItem\n        widthInColumns={6}\n        column={10}\n        withScrollArea={isEditing}\n      >\n        {isEditing ? <ZoneFormPanel /> : <ZoneMenuPanel />}\n      </PageLayoutFullHeightItem>\n      <PageLayoutFullHeightItem widthInColumns={10}>\n        <ZoneMapControl />\n      </PageLayoutFullHeightItem>\n    </ZoneListLoader>\n  )\n}\n","import React from 'react'\nimport { Route, RouteComponentProps, Switch } from 'react-router-dom'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { ZonePageLayout } from '../../../segments/zones/pages/ZonePageLayout'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\n\ninterface IZoneMenuRoutesProps extends RouteComponentProps<{}> {}\n\nexport const ZoneMenuRoutes: React.FC<IZoneMenuRoutesProps> = () => {\n  const { getRouteToZone } = useZoneRouteControl()\n  return (\n    <Switch>\n      <Route path={getRouteToZone(':zoneId?')} component={ZonePageLayout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  )\n}\n\nexport default ZoneMenuRoutes\n"],"sourceRoot":""}