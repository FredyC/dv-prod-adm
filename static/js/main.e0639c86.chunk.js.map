{"version":3,"sources":["helpers/gps.ts","atoms/PageLoader.tsx","graph/errorHandler.ts","routes/SecureRoute.tsx","atoms/WithRoot.tsx","atoms/Icon.tsx","helpers/offline.ts","molecules/TouchButton.tsx","atoms/Sizer.tsx","segments/menu/models/MenuBaseModel.ts","atoms/PageTitle.tsx","atoms/Card.tsx","molecules/FullPageLayout.tsx","hooks/useSnackBar.ts","pages/NotFoundPage.tsx","graph/buildQuery.tsx","styling.ts","routes/RedirectToLogin.tsx","helpers/formats.ts","helpers/ramda.ts","atoms/SizerButton.tsx","atoms/Loading.tsx","atoms/SoundControl.tsx","organisms/LogoutWidget.tsx","molecules/HomeButton.tsx","molecules/PageLayout.tsx","atoms/MarginBox.tsx","atoms/GridLayout.tsx","models/BaseModel.ts","segments/menu/organisms/RecipeForm.graphql.ts","segments/businesshours/models/BusinessHoursModel.graphql.ts","segments/businesshours/models/BusinessHoursModel.ts","segments/menu/models/MenuCategoryModel.graphql.ts","segments/menu/models/MenuCategoryModel.ts","segments/menu/models/MenuRecipeModel.graphql.ts","segments/menu/models/MenuRecipeModel.ts","helpers/logger.ts","graph/generated.ts","locale/moment.ts","i18n.tsx","locale/numeral.ts","segments/businesshours/organisms/SpecificBusinessHours.graphql.ts","segments/zones/Zones.graphql.ts","routes/LazyRoute.tsx","atoms/IntervalRender.tsx","atoms/SoundPlayInterval.tsx","assets/connectionWarning.mp3","segments/order/models/OrderListModel.ts","assets/loader.gif","assets/bg_antracit.jpg","enableDebug.ts","../node_modules/moment/locale lazy /^/.*$/ groupOptions: {} namespace object","../node_modules/numeral/locales lazy /^/.*$/ groupOptions: {} namespace object","../ /^/.*/messages/.po$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","config.ts","atoms/ConnectionWarning.tsx","routes/LogRoute.tsx","routes/RedirectAfterLogin.tsx","routes/RedirectAfterLogout.tsx","routes/Routing.tsx","pages/ErrorPage.tsx","pages/ServiceUnreachablePage.tsx","app/DefaultErrorHandler.tsx","app/GlobalStyles.tsx","app/Router.tsx","app/SnackProvider.tsx","app/UpdateHandler.tsx","app/UserBootstrap.tsx","app/AppMain.tsx","app/ThemeProvider.tsx","app/AppProvider.tsx","index.tsx","context/RootContext.ts","graph/createClient.ts","graph/AuthLink.ts","helpers/persistModel.ts","segments/login/models/PasswordLoginModel.ts","segments/login/models/LoginProviderModel.ts","models/AuthModel.graphql.ts","models/AuthModel.ts","models/ConfigModel.ts","models/UserModel.ts","helpers/faker.ts","segments/createorder/models/CreateOrderModel.ts","models/MapModel.ts","segments/order/models/OrderMapModel.ts","segments/order/models/OrderModel.ts","segments/overview/models/StatisticsModel.ts","segments/settings/models/SettingsBaseModel.ts","segments/menu/models/MenuStockModel.graphql.ts","segments/menu/models/MenuStockModel.ts","segments/menu/models/MenuModel.ts","segments/settings/models/SettingsModel.ts","segments/zones/models/ZoneMapModel.ts","segments/zones/models/ZoneModel.graphql.ts","segments/zones/models/ZoneModel.ts","models/RootModel.ts","atoms/RootProvider.tsx"],"names":["__webpack_require__","d","__webpack_exports__","gpsToLatLng","latLngToGps","generatePolygon","geolib__WEBPACK_IMPORTED_MODULE_0__","gps","google","maps","LatLng","Number","latitude","longitude","latLng","lat","lng","_ref","center","_ref$metersRadius","metersRadius","_ref$pointsCount","pointsCount","Array","fill","map","_","idx","degree","computeDestinationPoint","StyledPageLoader","styled","div","_templateObject","PageLoader","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","role","src","loaderGif","alt","appConfig","pageTitleSuffix","width","height","getQueryErrors","Object","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","query","result","wrap","_context","prev","next","sent","errors","abrupt","stop","this","_x","apply","arguments","SecureRoute","_ref$redirect","redirect","props","lazy","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","useRoot","auth","isAuthenticatedUser","_RedirectToLogin__WEBPACK_IMPORTED_MODULE_6__","_pages_NotFoundPage__WEBPACK_IMPORTED_MODULE_4__","component","path","exact","_LazyRoute__WEBPACK_IMPORTED_MODULE_5__","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","WithRoot","mobx_react_lite__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","n","_RootProvider__WEBPACK_IMPORTED_MODULE_2__","render","_ref$observe","observe","root","Fragment","IconSpanStyled","span","_ref$fontSize","fontSize","_ref$fontSizeUnit","fontSizeUnit","color","Icon","_ref2","iconName","_ref2$color","Colors","white","className","isNetworkOnline","isNetworkOffline","whenGoingOnline","isOnline","observable","box","navigator","onLine","window","addEventListener","set","get","cb","change","oldValue","newValue","applyAlpha","alphaValue","applyAlphaToColor","TouchButtonStyled","button","Spacing","ButtonHeight","DefaultSizeUnit","_ref$width","_ref2$height","Radiuses","Button","ButtonLabelStyled","_templateObject2","ButtonLabelNextToIconStyled","_templateObject3","TouchButton","React","forwardRef","_ref3","forwardedRef","children","_ref3$iconColor","iconColor","_ref3$iconSize","iconSize","_ref3$color","greyMiddle","_ref3$textNextToIcon","textNextToIcon","badge","text","react__WEBPACK_IMPORTED_MODULE_2___default","assign","ref","_atoms_Icon__WEBPACK_IMPORTED_MODULE_4__","SizerContainer","_ref$widthUnit","widthUnit","undefined","concat","_ref2$heightUnit","heightUnit","Sizer","_ref3$widthUnit","_ref3$heightUnit","margin","_MarginBox__WEBPACK_IMPORTED_MODULE_5__","MenuBaseModel","mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__","BaseModel","named","volatile","filterInput","actions","self","setFilterInput","input","views","branchId","getParent","settings","TitleStyled","h1","greyLight","observableTitles","array","autorun","lastTitle","from","pop","document","title","PageTitle","_React$Component","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","key","value","push","prevProps","findIndex","RM","equals","splice","remove","Component","Route","react__WEBPACK_IMPORTED_MODULE_9___default","react_router_dom__WEBPACK_IMPORTED_MODULE_10__","Display","mobx_react_lite__WEBPACK_IMPORTED_MODULE_8__","join","Card","Color","alpha","lighten","string","textColor","black","_ref$padding","padding","_ref3$stretchToParent","stretchToParent","css","displayName","getLayout","i","x","y","w","h","FullPageLayout","_molecules_PageLayout__WEBPACK_IMPORTED_MODULE_2__","layouts","useSnackBar","notistack__WEBPACK_IMPORTED_MODULE_0__","successVariant","variant","errorVariant","warningVariant","infoVariant","enqueueSnackbar","useSnackbarOrig","enqueueSuccess","errorMessage","enqueueError","enqueueWarning","enqueueInfo","NotFoundPage","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","_atoms_PageTitle__WEBPACK_IMPORTED_MODULE_1__","_i18n__WEBPACK_IMPORTED_MODULE_2__","buildQuery","cleanup","useRef","executeCleanup","useCallback","current","forEach","fn","length","useEffect","renderFragment","_props$renderLoading","renderLoading","_props$refetchOnConne","renderError","refetchOnConnectionLost","rest","react_apollo__WEBPACK_IMPORTED_MODULE_2__","loading","_atoms_Loading__WEBPACK_IMPORTED_MODULE_3__","error","refetch","data","FontSizes","color__WEBPACK_IMPORTED_MODULE_0__","color__WEBPACK_IMPORTED_MODULE_0___default","_helpers_ramda__WEBPACK_IMPORTED_MODULE_1__","curry","MarginAroundFormComponents","Small","Middle","LayoutGridCellMargin","DefaultInputWidth","ButtonColumnWidthPx","InfoMessageFontSize","CompactCard","CompactCardBig","RedirectToLogin","debug__WEBPACK_IMPORTED_MODULE_0__","debug__WEBPACK_IMPORTED_MODULE_0___default","log","debug","_ref$useOrigin","useOrigin","match","location","to","pathname","state","origin","fullDateFormat","formatDateISO","formatTime","priceFormat","formatPrice","formatTimeWithoutTodayDate","formatAddress","formatFullName","date_fns__WEBPACK_IMPORTED_MODULE_0__","date_fns_fp__WEBPACK_IMPORTED_MODULE_1__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2___default","numeral__WEBPACK_IMPORTED_MODULE_3__","numeral__WEBPACK_IMPORTED_MODULE_3___default","currentLocale","csLocale","formatLocale","formatWithOptions","locale","format","formatDateTime","price","numeral","time","isSameDay","Date","address","street","houseNumber","city","user","lastName","firstName","trim","ramda__WEBPACK_IMPORTED_MODULE_0__","SizerButton","_Sizer__WEBPACK_IMPORTED_MODULE_3__","Loading","_ref$text","SoundControl","_getPrototypeOf2","_this","classCallCheck","_len","args","_key","possibleConstructorReturn","getPrototypeOf","call","playPreview","inherits","createClass","react_default","soundEnabled","green","red","onClick","controlSound","LogoutWidgetStyled","LoggedUserNameStyled","IconStyled","LogoutWidget","observer","_useQLogoutWidget","useQLogoutWidget","id","userId","skip","isAuthenticated","i18n","data-testid","react_router_dom","HomeButtonStyled","HomeButton_templateObject","HomeButton","_ref$color","_ref$iconColor","_ref$goBack","goBack","backRoute","objectWithoutProperties","react_router","history","TopLeftButtonContainer","PageLayout_templateObject","getPosition","scrollPageTitle","TopRightContainer","PageLayout_templateObject2","PageTitleContainer","PageLayout_templateObject3","PageHeaderItem","_templateObject4","PageLayout","_ref$pageTitle","pageTitle","_ref$layouts","_ref$hideLogoutWidget","hideLogoutWidget","_ref$showSoundControl","showSoundControl","_ref$useBackButton","useBackButton","_ref$scrollPageTitle","topContent","SoundControl_SoundControl","GridLayout","toConsumableArray","HomeButton_HomeButton","MarginBox","react_grid_layout__WEBPACK_IMPORTED_MODULE_1__","react_grid_layout__WEBPACK_IMPORTED_MODULE_1___default","ReactGridLayout","WidthProvider","RGL","layout","cols","rowHeight","autoSize","isDraggable","isResizable","compactType","measureBeforeMount","mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__","verror__WEBPACK_IMPORTED_MODULE_2__","types","model","getPath","client","getEnv","apolloClient","VError","getRoot","MenuRecipePriceFragment","gql","FPriceFragmentDoc","MenuAssocRecipeFragment","MenuRecipeFormQuery","FMenuCategoryListItemFragmentDoc","MenuRecipeFormAssocQuery","MenuRecipeDefaults","_templateObject5","QueryMenuRecipeFormAssoc","ESpecificHourMode","CreateSpecificBusinessHour","SpecificBusinessHourFragment","DeleteSpecificBusinessHour","BusinessHoursModel","byIdPredicate","complement","propEq","specificMode","optional","enumeration","TIMESPAN","changeSpecificMode","mode","submitSpecificHour","values","variables","companyBranch","specificDate","isoDate","date","closed","FULLDAY","openAt","closeAt","closedNote","note","mutate","mutation","updateQueries","GSpecificBusinessHours","mutationResult","businessHours","deleteSpecificHour","businessHourId","filter","SortMenuCategoryMutation","MenuCategoryCreateMutation","MenuCategoryUpdateMutation","FMenuCategoryFragmentDoc","MenuCategoryDeleteMutation","MenuCategoryModel","sortCategory","_sortCategory","asyncToGenerator","regenerator_default","categoryId","offset","Boolean","success","_x2","createCategory","formValues","categoryType","objectSpread","wareCategoryType","getFormVariables","updateCategory","_updateCategory","_callee2","_context2","_x3","_x4","deleteCategory","_deleteCategory","_callee3","_context3","_x5","_x6","nameLabel","internalNoteLabel","enabled","visible","pictogram","recipes","prop","minCount","maxCount","getCategoryRoute","recipeId","MenuRecipeFragment","MenuRecipeVisibilityMutation","MenuRecipeCreateMutation","MenuRecipeUpdateMutation","MenuRecipeDeleteMutation","MenuRecipeModel","categoryFilterId","changeVisibility","optimisticResponse","updateRecipe","__typename","setCategoryFilter","createRecipe","recipeType","recipe","getRecipeVariables","deleteRecipe","_deleteRecipe","queryDefaults","_queryDefaults","_data$companyBranch","vats","code","currency","reduce","vatId","priceType","enum","currencyCode","internalNote","descriptionLabel","prices","keys","warePriceType","vat","sideDishCategories","sideDishes","wareCategories","categories","associatedRecipes","pick","ingredients","stockItem","quantity","parseFloat","replace","getRecipeRoute","logMain","logDebug","logError","logAuth","logRouting","logPersistence","logGraph","logForm","logLang","logUpdate","useColors","console","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","WeekDayEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","LanguageEnum","MobilePlatformEnum","WareUnitEnum","AvailabilityTypeEnum","AllergenEnum","WarePriceTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","OrderStateEnum","OrderBillingTypeEnum","PaymentGateEnum","PaymentTypeEnum","DeliveryTypeEnum","OrderRecipeStateEnum","OrderOnlineStateEnum","OrderOriginEnum","ZoneTypeEnum","ShiftUserStateEnum","OrderOriginCategoryEnum","WareCategoryTypeEnum","SettingTypeEnum","WareRequirementEnum","SubscriptionActionType","GSpecificBusinessHourFragmentDoc","GMenuRecipeFragmentDoc","FMenuAllergenFragmentDoc","FMenuWareUnitFragmentDoc","GMenuStockItemFragmentDoc","_templateObject6","GMenuRecipePriceFragmentDoc","_templateObject7","GMenuAssocRecipeFragmentDoc","_templateObject8","FGeoPointFragmentDoc","_templateObject9","FCompanyBranchFragmentDoc","_templateObject10","FOrderStateCategoryFragmentDoc","_templateObject11","FPriceWithCurrencyFragmentDoc","_templateObject12","FRegularBusinessHourFragmentDoc","_templateObject13","FWeekdayFragmentDoc","_templateObject14","_templateObject15","FCreateOrderItemFragmentDoc","_templateObject16","FCreateOrderFragmentDoc","_templateObject17","FCreateOrderRecipeSidedishesFragmentDoc","_templateObject18","FOrderMenuRecipeFragmentDoc","_templateObject19","FOrderMenuCategoryFragmentDoc","_templateObject20","FAddressFragmentDoc","_templateObject21","FEmailFragmentDoc","_templateObject22","FPhoneFragmentDoc","_templateObject23","FCustomerFragmentDoc","_templateObject24","FKitchenOrderRecipeFragmentDoc","_templateObject25","FKitchenOrderFragmentDoc","_templateObject26","FMenuRecipeFragmentDoc","_templateObject27","_templateObject28","_templateObject29","FOrderDetailWareFragmentDoc","_templateObject30","_templateObject31","FUserNameFragmentDoc","_templateObject32","FDriverFragmentDoc","_templateObject33","FOrderDriverFragmentDoc","_templateObject34","FOrderMapDriverFragmentDoc","_templateObject35","FOrderMapDeviceFragmentDoc","_templateObject36","FOrderMapDeliveryFragmentDoc","_templateObject37","FOrderMapOrderFragmentDoc","_templateObject38","FOrderTickerFragmentDoc","_templateObject39","FOrderTimingFragmentDoc","_templateObject40","FOrderTotalsFragmentDoc","_templateObject41","FZonePriceRangeFragmentDoc","_templateObject42","FZoneFragmentDoc","_templateObject43","_templateObject44","_templateObject45","_templateObject46","_templateObject47","_templateObject48","_templateObject49","_templateObject50","_templateObject51","_templateObject52","_templateObject53","_templateObject54","_templateObject55","_templateObject56","_templateObject57","_templateObject58","_templateObject59","_templateObject60","_templateObject61","_templateObject62","_templateObject63","_templateObject64","_templateObject65","_templateObject66","_templateObject67","_templateObject68","_templateObject69","_templateObject70","_templateObject71","_templateObject72","_templateObject73","_templateObject74","_templateObject75","_templateObject76","QAddressSuggestDocument","_templateObject77","useQAddressSuggest","baseOptions","Hooks","MOrderStateDocument","_templateObject78","useMOrderState","MSetPriorityOrderDocument","_templateObject79","useMSetPriorityOrder","QLogoutWidgetDocument","_templateObject80","MBusinessHoursSubmitDocument","_templateObject81","useMBusinessHoursSubmit","QRegularBusinessHoursDocument","_templateObject82","useQRegularBusinessHours","MAddOrderPromoDocument","_templateObject83","useMAddOrderPromo","MCancelOrderDocument","_templateObject84","useMCancelOrder","MCreateOrderAcceptDocument","_templateObject85","useMCreateOrderAccept","MCreateOrderAddRecipeDocument","_templateObject86","useMCreateOrderAddRecipe","MCreateOrderNewDocument","_templateObject87","useMCreateOrderNew","MCreateOrderRemoveItemDocument","_templateObject88","useMCreateOrderRemoveItem","MCreateOrderUpdateDocument","_templateObject89","useMCreateOrderUpdate","MCreateOrderUpdateItemDocument","_templateObject90","useMCreateOrderUpdateItem","MRemoveOrderPromoDocument","_templateObject91","useMRemoveOrderPromo","QCreateOrderItemDocument","_templateObject92","QCreateOrderRecipeDocument","_templateObject93","QOrderCartDocument","_templateObject94","useQOrderCart","QOrderFormDeliverAtDefaultsDocument","_templateObject95","useQOrderFormDeliverAtDefaults","QOrderMenuDocument","_templateObject96","useQOrderMenu","QValidateLocationDocument","_templateObject97","MKitchenRecipeStateDocument","_templateObject98","useMKitchenRecipeState","QKitchenOrderListDocument","_templateObject99","useQKitchenOrderList","SKitchenOrderListDocument","_templateObject100","useSKitchenOrderList","QUserBootstrapDocument","_templateObject101","useQUserBootstrap","_templateObject102","SOrderCallDocument","_templateObject103","useSOrderCall","_templateObject104","MMenuCategoryVisibilityDocument","_templateObject105","useMMenuCategoryVisibility","MMenuStockQuantityDocument","_templateObject106","useMMenuStockQuantity","QMenuCategoryDocument","_templateObject107","QMenuCategoryFilterDocument","_templateObject108","useQMenuCategoryFilter","QMenuCategoryListDocument","_templateObject109","useQMenuCategoryList","QMenuGuideDownloadDocument","_templateObject110","useQMenuGuideDownload","QMenuRecipeListDocument","_templateObject111","useQMenuRecipeList","QMenuStockDepositDocument","_templateObject112","useQMenuStockDeposit","QMenuStockListDocument","_templateObject113","useQMenuStockList","QStockRecipesDocument","_templateObject114","useQStockRecipes","MBranchDefaultTimeDocument","_templateObject115","useMBranchDefaultTime","MOrderChangeToPickupDocument","_templateObject116","useMOrderChangeToPickup","MOrderTimeNotificationDocument","_templateObject117","useMOrderTimeNotification","MRemoveOrderDriverDocument","_templateObject118","useMRemoveOrderDriver","MSelectOrderDriverDocument","_templateObject119","useMSelectOrderDriver","QBranchDefeaultTimesDocument","_templateObject120","useQBranchDefeaultTimes","QOrderDetailDocument","_templateObject121","useQOrderDetail","QOrderDriversDocument","_templateObject122","useQOrderDrivers","QOrderListDocument","_templateObject123","useQOrderList","QOrderListCategoriesDocument","_templateObject124","useQOrderListCategories","QOrderMapDeliveriesDocument","_templateObject125","useQOrderMapDeliveries","QOrderMapOrdersDocument","_templateObject126","useQOrderMapOrders","QOrderStateDocument","_templateObject127","useQOrderState","SOrderListDocument","_templateObject128","useSOrderList","SOrderMapDeliveriesDocument","_templateObject129","useSOrderMapDeliveries","SOrderMapOrdersDocument","_templateObject130","useSOrderMapOrders","MFinancialReportCreateDocument","_templateObject131","useMFinancialReportCreate","QAllDriversDocument","_templateObject132","useQAllDrivers","QClosureHistoryDocument","_templateObject133","QClosureReportDocument","_templateObject134","useQClosureReport","QStatsDailyDocument","_templateObject135","useQStatsDaily","QStatsOrdersDocument","_templateObject136","useQStatsOrders","QStatsOrdersCountsDocument","_templateObject137","useQStatsOrdersCounts","QStatsOrdersListDocument","_templateObject138","MUserMenuLanguageDocument","_templateObject139","useMUserMenuLanguage","QUserMenuLanguagesDocument","_templateObject140","useQUserMenuLanguages","MZoneUpdateDocument","_templateObject141","useMZoneUpdate","changeMomentLocale","_changeMomentLocale","lang","moment","updateLocale","setupI18n","I18nManager","_React$useState","useState","forceUpdate","slicedToArray","useReaction","language","_args","detectLanguage","setupLanguage","node_modules_react_default","react","Children","only","languages","LocaleResolver","DETECTORS","NavigatorDetector","TRANSFORMERS","LanguageOnlyTransformer","getLocales","find","loc","supportedLanguages","includes","fallbackLanguage","_setupLanguage","Promise","all","loadCatalog","changeNumeralLocale","activate","catalog","load","defineProperty","_changeNumeralLocale","numberRx","validateNumber","test","QuerySpecificBusinessHours","ZoneLocationQuery","ZoneColorsQuery","LazyRoute","routeProps","IntervalRender","_Component","isActive","nextTime","getNextTime","timer","executeTimer","clearTimeout","timeMs","differenceInMilliseconds","setTimeout","setState","deactivate","addSeconds","intervalSec","nextLoop","SoundPlayInterval_SoundPlayInterval","SoundPlayInterval","soundUrl","_ref$shouldPlay","shouldPlay","_ref$skipEnableChecks","skipEnableChecks","config","IntervalRender_IntervalRender","lib_default","url","playStatus","onFinishedPlaying","loop","autoLoad","volume","soundVolume","module","exports","p","setImmediate","OrderListModel","mobx__WEBPACK_IMPORTED_MODULE_0__","react_scroll__WEBPACK_IMPORTED_MODULE_2__","_graph_generated__WEBPACK_IMPORTED_MODULE_3__","branches","collapsedCategories","Finished","branchesFilter","hasBranchFilter","isSingleBranchSelected","firstBranchId","orderMap","clearBranchFilter","clear","setBranchFilter","extend","detailOpen","isOrderDetailOpen","orderId","has","isCategoryCollapsed","categoryCode","toggleOrderDetail","delete","add","toggleCategoryCollapse","category","index","indexOf","focusOrderDetail","scroller","scrollTo","smooth","containerId","absolute","observerOrderDetail","bind","localStorage","setItem","./af","./af.js","./ar","./ar-dz","./ar-dz.js","./ar-kw","./ar-kw.js","./ar-ly","./ar-ly.js","./ar-ma","./ar-ma.js","./ar-sa","./ar-sa.js","./ar-tn","./ar-tn.js","./ar.js","./az","./az.js","./be","./be.js","./bg","./bg.js","./bm","./bm.js","./bn","./bn.js","./bo","./bo.js","./br","./br.js","./bs","./bs.js","./ca","./ca.js","./cs","./cs.js","./cv","./cv.js","./cy","./cy.js","./da","./da.js","./de","./de-at","./de-at.js","./de-ch","./de-ch.js","./de.js","./dv","./dv.js","./el","./el.js","./en-SG","./en-SG.js","./en-au","./en-au.js","./en-ca","./en-ca.js","./en-gb","./en-gb.js","./en-ie","./en-ie.js","./en-il","./en-il.js","./en-nz","./en-nz.js","./eo","./eo.js","./es","./es-do","./es-do.js","./es-us","./es-us.js","./es.js","./et","./et.js","./eu","./eu.js","./fa","./fa.js","./fi","./fi.js","./fo","./fo.js","./fr","./fr-ca","./fr-ca.js","./fr-ch","./fr-ch.js","./fr.js","./fy","./fy.js","./ga","./ga.js","./gd","./gd.js","./gl","./gl.js","./gom-latn","./gom-latn.js","./gu","./gu.js","./he","./he.js","./hi","./hi.js","./hr","./hr.js","./hu","./hu.js","./hy-am","./hy-am.js","./id","./id.js","./is","./is.js","./it","./it-ch","./it-ch.js","./it.js","./ja","./ja.js","./jv","./jv.js","./ka","./ka.js","./kk","./kk.js","./km","./km.js","./kn","./kn.js","./ko","./ko.js","./ku","./ku.js","./ky","./ky.js","./lb","./lb.js","./lo","./lo.js","./lt","./lt.js","./lv","./lv.js","./me","./me.js","./mi","./mi.js","./mk","./mk.js","./ml","./ml.js","./mn","./mn.js","./mr","./mr.js","./ms","./ms-my","./ms-my.js","./ms.js","./mt","./mt.js","./my","./my.js","./nb","./nb.js","./ne","./ne.js","./nl","./nl-be","./nl-be.js","./nl.js","./nn","./nn.js","./pa-in","./pa-in.js","./pl","./pl.js","./pt","./pt-br","./pt-br.js","./pt.js","./ro","./ro.js","./ru","./ru.js","./sd","./sd.js","./se","./se.js","./si","./si.js","./sk","./sk.js","./sl","./sl.js","./sq","./sq.js","./sr","./sr-cyrl","./sr-cyrl.js","./sr.js","./ss","./ss.js","./sv","./sv.js","./sw","./sw.js","./ta","./ta.js","./te","./te.js","./tet","./tet.js","./tg","./tg.js","./th","./th.js","./tl-ph","./tl-ph.js","./tlh","./tlh.js","./tr","./tr.js","./tzl","./tzl.js","./tzm","./tzm-latn","./tzm-latn.js","./tzm.js","./ug-cn","./ug-cn.js","./uk","./uk.js","./ur","./ur.js","./uz","./uz-latn","./uz-latn.js","./uz.js","./vi","./vi.js","./x-pseudo","./x-pseudo.js","./yo","./yo.js","./zh-cn","./zh-cn.js","./zh-hk","./zh-hk.js","./zh-tw","./zh-tw.js","webpackAsyncContext","req","ids","e","then","t","resolve","Error","./chs","./chs.js","./da-dk","./da-dk.js","./en-za","./en-za.js","./es-es","./es-es.js","./nl-nl","./nl-nl.js","./no","./no.js","./pt-pt","./pt-pt.js","./ru-ua","./ru-ua.js","./uk-ua","./uk-ua.js","./cs/messages.po","./de/messages.po","./en-dev/messages.po","./en/messages.po","./pl/messages.po","./sk/messages.po","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","endpoint","persistenceKey","sentryDSN","MessageStyled","ConnectionWarning","connectionWarningSound","index_es","open","disableBackdropClick","disableEscapeKeyDown","icons_index_es","_lingui_react","LogRoute","RedirectAfterLogin","route","when","RedirectAfterLogout","invalidate","PasswordLoginRoute","PasswordChangeRoute","PasswordResetRoute","MainDashboardPage","OrderRoutes","KitchenRoutes","SettingsRoutes","OverviewRoutes","SupportPage","Routing","Suspense","fallback","LogRoute_LogRoute","RedirectAfterLogin_RedirectAfterLogin","ErrorPage_templateObject","orange","Center","ErrorPage","onFeedback","style","ServiceUnreachablePage_templateObject","ServiceUnreachablePage_templateObject2","ServiceUnreachablePage","onRetry","components","href","ServiceUnreachablePage_Center","ServiceUnreachablePage_IconStyled","makeError","message","DefaultErrorHandler","_useSnackBar","_React$useState2","errorKind","setErrorKind","onUnhandledError","isChunkError","Sentry","withScope","scope","setLevel","Severity","Debug","captureException","flushSentry","reload","isApolloError","isNetworkUnreachableError","onNetworkError","isUnreachable","onOperationError","onUserErrors","messages","dist","tools_dist","onError","ServiceUnreachablePage_ServiceUnreachablePage","ErrorPage_ErrorPage","showFeedback","showReportDialog","labelClose","GlobalStyles","createGlobalStyle","GlobalStyles_templateObject","backgroundImage","Router","dist_index_es","handleGetUserConfirm","getUserConfirmation","successStyle","SnackProvider_templateObject","snackStyles","variantSuccess","variantInfo","variantError","SnackProvider_templateObject2","variantWarning","SnackProvider","build","maxSnack","classes","anchorOrigin","horizontal","vertical","UpdateHandler","_ref$onRestart","onRestart","_ref$autoUpdateDelay","autoUpdateDelay","SECOND","_ref$postponeTimeout","postponeTimeout","MINUTE","_ref$updateCheckInter","updateCheckInterval","HOUR","_ref$serviceWorker","serviceWorker","registrationWorkerRef","updateWorkerRef","useObservable","updatePending","applyingUpdate","useInterval","update","catch","onMessage","event","removeEventListener","updateWorker","register","onInit","reg","onUpdate","sw","init","onCancel","onConfirm","postMessage","useObserver","UpdateSnack","autoHideDuration","now","useTimer","interval","addMilliseconds","endTime","remainingSeconds","formatDistanceStrict","disableWindowBlurListener","action","size","UserBootstrap","_useRoot","_useQUserBootstrap","finishBootstrap","configureScope","setUser","setExtra","applyUserData","applyAccess","access","applyPermissions","permissions","username","roles","AppMain","useReleaseCabinet","DefaultErrorHandler_DefaultErrorHandler","UpdateHandler_UpdateHandler","Router_Router","index_module","isReady","Routing_Routing","ThemeProvider","theme","createMuiTheme","typography","useNextVariants","core_styles","AppProvider","useSentryInit","ThemeProvider_ThemeProvider","RootProvider","SnackProvider_SnackProvider","rootElement","getElementById","AppProvider_AppProvider","AppMain_AppMain","RootContext","createContext","createApolloClient","createDefaultApolloClient","headers","computed","Authorization","communicationToken","token","ApolloLink","operation","forward","canCommunicate","operationName","context","getContext","setContext","Observable","sub","subscribe","networkError","complete","unsubscribe","createAuthLink","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","offlineLink","QueueLink","close","createOfflineLink","createNetworkLink","persistModel","_persistModel","modelName","stateKey","writeState","getType","name","snapshot","localforage","getItem","applySnapshot","getSnapshot","t0","removeItem","onSnapshot","getLoginUrl","password","PasswordLoginModel","errorCode","hasFailed","setFailure","setSuccess","authenticate","requestToken","_requestToken","fetch","response","payload","Accept","json","status","String","LoginProviderModel","passwordLogin","PasswordChangeMutation","AuthModel","provider","tokenForPasswordChange","cache","reset","setForPasswordChange","temporaryB64EncodedToken","atob","changePassword","_changePassword","_ref$updateUserPasswo","fetchPolicy","updateUserPassword","ConfigModel","orderListPollIntervalSec","orderListSoundIntervalSec","UserModel","maybe","number","soundIgnore","isLoaded","brands","canCancelOrders","canCreateOrder","branchesId","R","defaultBranch","filterBranches","predicate","canQuery","queryName","queries","toLowerCase","canMutate","mutationName","mutations","rawCode","uniqBy","makeSet","fields","Set","compose","toLower","subscriptions","setLanguage","ignore","setSoundVolume","faker","CreateOrderModel","getDefaultProps","currentBranch","deliveryType","isDelivery","Messenger","deliverAt","deliverAtIso","startOfMinute","hasAddress","deliveryAddress","fakeAddress","clearGps","phone","phonePrefix","prefix","country","customer","emails","email","phones","vamCustomer","isFound","_self$vamCustomer","lastOrder","defaults","fakeValues","hasOrder","createOrderVariables","callEventId","eventId","updateOrderVariables","acceptOrderVariables","resetOrder","resetModel","setOrder","useLocation","clearLocation","setMinimalPrice","minimalPrice","selectBranch","userIsCalling","setDeliveryMinutes","minutes","deliveryMinutes","updateFormValues","touched","updateFromVam","updateFormWithFakeValues","internet","phoneNumberFormat","lorem","sentence","slice","resolver","makeResolver","selectSidedishesForRecipe","sidedishMode","sidedishRootId","selectSidedishesForItem","itemId","sidedishSelectionConfirmed","sidedishes","isConfirmed","sidedishSelectionCancel","notDeliveryLocation","sidedishSelection","GPSCzechia","MapModel","zoom","mapRef","setMapRef","updateZoom","getZoom","updatePosition","getCenter","OrderMapModel","activeDriverId","activateDriver","driverId","position","panTo","OrderModel","list","StatisticsModel","drivers","closureBranch","maybeNull","dateTimeFrom","startOfDay","dateTimeTo","endOfDay","updateFilter","setDriversFilter","setClosureBranch","branch","setTodayOrdersFilter","order","SettingsBaseModel","MenuStockItemFragment","MenuStockModel_graphql_templateObject","MenuStockCreateMutation","MenuStockUpdateMutation","MenuStockDeleteMutation","MenuStockModel","createItem","updateItem","stockId","deleteItem","_deleteItem","label","plu","allergens","wareUnit","allowNegative","MenuModel","stock","SettingsModel","selectedBranchId","menu","head","ZoneMapModel","currentZonePoints","updateZonePoints","points","clearZonePoints","panToZone","_panToZone","zoneId","zone","panToBranch","_panToBranch","CreateZoneMutation","ZoneModel_graphql_templateObject","UpdateZonePriorityMutation","ZoneModel_graphql_templateObject2","DestroyZoneMutation","ZoneModel_graphql_templateObject3","ZoneModel","brandId","brand","branchFilterId","branchFilterPredicate","zoneFilterPredicate","getZoneVariables","zoneColor","minimalOrderPrice","priceRangeRules","normalizePriceRangeRule","geoPolygon","setBrandFilter","brandBranches","clearBrandFilter","createZone","flow","onZoneCreate","GZones","zones","destroyZone","changeZonePriority","oldIndex","newIndex","updateZonePriority","priority","numberOrNull","num","isNaN","range","toPrice","RootModel","createOrder","statistics","persistedModels","isInit","setInit","_React$useState3","create","useAsyncEffect","Provider","useContext"],"mappings":"4FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAA,IAAAC,EAAAN,EAAA,KAEaG,EAAc,SAACI,GAAD,OACzB,IAAIC,OAAOC,KAAKC,OAAOC,OAAOJ,EAAIK,UAAWD,OAAOJ,EAAIM,aAE7CT,EAAc,SAACU,GAAD,MAA2C,CACpEF,SAAUD,OAAOG,EAAOC,OACxBF,UAAWF,OAAOG,EAAOE,SASdX,EAAkB,SAAAY,GAIF,IAH3BC,EAG2BD,EAH3BC,OAG2BC,EAAAF,EAF3BG,oBAE2B,IAAAD,EAFZ,IAEYA,EAAAE,EAAAJ,EAD3BK,mBAC2B,IAAAD,EADb,GACaA,EAC3B,OAAO,IAAIE,MAAMD,GAAaE,KAAK,MAAMC,IAAI,SAACC,EAAGC,GAC/C,IAAMC,EAAU,IAAMN,EAAeK,EACrC,OAAOE,kCAAwBX,EAAQE,EAAcQ,0RCjBzD,IAAME,EAAmBC,IAAOC,IAAVC,KAmBPC,IAXc,kBAC3BC,EAAAC,EAAAC,cAACP,EAAD,CAAkBQ,KAAK,UACrBH,EAAAC,EAAAC,cAAA,OACEE,IAAKC,IACLC,IAAKC,IAAUC,gBACfC,MAAO,IACPC,OAAQ,uGCbDC,EAAc,eAAA7B,EAAA8B,OAAAC,EAAA,EAAAD,CAAAE,EAAAb,EAAAc,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAJ,EAAAb,EAAAkB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACPL,EADO,YACtBC,EADsBE,EAAAG,QAEdL,EAAOM,OAFO,CAAAJ,EAAAE,KAAA,eAAAF,EAAAK,OAAA,SAGnBP,EAAOM,QAHY,cAAAJ,EAAAK,OAAA,SAKrB,MALqB,wBAAAL,EAAAM,SAAAV,EAAAW,SAAH,gBAAAC,GAAA,OAAA9C,EAAA+C,MAAAF,KAAAG,YAAA,4ICMdC,EAA2C,SAAAjD,GAIlD,IAAAkD,EAAAlD,EAHJmD,gBAGI,IAAAD,KADDE,GACCpD,EAFJqD,KAEIvB,OAAAwB,EAAA,EAAAxB,CAAA9B,EAAA,sBAEJ,IADiBuD,cAATC,KACEC,oBACR,OAAON,EAAWjC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,MAAsBxC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,MAE1C,GAAIP,EAAMQ,WAAwC,kBAApBR,EAAMQ,UAAwB,KAClDA,EAA2BR,EAA3BQ,UAAWC,EAAgBT,EAAhBS,KAAMC,EAAUV,EAAVU,MACzB,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAWF,KAAMA,EAAMC,MAAOA,EAAOF,UAAWA,IAEzD,OAAO1C,EAAAC,EAAAC,cAAC4C,EAAA,MAAUZ,sCC1BpBrE,EAAAC,EAAAC,EAAA,sBAAAgF,IAAA,IAAAC,EAAAnF,EAAA,IAAAoF,EAAApF,EAAA,GAAAmC,EAAAnC,EAAAqF,EAAAD,GAAAE,EAAAtF,EAAA,IAWakF,EAA6B,SAAAjE,GAAgC,IAA7BsE,EAA6BtE,EAA7BsE,OAA6BC,EAAAvE,EAArBwE,eAAqB,IAAAD,KAClEE,EAAOlB,cACb,OAAmB,IAAZiB,EACLtD,EAAAC,EAAAC,cAAC8C,EAAA,SAAD,KAAW,kBAAMhD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuD,SAAA,KAAGJ,EAAOG,MAE3BH,EAAOG,qOCJX,IAIME,EAAiB7D,IAAO8D,KAAV5D,IAJA,SAAAhB,GAAsD,IAAA6E,EAAA7E,EAAnD8E,gBAAmD,IAAAD,EAAxC,IAAwCA,EAAAE,EAAA/E,EAAnCgF,aACrC,OAAOF,QADiE,IAAAC,EAApB,MAAoBA,IAM/D,SAAC3B,GAAD,OAAmBA,EAAM6B,QAGvBC,EAAyB,SAAAC,GAAA,IACpCC,EADoCD,EACpCC,SADoCC,EAAAF,EAEpCF,aAFoC,IAAAI,EAE5BC,IAAOC,MAFqBF,EAGpCP,EAHoCK,EAGpCL,SACAE,EAJoCG,EAIpCH,aAJoC,OAMpCI,EACElE,EAAAC,EAAAC,cAACuD,EAAD,CACEM,MAAOA,EACPH,SAAUA,EACVE,aAAcA,EACdI,SAAUA,EACVI,UAAU,kBAETJ,GAED,wCCrCNrG,EAAAC,EAAAC,EAAA,sBAAAwG,IAAA1G,EAAAC,EAAAC,EAAA,sBAAAyG,IAAA3G,EAAAC,EAAAC,EAAA,sBAAA0G,IAAA,IAEMC,EAFN7G,EAAA,IAEiB8G,WAAWC,IAAIC,UAAUC,QAE1CC,OAAOC,iBAAiB,UAAW,kBAAMN,EAASO,KAAI,KACtDF,OAAOC,iBAAiB,SAAU,kBAAMN,EAASO,KAAI,KAE9C,IAAMV,EAAkB,kBAAMG,EAASQ,OACjCV,EAAmB,kBAAOE,EAASQ,OAEzC,SAAST,EAAgBU,GAC9B,OAAOT,EAASpB,QAAQ,SAAA8B,IACE,IAApBA,EAAOC,WAA0C,IAApBD,EAAOE,UACtCH,ioCCSN,IAAMI,EAAa,SAACC,GAAD,OAAwB,SAACtD,GAAD,OACzCuD,YAAkBvD,EAAM6B,MAAQyB,KAE5BE,EAAoB9F,IAAO+F,OAAV7F,IACP8F,IAAQC,aAAeD,IAAQE,gBAChCF,IAAQC,aAAeD,IAAQE,gBACnC,SAAAhH,GAAA,IAAAiH,EAAAjH,EAAG2B,MAAH,gBAAAsF,EAAW,OAAXA,GACC,SAAA9B,GAAA,IAAA+B,EAAA/B,EAAGvD,OAAH,gBAAAsF,EAAY,OAAZA,GAIOC,IAASC,OACNX,EAAW,IAYTA,EAAW,IAGXA,EAAW,IAQ7BY,EAAoBvG,IAAOC,IAAVuG,KAMjBC,EAA8BzG,YAAOuG,EAAPvG,CAAH0G,KASpBC,EAAcC,IAAMC,WAI/B,SAAAC,EAYEC,GACG,IAXDC,EAWCF,EAXDE,SACA1C,EAUCwC,EAVDxC,SAUC2C,EAAAH,EATDI,iBASC,IAAAD,EATWzC,IAAOC,MASlBwC,EAAAE,EAAAL,EARDM,gBAQC,IAAAD,EARU,EAQVA,EAAAE,EAAAP,EAPD3C,aAOC,IAAAkD,EAPO7C,IAAO8C,WAOdD,EAAAE,EAAAT,EANDU,sBAMC,IAAAD,KALDE,EAKCX,EALDW,MACAC,EAICZ,EAJDY,KACGpF,EAGFtB,OAAAwB,EAAA,EAAAxB,CAAA8F,EAAA,wFACH,OACEa,EAAAtH,EAAAC,cAACwF,EAAD9E,OAAA4G,OAAA,CAAmBzD,MAAOA,GAAW7B,EAArC,CAA4CuF,IAAKd,IAC9CzC,GACCqD,EAAAtH,EAAAC,cAACwH,EAAA,EAAD,CAAMxD,SAAUA,EAAUH,MAAO+C,EAAWlD,SAAUoD,IAGvDM,GACCF,GACEG,EAAAtH,EAAAC,cAACmG,EAAD,KAA8BiB,GAGjCA,IACEF,GAAkBG,EAAAtH,EAAAC,cAACiG,EAAD,KAAoBmB,GAExCD,EACAT,0NC1FT,IAsBMe,EAAiB/H,YAAO,MAAPA,CAAHE,IAtBE,SAAAhB,GAGR,IAFL2B,EAEK3B,EAFZ2B,MAEYmH,EAAA9I,EADZ+I,UAAWA,OACC,IAAAD,EADWhC,IAAQE,gBACnB8B,EACZ,YAAcE,IAAVrH,EACK,GAEP,UAAAsH,OAAiBtH,GAAjBsH,OAAyBF,IAIN,SAAA5D,GAGT,IAFJvD,EAEIuD,EAFZvD,OAEYsH,EAAA/D,EADZgE,WAAYA,OACA,IAAAD,EADapC,IAAQE,gBACrBkC,EACZ,YAAeF,IAAXpH,EACK,GAEP,WAAAqH,OAAkBrH,GAAlBqH,OAA2BE,KASlBC,EAA0B,SAAAxB,GASjC,IARJjG,EAQIiG,EARJjG,MAQI0H,EAAAzB,EAPJmB,iBAOI,IAAAM,EAPQvC,IAAQE,gBAOhBqC,EANJzH,EAMIgG,EANJhG,OAMI0H,EAAA1B,EALJuB,kBAKI,IAAAG,EALSxC,IAAQE,gBAKjBsC,EAJJC,EAII3B,EAJJ2B,OACAzB,EAGIF,EAHJE,SACAtC,EAEIoC,EAFJpC,UACGpC,EACCtB,OAAAwB,EAAA,EAAAxB,CAAA8F,EAAA,6EACEvF,EACJoG,EAAAtH,EAAAC,cAACyH,EAAD/G,OAAA4G,OAAA,CACE/G,MAAOA,EACPoH,UAAWA,EACXnH,OAAQA,EACRuH,WAAYA,EACZ3D,UAAWA,GACPpC,GAEH0E,GAIL,YAAkBkB,IAAXO,EACLlH,EAEAoG,EAAAtH,EAAAC,cAACoI,EAAA,EAAD,CAAWD,OAAQA,GAASlH,sCCpEhCtD,EAAAC,EAAAC,EAAA,sBAAAwK,IAAA,IAAAC,EAAA3K,EAAA,IAKa0K,EALb1K,EAAA,IAK6B4K,EAAUC,MAAM,YAC1CC,SAAS,iBAAO,CACfC,YAAa,MAEdC,QAAQ,SAAAC,GAAI,MAAK,CAChBC,eADgB,SACDC,GACbF,EAAKF,YAAcI,MAGtBC,MAAM,SAAAH,GAAI,MAAK,CACdI,eACE,OAAOC,YAAsBL,GAAMM,SAASF,4aCFlD,IAAMG,EAAczJ,IAAO0J,GAAVxJ,IACNsE,IAAOmF,WAOZC,EAAmB7E,aAAW8E,MAAc,IAElDC,kBAAQ,WACN,IAAMC,EAAYvK,MAAMwK,KAAKJ,GAAkBK,MAE7CC,SAASC,MADPJ,EACF,GAAA5B,OAAoB4B,EAApB,QAAA5B,OAAoCxH,IAAUC,iBAE7BD,IAAUC,kBAI/B,IAMawJ,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAApJ,OAAAsJ,EAAA,EAAAtJ,CAAAe,KAAAqI,GAAApJ,OAAAuJ,EAAA,EAAAvJ,CAAAe,KAAAf,OAAAwJ,EAAA,EAAAxJ,CAAAoJ,GAAAnI,MAAAF,KAAAG,YAAA,OAAAlB,OAAAyJ,EAAA,EAAAzJ,CAAAoJ,EAAAC,GAAArJ,OAAA0J,EAAA,EAAA1J,CAAAoJ,EAAA,EAAAO,IAAA,oBAAAC,MAAA,WAIIhB,EAAiBiB,KAAK9I,KAAKO,MAAM6H,SAJrC,CAAAQ,IAAA,qBAAAC,MAAA,SAMqBE,GACjB,IAAMlL,EAAMgK,EAAiBmB,UAAUC,IAAGC,OAAOH,EAAUX,QACvDvK,GAAO,GACTgK,EAAiBsB,OAAOtL,EAAK,EAAGmC,KAAKO,MAAM6H,SATjD,CAAAQ,IAAA,uBAAAC,MAAA,WAaIhB,EAAiBuB,OAAOpJ,KAAKO,MAAM6H,SAbvC,CAAAQ,IAAA,SAAAC,MAAA,WAgBI,OAAO,SAhBXR,EAAA,CAA+BxD,IAAMwE,WAAxBhB,EACJiB,MAmBT,SAAAnM,GAAkE,IAAxCiL,EAAwCjL,EAAxCiL,MAAU7H,EAA8BtB,OAAAwB,EAAA,EAAAxB,CAAA9B,EAAA,WAChE,OAAOoM,EAAAjL,EAAAC,cAACiL,EAAA,MAADvK,OAAA4G,OAAA,GAAWtF,EAAX,CAAkBkB,OAAQ,kBAAM8H,EAAAjL,EAAAC,cAAC8J,EAAD,CAAWD,MAAOA,SArB9CC,EAEJoB,QAR0B,kBACjCF,EAAAjL,EAAAC,cAACmL,EAAA,SAAD,KACG,kBAAMH,EAAAjL,EAAAC,cAACmJ,EAAD,KAAcG,EAAiB8B,KAAK,meCvBxC,IAAMC,EAAO3L,IAAOC,IAAVC,IAgBjB,SAAAmE,GAA+C,IAAjBF,EAAiBE,EAAjBF,MAC5B,OAAOyH,IAAMzH,GAASK,IAAOmF,WAC1BkC,MAAM,IACNC,QAAQ,IACRC,UAGL,SAAsBzJ,GACpB,OAAOA,EAAM0J,WAAaxH,IAAOyH,OArBhB5F,IAASsF,KAS5B,SAAAzM,GAA+C,IAAAgN,EAAAhN,EAAzBiN,QACpB,YAD6C,IAAAD,EAAf,GAAeA,GAe/C,SAAApF,GAAwE,IAAAsF,EAAAtF,EAAnCuF,gBACnC,QADsE,IAAAD,MAEpE,MAAO,GAET,OAAOE,YAAP9F,OArBFmF,EAAKY,YAAc,8GCbnB,SAASC,EAAU3L,GACjB,MAAO,CAAC,CAAE4L,EAAG,OAAQC,EAAG,EAAGC,EAAG,EAAGC,EAAG/L,EAAOgM,EAAG,KAGzC,IAAMC,EAAiD,SAAA5N,GAAA,IAC5D8H,EAD4D9H,EAC5D8H,SAD4Db,EAAAjH,EAE5D2B,aAF4D,IAAAsF,EAEpD,GAFoDA,EAGzD7D,EAHyDtB,OAAAwB,EAAA,EAAAxB,CAAA9B,EAAA,6BAK5DkB,EAAAC,EAAAC,cAACyM,EAAA,EAAD/L,OAAA4G,OAAA,CAAYoF,QAASR,EAAU3L,IAAYyB,GACzClC,EAAAC,EAAAC,cAAA,OAAKqK,IAAI,QAAQ3D,uCCnBrB/I,EAAAC,EAAAC,EAAA,sBAAA8O,IAAA,IAAAC,EAAAjP,EAAA,KAEMkP,EAAiB,CAAEC,QAAS,WAC5BC,EAAe,CAAED,QAAS,SAC1BE,EAAiB,CAAEF,QAAS,WAC5BG,EAAc,CAAEH,QAAS,QAExB,SAASH,IAAc,IACpBO,EAAoBC,wBAApBD,gBACR,MAAO,CACLA,kBACAE,eAAgB,SAACC,GAAD,OACdH,EAAgBG,EAAcR,IAChCS,aAAc,SAACD,GAAD,OACZH,EAAgBG,EAAcN,IAChCQ,eAAgB,SAACF,GAAD,OACdH,EAAgBG,EAAcL,IAChCQ,YAAa,SAACH,GAAD,OACXH,EAAgBG,EAAcJ,wCClBpCtP,EAAAC,EAAAC,EAAA,sBAAA4P,IAAA,IAAAC,EAAA/P,EAAA,GAAAgQ,EAAAhQ,EAAAqF,EAAA0K,GAAAE,EAAAjQ,EAAA,KAAAkQ,EAAAlQ,EAAA,IAKa8P,EAAyB,kBACpCE,EAAA5N,EAAAC,cAAA2N,EAAA5N,EAAAuD,SAAA,KACEqK,EAAA5N,EAAAC,cAAC4N,EAAA,EAAD,CAAW/D,MAAOgE,EAAA,EAAIxO,EAAA,eACtBsO,EAAA5N,EAAAC,cAAA,UAAK6N,EAAA,EAAIxO,EAAA,6JCAN,SAASyO,EAA8B/M,GAiE5C,OAtDiC,SAAAiB,GAC/B,IAAM+L,EAAUC,iBAAiB,IAC3BC,EAAiBC,sBAAY,WACjCH,EAAQI,QAAQC,QAAQ,SAAAC,GAAE,OAAIA,MAC9BN,EAAQI,QAAQG,OAAS,GACxB,IAEHC,oBACE,WACE,OAAON,GAET,CAACF,EAAQI,QAAQG,SAXqB,IAetCpL,EAOElB,EAPFkB,OACAsL,EAMExM,EANFwM,eAhBsCC,EAsBpCzM,EALF0M,qBAjBsC,IAAAD,KAAAE,GAsBpC3M,EAJF4M,YAIE5M,EAHF6M,gCAnBsC,IAAAF,KAoBtCjI,EAEE1E,EAFF0E,SACGoI,EArBmCpO,OAAAwB,EAAA,EAAAxB,CAsBpCsB,EAtBoC,gGAwBxC,OAEElC,EAAAC,EAAAC,cAAC+O,EAAA,MAADrO,OAAA4G,OAAA,CAAOvG,MAAOA,GAAW+N,GACtB,SAAA9N,GACC,GAAIA,EAAOgO,QAAS,CAClB,GAA6B,oBAAlBN,EACT,OAAOA,EAAc1N,GAChB,IAAsB,IAAlB0N,EACT,OAAO5O,EAAAC,EAAAC,cAACiP,EAAA,EAAD,MAGX,GAAIjO,EAAOkO,MACT,MAAMlO,EAAOkO,MAKf,GAHIL,GACFd,EAAQI,QAAQ5D,KAAKhG,YAAgBvD,EAAOmO,UAE1CnO,EAAOoO,KAAM,CACf,GAAIZ,EACF,OAAO1O,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuD,SAAA,KAAGkL,EAAexN,EAAOoO,KAAMpO,IAExC,GAAIkC,EACF,OAAOA,EAAOlC,EAAOoO,KAAMpO,GAG/B,OAAO0F,GAAY,0CCpE7B/I,EAAAC,EAAAC,EAAA,sBAAAqG,IAAAvG,EAAAC,EAAAC,EAAA,sBAAA0H,IAAA5H,EAAAC,EAAAC,EAAA,sBAAAkI,IAAApI,EAAAC,EAAAC,EAAA,sBAAA6H,IAAA/H,EAAAC,EAAAC,EAAA,sBAAAwR,IAAA,IAIYnL,EAJZoL,EAAA3R,EAAA,KAAA4R,EAAA5R,EAAAqF,EAAAsM,GAAAE,EAAA7R,EAAA,cAIYuG,gSAiBL,IAMK6B,EANCR,EAAoBmF,IAAG+E,MAAM,SAAC5L,EAAeyB,GAAhB,OACxCgG,IAAMzH,GACH0H,MAAMjG,GACNmG,qBAGO1F,2EAML,IAAML,EAAU,CACrBgK,2BAA4B,SAC5BC,MAAO,UACPC,OAAQ,SACRC,qBAAsB,SACtBlK,aAAc,OACdmK,kBAAmB,GACnBlK,gBAAiB,MACjBmK,oBAAqB,GACrBC,oBAAqB,YAGVX,EAAY,CACvBY,YAAa,UACbC,eAAgB,0CC/ClBvS,EAAAC,EAAAC,EAAA,sBAAAsS,IAAA,IAAAC,EAAAzS,EAAA,IAAA0S,EAAA1S,EAAAqF,EAAAoN,GAAArN,EAAApF,EAAA,GAAAmC,EAAAnC,EAAAqF,EAAAD,GAAAH,EAAAjF,EAAA,IAQM2S,EAAMC,IAAM,WAELJ,EAAmD,SAAAvR,GAAA,IAAA4R,EAAA5R,EAC9D6R,iBAD8D,IAAAD,KAAA,OAG9D1Q,EAAAC,EAAAC,cAAC4C,EAAA,MAAD,CACEH,KAAK,SACLiE,SAAU,SAAA3C,GAAyB,IAAtB2M,EAAsB3M,EAAtB2M,MAAOC,EAAe5M,EAAf4M,SAClB,OAAID,EACK,MAETJ,EAAI,2BAEFxQ,EAAAC,EAAAC,cAAC4C,EAAA,SAAD,CACEgO,GAAI,CACFC,SAAU,SACVC,MAAO,CAAEC,OAAQN,EAAYE,EAASE,SAAW,+CCxB7DlT,EAAAC,EAAAC,EAAA,sBAAAmT,IAAArT,EAAAC,EAAAC,EAAA,sBAAAoT,IAAAtT,EAAAC,EAAAC,EAAA,sBAAAqT,IAAAvT,EAAAC,EAAAC,EAAA,sBAAAsT,IAAAxT,EAAAC,EAAAC,EAAA,sBAAAuT,IAAAzT,EAAAC,EAAAC,EAAA,sBAAAwT,IAAA1T,EAAAC,EAAAC,EAAA,sBAAAyT,IAAA3T,EAAAC,EAAAC,EAAA,sBAAA0T,IAAA,IAAAC,EAAA7T,EAAA,IAAA8T,EAAA9T,EAAA,KAAA+T,EAAA/T,EAAA,KAAAgU,EAAAhU,EAAAqF,EAAA0O,GAAAE,EAAAjU,EAAA,KAAAkU,EAAAlU,EAAAqF,EAAA4O,GAOaE,EAAgBC,IAEhBC,EAAeC,4BAAkB,CAAEC,OAAQJ,IAE3Cd,EAAiB,UAOjBC,GANiBe,EAAahB,GAGjBgB,EADA,YAIGG,iBADA,eAIhBjB,EAAac,EADA,QAIbI,EAAiBJ,EADA,iBAGjBb,EAAc,WACdC,EAAc,SAAAiB,GAAK,OAAIC,IAAQD,GAAOF,OAAOhB,IAE7CE,EAA6B,SAACkB,GAAD,OACxCC,oBAAUD,EAAM,IAAIE,MAAUvB,EAAWqB,GAAQH,EAAeG,IAErDjB,EAAgB,SAACoB,GAC5B,OAAKA,EAGAA,EAAQC,OAYRD,EAAQE,YAGb,GAAA/K,OAAU6K,EAAQC,OAAlB,KAAA9K,OAA4B6K,EAAQE,YAApC,MAAA/K,OAAoD6K,EAAQG,MAF1D,GAAAhL,OAAU6K,EAAQC,OAAlB,MAAA9K,OAA6B6K,EAAQG,MAZjCH,EAAQG,MAAQH,EAAQE,YAC1B,GAAA/K,OAAU6K,EAAQG,KAAlB,KAAAhL,OAA0B6K,EAAQE,YAAlC,MAAA/K,OAAkD6K,EAAQ5B,OAExD4B,EAAQG,KACNH,EAAQ5B,MACV,GAAAjJ,OAAU6K,EAAQG,KAAlB,MAAAhL,OAA2B6K,EAAQ5B,OAE9B4B,EAAQG,KAEjB,GAAAhL,OAAU6K,EAAQ5B,OAZX,IAoBJ,SAASS,EAAeuB,GAC7B,MAAO,GAAAjL,OAAGiL,EAAKC,SAAR,KAAAlL,OAAoBiL,EAAKE,WAAYC,yCCvD9C,IAAAC,EAAAvV,EAAA,KAAAA,EAAAC,EAAAC,EAAA,sBAAAqV,mHCSaC,EAAgC,SAAAvU,GAA4B,IAAzB8H,EAAyB9H,EAAzB8H,SAAa1E,EAAYtB,OAAAwB,EAAA,EAAAxB,CAAA9B,EAAA,cACvE,OACEkB,EAAAC,EAAAC,cAACoT,EAAA,EAAD1S,OAAA4G,OAAA,CACE/G,MAAOmF,IAAQC,aACfnF,OAAQkF,IAAQC,cACZ3D,GAEH0E,sCChBP/I,EAAAC,EAAAC,EAAA,sBAAAwV,IAAA,IAAA3F,EAAA/P,EAAA,GAAAgQ,EAAAhQ,EAAAqF,EAAA0K,GAMa2F,EAAmC,SAAAzU,GAAA,IAAA0U,EAAA1U,EAAGwI,YAAH,IAAAkM,EAAU,MAAVA,EAAA,OAC9C3F,EAAA5N,EAAAC,cAAA,UAAKoH,+KCAMmM,EAAb,SAAAxJ,GAAA,SAAAwJ,IAAA,IAAAC,EAAAC,EAAA/S,OAAAgT,EAAA,EAAAhT,CAAAe,KAAA8R,GAAA,QAAAI,EAAA/R,UAAA0M,OAAAsF,EAAA,IAAA1U,MAAAyU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAjS,UAAAiS,GAAA,OAAAJ,EAAA/S,OAAAoT,EAAA,EAAApT,CAAAe,MAAA+R,EAAA9S,OAAAqT,EAAA,EAAArT,CAAA6S,IAAAS,KAAArS,MAAA6R,EAAA,CAAA/R,MAAAoG,OAAA+L,MACE9C,MAAQ,CAAEmD,aAAa,GADzBR,EAAA,OAAA/S,OAAAwT,EAAA,EAAAxT,CAAA6S,EAAAxJ,GAAArJ,OAAAyT,EAAA,EAAAzT,CAAA6S,EAAA,EAAAlJ,IAAA,SAAAC,MAAA,WAGI,OACE8J,EAAArU,EAAAC,cAAC6C,EAAA,EAAD,CACEO,SAAS,EACTF,OAAQ,SAAAtE,GAAA,IAAGkU,EAAHlU,EAAGkU,KAAH,OACNsB,EAAArU,EAAAC,cAACmT,EAAA,EAAD,KACEiB,EAAArU,EAAAC,cAACqG,EAAA,EAAD,CACExC,MAAOiP,EAAKuB,aAAenQ,IAAOoQ,MAAQpQ,IAAOqQ,IACjDvQ,SAAU8O,EAAKuB,aAAe,YAAc,aAC5CvN,SAAU,EACV0N,QAAS,WACP1B,EAAK2B,cAAc3B,EAAKuB,yBAbxCd,EAAA,CAAkCjN,IAAMwE,6lBCIxC,IAAM4J,EAAqBhV,IAAOC,IAAVC,IAEbsE,IAAOmF,UAELnF,IAAOC,OAGdwQ,EAAuBjV,IAAO8D,KAAV0C,IACfhC,IAAOmF,WAUZuL,EAAalV,IAAO8D,KAAV4C,KAMHyO,EAAeC,mBAAS,WAAM,IAOrC7I,EANI7J,EAASD,cAATC,KADiC2S,EAEfC,YACxB,CAAEC,GAAI7S,EAAK8S,QACX,CAAEC,MAAO/S,EAAKgT,kBAFRhG,EAFiC2F,EAEjC3F,KAYR,OALEnD,EATuC8I,EAE3B/F,QAOEqG,EAAA,EAAIhW,EAAA,iBAEP,GAAAwI,OAAMuH,EAAK0D,KAAKE,UAAhB,KAAAnL,OAA6BuH,EAAK0D,KAAKC,UAIlDqB,EAAArU,EAAAC,cAAC0U,EAAD,CAAoBY,cAAY,iBAC9BlB,EAAArU,EAAAC,cAACuV,EAAA,EAAD,CAAM3E,GAAG,WACPwD,EAAArU,EAAAC,cAAC2U,EAAD,KAAuB1I,GACvBmI,EAAArU,EAAAC,cAAC4U,EAAD,KACER,EAAArU,EAAAC,cAAC8D,EAAA,EAAD,CAAME,SAAS,2mBCrCzB,IAAMqB,EAAa,SAACC,GAAD,OAAwB,SAACtD,GAAD,OACzCsJ,IAAMtJ,EAAM6B,OACT0H,MAAMjG,GACNmG,WAEC+J,EAAmB9V,IAAO+F,OAAVgQ,IAIC1P,IAASC,OACpBN,IAAQC,aAAeD,IAAQE,gBAChCF,IAAQC,aAAeD,IAAQE,gBAIvBG,IAASC,OACNX,EAAW,IAOTA,EAAW,IAGXA,EAAW,IAQtBqQ,EAAyC,SAAA9W,GAMhD,IAAA+W,EAAA/W,EALJiF,aAKI,IAAA8R,EALIzR,IAAO8C,WAKX2O,EAAAC,EAAAhX,EAJJgI,iBAII,IAAAgP,EAJQ1R,IAAOC,MAIfyR,EAAAC,EAAAjX,EAHJkX,cAGI,IAAAD,KAFJE,EAEInX,EAFJmX,UACG/T,EACCtB,OAAAsV,EAAA,EAAAtV,CAAA9B,EAAA,4CACJ,OAAIkX,EAEA1B,EAAArU,EAAAC,cAACiW,EAAA,MAAD,KACG,SAAAlS,GAAA,IAAGmS,EAAHnS,EAAGmS,QAAH,OACC9B,EAAArU,EAAAC,cAACwV,EAAD9U,OAAA4G,OAAA,CACEzD,MAAOA,EACP2Q,QAAS,WACHuB,EACFG,EAAQ3L,KAAKwL,GAEbG,EAAQJ,WAGR9T,GAEJoS,EAAArU,EAAAC,cAAC8D,EAAA,EAAD,CAAME,SAAS,eAAeH,MAAO+C,EAAWlD,SAAU,SAOlE0Q,EAAArU,EAAAC,cAACuV,EAAA,EAAD,CAAM3E,GAAG,KACPwD,EAAArU,EAAAC,cAACwV,EAAD9U,OAAA4G,OAAA,CAAkBzD,MAAOA,GAAW7B,GAClCoS,EAAArU,EAAAC,cAAC8D,EAAA,EAAD,CAAME,SAAS,OAAOH,MAAO+C,EAAWlD,SAAU,6hBC5D1D,IAAMyS,EAAyBzW,IAAOC,IAAVyW,KAMtBC,EAAc,SAACrU,GAAD,OAClBA,EAAMsU,gBAAkB,WAAa,SAEjCC,EAAoB7W,IAAOC,IAAV6W,IACTH,GAORI,EAAqB/W,IAAOC,IAAV+W,IACVL,GAIRM,EAAiBjX,IAAOC,IAAViX,KAIPC,EAAyC,SAAAjY,GAAA,IAAAkY,EAAAlY,EACpDmY,iBADoD,IAAAD,EACxC,GADwCA,EAAAE,EAAApY,EAEpD8N,eAFoD,IAAAsK,EAE1C,GAF0CA,EAAAC,EAAArY,EAGpDsY,wBAHoD,IAAAD,KAAAE,EAAAvY,EAIpDwY,wBAJoD,IAAAD,KAAAE,EAAAzY,EAKpD0Y,qBALoD,IAAAD,KAAAE,EAAA3Y,EAMpD0X,uBANoD,IAAAiB,KAOpDxB,EAPoDnX,EAOpDmX,UACArP,EARoD9H,EAQpD8H,SACA8Q,EAToD5Y,EASpD4Y,WAToD,OAWpDpD,EAAArU,EAAAC,cAAAoU,EAAArU,EAAAuD,SAAA,KACGyT,GAAa3C,EAAArU,EAAAC,cAAC8J,EAAA,EAAD,CAAWD,MAAOkN,IAEhC3C,EAAArU,EAAAC,cAACuW,EAAD,CAAmBD,gBAAiBA,GAClClC,EAAArU,EAAAC,cAAC2W,EAAD,KAAiBa,GAChBJ,GACChD,EAAArU,EAAAC,cAAC2W,EAAD,KACEvC,EAAArU,EAAAC,cAACyX,EAAD,QAIFP,GACA9C,EAAArU,EAAAC,cAAC6B,EAAA,EAAD,CAAaY,KAAK,IAAID,UAAWqS,EAAc9S,UAAU,KAI7DqS,EAAArU,EAAAC,cAACyW,EAAD,CAAoBH,gBAAiBA,GACnClC,EAAArU,EAAAC,cAAC8J,EAAA,EAAUoB,QAAX,OAGFkJ,EAAArU,EAAAC,cAAC0X,EAAA,EAAD,CAAYhL,QAAOhM,OAAAiX,EAAA,EAAAjX,CAAMgM,IAAWhG,GAEpC0N,EAAArU,EAAAC,cAACmW,EAAD,KACE/B,EAAArU,EAAAC,cAAC4X,EAAD,CAAY9B,OAAQwB,EAAevB,UAAWA,mLC3E7C,IAAM8B,EAAYnY,YAAO,MAAPA,CAAHE,IACV,SAACoC,GAAD,OAAmBA,EAAMmG,2CCRrCxK,EAAAC,EAAAC,EAAA,sBAAA6Z,IAAA,IAAAhK,EAAA/P,EAAA,GAAAgQ,EAAAhQ,EAAAqF,EAAA0K,GAAAoK,EAAAna,EAAA,KAAAoa,EAAApa,EAAAqF,EAAA8U,GAGME,EAAkBC,wBAAcC,KAMzBR,EAAyC,SAAA9Y,GAAA,IACpD8H,EADoD9H,EACpD8H,SACAgG,EAFoD9N,EAEpD8N,QAFoD,OAIpDiB,EAAA5N,EAAAC,cAACgY,EAAD,CACE5T,UAAU,SACV+T,OAAQzL,EACR0L,KAAM,GACNC,UAAW,GACXlQ,OAAQ,CAAC,EAAG,GACZmQ,UAAU,EACVC,aAAa,EACbC,aAAa,EACbC,YAAa,KACbC,oBAAoB,GAEnBhS,qCCzBL/I,EAAAC,EAAAC,EAAA,sBAAA0K,IAAA,IAAA6H,EAAAzS,EAAA,IAAA0S,EAAA1S,EAAAqF,EAAAoN,GAAAuI,EAAAhb,EAAA,IAAAib,EAAAjb,EAAA,IAOa4K,EAAYsQ,IAAMC,QAAQ/P,MAAM,SAAAH,GAAI,MAAK,CACpD0H,UACE,OAAOC,IAAK,QAAA1I,OAASkR,YAAQnQ,MAE/BoQ,aACE,IAAMA,EAASC,YAAyBrQ,GAAMsQ,aAC9C,IAAKF,EACH,MAAM,IAAIG,SAAO,mDAEnB,OAAOH,GAET3V,WACE,OAAO+V,YAAoBxQ,qtECVxB,IAAMyQ,EAA0BC,IAAH1Z,IAgBhC2Z,KAGSC,EAA0BF,IAAHpT,KAOvBuT,EAAsBH,IAAHlT,IAiD5BiT,EACAK,IACAF,GAGSG,EAA2BL,IAAH1C,IAMjC4C,GAGSI,EAAqBN,IAAHO,KAiBlBC,EAA2BhM,YAGtC6L,ukBClHK,ICWKI,EDXCC,EAA6BV,IAAH1Z,IAQnCqa,KAGSC,EAA6BZ,IAAHpT,KCfvCvI,EAAAC,EAAAC,EAAA,sBAAAkc,IAAApc,EAAAC,EAAAC,EAAA,sBAAAsc,aAeYJ,yDAYZ,IAAMK,EAAgB1P,IAAG2P,WAAW3P,IAAG4P,OAAO,OAEjCH,EAAqB5R,IAAUC,MAAM,iBAC/CxG,MAAM,CACLuY,aAAc1B,IAAM2B,SAClB3B,IAAM4B,YAAY,CAAC,WAAY,YAC/BV,EAAkBW,YAGrB/R,QAAQ,SAAAC,GAAI,MAAK,CAChB+R,mBADgB,SACGC,GACjBhS,EAAK2R,aAAeK,GAEtBC,mBAJgB,SAIGC,GACjB,IAAMC,EAAmD,CACvDjS,MAAO,CACLkS,cAAepS,EAAKvF,KAAK6F,SAASF,SAClCiS,aAAcC,kBAAQJ,EAAOK,MAC7BC,OAAQxS,EAAK2R,eAAiBR,EAAkBsB,QAChDC,OAAQR,EAAOQ,QAAUpK,YAAW4J,EAAOQ,QAC3CC,QAAST,EAAOS,SAAWrK,YAAW4J,EAAOS,SAC7CC,WAAYV,EAAOW,OAGvB7S,EAAKoQ,OAAO0C,OAA6C,CACvDC,SAAU3B,EACVe,YACAa,cAAe,CACbC,uBAAwB,SAAC1a,EAADvC,GAA8B,IAArBkd,EAAqBld,EAArBkd,eAC/B,OAAIA,EAAe1M,KACV,CACL2M,cAAe5a,EAAK4a,cAAclU,OAChCiU,EAAe1M,KAAKpO,SAInBG,OAKf6a,mBAhCgB,SAgCGC,GACjB,IAAMlB,EAAmD,CACvD9F,GAAIgH,GAENrT,EAAKoQ,OAAO0C,OAAO,CACjBC,SAAUzB,EACVa,YACAa,cAAe,CACbC,uBAAwB,SAAC1a,EAAD4C,GAA8B,IAArB+X,EAAqB/X,EAArB+X,eAC/B,OAAIA,EAAe1M,KACV,CACL2M,cAAe5a,EAAK4a,cAAcG,OAChC9B,EAAc0B,EAAe1M,KAAKpO,OAAOiU,MAIxC9T,oiCChFZ,IAAMgb,EAA2B7C,IAAH1Z,KASxBwc,EAA6B9C,IAAHpT,KAQ1BmW,EAA6B/C,IAAHlT,IASnCkW,KAGSC,EAA6BjD,IAAH1C,qECThC,IAAM4F,EAAoBnU,IAAcG,MAAM,gBAAgBG,QACnE,SAAAC,GAAI,MAAK,CACD6T,aADC,eAAAC,EAAAhc,OAAAic,EAAA,EAAAjc,CAAAkc,EAAA7c,EAAAc,KAAA,SAAAC,EACY+b,EAAgBC,GAD5B,IAAA/B,EAAA/Z,EAAA,OAAA4b,EAAA7c,EAAAkB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEC2Z,EAAyC,CAC7C8B,aACAC,UAJG5b,EAAAE,KAAA,EAMgBwH,EAAKoQ,OAAO0C,OAAO,CACtCC,SAAUQ,EACVpB,cARG,cAMC/Z,EANDE,EAAAG,KAAAH,EAAAK,OAAA,SAUEwb,QAAQ/b,EAAOoO,MAAQpO,EAAOoO,KAAK4N,UAVrC,wBAAA9b,EAAAM,SAAAV,EAAAW,SAAA,gBAAAC,EAAAub,GAAA,OAAAP,EAAA/a,MAAAF,KAAAG,YAAA,GAYPsb,eAZO,SAaLC,EACAC,GAEA,IAAMrC,EAA2C,CAC/CjS,MAAMpI,OAAA2c,EAAA,EAAA3c,CAAA,CACJsa,cAAepS,EAAKI,SACpBsU,iBAAkBF,GACfG,EAAiBJ,EAAYC,KAGpC,OAAO3c,YACLmI,EAAKoQ,OAAO0C,OAAO,CACjBC,SAAUS,EACVrB,gBAIAyC,eA9BC,eAAAC,EAAA/c,OAAAic,EAAA,EAAAjc,CAAAkc,EAAA7c,EAAAc,KAAA,SAAA6c,EA+BLP,EACAC,GAhCK,IAAArC,EAAA,OAAA6B,EAAA7c,EAAAkB,KAAA,SAAA0c,GAAA,cAAAA,EAAAxc,KAAAwc,EAAAvc,MAAA,cAkCC2Z,EAA2C,CAC/C8B,WAAYM,EAAWlI,GACvBnM,MAAMpI,OAAA2c,EAAA,EAAA3c,CAAA,GACD6c,EAAiBJ,EAAYC,KArC/BO,EAAApc,OAAA,SAwCEd,YACLmI,EAAKoQ,OAAO0C,OAAO,CACjBC,SAAUU,EACVtB,gBA3CC,wBAAA4C,EAAAnc,SAAAkc,EAAAjc,SAAA,gBAAAmc,EAAAC,GAAA,OAAAJ,EAAA9b,MAAAF,KAAAG,YAAA,GA+CDkc,eA/CC,eAAAC,EAAArd,OAAAic,EAAA,EAAAjc,CAAAkc,EAAA7c,EAAAc,KAAA,SAAAmd,EA+CcnB,EAAgBO,GA/C9B,IAAArC,EAAA,OAAA6B,EAAA7c,EAAAkB,KAAA,SAAAgd,GAAA,cAAAA,EAAA9c,KAAA8c,EAAA7c,MAAA,cAgDC2Z,EAA2C,CAC/C8B,cAjDGoB,EAAA7c,KAAA,EAmDCwH,EAAKoQ,OAAO0C,OAAO,CACvBC,SAAUY,EACVxB,cArDG,wBAAAkD,EAAAzc,SAAAwc,EAAAvc,SAAA,gBAAAyc,EAAAC,GAAA,OAAAJ,EAAApc,MAAAF,KAAAG,YAAA,MA2DX,SAAS2b,EACPJ,EACAC,GAEA,OAAO1c,OAAO4G,OAAO,CACnB8W,UAAWjB,EAAWiB,UACtBC,kBAAmBlB,EAAWkB,kBAC9BC,QAASnB,EAAWoB,QACpBC,UAAWrB,EAAWqB,UACtBC,QAAStB,EAAWsB,QAAQrf,IAAIsL,IAAGgU,KAAK,OACxCC,SAAUxB,EAAWwB,SACrBC,SAAUzB,EAAWyB,WAIlB,IAAMC,EAAmB,SAC9BC,EACA1B,GAF8B,MAGN,CACxBvM,SAAUiO,EACVhO,MAAO,CAAEsM,u8CCpGJ,IAAM2B,EAAqBzF,IAAH1Z,IAsB3B2Z,KAGSyF,EAA+B1F,IAAHpT,KAS5B+Y,EAA2B3F,IAAHlT,IAMjC2Y,GAGSG,EAA2B5F,IAAH1C,IAMjCmI,GAGSI,EAA2B7F,IAAHO,qEC/B9B,IAAMuF,EAAkB/W,IAAcG,MAAM,cAChDC,SAAS,iBAAO,CACf4W,iBAAkB,QAEnB1W,QAAQ,SAAAC,GAAI,MAAK,CAChB0W,iBADgB,SACCR,EAAcP,GAC7B3V,EAAKoQ,OAAO0C,OAAO,CACjBC,SAAUqD,EACVjE,UAAW,CAAE+D,WAAUP,WACvBgB,mBAAoB,CAClBC,aAAc,CACZC,WAAY,SACZxK,GAAI6J,EACJP,eAKRmB,kBAdgB,SAcE7C,GAChBjU,EAAKyW,iBAAmBxC,GAE1B8C,aAjBgB,SAkBdxC,EACAyC,GAEA,IAAM7E,EAAyC,CAC7C8E,OAAOnf,OAAA2c,EAAA,EAAA3c,CAAA,CACLsa,cAAepS,EAAKI,SACpBsU,iBAAkBsC,GACfE,EAAmB3C,KAG1B,OAAO1c,YACLmI,EAAKoQ,OAAO0C,OAAO,CACjBC,SAAUsD,EACVlE,gBAINyE,aAnCgB,SAmCHrC,GACX,IAAMpC,EAAyC,CAC7C+D,SAAU3B,EAAWlI,GACrB4K,OAAOnf,OAAA2c,EAAA,EAAA3c,CAAA,GACFof,EAAmB3C,KAG1B,OAAO1c,YACLmI,EAAKoQ,OAAO0C,OAAO,CACjBC,SAAUuD,EACVnE,gBAIAgF,aAjDU,eAAAC,EAAAtf,OAAAic,EAAA,EAAAjc,CAAAkc,EAAA7c,EAAAc,KAAA,SAAAC,EAiDGge,GAjDH,IAAA/D,EAAA,OAAA6B,EAAA7c,EAAAkB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAkDR2Z,EAAyC,CAC7C+D,YAnDY5d,EAAAE,KAAA,EAqDRwH,EAAKoQ,OAAO0C,OAAO,CACvBC,SAAUwD,EACVpE,cAvDY,wBAAA7Z,EAAAM,SAAAV,EAAAW,SAAA,gBAAAC,GAAA,OAAAse,EAAAre,MAAAF,KAAAG,YAAA,GA0DVqe,cA1DU,eAAAC,EAAAxf,OAAAic,EAAA,EAAAjc,CAAAkc,EAAA7c,EAAAc,KAAA,SAAA6c,IAAA,IAAA9e,EAAAwQ,EAAA+Q,EAAAC,EAAAC,EAAA,OAAAzD,EAAA7c,EAAAkB,KAAA,SAAA0c,GAAA,cAAAA,EAAAxc,KAAAwc,EAAAvc,MAAA,cAAAuc,EAAAvc,KAAA,EA2DSwH,EAAKoQ,OAAOjY,MAAiC,CAClEA,MAAO6Y,IACPmB,UAAW,CAAE/R,SAAUJ,EAAKI,YA7DhB,cAAApK,EAAA+e,EAAAtc,KA2DN+N,EA3DMxQ,EA2DNwQ,KA3DM+Q,EAoEV/Q,EAJF4L,cACEoF,EAjEUD,EAiEVC,KACYC,EAlEFF,EAkEVG,SAAYD,KAlEF1C,EAAApc,OAAA,SAqEP,CACL6e,KAAMA,EAAKG,OAAO,SAACvf,EAAD+C,GAAkC,IAAvByc,EAAuBzc,EAAvByc,MAE3B,OADAxf,EADkD+C,EAAhB0c,UACjBC,MAAQF,EAClBxf,GACN,IACH2f,aAAcN,IA1EF,wBAAA1C,EAAAnc,SAAAkc,EAAAjc,SAAA,yBAAAye,EAAAve,MAAAF,KAAAG,YAAA,MA+EpB,SAASke,EAAmB3C,GAC1B,MAAO,CACLkD,KAAMlD,EAAWkD,KACjBjC,UAAWjB,EAAWiB,UACtBwC,aAAczD,EAAWyD,aACzBC,iBAAkB1D,EAAW0D,iBAC7BvC,QAASnB,EAAWoB,QACpBuC,OAAQpgB,OAAOqgB,KAAK5D,EAAW2D,QAAQ1hB,IAAI,SAAAqhB,GAAS,MAAK,CACvDO,cAAgBP,EAChBpO,MAAO,CAAE/H,MAAOgI,IAAQ6K,EAAW2D,OAAOL,GAAWnW,OAAOA,SAC5D2W,IAAK9D,EAAW2D,OAAOL,GAAWD,SAEpCU,mBAAoB/D,EAAWgE,WAAW/hB,IAAIsL,IAAGgU,KAAK,OACtD0C,eAAgBjE,EAAWkE,WAAWjiB,IAAIsL,IAAGgU,KAAK,OAClD4C,kBAAmBnE,EAAWmE,kBAAkBliB,IAC9CsL,IAAG6W,KAAK,CAAC,mBAAoB,mBAE/BC,YAAarE,EAAWqE,YAAYpiB,IAAI,SAAAoH,GAA6B,IAMpD8D,EAN0BmX,EAA0Bjb,EAA1Bib,UAAWC,EAAelb,EAAfkb,SACpD,MAAO,CAAED,YAAWC,UAKLpX,EAL2BoX,EAMtB,kBAAVpX,EACVA,EACAhM,OAAOqjB,WAAWrX,EAAMsX,QAAQ,IAAK,WAGpC,IAAMC,EAAiB,SAC5B/C,EACAc,GAF4B,MAGO,CACnC/O,SAAUiO,EACVhO,MAAO,CAAE8O,iDC9IXjiB,EAAAC,EAAAC,EAAA,sBAAAikB,IAAAnkB,EAAAC,EAAAC,EAAA,sBAAAkkB,IAAApkB,EAAAC,EAAAC,EAAA,sBAAAmkB,IAAArkB,EAAAC,EAAAC,EAAA,sBAAAokB,IAAAtkB,EAAAC,EAAAC,EAAA,sBAAAqkB,IAAAvkB,EAAAC,EAAAC,EAAA,sBAAAskB,IAAAxkB,EAAAC,EAAAC,EAAA,sBAAAukB,IAAAzkB,EAAAC,EAAAC,EAAA,sBAAAwkB,IAAA1kB,EAAAC,EAAAC,EAAA,sBAAAykB,IAAA3kB,EAAAC,EAAAC,EAAA,sBAAA0kB,IAAA,IAAAnS,EAAAzS,EAAA,IAAA0S,EAAA1S,EAAAqF,EAAAoN,GAGAG,IAAMiS,UAAY,kBAAM,GAEjB,IAAMV,EAAUvR,IAAM,QAChBwR,EAAWxR,IAAM,SACjByR,EAAWzR,IAAM,SACjB0R,EAAU1R,IAAM,QAChB2R,EAAa3R,IAAM,WACnB4R,EAAiB5R,IAAM,eAGvB6R,GAFe7R,IAAM,aACTA,IAAM,UACPA,IAAM,UACjB8R,EAAU9R,IAAM,QAEhB+R,GADY/R,IAAM,UACRA,IAAM,SAChBgS,EAAYhS,IAAM,UAERkS,QAAQnS,ykFCipBnBoS,EAMAC,EAMAC,EAQAC,EAUAC,EAOAC,EAiBAC,EAQAC,EAKAC,EAOAC,EAKAC,EAiBAC,EAKAC,EAMAC,EAOAC,EAMAC,EA0CAC,EAQAC,EAOAC,EAMAC,EAOAC,EAQAC,EAQAC,EAoBAC,EAMAC,EAOAC,EAOAC,EAOAC,EASAC,EAOAC,01wCA7QA7B,kFAMAC,iGAMAC,oFAQAC,sKAUAC,4GAOAC,qVAiBAC,0EAQAC,wDAKAC,4FAOAC,4DAKAC,8SAiBAC,kEAKAC,sFAMAC,0FAOAC,kEAMAC,kjCA0CAC,4IAQAC,0FAOAC,4EAMAC,8FAOAC,gIAQAC,4HAQAC,+cAoBAC,wEAMAC,0IAOAC,4FAOAC,6FAOAC,oKASAC,8GAOAC,yFAqnGL,IAAMC,GAAmClL,IAAH1Z,MAehC2Z,GAAoBD,IAAHpT,MAMjBue,GAAyBnL,IAAHlT,KAuB/BmT,IAGSmL,GAA2BpL,IAAH1C,MASxB+N,GAA2BrL,IAAHO,MAQxB+K,GAA4BtL,IAAHuL,KAiBlCH,GACAC,IAGSG,GAA8BxL,IAAHyL,KAiBpCxL,IAGSyL,GAA8B1L,IAAH2L,MAO3BC,GAAuB5L,IAAH6L,MAOpBC,GAA4B9L,IAAH+L,KAkBlCH,IAGSI,GAAiChM,IAAHiM,MAO9BC,GAAgClM,IAAHmM,MAS7BC,GAAkCpM,IAAHqM,MA0B/BC,IAfmCtM,IAAHuM,MAeVvM,IAAHwM,OAOnBC,GAA8BzM,IAAH0M,KAapCzM,IAGS0M,GAA0B3M,IAAH4M,KAwChCH,GACAxM,IAGS4M,GAA0C7M,IAAH8M,KAmBhD7M,IAGS8M,GAA8B/M,IAAHgN,MAgB3BC,GAAgCjN,IAAHkN,KAUtCH,IAGSI,GAAsBnN,IAAHoN,MASnBC,GAAoBrN,IAAHsN,MAQjBC,GAAoBvN,IAAHwN,MAQjBC,GAAuBzN,IAAH0N,KAY7BL,GACAE,IAGSI,GAAiC3N,IAAH4N,MAc9BC,GAA2B7N,IAAH8N,KA+BjCX,GACAM,GACAE,IAGSI,GAAyB/N,IAAHgO,KAuB/B/N,IAGS+C,GAA2BhD,IAAHiO,KAiBjCF,IAGS3N,GAAmCJ,IAAHkO,MAiChCC,IApBgCnO,IAAHoO,KAiBtCnO,IAGuCD,IAAHqO,KAapCpO,KAGSqO,GAAuBtO,IAAHuO,MAOpBC,GAAqBxO,IAAHyO,KAO3BH,IAGSI,GAA0B1O,IAAH2O,KAWhCH,IAGSI,GAA6B5O,IAAH6O,MAQ1BC,GAA6B9O,IAAH+O,KAYnCnD,IAGSoD,GAA+BhP,IAAHiP,KAQrCL,GACAE,IAGSI,GAA4BlP,IAAHmP,KAclCvD,IAGSwD,GAA0BpP,IAAHqP,KA6BhClC,GACAM,IAGS6B,GAA0BtP,IAAHuP,MASvBC,GAA0BxP,IAAHyP,KAmBhCxP,IAGSyP,GAA6B1P,IAAH2P,KAUnC1P,IAGS2P,GAAmB5P,IAAH6P,KA4BzBjE,GACA8D,GACAzP,IAOmCD,IAAH8P,MAqBe9P,IAAH+P,KAS5C7E,IAe+ClL,IAAHgQ,MAoBFhQ,IAAHiQ,KAOvC/E,IAa6BlL,IAAHkQ,MAmCKlQ,IAAHmQ,MAoBSnQ,IAAHoQ,MAqBKpQ,IAAHqQ,MAoBGrQ,IAAHsQ,KAUpCtN,IAeuChD,IAAHuQ,MAoBKvQ,IAAHwQ,MAqBDxQ,IAAHyQ,KAOlCtF,IAeqCnL,IAAH0Q,KAOlCvF,IAeqCnL,IAAH2Q,MAoBE3Q,IAAH4Q,KAOjCtF,IAeoCtL,IAAH6Q,KAOjCvF,IAeoCtL,IAAH8Q,MAoBH9Q,IAAH+Q,KAO3B3F,IAc+BpL,IAAHgR,MA6BHhR,IAAHiR,MAoBQjR,IAAHkR,MAqBQlR,IAAHmR,KAkDhC3F,GACApL,GACAsL,IAcwC1L,IAAHoR,KAOrC1F,IAauC1L,IAAHqR,MA4BFrR,IAAHsR,KAsB/BjG,GACAD,IAcsCpL,IAAHuR,MAoBJvR,IAAHwR,KAO5B5B,IAeuC5P,IAAHyR,MAqBJzR,IAAH0R,MAoBH1R,IAAH2R,KAOvB/B,IAciC5P,IAAH4R,KAa9BhG,IAcuC5L,IAAH6R,KAUpCjG,IAc+B5L,IAAH8R,MAqBzB,IAAMC,GAA0B/R,IAAHgS,KAUhC7E,GACAvB,IAGG,SAASqG,GACdxQ,EACAyQ,GAEA,OAAOC,WACLJ,GACAtQ,EACAyQ,GAIG,IAAME,GAAsBpS,IAAHqS,KAQ5BrG,GACAsD,IAGG,SAASgD,GACdJ,GAKA,OAAOC,cACLC,GACAF,GAIG,IAAMK,GAA4BvS,IAAHwS,MAS/B,SAASC,GACdP,GAKA,OAAOC,cAGLI,GAA2BL,GAGxB,IAAMQ,GAAwB1S,IAAH2S,MAU3B,SAASjX,GACd+F,EACAyQ,GAEA,OAAOC,WACLO,GACAjR,EACAyQ,GAIG,IAAMU,GAA+B5S,IAAH6S,KAUrCzG,IAGG,SAAS0G,GACdZ,GAKA,OAAOC,cAGLS,GAA8BV,GAG3B,IAAMa,GAAgC/S,IAAHgT,KAUtC5G,GACAE,IAGG,SAAS2G,GACdxR,EACAyQ,GAEA,OAAOC,WAGLY,GAA+BtR,EAAWyQ,GAGvC,IAAMgB,GAAyBlT,IAAHmT,KAU/BxG,IAGG,SAASyG,GACdlB,GAKA,OAAOC,cACLe,GACAhB,GAIG,IAAMmB,GAAuBrT,IAAHsT,KAQ7BtH,IAGG,SAASuH,GACdrB,GAKA,OAAOC,cACLkB,GACAnB,GAIG,IAAMsB,GAA6BxT,IAAHyT,KAwBnC9G,IAGG,SAAS+G,GACdxB,GAKA,OAAOC,cAGLqB,GAA4BtB,GAGzB,IAAMyB,GAAgC3T,IAAH4T,KAiBtCjH,IAGG,SAASkH,GACd3B,GAKA,OAAOC,cAGLwB,GAA+BzB,GAG5B,IAAM4B,GAA0B9T,IAAH+T,KAwBhCpH,IAGG,SAASqH,GACd9B,GAKA,OAAOC,cACL2B,GACA5B,GAIG,IAAM+B,GAAiCjU,IAAHkU,KAOvCvH,IAGG,SAASwH,GACdjC,GAKA,OAAOC,cAGL8B,GAAgC/B,GAG7B,IAAMkC,GAA6BpU,IAAHqU,KAqBnC1H,IAGG,SAAS2H,GACdpC,GAKA,OAAOC,cAGLiC,GAA4BlC,GAGzB,IAAMqC,GAAiCvU,IAAHwU,KAOvC7H,IAGG,SAAS8H,GACdvC,GAKA,OAAOC,cAGLoC,GAAgCrC,GAG7B,IAAMwC,GAA4B1U,IAAH2U,KAOlChI,IAGG,SAASiI,GACd1C,GAKA,OAAOC,cAGLuC,GAA2BxC,GAGxB,IAAM2C,GAA2B7U,IAAH8U,KAgBjCjI,IAcG,IAAMkI,GAA6B/U,IAAHgV,KAOnCnI,IAcG,IAAMoI,GAAqBjV,IAAHkV,KAO3BvI,IAGG,SAASwI,GACd1T,EACAyQ,GAEA,OAAOC,WACL8C,GACAxT,EACAyQ,GAIG,IAAMkD,GAAsCpV,IAAHqV,MAUzC,SAASC,GACd7T,EACAyQ,GAEA,OAAOC,WAGLiD,GAAqC3T,EAAWyQ,GAG7C,IAAMqD,GAAqBvV,IAAHwV,KAU3BvI,IAGG,SAASwI,GACdhU,EACAyQ,GAEA,OAAOC,WACLoD,GACA9T,EACAyQ,GAIG,IAAMwD,GAA4B1V,IAAH2V,MAgC/B,IAAMC,GAA8B5V,IAAH6V,MAejC,SAASC,GACd5D,GAKA,OAAOC,cAGLyD,GAA6B1D,GAG1B,IAAM6D,GAA4B/V,IAAHgW,KAkBlCnI,IAGG,SAASoI,GACdxU,EACAyQ,GAEA,OAAOC,WACL4D,GACAtU,EACAyQ,GAIG,IAAMgE,GAA4BlW,IAAHmW,KAiBlCtI,IAGG,SAASuI,GACd3U,EACAyQ,GAKA,OAAOC,kBAGL+D,GAA2BzU,EAAWyQ,GAGnC,IAAMmE,GAAyBrW,IAAHsW,KAwC/BxK,IAGG,SAASyK,GACd9U,EACAyQ,GAEA,OAAOC,WACLkE,GACA5U,EACAyQ,GAI+BlS,IAAHwW,MAoBzB,IAAMC,GAAqBzW,IAAH0W,MAWxB,SAASC,GACdlV,EACAyQ,GAKA,OAAOC,kBACLsE,GACAhV,EACAyQ,GAI+BlS,IAAH4W,MAsBzB,IAAMC,GAAkC7W,IAAH8W,MASrC,SAASC,GACd7E,GAKA,OAAOC,cAGL0E,GAAiC3E,GAG9B,IAAM8E,GAA6BhX,IAAHiX,MAShC,SAASC,GACdhF,GAKA,OAAOC,cAGL6E,GAA4B9E,GAGzB,IAAMiF,GAAwBnX,IAAHoX,KAO9BpU,IAcG,IAAMqU,GAA8BrX,IAAHsX,MAajC,SAASC,GACd9V,EACAyQ,GAEA,OAAOC,WACLkF,GACA5V,EACAyQ,GAIG,IAAMsF,GAA4BxX,IAAHyX,KAalCrX,IAGG,SAASsX,GACdjW,EACAyQ,GAEA,OAAOC,WACLqF,GACA/V,EACAyQ,GAIG,IAAMyF,GAA6B3X,IAAH4X,MAShC,SAASC,GACdpW,EACAyQ,GAEA,OAAOC,WACLwF,GACAlW,EACAyQ,GAIG,IAAM4F,GAA0B9X,IAAH+X,KAehChK,IAGG,SAASiK,GACdvW,EACAyQ,GAEA,OAAOC,WACL2F,GACArW,EACAyQ,GAIG,IAAM+F,GAA4BjY,IAAHkY,KAelC7M,IAGG,SAAS8M,GACd1W,EACAyQ,GAEA,OAAOC,WACL8F,GACAxW,EACAyQ,GAIG,IAAMkG,GAAyBpY,IAAHqY,KAO/B/M,IAGG,SAASgN,GACd7W,EACAyQ,GAEA,OAAOC,WACLiG,GACA3W,EACAyQ,GAIG,IAAMqG,GAAwBvY,IAAHwY,MAmB3B,SAASC,GACdhX,EACAyQ,GAEA,OAAOC,WACLoG,GACA9W,EACAyQ,GAIG,IAAMwG,GAA6B1Y,IAAH2Y,MAkBhC,SAASC,GACd1G,GAKA,OAAOC,cAGLuG,GAA4BxG,GAGzB,IAAM2G,GAA+B7Y,IAAH8Y,MAWlC,SAASC,GACd7G,GAKA,OAAOC,cAGL0G,GAA8B3G,GAG3B,IAAM8G,GAAiChZ,IAAHiZ,MASpC,SAASC,GACdhH,GAKA,OAAOC,cAGL6G,GAAgC9G,GAG7B,IAAMiH,GAA6BnZ,IAAHoZ,KASnC1K,IAGG,SAAS2K,GACdnH,GAKA,OAAOC,cAGLgH,GAA4BjH,GAGzB,IAAMoH,GAA6BtZ,IAAHuZ,KASnC7K,IAGG,SAAS8K,GACdtH,GAKA,OAAOC,cAGLmH,GAA4BpH,GAGzB,IAAMuH,GAA+BzZ,IAAH0Z,MAUlC,SAASC,GACdlY,EACAyQ,GAEA,OAAOC,WAGLsH,GAA8BhY,EAAWyQ,GAGtC,IAAM0H,GAAuB5Z,IAAH6Z,KAuC7BxM,GACAE,GACAY,GACAqB,GACAF,GACAZ,IAGG,SAASoL,GACdrY,EACAyQ,GAEA,OAAOC,WACLyH,GACAnY,EACAyQ,GAIG,IAAM6H,GAAwB/Z,IAAHga,KAU9BtL,GACAF,IAGG,SAASyL,GACdxY,EACAyQ,GAEA,OAAOC,WACL4H,GACAtY,EACAyQ,GAIG,IAAMgI,GAAqBla,IAAHma,KAe3BnO,GACAoD,IAGG,SAASgL,GACd3Y,EACAyQ,GAEA,OAAOC,WACL+H,GACAzY,EACAyQ,GAIG,IAAMmI,GAA+Bra,IAAHsa,MASlC,SAASC,GACd9Y,EACAyQ,GAEA,OAAOC,WAGLkI,GAA8B5Y,EAAWyQ,GAGtC,IAAMsI,GAA8Bxa,IAAHya,IAOpCzL,IAGG,SAAS0L,GACdjZ,EACAyQ,GAEA,OAAOC,WACLqI,GACA/Y,EACAyQ,GAIG,IAAMyI,GAA0B3a,IAAH4a,IAgBhC1L,IAGG,SAAS2L,GACdpZ,EACAyQ,GAEA,OAAOC,WACLwI,GACAlZ,EACAyQ,GAIG,IAAM4I,GAAsB9a,IAAH+a,IAgB5B/O,IAGG,SAASgP,GACdvZ,EACAyQ,GAEA,OAAOC,WACL2I,GACArZ,EACAyQ,GAIG,IAAM+I,GAAqBjb,IAAHkb,IAiB3BlP,GACAoD,IAGG,SAAS+L,GACd1Z,EACAyQ,GAKA,OAAOC,kBACL8I,GACAxZ,EACAyQ,GAIG,IAAMkJ,GAA8Bpb,IAAHqb,IAYpCvM,GACAF,IAGG,SAAS0M,GACd7Z,EACAyQ,GAKA,OAAOC,kBAGLiJ,GAA6B3Z,EAAWyQ,GAGrC,IAAMqJ,GAA0Bvb,IAAHwb,IAehCtM,IAGG,SAASuM,GACdha,EACAyQ,GAKA,OAAOC,kBAGLoJ,GAAyB9Z,EAAWyQ,GAGjC,IAAMwJ,GAAiC1b,IAAH2b,KAQpC,SAASC,GACd1J,GAKA,OAAOC,cAGLuJ,GAAgCxJ,GAG7B,IAAM2J,GAAsB7b,IAAH8b,IAO5BtN,IAGG,SAASuN,GACdta,EACAyQ,GAEA,OAAOC,WACL0J,GACApa,EACAyQ,GAIG,IAAM8J,GAA0Bhc,IAAHic,KAyB7B,IAAMC,GAAyBlc,IAAHmc,KAgB5B,SAASC,GACd3a,EACAyQ,GAEA,OAAOC,WACL+J,GACAza,EACAyQ,GAIG,IAAMmK,GAAsBrc,IAAHsc,KAWzB,SAASC,GACd9a,EACAyQ,GAEA,OAAOC,WACLkK,GACA5a,EACAyQ,GAIG,IAAMsK,GAAuBxc,IAAHyc,IAoB7BvQ,IAGG,SAASwQ,GACdjb,EACAyQ,GAEA,OAAOC,WACLqK,GACA/a,EACAyQ,GAIG,IAAMyK,GAA6B3c,IAAH4c,KAWhC,SAASC,GACdpb,EACAyQ,GAEA,OAAOC,WACLwK,GACAlb,EACAyQ,GAIG,IAAM4K,GAA2B9c,IAAH+c,IAejC3N,GACApD,IAcG,IAAMgR,GAA4Bhd,IAAHid,KAW/B,SAASC,GACdhL,GAKA,OAAOC,cAGL6K,GAA2B9K,GAGxB,IAAMiL,GAA6Bnd,IAAHod,KAUhC,SAASC,GACd5b,EACAyQ,GAEA,OAAOC,WACLgL,GACA1b,EACAyQ,GAIG,IAAMoL,GAAsBtd,IAAHud,IAO5B3N,IAGG,SAAS4N,GACdtL,GAKA,OAAOC,cACLmL,GACApL,+KC7pOG,SAAeuL,EAAtBr1B,GAAA,OAAAs1B,EAAAr1B,MAAAF,KAAAG,sDAAO,SAAAd,EAAkCm2B,GAAlC,IAAA/kB,EAAA,OAAA0K,EAAA7c,EAAAkB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACQ,OAAT61B,EADC,CAAA/1B,EAAAE,KAAA,eAEH81B,IAAOhlB,OAAO+kB,GAFX/1B,EAAAK,OAAA,wBAAAL,EAAAE,KAAA,EAKgBzD,EAAA,KAAAA,CAAA,KAAAkK,OAEFovB,IAPd,OAKC/kB,EALDhR,EAAAG,KASL61B,IAAOC,aAAaF,EAAM/kB,GATrB,wBAAAhR,EAAAM,SAAAV,EAAAW,6GCUA,IAAM4T,EAAO+hB,sBAEPC,EAAwB,SAAAz4B,GAAkB,IAAf8H,EAAe9H,EAAf8H,SAC9BoM,EAAS3Q,cAAT2Q,KAD6CwkB,EAE7BhxB,IAAMixB,SAAS,GAA9BC,EAF4C92B,OAAA+2B,EAAA,EAAA/2B,CAAA42B,EAAA,MAarD,OATAI,sBACE,kBAAM5kB,EAAK6kB,UADFj3B,OAAAic,EAAA,EAAAjc,CAAAkc,EAAA7c,EAAAc,KAET,SAAAC,IAAA,IAAAm2B,EAAAW,EAAAh2B,UAAA,OAAAgb,EAAA7c,EAAAkB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAO61B,EAAPW,EAAAtpB,OAAA,QAAA1G,IAAAgwB,EAAA,GAAAA,EAAA,GAAcC,IAAd32B,EAAAE,KAAA,EACQ02B,EAAcb,GADtB,OAEEnkB,EAAKxC,IAAI,6BAA8B2mB,GACvCO,EAAY,SAAArrB,GAAC,OAAIA,EAAI,IAHvB,wBAAAjL,EAAAM,SAAAV,EAAAW,UAQAs2B,EAAAh4B,EAAAC,cAACg4B,EAAA,aAAD,CAAc3iB,KAAMA,GAAO/O,IAAM2xB,SAASC,KAAKxxB,KAI5C,SAASmxB,IACd,IAIMM,EAJW,IAAIC,IACnB,CAAC,IAAIC,IAAUC,mBACf,CAAC,IAAIC,IAAaC,0BAEOC,aAK3B,OAJAnW,YAAQ,wBAAyB6V,EAAU/sB,KAAK,OAC9B+sB,EAAUO,KAAK,SAAAC,GAAG,OAClCt4B,IAAUu4B,mBAAmBC,SAASF,MAEpBt4B,IAAUy4B,iBAGzB,SAAehB,EAAtBp2B,GAAA,OAAAq3B,EAAAp3B,MAAAF,KAAAG,sDAAO,SAAA8b,EAA6BuZ,GAA7B,OAAAra,EAAA7c,EAAAkB,KAAA,SAAA0c,GAAA,cAAAA,EAAAxc,KAAAwc,EAAAvc,MAAA,UACAf,IAAUu4B,mBAAmBC,SAAS5B,GADtC,CAAAtZ,EAAAvc,KAAA,eAEHkhB,YAAQ,gCAFL3E,EAAApc,OAAA,UAGI,GAHJ,cAAAoc,EAAAvc,KAAA,EAKC43B,QAAQC,IAAI,CAChBC,EAAYjC,GACZkC,YAAoBlC,GACpBF,EAAmBE,KARhB,cAUL5hB,EAAK+jB,SAASnC,GACd3U,YAAQ,gBAAiB2U,GAXpBtZ,EAAApc,OAAA,UAYE,GAZF,wBAAAoc,EAAAnc,SAAAkc,EAAAjc,yCAeQy3B,+EAAf,SAAAlb,EAA2BiZ,GAA3B,IAAAoC,EAAA,OAAAzc,EAAA7c,EAAAkB,KAAA,SAAAgd,GAAA,cAAAA,EAAA9c,KAAA8c,EAAA7c,MAAA,OAAA6c,EAAA7c,KAAA,eAIIi4B,EAJJpb,EAAA5c,KAAA4c,EAAA7c,KAAA,sBAAA6c,EAAA7c,KAAA,EAUoBzD,EAAA,KAAAA,CAAA,KAAAkK,OAEFovB,EAFE,iBAVpB,OAUIoC,EAVJpb,EAAA5c,KAAA,OAeEgU,EAAKikB,KAAL54B,OAAA64B,EAAA,EAAA74B,CAAA,GAAau2B,EAAOoC,IACpB/W,YAAQ,oBAAqB2U,GAhB/B,yBAAAhZ,EAAAzc,SAAAwc,EAAAvc,kLC1DO,SAAe03B,EAAtBz3B,GAAA,OAAA83B,EAAA73B,MAAAF,KAAAG,sDAAO,SAAAd,EAAmCm2B,GAAnC,OAAAr2B,EAAAb,EAAAkB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACQ,OAAT61B,EADC,CAAA/1B,EAAAE,KAAA,eAEHkR,IAAQJ,OAAO+kB,GAFZ/1B,EAAAK,OAAA,wBAAAL,EAAAE,KAAA,EAKCzD,EAAA,KAAAA,CAAA,KAAAkK,OAEeovB,IAPhB,OASL3kB,IAAQJ,OAAO+kB,GATV,wBAAA/1B,EAAAM,SAAAV,EAAAW,gCAYP,IAAMg4B,EAAW,aAEV,SAASC,EAAe5wB,GAC7B,OAAO2wB,EAASE,KAAK7wB,qoBCZhB,IAAMmR,EAA+BX,IAAH1Z,KAe5Bg6B,EAA6B9rB,YAGxCwL,IAHkDpT,IAShD+T,6wBCzBG,IAAM4f,EAAoBvgB,IAAH1Z,IAY1BslB,KAeS4U,GAZ0BxgB,IAAHpT,IAShCgf,KAG2B5L,IAAHlT,4GCxBrB,SAAS2zB,EAATn7B,GAGY,IAFNkM,EAEMlM,EAFjB4D,UACGR,EACctB,OAAAwB,EAAA,EAAAxB,CAAA9B,EAAA,eACjB,OACEkB,EAAAC,EAAAC,cAAC4C,EAAA,MAADlC,OAAA4G,OAAA,GAAWtF,EAAX,CAAkBkB,OAAQ,SAAA82B,GAAU,OAAIl6B,EAAAC,EAAAC,cAAC8K,EAAckvB,wICO9CC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAzmB,EAAAC,EAAA/S,OAAAgT,EAAA,EAAAhT,CAAAe,KAAAw4B,GAAA,QAAAtmB,EAAA/R,UAAA0M,OAAAsF,EAAA,IAAA1U,MAAAyU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAjS,UAAAiS,GAAA,OAAAJ,EAAA/S,OAAAoT,EAAA,EAAApT,CAAAe,MAAA+R,EAAA9S,OAAAqT,EAAA,EAAArT,CAAAu5B,IAAAjmB,KAAArS,MAAA6R,EAAA,CAAA/R,MAAAoG,OAAA+L,MACE9C,MAAgB,CAAEqpB,UAAU,EAAOC,SAAU3mB,EAAK4mB,eADpD5mB,EAEE6mB,MAAQ,EAFV7mB,EAiBE8mB,aAAe,WAKb,GAJI9mB,EAAK6mB,QACPE,aAAa/mB,EAAK6mB,OAClB7mB,EAAK6mB,MAAQ,IAEY,IAAvB7mB,EAAKzR,MAAMsc,QAAf,CAGA,IAAMmc,EAASC,mCAAyBjnB,EAAK3C,MAAMspB,SAAU,IAAI3nB,MAEjEgB,EAAK6mB,MAAQK,WAAWlnB,EAAK2lB,SAAUqB,KA3B3ChnB,EA6BE2lB,SAAW,YACkB,IAAvB3lB,EAAKzR,MAAMsc,SACb7K,EAAKmnB,SAAS,CACZT,UAAU,EACVC,SAAU3mB,EAAK4mB,iBAjCvB5mB,EAqCEonB,WAAa,WACXpnB,EAAKmnB,SAAS,CAAET,UAAU,IAC1B1mB,EAAK8mB,gBAvCT9mB,EAAA,OAAA/S,OAAAwT,EAAA,EAAAxT,CAAAu5B,EAAAC,GAAAx5B,OAAAyT,EAAA,EAAAzT,CAAAu5B,EAAA,EAAA5vB,IAAA,oBAAAC,MAAA,WAII7I,KAAK84B,iBAJT,CAAAlwB,IAAA,qBAAAC,MAAA,WAOI7I,KAAK84B,iBAPT,CAAAlwB,IAAA,uBAAAC,MAAA,WAUQ7I,KAAK64B,OACPE,aAAa/4B,KAAK64B,SAXxB,CAAAjwB,IAAA,cAAAC,MAAA,WAeI,OAAOwwB,qBAAW,IAAIroB,KAAQhR,KAAKO,MAAM+4B,eAf7C,CAAA1wB,IAAA,SAAAC,MAAA,WAyCW,IACC6vB,EAAa14B,KAAKqP,MAAlBqpB,SACR,OAAO14B,KAAKO,MAAMkB,OAAO,CACvBi3B,WACAa,SAAUv5B,KAAKo5B,iBA7CrBZ,EAAA,CAAoCnvB,sBCnBpCnN,EAAAC,EAAAC,EAAA,sBAAAo9B,IAcO,IAAMC,EAAsC,SAAAt8B,GAAA,IACjDm8B,EADiDn8B,EACjDm8B,YACAI,EAFiDv8B,EAEjDu8B,SAFiDC,EAAAx8B,EAGjDy8B,kBAHiD,IAAAD,KAAAE,EAAA18B,EAIjD28B,wBAJiD,IAAAD,KAAA,OAMjDlnB,EAAArU,EAAAC,cAAC6C,EAAA,EAAD,CACEO,SAAS,EACTF,OAAQ,SAAAa,GAAsB,IAAnBy3B,EAAmBz3B,EAAnBy3B,OAAQ1oB,EAAW/O,EAAX+O,KACjB,IAAKyoB,EAAkB,CACrB,IAAKC,EAAOnnB,aAEV,OADAyN,YAAQ,qBACD,KAET,IAAKhP,EAAKuB,aAER,OADAyN,YAAQ,6BACD,KAIX,OADAA,YAAQ,wBAAyBuZ,GAE/BjnB,EAAArU,EAAAC,cAACy7B,EAAD,CACEV,YAAaA,EACbzc,QAAS+c,EACTn4B,OAAQ,SAAAsD,GAAA,IAAG2zB,EAAH3zB,EAAG2zB,SAAUa,EAAbx0B,EAAaw0B,SAAb,OACN5mB,EAAArU,EAAAC,cAAC07B,EAAA37B,EAAD,CACE47B,IAAKR,EACLS,WAAYzB,EAAW,UAAY,UACnC0B,kBAAmBb,EACnBc,MAAM,EACNC,UAAU,EACVC,OAAQlpB,EAAKmpB,0CC7C3BC,EAAAC,QAAiBx+B,EAAAy+B,EAAuB,iFCAxC,SAAAC,GAAA1+B,EAAAC,EAAAC,EAAA,sBAAAy+B,IAAA,IAAAC,EAAA5+B,EAAA,IAAAgb,EAAAhb,EAAA,IAAA6+B,EAAA7+B,EAAA,KAAA8+B,EAAA9+B,EAAA,IAQa2+B,EARb3+B,EAAA,IAQ8B4K,EAAUC,MAAM,aAC3CxG,MAAM,CACL06B,SAAU7jB,IAAM2B,SAAS3B,IAAMtP,MAAMsP,IAAMpN,QAAS,IACpDkxB,oBAAqB9jB,IAAM2B,SAAS3B,IAAMtP,MAAMsP,IAAMpN,QAAS,CAC7DsX,IAAuB6Z,aAG1B7zB,MAAM,SAAAH,GAAI,MAAK,CACdi0B,qBACE,OAAOj0B,EAAK8zB,SAASpuB,OAASpP,MAAMwK,KAAKd,EAAK8zB,UAAY,IAE5DI,sBACE,OAAOl0B,EAAK8zB,SAASpuB,OAAS,GAEhCyuB,6BACE,OAAgC,IAAzBn0B,EAAK8zB,SAASpuB,QAEvB0uB,oBACE,OAA6B,IAAzBp0B,EAAK8zB,SAASpuB,OACT1F,EAAK8zB,SAAS,GAEhB,MAETO,eACE,OAAOh0B,YAAuBL,GAAMxJ,QAGvCuJ,QAAQ,SAAAC,GAAI,MAAK,CAChBs0B,kBADgB,WAEdt0B,EAAK8zB,SAASS,SAEhBC,gBAJgB,SAIAV,GACd9zB,EAAK8zB,SAAS9a,QAAQ8a,OAGzBW,OAAO,SAAAz0B,GACN,IAAM00B,EAAa74B,aAAWM,MAE9B,MAAO,CACLgE,MAAO,CACLw0B,kBADK,SACaC,GAChB,OAAOF,EAAWG,IAAID,IAExBE,oBAJK,SAIeC,GAClB,OAAO/0B,EAAK+zB,oBAAoB9D,SAAS8E,KAG7Ch1B,QAAS,CACPi1B,kBADO,SACWJ,GACZF,EAAWG,IAAID,GACjBF,EAAWO,OAAOL,GAElBF,EAAWQ,IAAIN,IAGnBO,uBARO,SAQgBC,GACrB,IAAMC,EAAQr1B,EAAK+zB,oBAAoBuB,QAAQF,GAC3CC,GAAS,EACXr1B,EAAK+zB,oBAAoB/xB,OAAOqzB,EAAO,GAEvCr1B,EAAK+zB,oBAAoBpyB,KAAKyzB,IAGlCG,iBAhBO,SAgBUX,GACVF,EAAWG,IAAID,IAClBF,EAAWQ,IAAIN,GAEjBnB,EAAa,WACX+B,WAASC,SAAT,SAAAx2B,OAA2B21B,GAAW,CACpCc,OAAQ,iBACRC,YAAa,aACbC,UAAU,EACV1hB,QAAS,SAIf2hB,oBAAqBnB,EAAWl6B,QAAQs7B,KAAKpB,6DCpFrDpB,EAAAC,QAAiBx+B,EAAAy+B,EAAuB,wDCAxCF,EAAAC,QAAiBx+B,EAAAy+B,EAAuB,oGCCxCv3B,OAAO85B,aAAaC,QAAQ,QAAS,8ECDrC,IAAAx/B,EAAA,CACAy/B,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,GAEAC,aAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,IAEAC,aaAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,gBAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aaAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,YAAA,CACA,IACA,IAEAC,eAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,gBAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,YAAA,CACA,IACA,IAEAC,eAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,gBAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,KAGA,SAAAC,EAAAC,GACA,IAAAC,EAAAzvC,EAAAwvC,GACA,OAAAC,EAOAlxC,EAAAmxC,EAAAD,EAAA,IAAAE,KAAA,WACA,IAAA95B,EAAA45B,EAAA,GACA,OAAAlxC,EAAAqxC,EAAA/5B,EAAA,KARA+jB,QAAAiW,UAAAF,KAAA,WACA,IAAAD,EAAA,IAAAI,MAAA,uBAAAN,EAAA,KAEA,MADAE,EAAAzuB,KAAA,mBACAyuB,IAQAH,EAAA5tB,KAAA,WACA,OAAArgB,OAAAqgB,KAAA3hB,IAEAuvC,EAAA15B,GAAA,KACAinB,EAAAC,QAAAwS,wBC5gCA,IAAAvvC,EAAA,CACA6gC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAiP,QAAA,CACA,IACA,KAEAC,WAAA,CACA,IACA,KAEArO,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAqO,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA/N,OAAA,CACA,IACA,KAEAG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAO,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA+M,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAvM,OAAA,CACA,IACA,KAEAwM,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEApM,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAK,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAG,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAmB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAO,OAAA,CACA,IACA,KAEAG,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAuB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEA0B,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAkG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEA/F,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAE,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA4F,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAzF,OAAA,CACA,IACA,KAEA0F,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA1F,UAAA,CACA,IACA,KAEAO,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAqB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,I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","file":"static/js/main.e0639c86.chunk.js","sourcesContent":["import { computeDestinationPoint, getBounds } from 'geolib'\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLng =>\n  new google.maps.LatLng(Number(gps.latitude), Number(gps.longitude))\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n\ninterface IGeneratePolygonInput {\n  center: GeoPoint\n  metersRadius?: number\n  pointsCount?: number\n}\n\nexport const generatePolygon = ({\n  center,\n  metersRadius = 1000,\n  pointsCount = 15,\n}: IGeneratePolygonInput) => {\n  return new Array(pointsCount).fill(null).map((_, idx) => {\n    const degree = (360 / pointsCount) * idx\n    return computeDestinationPoint(center, metersRadius, degree)\n  })\n}\n\nexport const getBoundsOfPoints = (points: GeoPoint[]) => {\n  const bounds = getBounds(points)\n  if (!bounds) {\n    return null\n  }\n  return new google.maps.LatLngBounds(\n    {\n      lat: bounds.minLat,\n      lng: bounds.minLng,\n    },\n    {\n      lat: bounds.maxLat,\n      lng: bounds.maxLng,\n    },\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport loaderGif from '../assets/loader.gif'\nimport { appConfig } from '../config'\n\nconst StyledPageLoader = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n`\n\nconst PageLoader: React.FC = () => (\n  <StyledPageLoader role=\"banner\">\n    <img\n      src={loaderGif}\n      alt={appConfig.pageTitleSuffix}\n      width={200}\n      height={200}\n    />\n  </StyledPageLoader>\n)\n\nexport default PageLoader\n","export interface IQueryError extends Error {\n  showToUser: boolean\n}\n\nexport type TQueryErrors = IQueryError[] | null\n\n// tslint:disable-next-line:no-any\nexport const getQueryErrors = async (query: Promise<any>) => {\n  const result = await query\n  if (result && result.errors) {\n    return result.errors as IQueryError[]\n  }\n  return null\n}\n","import React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { RedirectToLogin } from './RedirectToLogin'\n\ninterface ISecureRouteProps extends RouteProps {\n  redirect?: boolean\n  lazy?: boolean\n}\n\nexport const SecureRoute: React.FC<ISecureRouteProps> = ({\n  redirect = true,\n  lazy = true,\n  ...props\n}) => {\n  const { auth } = useRoot()\n  if (!auth.isAuthenticatedUser) {\n    return redirect ? <RedirectToLogin /> : <NotFoundPage />\n  }\n  if (props.component && typeof props.component === 'object') {\n    const { component, path, exact } = props\n    return <LazyRoute path={path} exact={exact} component={component} />\n  }\n  return <Route {...props} />\n}\n","import { Observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { TRootModel } from '../models/RootModel'\nimport { useRoot } from './RootProvider'\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.FC<IProps> = ({ render, observe = true }) => {\n  const root = useRoot()\n  return observe === true ? (\n    <Observer>{() => <>{render(root)}</>}</Observer>\n  ) : (\n    render(root)\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface IProps {\n  iconName: string\n  color?: string\n  fontSize?: number\n  fontSizeUnit?: string\n}\n\nconst getFontSize = ({ fontSize = 1.5, fontSizeUnit = 'rem' }: IProps) => {\n  return fontSize + fontSizeUnit\n}\n\nconst IconSpanStyled = styled.span`\n  font-size: ${getFontSize} !important;\n  color: ${(props: IProps) => props.color};\n`\n\nexport const Icon: React.FC<IProps> = ({\n  iconName,\n  color = Colors.white,\n  fontSize,\n  fontSizeUnit,\n}) =>\n  iconName ? (\n    <IconSpanStyled\n      color={color}\n      fontSize={fontSize}\n      fontSizeUnit={fontSizeUnit}\n      iconName={iconName}\n      className=\"material-icons\"\n    >\n      {iconName}\n    </IconSpanStyled>\n  ) : null\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import React, { MouseEvent } from 'react'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { applyAlphaToColor, Colors, Radiuses, Spacing } from '../styling'\n\nexport interface ITouchButtonProps\n  extends React.HTMLAttributes<HTMLButtonElement> {\n  iconName?: string\n  iconColor?: Colors\n  iconSize?: number\n  text?: string\n  color?: Colors\n  badge?: ReactNode\n  disabled?: boolean\n  textNextToIcon?: boolean\n  className?: string\n  width?: string\n  height?: string\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n}\n\nconst applyAlpha = (alphaValue: number) => (props: ITouchButtonProps) =>\n  applyAlphaToColor(props.color!, alphaValue)\n\nconst TouchButtonStyled = styled.button`\n  min-height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  min-width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  width: ${({ width = '100%' }: ITouchButtonProps) => width};\n  height: ${({ height = '100%' }: ITouchButtonProps) => height};\n  margin: 0;\n  padding: 0 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  /* fallback font size for incompatible browsers */\n  font-size: 1rem;\n  font-size: calc(0.6rem + 0.5vw);\n  transition-duration: 0.2s;\n\n  & .material-icons {\n    vertical-align: middle;\n  }\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nconst ButtonLabelStyled = styled.div`\n  color: white;\n  text-align: center;\n  width: 100%;\n  overflow: hidden;\n`\nconst ButtonLabelNextToIconStyled = styled(ButtonLabelStyled)`\n  width: calc(100% - 4rem);\n  margin: 0 0 0 1rem;\n  text-align: left;\n  display: inline-block;\n  vertical-align: top;\n  overflow: hidden;\n`\n\nexport const TouchButton = React.forwardRef<\n  HTMLButtonElement,\n  ITouchButtonProps\n>(\n  (\n    {\n      children,\n      iconName,\n      iconColor = Colors.white,\n      iconSize = 3,\n      color = Colors.greyMiddle,\n      textNextToIcon = false,\n      badge,\n      text,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    return (\n      <TouchButtonStyled color={color} {...props} ref={forwardedRef}>\n        {iconName && (\n          <Icon iconName={iconName} color={iconColor} fontSize={iconSize} />\n        )}\n\n        {text &&\n          textNextToIcon && (\n            <ButtonLabelNextToIconStyled>{text}</ButtonLabelNextToIconStyled>\n          )}\n\n        {text &&\n          !textNextToIcon && <ButtonLabelStyled>{text}</ButtonLabelStyled>}\n\n        {badge}\n        {children}\n      </TouchButtonStyled>\n    )\n  },\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Spacing } from '../styling'\nimport { MarginBox } from './MarginBox'\n\ninterface IProps {\n  width?: number\n  widthUnit?: string\n  height?: number\n  heightUnit?: string\n  margin?: string\n  className?: string\n}\n\nconst widthProperty = ({\n  width: width,\n  widthUnit: widthUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (width === undefined) {\n    return ''\n  } else {\n    return `width: ${width}${widthUnit}`\n  }\n}\n\nconst heightProperty = ({\n  height: height,\n  heightUnit: heightUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (height === undefined) {\n    return ''\n  } else {\n    return `height: ${height}${heightUnit}`\n  }\n}\n\nconst SizerContainer = styled('div')`\n  ${widthProperty};\n  ${heightProperty};\n`\n\nexport const Sizer: React.FC<IProps> = ({\n  width,\n  widthUnit = Spacing.DefaultSizeUnit,\n  height,\n  heightUnit = Spacing.DefaultSizeUnit,\n  margin,\n  children,\n  className,\n  ...props\n}) => {\n  const wrap = (\n    <SizerContainer\n      width={width}\n      widthUnit={widthUnit}\n      height={height}\n      heightUnit={heightUnit}\n      className={className}\n      {...props}\n    >\n      {children}\n    </SizerContainer>\n  )\n\n  return margin === undefined ? (\n    wrap\n  ) : (\n    <MarginBox margin={margin}>{wrap}</MarginBox>\n  )\n}\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TMenuModel } from './MenuModel'\n\nexport const MenuBaseModel = BaseModel.named('MenuBase')\n  .volatile(() => ({\n    filterInput: '',\n  }))\n  .actions(self => ({\n    setFilterInput(input: string) {\n      self.filterInput = input\n    },\n  }))\n  .views(self => ({\n    get branchId() {\n      return getParent<TMenuModel>(self).settings.branchId\n    },\n  }))\n","import { autorun, observable } from 'mobx'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { appConfig } from '../config'\nimport { RM } from '../helpers/ramda'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  title: string\n}\n\nconst TitleStyled = styled.h1`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  margin: 0.5rem 0.5rem 0 0.5rem;\n  white-space: nowrap;\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.9);\n`\n\nconst observableTitles = observable.array<string>([])\n\nautorun(() => {\n  const lastTitle = Array.from(observableTitles).pop()\n  if (lastTitle) {\n    document.title = `${lastTitle} :: ${appConfig.pageTitleSuffix}`\n  } else {\n    document.title = appConfig.pageTitleSuffix\n  }\n})\n\nconst PageTitleDisplay: React.FC = () => (\n  <Observer>\n    {() => <TitleStyled>{observableTitles.join(' - ')}</TitleStyled>}\n  </Observer>\n)\n\nexport class PageTitle extends React.Component<IProps> {\n  static Route = PageTitleRoute\n  static Display = PageTitleDisplay\n  componentDidMount() {\n    observableTitles.push(this.props.title)\n  }\n  componentDidUpdate(prevProps: IProps) {\n    const idx = observableTitles.findIndex(RM.equals(prevProps.title))\n    if (idx >= 0) {\n      observableTitles.splice(idx, 1, this.props.title)\n    }\n  }\n  componentWillUnmount() {\n    observableTitles.remove(this.props.title)\n  }\n  render() {\n    return null\n  }\n}\n\nfunction PageTitleRoute({ title, ...props }: IProps & RouteProps) {\n  return <Route {...props} render={() => <PageTitle title={title} />} />\n}\n","import Color from 'color'\nimport styled, { css } from 'styled-components'\n\nimport { Colors, Radiuses } from '../styling'\n\ninterface IProps {\n  color?: string\n  textColor?: string\n  padding?: number\n  stretchToParent?: boolean\n}\n\nexport const Card = styled.div`\n  background: ${getBackgroundColor};\n  color: ${getTextColor};\n  border-radius: ${Radiuses.Card};\n  padding: ${getPadding}rem;\n  margin: 0 0 0.5rem 0;\n  position: relative;\n  ${applyStretchToParentStyle};\n`\n\nCard.displayName = 'Card'\n\nfunction getPadding({ padding = 0.5 }: IProps) {\n  return padding\n}\n\nfunction getBackgroundColor({ color }: IProps) {\n  return Color(color || Colors.greyLight)\n    .alpha(0.8)\n    .lighten(0.4)\n    .string()\n}\n\nfunction getTextColor(props: IProps) {\n  return props.textColor || Colors.black\n}\n\nfunction applyStretchToParentStyle({ stretchToParent = false }: IProps) {\n  if (!stretchToParent) {\n    return ''\n  }\n  return css`\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  `\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\n\nimport { IPageLayoutProps, PageLayout } from '../molecules/PageLayout'\n\ninterface IFullPageLayoutProps extends IPageLayoutProps {\n  width?: number\n}\n\nfunction getLayout(width: number): Layout[] {\n  return [{ i: 'full', x: 0, y: 1, w: width, h: 10 }]\n}\n\nexport const FullPageLayout: React.FC<IFullPageLayoutProps> = ({\n  children,\n  width = 16,\n  ...props\n}) => (\n  <PageLayout layouts={getLayout(width)} {...props}>\n    <div key=\"full\">{children}</div>\n  </PageLayout>\n)\n","import { useSnackbar as useSnackbarOrig, VariantType } from 'notistack'\n\nconst successVariant = { variant: 'success' as VariantType }\nconst errorVariant = { variant: 'error' as VariantType }\nconst warningVariant = { variant: 'warning' as VariantType }\nconst infoVariant = { variant: 'info' as VariantType }\n\nexport function useSnackBar() {\n  const { enqueueSnackbar } = useSnackbarOrig()\n  return {\n    enqueueSnackbar,\n    enqueueSuccess: (errorMessage: string) =>\n      enqueueSnackbar(errorMessage, successVariant),\n    enqueueError: (errorMessage: string) =>\n      enqueueSnackbar(errorMessage, errorVariant),\n    enqueueWarning: (errorMessage: string) =>\n      enqueueSnackbar(errorMessage, warningVariant),\n    enqueueInfo: (errorMessage: string) =>\n      enqueueSnackbar(errorMessage, infoVariant),\n  }\n}\n","import React from 'react'\n\nimport { PageTitle } from '../atoms/PageTitle'\nimport { i18n } from '../i18n'\n\nexport const NotFoundPage: React.FC = () => (\n  <>\n    <PageTitle title={i18n.t`Not found`} />\n    <h1>{i18n.t`There is nothing here, sorry!`}</h1>\n  </>\n)\n","import { DocumentNode } from 'graphql'\nimport { Lambda } from 'mobx'\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\n\nimport { Loading } from '../atoms/Loading'\nimport { whenGoingOnline } from '../helpers/offline'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean\n    refetchOnConnectionLost?: boolean\n  }\n  const GQuery: React.FC<IProps> = props => {\n    const cleanup = useRef<Lambda[]>([])\n    const executeCleanup = useCallback(() => {\n      cleanup.current.forEach(fn => fn())\n      cleanup.current.length = 0\n    }, [])\n\n    useEffect(\n      () => {\n        return executeCleanup\n      },\n      [cleanup.current.length],\n    )\n\n    const {\n      render,\n      renderFragment,\n      renderLoading = true,\n      renderError = true,\n      refetchOnConnectionLost = false,\n      children,\n      ...rest\n    } = props\n\n    return (\n      // @ts-ignore Some weird changes in @types/react\n      <Query query={query} {...rest}>\n        {result => {\n          if (result.loading) {\n            if (typeof renderLoading === 'function') {\n              return renderLoading(result)\n            } else if (renderLoading === true) {\n              return <Loading />\n            }\n          }\n          if (result.error) {\n            throw result.error\n          }\n          if (refetchOnConnectionLost) {\n            cleanup.current.push(whenGoingOnline(result.refetch))\n          }\n          if (result.data) {\n            if (renderFragment) {\n              return <>{renderFragment(result.data, result)}</>\n            }\n            if (render) {\n              return render(result.data, result)\n            }\n          }\n          return children || null\n        }}\n      </Query>\n    )\n  }\n  return GQuery\n}\n","import Color from 'color'\n\nimport { RM } from './helpers/ramda'\n\nexport enum Colors {\n  yellow = '#FFDB2B',\n  pink = '#FF2B95',\n  blue = '#2441FF',\n  red = '#FF1C1C',\n  green = '#179B12',\n  turquoise = '#2BFFFF',\n  orange = '#FF862B',\n  violet = '#6D4F8C',\n  black = '#000000',\n  greyDarkest = '#080808',\n  greyDark = '#2C2C2C',\n  greyMiddle = '#939393',\n  greyLight = '#EDEDED',\n  white = '#FFFFFF',\n}\n\nexport const applyAlphaToColor = RM.curry((color: Colors, alphaValue: number) =>\n  Color(color)\n    .alpha(alphaValue)\n    .string(),\n)\n\nexport enum Radiuses {\n  Card = '0.5rem',\n  Button = '0.5rem',\n  TextComponent = '0.25rem',\n}\n\nexport const Spacing = {\n  MarginAroundFormComponents: '0.1rem',\n  Small: '0.25rem',\n  Middle: '0.5rem',\n  LayoutGridCellMargin: '0.5rem',\n  ButtonHeight: 3.4375,\n  DefaultInputWidth: 20,\n  DefaultSizeUnit: 'rem',\n  ButtonColumnWidthPx: 55,\n  InfoMessageFontSize: '1.375rem',\n}\n\nexport const FontSizes = {\n  CompactCard: '0.95rem',\n  CompactCardBig: '1rem',\n}\n","import debug from 'debug'\nimport React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\n\ninterface IRedirectToLoginProps {\n  useOrigin?: boolean\n}\n\nconst log = debug('routing')\n\nexport const RedirectToLogin: React.FC<IRedirectToLoginProps> = ({\n  useOrigin = true,\n}) => (\n  <Route\n    path=\"/login\"\n    children={({ match, location }) => {\n      if (match) {\n        return null\n      }\n      log('redirecting to login...')\n      return (\n        <Redirect\n          to={{\n            pathname: '/login',\n            state: { origin: useOrigin ? location.pathname : '/' },\n          }}\n        />\n      )\n    }}\n  />\n)\n","import { isSameDay } from 'date-fns'\nimport { format, formatWithOptions } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\nimport numeral from 'numeral'\n\nimport { FAddressFragment, FUserNameFragment } from '../graph/generated'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const fullDateFormat = 'dddd LL'\nexport const formatFullDate = formatLocale(fullDateFormat)\n\nexport const dateFormat = 'D.M.YYYY'\nexport const formatDate = formatLocale(dateFormat)\n\nexport const dateFormatISO = 'YYYY-MM-DD'\nexport const formatDateISO = format(dateFormatISO)\n\nexport const timeFormat = 'H:mm'\nexport const formatTime = formatLocale(timeFormat)\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const priceFormat = '0,0.[00]'\nexport const formatPrice = price => numeral(price).format(priceFormat)\n\nexport const formatTimeWithoutTodayDate = (time: string) =>\n  isSameDay(time, new Date()) ? formatTime(time) : formatDateTime(time)\n\nexport const formatAddress = (address: FAddressFragment) => {\n  if (!address) {\n    return ''\n  }\n  if (!address.street) {\n    if (address.city && address.houseNumber) {\n      return `${address.city} ${address.houseNumber}, ${address.state}`\n    }\n    if (address.city) {\n      if (address.state) {\n        return `${address.city}, ${address.state}`\n      }\n      return address.city\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n\nexport function formatFullName(user: FUserNameFragment) {\n  return `${user.lastName} ${user.firstName}`.trim()\n}\n","import * as RM from 'ramda'\n\nexport { RM }\n","import React from 'react'\n\nimport { Spacing } from '../styling'\nimport { Sizer } from './Sizer'\n\ninterface IProps {\n  className?: string\n}\n\nexport const SizerButton: React.FC<IProps> = ({ children, ...props }) => {\n  return (\n    <Sizer\n      width={Spacing.ButtonHeight}\n      height={Spacing.ButtonHeight}\n      {...props}\n    >\n      {children}\n    </Sizer>\n  )\n}\n","import React from 'react'\n\ninterface ILoadingProps {\n  text?: string\n}\n\nexport const Loading: React.FC<ILoadingProps> = ({ text = '...' }) => (\n  <h1>{text}</h1>\n)\n","import React from 'react'\n\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\nimport { SizerButton } from './SizerButton'\nimport { WithRoot } from './WithRoot'\n\nexport class SoundControl extends React.Component {\n  state = { playPreview: false }\n  render() {\n    return (\n      <WithRoot\n        observe={true}\n        render={({ user }) => (\n          <SizerButton>\n            <TouchButton\n              color={user.soundEnabled ? Colors.green : Colors.red}\n              iconName={user.soundEnabled ? 'volume_up' : 'volume_off'}\n              iconSize={2}\n              onClick={() => {\n                user.controlSound(!user.soundEnabled)\n              }}\n            />\n          </SizerButton>\n        )}\n      />\n    )\n  }\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { useRoot } from '../atoms/RootProvider'\nimport { useQLogoutWidget } from '../graph/generated'\nimport { i18n } from '../i18n'\nimport { Colors } from '../styling'\n\nconst LogoutWidgetStyled = styled.div`\n  margin-left: 1rem;\n  color: ${Colors.greyLight};\n  &:hover {\n    color: ${Colors.white};\n  }\n`\nconst LoggedUserNameStyled = styled.span`\n  color: ${Colors.greyLight};\n  text-decoration: none;\n  font-weight: lighter;\n  position: relative;\n  top: 0.6rem;\n  display: inline-block;\n  max-width: 10rem;\n  text-align: right;\n`\n\nconst IconStyled = styled.span`\n  padding: 0.5rem 0.5rem 0 0.5rem;\n  display: inline-block;\n  vertical-align: top;\n`\n\nexport const LogoutWidget = observer(() => {\n  const { auth } = useRoot()\n  const { data, loading } = useQLogoutWidget(\n    { id: auth.userId },\n    { skip: !auth.isAuthenticated },\n  )\n\n  let displayName\n  if (loading) {\n    displayName = i18n.t`Not logged in`\n  } else {\n    displayName = `${data.user.firstName} ${data.user.lastName}`\n  }\n\n  return (\n    <LogoutWidgetStyled data-testid=\"logout-widget\">\n      <Link to=\"/logout\">\n        <LoggedUserNameStyled>{displayName}</LoggedUserNameStyled>\n        <IconStyled>\n          <Icon iconName=\"exit_to_app\" />\n        </IconStyled>\n      </Link>\n    </LogoutWidgetStyled>\n  )\n})\n","import Color from 'color'\nimport React, { MouseEvent } from 'react'\nimport { Link, Route } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { Colors, Radiuses, Spacing } from '../styling'\n\ninterface IHomeButtonProps {\n  iconColor?: Colors\n  color?: Colors\n  disabled?: boolean\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n  goBack?: boolean\n  backRoute?: string\n}\n\nconst applyAlpha = (alphaValue: number) => (props: IHomeButtonProps) =>\n  Color(props.color)\n    .alpha(alphaValue)\n    .string()\n\nconst HomeButtonStyled = styled.button`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 0 0 ${Radiuses.Button} 0 !important;\n  height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  margin: 0;\n  padding: 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  font-size: 1rem;\n  transition-duration: 0.2s;\n\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nexport const HomeButton: React.FC<IHomeButtonProps> = ({\n  color = Colors.greyMiddle,\n  iconColor = Colors.white,\n  goBack = false,\n  backRoute,\n  ...props\n}) => {\n  if (goBack) {\n    return (\n      <Route>\n        {({ history }) => (\n          <HomeButtonStyled\n            color={color}\n            onClick={() => {\n              if (backRoute) {\n                history.push(backRoute)\n              } else {\n                history.goBack()\n              }\n            }}\n            {...props}\n          >\n            <Icon iconName=\"chevron_left\" color={iconColor} fontSize={2.2} />\n          </HomeButtonStyled>\n        )}\n      </Route>\n    )\n  }\n  return (\n    <Link to=\"/\">\n      <HomeButtonStyled color={color} {...props}>\n        <Icon iconName=\"home\" color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    </Link>\n  )\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\nimport styled from 'styled-components'\n\nimport { GridLayout } from '../atoms/GridLayout'\nimport { PageTitle } from '../atoms/PageTitle'\nimport { SoundControl } from '../atoms/SoundControl'\nimport { LogoutWidget } from '../organisms/LogoutWidget'\nimport { SecureRoute } from '../routes/SecureRoute'\nimport { HomeButton } from './HomeButton'\n\nexport interface IPageLayoutProps {\n  pageTitle?: string\n  layouts?: Layout[]\n  hideLogoutWidget?: boolean\n  showSoundControl?: boolean\n  useBackButton?: boolean\n  backRoute?: string\n  scrollPageTitle?: boolean\n  topContent?: React.ReactNode\n}\n\nconst TopLeftButtonContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n`\n\nconst getPosition = (props: IPageLayoutProps) =>\n  props.scrollPageTitle ? 'absolute' : 'fixed'\n\nconst TopRightContainer = styled.div`\n  position: ${getPosition};\n  top: 0;\n  right: 0;\n  z-index: 100;\n  display: flex;\n  justify-content: flex-end;\n`\nconst PageTitleContainer = styled.div`\n  position: ${getPosition};\n  top: 0rem;\n  left: 4rem;\n`\nconst PageHeaderItem = styled.div`\n  margin: 0.5rem;\n`\n\nexport const PageLayout: React.FC<IPageLayoutProps> = ({\n  pageTitle = '',\n  layouts = [],\n  hideLogoutWidget = false,\n  showSoundControl = false,\n  useBackButton = false,\n  scrollPageTitle = true,\n  backRoute,\n  children,\n  topContent,\n}) => (\n  <>\n    {pageTitle && <PageTitle title={pageTitle} />}\n\n    <TopRightContainer scrollPageTitle={scrollPageTitle}>\n      <PageHeaderItem>{topContent}</PageHeaderItem>\n      {showSoundControl && (\n        <PageHeaderItem>\n          <SoundControl />\n        </PageHeaderItem>\n      )}\n\n      {!hideLogoutWidget && (\n        <SecureRoute path=\"/\" component={LogoutWidget} redirect={false} />\n      )}\n    </TopRightContainer>\n\n    <PageTitleContainer scrollPageTitle={scrollPageTitle}>\n      <PageTitle.Display />\n    </PageTitleContainer>\n\n    <GridLayout layouts={[...layouts]}>{children}</GridLayout>\n\n    <TopLeftButtonContainer>\n      <HomeButton goBack={useBackButton} backRoute={backRoute} />\n    </TopLeftButtonContainer>\n  </>\n)\n","import styled from 'styled-components'\n\nexport interface IProps {\n  margin: string\n  className?: string\n}\n\nexport const MarginBox = styled('div')`\n  margin: ${(props: IProps) => props.margin};\n`\n","import React from 'react'\nimport RGL, { Layout, WidthProvider } from 'react-grid-layout'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\ninterface IGridLayoutProps {\n  layouts: Layout[]\n}\n\nexport const GridLayout: React.FC<IGridLayoutProps> = ({\n  children,\n  layouts,\n}) => (\n  <ReactGridLayout\n    className=\"layout\"\n    layout={layouts}\n    cols={16}\n    rowHeight={55}\n    margin={[8, 8]}\n    autoSize={false}\n    isDraggable={false}\n    isResizable={false}\n    compactType={null}\n    measureBeforeMount={true}\n  >\n    {children}\n  </ReactGridLayout>\n)\n","import debug from 'debug'\nimport { getEnv, getPath, getRoot, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { IRootEnvironment } from '../atoms/RootProvider'\nimport { TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    return debug(`model${getPath(self)}`)\n  },\n  get client() {\n    const client = getEnv<IRootEnvironment>(self).apolloClient\n    if (!client) {\n      throw new VError('Apollo client is missing from environment setup')\n    }\n    return client\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n}))\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport {\n  FMenuCategoryListItemFragmentDoc,\n  FPriceFragmentDoc,\n} from '../../../graph/generated'\nimport { GMenuRecipeFormAssoc } from '../../../graph/types'\n\nexport const MenuRecipePriceFragment = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n  ${FPriceFragmentDoc}\n`\n\nexport const MenuAssocRecipeFragment = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const MenuRecipeFormQuery = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...FMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...FMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n  ${MenuRecipePriceFragment}\n  ${FMenuCategoryListItemFragmentDoc}\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeFormAssocQuery = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeDefaults = gql`\n  query GMenuRecipeDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport const QueryMenuRecipeFormAssoc = buildQuery<\n  GMenuRecipeFormAssoc.Query,\n  GMenuRecipeFormAssoc.Variables\n>(MenuRecipeFormAssocQuery)\n","import gql from 'graphql-tag'\n\nimport { SpecificBusinessHourFragment } from '../organisms/SpecificBusinessHours.graphql'\n\nexport const CreateSpecificBusinessHour = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`\n\nexport const DeleteSpecificBusinessHour = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n","import { isoDate } from '@speedlo/graphql'\nimport { types } from 'mobx-state-tree'\n\nimport {\n  GCreateSpecificBusinessHour,\n  GDeleteSpecificBusinessHour,\n} from '../../../graph/types'\nimport { formatTime } from '../../../helpers/formats'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  CreateSpecificBusinessHour,\n  DeleteSpecificBusinessHour,\n} from './BusinessHoursModel.graphql'\n\nexport enum ESpecificHourMode {\n  TIMESPAN = 'TIMESPAN',\n  FULLDAY = 'FULLDAY',\n}\n\nexport interface ISpecificFormData {\n  date: Date\n  openAt: Date\n  closeAt: Date\n  note: string\n}\n\nconst byIdPredicate = RM.complement(RM.propEq('id'))\n\nexport const BusinessHoursModel = BaseModel.named('BusinessHours')\n  .props({\n    specificMode: types.optional(\n      types.enumeration(['TIMESPAN', 'FULLDAY']),\n      ESpecificHourMode.TIMESPAN,\n    ),\n  })\n  .actions(self => ({\n    changeSpecificMode(mode: ESpecificHourMode) {\n      self.specificMode = mode\n    },\n    submitSpecificHour(values: ISpecificFormData) {\n      const variables: GCreateSpecificBusinessHour.Variables = {\n        input: {\n          companyBranch: self.root.settings.branchId,\n          specificDate: isoDate(values.date),\n          closed: self.specificMode === ESpecificHourMode.FULLDAY,\n          openAt: values.openAt && formatTime(values.openAt),\n          closeAt: values.closeAt && formatTime(values.closeAt),\n          closedNote: values.note,\n        },\n      }\n      self.client.mutate<GCreateSpecificBusinessHour.Mutation>({\n        mutation: CreateSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.concat(\n                  mutationResult.data.result,\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n    deleteSpecificHour(businessHourId: ID) {\n      const variables: GDeleteSpecificBusinessHour.Variables = {\n        id: businessHourId,\n      }\n      self.client.mutate({\n        mutation: DeleteSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.filter(\n                  byIdPredicate(mutationResult.data.result.id),\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n  }))\n","import gql from 'graphql-tag'\n\nimport { FMenuCategoryFragmentDoc } from '../../../graph/generated'\n\nexport const SortMenuCategoryMutation = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport const MenuCategoryCreateMutation = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport const MenuCategoryUpdateMutation = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...FMenuCategory\n    }\n  }\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport const MenuCategoryDeleteMutation = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n","import { LocationDescriptor } from 'history'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  FMenuCategoryFragment,\n  WareCategoryTypeEnum,\n} from '../../../graph/generated'\nimport {\n  GMenuCategoryCreate,\n  GMenuCategoryDelete,\n  GMenuCategoryUpdate,\n  GSortMenuCategory,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuCategoryCreateMutation,\n  MenuCategoryDeleteMutation,\n  MenuCategoryUpdateMutation,\n  SortMenuCategoryMutation,\n} from './MenuCategoryModel.graphql'\n\nexport interface TCategoryFormValues extends FMenuCategoryFragment {}\n\nexport const MenuCategoryModel = MenuBaseModel.named('MenuCategory').actions(\n  self => ({\n    async sortCategory(categoryId: ID, offset: number) {\n      const variables: GSortMenuCategory.Variables = {\n        categoryId,\n        offset,\n      }\n      const result = await self.client.mutate({\n        mutation: SortMenuCategoryMutation,\n        variables,\n      })\n      return Boolean(result.data && result.data.success)\n    },\n    createCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryCreate.Variables = {\n        input: {\n          companyBranch: self.branchId,\n          wareCategoryType: categoryType,\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryCreateMutation,\n          variables,\n        }),\n      )\n    },\n    async updateCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryUpdate.Variables = {\n        categoryId: formValues.id,\n        input: {\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteCategory(categoryId: ID, categoryType: WareCategoryTypeEnum) {\n      const variables: GMenuCategoryDelete.Variables = {\n        categoryId,\n      }\n      await self.client.mutate({\n        mutation: MenuCategoryDeleteMutation,\n        variables,\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(\n  formValues: TCategoryFormValues,\n  categoryType: WareCategoryTypeEnum,\n) {\n  return Object.assign({\n    nameLabel: formValues.nameLabel,\n    internalNoteLabel: formValues.internalNoteLabel,\n    enabled: formValues.visible,\n    pictogram: formValues.pictogram,\n    recipes: formValues.recipes.map(RM.prop('id')),\n    minCount: formValues.minCount,\n    maxCount: formValues.maxCount,\n  })\n}\n\nexport const getCategoryRoute = (\n  recipeId: ID,\n  categoryType: WareCategoryTypeEnum,\n): LocationDescriptor => ({\n  pathname: recipeId,\n  state: { categoryType },\n})\n","import gql from 'graphql-tag'\n\nimport { FPriceFragmentDoc } from '../../../graph/generated'\n\nexport const MenuRecipeFragment = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n  ${FPriceFragmentDoc}\n`\n\nexport const MenuRecipeVisibilityMutation = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport const MenuRecipeCreateMutation = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeUpdateMutation = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeDeleteMutation = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n","import { LocationDescriptorObject } from 'history'\nimport numeral from 'numeral'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  WareCategoryTypeEnum,\n  WarePriceTypeEnum,\n} from '../../../graph/generated'\nimport {\n  GMenuRecipeCreate,\n  GMenuRecipeDefaults,\n  GMenuRecipeDelete,\n  GMenuRecipeUpdate,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TRecipeFormValues } from '../menutypes'\nimport { MenuRecipeDefaults } from '../organisms/RecipeForm.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuRecipeCreateMutation,\n  MenuRecipeDeleteMutation,\n  MenuRecipeUpdateMutation,\n  MenuRecipeVisibilityMutation,\n} from './MenuRecipeModel.graphql'\n\nexport const MenuRecipeModel = MenuBaseModel.named('MenuRecipe')\n  .volatile(() => ({\n    categoryFilterId: null as MaybeID,\n  }))\n  .actions(self => ({\n    changeVisibility(recipeId: ID, visible: boolean) {\n      self.client.mutate({\n        mutation: MenuRecipeVisibilityMutation,\n        variables: { recipeId, visible },\n        optimisticResponse: {\n          updateRecipe: {\n            __typename: 'Recipe',\n            id: recipeId,\n            visible,\n          },\n        },\n      })\n    },\n    setCategoryFilter(categoryId: MaybeID) {\n      self.categoryFilterId = categoryId\n    },\n    createRecipe(\n      formValues: TRecipeFormValues,\n      recipeType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuRecipeCreate.Variables = {\n        recipe: {\n          companyBranch: self.branchId,\n          wareCategoryType: recipeType,\n          ...getRecipeVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeCreateMutation,\n          variables,\n        }),\n      )\n    },\n    updateRecipe(formValues: TRecipeFormValues) {\n      const variables: GMenuRecipeUpdate.Variables = {\n        recipeId: formValues.id,\n        recipe: {\n          ...getRecipeVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteRecipe(recipeId: ID) {\n      const variables: GMenuRecipeDelete.Variables = {\n        recipeId,\n      }\n      await self.client.mutate({\n        mutation: MenuRecipeDeleteMutation,\n        variables,\n      })\n    },\n    async queryDefaults() {\n      const { data } = await self.client.query<GMenuRecipeDefaults.Query>({\n        query: MenuRecipeDefaults,\n        variables: { branchId: self.branchId },\n      })\n      const {\n        companyBranch: {\n          vats,\n          currency: { code },\n        },\n      } = data\n      return {\n        vats: vats.reduce((result, { vatId, priceType }) => {\n          result[priceType.enum] = vatId\n          return result\n        }, {}),\n        currencyCode: code,\n      }\n    },\n  }))\n\nfunction getRecipeVariables(formValues: TRecipeFormValues) {\n  return {\n    code: formValues.code,\n    nameLabel: formValues.nameLabel,\n    internalNote: formValues.internalNote,\n    descriptionLabel: formValues.descriptionLabel,\n    enabled: formValues.visible,\n    prices: Object.keys(formValues.prices).map(priceType => ({\n      warePriceType: (priceType as unknown) as WarePriceTypeEnum,\n      price: { value: numeral(formValues.prices[priceType].value).value() },\n      vat: formValues.prices[priceType].vatId,\n    })),\n    sideDishCategories: formValues.sideDishes.map(RM.prop('id')),\n    wareCategories: formValues.categories.map(RM.prop('id')),\n    associatedRecipes: formValues.associatedRecipes.map(\n      RM.pick(['associatedRecipe', 'warePriceType']),\n    ),\n    ingredients: formValues.ingredients.map(({ stockItem, quantity }) => {\n      return { stockItem, quantity: parseNumber(quantity) }\n    }),\n  }\n}\n\nfunction parseNumber(value: string | number) {\n  return typeof value === 'number'\n    ? value\n    : Number.parseFloat(value.replace(',', '.'))\n}\n\nexport const getRecipeRoute = (\n  recipeId: ID,\n  recipeType: WareCategoryTypeEnum,\n): LocationDescriptorObject<any> => ({\n  pathname: recipeId,\n  state: { recipeType },\n})\n","import debug from 'debug'\n\n// @ts-ignore\ndebug.useColors = () => !process.env.REACT_APP_STAGE\n\nexport const logMain = debug('main')\nexport const logDebug = debug('debug')\nexport const logError = debug('error')\nexport const logAuth = debug('auth')\nexport const logRouting = debug('routing')\nexport const logPersistence = debug('persistence')\nexport const logBootstrap = debug('bootstrap')\nexport const logAccess = debug('access')\nexport const logGraph = debug('graph')\nexport const logForm = debug('form')\nexport const logSentry = debug('sentry')\nexport const logLang = debug('lang')\nexport const logUpdate = debug('update')\n// tslint:disable-next-line:no-console\nexport const logTest = console.log\n","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<string>\n\n  readonly includeOldFinished?: boolean\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputStatisticCreate {\n  readonly dateFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly dateTimeFrom?: Maybe<string>\n\n  readonly dateTimeTo?: Maybe<string>\n\n  readonly branches: ReadonlyArray<string>\n\n  readonly drivers?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly internalNumber?: Maybe<string>\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: string\n\n  readonly closed?: boolean\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly minCount?: number\n\n  readonly maxCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly minCount?: Maybe<number>\n\n  readonly maxCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityCreate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityUpdate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment method used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<string>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: number\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n  Pln = 'PLN',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  FeAdmin = 'FE_ADMIN',\n  FeKitchen = 'FE_KITCHEN',\n  Driver = 'DRIVER',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n  Pl = 'PL',\n  De = 'DE',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n  Specific = 'SPECIFIC',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n  HighPriority = 'HIGH_PRIORITY',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n  Pwa = 'PWA',\n  WebMenu = 'WEB_MENU',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible order origin categories */\nexport enum OrderOriginCategoryEnum {\n  Website = 'WEBSITE',\n  Wifi = 'WIFI',\n  Staff = 'STAFF',\n  Doveze = 'DOVEZE',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type MPasswordChangeVariables = {\n  readonly password: string\n}\n\nexport type MPasswordChangeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateUserPassword: MPasswordChangeUpdateUserPassword\n}\n\nexport type MPasswordChangeUpdateUserPassword = {\n  readonly __typename?: 'UserUpdatedPassword'\n\n  readonly id: string\n\n  readonly token: string\n}\n\nexport type GCreateSpecificBusinessHourVariables = {\n  readonly input: InputBusinessHourSpecificDateCreate\n}\n\nexport type GCreateSpecificBusinessHourMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GCreateSpecificBusinessHourResult\n}\n\nexport type GCreateSpecificBusinessHourResult = GSpecificBusinessHourFragment\n\nexport type GDeleteSpecificBusinessHourVariables = {\n  readonly id: string\n}\n\nexport type GDeleteSpecificBusinessHourMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GDeleteSpecificBusinessHourResult\n}\n\nexport type GDeleteSpecificBusinessHourResult = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n}\n\nexport type GSpecificBusinessHoursVariables = {\n  readonly branchId: string\n}\n\nexport type GSpecificBusinessHoursQuery = {\n  readonly __typename?: 'Query'\n\n  readonly businessHours: ReadonlyArray<GSpecificBusinessHoursBusinessHours>\n}\n\nexport type GSpecificBusinessHoursBusinessHours = GSpecificBusinessHourFragment\n\nexport type GOrderVamVariables = {\n  readonly branchId: string\n  readonly phone: string\n}\n\nexport type GOrderVamQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vamCustomer: GOrderVamVamCustomer\n}\n\nexport type GOrderVamVamCustomer = {\n  readonly __typename?: 'CustomerInformation'\n\n  readonly isFound: boolean\n\n  readonly email: string\n\n  readonly firstName: string\n\n  readonly lastName: string\n\n  readonly lastOrder: Maybe<GOrderVamLastOrder>\n\n  readonly locations: ReadonlyArray<GOrderVamLocations>\n}\n\nexport type GOrderVamLastOrder = {\n  readonly __typename?: 'Order'\n\n  readonly note: Maybe<string>\n}\n\nexport type GOrderVamLocations = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly state: Maybe<string>\n\n  readonly gps: Maybe<GOrderVamGps>\n}\n\nexport type GOrderVamGps = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type GOrderPromoVariables = {\n  readonly branchId: string\n}\n\nexport type GOrderPromoQuery = {\n  readonly __typename?: 'Query'\n\n  readonly promoCodes: ReadonlyArray<GOrderPromoPromoCodes>\n}\n\nexport type GOrderPromoPromoCodes = {\n  readonly __typename?: 'PromoCode'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type GSortMenuCategoryVariables = {\n  readonly categoryId: string\n  readonly offset: number\n}\n\nexport type GSortMenuCategoryMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly success: boolean\n}\n\nexport type GMenuCategoryCreateVariables = {\n  readonly input: InputWareCategoryCreate\n}\n\nexport type GMenuCategoryCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createWareCategory: GMenuCategoryCreateCreateWareCategory\n}\n\nexport type GMenuCategoryCreateCreateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type GMenuCategoryUpdateVariables = {\n  readonly categoryId: string\n  readonly input: InputWareCategoryUpdate\n}\n\nexport type GMenuCategoryUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: GMenuCategoryUpdateUpdateWareCategory\n}\n\nexport type GMenuCategoryUpdateUpdateWareCategory = FMenuCategoryFragment\n\nexport type GMenuCategoryDeleteVariables = {\n  readonly categoryId: string\n}\n\nexport type GMenuCategoryDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyWareCategory: GMenuCategoryDeleteDestroyWareCategory\n}\n\nexport type GMenuCategoryDeleteDestroyWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type GMenuRecipeVisibilityVariables = {\n  readonly recipeId: string\n  readonly visible: boolean\n}\n\nexport type GMenuRecipeVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateRecipe: GMenuRecipeVisibilityUpdateRecipe\n}\n\nexport type GMenuRecipeVisibilityUpdateRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type GMenuRecipeCreateVariables = {\n  readonly recipe: InputRecipeCreate\n}\n\nexport type GMenuRecipeCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createRecipe: GMenuRecipeCreateCreateRecipe\n}\n\nexport type GMenuRecipeCreateCreateRecipe = GMenuRecipeFragment\n\nexport type GMenuRecipeUpdateVariables = {\n  readonly recipeId: string\n  readonly recipe: InputRecipeUpdate\n}\n\nexport type GMenuRecipeUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateRecipe: GMenuRecipeUpdateUpdateRecipe\n}\n\nexport type GMenuRecipeUpdateUpdateRecipe = GMenuRecipeFragment\n\nexport type GMenuRecipeDeleteVariables = {\n  readonly recipeId: string\n}\n\nexport type GMenuRecipeDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyRecipe: GMenuRecipeDeleteDestroyRecipe\n}\n\nexport type GMenuRecipeDeleteDestroyRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type GMenuStockCreateVariables = {\n  readonly stockItem: InputStockItemCreate\n}\n\nexport type GMenuStockCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createStockItem: GMenuStockCreateCreateStockItem\n}\n\nexport type GMenuStockCreateCreateStockItem = GMenuStockItemFragment\n\nexport type GMenuStockUpdateVariables = {\n  readonly stockId: string\n  readonly stockItem: InputStockItemUpdate\n}\n\nexport type GMenuStockUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateStockItem: GMenuStockUpdateUpdateStockItem\n}\n\nexport type GMenuStockUpdateUpdateStockItem = GMenuStockItemFragment\n\nexport type GMenuStockDeleteVariables = {\n  readonly stockId: string\n}\n\nexport type GMenuStockDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyStockItem: GMenuStockDeleteDestroyStockItem\n}\n\nexport type GMenuStockDeleteDestroyStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n}\n\nexport type GAllergensVariables = {}\n\nexport type GAllergensQuery = {\n  readonly __typename?: 'Query'\n\n  readonly allergens: ReadonlyArray<GAllergensAllergens>\n}\n\nexport type GAllergensAllergens = FMenuAllergenFragment\n\nexport type GCurrenciesVariables = {\n  readonly branchId: string\n}\n\nexport type GCurrenciesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly currencies: ReadonlyArray<GCurrenciesCurrencies>\n\n  readonly companyBranch: GCurrenciesCompanyBranch\n}\n\nexport type GCurrenciesCurrencies = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n\n  readonly code: string\n}\n\nexport type GCurrenciesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly address: GCurrenciesAddress\n}\n\nexport type GCurrenciesAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<GCurrenciesCountry>\n}\n\nexport type GCurrenciesCountry = {\n  readonly __typename?: 'Country'\n\n  readonly currency: GCurrenciesCurrency\n}\n\nexport type GCurrenciesCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n}\n\nexport type GVatsVariables = {\n  readonly branchId: string\n}\n\nexport type GVatsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vats: ReadonlyArray<GVatsVats>\n}\n\nexport type GVatsVats = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n\n  readonly vat: number\n}\n\nexport type GWareUnitsVariables = {}\n\nexport type GWareUnitsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareUnits: ReadonlyArray<GWareUnitsWareUnits>\n}\n\nexport type GWareUnitsWareUnits = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: WareUnitEnum\n}\n\nexport type GMenuRecipeFormVariables = {\n  readonly recipeId: string\n}\n\nexport type GMenuRecipeFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: GMenuRecipeFormRecipe\n}\n\nexport type GMenuRecipeFormRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly image: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly visible: boolean\n\n  readonly recipeType: GMenuRecipeFormRecipeType\n\n  readonly sourcePrices: ReadonlyArray<GMenuRecipeFormSourcePrices>\n\n  readonly sideDishes: ReadonlyArray<GMenuRecipeFormSideDishes>\n\n  readonly categories: ReadonlyArray<GMenuRecipeFormCategories>\n\n  readonly sourceAssociatedRecipes: ReadonlyArray<\n    GMenuRecipeFormSourceAssociatedRecipes\n  >\n\n  readonly sourceIngredients: ReadonlyArray<GMenuRecipeFormSourceIngredients>\n}\n\nexport type GMenuRecipeFormRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuRecipeFormSourcePrices = GMenuRecipePriceFragment\n\nexport type GMenuRecipeFormSideDishes = FMenuCategoryListItemFragment\n\nexport type GMenuRecipeFormCategories = FMenuCategoryListItemFragment\n\nexport type GMenuRecipeFormSourceAssociatedRecipes = {\n  readonly __typename?: 'RecipeRelation'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipeFormPriceType\n\n  readonly recipe: GMenuRecipeForm_Recipe\n}\n\nexport type GMenuRecipeFormPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipeForm_Recipe = GMenuAssocRecipeFragment\n\nexport type GMenuRecipeFormSourceIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly quantity: number\n\n  readonly stockItem: GMenuRecipeFormStockItem\n}\n\nexport type GMenuRecipeFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly label: string\n\n  readonly wareUnit: GMenuRecipeFormWareUnit\n\n  readonly allergens: ReadonlyArray<GMenuRecipeFormAllergens>\n}\n\nexport type GMenuRecipeFormWareUnit = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type GMenuRecipeFormAllergens = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly enum: AllergenEnum\n}\n\nexport type GMenuRecipeFormAssocVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuRecipeFormAssocQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<GMenuRecipeFormAssocRecipes>\n}\n\nexport type GMenuRecipeFormAssocRecipes = GMenuAssocRecipeFragment\n\nexport type GMenuRecipeDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuRecipeDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GMenuRecipeDefaultsCompanyBranch\n}\n\nexport type GMenuRecipeDefaultsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly vats: ReadonlyArray<GMenuRecipeDefaultsVats>\n\n  readonly currency: GMenuRecipeDefaultsCurrency\n}\n\nexport type GMenuRecipeDefaultsVats = {\n  readonly __typename?: 'VatPriceType'\n\n  readonly vatId: string\n\n  readonly priceType: GMenuRecipeDefaultsPriceType\n}\n\nexport type GMenuRecipeDefaultsPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipeDefaultsCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GMenuStockFormVariables = {\n  readonly stockId: string\n}\n\nexport type GMenuStockFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: GMenuStockFormStockItem\n}\n\nexport type GMenuStockFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly note: string\n\n  readonly nameLabel: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly wareUnit: GMenuStockFormWareUnit\n\n  readonly allergens: ReadonlyArray<GMenuStockFormAllergens>\n\n  readonly companyBranch: GMenuStockFormCompanyBranch\n}\n\nexport type GMenuStockFormWareUnit = FMenuWareUnitFragment\n\nexport type GMenuStockFormAllergens = FMenuAllergenFragment\n\nexport type GMenuStockFormCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuStockDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GMenuStockDefaultsCompanyBranch\n}\n\nexport type GMenuStockDefaultsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type GCreateZoneVariables = {\n  readonly branchId: string\n  readonly points?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n}\n\nexport type GCreateZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createZone: GCreateZoneCreateZone\n}\n\nexport type GCreateZoneCreateZone = FZoneFragment\n\nexport type GUpdateZonePriorityVariables = {\n  readonly zoneId: string\n  readonly offset: number\n}\n\nexport type GUpdateZonePriorityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZonePriority: ReadonlyArray<\n    GUpdateZonePriorityUpdateZonePriority\n  >\n}\n\nexport type GUpdateZonePriorityUpdateZonePriority = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly priority: number\n}\n\nexport type GDestroyZoneVariables = {\n  readonly zoneId: string\n}\n\nexport type GDestroyZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyZone: GDestroyZoneDestroyZone\n}\n\nexport type GDestroyZoneDestroyZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n}\n\nexport type GZonesVariables = {\n  readonly branchesId: ReadonlyArray<string>\n}\n\nexport type GZonesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zones: ReadonlyArray<GZonesZones>\n}\n\nexport type GZonesZones = FZoneFragment\n\nexport type GZoneLocationVariables = {\n  readonly zoneId: string\n}\n\nexport type GZoneLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zone: GZoneLocationZone\n}\n\nexport type GZoneLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly companyBranch: GZoneLocationCompanyBranch\n}\n\nexport type GZoneLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GZoneLocationGps\n}\n\nexport type GZoneLocationGps = FGeoPointFragment\n\nexport type GZoneBranchLocationVariables = {\n  readonly branchId: string\n}\n\nexport type GZoneBranchLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GZoneBranchLocationCompanyBranch\n}\n\nexport type GZoneBranchLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GZoneBranchLocationGps\n}\n\nexport type GZoneBranchLocationGps = FGeoPointFragment\n\nexport type GZoneColorsVariables = {}\n\nexport type GZoneColorsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zoneColors: ReadonlyArray<GZoneColorsZoneColors>\n}\n\nexport type GZoneColorsZoneColors = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type QAddressSuggestVariables = {\n  readonly search: string\n}\n\nexport type QAddressSuggestQuery = {\n  readonly __typename?: 'Query'\n\n  readonly suggest: ReadonlyArray<QAddressSuggestSuggest>\n}\n\nexport type QAddressSuggestSuggest = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly gps: Maybe<QAddressSuggestGps>\n} & FAddressFragment\n\nexport type QAddressSuggestGps = FGeoPointFragment\n\nexport type MOrderStateVariables = {\n  readonly orderId: string\n  readonly state: OrderStateEnum\n}\n\nexport type MOrderStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MOrderStateAddOrderState\n}\n\nexport type MOrderStateAddOrderState = FOrderStateCategoryFragment &\n  FOrderTimingFragment\n\nexport type MSetPriorityOrderVariables = {\n  readonly orderId: string\n  readonly isPriority: boolean\n}\n\nexport type MSetPriorityOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly setPriorityOrder: MSetPriorityOrderSetPriorityOrder\n}\n\nexport type MSetPriorityOrderSetPriorityOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly isPriority: boolean\n}\n\nexport type QLogoutWidgetVariables = {\n  readonly id: string\n}\n\nexport type QLogoutWidgetQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: QLogoutWidgetUser\n}\n\nexport type QLogoutWidgetUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type MBusinessHoursSubmitVariables = {\n  readonly branchId: string\n  readonly hours: ReadonlyArray<InputBusinessHourCreate>\n}\n\nexport type MBusinessHoursSubmitMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createBusinessHours: ReadonlyArray<\n    MBusinessHoursSubmitCreateBusinessHours\n  >\n}\n\nexport type MBusinessHoursSubmitCreateBusinessHours = FRegularBusinessHourFragment\n\nexport type QRegularBusinessHoursVariables = {\n  readonly branchId: string\n}\n\nexport type QRegularBusinessHoursQuery = {\n  readonly __typename?: 'Query'\n\n  readonly businessHours: ReadonlyArray<QRegularBusinessHoursBusinessHours>\n\n  readonly weekDays: ReadonlyArray<QRegularBusinessHoursWeekDays>\n}\n\nexport type QRegularBusinessHoursBusinessHours = FRegularBusinessHourFragment\n\nexport type QRegularBusinessHoursWeekDays = FWeekdayFragment\n\nexport type MAddOrderPromoVariables = {\n  readonly orderId: string\n  readonly code: string\n}\n\nexport type MAddOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderPromoCode: MAddOrderPromoAddOrderPromoCode\n}\n\nexport type MAddOrderPromoAddOrderPromoCode = {\n  readonly __typename?: 'OrderWithErrors'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MAddOrderPromoOrder\n}\n\nexport type MAddOrderPromoOrder = FCreateOrderFragment\n\nexport type MCancelOrderVariables = {\n  readonly orderId: string\n}\n\nexport type MCancelOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MCancelOrderAddOrderState\n}\n\nexport type MCancelOrderAddOrderState = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FOrderStateCategoryFragment\n\nexport type MCreateOrderAcceptVariables = {\n  readonly orderId: string\n  readonly customer: InputCustomerCreate\n  readonly deliverAt?: Maybe<string>\n  readonly note?: Maybe<string>\n}\n\nexport type MCreateOrderAcceptMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: MCreateOrderAcceptFinishOrder\n}\n\nexport type MCreateOrderAcceptFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MCreateOrderAcceptOrder\n}\n\nexport type MCreateOrderAcceptOrder = FCreateOrderFragment\n\nexport type MCreateOrderAddRecipeVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderAddRecipeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrderRecipe: MCreateOrderAddRecipeCreateOrderRecipe\n}\n\nexport type MCreateOrderAddRecipeCreateOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderNewVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly callEventId?: Maybe<string>\n}\n\nexport type MCreateOrderNewMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrder: MCreateOrderNewCreateOrder\n}\n\nexport type MCreateOrderNewCreateOrder = FCreateOrderFragment\n\nexport type MCreateOrderRemoveItemVariables = {\n  readonly itemId: string\n}\n\nexport type MCreateOrderRemoveItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyOrderRecipe: MCreateOrderRemoveItemDestroyOrderRecipe\n}\n\nexport type MCreateOrderRemoveItemDestroyOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderUpdateVariables = {\n  readonly orderId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport type MCreateOrderUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MCreateOrderUpdateUpdateOrder\n}\n\nexport type MCreateOrderUpdateUpdateOrder = FCreateOrderFragment\n\nexport type MCreateOrderUpdateItemVariables = {\n  readonly itemId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderUpdateItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipe: MCreateOrderUpdateItemUpdateOrderRecipe\n}\n\nexport type MCreateOrderUpdateItemUpdateOrderRecipe = FCreateOrderFragment\n\nexport type MRemoveOrderPromoVariables = {\n  readonly orderId: string\n  readonly codeId: string\n}\n\nexport type MRemoveOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly removeOrderPromoCode: MRemoveOrderPromoRemoveOrderPromoCode\n}\n\nexport type MRemoveOrderPromoRemoveOrderPromoCode = FCreateOrderFragment\n\nexport type QCreateOrderItemVariables = {\n  readonly itemId: string\n}\n\nexport type QCreateOrderItemQuery = {\n  readonly __typename?: 'Query'\n\n  readonly item: QCreateOrderItemItem\n}\n\nexport type QCreateOrderItemItem = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItemRecipe\n\n  readonly selectedSidedishes: ReadonlyArray<QCreateOrderItemSelectedSidedishes>\n}\n\nexport type QCreateOrderItemRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QCreateOrderItemSelectedSidedishes = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItem_Recipe\n}\n\nexport type QCreateOrderItem_Recipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type QCreateOrderRecipeVariables = {\n  readonly recipeId: string\n}\n\nexport type QCreateOrderRecipeQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QCreateOrderRecipeRecipe\n}\n\nexport type QCreateOrderRecipeRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QOrderCartVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderCartQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderCartOrder\n}\n\nexport type QOrderCartOrder = FCreateOrderFragment\n\nexport type QOrderFormDeliverAtDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderFormDeliverAtDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly times: QOrderFormDeliverAtDefaultsTimes\n}\n\nexport type QOrderFormDeliverAtDefaultsTimes = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly deliveryTime: number\n\n  readonly pickupTime: number\n}\n\nexport type QOrderMenuVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderMenuQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orderMenu: ReadonlyArray<QOrderMenuOrderMenu>\n}\n\nexport type QOrderMenuOrderMenu = FOrderMenuCategoryFragment\n\nexport type QValidateLocationVariables = {\n  readonly branchId: string\n  readonly latitude: number\n  readonly longitude: number\n}\n\nexport type QValidateLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly resolveLocation: QValidateLocationResolveLocation\n}\n\nexport type QValidateLocationResolveLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly inDeliveryLocation: boolean\n\n  readonly zone: Maybe<QValidateLocationZone>\n}\n\nexport type QValidateLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly minimalOrderPrice: QValidateLocationMinimalOrderPrice\n}\n\nexport type QValidateLocationMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type MKitchenRecipeStateVariables = {\n  readonly recipeId: string\n  readonly state: OrderRecipeStateEnum\n}\n\nexport type MKitchenRecipeStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipeState: MKitchenRecipeStateUpdateOrderRecipeState\n}\n\nexport type MKitchenRecipeStateUpdateOrderRecipeState = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly orderRecipeState: MKitchenRecipeStateOrderRecipeState\n\n  readonly order: MKitchenRecipeStateOrder\n}\n\nexport type MKitchenRecipeStateOrderRecipeState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type MKitchenRecipeStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type QKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QKitchenOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QKitchenOrderListOrders>\n}\n\nexport type QKitchenOrderListOrders = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FKitchenOrderFragment\n\nexport type SKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SKitchenOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SKitchenOrderListUpdatedOrder\n}\n\nexport type SKitchenOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SKitchenOrderListOrder>\n}\n\nexport type SKitchenOrderListOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FKitchenOrderFragment\n\nexport type QUserBootstrapVariables = {\n  readonly userId: string\n}\n\nexport type QUserBootstrapQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: QUserBootstrapUser\n\n  readonly permissions: QUserBootstrapPermissions\n\n  readonly access: QUserBootstrapAccess\n}\n\nexport type QUserBootstrapUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly language: QUserBootstrapLanguage\n\n  readonly roles: ReadonlyArray<QUserBootstrapRoles>\n\n  readonly branches: ReadonlyArray<QUserBootstrapBranches>\n}\n\nexport type QUserBootstrapLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly rawCode: string\n}\n\nexport type QUserBootstrapRoles = {\n  readonly __typename?: 'Role'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type QUserBootstrapBranches = FCompanyBranchFragment\n\nexport type QUserBootstrapPermissions = {\n  readonly __typename?: 'UserPermission'\n\n  readonly canCancelOrders: boolean\n\n  readonly canCreateOrder: boolean\n}\n\nexport type QUserBootstrapAccess = {\n  readonly __typename?: '__Schema'\n\n  readonly queries: QUserBootstrapQueries\n\n  readonly mutations: Maybe<QUserBootstrapMutations>\n\n  readonly subscriptions: Maybe<QUserBootstrapSubscriptions>\n}\n\nexport type QUserBootstrapQueries = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrapFields>>\n}\n\nexport type QUserBootstrapFields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QUserBootstrapMutations = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrap_Fields>>\n}\n\nexport type QUserBootstrap_Fields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QUserBootstrapSubscriptions = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrap__Fields>>\n}\n\nexport type QUserBootstrap__Fields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QOrderCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n  readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type QOrderCountQuery = {\n  readonly __typename?: 'Query'\n\n  readonly ordersCount: number\n}\n\nexport type SOrderCallVariables = {}\n\nexport type SOrderCallSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly call: SOrderCallCall\n}\n\nexport type SOrderCallCall = {\n  readonly __typename?: 'UserCallingCustomerSubscription'\n\n  readonly eventId: string\n\n  readonly phone: string\n\n  readonly prefix: string\n\n  readonly isRinging: boolean\n}\n\nexport type SOrderCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n}\n\nexport type SOrderCountSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrdersCount: SOrderCountUpdatedOrdersCount\n}\n\nexport type SOrderCountUpdatedOrdersCount = {\n  readonly __typename?: 'OrderCountSubscription'\n\n  readonly ordersCount: number\n}\n\nexport type MMenuCategoryVisibilityVariables = {\n  readonly categoryId: string\n  readonly visible: boolean\n}\n\nexport type MMenuCategoryVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: MMenuCategoryVisibilityUpdateWareCategory\n}\n\nexport type MMenuCategoryVisibilityUpdateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type MMenuStockQuantityVariables = {\n  readonly stockItem: string\n  readonly quantityChange: number\n}\n\nexport type MMenuStockQuantityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly changeAmountStockItem: MMenuStockQuantityChangeAmountStockItem\n}\n\nexport type MMenuStockQuantityChangeAmountStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly quantity: number\n}\n\nexport type QMenuCategoryVariables = {\n  readonly categoryId: string\n}\n\nexport type QMenuCategoryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly category: QMenuCategoryCategory\n}\n\nexport type QMenuCategoryCategory = FMenuCategoryFragment\n\nexport type QMenuCategoryFilterVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuCategoryFilterQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryFilterCategories>\n}\n\nexport type QMenuCategoryFilterCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly countRecipes: number\n\n  readonly categoryType: QMenuCategoryFilterCategoryType\n}\n\nexport type QMenuCategoryFilterCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type QMenuCategoryListVariables = {\n  readonly branchId: string\n  readonly categoryType: WareCategoryTypeEnum\n}\n\nexport type QMenuCategoryListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryListCategories>\n}\n\nexport type QMenuCategoryListCategories = FMenuCategoryListItemFragment\n\nexport type QMenuGuideDownloadVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuGuideDownloadQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QMenuGuideDownloadCompanyBranch\n}\n\nexport type QMenuGuideDownloadCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly foodMenuUrl: Maybe<string>\n}\n\nexport type QMenuRecipeListVariables = {\n  readonly branchId: string\n  readonly categoryId?: Maybe<string>\n  readonly categoryType?: Maybe<WareCategoryTypeEnum>\n}\n\nexport type QMenuRecipeListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<QMenuRecipeListRecipes>\n}\n\nexport type QMenuRecipeListRecipes = FMenuRecipeFragment\n\nexport type QMenuStockDepositVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockDepositQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QMenuStockDepositStockItems>\n}\n\nexport type QMenuStockDepositStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly note: string\n\n  readonly quantity: number\n\n  readonly wareUnit: QMenuStockDepositWareUnit\n}\n\nexport type QMenuStockDepositWareUnit = FMenuWareUnitFragment\n\nexport type QMenuStockListVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QMenuStockListStockItems>\n}\n\nexport type QMenuStockListStockItems = GMenuStockItemFragment\n\nexport type QStockRecipesVariables = {\n  readonly stockId: string\n}\n\nexport type QStockRecipesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: QStockRecipesStockItem\n}\n\nexport type QStockRecipesStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly ingredients: ReadonlyArray<QStockRecipesIngredients>\n}\n\nexport type QStockRecipesIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly recipe: QStockRecipesRecipe\n}\n\nexport type QStockRecipesRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly recipeType: QStockRecipesRecipeType\n}\n\nexport type QStockRecipesRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type MBranchDefaultTimeVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly time: number\n}\n\nexport type MBranchDefaultTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateDefaultOrderProcessTime: MBranchDefaultTimeUpdateDefaultOrderProcessTime\n}\n\nexport type MBranchDefaultTimeUpdateDefaultOrderProcessTime = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type MOrderChangeToPickupVariables = {\n  readonly orderId: string\n}\n\nexport type MOrderChangeToPickupMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderDeliveryToPickup: MOrderChangeToPickupUpdateOrderDeliveryToPickup\n}\n\nexport type MOrderChangeToPickupUpdateOrderDeliveryToPickup = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliveryType: Maybe<MOrderChangeToPickupDeliveryType>\n}\n\nexport type MOrderChangeToPickupDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type MOrderTimeNotificationVariables = {\n  readonly orderId: string\n  readonly minutes: number\n}\n\nexport type MOrderTimeNotificationMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly orderNotifyCustomer: MOrderTimeNotificationOrderNotifyCustomer\n}\n\nexport type MOrderTimeNotificationOrderNotifyCustomer = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n}\n\nexport type MRemoveOrderDriverVariables = {\n  readonly orderDriverId: string\n}\n\nexport type MRemoveOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyUserDeliveringOrder: MRemoveOrderDriverDestroyUserDeliveringOrder\n}\n\nexport type MRemoveOrderDriverDestroyUserDeliveringOrder = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: MRemoveOrderDriverOrder\n}\n\nexport type MRemoveOrderDriverOrder = FOrderDriverFragment\n\nexport type MSelectOrderDriverVariables = {\n  readonly driverId: string\n  readonly orderId: string\n}\n\nexport type MSelectOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MSelectOrderDriverResult\n}\n\nexport type MSelectOrderDriverResult = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: MSelectOrderDriverOrder\n}\n\nexport type MSelectOrderDriverOrder = FOrderDriverFragment\n\nexport type QBranchDefeaultTimesVariables = {\n  readonly branchId: string\n}\n\nexport type QBranchDefeaultTimesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QBranchDefeaultTimesCompanyBranch\n}\n\nexport type QBranchDefeaultTimesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type QOrderDetailVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderDetailQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderDetailOrder\n}\n\nexport type QOrderDetailOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly companyBranch: QOrderDetailCompanyBranch\n\n  readonly customer: QOrderDetailCustomer\n\n  readonly customerOrdersCountCurrent: number\n\n  readonly customerOrdersCountTotal: number\n\n  readonly note: Maybe<string>\n\n  readonly previousNote: Maybe<string>\n\n  readonly allAppliedRules: ReadonlyArray<string>\n\n  readonly items: ReadonlyArray<QOrderDetailItems>\n\n  readonly orderOrigin: QOrderDetailOrderOrigin\n} & (FOrderTotalsFragment & FOrderTimingFragment & FOrderDriverFragment)\n\nexport type QOrderDetailCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type QOrderDetailCustomer = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly emails: ReadonlyArray<QOrderDetailEmails>\n\n  readonly phones: ReadonlyArray<QOrderDetailPhones>\n}\n\nexport type QOrderDetailEmails = FEmailFragment\n\nexport type QOrderDetailPhones = FPhoneFragment\n\nexport type QOrderDetailItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<QOrderDetailSidedishes>\n} & FOrderDetailWareFragment\n\nexport type QOrderDetailSidedishes = FOrderDetailWareFragment\n\nexport type QOrderDetailOrderOrigin = {\n  readonly __typename?: 'OrderOrigin'\n\n  readonly code: string\n\n  readonly enum: OrderOriginEnum\n}\n\nexport type QOrderDriversVariables = {\n  readonly orderId: string\n  readonly branchId: ReadonlyArray<string>\n}\n\nexport type QOrderDriversQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderDriversOrder\n\n  readonly drivers: ReadonlyArray<QOrderDriversDrivers>\n}\n\nexport type QOrderDriversOrder = FOrderDriverFragment\n\nexport type QOrderDriversDrivers = FDriverFragment\n\nexport type QOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QOrderListOrders>\n}\n\nexport type QOrderListOrders = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (FOrderStateCategoryFragment & FOrderTickerFragment)\n\nexport type QOrderListCategoriesVariables = {}\n\nexport type QOrderListCategoriesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QOrderListCategoriesCategories>\n}\n\nexport type QOrderListCategoriesCategories = {\n  readonly __typename?: 'OrderStateCategory'\n\n  readonly label: string\n\n  readonly enum: OrderStateCategoryEnum\n}\n\nexport type QOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QOrderMapDeliveriesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly deliveries: ReadonlyArray<QOrderMapDeliveriesDeliveries>\n}\n\nexport type QOrderMapDeliveriesDeliveries = FOrderMapDeliveryFragment\n\nexport type QOrderMapOrdersVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QOrderMapOrdersQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QOrderMapOrdersOrders>\n}\n\nexport type QOrderMapOrdersOrders = FOrderMapOrderFragment\n\nexport type QOrderStateVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type QOrderStateQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderStateOrder\n\n  readonly companyBranch: QOrderStateCompanyBranch\n}\n\nexport type QOrderStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly deliveryType: Maybe<QOrderStateDeliveryType>\n\n  readonly isCancelable: boolean\n\n  readonly isPriority: boolean\n} & FOrderStateCategoryFragment\n\nexport type QOrderStateDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type QOrderStateCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowedCategories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type SOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SOrderListUpdatedOrder\n}\n\nexport type SOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SOrderListOrder>\n}\n\nexport type SOrderListOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (FOrderStateCategoryFragment & FOrderTickerFragment)\n\nexport type SOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type SOrderMapDeliveriesSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly update: SOrderMapDeliveriesUpdate\n}\n\nexport type SOrderMapDeliveriesUpdate = {\n  readonly __typename?: 'TransportationDeviceUserUpdateSubscription'\n\n  readonly device: Maybe<SOrderMapDeliveriesDevice>\n}\n\nexport type SOrderMapDeliveriesDevice = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly user: SOrderMapDeliveriesUser\n} & FOrderMapDeviceFragment\n\nexport type SOrderMapDeliveriesUser = FOrderMapDriverFragment\n\nexport type SOrderMapOrdersVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SOrderMapOrdersSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SOrderMapOrdersUpdatedOrder\n}\n\nexport type SOrderMapOrdersUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SOrderMapOrdersOrder>\n}\n\nexport type SOrderMapOrdersOrder = FOrderMapOrderFragment\n\nexport type MFinancialReportCreateVariables = {\n  readonly branchId: string\n}\n\nexport type MFinancialReportCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MFinancialReportCreateResult\n}\n\nexport type MFinancialReportCreateResult = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n}\n\nexport type QAllDriversVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QAllDriversQuery = {\n  readonly __typename?: 'Query'\n\n  readonly drivers: ReadonlyArray<QAllDriversDrivers>\n}\n\nexport type QAllDriversDrivers = FDriverFragment\n\nexport type QClosureHistoryVariables = {\n  readonly branchId: string\n  readonly dateFrom: string\n  readonly dateTo: string\n}\n\nexport type QClosureHistoryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly history: ReadonlyArray<QClosureHistoryHistory>\n}\n\nexport type QClosureHistoryHistory = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QClosureReportVariables = {\n  readonly branchId: string\n  readonly reportId: string\n  readonly showReport: boolean\n}\n\nexport type QClosureReportQuery = {\n  readonly __typename?: 'Query'\n\n  readonly lastReport: QClosureReportLastReport\n\n  readonly report: Maybe<QClosureReportReport>\n}\n\nexport type QClosureReportLastReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QClosureReportReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QStatsDailyVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsDailyQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsDailyStats\n}\n\nexport type QStatsDailyStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly category: string\n\n  readonly daily: string\n\n  readonly delivery: string\n\n  readonly drivers: string\n}\n\nexport type QStatsOrdersVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsOrdersQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersStats\n}\n\nexport type QStatsOrdersStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly finishedOrders: QStatsOrdersFinishedOrders\n\n  readonly orderStatisticsPlain: string\n}\n\nexport type QStatsOrdersFinishedOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly fees: QStatsOrdersFees\n\n  readonly onlinePayments: QStatsOrdersOnlinePayments\n\n  readonly total: QStatsOrdersTotal\n\n  readonly finishedCount: number\n\n  readonly cancelledCount: number\n}\n\nexport type QStatsOrdersFees = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersOnlinePayments = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersTotal = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersCountsVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsOrdersCountsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersCountsStats\n}\n\nexport type QStatsOrdersCountsStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly counts: QStatsOrdersCountsCounts\n}\n\nexport type QStatsOrdersCountsCounts = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly finished: number\n\n  readonly cancelled: number\n}\n\nexport type QStatsOrdersListVariables = {\n  readonly filter: InputStatisticCreate\n  readonly pagination?: Maybe<InputPaginationParams>\n}\n\nexport type QStatsOrdersListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersListStats\n}\n\nexport type QStatsOrdersListStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly orders: QStatsOrdersListOrders\n}\n\nexport type QStatsOrdersListOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly list: ReadonlyArray<QStatsOrdersListList>\n}\n\nexport type QStatsOrdersListList = FOrderTickerFragment &\n  FOrderStateCategoryFragment\n\nexport type MUserMenuLanguageVariables = {\n  readonly userId: string\n  readonly lang: LanguageEnum\n}\n\nexport type MUserMenuLanguageMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateUser: MUserMenuLanguageUpdateUser\n}\n\nexport type MUserMenuLanguageUpdateUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly language: MUserMenuLanguageLanguage\n}\n\nexport type MUserMenuLanguageLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly enum: LanguageEnum\n}\n\nexport type QUserMenuLanguagesVariables = {}\n\nexport type QUserMenuLanguagesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly languages: ReadonlyArray<QUserMenuLanguagesLanguages>\n}\n\nexport type QUserMenuLanguagesLanguages = {\n  readonly __typename?: 'Language'\n\n  readonly code: string\n\n  readonly enum: LanguageEnum\n\n  readonly rawCode: string\n}\n\nexport type MZoneUpdateVariables = {\n  readonly zoneId: string\n  readonly update: InputZoneUpdate\n}\n\nexport type MZoneUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZone: MZoneUpdateUpdateZone\n}\n\nexport type MZoneUpdateUpdateZone = FZoneFragment\n\nexport type GSpecificBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly companyBranch: GSpecificBusinessHourCompanyBranch\n\n  readonly specificDate: Maybe<string>\n\n  readonly specificDateLocalized: Maybe<string>\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n\n  readonly openAt: string\n\n  readonly closeAt: string\n}\n\nexport type GSpecificBusinessHourCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type GMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly visible: boolean\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly availableAmount: number\n\n  readonly prices: ReadonlyArray<GMenuRecipePrices>\n\n  readonly recipeType: GMenuRecipeRecipeType\n}\n\nexport type GMenuRecipePrices = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipePriceType\n\n  readonly price: GMenuRecipePrice\n}\n\nexport type GMenuRecipePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n} & FPriceFragment\n\nexport type GMenuRecipeRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuStockItemFragment = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly note: string\n\n  readonly plu: Maybe<string>\n\n  readonly quantity: number\n\n  readonly nameLabel: string\n\n  readonly allergens: ReadonlyArray<GMenuStockItemAllergens>\n\n  readonly wareUnit: GMenuStockItemWareUnit\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockItemAllergens = FMenuAllergenFragment\n\nexport type GMenuStockItemWareUnit = FMenuWareUnitFragment\n\nexport type GMenuRecipePriceFragment = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipePricePriceType\n\n  readonly price: GMenuRecipePricePrice\n\n  readonly vat: GMenuRecipePriceVat\n}\n\nexport type GMenuRecipePricePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipePricePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly currency: GMenuRecipePriceCurrency\n} & FPriceFragment\n\nexport type GMenuRecipePriceCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GMenuRecipePriceVat = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n}\n\nexport type GMenuAssocRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n}\n\nexport type FAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly state: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n}\n\nexport type FCompanyBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly address: FCompanyBranchAddress\n\n  readonly gps: FCompanyBranchGps\n\n  readonly brand: FCompanyBranchBrand\n}\n\nexport type FCompanyBranchAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<FCompanyBranchCountry>\n}\n\nexport type FCompanyBranchCountry = {\n  readonly __typename?: 'Country'\n\n  readonly phonePrefix: string\n}\n\nexport type FCompanyBranchGps = FGeoPointFragment\n\nexport type FCompanyBranchBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FCustomerFragment = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly defaultEmail: Maybe<FCustomerDefaultEmail>\n\n  readonly defaultPhone: Maybe<FCustomerDefaultPhone>\n}\n\nexport type FCustomerDefaultEmail = FEmailFragment\n\nexport type FCustomerDefaultPhone = FPhoneFragment\n\nexport type FEmailFragment = {\n  readonly __typename?: 'Email'\n\n  readonly email: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FGeoPointFragment = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type FOrderStateCategoryFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type FPhoneFragment = {\n  readonly __typename?: 'Phone'\n\n  readonly phone: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n}\n\nexport type FPriceWithCurrencyFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FPriceWithCurrencyCurrency\n}\n\nexport type FPriceWithCurrencyCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FUserNameFragment = {\n  readonly __typename?: 'User'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type FRegularBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly weekDay: Maybe<FRegularBusinessHourWeekDay>\n}\n\nexport type FRegularBusinessHourWeekDay = {\n  readonly __typename?: 'WeekDay'\n\n  readonly enum: WeekDayEnum\n}\n\nexport type FSpecificBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly companyBranch: FSpecificBusinessHourCompanyBranch\n\n  readonly specificDate: Maybe<string>\n\n  readonly specificDateLocalized: Maybe<string>\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n\n  readonly openAt: string\n\n  readonly closeAt: string\n}\n\nexport type FSpecificBusinessHourCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type FWeekdayFragment = {\n  readonly __typename?: 'WeekDay'\n\n  readonly enum: WeekDayEnum\n\n  readonly code: string\n}\n\nexport type FCreateOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly items: ReadonlyArray<FCreateOrderItems>\n\n  readonly coverPrice: FCreateOrderCoverPrice\n\n  readonly transportFee: FCreateOrderTransportFee\n\n  readonly discounts: ReadonlyArray<FCreateOrderDiscounts>\n\n  readonly minimalOrderPrice: Maybe<FCreateOrderMinimalOrderPrice>\n\n  readonly totalDiscount: FCreateOrderTotalDiscount\n\n  readonly totalSum: FCreateOrderTotalSum\n}\n\nexport type FCreateOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly recipe: FCreateOrderRecipe\n\n  readonly priceWithSidedishes: FCreateOrderPriceWithSidedishes\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderSidedishes>\n} & FCreateOrderItemFragment\n\nexport type FCreateOrderRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly sidedishCount: number\n}\n\nexport type FCreateOrderPriceWithSidedishes = FPriceFragment\n\nexport type FCreateOrderSidedishes = FCreateOrderItemFragment\n\nexport type FCreateOrderCoverPrice = FPriceFragment\n\nexport type FCreateOrderTransportFee = FPriceFragment\n\nexport type FCreateOrderDiscounts = {\n  readonly __typename?: 'PriceWithDescription'\n\n  readonly code: string\n\n  readonly description: string\n\n  readonly price: FCreateOrderPrice\n}\n\nexport type FCreateOrderPrice = FPriceFragment\n\nexport type FCreateOrderMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type FCreateOrderTotalDiscount = FPriceFragment\n\nexport type FCreateOrderTotalSum = FPriceFragment\n\nexport type FCreateOrderItemFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly price: FCreateOrderItemPrice\n\n  readonly recipe: FCreateOrderItemRecipe\n}\n\nexport type FCreateOrderItemPrice = FPriceFragment\n\nexport type FCreateOrderItemRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FCreateOrderRecipeSidedishesFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly sidedishCategories: ReadonlyArray<\n    FCreateOrderRecipeSidedishesSidedishCategories\n  >\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderRecipeSidedishesSidedishes>\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly price: FCreateOrderRecipeSidedishesPrice\n}\n\nexport type FCreateOrderRecipeSidedishesPrice = FPriceFragment\n\nexport type FOrderMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly pictogram: Maybe<string>\n\n  readonly recipes: ReadonlyArray<FOrderMenuCategoryRecipes>\n}\n\nexport type FOrderMenuCategoryRecipes = FOrderMenuRecipeFragment\n\nexport type FOrderMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly price: FOrderMenuRecipePrice\n\n  readonly sidedishCount: number\n}\n\nexport type FOrderMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FOrderMenuRecipeCurrency\n}\n\nexport type FOrderMenuRecipeCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FKitchenOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly deliveryType: Maybe<FKitchenOrderDeliveryType>\n\n  readonly companyBranch: FKitchenOrderCompanyBranch\n\n  readonly address: FKitchenOrderAddress\n\n  readonly customer: FKitchenOrderCustomer\n\n  readonly note: Maybe<string>\n\n  readonly previousNote: Maybe<string>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n\n  readonly isPriority: boolean\n\n  readonly items: ReadonlyArray<FKitchenOrderItems>\n}\n\nexport type FKitchenOrderDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FKitchenOrderCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FKitchenOrderAddress = FAddressFragment\n\nexport type FKitchenOrderCustomer = FCustomerFragment\n\nexport type FKitchenOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<FKitchenOrderSidedishes>\n} & FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderSidedishes = FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderRecipeFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly orderRecipeState: FKitchenOrderRecipeOrderRecipeState\n\n  readonly recipe: FKitchenOrderRecipeRecipe\n}\n\nexport type FKitchenOrderRecipeOrderRecipeState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type FKitchenOrderRecipeRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FMenuAllergenFragment = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: AllergenEnum\n\n  readonly category: number\n}\n\nexport type FMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly visible: boolean\n\n  readonly categoryType: FMenuCategoryCategoryType\n\n  readonly pictogram: Maybe<string>\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly recipes: ReadonlyArray<FMenuCategoryRecipes>\n}\n\nexport type FMenuCategoryCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuCategoryRecipes = FMenuRecipeFragment\n\nexport type FMenuCategoryListItemFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly countRecipes: number\n\n  readonly visible: boolean\n\n  readonly categoryType: FMenuCategoryListItemCategoryType\n}\n\nexport type FMenuCategoryListItemCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly visible: boolean\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly availableAmount: number\n\n  readonly prices: ReadonlyArray<FMenuRecipePrices>\n\n  readonly recipeType: FMenuRecipeRecipeType\n}\n\nexport type FMenuRecipePrices = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: FMenuRecipePriceType\n\n  readonly price: FMenuRecipePrice\n}\n\nexport type FMenuRecipePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type FMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n} & FPriceFragment\n\nexport type FMenuRecipeRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuRecipePricingFragment = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: FMenuRecipePricingPriceType\n\n  readonly price: FMenuRecipePricingPrice\n\n  readonly vat: FMenuRecipePricingVat\n}\n\nexport type FMenuRecipePricingPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type FMenuRecipePricingPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly currency: FMenuRecipePricingCurrency\n} & FPriceFragment\n\nexport type FMenuRecipePricingCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FMenuRecipePricingVat = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n}\n\nexport type FMenuWareUnitFragment = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly enum: WareUnitEnum\n\n  readonly code: string\n}\n\nexport type FDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n} & FUserNameFragment\n\nexport type FOrderDetailWareFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FOrderDetailWareRecipe\n\n  readonly price: FOrderDetailWarePrice\n}\n\nexport type FOrderDetailWareRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FOrderDetailWarePrice = FPriceFragment\n\nexport type FOrderDriverFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly driver: Maybe<FOrderDriverDriver>\n}\n\nexport type FOrderDriverDriver = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly id: string\n\n  readonly user: FOrderDriverUser\n}\n\nexport type FOrderDriverUser = FDriverFragment\n\nexport type FOrderMapDeliveryFragment = {\n  readonly __typename?: 'User'\n\n  readonly device: Maybe<FOrderMapDeliveryDevice>\n} & FOrderMapDriverFragment\n\nexport type FOrderMapDeliveryDevice = FOrderMapDeviceFragment\n\nexport type FOrderMapDeviceFragment = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly id: string\n\n  readonly lastPosition: Maybe<FOrderMapDeviceLastPosition>\n\n  readonly isFinalized: boolean\n}\n\nexport type FOrderMapDeviceLastPosition = {\n  readonly __typename?: 'GeoPositionWithTimestamp'\n\n  readonly gps: FOrderMapDeviceGps\n\n  readonly timestamp: string\n}\n\nexport type FOrderMapDeviceGps = FGeoPointFragment\n\nexport type FOrderMapDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n\n  readonly countUndeliveredOrders: number\n}\n\nexport type FOrderMapOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliveryType: Maybe<FOrderMapOrderDeliveryType>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n\n  readonly gps: Maybe<FOrderMapOrderGps>\n}\n\nexport type FOrderMapOrderDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FOrderMapOrderGps = FGeoPointFragment\n\nexport type FOrderTickerFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly isPaidWithCard: boolean\n\n  readonly isPriority: boolean\n\n  readonly deliveryType: Maybe<FOrderTickerDeliveryType>\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliverAtWorst: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly companyBranch: FOrderTickerCompanyBranch\n\n  readonly address: FOrderTickerAddress\n\n  readonly customer: FOrderTickerCustomer\n\n  readonly totalSum: FOrderTickerTotalSum\n}\n\nexport type FOrderTickerDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FOrderTickerCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly oldOrderThreshold: number\n}\n\nexport type FOrderTickerAddress = FAddressFragment\n\nexport type FOrderTickerCustomer = FCustomerFragment\n\nexport type FOrderTickerTotalSum = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type FOrderTimingFragment = {\n  readonly __typename?: 'Order'\n\n  readonly orderTiming: ReadonlyArray<FOrderTimingOrderTiming>\n}\n\nexport type FOrderTimingOrderTiming = {\n  readonly __typename?: 'OrderStateCategoryRelation'\n\n  readonly createdAt: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type FOrderTotalsFragment = {\n  readonly __typename?: 'Order'\n\n  readonly totalSum: FOrderTotalsTotalSum\n\n  readonly transportFee: FOrderTotalsTransportFee\n\n  readonly coverPrice: FOrderTotalsCoverPrice\n\n  readonly totalDiscount: FOrderTotalsTotalDiscount\n\n  readonly tip: FOrderTotalsTip\n}\n\nexport type FOrderTotalsTotalSum = FPriceFragment\n\nexport type FOrderTotalsTransportFee = FPriceFragment\n\nexport type FOrderTotalsCoverPrice = FPriceFragment\n\nexport type FOrderTotalsTotalDiscount = FPriceFragment\n\nexport type FOrderTotalsTip = FPriceFragment\n\nexport type FZoneFragment = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly enabled: boolean\n\n  readonly priority: number\n\n  readonly companyBranch: FZoneCompanyBranch\n\n  readonly geoPolygon: ReadonlyArray<FZoneGeoPolygon>\n\n  readonly priceRangeRules: ReadonlyArray<FZonePriceRangeRules>\n\n  readonly minimalOrderPrice: FZoneMinimalOrderPrice\n\n  readonly zoneColor: FZoneZoneColor\n}\n\nexport type FZoneCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly brand: FZoneBrand\n}\n\nexport type FZoneBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type FZoneGeoPolygon = FGeoPointFragment\n\nexport type FZonePriceRangeRules = FZonePriceRangeFragment\n\nexport type FZoneMinimalOrderPrice = FPriceFragment\n\nexport type FZoneZoneColor = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type FZonePriceRangeFragment = {\n  readonly __typename?: 'ZonePriceRangeRule'\n\n  readonly toPrice: FZonePriceRangeToPrice\n\n  readonly price: FZonePriceRangePrice\n}\n\nexport type FZonePriceRangeToPrice = FPriceFragment\n\nexport type FZonePriceRangePrice = FPriceFragment\n\nimport * as Hooks from '@speedlo/graphql'\nimport gql from 'graphql-tag'\n\n// ====================================================\n// Fragments\n// ====================================================\n\nexport const GSpecificBusinessHourFragmentDoc = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const FPriceFragmentDoc = gql`\n  fragment FPrice on PriceConverted {\n    value\n  }\n`\n\nexport const GMenuRecipeFragmentDoc = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FMenuAllergenFragmentDoc = gql`\n  fragment FMenuAllergen on Allergen {\n    id\n    code\n    enum\n    category\n  }\n`\n\nexport const FMenuWareUnitFragmentDoc = gql`\n  fragment FMenuWareUnit on WareUnit {\n    id\n    enum\n    code\n  }\n`\n\nexport const GMenuStockItemFragmentDoc = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...FMenuAllergen\n    }\n    wareUnit {\n      ...FMenuWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n\n  ${FMenuAllergenFragmentDoc}\n  ${FMenuWareUnitFragmentDoc}\n`\n\nexport const GMenuRecipePriceFragmentDoc = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const GMenuAssocRecipeFragmentDoc = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const FGeoPointFragmentDoc = gql`\n  fragment FGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const FCompanyBranchFragmentDoc = gql`\n  fragment FCompanyBranch on CompanyBranch {\n    id\n    name\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    gps {\n      ...FGeoPoint\n    }\n    brand {\n      id\n      name\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderStateCategoryFragmentDoc = gql`\n  fragment FOrderStateCategory on Order {\n    id\n    orderStateCategory\n  }\n`\n\nexport const FPriceWithCurrencyFragmentDoc = gql`\n  fragment FPriceWithCurrency on PriceConverted {\n    value\n    currency {\n      code\n    }\n  }\n`\n\nexport const FRegularBusinessHourFragmentDoc = gql`\n  fragment FRegularBusinessHour on BusinessHour {\n    id\n    openAt\n    closeAt\n    weekDay {\n      enum\n    }\n  }\n`\n\nexport const FSpecificBusinessHourFragmentDoc = gql`\n  fragment FSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const FWeekdayFragmentDoc = gql`\n  fragment FWeekday on WeekDay {\n    enum\n    code\n  }\n`\n\nexport const FCreateOrderItemFragmentDoc = gql`\n  fragment FCreateOrderItem on OrderRecipe {\n    id\n    price {\n      ...FPrice\n    }\n    recipe {\n      id\n      code\n      nameLabel\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderFragmentDoc = gql`\n  fragment FCreateOrder on Order {\n    id\n    countWares\n    items {\n      ...FCreateOrderItem\n      recipe {\n        sidedishCount: sideDishesWareCategoriesCount\n      }\n      priceWithSidedishes: priceWithSideDishes {\n        ...FPrice\n      }\n      sidedishes: sideDishes {\n        ...FCreateOrderItem\n      }\n    }\n    coverPrice {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...FPrice\n      }\n    }\n    minimalOrderPrice {\n      formattedValue\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    totalSum {\n      ...FPrice\n    }\n  }\n\n  ${FCreateOrderItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderRecipeSidedishesFragmentDoc = gql`\n  fragment FCreateOrderRecipeSidedishes on Recipe {\n    id\n    nameLabel\n    sidedishCategories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sidedishes: sideDishes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderMenuRecipeFragmentDoc = gql`\n  fragment FOrderMenuRecipe on Recipe {\n    id\n    code\n    nameLabel\n    descriptionLabel\n    price(warePriceType: DELIVERY) {\n      value\n      currency {\n        code\n      }\n    }\n    sidedishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const FOrderMenuCategoryFragmentDoc = gql`\n  fragment FOrderMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n    recipes(enabled: true, isAvailable: true) {\n      ...FOrderMenuRecipe\n    }\n  }\n\n  ${FOrderMenuRecipeFragmentDoc}\n`\n\nexport const FAddressFragmentDoc = gql`\n  fragment FAddress on JsonAddress {\n    state\n    city\n    street\n    houseNumber\n  }\n`\n\nexport const FEmailFragmentDoc = gql`\n  fragment FEmail on Email {\n    email\n    description\n    default\n  }\n`\n\nexport const FPhoneFragmentDoc = gql`\n  fragment FPhone on Phone {\n    phone\n    description\n    default\n  }\n`\n\nexport const FCustomerFragmentDoc = gql`\n  fragment FCustomer on JsonCustomer {\n    firstName\n    lastName\n    defaultEmail {\n      ...FEmail\n    }\n    defaultPhone {\n      ...FPhone\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n`\n\nexport const FKitchenOrderRecipeFragmentDoc = gql`\n  fragment FKitchenOrderRecipe on OrderRecipe {\n    id\n    orderRecipeState {\n      enum\n    }\n    recipe {\n      id\n      code\n      nameLabel\n    }\n  }\n`\n\nexport const FKitchenOrderFragmentDoc = gql`\n  fragment FKitchenOrder on Order {\n    id\n    deliverAt\n    deliveredAt\n    delayedDeliveryTime\n    deliveryType {\n      enum\n    }\n    companyBranch {\n      id\n      name\n    }\n    address {\n      ...FAddress\n    }\n    customer {\n      ...FCustomer\n    }\n    note\n    previousNote\n    orderStateCategory(target: FE_KITCHEN)\n    isPriority\n    items {\n      ...FKitchenOrderRecipe\n      sidedishes: sideDishes {\n        ...FKitchenOrderRecipe\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n  ${FKitchenOrderRecipeFragmentDoc}\n`\n\nexport const FMenuRecipeFragmentDoc = gql`\n  fragment FMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FMenuCategoryFragmentDoc = gql`\n  fragment FMenuCategory on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    pictogram\n    minCount\n    maxCount\n    recipes {\n      ...FMenuRecipe\n    }\n  }\n\n  ${FMenuRecipeFragmentDoc}\n`\n\nexport const FMenuCategoryListItemFragmentDoc = gql`\n  fragment FMenuCategoryListItem on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    countRecipes\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n  }\n`\n\nexport const FMenuRecipePricingFragmentDoc = gql`\n  fragment FMenuRecipePricing on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderDetailWareFragmentDoc = gql`\n  fragment FOrderDetailWare on OrderRecipe {\n    id\n    recipe {\n      id\n      code\n      nameLabel\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FUserNameFragmentDoc = gql`\n  fragment FUserName on User {\n    firstName\n    lastName\n  }\n`\n\nexport const FDriverFragmentDoc = gql`\n  fragment FDriver on User {\n    id\n    initials\n    ...FUserName\n  }\n\n  ${FUserNameFragmentDoc}\n`\n\nexport const FOrderDriverFragmentDoc = gql`\n  fragment FOrderDriver on Order {\n    id\n    driver: userDeliveringOrder {\n      id\n      user {\n        ...FDriver\n      }\n    }\n  }\n\n  ${FDriverFragmentDoc}\n`\n\nexport const FOrderMapDriverFragmentDoc = gql`\n  fragment FOrderMapDriver on User {\n    id\n    initials\n    countUndeliveredOrders\n  }\n`\n\nexport const FOrderMapDeviceFragmentDoc = gql`\n  fragment FOrderMapDevice on TransportationDeviceUser {\n    id\n    lastPosition {\n      gps: geoPosition {\n        ...FGeoPoint\n      }\n      timestamp\n    }\n    isFinalized\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderMapDeliveryFragmentDoc = gql`\n  fragment FOrderMapDelivery on User {\n    ...FOrderMapDriver\n    device: usedTransportationDevice {\n      ...FOrderMapDevice\n    }\n  }\n\n  ${FOrderMapDriverFragmentDoc}\n  ${FOrderMapDeviceFragmentDoc}\n`\n\nexport const FOrderMapOrderFragmentDoc = gql`\n  fragment FOrderMapOrder on Order {\n    id\n    deliverAt\n    deliveryType {\n      enum\n    }\n    delayedDeliveryTime\n    orderStateCategory\n    gps {\n      ...FGeoPoint\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderTickerFragmentDoc = gql`\n  fragment FOrderTicker on Order {\n    id\n    createdAt\n    isPaidWithCard\n    isPriority\n    deliveryType {\n      enum\n    }\n    deliverAt\n    deliverAtWorst\n    deliveredAt\n    delayedDeliveryTime\n    companyBranch {\n      id\n      name\n      oldOrderThreshold\n    }\n    address {\n      ...FAddress\n    }\n    customer {\n      ...FCustomer\n    }\n    totalSum {\n      formattedValue\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n`\n\nexport const FOrderTimingFragmentDoc = gql`\n  fragment FOrderTiming on Order {\n    orderTiming: orderStateCategoryRelations {\n      createdAt\n      orderStateCategory\n    }\n  }\n`\n\nexport const FOrderTotalsFragmentDoc = gql`\n  fragment FOrderTotals on Order {\n    totalSum {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    coverPrice {\n      ...FPrice\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    tip {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FZonePriceRangeFragmentDoc = gql`\n  fragment FZonePriceRange on ZonePriceRangeRule {\n    toPrice {\n      ...FPrice\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FZoneFragmentDoc = gql`\n  fragment FZone on Zone {\n    id\n    name\n    enabled\n    priority\n    companyBranch {\n      id\n      brand {\n        id\n      }\n    }\n    geoPolygon {\n      ...FGeoPoint\n    }\n    priceRangeRules {\n      ...FZonePriceRange\n    }\n    minimalOrderPrice {\n      ...FPrice\n    }\n    zoneColor {\n      id\n      code\n      color\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n  ${FZonePriceRangeFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\n// ====================================================\n// Hooks\n// ====================================================\n\nexport const MPasswordChangeDocument = gql`\n  mutation MPasswordChange($password: String!) {\n    updateUserPassword(newPassword: $password) {\n      id\n      token\n    }\n  }\n`\n\nexport function useMPasswordChange(\n  baseOptions?: Hooks.MutationHookOptions<\n    MPasswordChangeMutation,\n    MPasswordChangeVariables\n  >,\n) {\n  return Hooks.useMutation<MPasswordChangeMutation, MPasswordChangeVariables>(\n    MPasswordChangeDocument,\n    baseOptions,\n  )\n}\n\nexport const GCreateSpecificBusinessHourDocument = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n\n  ${GSpecificBusinessHourFragmentDoc}\n`\n\nexport function useGCreateSpecificBusinessHour(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateSpecificBusinessHourMutation,\n    GCreateSpecificBusinessHourVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreateSpecificBusinessHourMutation,\n    GCreateSpecificBusinessHourVariables\n  >(GCreateSpecificBusinessHourDocument, baseOptions)\n}\n\nexport const GDeleteSpecificBusinessHourDocument = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n\nexport function useGDeleteSpecificBusinessHour(\n  baseOptions?: Hooks.MutationHookOptions<\n    GDeleteSpecificBusinessHourMutation,\n    GDeleteSpecificBusinessHourVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GDeleteSpecificBusinessHourMutation,\n    GDeleteSpecificBusinessHourVariables\n  >(GDeleteSpecificBusinessHourDocument, baseOptions)\n}\n\nexport const GSpecificBusinessHoursDocument = gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n\n  ${GSpecificBusinessHourFragmentDoc}\n`\n\nexport function useGSpecificBusinessHours(\n  variables?: GSpecificBusinessHoursVariables,\n  baseOptions?: Hooks.QueryHookOptions<GSpecificBusinessHoursVariables>,\n) {\n  return Hooks.useQuery<\n    GSpecificBusinessHoursQuery,\n    GSpecificBusinessHoursVariables\n  >(GSpecificBusinessHoursDocument, variables, baseOptions)\n}\n\nexport const GOrderVamDocument = gql`\n  query GOrderVam($branchId: ID!, $phone: String!) {\n    vamCustomer: vamInformation(companyBranchId: $branchId, phone: $phone) {\n      isFound\n      email\n      firstName\n      lastName\n      lastOrder {\n        note\n      }\n      locations {\n        street\n        houseNumber\n        city\n        state\n        gps {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n`\n\nexport function useGOrderVam(\n  variables?: GOrderVamVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderVamVariables>,\n) {\n  return Hooks.useQuery<GOrderVamQuery, GOrderVamVariables>(\n    GOrderVamDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderPromoDocument = gql`\n  query GOrderPromo($branchId: ID!) {\n    promoCodes(promoCode: { companyBranch: $branchId, enabled: true }) {\n      id\n      code\n    }\n  }\n`\n\nexport function useGOrderPromo(\n  variables?: GOrderPromoVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderPromoVariables>,\n) {\n  return Hooks.useQuery<GOrderPromoQuery, GOrderPromoVariables>(\n    GOrderPromoDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GSortMenuCategoryDocument = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport function useGSortMenuCategory(\n  baseOptions?: Hooks.MutationHookOptions<\n    GSortMenuCategoryMutation,\n    GSortMenuCategoryVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GSortMenuCategoryMutation,\n    GSortMenuCategoryVariables\n  >(GSortMenuCategoryDocument, baseOptions)\n}\n\nexport const GMenuCategoryCreateDocument = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport function useGMenuCategoryCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryCreateMutation,\n    GMenuCategoryCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryCreateMutation,\n    GMenuCategoryCreateVariables\n  >(GMenuCategoryCreateDocument, baseOptions)\n}\n\nexport const GMenuCategoryUpdateDocument = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...FMenuCategory\n    }\n  }\n\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport function useGMenuCategoryUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryUpdateMutation,\n    GMenuCategoryUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryUpdateMutation,\n    GMenuCategoryUpdateVariables\n  >(GMenuCategoryUpdateDocument, baseOptions)\n}\n\nexport const GMenuCategoryDeleteDocument = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuCategoryDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryDeleteMutation,\n    GMenuCategoryDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryDeleteMutation,\n    GMenuCategoryDeleteVariables\n  >(GMenuCategoryDeleteDocument, baseOptions)\n}\n\nexport const GMenuRecipeVisibilityDocument = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useGMenuRecipeVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeVisibilityMutation,\n    GMenuRecipeVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeVisibilityMutation,\n    GMenuRecipeVisibilityVariables\n  >(GMenuRecipeVisibilityDocument, baseOptions)\n}\n\nexport const GMenuRecipeCreateDocument = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeCreateMutation,\n    GMenuRecipeCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeCreateMutation,\n    GMenuRecipeCreateVariables\n  >(GMenuRecipeCreateDocument, baseOptions)\n}\n\nexport const GMenuRecipeUpdateDocument = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeUpdateMutation,\n    GMenuRecipeUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeUpdateMutation,\n    GMenuRecipeUpdateVariables\n  >(GMenuRecipeUpdateDocument, baseOptions)\n}\n\nexport const GMenuRecipeDeleteDocument = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuRecipeDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeDeleteMutation,\n    GMenuRecipeDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeDeleteMutation,\n    GMenuRecipeDeleteVariables\n  >(GMenuRecipeDeleteDocument, baseOptions)\n}\n\nexport const GMenuStockCreateDocument = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockCreateMutation,\n    GMenuStockCreateVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockCreateMutation, GMenuStockCreateVariables>(\n    GMenuStockCreateDocument,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockUpdateDocument = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockUpdateMutation,\n    GMenuStockUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockUpdateMutation, GMenuStockUpdateVariables>(\n    GMenuStockUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockDeleteDocument = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuStockDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockDeleteMutation,\n    GMenuStockDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockDeleteMutation, GMenuStockDeleteVariables>(\n    GMenuStockDeleteDocument,\n    baseOptions,\n  )\n}\n\nexport const GAllergensDocument = gql`\n  query GAllergens {\n    allergens {\n      ...FMenuAllergen\n    }\n  }\n\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport function useGAllergens(\n  variables?: GAllergensVariables,\n  baseOptions?: Hooks.QueryHookOptions<GAllergensVariables>,\n) {\n  return Hooks.useQuery<GAllergensQuery, GAllergensVariables>(\n    GAllergensDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCurrenciesDocument = gql`\n  query GCurrencies($branchId: ID!) {\n    currencies {\n      enum\n      code\n    }\n    companyBranch(id: $branchId) {\n      address {\n        country {\n          currency {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useGCurrencies(\n  variables?: GCurrenciesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GCurrenciesVariables>,\n) {\n  return Hooks.useQuery<GCurrenciesQuery, GCurrenciesVariables>(\n    GCurrenciesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GVatsDocument = gql`\n  query GVats($branchId: ID!) {\n    vats(companyBranch: $branchId) {\n      id\n      vat\n    }\n  }\n`\n\nexport function useGVats(\n  variables?: GVatsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GVatsVariables>,\n) {\n  return Hooks.useQuery<GVatsQuery, GVatsVariables>(\n    GVatsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GWareUnitsDocument = gql`\n  query GWareUnits {\n    wareUnits {\n      id\n      code\n      enum\n    }\n  }\n`\n\nexport function useGWareUnits(\n  variables?: GWareUnitsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GWareUnitsVariables>,\n) {\n  return Hooks.useQuery<GWareUnitsQuery, GWareUnitsVariables>(\n    GWareUnitsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuRecipeFormDocument = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...FMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...FMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n\n  ${GMenuRecipePriceFragmentDoc}\n  ${FMenuCategoryListItemFragmentDoc}\n  ${GMenuAssocRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeForm(\n  variables?: GMenuRecipeFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeFormVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeFormQuery, GMenuRecipeFormVariables>(\n    GMenuRecipeFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuRecipeFormAssocDocument = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n\n  ${GMenuAssocRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeFormAssoc(\n  variables?: GMenuRecipeFormAssocVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeFormAssocVariables>,\n) {\n  return Hooks.useQuery<\n    GMenuRecipeFormAssocQuery,\n    GMenuRecipeFormAssocVariables\n  >(GMenuRecipeFormAssocDocument, variables, baseOptions)\n}\n\nexport const GMenuRecipeDefaultsDocument = gql`\n  query GMenuRecipeDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport function useGMenuRecipeDefaults(\n  variables?: GMenuRecipeDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeDefaultsVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeDefaultsQuery, GMenuRecipeDefaultsVariables>(\n    GMenuRecipeDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockFormDocument = gql`\n  query GMenuStockForm($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      code\n      plu\n      note\n      nameLabel: label\n      allowNegative\n      wareUnit {\n        ...FMenuWareUnit\n      }\n      allergens {\n        ...FMenuAllergen\n      }\n      companyBranch {\n        id\n        allowNegative: stockItemsCanBeNegative\n      }\n    }\n  }\n\n  ${FMenuWareUnitFragmentDoc}\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport function useGMenuStockForm(\n  variables?: GMenuStockFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockFormVariables>,\n) {\n  return Hooks.useQuery<GMenuStockFormQuery, GMenuStockFormVariables>(\n    GMenuStockFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockDefaultsDocument = gql`\n  query GMenuStockDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      allowNegative: stockItemsCanBeNegative\n    }\n  }\n`\n\nexport function useGMenuStockDefaults(\n  variables?: GMenuStockDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockDefaultsVariables>,\n) {\n  return Hooks.useQuery<GMenuStockDefaultsQuery, GMenuStockDefaultsVariables>(\n    GMenuStockDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCreateZoneDocument = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useGCreateZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateZoneMutation,\n    GCreateZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GCreateZoneMutation, GCreateZoneVariables>(\n    GCreateZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GUpdateZonePriorityDocument = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport function useGUpdateZonePriority(\n  baseOptions?: Hooks.MutationHookOptions<\n    GUpdateZonePriorityMutation,\n    GUpdateZonePriorityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GUpdateZonePriorityMutation,\n    GUpdateZonePriorityVariables\n  >(GUpdateZonePriorityDocument, baseOptions)\n}\n\nexport const GDestroyZoneDocument = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n\nexport function useGDestroyZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GDestroyZoneMutation,\n    GDestroyZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GDestroyZoneMutation, GDestroyZoneVariables>(\n    GDestroyZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GZonesDocument = gql`\n  query GZones($branchesId: [ID!]!) {\n    zones(companyBranches: $branchesId) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useGZones(\n  variables?: GZonesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZonesVariables>,\n) {\n  return Hooks.useQuery<GZonesQuery, GZonesVariables>(\n    GZonesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneLocationDocument = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...FGeoPoint\n        }\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGZoneLocation(\n  variables?: GZoneLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneLocationVariables>,\n) {\n  return Hooks.useQuery<GZoneLocationQuery, GZoneLocationVariables>(\n    GZoneLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneBranchLocationDocument = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGZoneBranchLocation(\n  variables?: GZoneBranchLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneBranchLocationVariables>,\n) {\n  return Hooks.useQuery<GZoneBranchLocationQuery, GZoneBranchLocationVariables>(\n    GZoneBranchLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneColorsDocument = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n\nexport function useGZoneColors(\n  variables?: GZoneColorsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneColorsVariables>,\n) {\n  return Hooks.useQuery<GZoneColorsQuery, GZoneColorsVariables>(\n    GZoneColorsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QAddressSuggestDocument = gql`\n  query QAddressSuggest($search: String!) {\n    suggest: suggestGeolocation(address: $search) {\n      ...FAddress\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useQAddressSuggest(\n  variables?: QAddressSuggestVariables,\n  baseOptions?: Hooks.QueryHookOptions<QAddressSuggestVariables>,\n) {\n  return Hooks.useQuery<QAddressSuggestQuery, QAddressSuggestVariables>(\n    QAddressSuggestDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MOrderStateDocument = gql`\n  mutation MOrderState($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...FOrderStateCategory\n      ...FOrderTiming\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTimingFragmentDoc}\n`\n\nexport function useMOrderState(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderStateMutation,\n    MOrderStateVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderStateMutation, MOrderStateVariables>(\n    MOrderStateDocument,\n    baseOptions,\n  )\n}\n\nexport const MSetPriorityOrderDocument = gql`\n  mutation MSetPriorityOrder($orderId: ID!, $isPriority: Boolean!) {\n    setPriorityOrder(order: $orderId, isPriority: $isPriority) {\n      id\n      isPriority\n    }\n  }\n`\n\nexport function useMSetPriorityOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSetPriorityOrderMutation,\n    MSetPriorityOrderVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSetPriorityOrderMutation,\n    MSetPriorityOrderVariables\n  >(MSetPriorityOrderDocument, baseOptions)\n}\n\nexport const QLogoutWidgetDocument = gql`\n  query QLogoutWidget($id: ID!) {\n    user(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n`\n\nexport function useQLogoutWidget(\n  variables?: QLogoutWidgetVariables,\n  baseOptions?: Hooks.QueryHookOptions<QLogoutWidgetVariables>,\n) {\n  return Hooks.useQuery<QLogoutWidgetQuery, QLogoutWidgetVariables>(\n    QLogoutWidgetDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MBusinessHoursSubmitDocument = gql`\n  mutation MBusinessHoursSubmit(\n    $branchId: ID!\n    $hours: [InputBusinessHourCreate!]!\n  ) {\n    createBusinessHours(companyBranch: $branchId, businessHours: $hours) {\n      ...FRegularBusinessHour\n    }\n  }\n\n  ${FRegularBusinessHourFragmentDoc}\n`\n\nexport function useMBusinessHoursSubmit(\n  baseOptions?: Hooks.MutationHookOptions<\n    MBusinessHoursSubmitMutation,\n    MBusinessHoursSubmitVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MBusinessHoursSubmitMutation,\n    MBusinessHoursSubmitVariables\n  >(MBusinessHoursSubmitDocument, baseOptions)\n}\n\nexport const QRegularBusinessHoursDocument = gql`\n  query QRegularBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId) {\n      ...FRegularBusinessHour\n    }\n    weekDays {\n      ...FWeekday\n    }\n  }\n\n  ${FRegularBusinessHourFragmentDoc}\n  ${FWeekdayFragmentDoc}\n`\n\nexport function useQRegularBusinessHours(\n  variables?: QRegularBusinessHoursVariables,\n  baseOptions?: Hooks.QueryHookOptions<QRegularBusinessHoursVariables>,\n) {\n  return Hooks.useQuery<\n    QRegularBusinessHoursQuery,\n    QRegularBusinessHoursVariables\n  >(QRegularBusinessHoursDocument, variables, baseOptions)\n}\n\nexport const MAddOrderPromoDocument = gql`\n  mutation MAddOrderPromo($orderId: ID!, $code: String!) {\n    addOrderPromoCode(order: $orderId, promoCode: $code) {\n      userErrors: errors\n      order {\n        ...FCreateOrder\n      }\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMAddOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddOrderPromoMutation,\n    MAddOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<MAddOrderPromoMutation, MAddOrderPromoVariables>(\n    MAddOrderPromoDocument,\n    baseOptions,\n  )\n}\n\nexport const MCancelOrderDocument = gql`\n  mutation MCancelOrder($orderId: ID!) {\n    addOrderState(order: $orderId, orderState: CANCELED) {\n      id\n      ...FOrderStateCategory\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useMCancelOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCancelOrderMutation,\n    MCancelOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MCancelOrderMutation, MCancelOrderVariables>(\n    MCancelOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderAcceptDocument = gql`\n  mutation MCreateOrderAccept(\n    $orderId: ID!\n    $customer: InputCustomerCreate!\n    $deliverAt: DateTime\n    $note: String\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        customer: $customer\n        note: $note\n        deliverAt: $deliverAt\n        paymentMethod: CASH\n        paymentGate: CASH\n      }\n    ) {\n      userErrors\n      order {\n        ...FCreateOrder\n      }\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderAccept(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >(MCreateOrderAcceptDocument, baseOptions)\n}\n\nexport const MCreateOrderAddRecipeDocument = gql`\n  mutation MCreateOrderAddRecipe(\n    $orderId: ID!\n    $recipeId: ID!\n    $sidedishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sidedishes\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderAddRecipe(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >(MCreateOrderAddRecipeDocument, baseOptions)\n}\n\nexport const MCreateOrderNewDocument = gql`\n  mutation MCreateOrderNew(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $callEventId: ID\n  ) {\n    createOrder(\n      order: {\n        companyBranch: $branchId\n        deliveryType: $deliveryType\n        callEventId: $callEventId\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: {}\n        warePriceType: DELIVERY\n        orderOrigin: STAFF\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderNew(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderNewMutation,\n    MCreateOrderNewVariables\n  >,\n) {\n  return Hooks.useMutation<MCreateOrderNewMutation, MCreateOrderNewVariables>(\n    MCreateOrderNewDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderRemoveItemDocument = gql`\n  mutation MCreateOrderRemoveItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderRemoveItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >(MCreateOrderRemoveItemDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateDocument = gql`\n  mutation MCreateOrderUpdate(\n    $orderId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $customer: InputCustomerCreate\n  ) {\n    updateOrder(\n      id: $orderId\n      order: {\n        deliveryType: $deliveryType\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: $customer\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >(MCreateOrderUpdateDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateItemDocument = gql`\n  mutation MCreateOrderUpdateItem($itemId: ID!, $sidedishes: [ID!]) {\n    updateOrderRecipe(id: $itemId, orderRecipe: { sideDishes: $sidedishes }) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderUpdateItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >(MCreateOrderUpdateItemDocument, baseOptions)\n}\n\nexport const MRemoveOrderPromoDocument = gql`\n  mutation MRemoveOrderPromo($orderId: ID!, $codeId: ID!) {\n    removeOrderPromoCode(order: $orderId, promoCode: $codeId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMRemoveOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >(MRemoveOrderPromoDocument, baseOptions)\n}\n\nexport const QCreateOrderItemDocument = gql`\n  query QCreateOrderItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...FCreateOrderRecipeSidedishes\n      }\n      selectedSidedishes: sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderItem(\n  variables?: QCreateOrderItemVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCreateOrderItemVariables>,\n) {\n  return Hooks.useQuery<QCreateOrderItemQuery, QCreateOrderItemVariables>(\n    QCreateOrderItemDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QCreateOrderRecipeDocument = gql`\n  query QCreateOrderRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...FCreateOrderRecipeSidedishes\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderRecipe(\n  variables?: QCreateOrderRecipeVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCreateOrderRecipeVariables>,\n) {\n  return Hooks.useQuery<QCreateOrderRecipeQuery, QCreateOrderRecipeVariables>(\n    QCreateOrderRecipeDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderCartDocument = gql`\n  query QOrderCart($orderId: ID!) {\n    order(id: $orderId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useQOrderCart(\n  variables?: QOrderCartVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderCartVariables>,\n) {\n  return Hooks.useQuery<QOrderCartQuery, QOrderCartVariables>(\n    QOrderCartDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderFormDeliverAtDefaultsDocument = gql`\n  query QOrderFormDeliverAtDefaults($branchId: ID!) {\n    times: companyBranch(id: $branchId) {\n      id\n      deliveryTime: defaultDeliveryTime\n      pickupTime: defaultPickupTime\n    }\n  }\n`\n\nexport function useQOrderFormDeliverAtDefaults(\n  variables?: QOrderFormDeliverAtDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFormDeliverAtDefaultsVariables>,\n) {\n  return Hooks.useQuery<\n    QOrderFormDeliverAtDefaultsQuery,\n    QOrderFormDeliverAtDefaultsVariables\n  >(QOrderFormDeliverAtDefaultsDocument, variables, baseOptions)\n}\n\nexport const QOrderMenuDocument = gql`\n  query QOrderMenu($branchId: ID!) {\n    orderMenu: wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n    ) {\n      ...FOrderMenuCategory\n    }\n  }\n\n  ${FOrderMenuCategoryFragmentDoc}\n`\n\nexport function useQOrderMenu(\n  variables?: QOrderMenuVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMenuVariables>,\n) {\n  return Hooks.useQuery<QOrderMenuQuery, QOrderMenuVariables>(\n    QOrderMenuDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QValidateLocationDocument = gql`\n  query QValidateLocation(\n    $branchId: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    resolveLocation(\n      companyBranch: $branchId\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      inDeliveryLocation\n      zone {\n        minimalOrderPrice {\n          formattedValue\n        }\n      }\n    }\n  }\n`\n\nexport function useQValidateLocation(\n  variables?: QValidateLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<QValidateLocationVariables>,\n) {\n  return Hooks.useQuery<QValidateLocationQuery, QValidateLocationVariables>(\n    QValidateLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MKitchenRecipeStateDocument = gql`\n  mutation MKitchenRecipeState($recipeId: ID!, $state: OrderRecipeStateEnum!) {\n    updateOrderRecipeState(id: $recipeId, orderRecipeState: $state) {\n      id\n      orderRecipeState {\n        enum\n      }\n      order {\n        id\n        orderStateCategory(target: FE_KITCHEN)\n      }\n    }\n  }\n`\n\nexport function useMKitchenRecipeState(\n  baseOptions?: Hooks.MutationHookOptions<\n    MKitchenRecipeStateMutation,\n    MKitchenRecipeStateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MKitchenRecipeStateMutation,\n    MKitchenRecipeStateVariables\n  >(MKitchenRecipeStateDocument, baseOptions)\n}\n\nexport const QKitchenOrderListDocument = gql`\n  query QKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoryTarget: FE_KITCHEN\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      id\n      ...FKitchenOrder\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useQKitchenOrderList(\n  variables?: QKitchenOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QKitchenOrderListVariables>,\n) {\n  return Hooks.useQuery<QKitchenOrderListQuery, QKitchenOrderListVariables>(\n    QKitchenOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SKitchenOrderListDocument = gql`\n  subscription SKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n      orderStateCategoryTarget: FE_KITCHEN\n    ) {\n      order {\n        id\n        ...FKitchenOrder\n      }\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useSKitchenOrderList(\n  variables?: SKitchenOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >(SKitchenOrderListDocument, variables, baseOptions)\n}\n\nexport const QUserBootstrapDocument = gql`\n  query QUserBootstrap($userId: ID!) {\n    user(id: $userId) {\n      id\n      firstName\n      lastName\n      language {\n        rawCode\n      }\n      roles {\n        id\n        name\n      }\n      branches: accessibleBranches {\n        ...FCompanyBranch\n      }\n    }\n    permissions: permissions {\n      canCancelOrders\n      canCreateOrder\n    }\n    access: __schema {\n      queries: queryType {\n        fields {\n          name\n        }\n      }\n      mutations: mutationType {\n        fields {\n          name\n        }\n      }\n      subscriptions: subscriptionType {\n        fields {\n          name\n        }\n      }\n    }\n  }\n\n  ${FCompanyBranchFragmentDoc}\n`\n\nexport function useQUserBootstrap(\n  variables?: QUserBootstrapVariables,\n  baseOptions?: Hooks.QueryHookOptions<QUserBootstrapVariables>,\n) {\n  return Hooks.useQuery<QUserBootstrapQuery, QUserBootstrapVariables>(\n    QUserBootstrapDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderCountDocument = gql`\n  query QOrderCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    ordersCount(companyBranches: $branchesId, orderStateCategories: $categories)\n  }\n`\n\nexport function useQOrderCount(\n  variables?: QOrderCountVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderCountVariables>,\n) {\n  return Hooks.useQuery<QOrderCountQuery, QOrderCountVariables>(\n    QOrderCountDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderCallDocument = gql`\n  subscription SOrderCall {\n    call: updatedUserCallingCustomer {\n      eventId\n      phone\n      prefix\n      isRinging\n    }\n  }\n`\n\nexport function useSOrderCall(\n  variables?: SOrderCallVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderCallSubscription,\n    SOrderCallVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderCallSubscription, SOrderCallVariables>(\n    SOrderCallDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderCountDocument = gql`\n  subscription SOrderCount($branchesId: [ID!]!) {\n    updatedOrdersCount(companyBranches: $branchesId) {\n      ordersCount\n    }\n  }\n`\n\nexport function useSOrderCount(\n  variables?: SOrderCountVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderCountSubscription,\n    SOrderCountVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderCountSubscription, SOrderCountVariables>(\n    SOrderCountDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MMenuCategoryVisibilityDocument = gql`\n  mutation MMenuCategoryVisibility($categoryId: ID!, $visible: Boolean!) {\n    updateWareCategory(id: $categoryId, wareCategory: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useMMenuCategoryVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >(MMenuCategoryVisibilityDocument, baseOptions)\n}\n\nexport const MMenuStockQuantityDocument = gql`\n  mutation MMenuStockQuantity($stockItem: ID!, $quantityChange: Float!) {\n    changeAmountStockItem(id: $stockItem, amountOffset: $quantityChange) {\n      id\n      quantity\n    }\n  }\n`\n\nexport function useMMenuStockQuantity(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >(MMenuStockQuantityDocument, baseOptions)\n}\n\nexport const QMenuCategoryDocument = gql`\n  query QMenuCategory($categoryId: ID!) {\n    category: wareCategory(id: $categoryId) {\n      ...FMenuCategory\n    }\n  }\n\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport function useQMenuCategory(\n  variables?: QMenuCategoryVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryQuery, QMenuCategoryVariables>(\n    QMenuCategoryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuCategoryFilterDocument = gql`\n  query QMenuCategoryFilter($branchId: ID!) {\n    categories: wareCategories(companyBranch: $branchId) {\n      id\n      nameLabel\n      countRecipes\n      categoryType: wareCategoryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useQMenuCategoryFilter(\n  variables?: QMenuCategoryFilterVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryFilterVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryFilterQuery, QMenuCategoryFilterVariables>(\n    QMenuCategoryFilterDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuCategoryListDocument = gql`\n  query QMenuCategoryList(\n    $branchId: ID!\n    $categoryType: WareCategoryTypeEnum!\n  ) {\n    categories: wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: $categoryType\n    ) {\n      ...FMenuCategoryListItem\n    }\n  }\n\n  ${FMenuCategoryListItemFragmentDoc}\n`\n\nexport function useQMenuCategoryList(\n  variables?: QMenuCategoryListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryListVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryListQuery, QMenuCategoryListVariables>(\n    QMenuCategoryListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuGuideDownloadDocument = gql`\n  query QMenuGuideDownload($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      foodMenuUrl\n    }\n  }\n`\n\nexport function useQMenuGuideDownload(\n  variables?: QMenuGuideDownloadVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuGuideDownloadVariables>,\n) {\n  return Hooks.useQuery<QMenuGuideDownloadQuery, QMenuGuideDownloadVariables>(\n    QMenuGuideDownloadDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuRecipeListDocument = gql`\n  query QMenuRecipeList(\n    $branchId: ID!\n    $categoryId: ID\n    $categoryType: WareCategoryTypeEnum\n  ) {\n    recipes(\n      companyBranch: $branchId\n      wareCategory: $categoryId\n      wareCategoryType: $categoryType\n    ) {\n      ...FMenuRecipe\n    }\n  }\n\n  ${FMenuRecipeFragmentDoc}\n`\n\nexport function useQMenuRecipeList(\n  variables?: QMenuRecipeListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuRecipeListVariables>,\n) {\n  return Hooks.useQuery<QMenuRecipeListQuery, QMenuRecipeListVariables>(\n    QMenuRecipeListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuStockDepositDocument = gql`\n  query QMenuStockDeposit($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      id\n      code\n      plu\n      nameLabel: label\n      note\n      quantity\n      wareUnit {\n        ...FMenuWareUnit\n      }\n    }\n  }\n\n  ${FMenuWareUnitFragmentDoc}\n`\n\nexport function useQMenuStockDeposit(\n  variables?: QMenuStockDepositVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuStockDepositVariables>,\n) {\n  return Hooks.useQuery<QMenuStockDepositQuery, QMenuStockDepositVariables>(\n    QMenuStockDepositDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuStockListDocument = gql`\n  query QMenuStockList($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useQMenuStockList(\n  variables?: QMenuStockListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuStockListVariables>,\n) {\n  return Hooks.useQuery<QMenuStockListQuery, QMenuStockListVariables>(\n    QMenuStockListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStockRecipesDocument = gql`\n  query QStockRecipes($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      ingredients {\n        id\n        recipe {\n          id\n          nameLabel\n          descriptionLabel\n          recipeType: wareCategoryType {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useQStockRecipes(\n  variables?: QStockRecipesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStockRecipesVariables>,\n) {\n  return Hooks.useQuery<QStockRecipesQuery, QStockRecipesVariables>(\n    QStockRecipesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MBranchDefaultTimeDocument = gql`\n  mutation MBranchDefaultTime(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $time: Int!\n  ) {\n    updateDefaultOrderProcessTime(\n      companyBranch: $branchId\n      deliveryType: $deliveryType\n      defaultTime: $time\n    ) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useMBranchDefaultTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >(MBranchDefaultTimeDocument, baseOptions)\n}\n\nexport const MOrderChangeToPickupDocument = gql`\n  mutation MOrderChangeToPickup($orderId: ID!) {\n    updateOrderDeliveryToPickup(id: $orderId) {\n      id\n      deliveryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMOrderChangeToPickup(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderChangeToPickupMutation,\n    MOrderChangeToPickupVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderChangeToPickupMutation,\n    MOrderChangeToPickupVariables\n  >(MOrderChangeToPickupDocument, baseOptions)\n}\n\nexport const MOrderTimeNotificationDocument = gql`\n  mutation MOrderTimeNotification($orderId: ID!, $minutes: Int!) {\n    orderNotifyCustomer(id: $orderId, minutes: $minutes) {\n      id\n      deliverAt\n    }\n  }\n`\n\nexport function useMOrderTimeNotification(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderTimeNotificationMutation,\n    MOrderTimeNotificationVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderTimeNotificationMutation,\n    MOrderTimeNotificationVariables\n  >(MOrderTimeNotificationDocument, baseOptions)\n}\n\nexport const MRemoveOrderDriverDocument = gql`\n  mutation MRemoveOrderDriver($orderDriverId: ID!) {\n    destroyUserDeliveringOrder(id: $orderDriverId) {\n      order {\n        ...FOrderDriver\n      }\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useMRemoveOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderDriverMutation,\n    MRemoveOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderDriverMutation,\n    MRemoveOrderDriverVariables\n  >(MRemoveOrderDriverDocument, baseOptions)\n}\n\nexport const MSelectOrderDriverDocument = gql`\n  mutation MSelectOrderDriver($driverId: ID!, $orderId: ID!) {\n    result: createUserDeliveringOrder(user: $driverId, order: $orderId) {\n      order {\n        ...FOrderDriver\n      }\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useMSelectOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSelectOrderDriverMutation,\n    MSelectOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSelectOrderDriverMutation,\n    MSelectOrderDriverVariables\n  >(MSelectOrderDriverDocument, baseOptions)\n}\n\nexport const QBranchDefeaultTimesDocument = gql`\n  query QBranchDefeaultTimes($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useQBranchDefeaultTimes(\n  variables?: QBranchDefeaultTimesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QBranchDefeaultTimesVariables>,\n) {\n  return Hooks.useQuery<\n    QBranchDefeaultTimesQuery,\n    QBranchDefeaultTimesVariables\n  >(QBranchDefeaultTimesDocument, variables, baseOptions)\n}\n\nexport const QOrderDetailDocument = gql`\n  query QOrderDetail($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      createdAt\n      deliverAt\n      delayedDeliveryTime\n      companyBranch {\n        id\n      }\n      customer {\n        emails {\n          ...FEmail\n        }\n        phones {\n          ...FPhone\n        }\n      }\n      customerOrdersCountCurrent\n      customerOrdersCountTotal\n      note\n      previousNote\n      allAppliedRules\n      items {\n        ...FOrderDetailWare\n        sidedishes: sideDishes {\n          ...FOrderDetailWare\n        }\n      }\n      orderOrigin {\n        code\n        enum\n      }\n      ...FOrderTotals\n      ...FOrderTiming\n      ...FOrderDriver\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n  ${FOrderDetailWareFragmentDoc}\n  ${FOrderTotalsFragmentDoc}\n  ${FOrderTimingFragmentDoc}\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useQOrderDetail(\n  variables?: QOrderDetailVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderDetailVariables>,\n) {\n  return Hooks.useQuery<QOrderDetailQuery, QOrderDetailVariables>(\n    QOrderDetailDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderDriversDocument = gql`\n  query QOrderDrivers($orderId: ID!, $branchId: [ID!]!) {\n    order(id: $orderId) {\n      ...FOrderDriver\n    }\n    drivers(companyBranches: $branchId, onlyAvailable: true) {\n      ...FDriver\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n  ${FDriverFragmentDoc}\n`\n\nexport function useQOrderDrivers(\n  variables?: QOrderDriversVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderDriversVariables>,\n) {\n  return Hooks.useQuery<QOrderDriversQuery, QOrderDriversVariables>(\n    QOrderDriversDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderListDocument = gql`\n  query QOrderList($branches: [ID!], $categories: [OrderStateCategoryEnum!]) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      id\n      ...FOrderStateCategory\n      ...FOrderTicker\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTickerFragmentDoc}\n`\n\nexport function useQOrderList(\n  variables?: QOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderListVariables>,\n) {\n  return Hooks.useQuery<QOrderListQuery, QOrderListVariables>(\n    QOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderListCategoriesDocument = gql`\n  query QOrderListCategories {\n    categories: orderStateCategories {\n      label: code\n      enum\n    }\n  }\n`\n\nexport function useQOrderListCategories(\n  variables?: QOrderListCategoriesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderListCategoriesVariables>,\n) {\n  return Hooks.useQuery<\n    QOrderListCategoriesQuery,\n    QOrderListCategoriesVariables\n  >(QOrderListCategoriesDocument, variables, baseOptions)\n}\n\nexport const QOrderMapDeliveriesDocument = gql`\n  query QOrderMapDeliveries($branches: [ID!]!) {\n    deliveries: drivers(companyBranches: $branches, onlyAvailable: false) {\n      ...FOrderMapDelivery\n    }\n  }\n\n  ${FOrderMapDeliveryFragmentDoc}\n`\n\nexport function useQOrderMapDeliveries(\n  variables?: QOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMapDeliveriesVariables>,\n) {\n  return Hooks.useQuery<QOrderMapDeliveriesQuery, QOrderMapDeliveriesVariables>(\n    QOrderMapDeliveriesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderMapOrdersDocument = gql`\n  query QOrderMapOrders(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      ...FOrderMapOrder\n    }\n  }\n\n  ${FOrderMapOrderFragmentDoc}\n`\n\nexport function useQOrderMapOrders(\n  variables?: QOrderMapOrdersVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMapOrdersVariables>,\n) {\n  return Hooks.useQuery<QOrderMapOrdersQuery, QOrderMapOrdersVariables>(\n    QOrderMapOrdersDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderStateDocument = gql`\n  query QOrderState($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      deliveryType {\n        enum\n      }\n      isCancelable\n      isPriority\n      ...FOrderStateCategory\n    }\n    companyBranch(id: $branchId) {\n      id\n      allowedCategories\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useQOrderState(\n  variables?: QOrderStateVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderStateVariables>,\n) {\n  return Hooks.useQuery<QOrderStateQuery, QOrderStateVariables>(\n    QOrderStateDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderListDocument = gql`\n  subscription SOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        id\n        ...FOrderStateCategory\n        ...FOrderTicker\n      }\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTickerFragmentDoc}\n`\n\nexport function useSOrderList(\n  variables?: SOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderListSubscription,\n    SOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderListSubscription, SOrderListVariables>(\n    SOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderMapDeliveriesDocument = gql`\n  subscription SOrderMapDeliveries($branches: [ID!]!) {\n    update: updatedTransportationDeviceUser(companyBranches: $branches) {\n      device: transportationDeviceUser {\n        ...FOrderMapDevice\n        user {\n          ...FOrderMapDriver\n        }\n      }\n    }\n  }\n\n  ${FOrderMapDeviceFragmentDoc}\n  ${FOrderMapDriverFragmentDoc}\n`\n\nexport function useSOrderMapDeliveries(\n  variables?: SOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >(SOrderMapDeliveriesDocument, variables, baseOptions)\n}\n\nexport const SOrderMapOrdersDocument = gql`\n  subscription SOrderMapOrders(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        ...FOrderMapOrder\n      }\n    }\n  }\n\n  ${FOrderMapOrderFragmentDoc}\n`\n\nexport function useSOrderMapOrders(\n  variables?: SOrderMapOrdersVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderMapOrdersSubscription,\n    SOrderMapOrdersVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrderMapOrdersSubscription,\n    SOrderMapOrdersVariables\n  >(SOrderMapOrdersDocument, variables, baseOptions)\n}\n\nexport const MFinancialReportCreateDocument = gql`\n  mutation MFinancialReportCreate($branchId: ID!) {\n    result: createFinancialReport(companyBranchId: $branchId) {\n      id\n    }\n  }\n`\n\nexport function useMFinancialReportCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MFinancialReportCreateMutation,\n    MFinancialReportCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MFinancialReportCreateMutation,\n    MFinancialReportCreateVariables\n  >(MFinancialReportCreateDocument, baseOptions)\n}\n\nexport const QAllDriversDocument = gql`\n  query QAllDrivers($branches: [ID!]!) {\n    drivers(companyBranches: $branches, onlyAvailable: false) {\n      ...FDriver\n    }\n  }\n\n  ${FDriverFragmentDoc}\n`\n\nexport function useQAllDrivers(\n  variables?: QAllDriversVariables,\n  baseOptions?: Hooks.QueryHookOptions<QAllDriversVariables>,\n) {\n  return Hooks.useQuery<QAllDriversQuery, QAllDriversVariables>(\n    QAllDriversDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QClosureHistoryDocument = gql`\n  query QClosureHistory($branchId: ID!, $dateFrom: Date!, $dateTo: Date!) {\n    history: financialReports(\n      companyBranchId: $branchId\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n    ) {\n      id\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useQClosureHistory(\n  variables?: QClosureHistoryVariables,\n  baseOptions?: Hooks.QueryHookOptions<QClosureHistoryVariables>,\n) {\n  return Hooks.useQuery<QClosureHistoryQuery, QClosureHistoryVariables>(\n    QClosureHistoryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QClosureReportDocument = gql`\n  query QClosureReport($branchId: ID!, $reportId: ID!, $showReport: Boolean!) {\n    lastReport: lastFinancialReport(companyBranchId: $branchId)\n      @skip(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n    report: financialReport(report: $reportId) @include(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useQClosureReport(\n  variables?: QClosureReportVariables,\n  baseOptions?: Hooks.QueryHookOptions<QClosureReportVariables>,\n) {\n  return Hooks.useQuery<QClosureReportQuery, QClosureReportVariables>(\n    QClosureReportDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsDailyDocument = gql`\n  query QStatsDaily($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      category: categoryStatisticsPlain\n      daily: dailyStatisticsPlain\n      delivery: deliveryStatisticsPlain\n      drivers: driversStatisticsPlain\n    }\n  }\n`\n\nexport function useQStatsDaily(\n  variables?: QStatsDailyVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsDailyVariables>,\n) {\n  return Hooks.useQuery<QStatsDailyQuery, QStatsDailyVariables>(\n    QStatsDailyDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsOrdersDocument = gql`\n  query QStatsOrders($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      finishedOrders {\n        fees {\n          ...FPriceWithCurrency\n        }\n        onlinePayments {\n          ...FPriceWithCurrency\n        }\n        total {\n          ...FPriceWithCurrency\n        }\n        finishedCount: ordersCount\n        cancelledCount: ordersCanceledCount\n      }\n      orderStatisticsPlain\n    }\n  }\n\n  ${FPriceWithCurrencyFragmentDoc}\n`\n\nexport function useQStatsOrders(\n  variables?: QStatsOrdersVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersQuery, QStatsOrdersVariables>(\n    QStatsOrdersDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsOrdersCountsDocument = gql`\n  query QStatsOrdersCounts($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      counts: finishedOrders {\n        finished: ordersCount\n        cancelled: ordersCanceledCount\n      }\n    }\n  }\n`\n\nexport function useQStatsOrdersCounts(\n  variables?: QStatsOrdersCountsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersCountsVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersCountsQuery, QStatsOrdersCountsVariables>(\n    QStatsOrdersCountsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsOrdersListDocument = gql`\n  query QStatsOrdersList(\n    $filter: InputStatisticCreate!\n    $pagination: InputPaginationParams\n  ) {\n    stats: statistics(statisticsInput: $filter) {\n      orders: finishedOrders {\n        list: orders(includeCanceled: true, pagination: $pagination) {\n          ...FOrderTicker\n          ...FOrderStateCategory\n        }\n      }\n    }\n  }\n\n  ${FOrderTickerFragmentDoc}\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useQStatsOrdersList(\n  variables?: QStatsOrdersListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersListVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersListQuery, QStatsOrdersListVariables>(\n    QStatsOrdersListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MUserMenuLanguageDocument = gql`\n  mutation MUserMenuLanguage($userId: ID!, $lang: LanguageEnum!) {\n    updateUser(id: $userId, user: { language: $lang }) {\n      id\n      language {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMUserMenuLanguage(\n  baseOptions?: Hooks.MutationHookOptions<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >(MUserMenuLanguageDocument, baseOptions)\n}\n\nexport const QUserMenuLanguagesDocument = gql`\n  query QUserMenuLanguages {\n    languages {\n      code\n      enum\n      rawCode\n    }\n  }\n`\n\nexport function useQUserMenuLanguages(\n  variables?: QUserMenuLanguagesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QUserMenuLanguagesVariables>,\n) {\n  return Hooks.useQuery<QUserMenuLanguagesQuery, QUserMenuLanguagesVariables>(\n    QUserMenuLanguagesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MZoneUpdateDocument = gql`\n  mutation MZoneUpdate($zoneId: ID!, $update: InputZoneUpdate!) {\n    updateZone(id: $zoneId, zone: $update) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useMZoneUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MZoneUpdateMutation,\n    MZoneUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<MZoneUpdateMutation, MZoneUpdateVariables>(\n    MZoneUpdateDocument,\n    baseOptions,\n  )\n}\n\n// Generated in 2019-04-30T12:23:26+02:00\n","import moment from 'moment'\n\nexport async function changeMomentLocale(lang: string) {\n  if (lang === 'en') {\n    moment.locale(lang)\n    return\n  }\n  const locale = await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"moment-[index]\" */\n    `moment/locale/${lang}`\n  )\n  moment.updateLocale(lang, locale)\n}\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { useReaction } from '@speedlo/hooks'\nimport { DETECTORS, LocaleResolver, TRANSFORMERS } from 'locales-detector'\nimport React from 'react'\n\nimport { useRoot } from './atoms/RootProvider'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\nimport { changeMomentLocale } from './locale/moment'\nimport { changeNumeralLocale } from './locale/numeral'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC = ({ children }) => {\n  const { user } = useRoot()\n  const [, forceUpdate] = React.useState(0)\n\n  useReaction(\n    () => user.language,\n    async (lang = detectLanguage()) => {\n      await setupLanguage(lang)\n      user.log('setup for language %s done', lang)\n      forceUpdate(i => i + 1)\n    },\n  )\n\n  return (\n    <I18nProvider i18n={i18n}>{React.Children.only(children)}</I18nProvider>\n  )\n}\n\nexport function detectLanguage() {\n  const resolver = new LocaleResolver(\n    [new DETECTORS.NavigatorDetector()],\n    [new TRANSFORMERS.LanguageOnlyTransformer()],\n  )\n  const languages = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nexport async function setupLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await Promise.all([\n    loadCatalog(lang),\n    changeNumeralLocale(lang),\n    changeMomentLocale(lang),\n  ])\n  i18n.activate(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","import numeral from 'numeral'\n\nexport async function changeNumeralLocale(lang: string) {\n  if (lang === 'en') {\n    numeral.locale(lang)\n    return\n  }\n  await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"numeral-[index]\" */\n    `numeral/locales/${lang}`\n  )\n  numeral.locale(lang)\n}\n\nconst numberRx = /[\\d\\.,\\s]+/\n\nexport function validateNumber(input: string) {\n  return numberRx.test(input)\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GSpecificBusinessHours } from '../../../graph/types'\n\nexport const SpecificBusinessHourFragment = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const QuerySpecificBusinessHours = buildQuery<\n  GSpecificBusinessHours.Query,\n  GSpecificBusinessHours.Variables\n>(gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`)\n","import gql from 'graphql-tag'\n\nimport { FGeoPointFragmentDoc } from '../../graph/generated'\n\nexport const ZoneLocationQuery = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...FGeoPoint\n        }\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n\nexport const ZoneBranchLocationQuery = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n\nexport const ZoneColorsQuery = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n","import React from 'react'\nimport { Route, RouteComponentProps, RouteProps } from 'react-router-dom'\n\ninterface IProps<Params> extends Omit<RouteProps, 'render' | 'children'> {\n  component: React.ComponentType<RouteComponentProps<Params>>\n}\n\nexport function LazyRoute<Params = {}>({\n  component: Component,\n  ...props\n}: IProps<Params>) {\n  return (\n    <Route {...props} render={routeProps => <Component {...routeProps} />} />\n  )\n}\n","import { addSeconds, differenceInMilliseconds } from 'date-fns'\nimport { Component } from 'react'\n\ninterface IRenderProps {\n  isActive: boolean\n  nextLoop(): void\n}\n\ninterface IProps {\n  intervalSec: number\n  enabled?: boolean\n  render(props: IRenderProps): ReactNode\n}\n\ninterface IState {\n  isActive: boolean\n  nextTime: Date\n}\n\nexport class IntervalRender extends Component<IProps, IState> {\n  state: IState = { isActive: false, nextTime: this.getNextTime() }\n  timer = 0\n  componentDidMount() {\n    this.executeTimer()\n  }\n  componentDidUpdate() {\n    this.executeTimer()\n  }\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer)\n    }\n  }\n  getNextTime() {\n    return addSeconds(new Date(), this.props.intervalSec)\n  }\n  executeTimer = () => {\n    if (this.timer) {\n      clearTimeout(this.timer)\n      this.timer = 0\n    }\n    if (this.props.enabled === false) {\n      return\n    }\n    const timeMs = differenceInMilliseconds(this.state.nextTime, new Date())\n    // @ts-ignore (setTimeout returning NodeJS.Timer) for some weird reason\n    this.timer = setTimeout(this.activate, timeMs)\n  }\n  activate = () => {\n    if (this.props.enabled !== false) {\n      this.setState({\n        isActive: true,\n        nextTime: this.getNextTime(),\n      })\n    }\n  }\n  deactivate = () => {\n    this.setState({ isActive: false })\n    this.executeTimer()\n  }\n  render() {\n    const { isActive } = this.state\n    return this.props.render({\n      isActive,\n      nextLoop: this.deactivate,\n    })\n  }\n}\n","import React from 'react'\nimport Sound from 'react-sound'\n\nimport { logMain } from '../helpers/logger'\nimport { IntervalRender } from './IntervalRender'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {\n  intervalSec: number\n  soundUrl: string\n  shouldPlay?: boolean\n  skipEnableChecks?: boolean\n}\n\nexport const SoundPlayInterval: React.FC<IProps> = ({\n  intervalSec,\n  soundUrl,\n  shouldPlay = true,\n  skipEnableChecks = false,\n}) => (\n  <WithRoot\n    observe={true}\n    render={({ config, user }) => {\n      if (!skipEnableChecks) {\n        if (!config.soundEnabled) {\n          logMain('sound is disabled')\n          return null\n        }\n        if (!user.soundEnabled) {\n          logMain('sound not enabled by user')\n          return null\n        }\n      }\n      logMain('sound play status: %s', shouldPlay)\n      return (\n        <IntervalRender\n          intervalSec={intervalSec}\n          enabled={shouldPlay}\n          render={({ isActive, nextLoop }) => (\n            <Sound\n              url={soundUrl}\n              playStatus={isActive ? 'PLAYING' : 'STOPPED'}\n              onFinishedPlaying={nextLoop}\n              loop={false}\n              autoLoad={true}\n              volume={user.soundVolume}\n            />\n          )}\n        />\n      )\n    }}\n  />\n)\n","module.exports = __webpack_public_path__ + \"static/media/connectionWarning.ac6fe03b.mp3\";","import { ISetDidChange, Lambda, observable } from 'mobx'\nimport { getParent, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { scroller } from 'react-scroll'\n\nimport { OrderStateCategoryEnum } from '../../../graph/generated'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TOrderModel } from './OrderModel'\n\nexport const OrderListModel = BaseModel.named('OrderList')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    collapsedCategories: types.optional(types.array(types.string), [\n      OrderStateCategoryEnum.Finished,\n    ]),\n  })\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length ? Array.from(self.branches) : []\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n    get isSingleBranchSelected() {\n      return self.branches.length === 1\n    },\n    get firstBranchId() {\n      if (self.branches.length === 1) {\n        return self.branches[0]\n      }\n      return null\n    },\n    get orderMap() {\n      return getParent<TOrderModel>(self).map\n    },\n  }))\n  .actions(self => ({\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n  }))\n  .extend(self => {\n    const detailOpen = observable.set<ID>()\n\n    return {\n      views: {\n        isOrderDetailOpen(orderId: ID) {\n          return detailOpen.has(orderId)\n        },\n        isCategoryCollapsed(categoryCode: OrderStateCategoryEnum) {\n          return self.collapsedCategories.includes(categoryCode)\n        },\n      },\n      actions: {\n        toggleOrderDetail(orderId: ID) {\n          if (detailOpen.has(orderId)) {\n            detailOpen.delete(orderId)\n          } else {\n            detailOpen.add(orderId)\n          }\n        },\n        toggleCategoryCollapse(category: OrderStateCategoryEnum) {\n          const index = self.collapsedCategories.indexOf(category)\n          if (index >= 0) {\n            self.collapsedCategories.splice(index, 1)\n          } else {\n            self.collapsedCategories.push(category)\n          }\n        },\n        focusOrderDetail(orderId: ID) {\n          if (!detailOpen.has(orderId)) {\n            detailOpen.add(orderId)\n          }\n          setImmediate(() => {\n            scroller.scrollTo(`order-${orderId}`, {\n              smooth: 'easeInOutQuart',\n              containerId: 'order-list',\n              absolute: true,\n              offset: -140,\n            })\n          })\n        },\n        observerOrderDetail: detailOpen.observe.bind(detailOpen) as (\n          listener: (changes: ISetDidChange<ID>) => void,\n        ) => Lambda,\n      },\n    }\n  })\n\nexport interface TOrderListModel extends Instance<typeof OrderListModel> {}\nexport interface TOrderListModelProps\n  extends SnapshotIn<typeof OrderListModel> {}\n","module.exports = __webpack_public_path__ + \"static/media/loader.533cace4.gif\";","module.exports = __webpack_public_path__ + \"static/media/bg_antracit.edb33205.jpg\";","// @ts-ignore temporary before figuring out a logging solution that works in prod\nwindow.localStorage.setItem('debug', '*,-sockjs*')\n","var map = {\n\t\"./af\": [\n\t\t595,\n\t\t4\n\t],\n\t\"./af.js\": [\n\t\t595,\n\t\t4\n\t],\n\t\"./ar\": [\n\t\t602,\n\t\t27\n\t],\n\t\"./ar-dz\": [\n\t\t596,\n\t\t60\n\t],\n\t\"./ar-dz.js\": [\n\t\t596,\n\t\t60\n\t],\n\t\"./ar-kw\": [\n\t\t597,\n\t\t98\n\t],\n\t\"./ar-kw.js\": [\n\t\t597,\n\t\t98\n\t],\n\t\"./ar-ly\": [\n\t\t598,\n\t\t109\n\t],\n\t\"./ar-ly.js\": [\n\t\t598,\n\t\t109\n\t],\n\t\"./ar-ma\": [\n\t\t599,\n\t\t120\n\t],\n\t\"./ar-ma.js\": [\n\t\t599,\n\t\t120\n\t],\n\t\"./ar-sa\": [\n\t\t600,\n\t\t5\n\t],\n\t\"./ar-sa.js\": [\n\t\t600,\n\t\t5\n\t],\n\t\"./ar-tn\": [\n\t\t601,\n\t\t16\n\t],\n\t\"./ar-tn.js\": [\n\t\t601,\n\t\t16\n\t],\n\t\"./ar.js\": [\n\t\t602,\n\t\t27\n\t],\n\t\"./az\": [\n\t\t603,\n\t\t38\n\t],\n\t\"./az.js\": [\n\t\t603,\n\t\t38\n\t],\n\t\"./be\": [\n\t\t604,\n\t\t49\n\t],\n\t\"./be.js\": [\n\t\t604,\n\t\t49\n\t],\n\t\"./bg\": [\n\t\t605,\n\t\t61\n\t],\n\t\"./bg.js\": [\n\t\t605,\n\t\t61\n\t],\n\t\"./bm\": [\n\t\t606,\n\t\t72\n\t],\n\t\"./bm.js\": [\n\t\t606,\n\t\t72\n\t],\n\t\"./bn\": [\n\t\t607,\n\t\t83\n\t],\n\t\"./bn.js\": [\n\t\t607,\n\t\t83\n\t],\n\t\"./bo\": [\n\t\t608,\n\t\t91\n\t],\n\t\"./bo.js\": [\n\t\t608,\n\t\t91\n\t],\n\t\"./br\": [\n\t\t609,\n\t\t92\n\t],\n\t\"./br.js\": [\n\t\t609,\n\t\t92\n\t],\n\t\"./bs\": [\n\t\t610,\n\t\t93\n\t],\n\t\"./bs.js\": [\n\t\t610,\n\t\t93\n\t],\n\t\"./ca\": [\n\t\t611,\n\t\t94\n\t],\n\t\"./ca.js\": [\n\t\t611,\n\t\t94\n\t],\n\t\"./cs\": [\n\t\t612,\n\t\t95\n\t],\n\t\"./cs.js\": [\n\t\t612,\n\t\t95\n\t],\n\t\"./cv\": [\n\t\t613,\n\t\t96\n\t],\n\t\"./cv.js\": [\n\t\t613,\n\t\t96\n\t],\n\t\"./cy\": [\n\t\t614,\n\t\t97\n\t],\n\t\"./cy.js\": [\n\t\t614,\n\t\t97\n\t],\n\t\"./da\": [\n\t\t615,\n\t\t99\n\t],\n\t\"./da.js\": [\n\t\t615,\n\t\t99\n\t],\n\t\"./de\": [\n\t\t618,\n\t\t102\n\t],\n\t\"./de-at\": [\n\t\t616,\n\t\t100\n\t],\n\t\"./de-at.js\": [\n\t\t616,\n\t\t100\n\t],\n\t\"./de-ch\": [\n\t\t617,\n\t\t101\n\t],\n\t\"./de-ch.js\": [\n\t\t617,\n\t\t101\n\t],\n\t\"./de.js\": [\n\t\t618,\n\t\t102\n\t],\n\t\"./dv\": [\n\t\t619,\n\t\t103\n\t],\n\t\"./dv.js\": [\n\t\t619,\n\t\t103\n\t],\n\t\"./el\": [\n\t\t620,\n\t\t104\n\t],\n\t\"./el.js\": [\n\t\t620,\n\t\t104\n\t],\n\t\"./en-SG\": [\n\t\t621,\n\t\t105\n\t],\n\t\"./en-SG.js\": [\n\t\t621,\n\t\t105\n\t],\n\t\"./en-au\": [\n\t\t622,\n\t\t106\n\t],\n\t\"./en-au.js\": [\n\t\t622,\n\t\t106\n\t],\n\t\"./en-ca\": [\n\t\t623,\n\t\t107\n\t],\n\t\"./en-ca.js\": [\n\t\t623,\n\t\t107\n\t],\n\t\"./en-gb\": [\n\t\t624,\n\t\t108\n\t],\n\t\"./en-gb.js\": [\n\t\t624,\n\t\t108\n\t],\n\t\"./en-ie\": [\n\t\t625,\n\t\t110\n\t],\n\t\"./en-ie.js\": [\n\t\t625,\n\t\t110\n\t],\n\t\"./en-il\": [\n\t\t626,\n\t\t111\n\t],\n\t\"./en-il.js\": [\n\t\t626,\n\t\t111\n\t],\n\t\"./en-nz\": [\n\t\t627,\n\t\t112\n\t],\n\t\"./en-nz.js\": [\n\t\t627,\n\t\t112\n\t],\n\t\"./eo\": [\n\t\t628,\n\t\t113\n\t],\n\t\"./eo.js\": [\n\t\t628,\n\t\t113\n\t],\n\t\"./es\": [\n\t\t631,\n\t\t116\n\t],\n\t\"./es-do\": [\n\t\t629,\n\t\t114\n\t],\n\t\"./es-do.js\": [\n\t\t629,\n\t\t114\n\t],\n\t\"./es-us\": [\n\t\t630,\n\t\t115\n\t],\n\t\"./es-us.js\": [\n\t\t630,\n\t\t115\n\t],\n\t\"./es.js\": [\n\t\t631,\n\t\t116\n\t],\n\t\"./et\": [\n\t\t632,\n\t\t117\n\t],\n\t\"./et.js\": [\n\t\t632,\n\t\t117\n\t],\n\t\"./eu\": [\n\t\t633,\n\t\t118\n\t],\n\t\"./eu.js\": [\n\t\t633,\n\t\t118\n\t],\n\t\"./fa\": [\n\t\t634,\n\t\t119\n\t],\n\t\"./fa.js\": [\n\t\t634,\n\t\t119\n\t],\n\t\"./fi\": [\n\t\t635,\n\t\t121\n\t],\n\t\"./fi.js\": [\n\t\t635,\n\t\t121\n\t],\n\t\"./fo\": [\n\t\t636,\n\t\t122\n\t],\n\t\"./fo.js\": [\n\t\t636,\n\t\t122\n\t],\n\t\"./fr\": [\n\t\t639,\n\t\t125\n\t],\n\t\"./fr-ca\": [\n\t\t637,\n\t\t123\n\t],\n\t\"./fr-ca.js\": [\n\t\t637,\n\t\t123\n\t],\n\t\"./fr-ch\": [\n\t\t638,\n\t\t124\n\t],\n\t\"./fr-ch.js\": [\n\t\t638,\n\t\t124\n\t],\n\t\"./fr.js\": [\n\t\t639,\n\t\t125\n\t],\n\t\"./fy\": [\n\t\t640,\n\t\t126\n\t],\n\t\"./fy.js\": [\n\t\t640,\n\t\t126\n\t],\n\t\"./ga\": [\n\t\t641,\n\t\t127\n\t],\n\t\"./ga.js\": [\n\t\t641,\n\t\t127\n\t],\n\t\"./gd\": [\n\t\t642,\n\t\t128\n\t],\n\t\"./gd.js\": [\n\t\t642,\n\t\t128\n\t],\n\t\"./gl\": [\n\t\t643,\n\t\t129\n\t],\n\t\"./gl.js\": [\n\t\t643,\n\t\t129\n\t],\n\t\"./gom-latn\": [\n\t\t644,\n\t\t130\n\t],\n\t\"./gom-latn.js\": [\n\t\t644,\n\t\t130\n\t],\n\t\"./gu\": [\n\t\t645,\n\t\t6\n\t],\n\t\"./gu.js\": [\n\t\t645,\n\t\t6\n\t],\n\t\"./he\": [\n\t\t646,\n\t\t7\n\t],\n\t\"./he.js\": [\n\t\t646,\n\t\t7\n\t],\n\t\"./hi\": [\n\t\t647,\n\t\t8\n\t],\n\t\"./hi.js\": [\n\t\t647,\n\t\t8\n\t],\n\t\"./hr\": [\n\t\t648,\n\t\t9\n\t],\n\t\"./hr.js\": [\n\t\t648,\n\t\t9\n\t],\n\t\"./hu\": [\n\t\t649,\n\t\t10\n\t],\n\t\"./hu.js\": [\n\t\t649,\n\t\t10\n\t],\n\t\"./hy-am\": [\n\t\t650,\n\t\t11\n\t],\n\t\"./hy-am.js\": [\n\t\t650,\n\t\t11\n\t],\n\t\"./id\": [\n\t\t651,\n\t\t12\n\t],\n\t\"./id.js\": [\n\t\t651,\n\t\t12\n\t],\n\t\"./is\": [\n\t\t652,\n\t\t13\n\t],\n\t\"./is.js\": [\n\t\t652,\n\t\t13\n\t],\n\t\"./it\": [\n\t\t654,\n\t\t15\n\t],\n\t\"./it-ch\": [\n\t\t653,\n\t\t14\n\t],\n\t\"./it-ch.js\": [\n\t\t653,\n\t\t14\n\t],\n\t\"./it.js\": [\n\t\t654,\n\t\t15\n\t],\n\t\"./ja\": [\n\t\t655,\n\t\t17\n\t],\n\t\"./ja.js\": [\n\t\t655,\n\t\t17\n\t],\n\t\"./jv\": [\n\t\t656,\n\t\t18\n\t],\n\t\"./jv.js\": [\n\t\t656,\n\t\t18\n\t],\n\t\"./ka\": [\n\t\t657,\n\t\t19\n\t],\n\t\"./ka.js\": [\n\t\t657,\n\t\t19\n\t],\n\t\"./kk\": [\n\t\t658,\n\t\t20\n\t],\n\t\"./kk.js\": [\n\t\t658,\n\t\t20\n\t],\n\t\"./km\": [\n\t\t659,\n\t\t21\n\t],\n\t\"./km.js\": [\n\t\t659,\n\t\t21\n\t],\n\t\"./kn\": [\n\t\t660,\n\t\t22\n\t],\n\t\"./kn.js\": [\n\t\t660,\n\t\t22\n\t],\n\t\"./ko\": [\n\t\t661,\n\t\t23\n\t],\n\t\"./ko.js\": [\n\t\t661,\n\t\t23\n\t],\n\t\"./ku\": [\n\t\t662,\n\t\t24\n\t],\n\t\"./ku.js\": [\n\t\t662,\n\t\t24\n\t],\n\t\"./ky\": [\n\t\t663,\n\t\t25\n\t],\n\t\"./ky.js\": [\n\t\t663,\n\t\t25\n\t],\n\t\"./lb\": [\n\t\t664,\n\t\t26\n\t],\n\t\"./lb.js\": [\n\t\t664,\n\t\t26\n\t],\n\t\"./lo\": [\n\t\t665,\n\t\t28\n\t],\n\t\"./lo.js\": [\n\t\t665,\n\t\t28\n\t],\n\t\"./lt\": [\n\t\t666,\n\t\t29\n\t],\n\t\"./lt.js\": [\n\t\t666,\n\t\t29\n\t],\n\t\"./lv\": [\n\t\t667,\n\t\t30\n\t],\n\t\"./lv.js\": [\n\t\t667,\n\t\t30\n\t],\n\t\"./me\": [\n\t\t668,\n\t\t31\n\t],\n\t\"./me.js\": [\n\t\t668,\n\t\t31\n\t],\n\t\"./mi\": [\n\t\t669,\n\t\t32\n\t],\n\t\"./mi.js\": [\n\t\t669,\n\t\t32\n\t],\n\t\"./mk\": [\n\t\t670,\n\t\t33\n\t],\n\t\"./mk.js\": [\n\t\t670,\n\t\t33\n\t],\n\t\"./ml\": [\n\t\t671,\n\t\t34\n\t],\n\t\"./ml.js\": [\n\t\t671,\n\t\t34\n\t],\n\t\"./mn\": [\n\t\t672,\n\t\t35\n\t],\n\t\"./mn.js\": [\n\t\t672,\n\t\t35\n\t],\n\t\"./mr\": [\n\t\t673,\n\t\t36\n\t],\n\t\"./mr.js\": [\n\t\t673,\n\t\t36\n\t],\n\t\"./ms\": [\n\t\t675,\n\t\t39\n\t],\n\t\"./ms-my\": [\n\t\t674,\n\t\t37\n\t],\n\t\"./ms-my.js\": [\n\t\t674,\n\t\t37\n\t],\n\t\"./ms.js\": [\n\t\t675,\n\t\t39\n\t],\n\t\"./mt\": [\n\t\t676,\n\t\t40\n\t],\n\t\"./mt.js\": [\n\t\t676,\n\t\t40\n\t],\n\t\"./my\": [\n\t\t677,\n\t\t41\n\t],\n\t\"./my.js\": [\n\t\t677,\n\t\t41\n\t],\n\t\"./nb\": [\n\t\t678,\n\t\t42\n\t],\n\t\"./nb.js\": [\n\t\t678,\n\t\t42\n\t],\n\t\"./ne\": [\n\t\t679,\n\t\t43\n\t],\n\t\"./ne.js\": [\n\t\t679,\n\t\t43\n\t],\n\t\"./nl\": [\n\t\t681,\n\t\t45\n\t],\n\t\"./nl-be\": [\n\t\t680,\n\t\t44\n\t],\n\t\"./nl-be.js\": [\n\t\t680,\n\t\t44\n\t],\n\t\"./nl.js\": [\n\t\t681,\n\t\t45\n\t],\n\t\"./nn\": [\n\t\t682,\n\t\t46\n\t],\n\t\"./nn.js\": [\n\t\t682,\n\t\t46\n\t],\n\t\"./pa-in\": [\n\t\t683,\n\t\t47\n\t],\n\t\"./pa-in.js\": [\n\t\t683,\n\t\t47\n\t],\n\t\"./pl\": [\n\t\t684,\n\t\t48\n\t],\n\t\"./pl.js\": [\n\t\t684,\n\t\t48\n\t],\n\t\"./pt\": [\n\t\t686,\n\t\t51\n\t],\n\t\"./pt-br\": [\n\t\t685,\n\t\t50\n\t],\n\t\"./pt-br.js\": [\n\t\t685,\n\t\t50\n\t],\n\t\"./pt.js\": [\n\t\t686,\n\t\t51\n\t],\n\t\"./ro\": [\n\t\t687,\n\t\t52\n\t],\n\t\"./ro.js\": [\n\t\t687,\n\t\t52\n\t],\n\t\"./ru\": [\n\t\t688,\n\t\t53\n\t],\n\t\"./ru.js\": [\n\t\t688,\n\t\t53\n\t],\n\t\"./sd\": [\n\t\t689,\n\t\t54\n\t],\n\t\"./sd.js\": [\n\t\t689,\n\t\t54\n\t],\n\t\"./se\": [\n\t\t690,\n\t\t55\n\t],\n\t\"./se.js\": [\n\t\t690,\n\t\t55\n\t],\n\t\"./si\": [\n\t\t691,\n\t\t56\n\t],\n\t\"./si.js\": [\n\t\t691,\n\t\t56\n\t],\n\t\"./sk\": [\n\t\t692,\n\t\t57\n\t],\n\t\"./sk.js\": [\n\t\t692,\n\t\t57\n\t],\n\t\"./sl\": [\n\t\t693,\n\t\t58\n\t],\n\t\"./sl.js\": [\n\t\t693,\n\t\t58\n\t],\n\t\"./sq\": [\n\t\t694,\n\t\t59\n\t],\n\t\"./sq.js\": [\n\t\t694,\n\t\t59\n\t],\n\t\"./sr\": [\n\t\t696,\n\t\t63\n\t],\n\t\"./sr-cyrl\": [\n\t\t695,\n\t\t62\n\t],\n\t\"./sr-cyrl.js\": [\n\t\t695,\n\t\t62\n\t],\n\t\"./sr.js\": [\n\t\t696,\n\t\t63\n\t],\n\t\"./ss\": [\n\t\t697,\n\t\t64\n\t],\n\t\"./ss.js\": [\n\t\t697,\n\t\t64\n\t],\n\t\"./sv\": [\n\t\t698,\n\t\t65\n\t],\n\t\"./sv.js\": [\n\t\t698,\n\t\t65\n\t],\n\t\"./sw\": [\n\t\t699,\n\t\t66\n\t],\n\t\"./sw.js\": [\n\t\t699,\n\t\t66\n\t],\n\t\"./ta\": [\n\t\t700,\n\t\t67\n\t],\n\t\"./ta.js\": [\n\t\t700,\n\t\t67\n\t],\n\t\"./te\": [\n\t\t701,\n\t\t68\n\t],\n\t\"./te.js\": [\n\t\t701,\n\t\t68\n\t],\n\t\"./tet\": [\n\t\t702,\n\t\t69\n\t],\n\t\"./tet.js\": [\n\t\t702,\n\t\t69\n\t],\n\t\"./tg\": [\n\t\t703,\n\t\t70\n\t],\n\t\"./tg.js\": [\n\t\t703,\n\t\t70\n\t],\n\t\"./th\": [\n\t\t704,\n\t\t71\n\t],\n\t\"./th.js\": [\n\t\t704,\n\t\t71\n\t],\n\t\"./tl-ph\": [\n\t\t705,\n\t\t73\n\t],\n\t\"./tl-ph.js\": [\n\t\t705,\n\t\t73\n\t],\n\t\"./tlh\": [\n\t\t706,\n\t\t74\n\t],\n\t\"./tlh.js\": [\n\t\t706,\n\t\t74\n\t],\n\t\"./tr\": [\n\t\t707,\n\t\t75\n\t],\n\t\"./tr.js\": [\n\t\t707,\n\t\t75\n\t],\n\t\"./tzl\": [\n\t\t708,\n\t\t76\n\t],\n\t\"./tzl.js\": [\n\t\t708,\n\t\t76\n\t],\n\t\"./tzm\": [\n\t\t710,\n\t\t78\n\t],\n\t\"./tzm-latn\": [\n\t\t709,\n\t\t77\n\t],\n\t\"./tzm-latn.js\": [\n\t\t709,\n\t\t77\n\t],\n\t\"./tzm.js\": [\n\t\t710,\n\t\t78\n\t],\n\t\"./ug-cn\": [\n\t\t711,\n\t\t79\n\t],\n\t\"./ug-cn.js\": [\n\t\t711,\n\t\t79\n\t],\n\t\"./uk\": [\n\t\t712,\n\t\t80\n\t],\n\t\"./uk.js\": [\n\t\t712,\n\t\t80\n\t],\n\t\"./ur\": [\n\t\t713,\n\t\t81\n\t],\n\t\"./ur.js\": [\n\t\t713,\n\t\t81\n\t],\n\t\"./uz\": [\n\t\t715,\n\t\t84\n\t],\n\t\"./uz-latn\": [\n\t\t714,\n\t\t82\n\t],\n\t\"./uz-latn.js\": [\n\t\t714,\n\t\t82\n\t],\n\t\"./uz.js\": [\n\t\t715,\n\t\t84\n\t],\n\t\"./vi\": [\n\t\t716,\n\t\t85\n\t],\n\t\"./vi.js\": [\n\t\t716,\n\t\t85\n\t],\n\t\"./x-pseudo\": [\n\t\t717,\n\t\t86\n\t],\n\t\"./x-pseudo.js\": [\n\t\t717,\n\t\t86\n\t],\n\t\"./yo\": [\n\t\t718,\n\t\t87\n\t],\n\t\"./yo.js\": [\n\t\t718,\n\t\t87\n\t],\n\t\"./zh-cn\": [\n\t\t719,\n\t\t88\n\t],\n\t\"./zh-cn.js\": [\n\t\t719,\n\t\t88\n\t],\n\t\"./zh-hk\": [\n\t\t720,\n\t\t89\n\t],\n\t\"./zh-hk.js\": [\n\t\t720,\n\t\t89\n\t],\n\t\"./zh-tw\": [\n\t\t721,\n\t\t90\n\t],\n\t\"./zh-tw.js\": [\n\t\t721,\n\t\t90\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6434;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./bg\": [\n\t\t722,\n\t\t131\n\t],\n\t\"./bg.js\": [\n\t\t722,\n\t\t131\n\t],\n\t\"./chs\": [\n\t\t723,\n\t\t137\n\t],\n\t\"./chs.js\": [\n\t\t723,\n\t\t137\n\t],\n\t\"./cs\": [\n\t\t724,\n\t\t148\n\t],\n\t\"./cs.js\": [\n\t\t724,\n\t\t148\n\t],\n\t\"./da-dk\": [\n\t\t725,\n\t\t159\n\t],\n\t\"./da-dk.js\": [\n\t\t725,\n\t\t159\n\t],\n\t\"./de\": [\n\t\t727,\n\t\t132\n\t],\n\t\"./de-ch\": [\n\t\t726,\n\t\t164\n\t],\n\t\"./de-ch.js\": [\n\t\t726,\n\t\t164\n\t],\n\t\"./de.js\": [\n\t\t727,\n\t\t132\n\t],\n\t\"./en-au\": [\n\t\t728,\n\t\t133\n\t],\n\t\"./en-au.js\": [\n\t\t728,\n\t\t133\n\t],\n\t\"./en-gb\": [\n\t\t729,\n\t\t134\n\t],\n\t\"./en-gb.js\": [\n\t\t729,\n\t\t134\n\t],\n\t\"./en-za\": [\n\t\t730,\n\t\t135\n\t],\n\t\"./en-za.js\": [\n\t\t730,\n\t\t135\n\t],\n\t\"./es\": [\n\t\t732,\n\t\t138\n\t],\n\t\"./es-es\": [\n\t\t731,\n\t\t136\n\t],\n\t\"./es-es.js\": [\n\t\t731,\n\t\t136\n\t],\n\t\"./es.js\": [\n\t\t732,\n\t\t138\n\t],\n\t\"./et\": [\n\t\t733,\n\t\t139\n\t],\n\t\"./et.js\": [\n\t\t733,\n\t\t139\n\t],\n\t\"./fi\": [\n\t\t734,\n\t\t140\n\t],\n\t\"./fi.js\": [\n\t\t734,\n\t\t140\n\t],\n\t\"./fr\": [\n\t\t737,\n\t\t143\n\t],\n\t\"./fr-ca\": [\n\t\t735,\n\t\t141\n\t],\n\t\"./fr-ca.js\": [\n\t\t735,\n\t\t141\n\t],\n\t\"./fr-ch\": [\n\t\t736,\n\t\t142\n\t],\n\t\"./fr-ch.js\": [\n\t\t736,\n\t\t142\n\t],\n\t\"./fr.js\": [\n\t\t737,\n\t\t143\n\t],\n\t\"./hu\": [\n\t\t738,\n\t\t144\n\t],\n\t\"./hu.js\": [\n\t\t738,\n\t\t144\n\t],\n\t\"./it\": [\n\t\t739,\n\t\t145\n\t],\n\t\"./it.js\": [\n\t\t739,\n\t\t145\n\t],\n\t\"./ja\": [\n\t\t740,\n\t\t146\n\t],\n\t\"./ja.js\": [\n\t\t740,\n\t\t146\n\t],\n\t\"./lv\": [\n\t\t741,\n\t\t147\n\t],\n\t\"./lv.js\": [\n\t\t741,\n\t\t147\n\t],\n\t\"./nl-be\": [\n\t\t742,\n\t\t149\n\t],\n\t\"./nl-be.js\": [\n\t\t742,\n\t\t149\n\t],\n\t\"./nl-nl\": [\n\t\t743,\n\t\t150\n\t],\n\t\"./nl-nl.js\": [\n\t\t743,\n\t\t150\n\t],\n\t\"./no\": [\n\t\t744,\n\t\t151\n\t],\n\t\"./no.js\": [\n\t\t744,\n\t\t151\n\t],\n\t\"./pl\": [\n\t\t745,\n\t\t152\n\t],\n\t\"./pl.js\": [\n\t\t745,\n\t\t152\n\t],\n\t\"./pt-br\": [\n\t\t746,\n\t\t153\n\t],\n\t\"./pt-br.js\": [\n\t\t746,\n\t\t153\n\t],\n\t\"./pt-pt\": [\n\t\t747,\n\t\t154\n\t],\n\t\"./pt-pt.js\": [\n\t\t747,\n\t\t154\n\t],\n\t\"./ru\": [\n\t\t749,\n\t\t156\n\t],\n\t\"./ru-ua\": [\n\t\t748,\n\t\t155\n\t],\n\t\"./ru-ua.js\": [\n\t\t748,\n\t\t155\n\t],\n\t\"./ru.js\": [\n\t\t749,\n\t\t156\n\t],\n\t\"./sk\": [\n\t\t750,\n\t\t157\n\t],\n\t\"./sk.js\": [\n\t\t750,\n\t\t157\n\t],\n\t\"./sl\": [\n\t\t751,\n\t\t158\n\t],\n\t\"./sl.js\": [\n\t\t751,\n\t\t158\n\t],\n\t\"./th\": [\n\t\t752,\n\t\t160\n\t],\n\t\"./th.js\": [\n\t\t752,\n\t\t160\n\t],\n\t\"./tr\": [\n\t\t753,\n\t\t161\n\t],\n\t\"./tr.js\": [\n\t\t753,\n\t\t161\n\t],\n\t\"./uk-ua\": [\n\t\t754,\n\t\t162\n\t],\n\t\"./uk-ua.js\": [\n\t\t754,\n\t\t162\n\t],\n\t\"./vi\": [\n\t\t755,\n\t\t163\n\t],\n\t\"./vi.js\": [\n\t\t755,\n\t\t163\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6435;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.po\": [\n\t\t7633,\n\t\t166\n\t],\n\t\"./de/messages.po\": [\n\t\t7634,\n\t\t167\n\t],\n\t\"./en-dev/messages.po\": [\n\t\t7636,\n\t\t169\n\t],\n\t\"./en/messages.po\": [\n\t\t7635,\n\t\t168\n\t],\n\t\"./pl/messages.po\": [\n\t\t7637,\n\t\t170\n\t],\n\t\"./sk/messages.po\": [\n\t\t7638,\n\t\t171\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6442;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t7639,\n\t\t166\n\t],\n\t\"./de/messages.js\": [\n\t\t7640,\n\t\t167\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t7642,\n\t\t169\n\t],\n\t\"./en/messages.js\": [\n\t\t7641,\n\t\t168\n\t],\n\t\"./pl/messages.js\": [\n\t\t7643,\n\t\t170\n\t],\n\t\"./sk/messages.js\": [\n\t\t7644,\n\t\t171\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6443;\nmodule.exports = webpackAsyncContext;","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n  persistenceKey: 'admin@local',\n  pageTitleSuffix: 'LOCAL',\n  sentryDSN: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'admin@dev',\n    pageTitleSuffix: 'DEV',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'admin@prod',\n    pageTitleSuffix: 'Speɘdlo',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n","import { Trans } from '@lingui/macro'\nimport { Dialog } from '@material-ui/core'\nimport { WarningTwoTone } from '@material-ui/icons'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport connectionWarningSound from '../assets/connectionWarning.mp3'\nimport { isNetworkOffline } from '../helpers/offline'\nimport { Colors } from '../styling'\nimport { SoundPlayInterval } from './SoundPlayInterval'\n\nconst MessageStyled = styled.div`\n  padding: 1rem;\n  background-color: ${Colors.red} !important;\n  font-size: 2rem;\n\n  & svg {\n    position: relative;\n    top: 0.3rem;\n    padding-right: 0.5rem;\n  }\n`\n\nexport const ConnectionWarning = observer(() => {\n  return (\n    <>\n      <SoundPlayInterval\n        shouldPlay={isNetworkOffline()}\n        intervalSec={30}\n        soundUrl={connectionWarningSound}\n      />\n\n      <Dialog\n        open={isNetworkOffline()}\n        disableBackdropClick={true}\n        disableEscapeKeyDown={true}\n      >\n        <MessageStyled>\n          <WarningTwoTone fontSize=\"large\" />\n          <Trans>Internet connection is not available</Trans>\n        </MessageStyled>\n      </Dialog>\n    </>\n  )\n})\n","import React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { logRouting } from '../helpers/logger'\n\nexport const LogRoute: React.FC = () => {\n  if (process.env.NODE_ENV !== 'development') {\n    return (\n      <Route>\n        {({ location }) => {\n          logRouting('at %s', location.pathname)\n          return null\n        }}\n      </Route>\n    )\n  } else {\n    return null\n  }\n}\n","import debug from 'debug'\nimport { when } from 'mobx'\nimport React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { WithRoot } from '../atoms/WithRoot'\n\nconst log = debug('routing')\n\nexport const RedirectAfterLogin = () => (\n  <Route\n    children={({ location, history }) => (\n      <WithRoot\n        render={root => {\n          if (!root.auth.isAuthenticatedUser) {\n            const route = (location.state && location.state.origin) || '/'\n            const waitForAuthentication = () => root.auth.isAuthenticated\n            const redirectAfterLogin = () => {\n              history.replace(route)\n            }\n            when(waitForAuthentication, redirectAfterLogin)\n            log('will redirect to %s when auth', route)\n          }\n          return null\n        }}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { WithRoot } from '../atoms/WithRoot'\nimport { RedirectToLogin } from './RedirectToLogin'\n\nexport const RedirectAfterLogout = () => (\n  <WithRoot\n    observe={false}\n    render={root => {\n      if (root.auth.isAuthenticated) {\n        root.auth.invalidate()\n        return <RedirectToLogin useOrigin={false} />\n      }\n      return <Redirect to=\"/\" />\n    }}\n  />\n)\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport PageLoader from '../atoms/PageLoader'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LogRoute } from './LogRoute'\nimport { RedirectAfterLogin } from './RedirectAfterLogin'\nimport { RedirectAfterLogout } from './RedirectAfterLogout'\nimport { SecureRoute } from './SecureRoute'\n\nconst PasswordLoginRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordLoginRoute'),\n)\n\nconst PasswordChangeRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordChangeRoute'),\n)\n\nconst PasswordResetRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordResetRoute'),\n)\n\nconst MainDashboardPage = React.lazy(() =>\n  import('../segments/main/pages/MainDashboardPage'),\n)\n\nconst OrderRoutes = React.lazy(() =>\n  import('../segments/order/routes/OrderRoutes'),\n)\n\nconst KitchenRoutes = React.lazy(() =>\n  import('../segments/kitchen/routes/KitchenRoutes'),\n)\n\nconst SettingsRoutes = React.lazy(() =>\n  import('../segments/settings/routes/SettingsRoutes'),\n)\n\nconst OverviewRoutes = React.lazy(() =>\n  import('../segments/overview/routes/OverviewRoutes'),\n)\n\nconst SupportPage = React.lazy(() =>\n  import('../segments/main/pages/SupportPage'),\n)\n\nexport const Routing = () => (\n  <React.Suspense fallback={<PageLoader />}>\n    <LogRoute />\n    <RedirectAfterLogin />\n    <Switch>\n      <Route path=\"/login\" exact={true} component={PasswordLoginRoute} />\n      <Route path=\"/reset\" exact={true} component={PasswordResetRoute} />\n      <Route\n        path=\"/recovery/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <Route\n        path=\"/register/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <SecureRoute path=\"/\" exact={true} component={MainDashboardPage} />\n      <SecureRoute path=\"/order\" component={OrderRoutes} />\n      <SecureRoute path=\"/kitchen\" component={KitchenRoutes} />\n      <SecureRoute path=\"/settings\" component={SettingsRoutes} />\n      <SecureRoute path=\"/overview\" component={OverviewRoutes} />\n      <Route path=\"/support\" component={SupportPage} />\n      <Route path=\"/logout\" component={RedirectAfterLogout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </React.Suspense>\n)\n","import { Trans } from '@lingui/macro'\nimport { ContactSupport, Warning } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { Sizer } from '../atoms/Sizer'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\nconst IconStyled = styled.div`\n  color: ${Colors.orange};\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ninterface IProps {\n  onFeedback(): void\n}\n\nexport const ErrorPage: React.FC<IProps> = ({ onFeedback }) => (\n  <FullPageLayout\n    width={15}\n    pageTitle={i18n.t`Application error`}\n    useBackButton={true}\n    hideLogoutWidget={true}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          We are sorry, but there is an unexpected problem in the app. Our team\n          was notified and will fix this soon.\n        </Trans>\n      </h3>\n      <Center>\n        <IconStyled>\n          <Warning style={{ fontSize: '5rem' }} />\n        </IconStyled>\n        <Sizer width={20}>\n          <TouchButton onClick={onFeedback}>\n            <ContactSupport />\n            <Trans>Send feedback</Trans>\n          </TouchButton>\n        </Sizer>\n      </Center>\n    </Card>\n  </FullPageLayout>\n)\n","import { Trans } from '@lingui/macro'\nimport { OfflineBolt } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { Sizer } from '../atoms/Sizer'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\nconst IconStyled = styled.div`\n  margin-top: 2rem;\n  color: ${Colors.red};\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ninterface IProps {\n  onRetry(): void\n}\n\nexport const ServiceUnreachablePage: React.FC<IProps> = ({ onRetry }) => (\n  <FullPageLayout\n    width={15}\n    pageTitle={i18n.t`Service unreachable`}\n    useBackButton={false}\n    hideLogoutWidget={true}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          Connection to external service is not possible at the moment. Please\n          try again later or <a href=\"/support\">contact our support</a>.\n        </Trans>\n      </h3>\n      <Center>\n        <IconStyled>\n          <OfflineBolt style={{ fontSize: '5rem' }} />\n        </IconStyled>\n        <Sizer width={20}>\n          <TouchButton onClick={onRetry} iconName=\"cached\">\n            {' '}\n            <Trans>Retry the connection</Trans>\n          </TouchButton>\n        </Sizer>\n      </Center>\n    </Card>\n  </FullPageLayout>\n)\n","import {\n  ApolloDefender,\n  isChunkError,\n  isNetworkUnreachableError,\n} from '@speedlo/graphql'\nimport { flushSentry, Sentry } from '@speedlo/sentry'\nimport { SillyErrorBoundary } from '@speedlo/tools'\nimport { isApolloError } from 'apollo-client'\nimport React from 'react'\nimport { VError } from 'verror'\n\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { i18n } from '../i18n'\nimport { ErrorPage } from '../pages/ErrorPage'\nimport { ServiceUnreachablePage } from '../pages/ServiceUnreachablePage'\n\nexport type ErrorKind = 'none' | 'serviceUnreachable' | 'otherError'\n\nconst makeError = (message: string) =>\n  `${message} ${i18n.t`Our team was notified about the issue.`}`\n\nexport const DefaultErrorHandler: React.FC = ({ children }) => {\n  const { enqueueWarning, enqueueError } = useSnackBar()\n\n  const [errorKind, setErrorKind] = React.useState<ErrorKind>('none')\n\n  const onRetry = React.useCallback(() => {\n    setErrorKind('none')\n  }, [])\n\n  const onUnhandledError = React.useCallback((error: Error) => {\n    if (isChunkError(error)) {\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Debug)\n        Sentry.captureException(error)\n      })\n      flushSentry().then(() => window.location.reload())\n      return\n    }\n    if (isApolloError(error) && isNetworkUnreachableError(error)) {\n      setErrorKind('serviceUnreachable')\n      return\n    }\n    Sentry.captureException(new VError(error, 'Unhandled exception'))\n    setErrorKind('otherError')\n  }, [])\n\n  const onNetworkError = React.useCallback(\n    (error: Error, isUnreachable: boolean) => {\n      if (isUnreachable) {\n        setErrorKind('serviceUnreachable')\n      } else {\n        enqueueError(\n          makeError(\n            i18n.t`Unexpected error occured in communication with service.`,\n          ),\n        )\n      }\n    },\n    [],\n  )\n\n  const onOperationError = React.useCallback(() => {\n    enqueueError(\n      makeError(i18n.t`Unexpected error occured while sending a request.`),\n    )\n  }, [])\n\n  const onUserErrors = React.useCallback((messages: ReadonlyArray<string>) => {\n    messages.forEach(enqueueWarning)\n  }, [])\n\n  const render = () => {\n    switch (errorKind) {\n      case 'serviceUnreachable': {\n        return <ServiceUnreachablePage onRetry={onRetry} />\n      }\n      case 'otherError': {\n        return <ErrorPage onFeedback={showFeedback} />\n      }\n      default: {\n        return children\n      }\n    }\n  }\n\n  return (\n    <ApolloDefender\n      onNetworkError={onNetworkError}\n      onUserErrors={onUserErrors}\n      onOperationError={onOperationError}\n    >\n      <SillyErrorBoundary onError={onUnhandledError}>\n        {render()}\n      </SillyErrorBoundary>\n    </ApolloDefender>\n  )\n}\n\nfunction showFeedback() {\n  Sentry.showReportDialog({\n    labelClose: i18n.t`Close`,\n    title: i18n.t`Unexpected error in the app`,\n  })\n}\n","import { createGlobalStyle } from 'styled-components'\n\nimport backgroundImage from '../assets/bg_antracit.jpg'\n\nexport const GlobalStyles = createGlobalStyle`\n  body,\n  input,\n  textarea,\n  select,\n  button {\n    margin: 0;\n    padding: 0;\n    font-family: 'Open Sans', sans-serif;\n    font-size: 16px;\n  }\n  body {\n    background-color: #322e2d;\n    color: white;\n    background-image: url(${backgroundImage});\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-size: cover;\n  }\n\n  input {\n    padding: 0.5rem;\n    border: 1px solid #95989a;\n    border-radius: 0.25rem;\n  }\n\n  /* react-grid disabling animation */\n  .react-grid-item {\n    transition: all 0s;\n  }\n\n  /* apply a natural box layout model to all elements, but allowing components to change */\n  html {\n    box-sizing: border-box;\n  }\n  *,\n  *:before,\n  *:after {\n    box-sizing: inherit;\n  }\n`\n","import React from 'react'\nimport { Provider as GoodByeProvider } from 'react-goodbye'\nimport { BrowserRouter } from 'react-router-dom'\n\ninterface IProps {}\n\nexport const Router: React.FC<IProps> = ({ children }) => (\n  <GoodByeProvider>\n    {({ handleGetUserConfirm }) => (\n      <BrowserRouter getUserConfirmation={handleGetUserConfirm}>\n        {children}\n      </BrowserRouter>\n    )}\n  </GoodByeProvider>\n)\n","import { css } from 'emotion'\nimport { SnackbarProvider } from 'notistack'\nimport React from 'react'\n\nimport { Colors, Spacing } from '../styling'\n\ninterface IProps {}\n\nconst successStyle = css`\n  background: ${Colors.green} !important;\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nconst errorStyle = css`\n  background: ${Colors.red};\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nconst warningStyle = css`\n  background: ${Colors.orange};\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nexport const snackStyles = {\n  variantSuccess: successStyle,\n  variantInfo: successStyle,\n  variantError: errorStyle,\n  variantWarning: warningStyle,\n}\n\nexport const SnackProvider: React.FC<IProps> = ({ children }) => (\n  <SnackbarProvider\n    maxSnack={3}\n    classes={snackStyles}\n    anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\n  >\n    {children}\n  </SnackbarProvider>\n)\n","import { Button, Snackbar } from '@material-ui/core'\nimport { SnackbarProps } from '@material-ui/core/Snackbar'\nimport { HOUR, MINUTE, SECOND, useInterval, useTimer } from '@speedlo/hooks'\nimport { updateWorker } from '@speedlo/tools'\nimport { addMilliseconds, formatDistanceStrict } from 'date-fns'\nimport { useObservable, useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { logUpdate } from '../helpers/logger'\nimport { i18n } from '../i18n'\nimport { snackStyles } from './SnackProvider'\n\nexport interface IProps {\n  onRestart?(): void\n  autoUpdateDelay?: number\n  postponeTimeout?: number\n  updateCheckInterval?: number\n  serviceWorker?: ServiceWorkerContainer\n}\n\nexport const UpdateHandler: React.FC<IProps> = ({\n  onRestart = () => window.location.reload(),\n  autoUpdateDelay = 20 * SECOND,\n  postponeTimeout = 2 * MINUTE,\n  updateCheckInterval = process.env.REACT_APP_STAGE === 'prod'\n    ? 1 * HOUR\n    : 5 * MINUTE,\n  serviceWorker = window.navigator.serviceWorker,\n}) => {\n  const registrationWorkerRef = React.useRef<ServiceWorkerRegistration | null>(\n    null,\n  )\n  const updateWorkerRef = React.useRef<ServiceWorker | null>(null)\n\n  const state = useObservable({ updatePending: false, applyingUpdate: false })\n\n  useInterval(() => {\n    if (registrationWorkerRef.current) {\n      logUpdate('checking...')\n      registrationWorkerRef.current.update().catch(() => {\n        // don't really care if check fails\n      })\n    }\n  }, updateCheckInterval)\n\n  React.useEffect(() => {\n    const onMessage = (event: MessageEvent) => {\n      if (event.data === 'update-applied') {\n        logUpdate('restarting to apply...')\n        onRestart()\n      }\n    }\n    if (serviceWorker) {\n      serviceWorker.addEventListener('message', onMessage)\n      return () => {\n        serviceWorker.removeEventListener('message', onMessage)\n      }\n    } else {\n      logUpdate('serviceWorker is not supported')\n      return () => {\n        /* noop */\n      }\n    }\n  }, [onRestart, serviceWorker])\n\n  React.useEffect(() => {\n    const init = updateWorker.register({\n      onInit: reg => {\n        registrationWorkerRef.current = reg\n      },\n      onUpdate: sw => {\n        updateWorkerRef.current = sw\n        state.updatePending = true\n        logUpdate('new update is available')\n      },\n    })\n    // service worker is normally using load event, but since this\n    // done after the load, it has to be triggered manually\n    init()\n  }, [])\n\n  const onCancel = () => {\n    logUpdate('user postponed')\n    state.updatePending = false\n    setTimeout(() => {\n      logUpdate('reminding update to user again')\n      state.updatePending = true\n    }, postponeTimeout)\n  }\n\n  const onConfirm = () => {\n    state.updatePending = false\n    if (updateWorkerRef.current) {\n      logUpdate('user confirmed')\n      state.applyingUpdate = true\n      updateWorkerRef.current.postMessage('apply-update')\n    }\n  }\n\n  if (state.applyingUpdate && process.env.NODE_ENV !== 'test') {\n    throw new Promise(() => {\n      // Suspense will catch it and show loader while the update is being applied\n    })\n  }\n\n  return useObserver(() =>\n    state.updatePending ? (\n      <UpdateSnack\n        autoHideDuration={autoUpdateDelay}\n        onCancel={onCancel}\n        onConfirm={onConfirm}\n      />\n    ) : null,\n  )\n}\n\ninterface IUpdateSnackProps extends Omit<SnackbarProps, 'open'> {\n  autoHideDuration: number\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport function UpdateSnack(props: IUpdateSnackProps) {\n  const { onConfirm, onCancel, ...rest } = props\n  const now = useTimer({ interval: SECOND, enabled: true })\n  const [endTime] = React.useState(() =>\n    addMilliseconds(now, props.autoHideDuration),\n  )\n  const remainingSeconds = formatDistanceStrict(endTime, now)\n\n  React.useEffect(() => {\n    if (now >= endTime) {\n      onConfirm()\n    }\n  }, [now, endTime])\n\n  return (\n    <Snackbar\n      open={true}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center',\n      }}\n      className={snackStyles.variantInfo}\n      message={\n        <span data-testid=\"message\">{i18n.t`Application will be restarted in ${remainingSeconds} to apply available update.`}</span>\n      }\n      disableWindowBlurListener={true}\n      action={[\n        <Button\n          key=\"later\"\n          color=\"secondary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"postpone-button\"\n          onClick={onCancel}\n        >\n          {i18n.t`Postpone update`}\n        </Button>,\n        <Button\n          key=\"confirm\"\n          color=\"primary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"confirm-button\"\n          onClick={onConfirm}\n        >\n          {i18n.t`Restart now`}\n        </Button>,\n      ]}\n      {...rest}\n    />\n  )\n}\n","import { Sentry } from '@speedlo/sentry'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { useQUserBootstrap } from '../graph/generated'\nimport { RM } from '../helpers/ramda'\n\nexport const UserBootstrap = observer(() => {\n  const { auth, user } = useRoot()\n\n  const { data, loading } = useQUserBootstrap(\n    { userId: auth.userId },\n    { skip: !auth.isAuthenticatedUser },\n  )\n\n  React.useEffect(() => {\n    if (!auth.userId) {\n      user.finishBootstrap()\n      Sentry.configureScope(scope => {\n        scope.setUser({\n          id: undefined,\n        })\n        scope.setExtra('roles', [])\n        scope.setExtra('branches', [])\n      })\n    }\n  })\n\n  React.useEffect(() => {\n    if (auth.isAuthenticatedUser && !loading) {\n      user.applyUserData(data.user)\n      user.applyAccess(data.access)\n      user.applyPermissions(data.permissions)\n      user.finishBootstrap()\n      Sentry.configureScope(scope => {\n        scope.setUser({\n          id: auth.userId,\n          username: `${data.user.firstName} ${data.user.lastName}`,\n        })\n        scope.setExtra('roles', data.user.roles.map(RM.prop('name')))\n        scope.setExtra('branches', data.user.branches.map(RM.prop('id')))\n      })\n    }\n  })\n\n  return null\n})\n","import '@speedlo/assets/flaticon.css'\nimport 'material-design-icons/iconfont/material-icons.css'\nimport 'react-grid-layout/css/styles.css'\n\nimport { useReleaseCabinet } from '@speedlo/tools/dist/useReleaseCabinet'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ConnectionWarning } from '../atoms/ConnectionWarning'\nimport PageLoader from '../atoms/PageLoader'\nimport { useRoot } from '../atoms/RootProvider'\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { Routing } from '../routes/Routing'\nimport { DefaultErrorHandler } from './DefaultErrorHandler'\nimport { GlobalStyles } from './GlobalStyles'\nimport { Router } from './Router'\nimport { UpdateHandler } from './UpdateHandler'\nimport { UserBootstrap } from './UserBootstrap'\n\nexport const AppMain: React.FC = () => {\n  const { user } = useRoot()\n\n  const { enqueueInfo } = useSnackBar()\n  useReleaseCabinet(enqueueInfo)\n\n  return (\n    <DefaultErrorHandler>\n      <GlobalStyles />\n      <UserBootstrap />\n      <UpdateHandler />\n      <ConnectionWarning />\n      <React.Suspense fallback={<PageLoader />}>\n        <Router>\n          <Observer>\n            {() => (user.isReady ? <Routing /> : <PageLoader />)}\n          </Observer>\n        </Router>\n      </React.Suspense>\n    </DefaultErrorHandler>\n  )\n}\n","import { createMuiTheme, MuiThemeProvider } from '@material-ui/core'\nimport React from 'react'\n\ninterface IProps {}\n\nexport const ThemeProvider: React.FC<IProps> = ({ children }) => {\n  const theme = createMuiTheme({\n    typography: {\n      useNextVariants: true,\n    },\n  })\n\n  return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>\n}\n","import { useSentryInit } from '@speedlo/sentry'\nimport React from 'react'\n\nimport { RootProvider } from '../atoms/RootProvider'\nimport { appConfig } from '../config'\nimport { I18nManager } from '../i18n'\nimport { SnackProvider } from './SnackProvider'\nimport { ThemeProvider } from './ThemeProvider'\n\nexport const AppProvider: React.FC = ({ children }) => {\n  useSentryInit(appConfig.sentryDSN)\n  return (\n    <ThemeProvider>\n      <RootProvider>\n        <I18nManager>\n          <SnackProvider>{children}</SnackProvider>\n        </I18nManager>\n      </RootProvider>\n    </ThemeProvider>\n  )\n}\n","import './enableDebug'\n\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport { AppMain } from './app/AppMain'\nimport { AppProvider } from './app/AppProvider'\nimport PageLoader from './atoms/PageLoader'\n\nconst Main = () => {\n  return (\n    <React.Suspense fallback={<PageLoader />}>\n      <AppProvider>\n        <AppMain />\n      </AppProvider>\n    </React.Suspense>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nrender(<Main />, rootElement)\n","import { createContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const RootContext = createContext<TRootModel | undefined>(undefined)\n","import { createDefaultApolloClient, createNetworkLink } from '@speedlo/graphql'\nimport QueueLink from 'apollo-link-queue'\nimport { RetryLink } from 'apollo-link-retry'\nimport { autorun } from 'mobx'\n\nimport { appConfig } from '../config'\nimport { logGraph } from '../helpers/logger'\nimport { isNetworkOnline } from '../helpers/offline'\nimport { TAuthModel } from '../models/AuthModel'\nimport createAuthLink from './AuthLink'\n\nexport function createApolloClient(auth: TAuthModel) {\n  return createDefaultApolloClient(\n    createAuthLink(auth),\n    createRetryLink(),\n    createOfflineLink(),\n    createNetworkLink(appConfig.endpoint),\n  )\n}\n\nfunction createRetryLink() {\n  return new RetryLink({\n    delay: {\n      initial: 300,\n      max: Infinity,\n      jitter: true,\n    },\n    attempts: {\n      max: 5,\n      retryIf: error => !!error,\n    },\n  })\n}\n\nfunction createOfflineLink() {\n  const offlineLink = new QueueLink()\n  autorun(() => {\n    if (isNetworkOnline()) {\n      logGraph('client is online')\n      offlineLink.open()\n    } else {\n      logGraph('client is offline')\n      offlineLink.close()\n    }\n  })\n  return offlineLink\n}\n","import { ApolloLink, FetchResult, Observable } from 'apollo-link'\nimport { computed } from 'mobx'\nimport VError from 'verror'\n\nimport { TAuthModel } from '../models/AuthModel'\n\nexport default function createAuthLink(auth: TAuthModel) {\n  const headers = computed(() => ({\n    Authorization: `Bearer ${auth.communicationToken}`,\n  }))\n  const token = computed(() => auth.communicationToken)\n\n  return new ApolloLink((operation, forward) => {\n    if (!auth.canCommunicate) {\n      throw new VError(\n        `Executing operation ${operation.operationName} before authenticated`,\n        { operation },\n      )\n    }\n\n    const context = operation.getContext()\n    operation.setContext({\n      ...context,\n      headers: headers.get(),\n      token: token.get(),\n    })\n\n    return new Observable<FetchResult>(observer => {\n      const sub = forward!(operation).subscribe({\n        error: networkError => {\n          if (\n            networkError.result &&\n            networkError.result.code === 'INVALID_TOKEN'\n          ) {\n            auth.invalidate()\n            return\n          }\n          observer.error(networkError)\n        },\n        next: observer.next.bind(observer),\n        complete: observer.complete.bind(observer),\n      })\n      return () => sub.unsubscribe()\n    })\n  })\n}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersistence } from './logger'\n\nconst persistenceKey = appConfig.persistenceKey\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = (snapshot: object) =>\n    localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersistence('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersistence('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersistence('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { Sentry } from '@speedlo/sentry'\nimport { getParent, Instance } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { IRootEnvironment } from '../../../atoms/RootProvider'\nimport { appConfig } from '../../../config'\nimport { i18n } from '../../../i18n'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TLoginProviderModel } from './LoginProviderModel'\n\nconst getLoginUrl = ({ username, password }: Dictionary<string>) =>\n  `${appConfig.endpoint}/users/token?username=${username}&password=${password}`\n\nexport const PasswordLoginModel = BaseModel.named('PasswordLogin')\n  .volatile(self => ({\n    errorCode: '',\n    errorMessage: '',\n  }))\n  .views(self => ({\n    get hasFailed() {\n      return Boolean(self.errorCode)\n    },\n  }))\n  .actions(self => ({\n    setFailure(code: string, message: string) {\n      self.errorCode = code\n      self.errorMessage = message\n    },\n    setSuccess(token: string, userId: string) {\n      const provider = getParent<TLoginProviderModel>(self)\n      provider.authenticate(token, userId)\n    },\n  }))\n  .actions(self => ({\n    async requestToken(username: string, password: string) {\n      const url = getLoginUrl({ username, password })\n      const fetch: TFetch = window.fetch\n      try {\n        const response = await fetch(url, {\n          headers: {\n            Accept: 'application/json',\n          },\n        })\n        const payload = await response.json()\n        self.log('received payload %j', payload)\n\n        if (response.status !== 200) {\n          self.setFailure(payload.code, payload.error)\n          self.log('token request failed for username %s', username)\n        } else {\n          self.setSuccess(payload.token, String(payload.userId))\n          self.log(\n            'token request success for username %s [%s]',\n            username,\n            payload.userId,\n          )\n        }\n      } catch (err) {\n        self.setFailure(\n          'FAIL',\n          i18n.t`Cannot login right now, please try again later`,\n        )\n        Sentry.withScope(scope => {\n          scope.setExtra('username', username)\n          scope.setLevel(Sentry.Severity.Debug)\n          Sentry.captureException(\n            new VError(err, 'Failed fetching password token'),\n          )\n        })\n      }\n    },\n  }))\n\nexport const createPasswordLoginModelMock = (\n  overrides = {},\n  env: IRootEnvironment,\n) => PasswordLoginModel.create({ ...overrides }, env)\n\nexport interface TPasswordLoginModel\n  extends Instance<typeof PasswordLoginModel> {}\n","import { getParent, Instance, types } from 'mobx-state-tree'\n\nimport { TAuthModel } from '../../../models/AuthModel'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { PasswordLoginModel } from './PasswordLoginModel'\n\nexport const LoginProviderModel = BaseModel.named('LoginProvider')\n  .props({\n    passwordLogin: types.optional(PasswordLoginModel, {}),\n  })\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      const auth = getParent<TAuthModel>(self)\n      auth.authenticate(token, userId)\n    },\n  }))\n\nexport interface TLoginProviderModel\n  extends Instance<typeof LoginProviderModel> {}\n","import gql from 'graphql-tag'\n\nexport const PasswordChangeMutation = gql`\n  mutation MPasswordChange($password: String!) {\n    updateUserPassword(newPassword: $password) {\n      id\n      token\n    }\n  }\n`\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { MPasswordChange } from '../graph/types'\nimport { LoginProviderModel } from '../segments/login/models/LoginProviderModel'\nimport { PasswordChangeMutation } from './AuthModel.graphql'\nimport { BaseModel } from './BaseModel'\n\ninterface IVolatileProps {\n  tokenForPasswordChange?: string\n}\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    userId: types.optional(types.string, ''),\n    token: types.optional(types.string, ''),\n    provider: types.optional(LoginProviderModel, {}),\n  })\n  .volatile<IVolatileProps>(() => ({}))\n  .views(self => ({\n    get isAuthenticated() {\n      return self.token.length > 0\n    },\n    get isAuthenticatedUser() {\n      return this.isAuthenticated && self.userId.length > 0\n    },\n    get communicationToken() {\n      return self.tokenForPasswordChange || self.token\n    },\n    get canCommunicate() {\n      return this.isAuthenticated || self.tokenForPasswordChange !== undefined\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      self.tokenForPasswordChange = undefined\n      self.log('authenticated with id %s', userId)\n    },\n    invalidate() {\n      self.token = ''\n      self.userId = ''\n      self.tokenForPasswordChange = undefined\n      self.client.cache.reset()\n      self.log('invalidated authentication')\n    },\n  }))\n  .actions(self => ({\n    setForPasswordChange(temporaryB64EncodedToken: string) {\n      self.invalidate()\n      self.log('encoded token %s', temporaryB64EncodedToken)\n      self.tokenForPasswordChange = window.atob(temporaryB64EncodedToken)\n      self.log('using temp token %s', self.tokenForPasswordChange)\n    },\n    async changePassword(password: string) {\n      const variables: MPasswordChange.Variables = {\n        password,\n      }\n      const result = await self.client.mutate({\n        mutation: PasswordChangeMutation,\n        variables,\n        fetchPolicy: 'no-cache',\n      })\n\n      const {\n        updateUserPassword: { id, token },\n      } = result.data as MPasswordChange.Mutation\n\n      if (token && id) {\n        self.invalidate()\n        self.authenticate(token, id)\n      }\n    },\n  }))\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { BaseModel } from '../models/BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  soundEnabled: true,\n  orderListPollIntervalSec: 60,\n  orderListSoundIntervalSec: 60,\n})\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\n\nimport {\n  FCompanyBranchBrand,\n  FCompanyBranchFragment,\n  QUserBootstrapAccess,\n  QUserBootstrapFields,\n  QUserBootstrapPermissions,\n  QUserBootstrapUser,\n} from '../graph/generated'\nimport { RM } from '../helpers/ramda'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  isLoaded: boolean\n  branches: ReadonlyArray<FCompanyBranchFragment>\n  brands: ReadonlyArray<FCompanyBranchBrand>\n  soundEnabled: boolean\n  access: Maybe<IUserAccess>\n  permissions: QUserBootstrapPermissions\n}\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    language: types.maybe(types.string),\n    soundVolume: types.optional(types.number, 25),\n    soundIgnore: false,\n  })\n  .volatile<IVolatileProps>(() => ({\n    isLoaded: false,\n    branches: [],\n    brands: [],\n    soundEnabled: false,\n    access: null,\n    permissions: {\n      canCancelOrders: false,\n      canCreateOrder: false,\n    },\n  }))\n  .views(self => ({\n    get branchesId() {\n      return self.branches.map(R.prop('id'))\n    },\n    get defaultBranch() {\n      if (self.branches.length === 0) {\n        throw new Error('No user branches available to get defaultBranchId')\n      }\n      return self.branches[0]\n    },\n    filterBranches(predicate: (value: FCompanyBranchFragment) => boolean) {\n      return self.branches.filter(predicate)\n    },\n    canQuery(queryName: string) {\n      return (\n        self.access !== null && self.access.queries.has(queryName.toLowerCase())\n      )\n    },\n    canMutate(mutationName: string) {\n      return (\n        self.access !== null &&\n        self.access.mutations.has(mutationName.toLowerCase())\n      )\n    },\n    get isReady() {\n      return self.isLoaded || !self.root.auth.isAuthenticated\n    },\n  }))\n  .actions(self => ({\n    applyUserData(user: QUserBootstrapUser) {\n      self.language = user.language.rawCode\n      self.branches = user.branches\n      self.brands = RM.uniqBy(\n        RM.prop('id'),\n        user.branches.map(RM.prop('brand')),\n      )\n    },\n    applyPermissions(permissions: QUserBootstrapPermissions) {\n      self.permissions = permissions\n    },\n    applyAccess(access: QUserBootstrapAccess) {\n      const makeSet = (fields: ReadonlyArray<QUserBootstrapFields>) =>\n        new Set(\n          fields.map(\n            RM.compose(\n              RM.toLower,\n              RM.prop('name'),\n            ),\n          ),\n        )\n\n      self.access = {\n        queries: makeSet(access.queries.fields ? access.queries.fields : []),\n        mutations: makeSet(\n          access.mutations && access.mutations.fields\n            ? access.mutations.fields\n            : [],\n        ),\n        subscriptions: makeSet(\n          access.subscriptions && access.subscriptions.fields\n            ? access.subscriptions.fields\n            : [],\n        ),\n      }\n    },\n    finishBootstrap() {\n      self.isLoaded = true\n    },\n    setLanguage(lang: string) {\n      self.language = lang\n    },\n    controlSound(enabled: boolean = true, ignore: boolean = false) {\n      self.soundEnabled = enabled\n      self.soundIgnore = ignore\n    },\n    setSoundVolume(volume: number) {\n      self.soundVolume = volume\n    },\n  }))\n\ninterface IUserAccess {\n  queries: Set<string>\n  mutations: Set<string>\n  subscriptions: Set<string>\n}\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import faker from 'faker'\n\nfaker.locale = 'cz'\n\nexport { faker }\n","import { isoDate } from '@speedlo/graphql'\nimport { startOfMinute } from 'date-fns'\nimport _ from 'lodash'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { ISuggestion } from '../../../components/AddressSuggest'\nimport {\n  DeliveryTypeEnum,\n  MCreateOrderAcceptVariables,\n  MCreateOrderNewVariables,\n  MCreateOrderUpdateVariables,\n} from '../../../graph/generated'\nimport { GOrderVam, SOrderCall } from '../../../graph/types'\nimport { faker } from '../../../helpers/faker'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\n\nexport interface IOrderSidedishControlResult {\n  sidedishes: ReadonlyArray<ID>\n  isConfirmed: boolean\n}\n\nexport interface ICall extends Omit<SOrderCall.Call, 'isRinging' | 'eventId'> {\n  eventId?: ID\n}\n\nexport interface IOrderFormValues {\n  deliveryType: DeliveryTypeEnum.Messenger | DeliveryTypeEnum.Pickup\n  deliverAt?: Date\n  phone?: string\n  phonePrefix?: string\n  firstName?: string\n  lastName?: string\n  email?: string\n  note?: string\n}\n\ninterface IVolatileProps {\n  orderId: MaybeID\n  call?: ICall\n  deliveryAddress?: ISuggestion\n  deliveryMinutes?: number\n  minimalPrice?: string\n  notDeliveryLocation: boolean\n  values: IOrderFormValues\n  fakeValues?: Partial<IOrderFormValues>\n  fakeAddress?: ISuggestion\n  vamCustomer: Maybe<GOrderVam.VamCustomer>\n  sidedishMode: 'none' | 'recipe' | 'item'\n  sidedishRootId?: ID\n  sidedishSelection?: ReadonlyArray<ID>\n}\n\nexport const CreateOrderModel = BaseModel.named('CreateOrder')\n  .props({\n    branchId: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(getDefaultProps)\n  .views(self => ({\n    get currentBranch() {\n      return (\n        self.root.user.branches.find(RM.propEq('id', self.branchId)) ||\n        self.root.user.defaultBranch\n      )\n    },\n  }))\n  .views(self => ({\n    get deliveryType() {\n      return self.values.deliveryType\n    },\n    get isDelivery() {\n      return self.values.deliveryType === DeliveryTypeEnum.Messenger\n    },\n    get deliverAt() {\n      return (self.values.deliverAt && new Date(self.values.deliverAt)) || null\n    },\n    get deliverAtIso() {\n      return (this.deliverAt && isoDate(startOfMinute(this.deliverAt))) || null\n    },\n    get hasAddress() {\n      return Boolean(self.deliveryAddress || self.fakeAddress)\n    },\n    get gps() {\n      if (this.isDelivery && this.hasAddress) {\n        if (self.deliveryAddress && self.deliveryAddress.gps) {\n          return clearGps(self.deliveryAddress.gps)\n        } else if (self.fakeAddress && self.fakeAddress.gps) {\n          return clearGps(self.fakeAddress.gps)\n        }\n      }\n      return { ...clearGps(self.currentBranch.gps) }\n    },\n    get phone() {\n      if (self.values.phone !== undefined) {\n        return self.values.phone\n      }\n      return self.call ? self.call.phone : ''\n    },\n    get phonePrefix() {\n      if (self.values.phonePrefix !== undefined) {\n        return self.values.phonePrefix\n      }\n      if (self.call) {\n        return self.call.prefix\n      }\n      if (self.currentBranch.address.country) {\n        return self.currentBranch.address.country.phonePrefix\n      }\n      return '+'\n    },\n    get customer() {\n      const formValues = this.formValues as IOrderFormValues\n      return {\n        firstName: formValues.firstName,\n        lastName: formValues.lastName,\n        emails: formValues.email ? [{ email: formValues.email }] : null,\n        phones: formValues.phone\n          ? [\n              {\n                phone: `${formValues.phonePrefix}${formValues.phone}`,\n              },\n            ]\n          : null,\n      }\n    },\n    get formValues() {\n      if (self.vamCustomer !== null && self.vamCustomer.isFound) {\n        const { firstName, lastName, email, lastOrder } = self.vamCustomer\n        return _.defaults(\n          { ...self.values },\n          {\n            phone: this.phone,\n            phonePrefix: this.phonePrefix,\n            firstName,\n            lastName,\n            email,\n            note: (lastOrder && lastOrder.note) || '',\n          },\n        )\n      }\n      if (self.fakeValues) {\n        return _.defaults({ ...self.values }, { ...self.fakeValues })\n      }\n      return _.defaults(\n        { ...self.values },\n        { phone: this.phone, phonePrefix: this.phonePrefix },\n      )\n    },\n    get hasOrder() {\n      return self.orderId !== null\n    },\n  }))\n  .views(self => ({\n    get createOrderVariables(): MCreateOrderNewVariables {\n      return {\n        branchId: self.currentBranch.id,\n        deliveryType: self.values.deliveryType,\n        deliverAt: self.deliverAtIso,\n        callEventId: self.call && self.call.eventId,\n        gps: self.gps,\n      }\n    },\n    get updateOrderVariables(): MCreateOrderUpdateVariables {\n      return {\n        orderId: self.orderId!,\n        deliveryType: self.deliveryType,\n        deliverAt: self.deliverAtIso,\n        customer: self.customer,\n        gps: self.gps,\n      }\n    },\n    get acceptOrderVariables(): MCreateOrderAcceptVariables {\n      return {\n        orderId: self.orderId!,\n        customer: self.customer,\n        deliverAt: self.deliverAtIso,\n        note: self.formValues.note,\n      }\n    },\n  }))\n  .actions(self => ({\n    resetOrder() {\n      self.orderId = null\n    },\n    resetModel() {\n      Object.assign(self, getDefaultProps())\n    },\n    setOrder(orderId: ID) {\n      self.orderId = orderId\n      return orderId\n    },\n  }))\n  .actions(self => ({\n    useLocation(address: ISuggestion) {\n      self.deliveryAddress = address\n    },\n    clearLocation() {\n      self.deliveryAddress = undefined\n    },\n    setMinimalPrice(price: string | undefined) {\n      self.minimalPrice = price\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    userIsCalling(call: ICall | undefined) {\n      self.call = call\n    },\n    setDeliveryMinutes(minutes: number | undefined) {\n      self.deliveryMinutes = minutes\n    },\n    updateFormValues(\n      values: IOrderFormValues,\n      touched: { [K in keyof IOrderFormValues]?: boolean },\n    ) {\n      self.values = {\n        deliveryType: values.deliveryType,\n        ..._.pick(values, Object.keys(touched)),\n        deliverAt: values.deliverAt,\n      }\n      self.log('updated values: %j', self.values)\n    },\n    updateFromVam(vamCustomer: Maybe<GOrderVam.VamCustomer>) {\n      self.vamCustomer = vamCustomer\n      self.log('vam customer: %j', vamCustomer)\n    },\n    updateFormWithFakeValues() {\n      self.fakeValues = {\n        firstName: faker.name.firstName(),\n        lastName: faker.name.lastName(),\n        email: faker.internet.email(),\n        phone: faker.phone.phoneNumberFormat(3).replace(/\\s/g, ''),\n        phonePrefix: '+420',\n        note: faker.lorem.sentence().slice(0, 50 - 1),\n      }\n      self.fakeAddress = {\n        state: '',\n        city: 'Hradec Králové',\n        street: 'Opletalova',\n        houseNumber: '334/2',\n        gps: {\n          latitude: 50.2129839,\n          longitude: 15.8342836,\n        },\n      }\n    },\n  }))\n  .actions(self => {\n    let resolver: Maybe<(result: IOrderSidedishControlResult) => void> = null\n    const makeResolver = () => {\n      return new Promise<IOrderSidedishControlResult>(resolve => {\n        resolver = resolve\n      })\n    }\n    return {\n      selectSidedishesForRecipe(recipeId: ID) {\n        self.sidedishMode = 'recipe'\n        self.sidedishRootId = recipeId\n        return makeResolver()\n      },\n      selectSidedishesForItem(itemId: ID) {\n        self.sidedishMode = 'item'\n        self.sidedishRootId = itemId\n        return makeResolver()\n      },\n      sidedishSelectionConfirmed(sidedishes: ReadonlyArray<ID>) {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: true,\n            sidedishes,\n          })\n          resolver = null\n        }\n      },\n      sidedishSelectionCancel() {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: false,\n            sidedishes: [],\n          })\n          resolver = null\n        }\n      },\n    }\n  })\n\nfunction getDefaultProps(): IVolatileProps {\n  return {\n    orderId: null,\n    call: undefined,\n    values: {\n      deliveryType: DeliveryTypeEnum.Messenger,\n      deliverAt: undefined,\n      phone: undefined,\n      email: undefined,\n      firstName: undefined,\n      lastName: undefined,\n      note: undefined,\n    },\n    fakeAddress: undefined,\n    fakeValues: undefined,\n    deliveryAddress: undefined,\n    deliveryMinutes: undefined,\n    minimalPrice: undefined,\n    vamCustomer: null,\n    notDeliveryLocation: false,\n    sidedishMode: 'none',\n    sidedishRootId: undefined,\n    sidedishSelection: undefined,\n  }\n}\n\nfunction clearGps({ latitude, longitude }: GeoPoint) {\n  return { latitude, longitude }\n}\n\nexport interface TCreateOrderModel extends Instance<typeof CreateOrderModel> {}\nexport interface TCreateOrderModelProps\n  extends SnapshotIn<typeof CreateOrderModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { gpsToLatLng } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<google.maps.Map>\n}\n\nconst GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 12),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLng(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: google.maps.Map) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\n","import { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\n\ninterface IVolatileProps {\n  activeDriverId: MaybeID\n}\n\nexport const OrderMapModel = MapModel.named('OrderMap')\n  .volatile<IVolatileProps>(() => ({\n    activeDriverId: null,\n  }))\n  .actions(self => ({\n    activateDriver(driverId: ID, position: GeoPoint) {\n      self.activeDriverId = driverId\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(position))\n      }\n    },\n  }))\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { OrderListModel } from './OrderListModel'\nimport { OrderMapModel } from './OrderMapModel'\n\nexport const OrderModel = types.model('Order', {\n  list: types.optional(OrderListModel, {}),\n  map: types.optional(OrderMapModel, {}),\n})\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\n","import { endOfDay, startOfDay } from 'date-fns'\nimport { types } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\n\nexport interface IStatisticsDateFilter {\n  dateTimeFrom: Date\n  dateTimeTo: Date\n}\n\nexport const StatisticsModel = BaseModel.named('Statistics')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    drivers: types.optional(types.array(types.string), []),\n    closureBranch: types.maybeNull(types.string),\n  })\n  .volatile<IStatisticsDateFilter>(() => ({\n    dateTimeFrom: startOfDay(new Date()),\n    dateTimeTo: endOfDay(new Date()),\n  }))\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length > 0\n        ? Array.from(self.branches)\n        : self.root.user.branchesId\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n  }))\n  .actions(self => ({\n    updateFilter(formValues: IStatisticsDateFilter) {\n      self.dateTimeFrom = new Date(formValues.dateTimeFrom)\n      self.dateTimeTo = new Date(formValues.dateTimeTo)\n    },\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    setDriversFilter(drivers: ID[]) {\n      self.drivers.replace(drivers)\n    },\n    setClosureBranch(branch: MaybeID) {\n      self.closureBranch = branch\n    },\n    setTodayOrdersFilter() {\n      self.dateTimeFrom = startOfDay(new Date())\n      self.dateTimeTo = endOfDay(new Date())\n      self.branches.replace(self.root.order.list.branchesFilter)\n    },\n  }))\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TSettingsModel } from './SettingsModel'\n\nexport const SettingsBaseModel = BaseModel.named('SettingsBase').views(\n  self => ({\n    get settings() {\n      return getParent<TSettingsModel>(self)\n    },\n  }),\n)\n","import gql from 'graphql-tag'\n\nimport {\n  FMenuAllergenFragmentDoc,\n  FMenuWareUnitFragmentDoc,\n} from '../../../graph/generated'\n\nexport const MenuStockItemFragment = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...FMenuAllergen\n    }\n    wareUnit {\n      ...FMenuWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n  ${FMenuWareUnitFragmentDoc}\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport const MenuStockCreateMutation = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockUpdateMutation = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockDeleteMutation = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n","import { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuStockCreate,\n  GMenuStockDelete,\n  GMenuStockUpdate,\n} from '../../../graph/types'\nimport { TStockFormValues } from '../organisms/StockFormLoader'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuStockCreateMutation,\n  MenuStockDeleteMutation,\n  MenuStockUpdateMutation,\n} from './MenuStockModel.graphql'\n\nexport const MenuStockModel = MenuBaseModel.named('MenuStock').actions(\n  self => ({\n    createItem(formValues: TStockFormValues) {\n      const variables: GMenuStockCreate.Variables = {\n        stockItem: {\n          companyBranch: self.branchId,\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockCreateMutation,\n          variables,\n        }),\n      )\n    },\n    updateItem(formValues: TStockFormValues) {\n      const variables: GMenuStockUpdate.Variables = {\n        stockId: formValues.id,\n        stockItem: {\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteItem(stockId: ID) {\n      const variables: GMenuStockDelete.Variables = {\n        stockId,\n      }\n      await self.client.mutate({\n        mutation: MenuStockDeleteMutation,\n        variables,\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(formValues: TStockFormValues) {\n  return {\n    code: formValues.code,\n    label: formValues.nameLabel,\n    note: formValues.note,\n    plu: formValues.plu,\n    allergens: formValues.allergens,\n    wareUnit: formValues.wareUnit!,\n    allowNegative: formValues.allowNegative,\n  }\n}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { SettingsBaseModel } from '../../settings/models/SettingsBaseModel'\nimport { MenuCategoryModel } from './MenuCategoryModel'\nimport { MenuRecipeModel } from './MenuRecipeModel'\nimport { MenuStockModel } from './MenuStockModel'\n\nexport const MenuModel = SettingsBaseModel.named('Menu').props({\n  category: types.optional(MenuCategoryModel, {}),\n  recipe: types.optional(MenuRecipeModel, {}),\n  stock: types.optional(MenuStockModel, {}),\n})\n\nexport interface TMenuModel extends Instance<typeof MenuModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { BusinessHoursModel } from '../../businesshours/models/BusinessHoursModel'\nimport { MenuModel } from '../../menu/models/MenuModel'\n\nexport const SettingsModel = BaseModel.named('Settings')\n  .props({\n    selectedBranchId: types.maybe(types.string),\n    businessHours: types.optional(BusinessHoursModel, {}),\n    menu: types.optional(MenuModel, {}),\n  })\n  .views(self => ({\n    get branchId() {\n      return self.selectedBranchId || RM.head(self.root.user.defaultBranch.id)\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.selectedBranchId = branchId\n    },\n  }))\n\nexport interface TSettingsModel extends Instance<typeof SettingsModel> {}\n","import { FCompanyBranchFragment } from '../../../graph/generated'\nimport { GZoneLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport { ZoneLocationQuery } from '../Zones.graphql'\n\ninterface IVolatileProps {\n  currentZonePoints: Maybe<GeoPoint[]>\n}\n\nexport const ZoneMapModel = MapModel.named('ZoneMap')\n  .volatile<IVolatileProps>(() => ({\n    currentZonePoints: null,\n  }))\n  .actions(self => ({\n    updateZonePoints(points: GeoPoint[]) {\n      self.currentZonePoints = points\n    },\n    clearZonePoints() {\n      self.currentZonePoints = null\n    },\n    async panToZone(zoneId: ID) {\n      const { data } = await self.client.query({\n        query: ZoneLocationQuery,\n        variables: { zoneId },\n      })\n      if (data) {\n        const {\n          zone: {\n            companyBranch: { gps },\n          },\n        } = data as GZoneLocation.Query\n        if (self.mapRef) {\n          self.mapRef.panTo(gpsToLatLng(gps))\n        }\n      }\n    },\n    async panToBranch(branch: FCompanyBranchFragment) {\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(branch.gps))\n      }\n    },\n  }))\n","import gql from 'graphql-tag'\n\nimport { FZoneFragmentDoc } from '../../../graph/generated'\n\nexport const CreateZoneMutation = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...FZone\n    }\n  }\n  ${FZoneFragmentDoc}\n`\n\nexport const UpdateZonePriorityMutation = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport const DestroyZoneMutation = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n","import { flow, Instance, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\nimport { VError } from 'verror'\n\nimport {\n  FCompanyBranchBrand,\n  FCompanyBranchFragment,\n  FZoneFragment,\n  FZonePriceRangeFragment,\n  MZoneUpdateVariables,\n} from '../../../graph/generated'\nimport {\n  GCreateZone,\n  GDestroyZone,\n  GUpdateZonePriority,\n} from '../../../graph/types'\nimport { generatePolygon } from '../../../helpers/gps'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { ZoneMapModel } from '../models/ZoneMapModel'\nimport {\n  CreateZoneMutation,\n  DestroyZoneMutation,\n  UpdateZonePriorityMutation,\n} from './ZoneModel.graphql'\n\ntype TBranch = FCompanyBranchFragment\ntype TBrand = FCompanyBranchBrand\n\ninterface IVolatileProps {\n  branch: Maybe<TBranch>\n}\n\nexport const ZoneModel = BaseModel.named('Zone')\n  .props({\n    map: types.optional(ZoneMapModel, {}),\n    brandId: types.maybeNull(types.string),\n  })\n  .volatile<IVolatileProps>(() => ({\n    branch: null,\n  }))\n  .views(self => ({\n    get brand(): Maybe<TBrand> {\n      return (\n        (self.brandId &&\n          self.root.user.brands.find(RM.propEq('id', self.brandId))) ||\n        null\n      )\n    },\n    get hasBranchFilter() {\n      return self.branch !== null\n    },\n    get branchFilterId(): MaybeID {\n      return self.branch === null ? null : self.branch.id\n    },\n    get branchFilterPredicate() {\n      if (self.branch) {\n        return R.propEq('id', self.branch.id)\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), ['brand', 'id'])\n    },\n    get zoneFilterPredicate() {\n      if (self.branch !== null) {\n        return R.pathSatisfies(R.equals(self.branch.id), [\n          'companyBranch',\n          'id',\n        ])\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), [\n            'companyBranch',\n            'brand',\n            'id',\n          ])\n    },\n    get branches() {\n      return self.root.user.branches\n    },\n  }))\n  .views(self => ({\n    getZoneVariables(zoneId: ID, values: any): MZoneUpdateVariables {\n      return {\n        zoneId,\n        update: {\n          name: values.name,\n          enabled: values.enabled,\n          companyBranch: values.companyBranch.id,\n          zoneColor: values.zoneColor.id,\n          minimalOrderPrice: {\n            value: Number(values.minimalOrderPrice.value) || 0,\n          },\n          priceRangeRules: values.priceRangeRules\n            .map(normalizePriceRangeRule)\n            .filter(R.reject(R.pathEq(['price', 'value'], null))),\n          geoPolygon: self.map.currentZonePoints || undefined,\n        },\n      }\n    },\n  }))\n  .actions(self => ({\n    setBranchFilter(branch: TBranch) {\n      self.branch = branch\n      self.brandId = branch.brand.id\n      self.map.panToBranch(branch)\n    },\n    setBrandFilter(brand: TBrand, brandBranches: TBranch[]) {\n      self.brandId = brand.id\n      if (!self.branch || self.branch.brand.id !== brand.id) {\n        self.branch =\n          (brandBranches.length === 1 && RM.head(brandBranches)) || null\n      }\n    },\n    clearBranchFilter() {\n      self.branch = null\n    },\n    clearBrandFilter() {\n      self.brandId = null\n      self.branch = null\n    },\n  }))\n  .actions(self => ({\n    createZone: flow(function*(onZoneCreate: (zoneId: ID) => void) {\n      if (self.branch === null) {\n        throw new VError('Called createZone without branch being set')\n      }\n      const points = generatePolygon({\n        center: self.branch.gps,\n        metersRadius: 1000,\n        pointsCount: 5,\n      })\n      const variables: GCreateZone.Variables = {\n        branchId: self.branch.id,\n        points,\n      }\n      const { data } = yield self.client.mutate({\n        mutation: CreateZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: (prev, { mutationResult }) => {\n            const zone = (mutationResult.data as GCreateZone.Mutation)\n              .createZone\n            if (zone) {\n              return {\n                ...prev,\n                zones: prev.zones.concat(zone),\n              }\n            }\n            return prev\n          },\n        },\n      })\n      if (data) {\n        const zone = (data as GCreateZone.Mutation).createZone\n        onZoneCreate(zone.id)\n      }\n    }),\n    destroyZone(zoneId: ID) {\n      if (!zoneId) {\n        return\n      }\n      const variables: GDestroyZone.Variables = {\n        zoneId,\n      }\n      return self.client.mutate({\n        mutation: DestroyZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: prev => {\n            return {\n              ...prev,\n              zones: R.reject(R.propEq('id', zoneId), prev.zones),\n            }\n          },\n        },\n      })\n    },\n    changeZonePriority: flow(function*(\n      zone: FZoneFragment,\n      oldIndex: number,\n      newIndex: number,\n    ) {\n      if (!zone || oldIndex === newIndex) {\n        return\n      }\n      const offset = oldIndex - newIndex\n\n      const variables: GUpdateZonePriority.Variables = {\n        zoneId: zone.id,\n        offset,\n      }\n      yield self.client.mutate({\n        mutation: UpdateZonePriorityMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          updateZonePriority: {\n            __typename: 'Zone',\n            id: zone.id,\n            priority: zone.priority + offset,\n          },\n        },\n      })\n    }),\n  }))\n\nfunction numberOrNull(value: string | number | null) {\n  if (value === null) {\n    return null\n  }\n  const num = Number(value)\n  return Number.isNaN(num) ? null : num\n}\n\nfunction normalizePriceRangeRule(range: FZonePriceRangeFragment) {\n  return {\n    price: { value: numberOrNull(range.price.value) },\n    toPrice: { value: numberOrNull(range.toPrice.value) || -1 },\n  }\n}\n\nexport interface TZoneModel extends Instance<typeof ZoneModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { AuthModel } from '../models/AuthModel'\nimport { ConfigModel } from '../models/ConfigModel'\nimport { UserModel } from '../models/UserModel'\nimport { CreateOrderModel } from '../segments/createorder/models/CreateOrderModel'\nimport { OrderModel } from '../segments/order/models/OrderModel'\nimport { StatisticsModel } from '../segments/overview/models/StatisticsModel'\nimport { SettingsModel } from '../segments/settings/models/SettingsModel'\nimport { ZoneModel } from '../segments/zones/models/ZoneModel'\nimport { BaseModel } from './BaseModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    user: types.optional(UserModel, {}),\n    order: types.optional(OrderModel, {}),\n    createOrder: types.optional(CreateOrderModel, {}),\n    zone: types.optional(ZoneModel, {}),\n    settings: types.optional(SettingsModel, {}),\n    config: types.optional(ConfigModel, {}),\n    statistics: types.optional(StatisticsModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.settings,\n        self.zone,\n        self.order,\n        self.statistics,\n        self.createOrder,\n      ]\n    },\n  }))\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import { ApolloProvider, DefaultApolloClient } from '@speedlo/graphql'\nimport { useAsyncEffect } from '@speedlo/hooks'\nimport React from 'react'\n\nimport { RootContext } from '../context/RootContext'\nimport { createApolloClient } from '../graph/createClient'\nimport { persistModel } from '../helpers/persistModel'\nimport { AuthModel } from '../models/AuthModel'\nimport { RootModel } from '../models/RootModel'\nimport PageLoader from './PageLoader'\n\nexport const RootProvider: React.FC = ({ children }) => {\n  const [isInit, setInit] = React.useState(false)\n  const [root] = React.useState(() => {\n    const auth = AuthModel.create({})\n    const apolloClient = createApolloClient(auth)\n    return RootModel.create(\n      { auth },\n      {\n        apolloClient,\n      },\n    )\n  })\n\n  useAsyncEffect(async () => {\n    if (process.env.REACT_APP_STAGE === 'dev') {\n      // @ts-ignore\n      window.root = root\n    }\n    await Promise.all(root.persistedModels.map(persistModel))\n    setInit(true)\n  }, [root])\n\n  if (!isInit) {\n    return <PageLoader />\n  }\n\n  return (\n    <ApolloProvider client={root.client}>\n      <RootContext.Provider value={root}>\n        {React.Children.only(children)}\n      </RootContext.Provider>\n    </ApolloProvider>\n  )\n}\n\nexport const useRoot = () => {\n  const root = React.useContext(RootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\nexport interface IRootEnvironment {\n  fetch: TFetch\n  apolloClient: DefaultApolloClient\n}\n"],"sourceRoot":""}