{"version":3,"sources":["molecules/PageLayoutFullHeightItem.tsx","atoms/VerticalGap.tsx","atoms/ScrollArea.tsx","atoms/FlexRowSingle.tsx","atoms/CardListTitle.tsx","hooks/useRouterContext.ts","atoms/DragHandle.tsx","atoms/BaseMap.tsx","atoms/FormInputSelect.tsx","segments/zones/hooks/useZoneId.ts","segments/zones/hooks/useZoneRouteControl.tsx","segments/zones/atoms/ZonePriceInput.tsx","segments/zones/molecules/ZoneColorSelector.tsx","segments/zones/atoms/ZonePlaceholderInput.tsx","segments/zones/molecules/ZoneFormPriceRange.tsx","segments/zones/molecules/ZoneFormContent.tsx","segments/zones/molecules/ZoneFormControls.tsx","segments/zones/organisms/ZoneListLoader.graphql.ts","segments/zones/organisms/ZoneListLoader.tsx","segments/zones/organisms/ZoneFormPanel.tsx","molecules/MapCompanyBranchMarker.tsx","segments/zones/atoms/ZoneMapArea.tsx","segments/zones/hooks/useZoneModel.ts","segments/zones/organisms/ZoneMapControl.tsx","segments/zones/molecules/CreateZoneButton.tsx","segments/zones/atoms/ZoneListCard.tsx","segments/zones/molecules/ZoneList.tsx","segments/zones/organisms/ZoneListControl.tsx","segments/zones/molecules/ZoneFIlterBranch.tsx","segments/zones/molecules/ZoneFilterBrand.tsx","segments/zones/organisms/ZoneFilter.tsx","segments/zones/organisms/ZoneMenuPanel.tsx","segments/zones/pages/ZonePageLayout.tsx","segments/zones/routes/ZoneMenuRoutes.tsx"],"names":["__webpack_require__","d","__webpack_exports__","PageLayoutFullHeightItem","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","styled_components__WEBPACK_IMPORTED_MODULE_1__","_atoms_ScrollArea__WEBPACK_IMPORTED_MODULE_2__","_styling__WEBPACK_IMPORTED_MODULE_3__","FullHeightDiv","div","withConfig","displayName","props","undefined","widthInColumns","LayoutGridCellMargin","widthComputed","column","leftPos","row","topPos","FullHeightDivStyled","children","withScrollArea","scrollAreaId","a","createElement","id","VerticalGap","size","sizeUnit","ScrollArea","FlexRowSingle","justify","CardListTitle","styled_components__WEBPACK_IMPORTED_MODULE_0__","_styling__WEBPACK_IMPORTED_MODULE_1__","h2","greyLight","useRouterContext","react_router__WEBPACK_IMPORTED_MODULE_1__","Object","DragHandle","react_sortable_hoc__WEBPACK_IMPORTED_MODULE_1__","styled_components__WEBPACK_IMPORTED_MODULE_2__","_Icon__WEBPACK_IMPORTED_MODULE_3__","DragHandleContainerStyled","iconName","BaseMap","mobx_react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","react_google_maps__WEBPACK_IMPORTED_MODULE_2__","styled_components__WEBPACK_IMPORTED_MODULE_3__","_styling__WEBPACK_IMPORTED_MODULE_4__","MapContainerStyled","Card","BaseMapContainer","Fragment","[object Object]","this","getOptions","streetViewControl","mapTypeControl","fullscreenControl","model","containerElement","mapElement","style","height","ref","setMapRef","zoom","center","onCenterChanged","updatePosition","onZoomChanged","updateZoom","options","render","FormInputSelect","Component","validate","value","isRequired","_i18n__WEBPACK_IMPORTED_MODULE_3__","_","0","validatioName","fieldApi","isMulti","getOptionValue","defaultValue","selection","isSelected","Array","isArray","item","includes","_helpers_ramda__WEBPACK_IMPORTED_MODULE_2__","F","filter","onChange","selectedOptions","setValue","map","find","option","_a","field","fieldIsPure","__rest","react_form__WEBPACK_IMPORTED_MODULE_1__","pure","_SelectControl__WEBPACK_IMPORTED_MODULE_4__","_extends","getControlProps","onFocus","setTouched","styles","control","base","Boolean","error","assign","borderColor","defaultProps","getItemId","prop","useZoneId","match","zoneId","params","useZoneRouteControl","user","zone","zoneModel","RootProvider","history","editZoneId","panToZone","canQuery","push","getRouteToZone","route","LabelStyled","styled_components_browser_esm","FormInputTextBoxStyled","FormInputTextBox","FormInputTextBoxDeliveryStyled","styling","blue","DeliveryContainer","PriceRangeContainer","VerticalLine","validatePrice","trim","length","Number","isNaN","parseFloat","i18n","ZonePriceInput","react_default","forwardRef","label","isDeliveryPrice","autoFocus","ColorOption","color","white","QueryZoneColors","buildQuery","Zones_graphql","ZoneColorSelector","zoneColors","width","padding","margin","menu","maxWidth","makeStyles","ramda","head","formatOptionLabel","zoneColor","code","ZonePlaceholderInput_LabelStyled","FormInputForPlaceholderStyled","Container","ZonePlaceholderInput","display","disabled","placeholder","AddButtonContainer","RemoveButtonContainer","ZoneFormPriceRange","values","idx","react","key","TouchButtonDelete","onDelete","removeValue","es","formApi","TouchButton","submitting","ButtonHeight","onClick","addValue","price","toPrice","ZoneFormContentStyled","Middle","black","DescriptionUnderHeadline","greyDark","ZoneFormContent","IconLine","icon","helpers_form","FormInputCheckbox","name","toLocaleLowerCase","_lingui_react","components","Headline","component","ZoneFormControls","isSubmitting","isModified","onGoBack","onSave","FlexColumn","widthGrowIndex","greyMiddle","text","CanMutate","mutationName","green","ZonesQuery","QueryZones","ZoneListContext","createContext","ZoneListLoader","index_module","branches","branchFilterPredicate","Provider","variables","branchesId","renderLoading","zones","loading","useZoneList","DeleteButtonContainer","ZoneFormPanel","zoneList","routeToZoneList","setModified","formApiRef","__awaiter","current","submitForm","destroyZone","propEq","defaultValues","formState","logger","confirmText","onSubmit","saveZone","Loading","BranchNameStyled","isActive","MapCompanyBranchMarker","branch","lib","getPixelPositionOffset","x","y","mapPaneName","MARKER_LAYER","position","gps","ZoneMapArea_ZoneMapArea","PureComponent","polygon","listeners","onAreaChange","getPath","getArray","onAreaFocus","e","stop","onMount","path","addListener","forEach","lis","remove","points","edit","priority","defaultPath","fillColor","fillOpacity","strokeWeight","zIndex","editable","draggable","onDragEnd","onDblClick","useZoneModel","ZoneMapControl","routeToZoneEdit","useEffectOnce","companyBranchId","hasBranchFilter","branchFilterId","renderZoneArea","geoPolygon","companyBranch","enabled","updateZonePoints","renderBranchLabel","CreateZoneButton","createZone","turquoise","textNextToIcon","ZoneNameStyled","ZoneDescriptionStyled","ZoneFlexRowStyled","ZoneListCard","commonjs","onEdit","fixedWidth","ZoneListContainerStyled","sortZones","ramda_es","groupByBranch","ZoneList","onZoneEdit","renderZone","index","collection","output","onSortEnd","sorted","oldIndex","newIndex","changeZonePriority","grouped","branchZones","renderBranch","useDragHandle","lockAxis","ZoneListControl","react_content_loader_es","primaryOpacity","secondaryOpacity","brand","zoneFilterPredicate","root","filterBranches","ZoneFilterBranch","selectedBranch","onSelection","CompanyBranchDropdown","onSingleSelection","isClearable","ZoneFilterBrand","brands","selectedBrand","SelectControl","getOptionLabel","isSearchable","ZoneFilter","WithRoot","setBranchFilter","getBrandBranches","pathEq","singleBrand","setBrandFilter","clearBrandFilter","clearBranchFilter","ZoneMenuContainer","FixedHeaderContainer","ScrollAreaContainer","ZoneMenuPanel","ZonePageLayout","isEditing","PageLayout","pageTitle","ZoneMenuRoutes","react_router","SecureRoute","NotFoundPage"],"mappings":"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","file":"static/js/55.01bf6e52.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nimport { ScrollArea } from '../atoms/ScrollArea'\nimport { Spacing } from '../styling'\n\ninterface IPageLayoutFullHeightItemProps {\n  row?: number\n  column?: number\n  widthInColumns?: number\n  withScrollArea?: boolean\n  scrollAreaId?: string\n}\n\nconst gridColumnWidth: string = '6.22vw'\nconst gridColumnHeigth: string = '3.9375rem'\n\nconst leftPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.column !== undefined) {\n    return (\n      'calc((' +\n      props.column +\n      ' * ' +\n      gridColumnWidth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return Spacing.LayoutGridCellMargin\n  }\n}\nconst widthComputed = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.widthInColumns !== undefined) {\n    return (\n      'calc((' +\n      props.widthInColumns +\n      ' * ' +\n      gridColumnWidth +\n      ') - ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return 'calc(100vh - (2 * ' + Spacing.LayoutGridCellMargin + '))'\n  }\n}\nconst topPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.row !== undefined) {\n    return (\n      'calc((' +\n      props.row +\n      ' * ' +\n      gridColumnHeigth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return (\n      'calc(' + gridColumnHeigth + ' + ' + Spacing.LayoutGridCellMargin + ')'\n    )\n  }\n}\n\nconst FullHeightDiv = styled.div`\n  position: fixed;\n  bottom: 0.5rem;\n  width: ${widthComputed()};\n  left: ${leftPos()};\n  top: ${topPos()};\n`\n\nconst FullHeightDivStyled = styled.div`\n  height: 100%;\n`\n\nexport const PageLayoutFullHeightItem: React.SFC<\n  IPageLayoutFullHeightItemProps\n> = ({\n  children,\n  row = 1,\n  column = 0,\n  widthInColumns = 16,\n  withScrollArea = false,\n  scrollAreaId,\n}) => (\n  <FullHeightDiv\n    column={column}\n    row={row}\n    widthInColumns={widthInColumns}\n    withScrollArea={withScrollArea}\n  >\n    {withScrollArea ? (\n      <ScrollArea id={scrollAreaId}>{children}</ScrollArea>\n    ) : (\n      <FullHeightDivStyled>{children}</FullHeightDivStyled>\n    )}\n  </FullHeightDiv>\n)\n","import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import styled from 'styled-components'\n\nexport const ScrollArea = styled.div`\n  overflow-y: scroll;\n  -webkit-overflow-scrolling: touch;\n  height: 100%;\n`\n","import styled from 'styled-components'\n\nexport const FlexRowSingle = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: ${({ justify = 'space-between' }: { justify?: string }) =>\n    justify};\n`\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\nexport const CardListTitle = styled.h2`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  font-size: 1.2rem;\n  margin: 0.8rem 0 0.8rem 0.3rem;\n`\n","import { useContext } from 'react'\nimport * as Router from 'react-router'\n\nexport default function useRouterContext<\n  Params extends { [K in keyof Params]?: string } = {}\n>(): Router.RouteComponentProps<Params> {\n  // @ts-ignore\n  return useContext(Router.__RouterContext)\n}\n\n// export default function useRouter<\n// Params extends { [K in keyof Params]?: string } = {}\n// >(): Router.RouteComponentProps<Params> {\n//   // @ts-ignore\n//   let context = useContext(Router.__RouterContext);\n//   let location = options.location || context.location;\n//   let match = options.path\n//     ? matchPath(location.pathname, options)\n//     : context.match;\n\n//   return { ...context, location, match };\n\n// }\n\n// export default function useRouter(options = {}) {\n//   invariant(\n//     typeof useContext === \"function\",\n//     \"The useRouter hook requires React 16.7 or greater\"\n//   );\n\n//   let context = useContext(RouterContext);\n//   let location = options.location || context.location;\n//   let match = options.path\n//     ? matchPath(location.pathname, options)\n//     : context.match;\n\n//   return { ...context, location, match };\n// }\n","import React from 'react'\nimport { SortableHandle } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Icon } from './Icon'\n\ninterface IDragHandleProps {}\n\nconst DragHandleContainerStyled = styled.div`\n  padding: 1rem 0.4rem;\n  cursor: grab;\n`\nexport const DragHandle = SortableHandle<IDragHandleProps>(() => (\n  <DragHandleContainerStyled>\n    <Icon iconName=\"reorder\" />\n  </DragHandleContainerStyled>\n))\n","import { Observer } from 'mobx-react'\nimport React, { Component } from 'react'\nimport { GoogleMap, GoogleMapProps, withGoogleMap } from 'react-google-maps'\nimport styled from 'styled-components'\n\nimport { TMapModel } from '../models/MapModel'\nimport { Radiuses } from '../styling'\n\ninterface IBaseMapProps extends GoogleMapProps {\n  model: TMapModel\n  render(control: IMapControl): ReactNode | ReactNode[]\n}\n\ninterface IMapControl {}\n\nconst MapContainerStyled = styled.div`\n  border-radius: ${Radiuses.Card};\n  overflow: hidden;\n  height: 100%;\n`\n\nconst BaseMapContainer = withGoogleMap(({ children }) => <>{children}</>)\n\nexport class BaseMap extends Component<IBaseMapProps> {\n  getOptions = () => {\n    return {\n      streetViewControl: false,\n      mapTypeControl: false,\n      fullscreenControl: false,\n    }\n  }\n  render() {\n    const { model } = this.props\n    return (\n      <BaseMapContainer\n        containerElement={<MapContainerStyled />}\n        mapElement={<div style={{ height: `100%` }} />}\n      >\n        <Observer>\n          {() => (\n            <GoogleMap\n              ref={model.setMapRef}\n              zoom={model.zoom}\n              center={model.center}\n              onCenterChanged={model.updatePosition}\n              onZoomChanged={model.updateZoom}\n              options={this.getOptions()}\n            >\n              {this.props.render({})}\n            </GoogleMap>\n          )}\n        </Observer>\n      </BaseMapContainer>\n    )\n  }\n}\n","import React from 'react'\nimport { Field, FieldType, IFieldApi } from 'react-form'\n\nimport { RM } from '../helpers/ramda'\nimport { i18n } from '../i18n'\nimport { ISelectControlProps, SelectControl } from './SelectControl'\n\nexport interface IFormInputSelectProps<OptionType>\n  extends ISelectControlProps<OptionType> {\n  field: FieldType\n  fieldIsPure?: boolean\n  defaultValue?: OptionType\n  isRequired?: boolean\n  validatioName?: string\n}\n\nexport class FormInputSelect<OptionType> extends React.Component<\n  IFormInputSelectProps<OptionType>\n> {\n  static defaultProps = {\n    validatioName: 'Value',\n    getItemId: RM.prop('id'),\n  }\n\n  validate = (value: OptionType | undefined) => {\n    if (this.props.isRequired && !value) {\n      return i18n.t`${this.props.validatioName} must be selected`\n    }\n    return null\n  }\n\n  getControlProps(fieldApi: IFieldApi) {\n    const { isMulti, options, getOptionValue, defaultValue } = this.props\n    const selection = fieldApi.value || defaultValue\n\n    if (isMulti) {\n      const isSelected = Array.isArray(selection)\n        ? (item: OptionType) => selection.includes(getOptionValue!(item))\n        : RM.F\n      return {\n        value: Array.isArray(options)\n          ? (options as OptionType[]).filter(isSelected)\n          : [],\n        onChange: selectedOptions => {\n          fieldApi.setValue(selectedOptions.map(getOptionValue))\n        },\n      }\n    }\n\n    return {\n      value:\n        selection &&\n        (options as OptionType[]).find(\n          item => getOptionValue!(item) === selection,\n        ),\n      onChange: option => {\n        fieldApi.setValue(getOptionValue!(option))\n      },\n    }\n  }\n\n  render() {\n    const {\n      field,\n      fieldIsPure = false,\n      defaultValue = undefined,\n      isRequired = false,\n      ...props\n    } = this.props\n    return (\n      <Field field={field} validate={this.validate} pure={fieldIsPure}>\n        {fieldApi => (\n          <SelectControl\n            {...this.getControlProps(fieldApi)}\n            onFocus={() => fieldApi.setTouched(true)}\n            styles={{\n              control: base => {\n                if (Boolean(fieldApi.error)) {\n                  return {\n                    ...base,\n                    borderColor: 'red',\n                  }\n                }\n                return base\n              },\n            }}\n            {...props}\n          />\n        )}\n      </Field>\n    )\n  }\n}\n","import useRouterContext from '../../../hooks/useRouterContext'\n\ninterface IZoneRouteParams {\n  zoneId?: ID\n}\n\nexport function useZoneId() {\n  const { match } = useRouterContext<IZoneRouteParams>()\n  const { zoneId } = match.params\n  return zoneId\n}\n","import { useRoot } from '../../../atoms/RootProvider'\nimport useRouterContext from '../../../hooks/useRouterContext'\n\nexport function useZoneRouteControl() {\n  const { user, zone: zoneModel } = useRoot()\n  const { history } = useRouterContext()\n  return {\n    routeToZoneEdit(editZoneId: ID) {\n      zoneModel.map.panToZone(editZoneId)\n      if (user.canQuery('zone')) {\n        history.push(zoneModel.getRouteToZone(editZoneId))\n      }\n    },\n    routeToZoneList() {\n      history.push(zoneModel.route)\n    },\n  }\n}\n","import React from 'react'\nimport { FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { i18n } from '../../../i18n'\nimport { Colors } from '../../../styling'\n\ninterface IZoneInputProps {\n  field: FieldType\n  label?: string\n  autoFocus?: boolean\n  isDeliveryPrice?: boolean\n}\n\nconst LabelStyled = styled.div`\n  min-width: 2rem;\n  display: inline-block;\n`\n\nconst FormInputTextBoxStyled = styled(FormInputTextBox)`\n  width: 3rem;\n  position: relative;\n  z-index: 4;\n`\nconst FormInputTextBoxDeliveryStyled = styled(FormInputTextBoxStyled)`\n  color: ${Colors.blue};\n`\n\nconst DeliveryContainer = styled.div`\n  position: relative;\n  left: 8rem;\n  top: 0rem;\n`\n\nconst PriceRangeContainer = styled.div`\n  position: relative;\n  left: 4rem;\n  top: -0.3rem;\n  width: 3rem;\n`\n\nconst VerticalLine = styled.div`\n  border-left: 3px solid #707070;\n  width: 3px;\n  position: relative;\n  left: -2rem;\n  height: 4rem;\n  float: left;\n  margin: -0.5rem 0 0 0;\n`\n\nconst validatePrice = (value: string) => {\n  if (typeof value === 'number') {\n    return null\n  }\n  const trim = value.trim()\n  return trim.length && Number.isNaN(Number.parseFloat(trim))\n    ? i18n.t`Must be number`\n    : null\n}\n\nexport const ZonePriceInput = React.forwardRef<\n  HTMLInputElement,\n  IZoneInputProps\n>(\n  ({ field, label, isDeliveryPrice, autoFocus = false }, ref) =>\n    isDeliveryPrice ? (\n      <DeliveryContainer>\n        <VerticalLine />\n        <LabelStyled>{label}</LabelStyled>\n        <FormInputTextBoxDeliveryStyled\n          field={field}\n          validate={validatePrice}\n          // @ts-ignore\n          ref={ref}\n        />\n      </DeliveryContainer>\n    ) : (\n      <PriceRangeContainer>\n        <FormInputTextBoxStyled\n          field={field}\n          validate={validatePrice}\n          autoFocus={autoFocus}\n        />\n      </PriceRangeContainer>\n    ),\n)\n","import React from 'react'\nimport { FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputSelect } from '../../../atoms/FormInputSelect'\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GZoneColors } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { Colors } from '../../../styling'\nimport { ZoneColorsQuery } from '../Zones.graphql'\n\ninterface IZoneColorSelectorProps {\n  field?: FieldType\n}\n\nconst ColorOption = styled.div`\n  background-color: ${({ color }: { color: string }) => color};\n  color: ${Colors.white};\n  width: 6rem;\n  padding: 0.4rem 1rem;\n  margin: 0;\n  height: 100%;\n`\n\nconst QueryZoneColors = buildQuery<GZoneColors.Query, GZoneColors.Variables>(\n  ZoneColorsQuery,\n)\n\nconst makeStyles = () => ({\n  option: base => ({\n    ...base,\n    padding: 0,\n    margin: 0,\n  }),\n  menu: base => ({\n    ...base,\n    width: '8rem',\n    maxWidth: '8rem',\n  }),\n})\n\nexport const ZoneColorSelector: React.SFC<IZoneColorSelectorProps> = ({\n  field = 'zoneColor.id',\n}) => (\n  <QueryZoneColors\n    render={({ zoneColors }) => (\n      <FormInputSelect<GZoneColors.ZoneColors>\n        field={field}\n        fieldIsPure={true}\n        options={zoneColors}\n        width={8}\n        styles={makeStyles()}\n        defaultValue={RM.head(zoneColors)}\n        getOptionValue={RM.prop('id')}\n        formatOptionLabel={zoneColor => (\n          <ColorOption color={zoneColor.color}>{zoneColor.code}</ColorOption>\n        )}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { FormInputStyled } from '../../../atoms/FormInputTextBox'\n\ninterface IZonePlaceholderInputProps {\n  label: string\n  display: string\n}\n\nconst LabelStyled = styled.div`\n  width: 3rem;\n  display: inline-block;\n`\n\nconst FormInputForPlaceholderStyled = styled(FormInputStyled)`\n  width: 3rem;\n  position: relative;\n  z-index: 4;\n`\n\nconst Container = styled.div`\n  margin: 0 0 0 1rem;\n`\n\nexport const ZonePlaceholderInput: React.SFC<IZonePlaceholderInputProps> = ({\n  label,\n  display,\n}) => (\n  <Container>\n    <LabelStyled>{label}</LabelStyled>\n    <FormInputForPlaceholderStyled disabled={true} placeholder={display} />\n  </Container>\n)\n","import React, { Fragment } from 'react'\nimport { FormApi, NestedFieldComponentProps } from 'react-form'\nimport styled from 'styled-components'\n\nimport { GZonePriceRange } from '../../../graph/types'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Spacing } from '../../../styling'\nimport { ZonePlaceholderInput } from '../atoms/ZonePlaceholderInput'\nimport { ZonePriceInput } from '../atoms/ZonePriceInput'\n\ninterface IProps\n  extends NestedFieldComponentProps<GZonePriceRange.Fragment[]> {}\n\nconst AddButtonContainer = styled.div`\n  position: relative;\n  top: -6rem;\n`\n\nconst RemoveButtonContainer = styled.div`\n  position: relative;\n  top: -7rem;\n  left: 16rem;\n`\n\nexport const ZoneFormPriceRange: React.SFC<IProps> = ({ fieldApi }) => {\n  return (\n    <>\n      {fieldApi.values.map((value, idx, values) => (\n        <Fragment key={idx}>\n          <ZonePriceInput\n            label=\"za\"\n            isDeliveryPrice={true}\n            field={[idx, 'price', 'value']}\n          />\n\n          {idx === values.length - 1 ? (\n            <ZonePlaceholderInput display=\"&infin;\" label=\"do\" />\n          ) : (\n            <ZonePriceInput\n              field={[idx, 'toPrice', 'value']}\n              autoFocus={true}\n            />\n          )}\n\n          {values.length > 1 && (\n            <RemoveButtonContainer>\n              <TouchButtonDelete\n                onDelete={() => fieldApi.removeValue('', idx)}\n              />\n            </RemoveButtonContainer>\n          )}\n        </Fragment>\n      ))}\n      <FormApi\n        render={formApi => (\n          <AddButtonContainer>\n            <TouchButton\n              disabled={formApi.submitting}\n              width={Spacing.ButtonHeight}\n              iconName=\"add_circle\"\n              onClick={() =>\n                fieldApi.addValue('', {\n                  price: { value: 0 },\n                  toPrice: { value: 0 },\n                })\n              }\n            />\n          </AddButtonContainer>\n        )}\n      />\n    </>\n  )\n}\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport { NestedField } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputCheckbox } from '../../../atoms/FormInputCheckbox'\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { Headline } from '../../../atoms/Headline'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { validateIsRequired } from '../../../helpers/form'\nimport { i18n } from '../../../i18n'\nimport { Colors, Spacing } from '../../../styling'\nimport { ZonePriceInput } from '../atoms/ZonePriceInput'\nimport { ZoneColorSelector } from '../molecules/ZoneColorSelector'\nimport { ZoneFormPriceRange } from '../molecules/ZoneFormPriceRange'\n\ninterface IZoneFormContentProps {}\n\nconst ZoneFormContentStyled = styled.div`\n  margin: ${Spacing.Middle};\n  color: ${Colors.black};\n`\n\nconst DescriptionUnderHeadline = styled.div`\n  color: ${Colors.greyDark};\n  padding-bottom: 0.2rem;\n`\n\nexport const ZoneFormContent: React.SFC<IZoneFormContentProps> = props => (\n  <ZoneFormContentStyled>\n    <IconLine icon=\"label\">\n      <FormInputTextBox\n        field=\"name\"\n        validate={validateIsRequired(i18n.t`Zone name`)}\n      />\n    </IconLine>\n\n    <IconLine icon=\"color_lens\">\n      <ZoneColorSelector />\n    </IconLine>\n\n    <FormInputCheckbox\n      field=\"enabled\"\n      name=\"enabled\"\n      label={i18n.t`Is active`.toLocaleLowerCase()}\n    />\n\n    <Trans>\n      <Headline margin=\"0.5rem 0 0 0\">Delivery cost</Headline>\n      <DescriptionUnderHeadline>\n        according order total cost\n      </DescriptionUnderHeadline>\n    </Trans>\n    <ZonePriceInput field=\"minimalOrderPrice.value\" />\n    <NestedField field=\"priceRangeRules\" component={ZoneFormPriceRange} />\n  </ZoneFormContentStyled>\n)\n","import React, { MouseEvent } from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IProps {\n  isSubmitting: boolean\n  isModified: boolean\n  onSave(e: MouseEvent<HTMLButtonElement>): void\n  onGoBack(): void\n}\n\nexport const ZoneFormControls: React.SFC<IProps> = ({\n  isSubmitting,\n  isModified,\n  onGoBack,\n  onSave,\n}) => (\n  <FlexRowSingle>\n    <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n      <TouchButton\n        color={Colors.greyMiddle}\n        onClick={onGoBack}\n        text={i18n.t`Back`}\n        disabled={isSubmitting}\n      />\n    </FlexColumn>\n    <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n      <CanMutate mutationName=\"updateZone\">\n        <TouchButton\n          color={Colors.green}\n          text={i18n.t`Save zone`}\n          onClick={onSave}\n          disabled={isSubmitting || !isModified}\n        />\n      </CanMutate>\n    </FlexColumn>\n  </FlexRowSingle>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GZones } from '../../../graph/types'\nimport { ZoneFragment } from '../Zones.graphql'\n\nexport const ZonesQuery = gql`\n  query GZones($branchesId: [ID!]!) {\n    zones(companyBranches: $branchesId) {\n      ...GZone\n    }\n  }\n  ${ZoneFragment}\n`\n\nexport const QueryZones = buildQuery<GZones.Query, GZones.Variables>(ZonesQuery)\n","import { observer } from 'mobx-react'\nimport React, { useContext } from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { GZone } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { QueryZones } from './ZoneListLoader.graphql'\n\ninterface IProps {}\n\nexport type TZone = GZone.Fragment\n\nconst ZoneListContext = React.createContext<Maybe<TZone[]>>(null)\n\nexport const ZoneListLoader: React.SFC<IProps> = observer(({ children }) => {\n  const { zone } = useRoot()\n  const branches = zone.branches.filter(zone.branchFilterPredicate)\n  if (branches.length === 0) {\n    return (\n      <ZoneListContext.Provider value={[]}>{children}</ZoneListContext.Provider>\n    )\n  }\n  return (\n    <QueryZones\n      variables={{ branchesId: branches.map(RM.prop('id')) }}\n      renderLoading={false}\n      render={({ zones }, { loading }) => (\n        <ZoneListContext.Provider value={loading ? null : zones}>\n          {children}\n        </ZoneListContext.Provider>\n      )}\n    />\n  )\n})\n\nexport const useZoneList = () => {\n  return useContext(ZoneListContext)\n}\n","import React, { useCallback, useRef, useState } from 'react'\nimport { Form, IFormApi } from 'react-form'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { Loading } from '../../../atoms/Loading'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { logDebug } from '../../../helpers/logger'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Spacing } from '../../../styling'\nimport { useZoneId } from '../hooks/useZoneId'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { ZoneFormContent } from '../molecules/ZoneFormContent'\nimport { ZoneFormControls } from '../molecules/ZoneFormControls'\nimport { useZoneList } from './ZoneListLoader'\n\nconst DeleteButtonContainer = styled.div`\n  width: ${Spacing.ButtonHeight};\n  margin-top: ${Spacing.Middle};\n`\n\nexport const ZoneFormPanel: React.SFC = () => {\n  const zoneId = useZoneId()\n  const zoneList = useZoneList()\n  const { zone: zoneModel } = useRoot()\n  const { routeToZoneList } = useZoneRouteControl()\n  const [isModified, setModified] = useState(false)\n  const formApiRef = useRef<IFormApi>()\n\n  const onSave = useCallback(async () => {\n    await formApiRef.current.submitForm()\n    routeToZoneList()\n  })\n\n  const onDelete = useCallback(\n    async () => {\n      if (zoneId) {\n        await zoneModel.destroyZone(zoneId)\n      }\n      routeToZoneList()\n    },\n    [zoneId],\n  )\n\n  const zone =\n    zoneId && zoneList ? zoneList.find(RM.propEq('id', zoneId)) || null : null\n\n  if (!zone) {\n    return <Loading text={i18n.t`Loading form...`} />\n  }\n\n  return (\n    <Form\n      defaultValues={zone}\n      onChange={formState => {\n        logDebug('zone form change', formState.values)\n        setModified(true)\n      }}\n      render={formApi => {\n        formApiRef.current = formApi\n        return (\n          <Card padding={0}>\n            <ZoneFormControls\n              isSubmitting={formApi.submitting}\n              isModified={isModified}\n              onSave={onSave}\n              onGoBack={routeToZoneList}\n            />\n            <ZoneFormContent />\n\n            <CanMutate mutationName=\"destroyZone\">\n              <DeleteButtonContainer>\n                <TouchButtonDelete\n                  disabled={formApi.submitting}\n                  confirmText={i18n.t`Remove zone ${zone.name}?`}\n                  onDelete={onDelete}\n                />\n              </DeleteButtonContainer>\n            </CanMutate>\n\n            {/* <GoodBye when={isModified}>\n              {({ isShow, handleOk, handleCancel }) => (\n                <ConfirmDialog\n                  isShow={isShow}\n                  confirmText={i18n.t`Form has unsaved changes. Save now?`}\n                  onConfirm={async () => {\n                    await formApi.submitForm()\n                    handleOk()\n                  }}\n                  onCancel={handleCancel}\n                />\n              )}\n            </GoodBye> */}\n          </Card>\n        )\n      }}\n      onSubmit={values => zoneModel.saveZone(zoneId!, values)}\n    />\n  )\n}\n","import React from 'react'\nimport { OverlayView } from 'react-google-maps'\nimport styled, { css } from 'styled-components'\n\nimport { GCompanyBranch } from '../graph/types'\nimport { gpsToLatLng } from '../helpers/gps'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  branch: GCompanyBranch.Fragment\n  isActive?: boolean\n}\n\nconst BranchNameStyled = styled.div`\n  ${getColors} font-size: 1.3rem;\n  white-space: nowrap;\n  padding: 0.2rem 0.5rem;\n`\n\nexport const MapCompanyBranchMarker: React.SFC<IProps> = ({\n  branch,\n  isActive = true,\n}) => (\n  <OverlayView\n    getPixelPositionOffset={(width, height) => ({\n      x: -(width / 2),\n      y: -(height / 2),\n    })}\n    mapPaneName={OverlayView.MARKER_LAYER}\n    position={gpsToLatLng(branch.gps)}\n  >\n    <BranchNameStyled isActive={isActive}>{branch.name}</BranchNameStyled>\n  </OverlayView>\n)\n\nfunction getColors({ isActive }: { isActive: boolean }) {\n  return css`\n    background-color: ${isActive ? Colors.green : Colors.greyLight};\n    color: ${isActive ? Colors.white : Colors.greyDark};\n  `\n}\n","import React from 'react'\nimport { Polygon } from 'react-google-maps'\n\nimport { gpsToLatLng, latLngToGps } from '../../../helpers/gps'\n\ninterface IZoneMapAreaProps {\n  points: GeoPoint[]\n  color: string\n  edit: boolean\n  priority: number\n  onChange?(points: GeoPoint[]): void\n  onFocus?(): void\n}\n\nexport class ZoneMapArea extends React.PureComponent<IZoneMapAreaProps> {\n  polygon: Polygon | null = null\n  listeners: google.maps.MapsEventListener[] = []\n  onAreaChange = () => {\n    const { onChange } = this.props\n    if (onChange && this.polygon) {\n      const path = this.polygon.getPath()\n      onChange(path.getArray().map(latLngToGps))\n    }\n  }\n  onAreaFocus = (e: google.maps.PolyMouseEvent) => {\n    if (this.props.onFocus) {\n      e.stop()\n      this.props.onFocus()\n    }\n  }\n  onMount = (ref: Polygon | null) => {\n    this.polygon = ref\n  }\n  componentDidMount() {\n    if (this.polygon && this.props.onChange) {\n      const path = this.polygon.getPath()\n      this.listeners = [\n        path.addListener('set_at', this.onAreaChange),\n        path.addListener('insert_at', this.onAreaChange),\n        path.addListener('remove_at', this.onAreaChange),\n      ]\n    }\n  }\n  componentWillUnmount() {\n    this.listeners.forEach(lis => lis.remove())\n    this.listeners.length = 0\n  }\n  render() {\n    const { points, color, edit, priority } = this.props\n    return (\n      <Polygon\n        defaultPath={points.map(gpsToLatLng)}\n        options={{\n          fillColor: color,\n          fillOpacity: edit ? 0.6 : 0.3,\n          strokeWeight: edit ? 2 : 0,\n          zIndex: edit ? 10000 : 5000 - priority,\n        }}\n        editable={edit}\n        draggable={edit}\n        ref={this.onMount}\n        onDragEnd={this.onAreaChange}\n        onDblClick={this.onAreaFocus}\n      />\n    )\n  }\n}\n","import { useRoot } from '../../../atoms/RootProvider'\n\nexport function useZoneModel() {\n  const { zone: zoneModel } = useRoot()\n  return zoneModel\n}\n","import React, { useCallback, useMemo } from 'react'\n\nimport { BaseMap } from '../../../atoms/BaseMap'\nimport { GCompanyBranch } from '../../../graph/types'\nimport { logDebug } from '../../../helpers/logger'\nimport { useEffectOnce } from '../../../hooks/useEffectOnce'\nimport { MapCompanyBranchMarker } from '../../../molecules/MapCompanyBranchMarker'\nimport { Colors } from '../../../styling'\nimport { ZoneMapArea } from '../atoms/ZoneMapArea'\nimport { useZoneId } from '../hooks/useZoneId'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { TZone, useZoneList } from '../organisms/ZoneListLoader'\n\nexport const ZoneMapControl: React.SFC = () => {\n  const zoneModel = useZoneModel()\n  const editZoneId = useZoneId()\n  const zoneList = useZoneList()\n  const { routeToZoneEdit } = useZoneRouteControl()\n\n  useEffectOnce(() => {\n    logDebug('MOUNT')\n    return () => logDebug('UNMOUNT')\n  })\n\n  const branches = useMemo(\n    () => zoneModel.branches.filter(zoneModel.branchFilterPredicate),\n    [zoneModel.branches],\n  )\n\n  const isActive = (companyBranchId: ID) =>\n    !zoneModel.hasBranchFilter || companyBranchId === zoneModel.branchFilterId\n\n  const renderZoneArea = useCallback((zone: TZone) => (\n    <ZoneMapArea\n      key={`zone${zone.id}`}\n      points={zone.geoPolygon}\n      priority={zone.priority}\n      color={\n        isActive(zone.companyBranch.id) && zone.enabled\n          ? zone.zoneColor.color\n          : Colors.greyMiddle\n      }\n      edit={zone.id === editZoneId}\n      onChange={zoneModel.map.updateZonePoints}\n      onFocus={() => {\n        if (isActive(zone.companyBranch.id)) {\n          routeToZoneEdit(zone.id)\n        }\n      }}\n    />\n  ))\n\n  const renderBranchLabel = useCallback((branch: GCompanyBranch.Fragment) => (\n    <MapCompanyBranchMarker\n      key={`branch${branch.id}`}\n      branch={branch}\n      isActive={isActive(branch.id)}\n    />\n  ))\n\n  return (\n    <BaseMap\n      model={zoneModel.map}\n      render={() => (\n        <>\n          {zoneList && zoneList.map(renderZoneArea)}\n          {branches && branches.map(renderBranchLabel)}\n        </>\n      )}\n    />\n  )\n}\n","import { observer } from 'mobx-react'\nimport React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\n\nexport const CreateZoneButton: React.SFC = observer(() => {\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n  return (\n    <TouchButton\n      text={\n        zoneModel.hasBranchFilter\n          ? i18n.t`Create zone for branch`\n          : i18n.t`Select branch to create zone`\n      }\n      onClick={() => zoneModel.createZone(routeToZoneEdit)}\n      disabled={!zoneModel.hasBranchFilter}\n      color={Colors.turquoise}\n      textNextToIcon={true}\n      height={Spacing.ButtonHeight}\n      iconName=\"add_circle\"\n    />\n  )\n})\n","import React from 'react'\nimport { SortableElement } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Card } from '../../../atoms/Card'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { GCompanyBranch, GZone } from '../../../graph/types'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Spacing } from '../../../styling'\n\ninterface IZoneListCardProps {\n  zone: GZone.Fragment\n  branch: GCompanyBranch.Fragment\n  onEdit(): void\n}\n\nconst ZoneNameStyled = styled.div`\n  font-size: 1.125rem;\n  margin-top: 0.2rem;\n`\n\nconst ZoneDescriptionStyled = styled.div`\n  font-size: 0.875rem;\n`\nconst ZoneFlexRowStyled = styled(FlexRowSingle)`\n  height: ${Spacing.ButtonHeight};\n`\n\nexport const ZoneListCard = SortableElement<IZoneListCardProps>(\n  ({ zone, branch, onEdit }) => (\n    <Card\n      key={zone.id}\n      padding={0}\n      color={zone.zoneColor.color}\n      onClick={onEdit}\n    >\n      <ZoneFlexRowStyled>\n        <FlexColumn fixedWidth={true} padding=\"0 0.5rem 0 0\">\n          <TouchButton\n            width={Spacing.ButtonHeight}\n            height={Spacing.ButtonHeight}\n            iconName=\"mode_edit\"\n          />\n        </FlexColumn>\n        <FlexColumn widthGrowIndex={1}>\n          <ZoneNameStyled>\n            {zone.name}\n            {` [P${zone.priority}]`}\n          </ZoneNameStyled>\n          <ZoneDescriptionStyled>{branch.name}</ZoneDescriptionStyled>\n        </FlexColumn>\n        <FlexColumn padding=\"0\">\n          <DragHandle />\n        </FlexColumn>\n      </ZoneFlexRowStyled>\n    </Card>\n  ),\n)\n","import * as R from 'ramda'\nimport React, { Fragment } from 'react'\nimport { SortableContainer, SortEndHandler } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { GCompanyBranch, GZone } from '../../../graph/types'\nimport { TZoneModel } from '../../../segments/zones/models/ZoneModel'\nimport { ZoneListCard } from '../atoms/ZoneListCard'\n\ninterface IZoneListProps {\n  branches: GCompanyBranch.Fragment[]\n  zones: GZone.Fragment[]\n  zoneModel: TZoneModel\n  onZoneEdit(zoneID: ID): void\n}\n\nconst ZoneListContainerStyled = SortableContainer(styled.div`\n  margin-top: 0.5rem;\n  cursor: arrow;\n`)\n\nconst sortZones = R.sortWith<GZone.Fragment>([\n  R.ascend(R.path(['companyBranch', 'name'])),\n  R.descend(R.prop('priority')),\n])\n\nconst groupByBranch = R.groupBy((zone: GZone.Fragment) => zone.companyBranch.id)\n\nexport const ZoneList: React.SFC<IZoneListProps> = ({\n  branches,\n  zones,\n  zoneModel,\n  onZoneEdit,\n}) => {\n  const renderZone = (zone: GZone.Fragment, idx: number) => (\n    <ZoneListCard\n      key={zone.id}\n      zone={zone}\n      branch={branches.find(R.propEq('id', zone.companyBranch.id))!}\n      index={idx}\n      collection={zone.companyBranch.id}\n      onEdit={() => onZoneEdit(zone.id)}\n    />\n  )\n  const renderBranch = (\n    branch: GCompanyBranch.Fragment,\n    branchZones: GZone.Fragment[],\n  ) => (\n    <Fragment key={branch.id}>\n      <CardListTitle>{branch.name}</CardListTitle>\n      {branchZones.map(renderZone)}\n    </Fragment>\n  )\n\n  let output\n  let onSortEnd: SortEndHandler\n\n  if (branches.length === 1) {\n    const sorted = sortZones(zones)\n    output = sorted.map(renderZone)\n    onSortEnd = ({ oldIndex, newIndex }) => {\n      const zone = sorted[oldIndex]\n      zoneModel.changeZonePriority(zone, oldIndex, newIndex)\n    }\n  } else {\n    const grouped = R.mapObjIndexed(sortZones, groupByBranch(zones))\n    output = branches.map(branch => {\n      const branchZones = grouped[branch.id]\n      return branchZones ? renderBranch(branch, branchZones) : null\n    })\n    onSortEnd = ({ oldIndex, newIndex, collection }) => {\n      const group = grouped[collection]\n      const zone = group[oldIndex]\n      zoneModel.changeZonePriority(zone, oldIndex, newIndex)\n    }\n  }\n\n  return (\n    <ZoneListContainerStyled\n      useDragHandle={true}\n      lockAxis=\"y\"\n      onSortEnd={onSortEnd}\n    >\n      {output}\n    </ZoneListContainerStyled>\n  )\n}\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport { BulletList } from 'react-content-loader'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { ZoneList } from '../molecules/ZoneList'\nimport { useZoneList } from './ZoneListLoader'\n\nexport const ZoneListControl: React.SFC = () => {\n  const zoneList = useZoneList()\n  if (zoneList === null) {\n    return <BulletList primaryOpacity={0.2} secondaryOpacity={0.2} />\n  }\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n  if (zoneModel.brand === null) {\n    return (\n      <CardListTitle>\n        <Trans>Select brand to see its zones</Trans>\n      </CardListTitle>\n    )\n  }\n  return (\n    <ZoneList\n      zoneModel={zoneModel}\n      zones={zoneList.filter(zoneModel.zoneFilterPredicate)}\n      branches={zoneModel.root.user.filterBranches(\n        zoneModel.branchFilterPredicate,\n      )}\n      onZoneEdit={routeToZoneEdit}\n    />\n  )\n}\n","import React from 'react'\n\nimport { GCompanyBranch } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport { CompanyBranchDropdown } from '../../../molecules/CompanyBranchDropdown'\n\ntype TBranch = GCompanyBranch.Fragment\n\ninterface IProps {\n  branches: TBranch[]\n  selectedBranch: Maybe<TBranch>\n  onSelection(branch: Maybe<TBranch>): void\n  autoFocus: boolean\n}\n\nexport const ZoneFilterBranch: React.SFC<IProps> = ({\n  branches,\n  selectedBranch,\n  onSelection,\n  autoFocus,\n}) => (\n  <CompanyBranchDropdown\n    placeholder={i18n.t`Select branch`}\n    branches={branches}\n    selectedBranch={selectedBranch}\n    onSingleSelection={onSelection}\n    formatOptionLabel={RM.prop('name')}\n    isClearable={true}\n    autoFocus={autoFocus}\n  />\n)\n","import React from 'react'\n\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { GCompanyBranch } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\n\ntype TBrand = GCompanyBranch.Brand\n\ninterface IProps {\n  brands: TBrand[]\n  selectedBrand: Maybe<TBrand>\n  onSelection(brand: Maybe<TBrand>): void\n}\n\nexport const ZoneFilterBrand: React.SFC<IProps> = ({\n  brands,\n  selectedBrand,\n  onSelection,\n}) => (\n  <SelectControl<TBrand>\n    placeholder={i18n.t`Select brand`}\n    options={brands}\n    value={selectedBrand}\n    formatOptionLabel={RM.prop('name')}\n    getOptionValue={RM.prop('id')}\n    getOptionLabel={RM.prop('name')}\n    isClearable={true}\n    isSearchable={true}\n    onChange={value => onSelection(value as Maybe<TBrand>)}\n    autoFocus={true}\n  />\n)\n","import React from 'react'\n\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { GCompanyBranch } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { ZoneFilterBranch } from '../molecules/ZoneFIlterBranch'\nimport { ZoneFilterBrand } from '../molecules/ZoneFilterBrand'\n\nexport const ZoneFilter: React.SFC = () => (\n  <WithRoot\n    render={({ user, zone }) => {\n      const branches = user.branches!\n      if (branches.length === 0) {\n        return null\n      }\n\n      if (branches.length === 1) {\n        zone.setBranchFilter(RM.head(branches)!)\n        return null\n      }\n\n      const brands = user.brands!\n\n      const getBrandBranches = (brand: Maybe<GCompanyBranch.Brand>) =>\n        brand === null\n          ? []\n          : branches.filter(RM.pathEq(['brand', 'id'], brand.id))\n\n      const singleBrand = brands.length === 1 ? RM.head(brands)! : null\n      if (singleBrand) {\n        zone.setBrandFilter(singleBrand, getBrandBranches(zone.brand))\n      }\n\n      return (\n        <>\n          {!singleBrand && (\n            <ZoneFilterBrand\n              brands={brands}\n              selectedBrand={zone.brand}\n              onSelection={brand => {\n                if (brand === null) {\n                  zone.clearBrandFilter()\n                } else {\n                  zone.setBrandFilter(brand, getBrandBranches(brand))\n                }\n              }}\n            />\n          )}\n          {!singleBrand && <VerticalGap />}\n          <ZoneFilterBranch\n            branches={getBrandBranches(zone.brand)}\n            selectedBranch={zone.branch}\n            autoFocus={Boolean(singleBrand)}\n            onSelection={branch => {\n              if (branch === null) {\n                zone.clearBranchFilter()\n              } else {\n                zone.setBranchFilter(branch)\n              }\n            }}\n          />\n        </>\n      )\n    }}\n  />\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { ScrollArea } from '../../../atoms/ScrollArea'\nimport { CreateZoneButton } from '../molecules/CreateZoneButton'\nimport { ZoneListControl } from '../organisms/ZoneListControl'\nimport { ZoneFilter } from './ZoneFilter'\n\nconst ZoneMenuContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst FixedHeaderContainer = styled.div`\n  flex: 0 0 auto;\n`\nconst ScrollAreaContainer = styled.div`\n  flex: 1 1 0;\n  min-height: 0;\n`\nexport const ZoneMenuPanel: React.SFC = () => (\n  <ZoneMenuContainer>\n    <FixedHeaderContainer>\n      <Card>\n        <ZoneFilter />\n      </Card>\n      <CanMutate mutationName=\"createZone\">\n        <CreateZoneButton />\n      </CanMutate>\n    </FixedHeaderContainer>\n\n    <ScrollAreaContainer>\n      <ScrollArea>\n        <ZoneListControl />\n      </ScrollArea>\n    </ScrollAreaContainer>\n  </ZoneMenuContainer>\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { PageLayout } from '../../../molecules/PageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { ZoneFormPanel } from '../organisms/ZoneFormPanel'\nimport { ZoneListLoader } from '../organisms/ZoneListLoader'\nimport { ZoneMapControl } from '../organisms/ZoneMapControl'\nimport { ZoneMenuPanel } from '../organisms/ZoneMenuPanel'\n\ninterface IProps {\n  isEditing: boolean\n}\n\nexport const ZonePageLayout: React.SFC<IProps> = ({ isEditing }) => (\n  <ZoneListLoader>\n    <PageLayout pageTitle={i18n.t`Delivery zones`} />\n    <PageLayoutFullHeightItem\n      widthInColumns={6}\n      column={10}\n      withScrollArea={isEditing}\n    >\n      {isEditing ? <ZoneFormPanel /> : <ZoneMenuPanel />}\n    </PageLayoutFullHeightItem>\n    <PageLayoutFullHeightItem widthInColumns={10}>\n      <ZoneMapControl />\n    </PageLayoutFullHeightItem>\n  </ZoneListLoader>\n)\n","import React from 'react'\nimport { Route, RouteComponentProps, Switch } from 'react-router'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { SecureRoute } from '../../../routes/SecureRoute'\nimport { ZonePageLayout } from '../../../segments/zones/pages/ZonePageLayout'\n\ninterface IZoneMenuRoutesProps extends RouteComponentProps<{}> {}\n\nexport const ZoneMenuRoutes: React.SFC<IZoneMenuRoutesProps> = () => {\n  const { zone } = useRoot()\n  return (\n    <Switch>\n      <SecureRoute\n        path={zone.getRouteToZone(':zoneId?')}\n        render={({ match }) => (\n          <ZonePageLayout isEditing={Boolean(match.params.zoneId)} />\n        )}\n      />\n      <Route component={NotFoundPage} />\n    </Switch>\n  )\n}\n\nexport default ZoneMenuRoutes\n"],"sourceRoot":""}