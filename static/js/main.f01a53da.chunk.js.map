{"version":3,"sources":["helpers/offline.ts","molecules/TouchButton.tsx","atoms/Sizer.tsx","segments/menu/models/MenuBaseModel.ts","helpers/formats.ts","atoms/PageTitle.tsx","atoms/Card.tsx","molecules/FullPageLayout.tsx","graph/buildQuery.tsx","pages/NotFoundPage.tsx","hooks/useSnackBar.ts","styling.ts","routes/RedirectToLogin.tsx","helpers/ramda.ts","models/BaseModel.ts","graph/generated.ts","atoms/SizerButton.tsx","atoms/SoundControl.tsx","organisms/LogoutWidget.tsx","molecules/HomeButton.tsx","molecules/PageLayout.tsx","helpers/logger.ts","atoms/Loading.tsx","atoms/GridLayout.tsx","segments/menu/organisms/RecipeForm.graphql.ts","segments/menu/models/MenuRecipeModel.graphql.ts","segments/menu/models/MenuRecipeModel.ts","segments/businesshours/models/BusinessHoursModel.graphql.ts","segments/businesshours/models/BusinessHoursModel.ts","segments/menu/models/MenuCategoryModel.graphql.ts","segments/menu/models/MenuCategoryModel.ts","locale/moment.ts","i18n.tsx","locale/numeral.ts","segments/businesshours/organisms/SpecificBusinessHours.graphql.ts","segments/zones/Zones.graphql.ts","atoms/MarginBox.tsx","atoms/IntervalRender.tsx","atoms/SoundPlayInterval.tsx","assets/connectionWarning.mp3","segments/order/models/OrderListModel.ts","config.ts","context/RootContext.ts","graph/createClient.ts","graph/AuthLink.ts","helpers/persistModel.ts","segments/login/models/PasswordLoginModel.ts","segments/login/models/LoginProviderModel.ts","models/AuthModel.graphql.ts","models/AuthModel.ts","models/ConfigModel.ts","models/UserModel.ts","helpers/faker.ts","segments/createorder/models/CreateOrderModel.ts","models/MapModel.ts","segments/order/models/OrderMapModel.graphql.ts","segments/order/models/OrderMapModel.ts","segments/order/models/OrderModel.ts","segments/overview/models/StatisticsModel.ts","segments/settings/models/SettingsBaseModel.ts","segments/menu/models/MenuStockModel.graphql.ts","segments/menu/models/MenuStockModel.ts","segments/menu/models/MenuModel.ts","segments/settings/models/SettingsModel.ts","segments/zones/models/ZoneMapModel.ts","segments/zones/models/ZoneModel.graphql.ts","segments/zones/models/ZoneModel.ts","models/RootModel.ts","atoms/RootProvider.tsx","enableDebug.ts","../node_modules/moment/locale lazy /^/.*$/ groupOptions: {} namespace object","../node_modules/numeral/locales lazy /^/.*$/ groupOptions: {} namespace object","../ /^/.*/messages/.po$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","helpers/gps.ts","atoms/ConnectionWarning.tsx","atoms/SnackProvider.tsx","atoms/UpdateHandler.tsx","pages/ErrorPage.tsx","pages/ServiceUnreachablePage.tsx","organisms/DefaultErrorHandler.tsx","routes/LogRoute.tsx","routes/RedirectAfterLogin.tsx","routes/RedirectAfterLogout.tsx","routes/Routing.tsx","segments/login/organisms/UserBootstrap.tsx","App.tsx","atoms/Router.tsx","atoms/ThemeProvider.tsx","index.tsx","graph/errorHandler.ts","routes/SecureRoute.tsx","atoms/Pacman.tsx","atoms/WithRoot.tsx","routes/LazyRoute.tsx","atoms/Icon.tsx"],"names":["__webpack_require__","d","__webpack_exports__","isNetworkOnline","isNetworkOffline","whenGoingOnline","isOnline","observable","box","navigator","onLine","window","addEventListener","set","get","cb","observe","change","oldValue","newValue","applyAlpha","alphaValue","props","applyAlphaToColor","color","TouchButtonStyled","styled","button","withConfig","displayName","componentId","Spacing","ButtonHeight","DefaultSizeUnit","_ref","_ref$width","width","_ref2","_ref2$height","height","Radiuses","Button","ButtonLabelStyled","div","ButtonLabelNextToIconStyled","TouchButton","React","forwardRef","_ref3","forwardedRef","children","iconName","_ref3$iconColor","iconColor","Colors","white","_ref3$iconSize","iconSize","_ref3$color","greyMiddle","_ref3$textNextToIcon","textNextToIcon","badge","text","Object","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","assign","ref","_atoms_Icon__WEBPACK_IMPORTED_MODULE_3__","fontSize","SizerContainer","_ref$widthUnit","widthUnit","undefined","concat","_ref2$heightUnit","heightUnit","Sizer","_ref3$widthUnit","_ref3$heightUnit","margin","className","wrap","_MarginBox__WEBPACK_IMPORTED_MODULE_4__","MenuBaseModel","mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__","BaseModel","named","volatile","filterInput","actions","self","setFilterInput","input","views","branchId","getParent","settings","fullDateFormat","formatDateISO","formatTime","formatDateTime","priceFormat","formatPrice","formatTimeWithoutTodayDate","formatAddress","formatFullName","date_fns__WEBPACK_IMPORTED_MODULE_0__","date_fns_fp__WEBPACK_IMPORTED_MODULE_1__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2___default","n","numeral__WEBPACK_IMPORTED_MODULE_3__","numeral__WEBPACK_IMPORTED_MODULE_3___default","currentLocale","csLocale","formatLocale","formatWithOptions","locale","format","price","numeral","time","isSameDay","Date","address","street","houseNumber","city","state","user","lastName","firstName","trim","TitleStyled","h1","greyLight","observableTitles","array","autorun","lastTitle","Array","from","pop","document","title","appConfig","pageTitleSuffix","PageTitle","_React$Component","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","apply","arguments","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","key","value","push","prevProps","idx","findIndex","RM","equals","splice","remove","Component","Route","react__WEBPACK_IMPORTED_MODULE_8___default","react_router_dom__WEBPACK_IMPORTED_MODULE_9__","render","Display","mobx_react_lite__WEBPACK_IMPORTED_MODULE_7__","join","Card","color__WEBPACK_IMPORTED_MODULE_0__","color__WEBPACK_IMPORTED_MODULE_0___default","styled_components__WEBPACK_IMPORTED_MODULE_1__","_styling__WEBPACK_IMPORTED_MODULE_2__","Color","alpha","lighten","string","textColor","black","_ref$padding","padding","_ref3$stretchToParent","stretchToParent","css","getLayout","i","x","y","w","h","FullPageLayout","_molecules_PageLayout__WEBPACK_IMPORTED_MODULE_2__","layouts","buildQuery","query","cleanup","useRef","executeCleanup","useCallback","current","forEach","fn","length","useEffect","renderFragment","_props$renderLoading","renderLoading","_props$refetchOnConne","renderError","refetchOnConnectionLost","rest","react_apollo__WEBPACK_IMPORTED_MODULE_2__","result","loading","_atoms_Loading__WEBPACK_IMPORTED_MODULE_3__","error","refetch","data","Fragment","NotFoundPage","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","_atoms_PageTitle__WEBPACK_IMPORTED_MODULE_1__","_i18n__WEBPACK_IMPORTED_MODULE_2__","_","useSnackBar","EVariant","notistack_build_SnackbarContext__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","successVariant","variant","success","errorVariant","warningVariant","warning","infoVariant","info","enqueueSnackbar","useContext","SnackbarContextNext","enqueueSuccess","errorMessage","enqueueError","enqueueWarning","enqueueInfo","FontSizes","_helpers_ramda__WEBPACK_IMPORTED_MODULE_1__","curry","MarginAroundFormComponents","Small","Middle","LayoutGridCellMargin","DefaultInputWidth","ButtonColumnWidthPx","InfoMessageFontSize","CompactCard","CompactCardBig","RedirectToLogin","debug__WEBPACK_IMPORTED_MODULE_0__","debug__WEBPACK_IMPORTED_MODULE_0___default","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","log","debug","_ref$useOrigin","useOrigin","path","match","location","to","pathname","origin","ramda__WEBPACK_IMPORTED_MODULE_0__","mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__","verror__WEBPACK_IMPORTED_MODULE_2__","types","model","getPath","client","getEnv","apolloClient","VError","root","getRoot","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","WeekDayEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","MobilePlatformEnum","WareUnitEnum","AvailabilityTypeEnum","AllergenEnum","WarePriceTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","OrderBillingTypeEnum","DeliveryTypeEnum","OrderRecipeStateEnum","LanguageEnum","OrderOnlineStateEnum","OrderOriginEnum","PaymentGateEnum","PaymentTypeEnum","OrderStateEnum","ZoneTypeEnum","ShiftUserStateEnum","WareCategoryTypeEnum","SettingTypeEnum","WareRequirementEnum","SubscriptionActionType","GSpecificBusinessHourFragmentDoc","gql","_templateObject","FPriceFragmentDoc","_templateObject2","GMenuRecipeFragmentDoc","_templateObject3","FMenuAllergenFragmentDoc","_templateObject4","FMenuWareUnitFragmentDoc","_templateObject5","GMenuStockItemFragmentDoc","_templateObject6","GMenuRecipePriceFragmentDoc","_templateObject7","GMenuAssocRecipeFragmentDoc","_templateObject8","FAddressFragmentDoc","_templateObject9","FEmailFragmentDoc","_templateObject10","FPhoneFragmentDoc","_templateObject11","FCustomerFragmentDoc","_templateObject12","GOrderListTickerFragmentDoc","_templateObject13","GOrderDetailWareFragmentDoc","_templateObject14","FGeoPointFragmentDoc","_templateObject15","GOrderMarkerFragmentDoc","_templateObject16","FCompanyBranchFragmentDoc","_templateObject17","FOrderStateCategoryFragmentDoc","_templateObject18","FPriceWithCurrencyFragmentDoc","_templateObject19","FCreateOrderItemFragmentDoc","_templateObject20","FCreateOrderFragmentDoc","_templateObject21","FCreateOrderRecipeSidedishesFragmentDoc","_templateObject22","FOrderMenuRecipeFragmentDoc","_templateObject23","FOrderMenuCategoryFragmentDoc","_templateObject24","FKitchenOrderRecipeFragmentDoc","_templateObject25","FKitchenOrderFragmentDoc","_templateObject26","FMenuRecipeFragmentDoc","_templateObject27","FMenuCategoryFragmentDoc","_templateObject28","FMenuCategoryListItemFragmentDoc","_templateObject29","FUserNameFragmentDoc","_templateObject30","_templateObject31","FDriverFragmentDoc","_templateObject32","FOrderDriverFragmentDoc","_templateObject33","FOrderMapDriverFragmentDoc","_templateObject34","FOrderMapDeviceFragmentDoc","_templateObject35","FOrderMapDeliveryFragmentDoc","_templateObject36","FOrderTimingFragmentDoc","_templateObject37","FZonePriceRangeFragmentDoc","_templateObject38","FZoneFragmentDoc","_templateObject39","_templateObject40","_templateObject41","_templateObject42","_templateObject43","_templateObject44","_templateObject45","_templateObject46","_templateObject47","_templateObject48","_templateObject49","_templateObject50","_templateObject51","_templateObject52","_templateObject53","_templateObject54","_templateObject55","_templateObject56","_templateObject57","_templateObject58","_templateObject59","_templateObject60","_templateObject61","_templateObject62","_templateObject63","_templateObject64","_templateObject65","_templateObject66","_templateObject67","_templateObject68","_templateObject69","_templateObject70","_templateObject71","_templateObject72","_templateObject73","_templateObject74","_templateObject75","_templateObject76","_templateObject77","QAddressSuggestDocument","_templateObject78","useQAddressSuggest","variables","baseOptions","Hooks","MOrderStateDocument","_templateObject79","useMOrderState","QLogoutWidgetDocument","_templateObject80","useQLogoutWidget","MAddOrderPromoDocument","_templateObject81","useMAddOrderPromo","MCancelOrderDocument","_templateObject82","useMCancelOrder","MCreateOrderAcceptDocument","_templateObject83","useMCreateOrderAccept","MCreateOrderAddRecipeDocument","_templateObject84","useMCreateOrderAddRecipe","MCreateOrderNewDocument","_templateObject85","useMCreateOrderNew","MCreateOrderRemoveItemDocument","_templateObject86","useMCreateOrderRemoveItem","MCreateOrderUpdateDocument","_templateObject87","useMCreateOrderUpdate","MCreateOrderUpdateItemDocument","_templateObject88","useMCreateOrderUpdateItem","MRemoveOrderPromoDocument","_templateObject89","useMRemoveOrderPromo","QCreateOrderItemDocument","_templateObject90","QCreateOrderRecipeDocument","_templateObject91","QOrderCartDocument","_templateObject92","useQOrderCart","QOrderFormDeliverAtDefaultsDocument","_templateObject93","useQOrderFormDeliverAtDefaults","QOrderMenuDocument","_templateObject94","useQOrderMenu","QValidateLocationDocument","_templateObject95","MKitchenRecipeStateDocument","_templateObject96","useMKitchenRecipeState","QKitchenOrderListDocument","_templateObject97","useQKitchenOrderList","SKitchenOrderListDocument","_templateObject98","useSKitchenOrderList","QUserBootstrapDocument","_templateObject99","useQUserBootstrap","_templateObject100","SOrderCallDocument","_templateObject101","useSOrderCall","_templateObject102","MMenuCategoryVisibilityDocument","_templateObject103","useMMenuCategoryVisibility","MMenuStockQuantityDocument","_templateObject104","useMMenuStockQuantity","QMenuCategoryDocument","_templateObject105","QMenuCategoryFilterDocument","_templateObject106","useQMenuCategoryFilter","QMenuCategoryListDocument","_templateObject107","useQMenuCategoryList","QMenuGuideDownloadDocument","_templateObject108","useQMenuGuideDownload","QMenuRecipeListDocument","_templateObject109","useQMenuRecipeList","QMenuStockDepositDocument","_templateObject110","useQMenuStockDeposit","QMenuStockListDocument","_templateObject111","useQMenuStockList","QStockRecipesDocument","_templateObject112","useQStockRecipes","MBranchDefaultTimeDocument","_templateObject113","useMBranchDefaultTime","MOrderChangeToPickupDocument","_templateObject114","useMOrderChangeToPickup","MOrderTimeNotificationDocument","_templateObject115","useMOrderTimeNotification","MRemoveOrderDriverDocument","_templateObject116","useMRemoveOrderDriver","MSelectOrderDriverDocument","_templateObject117","useMSelectOrderDriver","QBranchDefeaultTimesDocument","_templateObject118","useQBranchDefeaultTimes","QOrderDriversDocument","_templateObject119","useQOrderDrivers","QOrderMapDeliveriesDocument","_templateObject120","useQOrderMapDeliveries","QOrderStateDocument","_templateObject121","useQOrderState","SOrderMapDeliveriesDocument","_templateObject122","useSOrderMapDeliveries","MFinancialReportCreateDocument","_templateObject123","useMFinancialReportCreate","QAllDriversDocument","_templateObject124","useQAllDrivers","QClosureHistoryDocument","_templateObject125","QClosureReportDocument","_templateObject126","useQClosureReport","QStatsDailyDocument","_templateObject127","useQStatsDaily","QStatsOrdersDocument","_templateObject128","useQStatsOrders","QStatsOrdersCountsDocument","_templateObject129","useQStatsOrdersCounts","QStatsOrdersListDocument","_templateObject130","MUserMenuLanguageDocument","_templateObject131","useMUserMenuLanguage","QUserMenuLanguagesDocument","_templateObject132","useQUserMenuLanguages","MZoneUpdateDocument","_templateObject133","useMZoneUpdate","SizerButton","_Sizer__WEBPACK_IMPORTED_MODULE_3__","SoundControl","_getPrototypeOf2","_this","classCallCheck","_len","args","_key","possibleConstructorReturn","getPrototypeOf","call","playPreview","inherits","createClass","react_default","WithRoot","soundEnabled","green","red","onClick","controlSound","LogoutWidgetStyled","LoggedUserNameStyled","span","IconStyled","LogoutWidget","observer","auth","useRoot","_useQLogoutWidget","id","userId","i18n","data-testid","react_router_dom","Icon","HomeButtonStyled","HomeButton","_ref$color","_ref$iconColor","_ref$goBack","goBack","backRoute","objectWithoutProperties","react_router","history","TopLeftButtonContainer","getPosition","scrollPageTitle","TopRightContainer","PageTitleContainer","PageHeaderItem","PageLayout","_ref$pageTitle","pageTitle","_ref$layouts","_ref$hideLogoutWidget","hideLogoutWidget","_ref$showSoundControl","showSoundControl","_ref$useBackButton","useBackButton","_ref$scrollPageTitle","topContent","SoundControl_SoundControl","SecureRoute","component","redirect","GridLayout","toConsumableArray","HomeButton_HomeButton","logMain","logDebug","logError","logAuth","logRouting","logPersistence","logGraph","logForm","logLang","logUpdate","useColors","console","Loading","_ref$text","react_grid_layout__WEBPACK_IMPORTED_MODULE_1__","react_grid_layout__WEBPACK_IMPORTED_MODULE_1___default","ReactGridLayout","WidthProvider","RGL","layout","cols","rowHeight","autoSize","isDraggable","isResizable","compactType","measureBeforeMount","MenuRecipePriceFragment","MenuAssocRecipeFragment","MenuRecipeFormQuery","MenuRecipeFormAssocQuery","MenuRecipeDefaults","QueryMenuRecipeFormAssoc","MenuRecipeFragment","MenuRecipeVisibilityMutation","MenuRecipeCreateMutation","MenuRecipeUpdateMutation","MenuRecipeDeleteMutation","MenuRecipeModel","categoryFilterId","changeVisibility","recipeId","visible","mutate","mutation","optimisticResponse","updateRecipe","__typename","setCategoryFilter","categoryId","createRecipe","formValues","recipeType","recipe","objectSpread","companyBranch","wareCategoryType","getRecipeVariables","getQueryErrors","deleteRecipe","_deleteRecipe","asyncToGenerator","regenerator_default","mark","_callee","_context","prev","next","stop","_x","queryDefaults","_queryDefaults","_callee2","_data$companyBranch","vats","code","_context2","sent","currency","abrupt","reduce","vatId","priceType","enum","currencyCode","nameLabel","internalNote","descriptionLabel","enabled","prices","keys","map","warePriceType","vat","sideDishCategories","sideDishes","prop","wareCategories","categories","associatedRecipes","pick","ingredients","stockItem","quantity","Number","parseFloat","replace","getRecipeRoute","ESpecificHourMode","CreateSpecificBusinessHour","SpecificBusinessHourFragment","DeleteSpecificBusinessHour","BusinessHoursModel","byIdPredicate","complement","propEq","specificMode","optional","enumeration","TIMESPAN","changeSpecificMode","mode","submitSpecificHour","values","specificDate","isoDate","date","closed","FULLDAY","openAt","closeAt","closedNote","note","updateQueries","GSpecificBusinessHours","mutationResult","businessHours","deleteSpecificHour","businessHourId","filter","SortMenuCategoryMutation","MenuCategoryCreateMutation","MenuCategoryUpdateMutation","MenuCategoryDeleteMutation","MenuCategoryModel","sortCategory","_sortCategory","offset","Boolean","_x2","createCategory","categoryType","getFormVariables","updateCategory","_updateCategory","_x3","_x4","deleteCategory","_deleteCategory","_callee3","_context3","_x5","_x6","internalNoteLabel","pictogram","recipes","minCount","maxCount","getCategoryRoute","changeMomentLocale","_changeMomentLocale","lang","moment","updateLocale","setupI18n","I18nManager","_React$useState","useState","forceUpdate","slicedToArray","useReaction","language","_args","detectLanguage","setupLanguage","node_modules_react_default","react","Children","only","languages","detector","getLocales","find","loc","supportedLanguages","includes","fallbackLanguage","_setupLanguage","Promise","all","loadCatalog","changeNumeralLocale","activate","catalog","load","defineProperty","_changeNumeralLocale","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","numberRx","validateNumber","test","QuerySpecificBusinessHours","ZoneLocationQuery","ZoneColorsQuery","MarginBox","styled_components__WEBPACK_IMPORTED_MODULE_0__","IntervalRender","_Component","isActive","nextTime","getNextTime","timer","executeTimer","clearTimeout","timeMs","differenceInMilliseconds","setTimeout","setState","deactivate","addSeconds","intervalSec","nextLoop","SoundPlayInterval_SoundPlayInterval","SoundPlayInterval","soundUrl","_ref$shouldPlay","shouldPlay","_ref$skipEnableChecks","skipEnableChecks","config","IntervalRender_IntervalRender","lib_default","url","playStatus","onFinishedPlaying","loop","autoLoad","volume","soundVolume","module","exports","p","setImmediate","OrderListModel","mobx__WEBPACK_IMPORTED_MODULE_0__","react_scroll__WEBPACK_IMPORTED_MODULE_2__","_graph_generated__WEBPACK_IMPORTED_MODULE_3__","branches","collapsedCategories","Finished","branchesFilter","hasBranchFilter","isSingleBranchSelected","firstBranchId","orderMap","clearBranchFilter","clear","setBranchFilter","panMapToOrder","order","panToOrder","extend","detailOpen","isOrderDetailOpen","orderId","has","isCategoryCollapsed","categoryCode","toggleOrderDetail","delete","add","toggleCategoryCollapse","category","index","indexOf","focusOrderDetail","scroller","scrollTo","smooth","containerId","absolute","observerOrderDetail","bind","endpoint","persistenceKey","sentryDSN","RootContext","createContext","createApolloClient","createDefaultApolloClient","headers","computed","Authorization","communicationToken","token","ApolloLink","operation","forward","canCommunicate","operationName","context","getContext","setContext","Observable","sub","subscribe","networkError","invalidate","complete","unsubscribe","createAuthLink","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","offlineLink","QueueLink","open","close","createOfflineLink","createNetworkLink","persistModel","_persistModel","modelName","stateKey","writeState","getType","name","snapshot","localforage","setItem","getItem","applySnapshot","getSnapshot","t0","removeItem","onSnapshot","getLoginUrl","username","password","PasswordLoginModel","errorCode","hasFailed","setFailure","message","setSuccess","authenticate","requestToken","_requestToken","fetch","response","payload","Accept","json","status","String","Sentry","withScope","scope","setExtra","setLevel","Severity","Debug","captureException","LoginProviderModel","passwordLogin","PasswordChangeMutation","AuthModel","provider","isAuthenticated","isAuthenticatedUser","tokenForPasswordChange","cache","reset","setForPasswordChange","temporaryB64EncodedToken","Base64","decode","changePassword","_changePassword","_ref$updateUserPasswo","fetchPolicy","updateUserPassword","ConfigModel","orderListPollIntervalSec","orderListSoundIntervalSec","UserModel","maybe","number","soundIgnore","isLoaded","brands","access","permissions","canCancelOrders","canCreateOrder","branchesId","R","defaultBranch","Error","filterBranches","predicate","canQuery","queryName","queries","toLowerCase","canMutate","mutationName","mutations","isReady","applyUserData","rawCode","uniqBy","applyPermissions","applyAccess","makeSet","fields","Set","compose","toLower","subscriptions","finishBootstrap","setLanguage","ignore","setSoundVolume","faker","CreateOrderModel","getDefaultProps","currentBranch","deliveryType","isDelivery","Messenger","deliverAt","deliverAtIso","startOfMinute","hasAddress","deliveryAddress","fakeAddress","gps","clearGps","phone","phonePrefix","prefix","country","customer","emails","email","phones","vamCustomer","isFound","_self$vamCustomer","lastOrder","defaults","fakeValues","hasOrder","createOrderVariables","callEventId","eventId","updateOrderVariables","acceptOrderVariables","resetOrder","resetModel","setOrder","useLocation","clearLocation","setMinimalPrice","minimalPrice","selectBranch","userIsCalling","setDeliveryMinutes","minutes","deliveryMinutes","updateFormValues","touched","updateFromVam","updateFormWithFakeValues","internet","phoneNumberFormat","lorem","sentence","slice","latitude","longitude","resolver","makeResolver","resolve","selectSidedishesForRecipe","sidedishMode","sidedishRootId","selectSidedishesForItem","itemId","sidedishSelectionConfirmed","sidedishes","isConfirmed","sidedishSelectionCancel","notDeliveryLocation","sidedishSelection","GPSCzechia","MapModel","zoom","mapRef","center","gpsToLatLng","setMapRef","updateZoom","getZoom","updatePosition","getCenter","lat","lng","OrderBranchLocationQuery","OrderMapModel_graphql_templateObject","OrderLocationQuery","OrderMapModel","activeDriverId","_panToOrder","panTo","panToBranch","_panToBranch","activateDriver","driverId","position","OrderModel","list","StatisticsModel","drivers","closureBranch","maybeNull","dateTimeFrom","startOfDay","dateTimeTo","endOfDay","updateFilter","setDriversFilter","setClosureBranch","branch","setTodayOrdersFilter","SettingsBaseModel","MenuStockItemFragment","MenuStockModel_graphql_templateObject","MenuStockCreateMutation","MenuStockModel_graphql_templateObject2","MenuStockUpdateMutation","MenuStockDeleteMutation","MenuStockModel","createItem","updateItem","stockId","deleteItem","_deleteItem","label","plu","allergens","wareUnit","allowNegative","MenuModel","stock","SettingsModel","selectedBranchId","menu","head","ZoneMapModel","currentZonePoints","updateZonePoints","points","clearZonePoints","panToZone","_panToZone","zoneId","zone","CreateZoneMutation","ZoneModel_graphql_templateObject","UpdateZonePriorityMutation","ZoneModel_graphql_templateObject2","DestroyZoneMutation","ZoneModel_graphql_templateObject3","ZoneModel","brandId","brand","branchFilterId","branchFilterPredicate","zoneFilterPredicate","getZoneVariables","update","zoneColor","minimalOrderPrice","priceRangeRules","normalizePriceRangeRule","geoPolygon","setBrandFilter","brandBranches","clearBrandFilter","createZone","flow","onZoneCreate","generatePolygon","metersRadius","pointsCount","GZones","zones","destroyZone","changeZonePriority","oldIndex","newIndex","updateZonePriority","priority","numberOrNull","num","isNaN","range","toPrice","RootModel","createOrder","statistics","persistedModels","RootProvider","_React$useState2","isInit","setInit","_React$useState3","create","useAsyncEffect","dist","Provider","Pacman","_ref3$observe","index_module","localStorage","./af","./af.js","./ar","./ar-dz","./ar-dz.js","./ar-kw","./ar-kw.js","./ar-ly","./ar-ly.js","./ar-ma","./ar-ma.js","./ar-sa","./ar-sa.js","./ar-tn","./ar-tn.js","./ar.js","./az","./az.js","./be","./be.js","./bg","./bg.js","./bm","./bm.js","./bn","./bn.js","./bo","./bo.js","./br","./br.js","./bs","./bs.js","./ca","./ca.js","./cs","./cs.js","./cv","./cv.js","./cy","./cy.js","./da","./da.js","./de","./de-at","./de-at.js","./de-ch","./de-ch.js","./de.js","./dv","./dv.js","./el","./el.js","./en-au","./en-au.js","./en-ca","./en-ca.js","./en-gb","./en-gb.js","./en-ie","./en-ie.js","./en-il","./en-il.js","./en-nz","./en-nz.js","./eo","./eo.js","./es","./es-do","./es-do.js","./es-us","./es-us.js","./es.js","./et","./et.js","./eu","./eu.js","./fa","./fa.js","./fi","./fi.js","./fo","./fo.js","./fr","./fr-ca","./fr-ca.js","./fr-ch","./fr-ch.js","./fr.js","./fy","./fy.js","./gd","./gd.js","./gl","./gl.js","./gom-latn","./gom-latn.js","./gu","./gu.js","./he","./he.js","./hi","./hi.js","./hr","./hr.js","./hu","./hu.js","./hy-am","./hy-am.js","./id","./id.js","./is","./is.js","./it","./it.js","./ja","./ja.js","./jv","./jv.js","./ka","./ka.js","./kk","./kk.js","./km","./km.js","./kn","./kn.js","./ko","./ko.js","./ky","./ky.js","./lb","./lb.js","./lo","./lo.js","./lt","./lt.js","./lv","./lv.js","./me","./me.js","./mi","./mi.js","./mk","./mk.js","./ml","./ml.js","./mn","./mn.js","./mr","./mr.js","./ms","./ms-my","./ms-my.js","./ms.js","./mt","./mt.js","./my","./my.js","./nb","./nb.js","./ne","./ne.js","./nl","./nl-be","./nl-be.js","./nl.js","./nn","./nn.js","./pa-in","./pa-in.js","./pl","./pl.js","./pt","./pt-br","./pt-br.js","./pt.js","./ro","./ro.js","./ru","./ru.js","./sd","./sd.js","./se","./se.js","./si","./si.js","./sk","./sk.js","./sl","./sl.js","./sq","./sq.js","./sr","./sr-cyrl","./sr-cyrl.js","./sr.js","./ss","./ss.js","./sv","./sv.js","./sw","./sw.js","./ta","./ta.js","./te","./te.js","./tet","./tet.js","./tg","./tg.js","./th","./th.js","./tl-ph","./tl-ph.js","./tlh","./tlh.js","./tr","./tr.js","./tzl","./tzl.js","./tzm","./tzm-latn","./tzm-latn.js","./tzm.js","./ug-cn","./ug-cn.js","./uk","./uk.js","./ur","./ur.js","./uz","./uz-latn","./uz-latn.js","./uz.js","./vi","./vi.js","./x-pseudo","./x-pseudo.js","./yo","./yo.js","./zh-cn","./zh-cn.js","./zh-hk","./zh-hk.js","./zh-tw","./zh-tw.js","webpackAsyncContext","req","ids","e","then","t","./chs","./chs.js","./da-dk","./da-dk.js","./en-za","./en-za.js","./es-es","./es-es.js","./nl-nl","./nl-nl.js","./no","./no.js","./pt-pt","./pt-pt.js","./ru-ua","./ru-ua.js","./uk-ua","./uk-ua.js","./cs/messages.po","./de/messages.po","./en-dev/messages.po","./en/messages.po","./pl/messages.po","./sk/messages.po","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","latLngToGps","geolib__WEBPACK_IMPORTED_MODULE_0__","latLng","_ref$metersRadius","_ref$pointsCount","fill","degree","computeDestinationPoint","MessageStyled","ConnectionWarning","connectionWarningSound","index_es","disableBackdropClick","disableEscapeKeyDown","icons_index_es","_lingui_react","successStyle","snackStyles","variantSuccess","variantInfo","variantError","variantWarning","orange","SnackProvider","build","maxSnack","classes","anchorOrigin","horizontal","vertical","UpdateHandler","_ref$onRestart","onRestart","reload","_ref$autoUpdateDelay","autoUpdateDelay","SECOND","_ref$postponeTimeout","postponeTimeout","MINUTE","_ref$updateCheckInter","updateCheckInterval","HOUR","_ref$serviceWorker","serviceWorker","registrationWorkerRef","updateWorkerRef","useObservable","updatePending","useReleaseCabinet","version","useInterval","onMessage","event","removeEventListener","updateWorker","register","onInit","reg","onUpdate","sw","init","onCancel","onConfirm","postMessage","useObserver","UpdateSnack","autoHideDuration","now","useTimer","interval","addMilliseconds","endTime","remainingSeconds","formatDistanceStrict","disableWindowBlurListener","action","size","role","Center","ErrorPage","onFeedback","style","ServiceUnreachablePage","onRetry","components","href","ServiceUnreachablePage_Center","ServiceUnreachablePage_IconStyled","makeError","DefaultErrorHandler","_useSnackBar","errorKind","setErrorKind","onUnhandledError","isChunkError","flushSentry","isApolloError","isNetworkUnreachableError","onNetworkError","isUnreachable","onOperationError","onUserErrors","messages","graphql_dist","onError","ServiceUnreachablePage_ServiceUnreachablePage","ErrorPage_ErrorPage","showFeedback","showReportDialog","labelClose","LogRoute","RedirectAfterLogin","route","when","RedirectAfterLogout","PasswordLoginRoute","lazy","PasswordChangeRoute","PasswordResetRoute","MainDashboardPage","OrderRoutes","KitchenRoutes","SettingsRoutes","OverviewRoutes","SupportPage","Routing","Suspense","fallback","LogRoute_LogRoute","RedirectAfterLogin_RedirectAfterLogin","LazyRoute","exact","UserBootstrap","_useRoot","_useQUserBootstrap","skip","configureScope","setUser","roles","App","DefaultErrorHandler_DefaultErrorHandler","UpdateHandler_UpdateHandler","Routing_Routing","Router","dist_index_es","handleGetUserConfirm","getUserConfirmation","ThemeProvider","theme","createMuiTheme","typography","useNextVariants","styles","rootElement","getElementById","useSentryInit","ThemeProvider_ThemeProvider","Router_Router","SnackProvider_SnackProvider","App_App","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","errors","_ref$redirect","_RedirectToLogin__WEBPACK_IMPORTED_MODULE_6__","_pages_NotFoundPage__WEBPACK_IMPORTED_MODULE_4__","_LazyRoute__WEBPACK_IMPORTED_MODULE_5__","react_spinkit__WEBPACK_IMPORTED_MODULE_1__","react_spinkit__WEBPACK_IMPORTED_MODULE_1___default","_ref$noMargin","noMargin","display","alignSelf","justifyContent","marginTop","_RootProvider__WEBPACK_IMPORTED_MODULE_1__","routeProps","_atoms_Pacman__WEBPACK_IMPORTED_MODULE_3__","IconSpanStyled","_ref$fontSize","_ref$fontSizeUnit","fontSizeUnit","_ref2$color"],"mappings":"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IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,GAEAC,aAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,IAEAC,aaAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,gBAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,aAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,YAAA,CACA,IACA,IAEAC,eAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,gBAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,YAAA,CACA,IACA,IAEAC,eAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,gBAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,KAGA,SAAAC,EAAAC,GACA,IAAAC,EAAA/xB,EAAA8xB,GACA,OAAAC,EAOA1hD,EAAA2hD,EAAAD,EAAA,IAAAE,KAAA,WACA,IAAAr6B,EAAAm6B,EAAA,GACA,OAAA1hD,EAAA6hD,EAAAt6B,EAAA,KARA+O,QAAA6S,UAAAyY,KAAA,WACA,IAAAD,EAAA,IAAA9d,MAAA,uBAAA4d,EAAA,KAEA,MADAE,EAAAhzB,KAAA,mBACAgzB,IAQAH,EAAA9xB,KAAA,WACA,OAAA1rB,OAAA0rB,KAAAC,IAEA6xB,EAAAj6B,GAAA,KACAkS,EAAAC,QAAA8nB,wBC5+BA,IAAA7xB,EAAA,CACA2jB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAuO,QAAA,CACA,IACA,KAEAC,WAAA,CACA,IACA,KAEA3N,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEA2N,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEArN,OAAA,CACA,IACA,KAEAG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAK,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAuM,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA/L,OAAA,CACA,IACA,KAEAgM,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA5L,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAK,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAG,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAiB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAO,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAqB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEA0B,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAgG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEA7F,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAE,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA0F,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAvF,OAAA,CACA,IACA,KAEAwF,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAxF,UAAA,CACA,IACA,KAEAO,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAE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","file":"static/js/main.f01a53da.chunk.js","sourcesContent":["import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import React, { MouseEvent } from 'react'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { applyAlphaToColor, Colors, Radiuses, Spacing } from '../styling'\n\nexport interface ITouchButtonProps\n  extends React.HTMLAttributes<HTMLButtonElement> {\n  iconName?: string\n  iconColor?: Colors\n  iconSize?: number\n  text?: string\n  color?: Colors\n  badge?: ReactNode\n  disabled?: boolean\n  textNextToIcon?: boolean\n  className?: string\n  width?: string\n  height?: string\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n}\n\nconst applyAlpha = (alphaValue: number) => (props: ITouchButtonProps) =>\n  applyAlphaToColor(props.color!, alphaValue)\n\nconst TouchButtonStyled = styled.button`\n  min-height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  min-width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  width: ${({ width = '100%' }: ITouchButtonProps) => width};\n  height: ${({ height = '100%' }: ITouchButtonProps) => height};\n  margin: 0;\n  padding: 0 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  /* fallback font size for incompatible browsers */\n  font-size: 1rem;\n  font-size: calc(0.6rem + 0.5vw);\n  transition-duration: 0.2s;\n\n  & .material-icons {\n    vertical-align: middle;\n  }\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nconst ButtonLabelStyled = styled.div`\n  color: white;\n  text-align: center;\n  width: 100%;\n  overflow: hidden;\n`\nconst ButtonLabelNextToIconStyled = styled(ButtonLabelStyled)`\n  width: calc(100% - 4rem);\n  margin: 0 0 0 1rem;\n  text-align: left;\n  display: inline-block;\n  vertical-align: top;\n  overflow: hidden;\n`\n\nexport const TouchButton = React.forwardRef<\n  HTMLButtonElement,\n  ITouchButtonProps\n>(\n  (\n    {\n      children,\n      iconName,\n      iconColor = Colors.white,\n      iconSize = 3,\n      color = Colors.greyMiddle,\n      textNextToIcon = false,\n      badge,\n      text,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    return (\n      <TouchButtonStyled color={color} {...props} ref={forwardedRef}>\n        {iconName && (\n          <Icon iconName={iconName} color={iconColor} fontSize={iconSize} />\n        )}\n\n        {text &&\n          textNextToIcon && (\n            <ButtonLabelNextToIconStyled>{text}</ButtonLabelNextToIconStyled>\n          )}\n\n        {text &&\n          !textNextToIcon && <ButtonLabelStyled>{text}</ButtonLabelStyled>}\n\n        {badge}\n        {children}\n      </TouchButtonStyled>\n    )\n  },\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Spacing } from '../styling'\nimport { MarginBox } from './MarginBox'\n\ninterface IProps {\n  width?: number\n  widthUnit?: string\n  height?: number\n  heightUnit?: string\n  margin?: string\n  className?: string\n}\n\nconst widthProperty = ({\n  width: width,\n  widthUnit: widthUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (width === undefined) {\n    return ''\n  } else {\n    return `width: ${width}${widthUnit}`\n  }\n}\n\nconst heightProperty = ({\n  height: height,\n  heightUnit: heightUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (height === undefined) {\n    return ''\n  } else {\n    return `height: ${height}${heightUnit}`\n  }\n}\n\nconst SizerContainer = styled('div')`\n  ${widthProperty};\n  ${heightProperty};\n`\n\nexport const Sizer: React.FC<IProps> = ({\n  width,\n  widthUnit = Spacing.DefaultSizeUnit,\n  height,\n  heightUnit = Spacing.DefaultSizeUnit,\n  margin,\n  children,\n  className,\n  ...props\n}) => {\n  const wrap = (\n    <SizerContainer\n      width={width}\n      widthUnit={widthUnit}\n      height={height}\n      heightUnit={heightUnit}\n      className={className}\n      {...props}\n    >\n      {children}\n    </SizerContainer>\n  )\n\n  return margin === undefined ? (\n    wrap\n  ) : (\n    <MarginBox margin={margin}>{wrap}</MarginBox>\n  )\n}\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TMenuModel } from './MenuModel'\n\nexport const MenuBaseModel = BaseModel.named('MenuBase')\n  .volatile(() => ({\n    filterInput: '',\n  }))\n  .actions(self => ({\n    setFilterInput(input: string) {\n      self.filterInput = input\n    },\n  }))\n  .views(self => ({\n    get branchId() {\n      return getParent<TMenuModel>(self).settings.branchId\n    },\n  }))\n","import { isSameDay } from 'date-fns'\nimport { format, formatWithOptions } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\nimport numeral from 'numeral'\n\nimport { FAddressFragment, FUserNameFragment } from '../graph/generated'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const fullDateFormat = 'dddd LL'\nexport const formatFullDate = formatLocale(fullDateFormat)\n\nexport const dateFormat = 'D.M.YYYY'\nexport const formatDate = formatLocale(dateFormat)\n\nexport const dateFormatISO = 'YYYY-MM-DD'\nexport const formatDateISO = format(dateFormatISO)\n\nexport const timeFormat = 'H:mm'\nexport const formatTime = formatLocale(timeFormat)\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const priceFormat = '0,0.[00]'\nexport const formatPrice = price => numeral(price).format(priceFormat)\n\nexport const formatTimeWithoutTodayDate = (time: string) =>\n  isSameDay(time, new Date()) ? formatTime(time) : formatDateTime(time)\n\nexport const formatAddress = (address: FAddressFragment) => {\n  if (!address) {\n    return ''\n  }\n  if (!address.street) {\n    if (address.city && address.houseNumber) {\n      return `${address.city} ${address.houseNumber}, ${address.state}`\n    }\n    if (address.city) {\n      if (address.state) {\n        return `${address.city}, ${address.state}`\n      }\n      return address.city\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n\nexport function formatFullName(user: FUserNameFragment) {\n  return `${user.lastName} ${user.firstName}`.trim()\n}\n","import { autorun, observable } from 'mobx'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { appConfig } from '../config'\nimport { RM } from '../helpers/ramda'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  title: string\n}\n\nconst TitleStyled = styled.h1`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  margin: 0.5rem 0.5rem 0 0.5rem;\n  white-space: nowrap;\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.9);\n`\n\nconst observableTitles = observable.array<string>([])\n\nautorun(() => {\n  const lastTitle = Array.from(observableTitles).pop()\n  if (lastTitle) {\n    document.title = `${lastTitle} :: ${appConfig.pageTitleSuffix}`\n  } else {\n    document.title = appConfig.pageTitleSuffix\n  }\n})\n\nconst PageTitleDisplay: React.FC = () => (\n  <Observer>\n    {() => <TitleStyled>{observableTitles.join(' - ')}</TitleStyled>}\n  </Observer>\n)\n\nexport class PageTitle extends React.Component<IProps> {\n  static Route = PageTitleRoute\n  static Display = PageTitleDisplay\n  componentDidMount() {\n    observableTitles.push(this.props.title)\n  }\n  componentDidUpdate(prevProps: IProps) {\n    const idx = observableTitles.findIndex(RM.equals(prevProps.title))\n    if (idx >= 0) {\n      observableTitles.splice(idx, 1, this.props.title)\n    }\n  }\n  componentWillUnmount() {\n    observableTitles.remove(this.props.title)\n  }\n  render() {\n    return null\n  }\n}\n\nfunction PageTitleRoute({ title, ...props }: IProps & RouteProps) {\n  return <Route {...props} render={() => <PageTitle title={title} />} />\n}\n","import Color from 'color'\nimport styled, { css } from 'styled-components'\n\nimport { Colors, Radiuses } from '../styling'\n\ninterface IProps {\n  color?: string\n  textColor?: string\n  padding?: number\n  stretchToParent?: boolean\n}\n\nexport const Card = styled.div`\n  background: ${getBackgroundColor};\n  color: ${getTextColor};\n  border-radius: ${Radiuses.Card};\n  padding: ${getPadding}rem;\n  margin: 0 0 0.5rem 0;\n  position: relative;\n  ${applyStretchToParentStyle};\n`\n\nCard.displayName = 'Card'\n\nfunction getPadding({ padding = 0.5 }: IProps) {\n  return padding\n}\n\nfunction getBackgroundColor({ color }: IProps) {\n  return Color(color || Colors.greyLight)\n    .alpha(0.8)\n    .lighten(0.4)\n    .string()\n}\n\nfunction getTextColor(props: IProps) {\n  return props.textColor || Colors.black\n}\n\nfunction applyStretchToParentStyle({ stretchToParent = false }: IProps) {\n  if (!stretchToParent) {\n    return ''\n  }\n  return css`\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  `\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\n\nimport { IPageLayoutProps, PageLayout } from '../molecules/PageLayout'\n\ninterface IFullPageLayoutProps extends IPageLayoutProps {\n  width?: number\n}\n\nfunction getLayout(width: number): Layout[] {\n  return [{ i: 'full', x: 0, y: 1, w: width, h: 10 }]\n}\n\nexport const FullPageLayout: React.FC<IFullPageLayoutProps> = ({\n  children,\n  width = 16,\n  ...props\n}) => (\n  <PageLayout layouts={getLayout(width)} {...props}>\n    <div key=\"full\">{children}</div>\n  </PageLayout>\n)\n","import { DocumentNode } from 'graphql'\nimport { Lambda } from 'mobx'\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\n\nimport { Loading } from '../atoms/Loading'\nimport { whenGoingOnline } from '../helpers/offline'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean\n    refetchOnConnectionLost?: boolean\n  }\n  const GQuery: React.FC<IProps> = props => {\n    const cleanup = useRef<Lambda[]>([])\n    const executeCleanup = useCallback(() => {\n      cleanup.current.forEach(fn => fn())\n      cleanup.current.length = 0\n    }, [])\n\n    useEffect(\n      () => {\n        return executeCleanup\n      },\n      [cleanup.current.length],\n    )\n\n    const {\n      render,\n      renderFragment,\n      renderLoading = true,\n      renderError = true,\n      refetchOnConnectionLost = false,\n      children,\n      ...rest\n    } = props\n\n    return (\n      // @ts-ignore Some weird changes in @types/react\n      <Query query={query} {...rest}>\n        {result => {\n          if (result.loading) {\n            if (typeof renderLoading === 'function') {\n              return renderLoading(result)\n            } else if (renderLoading === true) {\n              return <Loading />\n            }\n          }\n          if (result.error) {\n            throw result.error\n          }\n          if (refetchOnConnectionLost) {\n            cleanup.current.push(whenGoingOnline(result.refetch))\n          }\n          if (result.data) {\n            if (renderFragment) {\n              return <>{renderFragment(result.data, result)}</>\n            }\n            if (render) {\n              return render(result.data, result)\n            }\n          }\n          return children || null\n        }}\n      </Query>\n    )\n  }\n  return GQuery\n}\n","import React from 'react'\n\nimport { PageTitle } from '../atoms/PageTitle'\nimport { i18n } from '../i18n'\n\nexport const NotFoundPage: React.FC = () => (\n  <>\n    <PageTitle title={i18n.t`Not found`} />\n    <h1>{i18n.t`There is nothing here, sorry!`}</h1>\n  </>\n)\n","import { SnackbarContextNext } from 'notistack/build/SnackbarContext'\nimport { useCallback, useContext } from 'react'\n\nenum EVariant {\n  default = 'default',\n  error = 'error',\n  success = 'success',\n  warning = 'warning',\n  info = 'info',\n}\n\ninterface IEnqueueOptions {\n  /** Type of the snackbar */\n  variant: EVariant\n  /** Event fired when user clicks on action button (if any) */\n  onClickAction(): void\n  /**\n   * You can pass material-ui Snackbar props here, and they will be applied to this individual snackbar.\n   * for example, this particular snackbar will be dismissed after 1sec.\n   */\n  autoHideDuration: number\n  action: ReactNode[]\n}\n\ninterface IEnqueueSnackbar {\n  (message: string, options?: Partial<IEnqueueOptions>)\n}\n\nconst successVariant = { variant: EVariant.success }\nconst errorVariant = { variant: EVariant.error }\nconst warningVariant = { variant: EVariant.warning }\nconst infoVariant = { variant: EVariant.info }\n\nexport function useSnackBar() {\n  const enqueueSnackbar: IEnqueueSnackbar = useContext(SnackbarContextNext)\n  const enqueueSuccess = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, successVariant),\n    [],\n  )\n  const enqueueError = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, errorVariant),\n    [],\n  )\n  const enqueueWarning = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, warningVariant),\n    [],\n  )\n  const enqueueInfo = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, infoVariant),\n    [],\n  )\n  return {\n    enqueueSnackbar,\n    enqueueSuccess,\n    enqueueError,\n    enqueueWarning,\n    enqueueInfo,\n  }\n}\n","import Color from 'color'\n\nimport { RM } from './helpers/ramda'\n\nexport enum Colors {\n  yellow = '#FFDB2B',\n  pink = '#FF2B95',\n  blue = '#2441FF',\n  red = '#FF1C1C',\n  green = '#179B12',\n  turquoise = '#2BFFFF',\n  orange = '#FF862B',\n  violet = '#6D4F8C',\n  black = '#000000',\n  greyDarkest = '#080808',\n  greyDark = '#2C2C2C',\n  greyMiddle = '#939393',\n  greyLight = '#EDEDED',\n  white = '#FFFFFF',\n}\n\nexport const applyAlphaToColor = RM.curry((color: Colors, alphaValue: number) =>\n  Color(color)\n    .alpha(alphaValue)\n    .string(),\n)\n\nexport enum Radiuses {\n  Card = '0.5rem',\n  Button = '0.5rem',\n  TextComponent = '0.25rem',\n}\n\nexport const Spacing = {\n  MarginAroundFormComponents: '0.1rem',\n  Small: '0.25rem',\n  Middle: '0.5rem',\n  LayoutGridCellMargin: '0.5rem',\n  ButtonHeight: 3.4375,\n  DefaultInputWidth: 20,\n  DefaultSizeUnit: 'rem',\n  ButtonColumnWidthPx: 55,\n  InfoMessageFontSize: '1.375rem',\n}\n\nexport const FontSizes = {\n  CompactCard: '0.95rem',\n  CompactCardBig: '1rem',\n}\n","import debug from 'debug'\nimport React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\n\ninterface IRedirectToLoginProps {\n  useOrigin?: boolean\n}\n\nconst log = debug('routing')\n\nexport const RedirectToLogin: React.FC<IRedirectToLoginProps> = ({\n  useOrigin = true,\n}) => (\n  <Route\n    path=\"/login\"\n    children={({ match, location }) => {\n      if (match) {\n        return null\n      }\n      log('redirecting to login...')\n      return (\n        <Redirect\n          to={{\n            pathname: '/login',\n            state: { origin: useOrigin ? location.pathname : '/' },\n          }}\n        />\n      )\n    }}\n  />\n)\n","import * as RM from 'ramda'\n\nexport { RM }\n","import debug from 'debug'\nimport { getEnv, getPath, getRoot, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { IRootEnvironment } from '../atoms/RootProvider'\nimport { TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    return debug(`model${getPath(self)}`)\n  },\n  get client() {\n    const client = getEnv<IRootEnvironment>(self).apolloClient\n    if (!client) {\n      throw new VError('Apollo client is missing from environment setup')\n    }\n    return client\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n}))\n","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<string>\n\n  readonly includeOldFinished?: boolean\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputStatisticCreate {\n  readonly dateFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly dateTimeFrom?: Maybe<string>\n\n  readonly dateTimeTo?: Maybe<string>\n\n  readonly branches: ReadonlyArray<string>\n\n  readonly drivers?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: string\n\n  readonly closed?: boolean\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly minCount?: number\n\n  readonly maxCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly minCount?: Maybe<number>\n\n  readonly maxCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityCreate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityUpdate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment method used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<string>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: number\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n  Pln = 'PLN',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  FeAdmin = 'FE_ADMIN',\n  FeKitchen = 'FE_KITCHEN',\n  Driver = 'DRIVER',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n  Pl = 'PL',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n  Pwa = 'PWA',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type MPasswordChangeVariables = {\n  readonly password: string\n}\n\nexport type MPasswordChangeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateUserPassword: MPasswordChangeUpdateUserPassword\n}\n\nexport type MPasswordChangeUpdateUserPassword = {\n  readonly __typename?: 'UserUpdatedPassword'\n\n  readonly id: string\n\n  readonly token: string\n}\n\nexport type GCreateSpecificBusinessHourVariables = {\n  readonly input: InputBusinessHourSpecificDateCreate\n}\n\nexport type GCreateSpecificBusinessHourMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GCreateSpecificBusinessHourResult\n}\n\nexport type GCreateSpecificBusinessHourResult = GSpecificBusinessHourFragment\n\nexport type GDeleteSpecificBusinessHourVariables = {\n  readonly id: string\n}\n\nexport type GDeleteSpecificBusinessHourMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GDeleteSpecificBusinessHourResult\n}\n\nexport type GDeleteSpecificBusinessHourResult = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n}\n\nexport type GSpecificBusinessHoursVariables = {\n  readonly branchId: string\n}\n\nexport type GSpecificBusinessHoursQuery = {\n  readonly __typename?: 'Query'\n\n  readonly businessHours: ReadonlyArray<GSpecificBusinessHoursBusinessHours>\n}\n\nexport type GSpecificBusinessHoursBusinessHours = GSpecificBusinessHourFragment\n\nexport type GOrderVamVariables = {\n  readonly branchId: string\n  readonly phone: string\n}\n\nexport type GOrderVamQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vamCustomer: GOrderVamVamCustomer\n}\n\nexport type GOrderVamVamCustomer = {\n  readonly __typename?: 'CustomerInformation'\n\n  readonly isFound: boolean\n\n  readonly email: string\n\n  readonly firstName: string\n\n  readonly lastName: string\n\n  readonly lastOrder: Maybe<GOrderVamLastOrder>\n\n  readonly locations: ReadonlyArray<GOrderVamLocations>\n}\n\nexport type GOrderVamLastOrder = {\n  readonly __typename?: 'Order'\n\n  readonly note: Maybe<string>\n}\n\nexport type GOrderVamLocations = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly state: Maybe<string>\n\n  readonly gps: Maybe<GOrderVamGps>\n}\n\nexport type GOrderVamGps = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type GOrderPromoVariables = {\n  readonly branchId: string\n}\n\nexport type GOrderPromoQuery = {\n  readonly __typename?: 'Query'\n\n  readonly promoCodes: ReadonlyArray<GOrderPromoPromoCodes>\n}\n\nexport type GOrderPromoPromoCodes = {\n  readonly __typename?: 'PromoCode'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type GSortMenuCategoryVariables = {\n  readonly categoryId: string\n  readonly offset: number\n}\n\nexport type GSortMenuCategoryMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly success: boolean\n}\n\nexport type GMenuCategoryCreateVariables = {\n  readonly input: InputWareCategoryCreate\n}\n\nexport type GMenuCategoryCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createWareCategory: GMenuCategoryCreateCreateWareCategory\n}\n\nexport type GMenuCategoryCreateCreateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type GMenuCategoryUpdateVariables = {\n  readonly categoryId: string\n  readonly input: InputWareCategoryUpdate\n}\n\nexport type GMenuCategoryUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: GMenuCategoryUpdateUpdateWareCategory\n}\n\nexport type GMenuCategoryUpdateUpdateWareCategory = FMenuCategoryFragment\n\nexport type GMenuCategoryDeleteVariables = {\n  readonly categoryId: string\n}\n\nexport type GMenuCategoryDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyWareCategory: GMenuCategoryDeleteDestroyWareCategory\n}\n\nexport type GMenuCategoryDeleteDestroyWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type GMenuRecipeVisibilityVariables = {\n  readonly recipeId: string\n  readonly visible: boolean\n}\n\nexport type GMenuRecipeVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateRecipe: GMenuRecipeVisibilityUpdateRecipe\n}\n\nexport type GMenuRecipeVisibilityUpdateRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type GMenuRecipeCreateVariables = {\n  readonly recipe: InputRecipeCreate\n}\n\nexport type GMenuRecipeCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createRecipe: GMenuRecipeCreateCreateRecipe\n}\n\nexport type GMenuRecipeCreateCreateRecipe = GMenuRecipeFragment\n\nexport type GMenuRecipeUpdateVariables = {\n  readonly recipeId: string\n  readonly recipe: InputRecipeUpdate\n}\n\nexport type GMenuRecipeUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateRecipe: GMenuRecipeUpdateUpdateRecipe\n}\n\nexport type GMenuRecipeUpdateUpdateRecipe = GMenuRecipeFragment\n\nexport type GMenuRecipeDeleteVariables = {\n  readonly recipeId: string\n}\n\nexport type GMenuRecipeDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyRecipe: GMenuRecipeDeleteDestroyRecipe\n}\n\nexport type GMenuRecipeDeleteDestroyRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type GMenuStockCreateVariables = {\n  readonly stockItem: InputStockItemCreate\n}\n\nexport type GMenuStockCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createStockItem: GMenuStockCreateCreateStockItem\n}\n\nexport type GMenuStockCreateCreateStockItem = GMenuStockItemFragment\n\nexport type GMenuStockUpdateVariables = {\n  readonly stockId: string\n  readonly stockItem: InputStockItemUpdate\n}\n\nexport type GMenuStockUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateStockItem: GMenuStockUpdateUpdateStockItem\n}\n\nexport type GMenuStockUpdateUpdateStockItem = GMenuStockItemFragment\n\nexport type GMenuStockDeleteVariables = {\n  readonly stockId: string\n}\n\nexport type GMenuStockDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyStockItem: GMenuStockDeleteDestroyStockItem\n}\n\nexport type GMenuStockDeleteDestroyStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n}\n\nexport type GAllergensVariables = {}\n\nexport type GAllergensQuery = {\n  readonly __typename?: 'Query'\n\n  readonly allergens: ReadonlyArray<GAllergensAllergens>\n}\n\nexport type GAllergensAllergens = FMenuAllergenFragment\n\nexport type GCurrenciesVariables = {\n  readonly branchId: string\n}\n\nexport type GCurrenciesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly currencies: ReadonlyArray<GCurrenciesCurrencies>\n\n  readonly companyBranch: GCurrenciesCompanyBranch\n}\n\nexport type GCurrenciesCurrencies = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n\n  readonly code: string\n}\n\nexport type GCurrenciesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly address: GCurrenciesAddress\n}\n\nexport type GCurrenciesAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<GCurrenciesCountry>\n}\n\nexport type GCurrenciesCountry = {\n  readonly __typename?: 'Country'\n\n  readonly currency: GCurrenciesCurrency\n}\n\nexport type GCurrenciesCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n}\n\nexport type GVatsVariables = {\n  readonly branchId: string\n}\n\nexport type GVatsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vats: ReadonlyArray<GVatsVats>\n}\n\nexport type GVatsVats = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n\n  readonly vat: number\n}\n\nexport type GWareUnitsVariables = {}\n\nexport type GWareUnitsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareUnits: ReadonlyArray<GWareUnitsWareUnits>\n}\n\nexport type GWareUnitsWareUnits = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: WareUnitEnum\n}\n\nexport type GMenuRecipeFormVariables = {\n  readonly recipeId: string\n}\n\nexport type GMenuRecipeFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: GMenuRecipeFormRecipe\n}\n\nexport type GMenuRecipeFormRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly image: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly visible: boolean\n\n  readonly recipeType: GMenuRecipeFormRecipeType\n\n  readonly sourcePrices: ReadonlyArray<GMenuRecipeFormSourcePrices>\n\n  readonly sideDishes: ReadonlyArray<GMenuRecipeFormSideDishes>\n\n  readonly categories: ReadonlyArray<GMenuRecipeFormCategories>\n\n  readonly sourceAssociatedRecipes: ReadonlyArray<\n    GMenuRecipeFormSourceAssociatedRecipes\n  >\n\n  readonly sourceIngredients: ReadonlyArray<GMenuRecipeFormSourceIngredients>\n}\n\nexport type GMenuRecipeFormRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuRecipeFormSourcePrices = GMenuRecipePriceFragment\n\nexport type GMenuRecipeFormSideDishes = FMenuCategoryListItemFragment\n\nexport type GMenuRecipeFormCategories = FMenuCategoryListItemFragment\n\nexport type GMenuRecipeFormSourceAssociatedRecipes = {\n  readonly __typename?: 'RecipeRelation'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipeFormPriceType\n\n  readonly recipe: GMenuRecipeForm_Recipe\n}\n\nexport type GMenuRecipeFormPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipeForm_Recipe = GMenuAssocRecipeFragment\n\nexport type GMenuRecipeFormSourceIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly quantity: number\n\n  readonly stockItem: GMenuRecipeFormStockItem\n}\n\nexport type GMenuRecipeFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly label: string\n\n  readonly wareUnit: GMenuRecipeFormWareUnit\n\n  readonly allergens: ReadonlyArray<GMenuRecipeFormAllergens>\n}\n\nexport type GMenuRecipeFormWareUnit = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type GMenuRecipeFormAllergens = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly enum: AllergenEnum\n}\n\nexport type GMenuRecipeFormAssocVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuRecipeFormAssocQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<GMenuRecipeFormAssocRecipes>\n}\n\nexport type GMenuRecipeFormAssocRecipes = GMenuAssocRecipeFragment\n\nexport type GMenuRecipeDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuRecipeDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GMenuRecipeDefaultsCompanyBranch\n}\n\nexport type GMenuRecipeDefaultsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly vats: ReadonlyArray<GMenuRecipeDefaultsVats>\n\n  readonly currency: GMenuRecipeDefaultsCurrency\n}\n\nexport type GMenuRecipeDefaultsVats = {\n  readonly __typename?: 'VatPriceType'\n\n  readonly vatId: string\n\n  readonly priceType: GMenuRecipeDefaultsPriceType\n}\n\nexport type GMenuRecipeDefaultsPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipeDefaultsCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GMenuStockFormVariables = {\n  readonly stockId: string\n}\n\nexport type GMenuStockFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: GMenuStockFormStockItem\n}\n\nexport type GMenuStockFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly note: string\n\n  readonly nameLabel: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly wareUnit: GMenuStockFormWareUnit\n\n  readonly allergens: ReadonlyArray<GMenuStockFormAllergens>\n\n  readonly companyBranch: GMenuStockFormCompanyBranch\n}\n\nexport type GMenuStockFormWareUnit = FMenuWareUnitFragment\n\nexport type GMenuStockFormAllergens = FMenuAllergenFragment\n\nexport type GMenuStockFormCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuStockDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GMenuStockDefaultsCompanyBranch\n}\n\nexport type GMenuStockDefaultsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type GOrderBranchLocationVariables = {\n  readonly branchId: string\n}\n\nexport type GOrderBranchLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GOrderBranchLocationCompanyBranch\n}\n\nexport type GOrderBranchLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GOrderBranchLocationGps\n}\n\nexport type GOrderBranchLocationGps = FGeoPointFragment\n\nexport type GOrderLocationVariables = {\n  readonly orderId: string\n}\n\nexport type GOrderLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GOrderLocationOrder\n}\n\nexport type GOrderLocationOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly gps: Maybe<GOrderLocationGps>\n}\n\nexport type GOrderLocationGps = FGeoPointFragment\n\nexport type GOrderDetailVariables = {\n  readonly id: string\n}\n\nexport type GOrderDetailQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GOrderDetailOrder\n}\n\nexport type GOrderDetailOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly companyBranch: GOrderDetailCompanyBranch\n\n  readonly customer: GOrderDetailCustomer\n\n  readonly customerOrdersCountCurrent: number\n\n  readonly customerOrdersCountTotal: number\n\n  readonly note: Maybe<string>\n\n  readonly previousNote: Maybe<string>\n\n  readonly allAppliedRules: ReadonlyArray<string>\n\n  readonly items: ReadonlyArray<GOrderDetailItems>\n\n  readonly totalSum: GOrderDetailTotalSum\n\n  readonly transportFee: GOrderDetailTransportFee\n\n  readonly coverPrice: GOrderDetailCoverPrice\n\n  readonly totalDiscount: GOrderDetailTotalDiscount\n\n  readonly orderOrigin: GOrderDetailOrderOrigin\n\n  readonly tip: GOrderDetailTip\n} & (FOrderTimingFragment & FOrderDriverFragment)\n\nexport type GOrderDetailCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type GOrderDetailCustomer = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly emails: ReadonlyArray<GOrderDetailEmails>\n\n  readonly phones: ReadonlyArray<GOrderDetailPhones>\n}\n\nexport type GOrderDetailEmails = FEmailFragment\n\nexport type GOrderDetailPhones = FPhoneFragment\n\nexport type GOrderDetailItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<GOrderDetailSidedishes>\n} & GOrderDetailWareFragment\n\nexport type GOrderDetailSidedishes = GOrderDetailWareFragment\n\nexport type GOrderDetailTotalSum = FPriceFragment\n\nexport type GOrderDetailTransportFee = FPriceFragment\n\nexport type GOrderDetailCoverPrice = FPriceFragment\n\nexport type GOrderDetailTotalDiscount = FPriceFragment\n\nexport type GOrderDetailOrderOrigin = {\n  readonly __typename?: 'OrderOrigin'\n\n  readonly code: string\n\n  readonly enum: OrderOriginEnum\n}\n\nexport type GOrderDetailTip = FPriceFragment\n\nexport type GOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n  readonly includeOldFinished?: Maybe<boolean>\n}\n\nexport type GOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<GOrderListOrders>\n\n  readonly orderStateCategories: ReadonlyArray<GOrderListOrderStateCategories>\n}\n\nexport type GOrderListOrders = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (FOrderStateCategoryFragment &\n  GOrderListTickerFragment &\n  GOrderMarkerFragment)\n\nexport type GOrderListOrderStateCategories = {\n  readonly __typename?: 'OrderStateCategory'\n\n  readonly code: string\n\n  readonly enum: OrderStateCategoryEnum\n}\n\nexport type SOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SOrderListUpdatedOrder\n}\n\nexport type SOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SOrderListOrder>\n}\n\nexport type SOrderListOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (FOrderStateCategoryFragment &\n  GOrderListTickerFragment &\n  GOrderMarkerFragment)\n\nexport type GCreateZoneVariables = {\n  readonly branchId: string\n  readonly points?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n}\n\nexport type GCreateZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createZone: GCreateZoneCreateZone\n}\n\nexport type GCreateZoneCreateZone = FZoneFragment\n\nexport type GUpdateZonePriorityVariables = {\n  readonly zoneId: string\n  readonly offset: number\n}\n\nexport type GUpdateZonePriorityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZonePriority: ReadonlyArray<\n    GUpdateZonePriorityUpdateZonePriority\n  >\n}\n\nexport type GUpdateZonePriorityUpdateZonePriority = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly priority: number\n}\n\nexport type GDestroyZoneVariables = {\n  readonly zoneId: string\n}\n\nexport type GDestroyZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyZone: GDestroyZoneDestroyZone\n}\n\nexport type GDestroyZoneDestroyZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n}\n\nexport type GZonesVariables = {\n  readonly branchesId: ReadonlyArray<string>\n}\n\nexport type GZonesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zones: ReadonlyArray<GZonesZones>\n}\n\nexport type GZonesZones = FZoneFragment\n\nexport type GZoneLocationVariables = {\n  readonly zoneId: string\n}\n\nexport type GZoneLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zone: GZoneLocationZone\n}\n\nexport type GZoneLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly companyBranch: GZoneLocationCompanyBranch\n}\n\nexport type GZoneLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GZoneLocationGps\n}\n\nexport type GZoneLocationGps = FGeoPointFragment\n\nexport type GZoneBranchLocationVariables = {\n  readonly branchId: string\n}\n\nexport type GZoneBranchLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GZoneBranchLocationCompanyBranch\n}\n\nexport type GZoneBranchLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GZoneBranchLocationGps\n}\n\nexport type GZoneBranchLocationGps = FGeoPointFragment\n\nexport type GZoneColorsVariables = {}\n\nexport type GZoneColorsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zoneColors: ReadonlyArray<GZoneColorsZoneColors>\n}\n\nexport type GZoneColorsZoneColors = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type QAddressSuggestVariables = {\n  readonly search: string\n}\n\nexport type QAddressSuggestQuery = {\n  readonly __typename?: 'Query'\n\n  readonly suggest: ReadonlyArray<QAddressSuggestSuggest>\n}\n\nexport type QAddressSuggestSuggest = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly gps: Maybe<QAddressSuggestGps>\n} & FAddressFragment\n\nexport type QAddressSuggestGps = FGeoPointFragment\n\nexport type MOrderStateVariables = {\n  readonly orderId: string\n  readonly state: OrderStateEnum\n}\n\nexport type MOrderStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MOrderStateAddOrderState\n}\n\nexport type MOrderStateAddOrderState = FOrderStateCategoryFragment &\n  FOrderTimingFragment\n\nexport type QLogoutWidgetVariables = {\n  readonly id: string\n}\n\nexport type QLogoutWidgetQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: QLogoutWidgetUser\n}\n\nexport type QLogoutWidgetUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type MAddOrderPromoVariables = {\n  readonly orderId: string\n  readonly code: string\n}\n\nexport type MAddOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderPromoCode: MAddOrderPromoAddOrderPromoCode\n}\n\nexport type MAddOrderPromoAddOrderPromoCode = {\n  readonly __typename?: 'OrderWithErrors'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MAddOrderPromoOrder\n}\n\nexport type MAddOrderPromoOrder = FCreateOrderFragment\n\nexport type MCancelOrderVariables = {\n  readonly orderId: string\n}\n\nexport type MCancelOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MCancelOrderAddOrderState\n}\n\nexport type MCancelOrderAddOrderState = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type MCreateOrderAcceptVariables = {\n  readonly orderId: string\n  readonly customer: InputCustomerCreate\n  readonly deliverAt?: Maybe<string>\n  readonly note?: Maybe<string>\n}\n\nexport type MCreateOrderAcceptMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: MCreateOrderAcceptFinishOrder\n}\n\nexport type MCreateOrderAcceptFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MCreateOrderAcceptOrder\n}\n\nexport type MCreateOrderAcceptOrder = FCreateOrderFragment\n\nexport type MCreateOrderAddRecipeVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderAddRecipeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrderRecipe: MCreateOrderAddRecipeCreateOrderRecipe\n}\n\nexport type MCreateOrderAddRecipeCreateOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderNewVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly callEventId?: Maybe<string>\n}\n\nexport type MCreateOrderNewMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrder: MCreateOrderNewCreateOrder\n}\n\nexport type MCreateOrderNewCreateOrder = FCreateOrderFragment\n\nexport type MCreateOrderRemoveItemVariables = {\n  readonly itemId: string\n}\n\nexport type MCreateOrderRemoveItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyOrderRecipe: MCreateOrderRemoveItemDestroyOrderRecipe\n}\n\nexport type MCreateOrderRemoveItemDestroyOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderUpdateVariables = {\n  readonly orderId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport type MCreateOrderUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MCreateOrderUpdateUpdateOrder\n}\n\nexport type MCreateOrderUpdateUpdateOrder = FCreateOrderFragment\n\nexport type MCreateOrderUpdateItemVariables = {\n  readonly itemId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderUpdateItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipe: MCreateOrderUpdateItemUpdateOrderRecipe\n}\n\nexport type MCreateOrderUpdateItemUpdateOrderRecipe = FCreateOrderFragment\n\nexport type MRemoveOrderPromoVariables = {\n  readonly orderId: string\n  readonly codeId: string\n}\n\nexport type MRemoveOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly removeOrderPromoCode: MRemoveOrderPromoRemoveOrderPromoCode\n}\n\nexport type MRemoveOrderPromoRemoveOrderPromoCode = FCreateOrderFragment\n\nexport type QCreateOrderItemVariables = {\n  readonly itemId: string\n}\n\nexport type QCreateOrderItemQuery = {\n  readonly __typename?: 'Query'\n\n  readonly item: QCreateOrderItemItem\n}\n\nexport type QCreateOrderItemItem = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItemRecipe\n\n  readonly selectedSidedishes: ReadonlyArray<QCreateOrderItemSelectedSidedishes>\n}\n\nexport type QCreateOrderItemRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QCreateOrderItemSelectedSidedishes = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItem_Recipe\n}\n\nexport type QCreateOrderItem_Recipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type QCreateOrderRecipeVariables = {\n  readonly recipeId: string\n}\n\nexport type QCreateOrderRecipeQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QCreateOrderRecipeRecipe\n}\n\nexport type QCreateOrderRecipeRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QOrderCartVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderCartQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderCartOrder\n}\n\nexport type QOrderCartOrder = FCreateOrderFragment\n\nexport type QOrderFormDeliverAtDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderFormDeliverAtDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly times: QOrderFormDeliverAtDefaultsTimes\n}\n\nexport type QOrderFormDeliverAtDefaultsTimes = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly deliveryTime: number\n\n  readonly pickupTime: number\n}\n\nexport type QOrderMenuVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderMenuQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orderMenu: ReadonlyArray<QOrderMenuOrderMenu>\n}\n\nexport type QOrderMenuOrderMenu = FOrderMenuCategoryFragment\n\nexport type QValidateLocationVariables = {\n  readonly branchId: string\n  readonly latitude: number\n  readonly longitude: number\n}\n\nexport type QValidateLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly resolveLocation: QValidateLocationResolveLocation\n}\n\nexport type QValidateLocationResolveLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly inDeliveryLocation: boolean\n\n  readonly zone: Maybe<QValidateLocationZone>\n}\n\nexport type QValidateLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly minimalOrderPrice: QValidateLocationMinimalOrderPrice\n}\n\nexport type QValidateLocationMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type MKitchenRecipeStateVariables = {\n  readonly recipeId: string\n  readonly state: OrderRecipeStateEnum\n}\n\nexport type MKitchenRecipeStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipeState: MKitchenRecipeStateUpdateOrderRecipeState\n}\n\nexport type MKitchenRecipeStateUpdateOrderRecipeState = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly orderRecipeState: MKitchenRecipeStateOrderRecipeState\n\n  readonly order: MKitchenRecipeStateOrder\n}\n\nexport type MKitchenRecipeStateOrderRecipeState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type MKitchenRecipeStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type QKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QKitchenOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QKitchenOrderListOrders>\n}\n\nexport type QKitchenOrderListOrders = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FKitchenOrderFragment\n\nexport type SKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SKitchenOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SKitchenOrderListUpdatedOrder\n}\n\nexport type SKitchenOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SKitchenOrderListOrder>\n}\n\nexport type SKitchenOrderListOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FKitchenOrderFragment\n\nexport type QUserBootstrapVariables = {\n  readonly userId: string\n}\n\nexport type QUserBootstrapQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: QUserBootstrapUser\n\n  readonly permissions: QUserBootstrapPermissions\n\n  readonly access: QUserBootstrapAccess\n}\n\nexport type QUserBootstrapUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly language: QUserBootstrapLanguage\n\n  readonly roles: ReadonlyArray<QUserBootstrapRoles>\n\n  readonly branches: ReadonlyArray<QUserBootstrapBranches>\n}\n\nexport type QUserBootstrapLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly rawCode: string\n}\n\nexport type QUserBootstrapRoles = {\n  readonly __typename?: 'Role'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type QUserBootstrapBranches = FCompanyBranchFragment\n\nexport type QUserBootstrapPermissions = {\n  readonly __typename?: 'UserPermission'\n\n  readonly canCancelOrders: boolean\n\n  readonly canCreateOrder: boolean\n}\n\nexport type QUserBootstrapAccess = {\n  readonly __typename?: '__Schema'\n\n  readonly queries: QUserBootstrapQueries\n\n  readonly mutations: Maybe<QUserBootstrapMutations>\n\n  readonly subscriptions: Maybe<QUserBootstrapSubscriptions>\n}\n\nexport type QUserBootstrapQueries = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrapFields>>\n}\n\nexport type QUserBootstrapFields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QUserBootstrapMutations = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrap_Fields>>\n}\n\nexport type QUserBootstrap_Fields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QUserBootstrapSubscriptions = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrap__Fields>>\n}\n\nexport type QUserBootstrap__Fields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QOrderCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n  readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type QOrderCountQuery = {\n  readonly __typename?: 'Query'\n\n  readonly ordersCount: number\n}\n\nexport type SOrderCallVariables = {}\n\nexport type SOrderCallSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly call: SOrderCallCall\n}\n\nexport type SOrderCallCall = {\n  readonly __typename?: 'UserCallingCustomerSubscription'\n\n  readonly eventId: string\n\n  readonly phone: string\n\n  readonly prefix: string\n\n  readonly isRinging: boolean\n}\n\nexport type SOrderCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n}\n\nexport type SOrderCountSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrdersCount: SOrderCountUpdatedOrdersCount\n}\n\nexport type SOrderCountUpdatedOrdersCount = {\n  readonly __typename?: 'OrderCountSubscription'\n\n  readonly ordersCount: number\n}\n\nexport type MMenuCategoryVisibilityVariables = {\n  readonly categoryId: string\n  readonly visible: boolean\n}\n\nexport type MMenuCategoryVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: MMenuCategoryVisibilityUpdateWareCategory\n}\n\nexport type MMenuCategoryVisibilityUpdateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type MMenuStockQuantityVariables = {\n  readonly stockItem: string\n  readonly quantityChange: number\n}\n\nexport type MMenuStockQuantityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly changeAmountStockItem: MMenuStockQuantityChangeAmountStockItem\n}\n\nexport type MMenuStockQuantityChangeAmountStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly quantity: number\n}\n\nexport type QMenuCategoryVariables = {\n  readonly categoryId: string\n}\n\nexport type QMenuCategoryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly category: QMenuCategoryCategory\n}\n\nexport type QMenuCategoryCategory = FMenuCategoryFragment\n\nexport type QMenuCategoryFilterVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuCategoryFilterQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryFilterCategories>\n}\n\nexport type QMenuCategoryFilterCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly countRecipes: number\n\n  readonly categoryType: QMenuCategoryFilterCategoryType\n}\n\nexport type QMenuCategoryFilterCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type QMenuCategoryListVariables = {\n  readonly branchId: string\n  readonly categoryType: WareCategoryTypeEnum\n}\n\nexport type QMenuCategoryListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryListCategories>\n}\n\nexport type QMenuCategoryListCategories = FMenuCategoryListItemFragment\n\nexport type QMenuGuideDownloadVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuGuideDownloadQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QMenuGuideDownloadCompanyBranch\n}\n\nexport type QMenuGuideDownloadCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly foodMenuUrl: Maybe<string>\n}\n\nexport type QMenuRecipeListVariables = {\n  readonly branchId: string\n  readonly categoryId?: Maybe<string>\n  readonly categoryType?: Maybe<WareCategoryTypeEnum>\n}\n\nexport type QMenuRecipeListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<QMenuRecipeListRecipes>\n}\n\nexport type QMenuRecipeListRecipes = FMenuRecipeFragment\n\nexport type QMenuStockDepositVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockDepositQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QMenuStockDepositStockItems>\n}\n\nexport type QMenuStockDepositStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly note: string\n\n  readonly quantity: number\n\n  readonly wareUnit: QMenuStockDepositWareUnit\n}\n\nexport type QMenuStockDepositWareUnit = FMenuWareUnitFragment\n\nexport type QMenuStockListVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QMenuStockListStockItems>\n}\n\nexport type QMenuStockListStockItems = GMenuStockItemFragment\n\nexport type QStockRecipesVariables = {\n  readonly stockId: string\n}\n\nexport type QStockRecipesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: QStockRecipesStockItem\n}\n\nexport type QStockRecipesStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly ingredients: ReadonlyArray<QStockRecipesIngredients>\n}\n\nexport type QStockRecipesIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly recipe: QStockRecipesRecipe\n}\n\nexport type QStockRecipesRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly recipeType: QStockRecipesRecipeType\n}\n\nexport type QStockRecipesRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type MBranchDefaultTimeVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly time: number\n}\n\nexport type MBranchDefaultTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateDefaultOrderProcessTime: MBranchDefaultTimeUpdateDefaultOrderProcessTime\n}\n\nexport type MBranchDefaultTimeUpdateDefaultOrderProcessTime = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type MOrderChangeToPickupVariables = {\n  readonly orderId: string\n}\n\nexport type MOrderChangeToPickupMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderDeliveryToPickup: MOrderChangeToPickupUpdateOrderDeliveryToPickup\n}\n\nexport type MOrderChangeToPickupUpdateOrderDeliveryToPickup = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliveryType: Maybe<MOrderChangeToPickupDeliveryType>\n}\n\nexport type MOrderChangeToPickupDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type MOrderTimeNotificationVariables = {\n  readonly orderId: string\n  readonly minutes: number\n}\n\nexport type MOrderTimeNotificationMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly orderNotifyCustomer: MOrderTimeNotificationOrderNotifyCustomer\n}\n\nexport type MOrderTimeNotificationOrderNotifyCustomer = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n}\n\nexport type MRemoveOrderDriverVariables = {\n  readonly orderDriverId: string\n}\n\nexport type MRemoveOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyUserDeliveringOrder: MRemoveOrderDriverDestroyUserDeliveringOrder\n}\n\nexport type MRemoveOrderDriverDestroyUserDeliveringOrder = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: MRemoveOrderDriverOrder\n}\n\nexport type MRemoveOrderDriverOrder = FOrderDriverFragment\n\nexport type MSelectOrderDriverVariables = {\n  readonly driverId: string\n  readonly orderId: string\n}\n\nexport type MSelectOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MSelectOrderDriverResult\n}\n\nexport type MSelectOrderDriverResult = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: MSelectOrderDriverOrder\n}\n\nexport type MSelectOrderDriverOrder = FOrderDriverFragment\n\nexport type QBranchDefeaultTimesVariables = {\n  readonly branchId: string\n}\n\nexport type QBranchDefeaultTimesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QBranchDefeaultTimesCompanyBranch\n}\n\nexport type QBranchDefeaultTimesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type QOrderDriversVariables = {\n  readonly orderId: string\n  readonly branchId: ReadonlyArray<string>\n}\n\nexport type QOrderDriversQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderDriversOrder\n\n  readonly drivers: ReadonlyArray<QOrderDriversDrivers>\n}\n\nexport type QOrderDriversOrder = FOrderDriverFragment\n\nexport type QOrderDriversDrivers = FDriverFragment\n\nexport type QOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QOrderMapDeliveriesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly deliveries: ReadonlyArray<QOrderMapDeliveriesDeliveries>\n}\n\nexport type QOrderMapDeliveriesDeliveries = FOrderMapDeliveryFragment\n\nexport type QOrderStateVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type QOrderStateQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderStateOrder\n\n  readonly companyBranch: QOrderStateCompanyBranch\n}\n\nexport type QOrderStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly deliveryType: Maybe<QOrderStateDeliveryType>\n\n  readonly isCancelable: boolean\n} & FOrderStateCategoryFragment\n\nexport type QOrderStateDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type QOrderStateCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowedCategories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type SOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type SOrderMapDeliveriesSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly update: SOrderMapDeliveriesUpdate\n}\n\nexport type SOrderMapDeliveriesUpdate = {\n  readonly __typename?: 'TransportationDeviceUserUpdateSubscription'\n\n  readonly actionType: SubscriptionActionType\n\n  readonly device: Maybe<SOrderMapDeliveriesDevice>\n}\n\nexport type SOrderMapDeliveriesDevice = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly user: SOrderMapDeliveriesUser\n} & FOrderMapDeviceFragment\n\nexport type SOrderMapDeliveriesUser = FOrderMapDriverFragment\n\nexport type MFinancialReportCreateVariables = {\n  readonly branchId: string\n}\n\nexport type MFinancialReportCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MFinancialReportCreateResult\n}\n\nexport type MFinancialReportCreateResult = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n}\n\nexport type QAllDriversVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QAllDriversQuery = {\n  readonly __typename?: 'Query'\n\n  readonly drivers: ReadonlyArray<QAllDriversDrivers>\n}\n\nexport type QAllDriversDrivers = FDriverFragment\n\nexport type QClosureHistoryVariables = {\n  readonly branchId: string\n  readonly dateFrom: string\n  readonly dateTo: string\n}\n\nexport type QClosureHistoryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly history: ReadonlyArray<QClosureHistoryHistory>\n}\n\nexport type QClosureHistoryHistory = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QClosureReportVariables = {\n  readonly branchId: string\n  readonly reportId: string\n  readonly showReport: boolean\n}\n\nexport type QClosureReportQuery = {\n  readonly __typename?: 'Query'\n\n  readonly lastReport: QClosureReportLastReport\n\n  readonly report: Maybe<QClosureReportReport>\n}\n\nexport type QClosureReportLastReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QClosureReportReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QStatsDailyVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsDailyQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsDailyStats\n}\n\nexport type QStatsDailyStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly category: string\n\n  readonly daily: string\n\n  readonly delivery: string\n\n  readonly drivers: string\n}\n\nexport type QStatsOrdersVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsOrdersQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersStats\n}\n\nexport type QStatsOrdersStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly finishedOrders: QStatsOrdersFinishedOrders\n\n  readonly orderStatisticsPlain: string\n}\n\nexport type QStatsOrdersFinishedOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly fees: QStatsOrdersFees\n\n  readonly onlinePayments: QStatsOrdersOnlinePayments\n\n  readonly total: QStatsOrdersTotal\n\n  readonly finishedCount: number\n\n  readonly cancelledCount: number\n}\n\nexport type QStatsOrdersFees = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersOnlinePayments = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersTotal = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersCountsVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsOrdersCountsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersCountsStats\n}\n\nexport type QStatsOrdersCountsStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly counts: QStatsOrdersCountsCounts\n}\n\nexport type QStatsOrdersCountsCounts = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly finished: number\n\n  readonly cancelled: number\n}\n\nexport type QStatsOrdersListVariables = {\n  readonly filter: InputStatisticCreate\n  readonly pagination?: Maybe<InputPaginationParams>\n}\n\nexport type QStatsOrdersListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersListStats\n}\n\nexport type QStatsOrdersListStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly orders: QStatsOrdersListOrders\n}\n\nexport type QStatsOrdersListOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly list: ReadonlyArray<QStatsOrdersListList>\n}\n\nexport type QStatsOrdersListList = GOrderListTickerFragment &\n  FOrderStateCategoryFragment\n\nexport type MUserMenuLanguageVariables = {\n  readonly userId: string\n  readonly lang: LanguageEnum\n}\n\nexport type MUserMenuLanguageMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateUser: MUserMenuLanguageUpdateUser\n}\n\nexport type MUserMenuLanguageUpdateUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly language: MUserMenuLanguageLanguage\n}\n\nexport type MUserMenuLanguageLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly enum: LanguageEnum\n}\n\nexport type QUserMenuLanguagesVariables = {}\n\nexport type QUserMenuLanguagesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly languages: ReadonlyArray<QUserMenuLanguagesLanguages>\n}\n\nexport type QUserMenuLanguagesLanguages = {\n  readonly __typename?: 'Language'\n\n  readonly code: string\n\n  readonly enum: LanguageEnum\n\n  readonly rawCode: string\n}\n\nexport type MZoneUpdateVariables = {\n  readonly zoneId: string\n  readonly update: InputZoneUpdate\n}\n\nexport type MZoneUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZone: MZoneUpdateUpdateZone\n}\n\nexport type MZoneUpdateUpdateZone = FZoneFragment\n\nexport type GSpecificBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly companyBranch: GSpecificBusinessHourCompanyBranch\n\n  readonly specificDate: Maybe<string>\n\n  readonly specificDateLocalized: Maybe<string>\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n\n  readonly openAt: string\n\n  readonly closeAt: string\n}\n\nexport type GSpecificBusinessHourCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type GMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly visible: boolean\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly availableAmount: number\n\n  readonly prices: ReadonlyArray<GMenuRecipePrices>\n\n  readonly recipeType: GMenuRecipeRecipeType\n}\n\nexport type GMenuRecipePrices = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipePriceType\n\n  readonly price: GMenuRecipePrice\n}\n\nexport type GMenuRecipePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n} & FPriceFragment\n\nexport type GMenuRecipeRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuStockItemFragment = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly note: string\n\n  readonly plu: Maybe<string>\n\n  readonly quantity: number\n\n  readonly nameLabel: string\n\n  readonly allergens: ReadonlyArray<GMenuStockItemAllergens>\n\n  readonly wareUnit: GMenuStockItemWareUnit\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockItemAllergens = FMenuAllergenFragment\n\nexport type GMenuStockItemWareUnit = FMenuWareUnitFragment\n\nexport type GMenuRecipePriceFragment = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipePricePriceType\n\n  readonly price: GMenuRecipePricePrice\n\n  readonly vat: GMenuRecipePriceVat\n}\n\nexport type GMenuRecipePricePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipePricePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly currency: GMenuRecipePriceCurrency\n} & FPriceFragment\n\nexport type GMenuRecipePriceCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GMenuRecipePriceVat = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n}\n\nexport type GMenuAssocRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n}\n\nexport type GOrderListTickerFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly isPaidWithCard: boolean\n\n  readonly deliveryType: Maybe<GOrderListTickerDeliveryType>\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliverAtWorst: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly companyBranch: GOrderListTickerCompanyBranch\n\n  readonly address: GOrderListTickerAddress\n\n  readonly customer: GOrderListTickerCustomer\n\n  readonly totalSum: GOrderListTickerTotalSum\n}\n\nexport type GOrderListTickerDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type GOrderListTickerCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly oldOrderThreshold: number\n}\n\nexport type GOrderListTickerAddress = FAddressFragment\n\nexport type GOrderListTickerCustomer = FCustomerFragment\n\nexport type GOrderListTickerTotalSum = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: GOrderListTickerCurrency\n}\n\nexport type GOrderListTickerCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GOrderDetailWareFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: GOrderDetailWareRecipe\n\n  readonly price: GOrderDetailWarePrice\n}\n\nexport type GOrderDetailWareRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type GOrderDetailWarePrice = FPriceFragment\n\nexport type GOrderMarkerFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly gps: Maybe<GOrderMarkerGps>\n}\n\nexport type GOrderMarkerGps = FGeoPointFragment\n\nexport type FAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly state: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n}\n\nexport type FCompanyBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly address: FCompanyBranchAddress\n\n  readonly gps: FCompanyBranchGps\n\n  readonly brand: FCompanyBranchBrand\n}\n\nexport type FCompanyBranchAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<FCompanyBranchCountry>\n}\n\nexport type FCompanyBranchCountry = {\n  readonly __typename?: 'Country'\n\n  readonly phonePrefix: string\n}\n\nexport type FCompanyBranchGps = FGeoPointFragment\n\nexport type FCompanyBranchBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FCustomerFragment = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly defaultEmail: Maybe<FCustomerDefaultEmail>\n\n  readonly defaultPhone: Maybe<FCustomerDefaultPhone>\n}\n\nexport type FCustomerDefaultEmail = FEmailFragment\n\nexport type FCustomerDefaultPhone = FPhoneFragment\n\nexport type FEmailFragment = {\n  readonly __typename?: 'Email'\n\n  readonly email: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FGeoPointFragment = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type FOrderStateCategoryFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type FPhoneFragment = {\n  readonly __typename?: 'Phone'\n\n  readonly phone: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n}\n\nexport type FPriceWithCurrencyFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FPriceWithCurrencyCurrency\n}\n\nexport type FPriceWithCurrencyCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FUserNameFragment = {\n  readonly __typename?: 'User'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type FCreateOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly items: ReadonlyArray<FCreateOrderItems>\n\n  readonly coverPrice: FCreateOrderCoverPrice\n\n  readonly transportFee: FCreateOrderTransportFee\n\n  readonly discounts: ReadonlyArray<FCreateOrderDiscounts>\n\n  readonly minimalOrderPrice: Maybe<FCreateOrderMinimalOrderPrice>\n\n  readonly totalDiscount: FCreateOrderTotalDiscount\n\n  readonly totalSum: FCreateOrderTotalSum\n}\n\nexport type FCreateOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly recipe: FCreateOrderRecipe\n\n  readonly priceWithSidedishes: FCreateOrderPriceWithSidedishes\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderSidedishes>\n} & FCreateOrderItemFragment\n\nexport type FCreateOrderRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly sidedishCount: number\n}\n\nexport type FCreateOrderPriceWithSidedishes = FPriceFragment\n\nexport type FCreateOrderSidedishes = FCreateOrderItemFragment\n\nexport type FCreateOrderCoverPrice = FPriceFragment\n\nexport type FCreateOrderTransportFee = FPriceFragment\n\nexport type FCreateOrderDiscounts = {\n  readonly __typename?: 'PriceWithDescription'\n\n  readonly code: string\n\n  readonly description: string\n\n  readonly price: FCreateOrderPrice\n}\n\nexport type FCreateOrderPrice = FPriceFragment\n\nexport type FCreateOrderMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type FCreateOrderTotalDiscount = FPriceFragment\n\nexport type FCreateOrderTotalSum = FPriceFragment\n\nexport type FCreateOrderItemFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly price: FCreateOrderItemPrice\n\n  readonly recipe: FCreateOrderItemRecipe\n}\n\nexport type FCreateOrderItemPrice = FPriceFragment\n\nexport type FCreateOrderItemRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FCreateOrderRecipeSidedishesFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly sidedishCategories: ReadonlyArray<\n    FCreateOrderRecipeSidedishesSidedishCategories\n  >\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderRecipeSidedishesSidedishes>\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly price: FCreateOrderRecipeSidedishesPrice\n}\n\nexport type FCreateOrderRecipeSidedishesPrice = FPriceFragment\n\nexport type FOrderMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly pictogram: Maybe<string>\n\n  readonly recipes: ReadonlyArray<FOrderMenuCategoryRecipes>\n}\n\nexport type FOrderMenuCategoryRecipes = FOrderMenuRecipeFragment\n\nexport type FOrderMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly price: FOrderMenuRecipePrice\n\n  readonly sidedishCount: number\n}\n\nexport type FOrderMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FOrderMenuRecipeCurrency\n}\n\nexport type FOrderMenuRecipeCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FKitchenOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly deliveryType: Maybe<FKitchenOrderDeliveryType>\n\n  readonly companyBranch: FKitchenOrderCompanyBranch\n\n  readonly address: FKitchenOrderAddress\n\n  readonly customer: FKitchenOrderCustomer\n\n  readonly note: Maybe<string>\n\n  readonly previousNote: Maybe<string>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n\n  readonly items: ReadonlyArray<FKitchenOrderItems>\n}\n\nexport type FKitchenOrderDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FKitchenOrderCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FKitchenOrderAddress = FAddressFragment\n\nexport type FKitchenOrderCustomer = FCustomerFragment\n\nexport type FKitchenOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<FKitchenOrderSidedishes>\n} & FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderSidedishes = FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderRecipeFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly orderRecipeState: FKitchenOrderRecipeOrderRecipeState\n\n  readonly recipe: FKitchenOrderRecipeRecipe\n}\n\nexport type FKitchenOrderRecipeOrderRecipeState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type FKitchenOrderRecipeRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FMenuAllergenFragment = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: AllergenEnum\n\n  readonly category: number\n}\n\nexport type FMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly visible: boolean\n\n  readonly categoryType: FMenuCategoryCategoryType\n\n  readonly pictogram: Maybe<string>\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly recipes: ReadonlyArray<FMenuCategoryRecipes>\n}\n\nexport type FMenuCategoryCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuCategoryRecipes = FMenuRecipeFragment\n\nexport type FMenuCategoryListItemFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly countRecipes: number\n\n  readonly visible: boolean\n\n  readonly categoryType: FMenuCategoryListItemCategoryType\n}\n\nexport type FMenuCategoryListItemCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly visible: boolean\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly availableAmount: number\n\n  readonly prices: ReadonlyArray<FMenuRecipePrices>\n\n  readonly recipeType: FMenuRecipeRecipeType\n}\n\nexport type FMenuRecipePrices = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: FMenuRecipePriceType\n\n  readonly price: FMenuRecipePrice\n}\n\nexport type FMenuRecipePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type FMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n} & FPriceFragment\n\nexport type FMenuRecipeRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuRecipePricingFragment = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: FMenuRecipePricingPriceType\n\n  readonly price: FMenuRecipePricingPrice\n\n  readonly vat: FMenuRecipePricingVat\n}\n\nexport type FMenuRecipePricingPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type FMenuRecipePricingPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly currency: FMenuRecipePricingCurrency\n} & FPriceFragment\n\nexport type FMenuRecipePricingCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FMenuRecipePricingVat = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n}\n\nexport type FMenuWareUnitFragment = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly enum: WareUnitEnum\n\n  readonly code: string\n}\n\nexport type FDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n} & FUserNameFragment\n\nexport type FOrderDriverFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly driver: Maybe<FOrderDriverDriver>\n}\n\nexport type FOrderDriverDriver = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly id: string\n\n  readonly user: FOrderDriverUser\n}\n\nexport type FOrderDriverUser = FDriverFragment\n\nexport type FOrderMapDeliveryFragment = {\n  readonly __typename?: 'User'\n\n  readonly device: Maybe<FOrderMapDeliveryDevice>\n} & FOrderMapDriverFragment\n\nexport type FOrderMapDeliveryDevice = FOrderMapDeviceFragment\n\nexport type FOrderMapDeviceFragment = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly id: string\n\n  readonly lastPosition: Maybe<FOrderMapDeviceLastPosition>\n\n  readonly isFinalized: boolean\n}\n\nexport type FOrderMapDeviceLastPosition = {\n  readonly __typename?: 'GeoPositionWithTimestamp'\n\n  readonly gps: FOrderMapDeviceGps\n\n  readonly timestamp: string\n}\n\nexport type FOrderMapDeviceGps = FGeoPointFragment\n\nexport type FOrderMapDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n\n  readonly countUndeliveredOrders: number\n}\n\nexport type FOrderTimingFragment = {\n  readonly __typename?: 'Order'\n\n  readonly orderTiming: ReadonlyArray<FOrderTimingOrderTiming>\n}\n\nexport type FOrderTimingOrderTiming = {\n  readonly __typename?: 'OrderStateCategoryRelation'\n\n  readonly createdAt: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type FZoneFragment = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly enabled: boolean\n\n  readonly priority: number\n\n  readonly companyBranch: FZoneCompanyBranch\n\n  readonly geoPolygon: ReadonlyArray<FZoneGeoPolygon>\n\n  readonly priceRangeRules: ReadonlyArray<FZonePriceRangeRules>\n\n  readonly minimalOrderPrice: FZoneMinimalOrderPrice\n\n  readonly zoneColor: FZoneZoneColor\n}\n\nexport type FZoneCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly brand: FZoneBrand\n}\n\nexport type FZoneBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type FZoneGeoPolygon = FGeoPointFragment\n\nexport type FZonePriceRangeRules = FZonePriceRangeFragment\n\nexport type FZoneMinimalOrderPrice = FPriceFragment\n\nexport type FZoneZoneColor = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type FZonePriceRangeFragment = {\n  readonly __typename?: 'ZonePriceRangeRule'\n\n  readonly toPrice: FZonePriceRangeToPrice\n\n  readonly price: FZonePriceRangePrice\n}\n\nexport type FZonePriceRangeToPrice = FPriceFragment\n\nexport type FZonePriceRangePrice = FPriceFragment\n\nimport * as Hooks from '@speedlo/graphql'\nimport gql from 'graphql-tag'\n\n// ====================================================\n// Fragments\n// ====================================================\n\nexport const GSpecificBusinessHourFragmentDoc = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const FPriceFragmentDoc = gql`\n  fragment FPrice on PriceConverted {\n    value\n  }\n`\n\nexport const GMenuRecipeFragmentDoc = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FMenuAllergenFragmentDoc = gql`\n  fragment FMenuAllergen on Allergen {\n    id\n    code\n    enum\n    category\n  }\n`\n\nexport const FMenuWareUnitFragmentDoc = gql`\n  fragment FMenuWareUnit on WareUnit {\n    id\n    enum\n    code\n  }\n`\n\nexport const GMenuStockItemFragmentDoc = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...FMenuAllergen\n    }\n    wareUnit {\n      ...FMenuWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n\n  ${FMenuAllergenFragmentDoc}\n  ${FMenuWareUnitFragmentDoc}\n`\n\nexport const GMenuRecipePriceFragmentDoc = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const GMenuAssocRecipeFragmentDoc = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const FAddressFragmentDoc = gql`\n  fragment FAddress on JsonAddress {\n    state\n    city\n    street\n    houseNumber\n  }\n`\n\nexport const FEmailFragmentDoc = gql`\n  fragment FEmail on Email {\n    email\n    description\n    default\n  }\n`\n\nexport const FPhoneFragmentDoc = gql`\n  fragment FPhone on Phone {\n    phone\n    description\n    default\n  }\n`\n\nexport const FCustomerFragmentDoc = gql`\n  fragment FCustomer on JsonCustomer {\n    firstName\n    lastName\n    defaultEmail {\n      ...FEmail\n    }\n    defaultPhone {\n      ...FPhone\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n`\n\nexport const GOrderListTickerFragmentDoc = gql`\n  fragment GOrderListTicker on Order {\n    id\n    createdAt\n    isPaidWithCard\n    deliveryType {\n      enum\n    }\n    deliverAt\n    deliverAtWorst\n    deliveredAt\n    delayedDeliveryTime\n    companyBranch {\n      id\n      name\n      oldOrderThreshold\n    }\n    address {\n      ...FAddress\n    }\n    customer {\n      ...FCustomer\n    }\n    totalSum {\n      value\n      currency {\n        code\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n`\n\nexport const GOrderDetailWareFragmentDoc = gql`\n  fragment GOrderDetailWare on OrderRecipe {\n    id\n    recipe {\n      id\n      code\n      nameLabel\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FGeoPointFragmentDoc = gql`\n  fragment FGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const GOrderMarkerFragmentDoc = gql`\n  fragment GOrderMarker on Order {\n    id\n    deliverAt\n    delayedDeliveryTime\n    gps {\n      ...FGeoPoint\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FCompanyBranchFragmentDoc = gql`\n  fragment FCompanyBranch on CompanyBranch {\n    id\n    name\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    gps {\n      ...FGeoPoint\n    }\n    brand {\n      id\n      name\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderStateCategoryFragmentDoc = gql`\n  fragment FOrderStateCategory on Order {\n    id\n    orderStateCategory\n  }\n`\n\nexport const FPriceWithCurrencyFragmentDoc = gql`\n  fragment FPriceWithCurrency on PriceConverted {\n    value\n    currency {\n      code\n    }\n  }\n`\n\nexport const FCreateOrderItemFragmentDoc = gql`\n  fragment FCreateOrderItem on OrderRecipe {\n    id\n    price {\n      ...FPrice\n    }\n    recipe {\n      id\n      code\n      nameLabel\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderFragmentDoc = gql`\n  fragment FCreateOrder on Order {\n    id\n    countWares\n    items {\n      ...FCreateOrderItem\n      recipe {\n        sidedishCount: sideDishesWareCategoriesCount\n      }\n      priceWithSidedishes: priceWithSideDishes {\n        ...FPrice\n      }\n      sidedishes: sideDishes {\n        ...FCreateOrderItem\n      }\n    }\n    coverPrice {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...FPrice\n      }\n    }\n    minimalOrderPrice {\n      formattedValue\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    totalSum {\n      ...FPrice\n    }\n  }\n\n  ${FCreateOrderItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderRecipeSidedishesFragmentDoc = gql`\n  fragment FCreateOrderRecipeSidedishes on Recipe {\n    id\n    nameLabel\n    sidedishCategories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sidedishes: sideDishes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderMenuRecipeFragmentDoc = gql`\n  fragment FOrderMenuRecipe on Recipe {\n    id\n    code\n    nameLabel\n    descriptionLabel\n    price(warePriceType: DELIVERY) {\n      value\n      currency {\n        code\n      }\n    }\n    sidedishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const FOrderMenuCategoryFragmentDoc = gql`\n  fragment FOrderMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n    recipes(enabled: true, isAvailable: true) {\n      ...FOrderMenuRecipe\n    }\n  }\n\n  ${FOrderMenuRecipeFragmentDoc}\n`\n\nexport const FKitchenOrderRecipeFragmentDoc = gql`\n  fragment FKitchenOrderRecipe on OrderRecipe {\n    id\n    orderRecipeState {\n      enum\n    }\n    recipe {\n      id\n      code\n      nameLabel\n    }\n  }\n`\n\nexport const FKitchenOrderFragmentDoc = gql`\n  fragment FKitchenOrder on Order {\n    id\n    deliverAt\n    deliveredAt\n    delayedDeliveryTime\n    deliveryType {\n      enum\n    }\n    companyBranch {\n      id\n      name\n    }\n    address {\n      ...FAddress\n    }\n    customer {\n      ...FCustomer\n    }\n    note\n    previousNote\n    orderStateCategory(target: FE_KITCHEN)\n    items {\n      ...FKitchenOrderRecipe\n      sidedishes: sideDishes {\n        ...FKitchenOrderRecipe\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n  ${FKitchenOrderRecipeFragmentDoc}\n`\n\nexport const FMenuRecipeFragmentDoc = gql`\n  fragment FMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FMenuCategoryFragmentDoc = gql`\n  fragment FMenuCategory on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    pictogram\n    minCount\n    maxCount\n    recipes {\n      ...FMenuRecipe\n    }\n  }\n\n  ${FMenuRecipeFragmentDoc}\n`\n\nexport const FMenuCategoryListItemFragmentDoc = gql`\n  fragment FMenuCategoryListItem on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    countRecipes\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n  }\n`\n\nexport const FMenuRecipePricingFragmentDoc = gql`\n  fragment FMenuRecipePricing on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FUserNameFragmentDoc = gql`\n  fragment FUserName on User {\n    firstName\n    lastName\n  }\n`\n\nexport const FDriverFragmentDoc = gql`\n  fragment FDriver on User {\n    id\n    initials\n    ...FUserName\n  }\n\n  ${FUserNameFragmentDoc}\n`\n\nexport const FOrderDriverFragmentDoc = gql`\n  fragment FOrderDriver on Order {\n    id\n    driver: userDeliveringOrder {\n      id\n      user {\n        ...FDriver\n      }\n    }\n  }\n\n  ${FDriverFragmentDoc}\n`\n\nexport const FOrderMapDriverFragmentDoc = gql`\n  fragment FOrderMapDriver on User {\n    id\n    initials\n    countUndeliveredOrders\n  }\n`\n\nexport const FOrderMapDeviceFragmentDoc = gql`\n  fragment FOrderMapDevice on TransportationDeviceUser {\n    id\n    lastPosition {\n      gps: geoPosition {\n        ...FGeoPoint\n      }\n      timestamp\n    }\n    isFinalized\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderMapDeliveryFragmentDoc = gql`\n  fragment FOrderMapDelivery on User {\n    ...FOrderMapDriver\n    device: usedTransportationDevice {\n      ...FOrderMapDevice\n    }\n  }\n\n  ${FOrderMapDriverFragmentDoc}\n  ${FOrderMapDeviceFragmentDoc}\n`\n\nexport const FOrderTimingFragmentDoc = gql`\n  fragment FOrderTiming on Order {\n    orderTiming: orderStateCategoryRelations {\n      createdAt\n      orderStateCategory\n    }\n  }\n`\n\nexport const FZonePriceRangeFragmentDoc = gql`\n  fragment FZonePriceRange on ZonePriceRangeRule {\n    toPrice {\n      ...FPrice\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FZoneFragmentDoc = gql`\n  fragment FZone on Zone {\n    id\n    name\n    enabled\n    priority\n    companyBranch {\n      id\n      brand {\n        id\n      }\n    }\n    geoPolygon {\n      ...FGeoPoint\n    }\n    priceRangeRules {\n      ...FZonePriceRange\n    }\n    minimalOrderPrice {\n      ...FPrice\n    }\n    zoneColor {\n      id\n      code\n      color\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n  ${FZonePriceRangeFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\n// ====================================================\n// Hooks\n// ====================================================\n\nexport const MPasswordChangeDocument = gql`\n  mutation MPasswordChange($password: String!) {\n    updateUserPassword(newPassword: $password) {\n      id\n      token\n    }\n  }\n`\n\nexport function useMPasswordChange(\n  baseOptions?: Hooks.MutationHookOptions<\n    MPasswordChangeMutation,\n    MPasswordChangeVariables\n  >,\n) {\n  return Hooks.useMutation<MPasswordChangeMutation, MPasswordChangeVariables>(\n    MPasswordChangeDocument,\n    baseOptions,\n  )\n}\n\nexport const GCreateSpecificBusinessHourDocument = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n\n  ${GSpecificBusinessHourFragmentDoc}\n`\n\nexport function useGCreateSpecificBusinessHour(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateSpecificBusinessHourMutation,\n    GCreateSpecificBusinessHourVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreateSpecificBusinessHourMutation,\n    GCreateSpecificBusinessHourVariables\n  >(GCreateSpecificBusinessHourDocument, baseOptions)\n}\n\nexport const GDeleteSpecificBusinessHourDocument = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n\nexport function useGDeleteSpecificBusinessHour(\n  baseOptions?: Hooks.MutationHookOptions<\n    GDeleteSpecificBusinessHourMutation,\n    GDeleteSpecificBusinessHourVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GDeleteSpecificBusinessHourMutation,\n    GDeleteSpecificBusinessHourVariables\n  >(GDeleteSpecificBusinessHourDocument, baseOptions)\n}\n\nexport const GSpecificBusinessHoursDocument = gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n\n  ${GSpecificBusinessHourFragmentDoc}\n`\n\nexport function useGSpecificBusinessHours(\n  variables?: GSpecificBusinessHoursVariables,\n  baseOptions?: Hooks.QueryHookOptions<GSpecificBusinessHoursVariables>,\n) {\n  return Hooks.useQuery<\n    GSpecificBusinessHoursQuery,\n    GSpecificBusinessHoursVariables\n  >(GSpecificBusinessHoursDocument, variables, baseOptions)\n}\n\nexport const GOrderVamDocument = gql`\n  query GOrderVam($branchId: ID!, $phone: String!) {\n    vamCustomer: vamInformation(companyBranchId: $branchId, phone: $phone) {\n      isFound\n      email\n      firstName\n      lastName\n      lastOrder {\n        note\n      }\n      locations {\n        street\n        houseNumber\n        city\n        state\n        gps {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n`\n\nexport function useGOrderVam(\n  variables?: GOrderVamVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderVamVariables>,\n) {\n  return Hooks.useQuery<GOrderVamQuery, GOrderVamVariables>(\n    GOrderVamDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderPromoDocument = gql`\n  query GOrderPromo($branchId: ID!) {\n    promoCodes(promoCode: { companyBranch: $branchId, enabled: true }) {\n      id\n      code\n    }\n  }\n`\n\nexport function useGOrderPromo(\n  variables?: GOrderPromoVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderPromoVariables>,\n) {\n  return Hooks.useQuery<GOrderPromoQuery, GOrderPromoVariables>(\n    GOrderPromoDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GSortMenuCategoryDocument = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport function useGSortMenuCategory(\n  baseOptions?: Hooks.MutationHookOptions<\n    GSortMenuCategoryMutation,\n    GSortMenuCategoryVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GSortMenuCategoryMutation,\n    GSortMenuCategoryVariables\n  >(GSortMenuCategoryDocument, baseOptions)\n}\n\nexport const GMenuCategoryCreateDocument = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport function useGMenuCategoryCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryCreateMutation,\n    GMenuCategoryCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryCreateMutation,\n    GMenuCategoryCreateVariables\n  >(GMenuCategoryCreateDocument, baseOptions)\n}\n\nexport const GMenuCategoryUpdateDocument = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...FMenuCategory\n    }\n  }\n\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport function useGMenuCategoryUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryUpdateMutation,\n    GMenuCategoryUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryUpdateMutation,\n    GMenuCategoryUpdateVariables\n  >(GMenuCategoryUpdateDocument, baseOptions)\n}\n\nexport const GMenuCategoryDeleteDocument = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuCategoryDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryDeleteMutation,\n    GMenuCategoryDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryDeleteMutation,\n    GMenuCategoryDeleteVariables\n  >(GMenuCategoryDeleteDocument, baseOptions)\n}\n\nexport const GMenuRecipeVisibilityDocument = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useGMenuRecipeVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeVisibilityMutation,\n    GMenuRecipeVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeVisibilityMutation,\n    GMenuRecipeVisibilityVariables\n  >(GMenuRecipeVisibilityDocument, baseOptions)\n}\n\nexport const GMenuRecipeCreateDocument = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeCreateMutation,\n    GMenuRecipeCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeCreateMutation,\n    GMenuRecipeCreateVariables\n  >(GMenuRecipeCreateDocument, baseOptions)\n}\n\nexport const GMenuRecipeUpdateDocument = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeUpdateMutation,\n    GMenuRecipeUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeUpdateMutation,\n    GMenuRecipeUpdateVariables\n  >(GMenuRecipeUpdateDocument, baseOptions)\n}\n\nexport const GMenuRecipeDeleteDocument = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuRecipeDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeDeleteMutation,\n    GMenuRecipeDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeDeleteMutation,\n    GMenuRecipeDeleteVariables\n  >(GMenuRecipeDeleteDocument, baseOptions)\n}\n\nexport const GMenuStockCreateDocument = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockCreateMutation,\n    GMenuStockCreateVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockCreateMutation, GMenuStockCreateVariables>(\n    GMenuStockCreateDocument,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockUpdateDocument = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockUpdateMutation,\n    GMenuStockUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockUpdateMutation, GMenuStockUpdateVariables>(\n    GMenuStockUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockDeleteDocument = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuStockDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockDeleteMutation,\n    GMenuStockDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockDeleteMutation, GMenuStockDeleteVariables>(\n    GMenuStockDeleteDocument,\n    baseOptions,\n  )\n}\n\nexport const GAllergensDocument = gql`\n  query GAllergens {\n    allergens {\n      ...FMenuAllergen\n    }\n  }\n\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport function useGAllergens(\n  variables?: GAllergensVariables,\n  baseOptions?: Hooks.QueryHookOptions<GAllergensVariables>,\n) {\n  return Hooks.useQuery<GAllergensQuery, GAllergensVariables>(\n    GAllergensDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCurrenciesDocument = gql`\n  query GCurrencies($branchId: ID!) {\n    currencies {\n      enum\n      code\n    }\n    companyBranch(id: $branchId) {\n      address {\n        country {\n          currency {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useGCurrencies(\n  variables?: GCurrenciesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GCurrenciesVariables>,\n) {\n  return Hooks.useQuery<GCurrenciesQuery, GCurrenciesVariables>(\n    GCurrenciesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GVatsDocument = gql`\n  query GVats($branchId: ID!) {\n    vats(companyBranch: $branchId) {\n      id\n      vat\n    }\n  }\n`\n\nexport function useGVats(\n  variables?: GVatsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GVatsVariables>,\n) {\n  return Hooks.useQuery<GVatsQuery, GVatsVariables>(\n    GVatsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GWareUnitsDocument = gql`\n  query GWareUnits {\n    wareUnits {\n      id\n      code\n      enum\n    }\n  }\n`\n\nexport function useGWareUnits(\n  variables?: GWareUnitsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GWareUnitsVariables>,\n) {\n  return Hooks.useQuery<GWareUnitsQuery, GWareUnitsVariables>(\n    GWareUnitsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuRecipeFormDocument = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...FMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...FMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n\n  ${GMenuRecipePriceFragmentDoc}\n  ${FMenuCategoryListItemFragmentDoc}\n  ${GMenuAssocRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeForm(\n  variables?: GMenuRecipeFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeFormVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeFormQuery, GMenuRecipeFormVariables>(\n    GMenuRecipeFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuRecipeFormAssocDocument = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n\n  ${GMenuAssocRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeFormAssoc(\n  variables?: GMenuRecipeFormAssocVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeFormAssocVariables>,\n) {\n  return Hooks.useQuery<\n    GMenuRecipeFormAssocQuery,\n    GMenuRecipeFormAssocVariables\n  >(GMenuRecipeFormAssocDocument, variables, baseOptions)\n}\n\nexport const GMenuRecipeDefaultsDocument = gql`\n  query GMenuRecipeDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport function useGMenuRecipeDefaults(\n  variables?: GMenuRecipeDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeDefaultsVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeDefaultsQuery, GMenuRecipeDefaultsVariables>(\n    GMenuRecipeDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockFormDocument = gql`\n  query GMenuStockForm($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      code\n      plu\n      note\n      nameLabel: label\n      allowNegative\n      wareUnit {\n        ...FMenuWareUnit\n      }\n      allergens {\n        ...FMenuAllergen\n      }\n      companyBranch {\n        id\n        allowNegative: stockItemsCanBeNegative\n      }\n    }\n  }\n\n  ${FMenuWareUnitFragmentDoc}\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport function useGMenuStockForm(\n  variables?: GMenuStockFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockFormVariables>,\n) {\n  return Hooks.useQuery<GMenuStockFormQuery, GMenuStockFormVariables>(\n    GMenuStockFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockDefaultsDocument = gql`\n  query GMenuStockDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      allowNegative: stockItemsCanBeNegative\n    }\n  }\n`\n\nexport function useGMenuStockDefaults(\n  variables?: GMenuStockDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockDefaultsVariables>,\n) {\n  return Hooks.useQuery<GMenuStockDefaultsQuery, GMenuStockDefaultsVariables>(\n    GMenuStockDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderBranchLocationDocument = gql`\n  query GOrderBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGOrderBranchLocation(\n  variables?: GOrderBranchLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderBranchLocationVariables>,\n) {\n  return Hooks.useQuery<\n    GOrderBranchLocationQuery,\n    GOrderBranchLocationVariables\n  >(GOrderBranchLocationDocument, variables, baseOptions)\n}\n\nexport const GOrderLocationDocument = gql`\n  query GOrderLocation($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGOrderLocation(\n  variables?: GOrderLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderLocationVariables>,\n) {\n  return Hooks.useQuery<GOrderLocationQuery, GOrderLocationVariables>(\n    GOrderLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderDetailDocument = gql`\n  query GOrderDetail($id: ID!) {\n    order(id: $id) {\n      id\n      createdAt\n      deliverAt\n      delayedDeliveryTime\n      companyBranch {\n        id\n      }\n      customer {\n        emails {\n          ...FEmail\n        }\n        phones {\n          ...FPhone\n        }\n      }\n      customerOrdersCountCurrent\n      customerOrdersCountTotal\n      note\n      previousNote\n      allAppliedRules\n      items {\n        ...GOrderDetailWare\n        sidedishes: sideDishes {\n          ...GOrderDetailWare\n        }\n      }\n      totalSum {\n        ...FPrice\n      }\n      transportFee {\n        ...FPrice\n      }\n      coverPrice {\n        ...FPrice\n      }\n      totalDiscount {\n        ...FPrice\n      }\n      orderOrigin {\n        code\n        enum\n      }\n      tip {\n        ...FPrice\n      }\n      ...FOrderTiming\n      ...FOrderDriver\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n  ${GOrderDetailWareFragmentDoc}\n  ${FPriceFragmentDoc}\n  ${FOrderTimingFragmentDoc}\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useGOrderDetail(\n  variables?: GOrderDetailVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderDetailVariables>,\n) {\n  return Hooks.useQuery<GOrderDetailQuery, GOrderDetailVariables>(\n    GOrderDetailDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderListDocument = gql`\n  query GOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n    $includeOldFinished: Boolean\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoriesOR: $categories\n        includeOldFinished: $includeOldFinished\n      }\n    ) {\n      id\n      ...FOrderStateCategory\n      ...GOrderListTicker\n      ...GOrderMarker\n    }\n    orderStateCategories {\n      code\n      enum\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${GOrderListTickerFragmentDoc}\n  ${GOrderMarkerFragmentDoc}\n`\n\nexport function useGOrderList(\n  variables?: GOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderListVariables>,\n) {\n  return Hooks.useQuery<GOrderListQuery, GOrderListVariables>(\n    GOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderListDocument = gql`\n  subscription SOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        id\n        ...FOrderStateCategory\n        ...GOrderListTicker\n        ...GOrderMarker\n      }\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${GOrderListTickerFragmentDoc}\n  ${GOrderMarkerFragmentDoc}\n`\n\nexport function useSOrderList(\n  variables?: SOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderListSubscription,\n    SOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderListSubscription, SOrderListVariables>(\n    SOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCreateZoneDocument = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useGCreateZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateZoneMutation,\n    GCreateZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GCreateZoneMutation, GCreateZoneVariables>(\n    GCreateZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GUpdateZonePriorityDocument = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport function useGUpdateZonePriority(\n  baseOptions?: Hooks.MutationHookOptions<\n    GUpdateZonePriorityMutation,\n    GUpdateZonePriorityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GUpdateZonePriorityMutation,\n    GUpdateZonePriorityVariables\n  >(GUpdateZonePriorityDocument, baseOptions)\n}\n\nexport const GDestroyZoneDocument = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n\nexport function useGDestroyZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GDestroyZoneMutation,\n    GDestroyZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GDestroyZoneMutation, GDestroyZoneVariables>(\n    GDestroyZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GZonesDocument = gql`\n  query GZones($branchesId: [ID!]!) {\n    zones(companyBranches: $branchesId) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useGZones(\n  variables?: GZonesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZonesVariables>,\n) {\n  return Hooks.useQuery<GZonesQuery, GZonesVariables>(\n    GZonesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneLocationDocument = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...FGeoPoint\n        }\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGZoneLocation(\n  variables?: GZoneLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneLocationVariables>,\n) {\n  return Hooks.useQuery<GZoneLocationQuery, GZoneLocationVariables>(\n    GZoneLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneBranchLocationDocument = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGZoneBranchLocation(\n  variables?: GZoneBranchLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneBranchLocationVariables>,\n) {\n  return Hooks.useQuery<GZoneBranchLocationQuery, GZoneBranchLocationVariables>(\n    GZoneBranchLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneColorsDocument = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n\nexport function useGZoneColors(\n  variables?: GZoneColorsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneColorsVariables>,\n) {\n  return Hooks.useQuery<GZoneColorsQuery, GZoneColorsVariables>(\n    GZoneColorsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QAddressSuggestDocument = gql`\n  query QAddressSuggest($search: String!) {\n    suggest: suggestGeolocation(address: $search) {\n      ...FAddress\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useQAddressSuggest(\n  variables?: QAddressSuggestVariables,\n  baseOptions?: Hooks.QueryHookOptions<QAddressSuggestVariables>,\n) {\n  return Hooks.useQuery<QAddressSuggestQuery, QAddressSuggestVariables>(\n    QAddressSuggestDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MOrderStateDocument = gql`\n  mutation MOrderState($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...FOrderStateCategory\n      ...FOrderTiming\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTimingFragmentDoc}\n`\n\nexport function useMOrderState(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderStateMutation,\n    MOrderStateVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderStateMutation, MOrderStateVariables>(\n    MOrderStateDocument,\n    baseOptions,\n  )\n}\n\nexport const QLogoutWidgetDocument = gql`\n  query QLogoutWidget($id: ID!) {\n    user(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n`\n\nexport function useQLogoutWidget(\n  variables?: QLogoutWidgetVariables,\n  baseOptions?: Hooks.QueryHookOptions<QLogoutWidgetVariables>,\n) {\n  return Hooks.useQuery<QLogoutWidgetQuery, QLogoutWidgetVariables>(\n    QLogoutWidgetDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MAddOrderPromoDocument = gql`\n  mutation MAddOrderPromo($orderId: ID!, $code: String!) {\n    addOrderPromoCode(order: $orderId, promoCode: $code) {\n      userErrors: errors\n      order {\n        ...FCreateOrder\n      }\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMAddOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddOrderPromoMutation,\n    MAddOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<MAddOrderPromoMutation, MAddOrderPromoVariables>(\n    MAddOrderPromoDocument,\n    baseOptions,\n  )\n}\n\nexport const MCancelOrderDocument = gql`\n  mutation MCancelOrder($orderId: ID!) {\n    addOrderState(order: $orderId, orderState: CANCELED) {\n      id\n    }\n  }\n`\n\nexport function useMCancelOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCancelOrderMutation,\n    MCancelOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MCancelOrderMutation, MCancelOrderVariables>(\n    MCancelOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderAcceptDocument = gql`\n  mutation MCreateOrderAccept(\n    $orderId: ID!\n    $customer: InputCustomerCreate!\n    $deliverAt: DateTime\n    $note: String\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        customer: $customer\n        note: $note\n        deliverAt: $deliverAt\n        paymentMethod: CASH\n        paymentGate: CASH\n      }\n    ) {\n      userErrors\n      order {\n        ...FCreateOrder\n      }\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderAccept(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >(MCreateOrderAcceptDocument, baseOptions)\n}\n\nexport const MCreateOrderAddRecipeDocument = gql`\n  mutation MCreateOrderAddRecipe(\n    $orderId: ID!\n    $recipeId: ID!\n    $sidedishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sidedishes\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderAddRecipe(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >(MCreateOrderAddRecipeDocument, baseOptions)\n}\n\nexport const MCreateOrderNewDocument = gql`\n  mutation MCreateOrderNew(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $callEventId: ID\n  ) {\n    createOrder(\n      order: {\n        companyBranch: $branchId\n        deliveryType: $deliveryType\n        callEventId: $callEventId\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: {}\n        warePriceType: DELIVERY\n        orderOrigin: STAFF\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderNew(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderNewMutation,\n    MCreateOrderNewVariables\n  >,\n) {\n  return Hooks.useMutation<MCreateOrderNewMutation, MCreateOrderNewVariables>(\n    MCreateOrderNewDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderRemoveItemDocument = gql`\n  mutation MCreateOrderRemoveItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderRemoveItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >(MCreateOrderRemoveItemDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateDocument = gql`\n  mutation MCreateOrderUpdate(\n    $orderId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $customer: InputCustomerCreate\n  ) {\n    updateOrder(\n      id: $orderId\n      order: {\n        deliveryType: $deliveryType\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: $customer\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >(MCreateOrderUpdateDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateItemDocument = gql`\n  mutation MCreateOrderUpdateItem($itemId: ID!, $sidedishes: [ID!]) {\n    updateOrderRecipe(id: $itemId, orderRecipe: { sideDishes: $sidedishes }) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderUpdateItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >(MCreateOrderUpdateItemDocument, baseOptions)\n}\n\nexport const MRemoveOrderPromoDocument = gql`\n  mutation MRemoveOrderPromo($orderId: ID!, $codeId: ID!) {\n    removeOrderPromoCode(order: $orderId, promoCode: $codeId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMRemoveOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >(MRemoveOrderPromoDocument, baseOptions)\n}\n\nexport const QCreateOrderItemDocument = gql`\n  query QCreateOrderItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...FCreateOrderRecipeSidedishes\n      }\n      selectedSidedishes: sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderItem(\n  variables?: QCreateOrderItemVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCreateOrderItemVariables>,\n) {\n  return Hooks.useQuery<QCreateOrderItemQuery, QCreateOrderItemVariables>(\n    QCreateOrderItemDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QCreateOrderRecipeDocument = gql`\n  query QCreateOrderRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...FCreateOrderRecipeSidedishes\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderRecipe(\n  variables?: QCreateOrderRecipeVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCreateOrderRecipeVariables>,\n) {\n  return Hooks.useQuery<QCreateOrderRecipeQuery, QCreateOrderRecipeVariables>(\n    QCreateOrderRecipeDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderCartDocument = gql`\n  query QOrderCart($orderId: ID!) {\n    order(id: $orderId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useQOrderCart(\n  variables?: QOrderCartVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderCartVariables>,\n) {\n  return Hooks.useQuery<QOrderCartQuery, QOrderCartVariables>(\n    QOrderCartDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderFormDeliverAtDefaultsDocument = gql`\n  query QOrderFormDeliverAtDefaults($branchId: ID!) {\n    times: companyBranch(id: $branchId) {\n      id\n      deliveryTime: defaultDeliveryTime\n      pickupTime: defaultPickupTime\n    }\n  }\n`\n\nexport function useQOrderFormDeliverAtDefaults(\n  variables?: QOrderFormDeliverAtDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFormDeliverAtDefaultsVariables>,\n) {\n  return Hooks.useQuery<\n    QOrderFormDeliverAtDefaultsQuery,\n    QOrderFormDeliverAtDefaultsVariables\n  >(QOrderFormDeliverAtDefaultsDocument, variables, baseOptions)\n}\n\nexport const QOrderMenuDocument = gql`\n  query QOrderMenu($branchId: ID!) {\n    orderMenu: wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n    ) {\n      ...FOrderMenuCategory\n    }\n  }\n\n  ${FOrderMenuCategoryFragmentDoc}\n`\n\nexport function useQOrderMenu(\n  variables?: QOrderMenuVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMenuVariables>,\n) {\n  return Hooks.useQuery<QOrderMenuQuery, QOrderMenuVariables>(\n    QOrderMenuDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QValidateLocationDocument = gql`\n  query QValidateLocation(\n    $branchId: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    resolveLocation(\n      companyBranch: $branchId\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      inDeliveryLocation\n      zone {\n        minimalOrderPrice {\n          formattedValue\n        }\n      }\n    }\n  }\n`\n\nexport function useQValidateLocation(\n  variables?: QValidateLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<QValidateLocationVariables>,\n) {\n  return Hooks.useQuery<QValidateLocationQuery, QValidateLocationVariables>(\n    QValidateLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MKitchenRecipeStateDocument = gql`\n  mutation MKitchenRecipeState($recipeId: ID!, $state: OrderRecipeStateEnum!) {\n    updateOrderRecipeState(id: $recipeId, orderRecipeState: $state) {\n      id\n      orderRecipeState {\n        enum\n      }\n      order {\n        id\n        orderStateCategory(target: FE_KITCHEN)\n      }\n    }\n  }\n`\n\nexport function useMKitchenRecipeState(\n  baseOptions?: Hooks.MutationHookOptions<\n    MKitchenRecipeStateMutation,\n    MKitchenRecipeStateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MKitchenRecipeStateMutation,\n    MKitchenRecipeStateVariables\n  >(MKitchenRecipeStateDocument, baseOptions)\n}\n\nexport const QKitchenOrderListDocument = gql`\n  query QKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoryTarget: FE_KITCHEN\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      id\n      ...FKitchenOrder\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useQKitchenOrderList(\n  variables?: QKitchenOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QKitchenOrderListVariables>,\n) {\n  return Hooks.useQuery<QKitchenOrderListQuery, QKitchenOrderListVariables>(\n    QKitchenOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SKitchenOrderListDocument = gql`\n  subscription SKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n      orderStateCategoryTarget: FE_KITCHEN\n    ) {\n      order {\n        id\n        ...FKitchenOrder\n      }\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useSKitchenOrderList(\n  variables?: SKitchenOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >(SKitchenOrderListDocument, variables, baseOptions)\n}\n\nexport const QUserBootstrapDocument = gql`\n  query QUserBootstrap($userId: ID!) {\n    user(id: $userId) {\n      id\n      firstName\n      lastName\n      language {\n        rawCode\n      }\n      roles {\n        id\n        name\n      }\n      branches: accessibleBranches {\n        ...FCompanyBranch\n      }\n    }\n    permissions: permissions {\n      canCancelOrders\n      canCreateOrder\n    }\n    access: __schema {\n      queries: queryType {\n        fields {\n          name\n        }\n      }\n      mutations: mutationType {\n        fields {\n          name\n        }\n      }\n      subscriptions: subscriptionType {\n        fields {\n          name\n        }\n      }\n    }\n  }\n\n  ${FCompanyBranchFragmentDoc}\n`\n\nexport function useQUserBootstrap(\n  variables?: QUserBootstrapVariables,\n  baseOptions?: Hooks.QueryHookOptions<QUserBootstrapVariables>,\n) {\n  return Hooks.useQuery<QUserBootstrapQuery, QUserBootstrapVariables>(\n    QUserBootstrapDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderCountDocument = gql`\n  query QOrderCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    ordersCount(companyBranches: $branchesId, orderStateCategories: $categories)\n  }\n`\n\nexport function useQOrderCount(\n  variables?: QOrderCountVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderCountVariables>,\n) {\n  return Hooks.useQuery<QOrderCountQuery, QOrderCountVariables>(\n    QOrderCountDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderCallDocument = gql`\n  subscription SOrderCall {\n    call: updatedUserCallingCustomer {\n      eventId\n      phone\n      prefix\n      isRinging\n    }\n  }\n`\n\nexport function useSOrderCall(\n  variables?: SOrderCallVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderCallSubscription,\n    SOrderCallVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderCallSubscription, SOrderCallVariables>(\n    SOrderCallDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderCountDocument = gql`\n  subscription SOrderCount($branchesId: [ID!]!) {\n    updatedOrdersCount(companyBranches: $branchesId) {\n      ordersCount\n    }\n  }\n`\n\nexport function useSOrderCount(\n  variables?: SOrderCountVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderCountSubscription,\n    SOrderCountVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderCountSubscription, SOrderCountVariables>(\n    SOrderCountDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MMenuCategoryVisibilityDocument = gql`\n  mutation MMenuCategoryVisibility($categoryId: ID!, $visible: Boolean!) {\n    updateWareCategory(id: $categoryId, wareCategory: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useMMenuCategoryVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >(MMenuCategoryVisibilityDocument, baseOptions)\n}\n\nexport const MMenuStockQuantityDocument = gql`\n  mutation MMenuStockQuantity($stockItem: ID!, $quantityChange: Float!) {\n    changeAmountStockItem(id: $stockItem, amountOffset: $quantityChange) {\n      id\n      quantity\n    }\n  }\n`\n\nexport function useMMenuStockQuantity(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >(MMenuStockQuantityDocument, baseOptions)\n}\n\nexport const QMenuCategoryDocument = gql`\n  query QMenuCategory($categoryId: ID!) {\n    category: wareCategory(id: $categoryId) {\n      ...FMenuCategory\n    }\n  }\n\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport function useQMenuCategory(\n  variables?: QMenuCategoryVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryQuery, QMenuCategoryVariables>(\n    QMenuCategoryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuCategoryFilterDocument = gql`\n  query QMenuCategoryFilter($branchId: ID!) {\n    categories: wareCategories(companyBranch: $branchId) {\n      id\n      nameLabel\n      countRecipes\n      categoryType: wareCategoryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useQMenuCategoryFilter(\n  variables?: QMenuCategoryFilterVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryFilterVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryFilterQuery, QMenuCategoryFilterVariables>(\n    QMenuCategoryFilterDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuCategoryListDocument = gql`\n  query QMenuCategoryList(\n    $branchId: ID!\n    $categoryType: WareCategoryTypeEnum!\n  ) {\n    categories: wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: $categoryType\n    ) {\n      ...FMenuCategoryListItem\n    }\n  }\n\n  ${FMenuCategoryListItemFragmentDoc}\n`\n\nexport function useQMenuCategoryList(\n  variables?: QMenuCategoryListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryListVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryListQuery, QMenuCategoryListVariables>(\n    QMenuCategoryListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuGuideDownloadDocument = gql`\n  query QMenuGuideDownload($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      foodMenuUrl\n    }\n  }\n`\n\nexport function useQMenuGuideDownload(\n  variables?: QMenuGuideDownloadVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuGuideDownloadVariables>,\n) {\n  return Hooks.useQuery<QMenuGuideDownloadQuery, QMenuGuideDownloadVariables>(\n    QMenuGuideDownloadDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuRecipeListDocument = gql`\n  query QMenuRecipeList(\n    $branchId: ID!\n    $categoryId: ID\n    $categoryType: WareCategoryTypeEnum\n  ) {\n    recipes(\n      companyBranch: $branchId\n      wareCategory: $categoryId\n      wareCategoryType: $categoryType\n    ) {\n      ...FMenuRecipe\n    }\n  }\n\n  ${FMenuRecipeFragmentDoc}\n`\n\nexport function useQMenuRecipeList(\n  variables?: QMenuRecipeListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuRecipeListVariables>,\n) {\n  return Hooks.useQuery<QMenuRecipeListQuery, QMenuRecipeListVariables>(\n    QMenuRecipeListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuStockDepositDocument = gql`\n  query QMenuStockDeposit($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      id\n      code\n      plu\n      nameLabel: label\n      note\n      quantity\n      wareUnit {\n        ...FMenuWareUnit\n      }\n    }\n  }\n\n  ${FMenuWareUnitFragmentDoc}\n`\n\nexport function useQMenuStockDeposit(\n  variables?: QMenuStockDepositVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuStockDepositVariables>,\n) {\n  return Hooks.useQuery<QMenuStockDepositQuery, QMenuStockDepositVariables>(\n    QMenuStockDepositDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuStockListDocument = gql`\n  query QMenuStockList($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useQMenuStockList(\n  variables?: QMenuStockListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuStockListVariables>,\n) {\n  return Hooks.useQuery<QMenuStockListQuery, QMenuStockListVariables>(\n    QMenuStockListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStockRecipesDocument = gql`\n  query QStockRecipes($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      ingredients {\n        id\n        recipe {\n          id\n          nameLabel\n          descriptionLabel\n          recipeType: wareCategoryType {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useQStockRecipes(\n  variables?: QStockRecipesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStockRecipesVariables>,\n) {\n  return Hooks.useQuery<QStockRecipesQuery, QStockRecipesVariables>(\n    QStockRecipesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MBranchDefaultTimeDocument = gql`\n  mutation MBranchDefaultTime(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $time: Int!\n  ) {\n    updateDefaultOrderProcessTime(\n      companyBranch: $branchId\n      deliveryType: $deliveryType\n      defaultTime: $time\n    ) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useMBranchDefaultTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >(MBranchDefaultTimeDocument, baseOptions)\n}\n\nexport const MOrderChangeToPickupDocument = gql`\n  mutation MOrderChangeToPickup($orderId: ID!) {\n    updateOrderDeliveryToPickup(id: $orderId) {\n      id\n      deliveryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMOrderChangeToPickup(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderChangeToPickupMutation,\n    MOrderChangeToPickupVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderChangeToPickupMutation,\n    MOrderChangeToPickupVariables\n  >(MOrderChangeToPickupDocument, baseOptions)\n}\n\nexport const MOrderTimeNotificationDocument = gql`\n  mutation MOrderTimeNotification($orderId: ID!, $minutes: Int!) {\n    orderNotifyCustomer(id: $orderId, minutes: $minutes) {\n      id\n      deliverAt\n    }\n  }\n`\n\nexport function useMOrderTimeNotification(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderTimeNotificationMutation,\n    MOrderTimeNotificationVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderTimeNotificationMutation,\n    MOrderTimeNotificationVariables\n  >(MOrderTimeNotificationDocument, baseOptions)\n}\n\nexport const MRemoveOrderDriverDocument = gql`\n  mutation MRemoveOrderDriver($orderDriverId: ID!) {\n    destroyUserDeliveringOrder(id: $orderDriverId) {\n      order {\n        ...FOrderDriver\n      }\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useMRemoveOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderDriverMutation,\n    MRemoveOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderDriverMutation,\n    MRemoveOrderDriverVariables\n  >(MRemoveOrderDriverDocument, baseOptions)\n}\n\nexport const MSelectOrderDriverDocument = gql`\n  mutation MSelectOrderDriver($driverId: ID!, $orderId: ID!) {\n    result: createUserDeliveringOrder(user: $driverId, order: $orderId) {\n      order {\n        ...FOrderDriver\n      }\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useMSelectOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSelectOrderDriverMutation,\n    MSelectOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSelectOrderDriverMutation,\n    MSelectOrderDriverVariables\n  >(MSelectOrderDriverDocument, baseOptions)\n}\n\nexport const QBranchDefeaultTimesDocument = gql`\n  query QBranchDefeaultTimes($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useQBranchDefeaultTimes(\n  variables?: QBranchDefeaultTimesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QBranchDefeaultTimesVariables>,\n) {\n  return Hooks.useQuery<\n    QBranchDefeaultTimesQuery,\n    QBranchDefeaultTimesVariables\n  >(QBranchDefeaultTimesDocument, variables, baseOptions)\n}\n\nexport const QOrderDriversDocument = gql`\n  query QOrderDrivers($orderId: ID!, $branchId: [ID!]!) {\n    order(id: $orderId) {\n      ...FOrderDriver\n    }\n    drivers(companyBranches: $branchId, onlyAvailable: true) {\n      ...FDriver\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n  ${FDriverFragmentDoc}\n`\n\nexport function useQOrderDrivers(\n  variables?: QOrderDriversVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderDriversVariables>,\n) {\n  return Hooks.useQuery<QOrderDriversQuery, QOrderDriversVariables>(\n    QOrderDriversDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderMapDeliveriesDocument = gql`\n  query QOrderMapDeliveries($branches: [ID!]!) {\n    deliveries: drivers(companyBranches: $branches, onlyAvailable: false) {\n      ...FOrderMapDelivery\n    }\n  }\n\n  ${FOrderMapDeliveryFragmentDoc}\n`\n\nexport function useQOrderMapDeliveries(\n  variables?: QOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMapDeliveriesVariables>,\n) {\n  return Hooks.useQuery<QOrderMapDeliveriesQuery, QOrderMapDeliveriesVariables>(\n    QOrderMapDeliveriesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderStateDocument = gql`\n  query QOrderState($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      deliveryType {\n        enum\n      }\n      isCancelable\n      ...FOrderStateCategory\n    }\n    companyBranch(id: $branchId) {\n      id\n      allowedCategories\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useQOrderState(\n  variables?: QOrderStateVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderStateVariables>,\n) {\n  return Hooks.useQuery<QOrderStateQuery, QOrderStateVariables>(\n    QOrderStateDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderMapDeliveriesDocument = gql`\n  subscription SOrderMapDeliveries($branches: [ID!]!) {\n    update: updatedTransportationDeviceUser(companyBranches: $branches) {\n      actionType\n      device: transportationDeviceUser {\n        ...FOrderMapDevice\n        user {\n          ...FOrderMapDriver\n        }\n      }\n    }\n  }\n\n  ${FOrderMapDeviceFragmentDoc}\n  ${FOrderMapDriverFragmentDoc}\n`\n\nexport function useSOrderMapDeliveries(\n  variables?: SOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >(SOrderMapDeliveriesDocument, variables, baseOptions)\n}\n\nexport const MFinancialReportCreateDocument = gql`\n  mutation MFinancialReportCreate($branchId: ID!) {\n    result: createFinancialReport(companyBranchId: $branchId) {\n      id\n    }\n  }\n`\n\nexport function useMFinancialReportCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MFinancialReportCreateMutation,\n    MFinancialReportCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MFinancialReportCreateMutation,\n    MFinancialReportCreateVariables\n  >(MFinancialReportCreateDocument, baseOptions)\n}\n\nexport const QAllDriversDocument = gql`\n  query QAllDrivers($branches: [ID!]!) {\n    drivers(companyBranches: $branches, onlyAvailable: false) {\n      ...FDriver\n    }\n  }\n\n  ${FDriverFragmentDoc}\n`\n\nexport function useQAllDrivers(\n  variables?: QAllDriversVariables,\n  baseOptions?: Hooks.QueryHookOptions<QAllDriversVariables>,\n) {\n  return Hooks.useQuery<QAllDriversQuery, QAllDriversVariables>(\n    QAllDriversDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QClosureHistoryDocument = gql`\n  query QClosureHistory($branchId: ID!, $dateFrom: Date!, $dateTo: Date!) {\n    history: financialReports(\n      companyBranchId: $branchId\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n    ) {\n      id\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useQClosureHistory(\n  variables?: QClosureHistoryVariables,\n  baseOptions?: Hooks.QueryHookOptions<QClosureHistoryVariables>,\n) {\n  return Hooks.useQuery<QClosureHistoryQuery, QClosureHistoryVariables>(\n    QClosureHistoryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QClosureReportDocument = gql`\n  query QClosureReport($branchId: ID!, $reportId: ID!, $showReport: Boolean!) {\n    lastReport: lastFinancialReport(companyBranchId: $branchId)\n      @skip(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n    report: financialReport(report: $reportId) @include(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useQClosureReport(\n  variables?: QClosureReportVariables,\n  baseOptions?: Hooks.QueryHookOptions<QClosureReportVariables>,\n) {\n  return Hooks.useQuery<QClosureReportQuery, QClosureReportVariables>(\n    QClosureReportDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsDailyDocument = gql`\n  query QStatsDaily($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      category: categoryStatisticsPlain\n      daily: dailyStatisticsPlain\n      delivery: deliveryStatisticsPlain\n      drivers: driversStatisticsPlain\n    }\n  }\n`\n\nexport function useQStatsDaily(\n  variables?: QStatsDailyVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsDailyVariables>,\n) {\n  return Hooks.useQuery<QStatsDailyQuery, QStatsDailyVariables>(\n    QStatsDailyDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsOrdersDocument = gql`\n  query QStatsOrders($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      finishedOrders {\n        fees {\n          ...FPriceWithCurrency\n        }\n        onlinePayments {\n          ...FPriceWithCurrency\n        }\n        total {\n          ...FPriceWithCurrency\n        }\n        finishedCount: ordersCount\n        cancelledCount: ordersCanceledCount\n      }\n      orderStatisticsPlain\n    }\n  }\n\n  ${FPriceWithCurrencyFragmentDoc}\n`\n\nexport function useQStatsOrders(\n  variables?: QStatsOrdersVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersQuery, QStatsOrdersVariables>(\n    QStatsOrdersDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsOrdersCountsDocument = gql`\n  query QStatsOrdersCounts($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      counts: finishedOrders {\n        finished: ordersCount\n        cancelled: ordersCanceledCount\n      }\n    }\n  }\n`\n\nexport function useQStatsOrdersCounts(\n  variables?: QStatsOrdersCountsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersCountsVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersCountsQuery, QStatsOrdersCountsVariables>(\n    QStatsOrdersCountsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsOrdersListDocument = gql`\n  query QStatsOrdersList(\n    $filter: InputStatisticCreate!\n    $pagination: InputPaginationParams\n  ) {\n    stats: statistics(statisticsInput: $filter) {\n      orders: finishedOrders {\n        list: orders(includeCanceled: true, pagination: $pagination) {\n          ...GOrderListTicker\n          ...FOrderStateCategory\n        }\n      }\n    }\n  }\n\n  ${GOrderListTickerFragmentDoc}\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useQStatsOrdersList(\n  variables?: QStatsOrdersListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersListVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersListQuery, QStatsOrdersListVariables>(\n    QStatsOrdersListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MUserMenuLanguageDocument = gql`\n  mutation MUserMenuLanguage($userId: ID!, $lang: LanguageEnum!) {\n    updateUser(id: $userId, user: { language: $lang }) {\n      id\n      language {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMUserMenuLanguage(\n  baseOptions?: Hooks.MutationHookOptions<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >(MUserMenuLanguageDocument, baseOptions)\n}\n\nexport const QUserMenuLanguagesDocument = gql`\n  query QUserMenuLanguages {\n    languages {\n      code\n      enum\n      rawCode\n    }\n  }\n`\n\nexport function useQUserMenuLanguages(\n  variables?: QUserMenuLanguagesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QUserMenuLanguagesVariables>,\n) {\n  return Hooks.useQuery<QUserMenuLanguagesQuery, QUserMenuLanguagesVariables>(\n    QUserMenuLanguagesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MZoneUpdateDocument = gql`\n  mutation MZoneUpdate($zoneId: ID!, $update: InputZoneUpdate!) {\n    updateZone(id: $zoneId, zone: $update) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useMZoneUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MZoneUpdateMutation,\n    MZoneUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<MZoneUpdateMutation, MZoneUpdateVariables>(\n    MZoneUpdateDocument,\n    baseOptions,\n  )\n}\n\n// Generated in 2019-04-09T18:11:37+02:00\n","import React from 'react'\n\nimport { Spacing } from '../styling'\nimport { Sizer } from './Sizer'\n\ninterface IProps {}\n\nexport const SizerButton: React.FC<IProps> = ({ children, ...props }) => {\n  return (\n    <Sizer\n      width={Spacing.ButtonHeight}\n      height={Spacing.ButtonHeight}\n      {...props}\n    >\n      {children}\n    </Sizer>\n  )\n}\n","import 'rc-slider/assets/index.css'\n\nimport React from 'react'\n\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\nimport { SizerButton } from './SizerButton'\nimport { WithRoot } from './WithRoot'\n\nexport class SoundControl extends React.Component {\n  state = { playPreview: false }\n  render() {\n    return (\n      <WithRoot\n        observe={true}\n        render={({ user }) => (\n          <SizerButton>\n            <TouchButton\n              color={user.soundEnabled ? Colors.green : Colors.red}\n              iconName={user.soundEnabled ? 'volume_up' : 'volume_off'}\n              iconSize={2}\n              onClick={() => {\n                user.controlSound(!user.soundEnabled)\n              }}\n            />\n          </SizerButton>\n        )}\n      />\n    )\n  }\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { useRoot } from '../atoms/RootProvider'\nimport { useQLogoutWidget } from '../graph/generated'\nimport { i18n } from '../i18n'\nimport { Colors } from '../styling'\n\nconst LogoutWidgetStyled = styled.div`\n  margin-left: 1rem;\n  color: ${Colors.greyLight};\n  &:hover {\n    color: ${Colors.white};\n  }\n`\nconst LoggedUserNameStyled = styled.span`\n  color: ${Colors.greyLight};\n  text-decoration: none;\n  font-weight: lighter;\n  position: relative;\n  top: 0.6rem;\n  display: inline-block;\n  max-width: 10rem;\n  text-align: right;\n`\n\nconst IconStyled = styled.span`\n  padding: 0.5rem 0.5rem 0 0.5rem;\n  display: inline-block;\n  vertical-align: top;\n`\n\nexport const LogoutWidget = observer(() => {\n  const { auth } = useRoot()\n  const { data, loading } = useQLogoutWidget({ id: auth.userId })\n\n  let displayName\n  if (loading) {\n    displayName = i18n.t`Not logged in`\n  } else {\n    displayName = `${data.user.firstName} ${data.user.lastName}`\n  }\n\n  return (\n    <LogoutWidgetStyled data-testid=\"logout-widget\">\n      <Link to=\"/logout\">\n        <LoggedUserNameStyled>{displayName}</LoggedUserNameStyled>\n        <IconStyled>\n          <Icon iconName=\"exit_to_app\" />\n        </IconStyled>\n      </Link>\n    </LogoutWidgetStyled>\n  )\n})\n","import Color from 'color'\nimport React, { MouseEvent } from 'react'\nimport { Link, Route } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { Colors, Radiuses, Spacing } from '../styling'\n\ninterface IHomeButtonProps {\n  iconColor?: Colors\n  color?: Colors\n  disabled?: boolean\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n  goBack?: boolean\n  backRoute?: string\n}\n\nconst applyAlpha = (alphaValue: number) => (props: IHomeButtonProps) =>\n  Color(props.color)\n    .alpha(alphaValue)\n    .string()\n\nconst HomeButtonStyled = styled.button`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 0 0 ${Radiuses.Button} 0 !important;\n  height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  margin: 0;\n  padding: 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  font-size: 1rem;\n  transition-duration: 0.2s;\n\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nexport const HomeButton: React.FC<IHomeButtonProps> = ({\n  color = Colors.greyMiddle,\n  iconColor = Colors.white,\n  goBack = false,\n  backRoute,\n  ...props\n}) => {\n  if (goBack) {\n    return (\n      <Route>\n        {({ history }) => (\n          <HomeButtonStyled\n            color={color}\n            onClick={() => {\n              if (backRoute) {\n                history.push(backRoute)\n              } else {\n                history.goBack()\n              }\n            }}\n            {...props}\n          >\n            <Icon iconName=\"chevron_left\" color={iconColor} fontSize={2.2} />\n          </HomeButtonStyled>\n        )}\n      </Route>\n    )\n  }\n  return (\n    <Link to=\"/\">\n      <HomeButtonStyled color={color} {...props}>\n        <Icon iconName=\"home\" color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    </Link>\n  )\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\nimport styled from 'styled-components'\n\nimport { GridLayout } from '../atoms/GridLayout'\nimport { PageTitle } from '../atoms/PageTitle'\nimport { SoundControl } from '../atoms/SoundControl'\nimport { LogoutWidget } from '../organisms/LogoutWidget'\nimport { SecureRoute } from '../routes/SecureRoute'\nimport { HomeButton } from './HomeButton'\n\nexport interface IPageLayoutProps {\n  pageTitle?: string\n  layouts?: Layout[]\n  hideLogoutWidget?: boolean\n  showSoundControl?: boolean\n  useBackButton?: boolean\n  backRoute?: string\n  scrollPageTitle?: boolean\n  topContent?: React.ReactNode\n}\n\nconst TopLeftButtonContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n`\n\nconst getPosition = (props: IPageLayoutProps) =>\n  props.scrollPageTitle ? 'absolute' : 'fixed'\n\nconst TopRightContainer = styled.div`\n  position: ${getPosition};\n  top: 0;\n  right: 0;\n  z-index: 100;\n  display: flex;\n  justify-content: flex-end;\n`\nconst PageTitleContainer = styled.div`\n  position: ${getPosition};\n  top: 0rem;\n  left: 4rem;\n`\nconst PageHeaderItem = styled.div`\n  margin: 0.5rem;\n`\n\nexport const PageLayout: React.FC<IPageLayoutProps> = ({\n  pageTitle = '',\n  layouts = [],\n  hideLogoutWidget = false,\n  showSoundControl = false,\n  useBackButton = false,\n  scrollPageTitle = true,\n  backRoute,\n  children,\n  topContent,\n}) => (\n  <>\n    {pageTitle && <PageTitle title={pageTitle} />}\n\n    <TopRightContainer scrollPageTitle={scrollPageTitle}>\n      <PageHeaderItem>{topContent}</PageHeaderItem>\n      {showSoundControl && (\n        <PageHeaderItem>\n          <SoundControl />\n        </PageHeaderItem>\n      )}\n\n      {!hideLogoutWidget && (\n        <SecureRoute path=\"/\" component={LogoutWidget} redirect={false} />\n      )}\n    </TopRightContainer>\n\n    <PageTitleContainer scrollPageTitle={scrollPageTitle}>\n      <PageTitle.Display />\n    </PageTitleContainer>\n\n    <GridLayout layouts={[...layouts]}>{children}</GridLayout>\n\n    <TopLeftButtonContainer>\n      <HomeButton goBack={useBackButton} backRoute={backRoute} />\n    </TopLeftButtonContainer>\n  </>\n)\n","import debug from 'debug'\n\n// @ts-ignore\ndebug.useColors = () => !process.env.REACT_APP_STAGE\n\nexport const logMain = debug('main')\nexport const logDebug = debug('debug')\nexport const logError = debug('error')\nexport const logAuth = debug('auth')\nexport const logRouting = debug('routing')\nexport const logPersistence = debug('persistence')\nexport const logBootstrap = debug('bootstrap')\nexport const logAccess = debug('access')\nexport const logGraph = debug('graph')\nexport const logForm = debug('form')\nexport const logSentry = debug('sentry')\nexport const logLang = debug('lang')\nexport const logUpdate = debug('update')\n// tslint:disable-next-line:no-console\nexport const logTest = console.log\n","import React from 'react'\n\ninterface ILoadingProps {\n  text?: string\n}\n\nexport const Loading: React.FC<ILoadingProps> = ({ text = '...' }) => (\n  <h1>{text}</h1>\n)\n","import React from 'react'\nimport RGL, { Layout, WidthProvider } from 'react-grid-layout'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\ninterface IGridLayoutProps {\n  layouts: Layout[]\n}\n\nexport const GridLayout: React.FC<IGridLayoutProps> = ({\n  children,\n  layouts,\n}) => (\n  <ReactGridLayout\n    className=\"layout\"\n    layout={layouts}\n    cols={16}\n    rowHeight={55}\n    margin={[8, 8]}\n    autoSize={false}\n    isDraggable={false}\n    isResizable={false}\n    compactType={null}\n    measureBeforeMount={true}\n  >\n    {children}\n  </ReactGridLayout>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport {\n  FMenuCategoryListItemFragmentDoc,\n  FPriceFragmentDoc,\n} from '../../../graph/generated'\nimport { GMenuRecipeFormAssoc } from '../../../graph/types'\n\nexport const MenuRecipePriceFragment = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n  ${FPriceFragmentDoc}\n`\n\nexport const MenuAssocRecipeFragment = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const MenuRecipeFormQuery = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...FMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...FMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n  ${MenuRecipePriceFragment}\n  ${FMenuCategoryListItemFragmentDoc}\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeFormAssocQuery = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeDefaults = gql`\n  query GMenuRecipeDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport const QueryMenuRecipeFormAssoc = buildQuery<\n  GMenuRecipeFormAssoc.Query,\n  GMenuRecipeFormAssoc.Variables\n>(MenuRecipeFormAssocQuery)\n","import gql from 'graphql-tag'\n\nimport { FPriceFragmentDoc } from '../../../graph/generated'\n\nexport const MenuRecipeFragment = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n  ${FPriceFragmentDoc}\n`\n\nexport const MenuRecipeVisibilityMutation = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport const MenuRecipeCreateMutation = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeUpdateMutation = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeDeleteMutation = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n","import { LocationDescriptorObject } from 'history'\nimport numeral from 'numeral'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  WareCategoryTypeEnum,\n  WarePriceTypeEnum,\n} from '../../../graph/generated'\nimport {\n  GMenuRecipeCreate,\n  GMenuRecipeDefaults,\n  GMenuRecipeDelete,\n  GMenuRecipeUpdate,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TRecipeFormValues } from '../menutypes'\nimport { MenuRecipeDefaults } from '../organisms/RecipeForm.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuRecipeCreateMutation,\n  MenuRecipeDeleteMutation,\n  MenuRecipeUpdateMutation,\n  MenuRecipeVisibilityMutation,\n} from './MenuRecipeModel.graphql'\n\nexport const MenuRecipeModel = MenuBaseModel.named('MenuRecipe')\n  .volatile(() => ({\n    categoryFilterId: null as MaybeID,\n  }))\n  .actions(self => ({\n    changeVisibility(recipeId: ID, visible: boolean) {\n      self.client.mutate({\n        mutation: MenuRecipeVisibilityMutation,\n        variables: { recipeId, visible },\n        optimisticResponse: {\n          updateRecipe: {\n            __typename: 'Recipe',\n            id: recipeId,\n            visible,\n          },\n        },\n      })\n    },\n    setCategoryFilter(categoryId: MaybeID) {\n      self.categoryFilterId = categoryId\n    },\n    createRecipe(\n      formValues: TRecipeFormValues,\n      recipeType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuRecipeCreate.Variables = {\n        recipe: {\n          companyBranch: self.branchId,\n          wareCategoryType: recipeType,\n          ...getRecipeVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeCreateMutation,\n          variables,\n        }),\n      )\n    },\n    updateRecipe(formValues: TRecipeFormValues) {\n      const variables: GMenuRecipeUpdate.Variables = {\n        recipeId: formValues.id,\n        recipe: {\n          ...getRecipeVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteRecipe(recipeId: ID) {\n      const variables: GMenuRecipeDelete.Variables = {\n        recipeId,\n      }\n      await self.client.mutate({\n        mutation: MenuRecipeDeleteMutation,\n        variables,\n      })\n    },\n    async queryDefaults() {\n      const { data } = await self.client.query<GMenuRecipeDefaults.Query>({\n        query: MenuRecipeDefaults,\n        variables: { branchId: self.branchId },\n      })\n      const {\n        companyBranch: {\n          vats,\n          currency: { code },\n        },\n      } = data\n      return {\n        vats: vats.reduce((result, { vatId, priceType }) => {\n          result[priceType.enum] = vatId\n          return result\n        }, {}),\n        currencyCode: code,\n      }\n    },\n  }))\n\nfunction getRecipeVariables(formValues: TRecipeFormValues) {\n  return {\n    code: formValues.code,\n    nameLabel: formValues.nameLabel,\n    internalNote: formValues.internalNote,\n    descriptionLabel: formValues.descriptionLabel,\n    enabled: formValues.visible,\n    prices: Object.keys(formValues.prices).map(priceType => ({\n      warePriceType: (priceType as unknown) as WarePriceTypeEnum,\n      price: { value: numeral(formValues.prices[priceType].value).value() },\n      vat: formValues.prices[priceType].vatId!,\n    })),\n    sideDishCategories: formValues.sideDishes.map(RM.prop('id')),\n    wareCategories: formValues.categories.map(RM.prop('id')),\n    associatedRecipes: formValues.associatedRecipes.map(\n      RM.pick(['associatedRecipe', 'warePriceType']),\n    ),\n    ingredients: formValues.ingredients.map(({ stockItem, quantity }) => {\n      return { stockItem, quantity: parseNumber(quantity) }\n    }),\n  }\n}\n\nfunction parseNumber(value: string | number) {\n  return typeof value === 'number'\n    ? value\n    : Number.parseFloat(value.replace(',', '.'))\n}\n\nexport const getRecipeRoute = (\n  recipeId: ID,\n  recipeType: WareCategoryTypeEnum,\n): LocationDescriptorObject<any> => ({\n  pathname: recipeId,\n  state: { recipeType },\n})\n","import gql from 'graphql-tag'\n\nimport { SpecificBusinessHourFragment } from '../organisms/SpecificBusinessHours.graphql'\n\nexport const CreateSpecificBusinessHour = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`\n\nexport const DeleteSpecificBusinessHour = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n","import { isoDate } from '@speedlo/graphql'\nimport { types } from 'mobx-state-tree'\n\nimport {\n  GCreateSpecificBusinessHour,\n  GDeleteSpecificBusinessHour,\n} from '../../../graph/types'\nimport { formatTime } from '../../../helpers/formats'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  CreateSpecificBusinessHour,\n  DeleteSpecificBusinessHour,\n} from './BusinessHoursModel.graphql'\n\nexport enum ESpecificHourMode {\n  TIMESPAN = 'TIMESPAN',\n  FULLDAY = 'FULLDAY',\n}\n\nexport interface ISpecificFormData {\n  date: Date\n  openAt: Date\n  closeAt: Date\n  note: string\n}\n\nconst byIdPredicate = RM.complement(RM.propEq('id'))\n\nexport const BusinessHoursModel = BaseModel.named('BusinessHours')\n  .props({\n    specificMode: types.optional(\n      types.enumeration(['TIMESPAN', 'FULLDAY']),\n      ESpecificHourMode.TIMESPAN,\n    ),\n  })\n  .actions(self => ({\n    changeSpecificMode(mode: ESpecificHourMode) {\n      self.specificMode = mode\n    },\n    submitSpecificHour(values: ISpecificFormData) {\n      const variables: GCreateSpecificBusinessHour.Variables = {\n        input: {\n          companyBranch: self.root.settings.branchId,\n          specificDate: isoDate(values.date),\n          closed: self.specificMode === ESpecificHourMode.FULLDAY,\n          openAt: values.openAt && formatTime(values.openAt),\n          closeAt: values.closeAt && formatTime(values.closeAt),\n          closedNote: values.note,\n        },\n      }\n      self.client.mutate<GCreateSpecificBusinessHour.Mutation>({\n        mutation: CreateSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.concat(\n                  mutationResult.data.result,\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n    deleteSpecificHour(businessHourId: ID) {\n      const variables: GDeleteSpecificBusinessHour.Variables = {\n        id: businessHourId,\n      }\n      self.client.mutate({\n        mutation: DeleteSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.filter(\n                  byIdPredicate(mutationResult.data.result.id),\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n  }))\n","import gql from 'graphql-tag'\n\nimport { FMenuCategoryFragmentDoc } from '../../../graph/generated'\n\nexport const SortMenuCategoryMutation = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport const MenuCategoryCreateMutation = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport const MenuCategoryUpdateMutation = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...FMenuCategory\n    }\n  }\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport const MenuCategoryDeleteMutation = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n","import { LocationDescriptor } from 'history'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  FMenuCategoryFragment,\n  WareCategoryTypeEnum,\n} from '../../../graph/generated'\nimport {\n  GMenuCategoryCreate,\n  GMenuCategoryDelete,\n  GMenuCategoryUpdate,\n  GSortMenuCategory,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuCategoryCreateMutation,\n  MenuCategoryDeleteMutation,\n  MenuCategoryUpdateMutation,\n  SortMenuCategoryMutation,\n} from './MenuCategoryModel.graphql'\n\nexport interface TCategoryFormValues extends FMenuCategoryFragment {}\n\nexport const MenuCategoryModel = MenuBaseModel.named('MenuCategory').actions(\n  self => ({\n    async sortCategory(categoryId: ID, offset: number) {\n      const variables: GSortMenuCategory.Variables = {\n        categoryId,\n        offset,\n      }\n      const result = await self.client.mutate({\n        mutation: SortMenuCategoryMutation,\n        variables,\n      })\n      return Boolean(result.data && result.data.success)\n    },\n    createCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryCreate.Variables = {\n        input: {\n          companyBranch: self.branchId,\n          wareCategoryType: categoryType,\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryCreateMutation,\n          variables,\n        }),\n      )\n    },\n    async updateCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryUpdate.Variables = {\n        categoryId: formValues.id,\n        input: {\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteCategory(categoryId: ID, categoryType: WareCategoryTypeEnum) {\n      const variables: GMenuCategoryDelete.Variables = {\n        categoryId,\n      }\n      await self.client.mutate({\n        mutation: MenuCategoryDeleteMutation,\n        variables,\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(\n  formValues: TCategoryFormValues,\n  categoryType: WareCategoryTypeEnum,\n) {\n  return Object.assign({\n    nameLabel: formValues.nameLabel,\n    internalNoteLabel: formValues.internalNoteLabel,\n    enabled: formValues.visible,\n    pictogram: formValues.pictogram,\n    recipes: formValues.recipes.map(RM.prop('id')),\n    minCount: formValues.minCount,\n    maxCount: formValues.maxCount,\n  })\n}\n\nexport const getCategoryRoute = (\n  recipeId: ID,\n  categoryType: WareCategoryTypeEnum,\n): LocationDescriptor => ({\n  pathname: recipeId,\n  state: { categoryType },\n})\n","import moment from 'moment'\n\nexport async function changeMomentLocale(lang: string) {\n  if (lang === 'en') {\n    moment.locale(lang)\n    return\n  }\n  const locale = await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"moment-[index]\" */\n    `moment/locale/${lang}`\n  )\n  moment.updateLocale(lang, locale)\n}\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { useReaction } from '@speedlo/hooks'\nimport * as detector from 'locales-detector'\nimport React from 'react'\n\nimport { useRoot } from './atoms/RootProvider'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\nimport { changeMomentLocale } from './locale/moment'\nimport { changeNumeralLocale } from './locale/numeral'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC = ({ children }) => {\n  const { user } = useRoot()\n  const [, forceUpdate] = React.useState(0)\n\n  useReaction(\n    () => user.language,\n    async (lang = detectLanguage()) => {\n      await setupLanguage(lang)\n      user.log('setup for language %s done', lang)\n      forceUpdate(i => i + 1)\n    },\n  )\n\n  return (\n    <I18nProvider i18n={i18n}>{React.Children.only(children)}</I18nProvider>\n  )\n}\n\nexport function detectLanguage() {\n  const resolver = new detector.LocaleResolver(\n    [new detector.NavigatorDetector()],\n    [new detector.LanguageOnlyTransformer()],\n  )\n  const languages = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nexport async function setupLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await Promise.all([\n    loadCatalog(lang),\n    changeNumeralLocale(lang),\n    changeMomentLocale(lang),\n  ])\n  i18n.activate(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","import numeral from 'numeral'\n\nexport async function changeNumeralLocale(lang: string) {\n  if (lang === 'en') {\n    numeral.locale(lang)\n    return\n  }\n  await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"numeral-[index]\" */\n    `numeral/locales/${lang}`\n  )\n  numeral.locale(lang)\n}\n\nconst numberRx = /[\\d\\.,\\s]+/\n\nexport function validateNumber(input: string) {\n  return numberRx.test(input)\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GSpecificBusinessHours } from '../../../graph/types'\n\nexport const SpecificBusinessHourFragment = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const QuerySpecificBusinessHours = buildQuery<\n  GSpecificBusinessHours.Query,\n  GSpecificBusinessHours.Variables\n>(gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`)\n","import gql from 'graphql-tag'\n\nimport { FGeoPointFragmentDoc } from '../../graph/generated'\n\nexport const ZoneLocationQuery = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...FGeoPoint\n        }\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n\nexport const ZoneBranchLocationQuery = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n\nexport const ZoneColorsQuery = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n","import styled from 'styled-components'\n\nexport interface IProps {\n  margin: string\n  className?: string\n}\n\nexport const MarginBox = styled('div')`\n  margin: ${(props: IProps) => props.margin};\n`\n","import { addSeconds, differenceInMilliseconds } from 'date-fns'\nimport { Component } from 'react'\n\ninterface IRenderProps {\n  isActive: boolean\n  nextLoop(): void\n}\n\ninterface IProps {\n  intervalSec: number\n  enabled?: boolean\n  render(props: IRenderProps): ReactNode\n}\n\ninterface IState {\n  isActive: boolean\n  nextTime: Date\n}\n\nexport class IntervalRender extends Component<IProps, IState> {\n  state: IState = { isActive: false, nextTime: this.getNextTime() }\n  timer = 0\n  componentDidMount() {\n    this.executeTimer()\n  }\n  componentDidUpdate() {\n    this.executeTimer()\n  }\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer)\n    }\n  }\n  getNextTime() {\n    return addSeconds(new Date(), this.props.intervalSec)\n  }\n  executeTimer = () => {\n    if (this.timer) {\n      clearTimeout(this.timer)\n      this.timer = 0\n    }\n    if (this.props.enabled === false) {\n      return\n    }\n    const timeMs = differenceInMilliseconds(this.state.nextTime, new Date())\n    // @ts-ignore (setTimeout returning NodeJS.Timer) for some weird reason\n    this.timer = setTimeout(this.activate, timeMs)\n  }\n  activate = () => {\n    if (this.props.enabled !== false) {\n      this.setState({\n        isActive: true,\n        nextTime: this.getNextTime(),\n      })\n    }\n  }\n  deactivate = () => {\n    this.setState({ isActive: false })\n    this.executeTimer()\n  }\n  render() {\n    const { isActive } = this.state\n    return this.props.render({\n      isActive,\n      nextLoop: this.deactivate,\n    })\n  }\n}\n","import React from 'react'\nimport Sound from 'react-sound'\n\nimport { logMain } from '../helpers/logger'\nimport { IntervalRender } from './IntervalRender'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {\n  intervalSec: number\n  soundUrl: string\n  shouldPlay?: boolean\n  skipEnableChecks?: boolean\n}\n\nexport const SoundPlayInterval: React.FC<IProps> = ({\n  intervalSec,\n  soundUrl,\n  shouldPlay = true,\n  skipEnableChecks = false,\n}) => (\n  <WithRoot\n    observe={true}\n    render={({ config, user }) => {\n      if (!skipEnableChecks) {\n        if (!config.soundEnabled) {\n          logMain('sound is disabled')\n          return null\n        }\n        if (!user.soundEnabled) {\n          logMain('sound not enabled by user')\n          return null\n        }\n      }\n      logMain('sound play status: %s', shouldPlay)\n      return (\n        <IntervalRender\n          intervalSec={intervalSec}\n          enabled={shouldPlay}\n          render={({ isActive, nextLoop }) => (\n            <Sound\n              url={soundUrl}\n              playStatus={isActive ? 'PLAYING' : 'STOPPED'}\n              onFinishedPlaying={nextLoop}\n              loop={false}\n              autoLoad={true}\n              volume={user.soundVolume}\n            />\n          )}\n        />\n      )\n    }}\n  />\n)\n","module.exports = __webpack_public_path__ + \"static/media/connectionWarning.ac6fe03b.mp3\";","import { ISetDidChange, Lambda, observable } from 'mobx'\nimport { getParent, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { scroller } from 'react-scroll'\n\nimport { OrderStateCategoryEnum } from '../../../graph/generated'\nimport { GOrderList } from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TOrderModel } from './OrderModel'\n\nexport const OrderListModel = BaseModel.named('OrderList')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    collapsedCategories: types.optional(types.array(types.string), [\n      OrderStateCategoryEnum.Finished,\n    ]),\n  })\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length ? Array.from(self.branches) : []\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n    get isSingleBranchSelected() {\n      return self.branches.length === 1\n    },\n    get firstBranchId() {\n      if (self.branches.length === 1) {\n        return self.branches[0]\n      }\n      return null\n    },\n    get orderMap() {\n      return getParent<TOrderModel>(self).map\n    },\n  }))\n  .actions(self => ({\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    panMapToOrder(order: GOrderList.Orders) {\n      self.orderMap.panToOrder(order.id)\n    },\n  }))\n  .extend(self => {\n    const detailOpen = observable.set<ID>()\n\n    return {\n      views: {\n        isOrderDetailOpen(orderId: ID) {\n          return detailOpen.has(orderId)\n        },\n        isCategoryCollapsed(categoryCode: OrderStateCategoryEnum) {\n          return self.collapsedCategories.includes(categoryCode)\n        },\n      },\n      actions: {\n        toggleOrderDetail(orderId: ID) {\n          if (detailOpen.has(orderId)) {\n            detailOpen.delete(orderId)\n          } else {\n            detailOpen.add(orderId)\n          }\n        },\n        toggleCategoryCollapse(category: OrderStateCategoryEnum) {\n          const index = self.collapsedCategories.indexOf(category)\n          if (index >= 0) {\n            self.collapsedCategories.splice(index, 1)\n          } else {\n            self.collapsedCategories.push(category)\n          }\n        },\n        focusOrderDetail(orderId: ID) {\n          if (!detailOpen.has(orderId)) {\n            detailOpen.add(orderId)\n          }\n          setImmediate(() => {\n            scroller.scrollTo(`order-${orderId}`, {\n              smooth: 'easeInOutQuart',\n              containerId: 'order-list',\n              absolute: true,\n              offset: -140,\n            })\n          })\n        },\n        observerOrderDetail: detailOpen.observe.bind(detailOpen) as (\n          listener: (changes: ISetDidChange<ID>) => void,\n        ) => Lambda,\n      },\n    }\n  })\n\nexport interface TOrderListModel extends Instance<typeof OrderListModel> {}\nexport interface TOrderListModelProps\n  extends SnapshotIn<typeof OrderListModel> {}\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n  persistenceKey: 'admin@local',\n  pageTitleSuffix: 'LOCAL',\n  sentryDSN: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'admin@dev',\n    pageTitleSuffix: 'DEV',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'admin@prod',\n    pageTitleSuffix: 'Speɘdlo',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n","import { createContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const RootContext = createContext<TRootModel | undefined>(undefined)\n","import { createDefaultApolloClient, createNetworkLink } from '@speedlo/graphql'\nimport QueueLink from 'apollo-link-queue'\nimport { RetryLink } from 'apollo-link-retry'\nimport { autorun } from 'mobx'\n\nimport { appConfig } from '../config'\nimport { logGraph } from '../helpers/logger'\nimport { isNetworkOnline } from '../helpers/offline'\nimport { TAuthModel } from '../models/AuthModel'\nimport createAuthLink from './AuthLink'\n\nexport function createApolloClient(auth: TAuthModel) {\n  return createDefaultApolloClient(\n    createAuthLink(auth),\n    createRetryLink(),\n    createOfflineLink(),\n    createNetworkLink(appConfig.endpoint),\n  )\n}\n\nfunction createRetryLink() {\n  return new RetryLink({\n    delay: {\n      initial: 300,\n      max: Infinity,\n      jitter: true,\n    },\n    attempts: {\n      max: 5,\n      retryIf: error => !!error,\n    },\n  })\n}\n\nfunction createOfflineLink() {\n  const offlineLink = new QueueLink()\n  autorun(() => {\n    if (isNetworkOnline()) {\n      logGraph('client is online')\n      offlineLink.open()\n    } else {\n      logGraph('client is offline')\n      offlineLink.close()\n    }\n  })\n  return offlineLink\n}\n","import { ApolloLink, FetchResult, Observable } from 'apollo-link'\nimport { computed } from 'mobx'\nimport VError from 'verror'\n\nimport { TAuthModel } from '../models/AuthModel'\n\nexport default function createAuthLink(auth: TAuthModel) {\n  const headers = computed(() => ({\n    Authorization: `Bearer ${auth.communicationToken}`,\n  }))\n  const token = computed(() => auth.communicationToken)\n\n  return new ApolloLink((operation, forward) => {\n    if (!auth.canCommunicate) {\n      throw new VError(\n        `Executing operation ${operation.operationName} before authenticated`,\n        { operation },\n      )\n    }\n\n    const context = operation.getContext()\n    operation.setContext({\n      ...context,\n      headers: headers.get(),\n      token: token.get(),\n    })\n\n    return new Observable<FetchResult>(observer => {\n      const sub = forward!(operation).subscribe({\n        error: networkError => {\n          if (\n            networkError.result &&\n            networkError.result.code === 'INVALID_TOKEN'\n          ) {\n            auth.invalidate()\n            return\n          }\n          observer.error(networkError)\n        },\n        next: observer.next.bind(observer),\n        complete: observer.complete.bind(observer),\n      })\n      return () => sub.unsubscribe()\n    })\n  })\n}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersistence } from './logger'\n\nconst persistenceKey = appConfig.persistenceKey\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = (snapshot: object) =>\n    localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersistence('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersistence('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersistence('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { Sentry } from '@speedlo/tools'\nimport { getParent, Instance } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { IRootEnvironment } from '../../../atoms/RootProvider'\nimport { appConfig } from '../../../config'\nimport { i18n } from '../../../i18n'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TLoginProviderModel } from './LoginProviderModel'\n\nconst getLoginUrl = ({ username, password }: Dictionary<string>) =>\n  `${appConfig.endpoint}/users/token?username=${username}&password=${password}`\n\nexport const PasswordLoginModel = BaseModel.named('PasswordLogin')\n  .volatile(self => ({\n    errorCode: '',\n    errorMessage: '',\n  }))\n  .views(self => ({\n    get hasFailed() {\n      return Boolean(self.errorCode)\n    },\n  }))\n  .actions(self => ({\n    setFailure(code: string, message: string) {\n      self.errorCode = code\n      self.errorMessage = message\n    },\n    setSuccess(token: string, userId: string) {\n      const provider = getParent<TLoginProviderModel>(self)\n      provider.authenticate(token, userId)\n    },\n  }))\n  .actions(self => ({\n    async requestToken(username: string, password: string) {\n      const url = getLoginUrl({ username, password })\n      const fetch: TFetch = window.fetch\n      try {\n        const response = await fetch(url, {\n          headers: {\n            Accept: 'application/json',\n          },\n        })\n        const payload = await response.json()\n        self.log('received payload %j', payload)\n\n        if (response.status !== 200) {\n          self.setFailure(payload.code, payload.error)\n          self.log('token request failed for username %s', username)\n        } else {\n          self.setSuccess(payload.token, String(payload.userId))\n          self.log(\n            'token request success for username %s [%s]',\n            username,\n            payload.userId,\n          )\n        }\n      } catch (err) {\n        self.setFailure(\n          'FAIL',\n          i18n.t`Cannot login right now, please try again later`,\n        )\n        Sentry.withScope(scope => {\n          scope.setExtra('username', username)\n          scope.setLevel(Sentry.Severity.Debug)\n          Sentry.captureException(\n            new VError(err, 'Failed fetching password token'),\n          )\n        })\n      }\n    },\n  }))\n\nexport const createPasswordLoginModelMock = (\n  overrides = {},\n  env: IRootEnvironment,\n) => PasswordLoginModel.create({ ...overrides }, env)\n\nexport interface TPasswordLoginModel\n  extends Instance<typeof PasswordLoginModel> {}\n","import { getParent, Instance, types } from 'mobx-state-tree'\n\nimport { TAuthModel } from '../../../models/AuthModel'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { PasswordLoginModel } from './PasswordLoginModel'\n\nexport const LoginProviderModel = BaseModel.named('LoginProvider')\n  .props({\n    passwordLogin: types.optional(PasswordLoginModel, {}),\n  })\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      const auth = getParent<TAuthModel>(self)\n      auth.authenticate(token, userId)\n    },\n  }))\n\nexport interface TLoginProviderModel\n  extends Instance<typeof LoginProviderModel> {}\n","import gql from 'graphql-tag'\n\nexport const PasswordChangeMutation = gql`\n  mutation MPasswordChange($password: String!) {\n    updateUserPassword(newPassword: $password) {\n      id\n      token\n    }\n  }\n`\n","import { Base64 } from 'js-base64'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { MPasswordChange } from '../graph/types'\nimport { LoginProviderModel } from '../segments/login/models/LoginProviderModel'\nimport { PasswordChangeMutation } from './AuthModel.graphql'\nimport { BaseModel } from './BaseModel'\n\ninterface IVolatileProps {\n  tokenForPasswordChange?: string\n}\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    userId: types.optional(types.string, ''),\n    token: types.optional(types.string, ''),\n    provider: types.optional(LoginProviderModel, {}),\n  })\n  .volatile<IVolatileProps>(() => ({}))\n  .views(self => ({\n    get isAuthenticated() {\n      return self.token.length > 0\n    },\n    get isAuthenticatedUser() {\n      return this.isAuthenticated && self.userId.length > 0\n    },\n    get communicationToken() {\n      return self.tokenForPasswordChange || self.token\n    },\n    get canCommunicate() {\n      return this.isAuthenticated || self.tokenForPasswordChange !== undefined\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      self.tokenForPasswordChange = undefined\n      self.log('authenticated with id %s', userId)\n    },\n    invalidate() {\n      self.token = ''\n      self.userId = ''\n      self.tokenForPasswordChange = undefined\n      self.client.cache.reset()\n      self.log('invalidated authentication')\n    },\n  }))\n  .actions(self => ({\n    setForPasswordChange(temporaryB64EncodedToken: string) {\n      self.invalidate()\n      self.log('encoded token %s', temporaryB64EncodedToken)\n      self.tokenForPasswordChange = Base64.decode(temporaryB64EncodedToken)\n      self.log('using temp token %s', self.tokenForPasswordChange)\n    },\n    async changePassword(password: string) {\n      const variables: MPasswordChange.Variables = {\n        password,\n      }\n      const result = await self.client.mutate({\n        mutation: PasswordChangeMutation,\n        variables,\n        fetchPolicy: 'no-cache',\n      })\n\n      const {\n        updateUserPassword: { id, token },\n      } = result.data as MPasswordChange.Mutation\n\n      if (token && id) {\n        self.invalidate()\n        self.authenticate(token, id)\n      }\n    },\n  }))\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { BaseModel } from '../models/BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  soundEnabled: true,\n  orderListPollIntervalSec: 60,\n  orderListSoundIntervalSec: 60,\n})\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\n\nimport {\n  FCompanyBranchBrand,\n  FCompanyBranchFragment,\n  QUserBootstrapAccess,\n  QUserBootstrapFields,\n  QUserBootstrapPermissions,\n  QUserBootstrapUser,\n} from '../graph/generated'\nimport { RM } from '../helpers/ramda'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  isLoaded: boolean\n  branches: ReadonlyArray<FCompanyBranchFragment>\n  brands: ReadonlyArray<FCompanyBranchBrand>\n  soundEnabled: boolean\n  access: Maybe<IUserAccess>\n  permissions: QUserBootstrapPermissions\n}\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    language: types.maybe(types.string),\n    soundVolume: types.optional(types.number, 25),\n    soundIgnore: false,\n  })\n  .volatile<IVolatileProps>(() => ({\n    isLoaded: false,\n    branches: [],\n    brands: [],\n    soundEnabled: false,\n    access: null,\n    permissions: {\n      canCancelOrders: false,\n      canCreateOrder: false,\n    },\n  }))\n  .views(self => ({\n    get branchesId() {\n      return self.branches.map(R.prop('id'))\n    },\n    get defaultBranch() {\n      if (self.branches.length === 0) {\n        throw new Error('No user branches available to get defaultBranchId')\n      }\n      return self.branches[0]\n    },\n    filterBranches(predicate: (value: FCompanyBranchFragment) => boolean) {\n      return self.branches.filter(predicate)\n    },\n    canQuery(queryName: string) {\n      return (\n        self.access !== null && self.access.queries.has(queryName.toLowerCase())\n      )\n    },\n    canMutate(mutationName: string) {\n      return (\n        self.access !== null &&\n        self.access.mutations.has(mutationName.toLowerCase())\n      )\n    },\n    get isReady() {\n      return self.isLoaded || !self.root.auth.isAuthenticated\n    },\n  }))\n  .actions(self => ({\n    applyUserData(user: QUserBootstrapUser) {\n      self.language = user.language.rawCode\n      self.branches = user.branches\n      self.brands = RM.uniqBy(\n        RM.prop('id'),\n        user.branches.map(RM.prop('brand')),\n      )\n    },\n    applyPermissions(permissions: QUserBootstrapPermissions) {\n      self.permissions = permissions\n    },\n    applyAccess(access: QUserBootstrapAccess) {\n      const makeSet = (fields: ReadonlyArray<QUserBootstrapFields>) =>\n        new Set(\n          fields.map(\n            RM.compose(\n              RM.toLower,\n              RM.prop('name'),\n            ),\n          ),\n        )\n\n      self.access = {\n        queries: makeSet(access.queries.fields ? access.queries.fields : []),\n        mutations: makeSet(\n          access.mutations && access.mutations.fields\n            ? access.mutations.fields\n            : [],\n        ),\n        subscriptions: makeSet(\n          access.subscriptions && access.subscriptions.fields\n            ? access.subscriptions.fields\n            : [],\n        ),\n      }\n    },\n    finishBootstrap() {\n      self.isLoaded = true\n    },\n    setLanguage(lang: string) {\n      self.language = lang\n    },\n    controlSound(enabled: boolean = true, ignore: boolean = false) {\n      self.soundEnabled = enabled\n      self.soundIgnore = ignore\n    },\n    setSoundVolume(volume: number) {\n      self.soundVolume = volume\n    },\n  }))\n\ninterface IUserAccess {\n  queries: Set<string>\n  mutations: Set<string>\n  subscriptions: Set<string>\n}\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import faker from 'faker'\n\nfaker.locale = 'cz'\n\nexport { faker }\n","import { isoDate } from '@speedlo/graphql'\nimport { startOfMinute } from 'date-fns'\nimport _ from 'lodash'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { ISuggestion } from '../../../components/AddressSuggest'\nimport {\n  DeliveryTypeEnum,\n  MCreateOrderAcceptVariables,\n  MCreateOrderNewVariables,\n  MCreateOrderUpdateVariables,\n} from '../../../graph/generated'\nimport { GOrderVam, SOrderCall } from '../../../graph/types'\nimport { faker } from '../../../helpers/faker'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\n\nexport interface IOrderSidedishControlResult {\n  sidedishes: ReadonlyArray<ID>\n  isConfirmed: boolean\n}\n\nexport interface ICall extends Omit<SOrderCall.Call, 'isRinging' | 'eventId'> {\n  eventId?: ID\n}\n\nexport interface IOrderFormValues {\n  deliveryType: DeliveryTypeEnum.Messenger | DeliveryTypeEnum.Pickup\n  deliverAt?: Date\n  phone?: string\n  phonePrefix?: string\n  firstName?: string\n  lastName?: string\n  email?: string\n  note?: string\n}\n\ninterface IVolatileProps {\n  orderId: MaybeID\n  call?: ICall\n  deliveryAddress?: ISuggestion\n  deliveryMinutes?: number\n  minimalPrice?: string\n  notDeliveryLocation: boolean\n  values: IOrderFormValues\n  fakeValues?: Partial<IOrderFormValues>\n  fakeAddress?: ISuggestion\n  vamCustomer: Maybe<GOrderVam.VamCustomer>\n  sidedishMode: 'none' | 'recipe' | 'item'\n  sidedishRootId?: ID\n  sidedishSelection?: ReadonlyArray<ID>\n}\n\nexport const CreateOrderModel = BaseModel.named('CreateOrder')\n  .props({\n    branchId: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(getDefaultProps)\n  .views(self => ({\n    get currentBranch() {\n      return (\n        self.root.user.branches.find(RM.propEq('id', self.branchId)) ||\n        self.root.user.defaultBranch\n      )\n    },\n  }))\n  .views(self => ({\n    get deliveryType() {\n      return self.values.deliveryType\n    },\n    get isDelivery() {\n      return self.values.deliveryType === DeliveryTypeEnum.Messenger\n    },\n    get deliverAt() {\n      return (self.values.deliverAt && new Date(self.values.deliverAt)) || null\n    },\n    get deliverAtIso() {\n      return (this.deliverAt && isoDate(startOfMinute(this.deliverAt))) || null\n    },\n    get hasAddress() {\n      return Boolean(self.deliveryAddress || self.fakeAddress)\n    },\n    get gps() {\n      if (this.isDelivery && this.hasAddress) {\n        if (self.deliveryAddress && self.deliveryAddress.gps) {\n          return clearGps(self.deliveryAddress.gps)\n        } else if (self.fakeAddress && self.fakeAddress.gps) {\n          return clearGps(self.fakeAddress.gps)\n        }\n      }\n      return { ...clearGps(self.currentBranch.gps) }\n    },\n    get phone() {\n      if (self.values.phone !== undefined) {\n        return self.values.phone\n      }\n      return self.call ? self.call.phone : ''\n    },\n    get phonePrefix() {\n      if (self.values.phonePrefix !== undefined) {\n        return self.values.phonePrefix\n      }\n      if (self.call) {\n        return self.call.prefix\n      }\n      if (self.currentBranch.address.country) {\n        return self.currentBranch.address.country.phonePrefix\n      }\n      return '+'\n    },\n    get customer() {\n      const formValues = this.formValues as IOrderFormValues\n      return {\n        firstName: formValues.firstName,\n        lastName: formValues.lastName,\n        emails: formValues.email ? [{ email: formValues.email }] : null,\n        phones: formValues.phone\n          ? [\n              {\n                phone: `${formValues.phonePrefix}${formValues.phone}`,\n              },\n            ]\n          : null,\n      }\n    },\n    get formValues() {\n      if (self.vamCustomer !== null && self.vamCustomer.isFound) {\n        const { firstName, lastName, email, lastOrder } = self.vamCustomer\n        return _.defaults(\n          { ...self.values },\n          {\n            phone: this.phone,\n            phonePrefix: this.phonePrefix,\n            firstName,\n            lastName,\n            email,\n            note: (lastOrder && lastOrder.note) || '',\n          },\n        )\n      }\n      if (self.fakeValues) {\n        return _.defaults({ ...self.values }, { ...self.fakeValues })\n      }\n      return _.defaults(\n        { ...self.values },\n        { phone: this.phone, phonePrefix: this.phonePrefix },\n      )\n    },\n    get hasOrder() {\n      return self.orderId !== null\n    },\n  }))\n  .views(self => ({\n    get createOrderVariables(): MCreateOrderNewVariables {\n      return {\n        branchId: self.currentBranch.id,\n        deliveryType: self.values.deliveryType,\n        deliverAt: self.deliverAtIso,\n        callEventId: self.call && self.call.eventId,\n        gps: self.gps,\n      }\n    },\n    get updateOrderVariables(): MCreateOrderUpdateVariables {\n      return {\n        orderId: self.orderId!,\n        deliveryType: self.deliveryType,\n        deliverAt: self.deliverAtIso,\n        customer: self.customer,\n        gps: self.gps,\n      }\n    },\n    get acceptOrderVariables(): MCreateOrderAcceptVariables {\n      return {\n        orderId: self.orderId!,\n        customer: self.customer,\n        deliverAt: self.deliverAtIso,\n        note: self.formValues.note,\n      }\n    },\n  }))\n  .actions(self => ({\n    resetOrder() {\n      self.orderId = null\n    },\n    resetModel() {\n      Object.assign(self, getDefaultProps())\n    },\n    setOrder(orderId: ID) {\n      self.orderId = orderId\n      return orderId\n    },\n  }))\n  .actions(self => ({\n    useLocation(address: ISuggestion) {\n      self.deliveryAddress = address\n    },\n    clearLocation() {\n      self.deliveryAddress = undefined\n    },\n    setMinimalPrice(price: string | undefined) {\n      self.minimalPrice = price\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    userIsCalling(call: ICall | undefined) {\n      self.call = call\n    },\n    setDeliveryMinutes(minutes: number | undefined) {\n      self.deliveryMinutes = minutes\n    },\n    updateFormValues(\n      values: IOrderFormValues,\n      touched: { [K in keyof IOrderFormValues]?: boolean },\n    ) {\n      self.values = {\n        deliveryType: values.deliveryType,\n        ..._.pick(values, Object.keys(touched)),\n        deliverAt: values.deliverAt,\n      }\n      self.log('updated values: %j', self.values)\n    },\n    updateFromVam(vamCustomer: Maybe<GOrderVam.VamCustomer>) {\n      self.vamCustomer = vamCustomer\n      self.log('vam customer: %j', vamCustomer)\n    },\n    updateFormWithFakeValues() {\n      self.fakeValues = {\n        firstName: faker.name.firstName(),\n        lastName: faker.name.lastName(),\n        email: faker.internet.email(),\n        phone: faker.phone.phoneNumberFormat(3).replace(/\\s/g, ''),\n        phonePrefix: '+420',\n        note: faker.lorem.sentence().slice(0, 50 - 1),\n      }\n      self.fakeAddress = {\n        state: '',\n        city: 'Hradec Králové',\n        street: 'Opletalova',\n        houseNumber: '334/2',\n        gps: {\n          latitude: 50.2129839,\n          longitude: 15.8342836,\n        },\n      }\n    },\n  }))\n  .actions(self => {\n    let resolver: Maybe<(result: IOrderSidedishControlResult) => void> = null\n    const makeResolver = () => {\n      return new Promise<IOrderSidedishControlResult>(resolve => {\n        resolver = resolve\n      })\n    }\n    return {\n      selectSidedishesForRecipe(recipeId: ID) {\n        self.sidedishMode = 'recipe'\n        self.sidedishRootId = recipeId\n        return makeResolver()\n      },\n      selectSidedishesForItem(itemId: ID) {\n        self.sidedishMode = 'item'\n        self.sidedishRootId = itemId\n        return makeResolver()\n      },\n      sidedishSelectionConfirmed(sidedishes: ReadonlyArray<ID>) {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: true,\n            sidedishes,\n          })\n          resolver = null\n        }\n      },\n      sidedishSelectionCancel() {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: false,\n            sidedishes: [],\n          })\n          resolver = null\n        }\n      },\n    }\n  })\n\nfunction getDefaultProps(): IVolatileProps {\n  return {\n    orderId: null,\n    call: undefined,\n    values: {\n      deliveryType: DeliveryTypeEnum.Messenger,\n      deliverAt: undefined,\n      phone: undefined,\n      email: undefined,\n      firstName: undefined,\n      lastName: undefined,\n      note: undefined,\n    },\n    fakeAddress: undefined,\n    fakeValues: undefined,\n    deliveryAddress: undefined,\n    deliveryMinutes: undefined,\n    minimalPrice: undefined,\n    vamCustomer: null,\n    notDeliveryLocation: false,\n    sidedishMode: 'none',\n    sidedishRootId: undefined,\n    sidedishSelection: undefined,\n  }\n}\n\nfunction clearGps({ latitude, longitude }: GeoPoint) {\n  return { latitude, longitude }\n}\n\nexport interface TCreateOrderModel extends Instance<typeof CreateOrderModel> {}\nexport interface TCreateOrderModelProps\n  extends SnapshotIn<typeof CreateOrderModel> {}\n","import { Instance, types } from 'mobx-state-tree'\nimport GoogleMap from 'react-google-maps/lib/components/GoogleMap'\n\nimport { gpsToLatLng } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<GoogleMap>\n}\n\nconst GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 12),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLng(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<GoogleMap>) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\n","import gql from 'graphql-tag'\n\nimport { FGeoPointFragmentDoc } from '../../../graph/generated'\n\nexport const OrderBranchLocationQuery = gql`\n  query GOrderBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n\nexport const OrderLocationQuery = gql`\n  query GOrderLocation($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n","import { GOrderBranchLocation, GOrderLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport {\n  OrderBranchLocationQuery,\n  OrderLocationQuery,\n} from './OrderMapModel.graphql'\n\ninterface IVolatileProps {\n  activeDriverId: MaybeID\n}\n\nexport const OrderMapModel = MapModel.named('OrderMap')\n  .volatile<IVolatileProps>(() => ({\n    activeDriverId: null,\n  }))\n  .actions(self => ({\n    async panToOrder(orderId: ID) {\n      if (!self.mapRef) {\n        return\n      }\n      const { data } = await self.client.query<GOrderLocation.Query>({\n        query: OrderLocationQuery,\n        variables: { orderId },\n      })\n      if (data && data.order.gps) {\n        self.mapRef.panTo(gpsToLatLng(data.order.gps))\n      }\n    },\n    async panToBranch(branchId: ID) {\n      const { data } = await self.client.query<GOrderBranchLocation.Query>({\n        query: OrderBranchLocationQuery,\n        variables: { branchId },\n      })\n      if (!self.mapRef) {\n        return\n      }\n      if (data) {\n        self.mapRef.panTo(gpsToLatLng(data.companyBranch.gps))\n      }\n    },\n    activateDriver(driverId: ID, position: GeoPoint) {\n      self.activeDriverId = driverId\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(position))\n      }\n    },\n  }))\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { OrderListModel } from './OrderListModel'\nimport { OrderMapModel } from './OrderMapModel'\n\nexport const OrderModel = types.model('Order', {\n  list: types.optional(OrderListModel, {}),\n  map: types.optional(OrderMapModel, {}),\n})\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\n","import { endOfDay, startOfDay } from 'date-fns'\nimport { types } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\n\nexport interface IStatisticsDateFilter {\n  dateTimeFrom: Date\n  dateTimeTo: Date\n}\n\nexport const StatisticsModel = BaseModel.named('Statistics')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    drivers: types.optional(types.array(types.string), []),\n    closureBranch: types.maybeNull(types.string),\n  })\n  .volatile<IStatisticsDateFilter>(() => ({\n    dateTimeFrom: startOfDay(new Date()),\n    dateTimeTo: endOfDay(new Date()),\n  }))\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length > 0\n        ? Array.from(self.branches)\n        : self.root.user.branchesId\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n  }))\n  .actions(self => ({\n    updateFilter(formValues: IStatisticsDateFilter) {\n      self.dateTimeFrom = new Date(formValues.dateTimeFrom)\n      self.dateTimeTo = new Date(formValues.dateTimeTo)\n    },\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    setDriversFilter(drivers: ID[]) {\n      self.drivers.replace(drivers)\n    },\n    setClosureBranch(branch: MaybeID) {\n      self.closureBranch = branch\n    },\n    setTodayOrdersFilter() {\n      self.dateTimeFrom = startOfDay(new Date())\n      self.dateTimeTo = endOfDay(new Date())\n      self.branches.replace(self.root.order.list.branchesFilter)\n    },\n  }))\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TSettingsModel } from './SettingsModel'\n\nexport const SettingsBaseModel = BaseModel.named('SettingsBase').views(\n  self => ({\n    get settings() {\n      return getParent<TSettingsModel>(self)\n    },\n  }),\n)\n","import gql from 'graphql-tag'\n\nimport {\n  FMenuAllergenFragmentDoc,\n  FMenuWareUnitFragmentDoc,\n} from '../../../graph/generated'\n\nexport const MenuStockItemFragment = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...FMenuAllergen\n    }\n    wareUnit {\n      ...FMenuWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n  ${FMenuWareUnitFragmentDoc}\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport const MenuStockCreateMutation = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockUpdateMutation = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockDeleteMutation = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n","import { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuStockCreate,\n  GMenuStockDelete,\n  GMenuStockUpdate,\n} from '../../../graph/types'\nimport { TStockFormValues } from '../organisms/StockFormLoader'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuStockCreateMutation,\n  MenuStockDeleteMutation,\n  MenuStockUpdateMutation,\n} from './MenuStockModel.graphql'\n\nexport const MenuStockModel = MenuBaseModel.named('MenuStock').actions(\n  self => ({\n    createItem(formValues: TStockFormValues) {\n      const variables: GMenuStockCreate.Variables = {\n        stockItem: {\n          companyBranch: self.branchId,\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockCreateMutation,\n          variables,\n        }),\n      )\n    },\n    updateItem(formValues: TStockFormValues) {\n      const variables: GMenuStockUpdate.Variables = {\n        stockId: formValues.id,\n        stockItem: {\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteItem(stockId: ID) {\n      const variables: GMenuStockDelete.Variables = {\n        stockId,\n      }\n      await self.client.mutate({\n        mutation: MenuStockDeleteMutation,\n        variables,\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(formValues: TStockFormValues) {\n  return {\n    code: formValues.code,\n    label: formValues.nameLabel,\n    note: formValues.note,\n    plu: formValues.plu,\n    allergens: formValues.allergens,\n    wareUnit: formValues.wareUnit!,\n    allowNegative: formValues.allowNegative,\n  }\n}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { SettingsBaseModel } from '../../settings/models/SettingsBaseModel'\nimport { MenuCategoryModel } from './MenuCategoryModel'\nimport { MenuRecipeModel } from './MenuRecipeModel'\nimport { MenuStockModel } from './MenuStockModel'\n\nexport const MenuModel = SettingsBaseModel.named('Menu').props({\n  category: types.optional(MenuCategoryModel, {}),\n  recipe: types.optional(MenuRecipeModel, {}),\n  stock: types.optional(MenuStockModel, {}),\n})\n\nexport interface TMenuModel extends Instance<typeof MenuModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { BusinessHoursModel } from '../../businesshours/models/BusinessHoursModel'\nimport { MenuModel } from '../../menu/models/MenuModel'\n\nexport const SettingsModel = BaseModel.named('Settings')\n  .props({\n    selectedBranchId: types.maybe(types.string),\n    businessHours: types.optional(BusinessHoursModel, {}),\n    menu: types.optional(MenuModel, {}),\n  })\n  .views(self => ({\n    get branchId() {\n      return self.selectedBranchId || RM.head(self.root.user.defaultBranch.id)\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.selectedBranchId = branchId\n    },\n  }))\n\nexport interface TSettingsModel extends Instance<typeof SettingsModel> {}\n","import { FCompanyBranchFragment } from '../../../graph/generated'\nimport { GZoneLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport { ZoneLocationQuery } from '../Zones.graphql'\n\ninterface IVolatileProps {\n  currentZonePoints: Maybe<GeoPoint[]>\n}\n\nexport const ZoneMapModel = MapModel.named('ZoneMap')\n  .volatile<IVolatileProps>(() => ({\n    currentZonePoints: null,\n  }))\n  .actions(self => ({\n    updateZonePoints(points: GeoPoint[]) {\n      self.currentZonePoints = points\n    },\n    clearZonePoints() {\n      self.currentZonePoints = null\n    },\n    async panToZone(zoneId: ID) {\n      const { data } = await self.client.query({\n        query: ZoneLocationQuery,\n        variables: { zoneId },\n      })\n      if (data) {\n        const {\n          zone: {\n            companyBranch: { gps },\n          },\n        } = data as GZoneLocation.Query\n        if (self.mapRef) {\n          self.mapRef.panTo(gpsToLatLng(gps))\n        }\n      }\n    },\n    async panToBranch(branch: FCompanyBranchFragment) {\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(branch.gps))\n      }\n    },\n  }))\n","import gql from 'graphql-tag'\n\nimport { FZoneFragmentDoc } from '../../../graph/generated'\n\nexport const CreateZoneMutation = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...FZone\n    }\n  }\n  ${FZoneFragmentDoc}\n`\n\nexport const UpdateZonePriorityMutation = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport const DestroyZoneMutation = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n","import { flow, Instance, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\nimport { VError } from 'verror'\n\nimport {\n  FCompanyBranchBrand,\n  FCompanyBranchFragment,\n  FZoneFragment,\n  FZonePriceRangeFragment,\n  MZoneUpdateVariables,\n} from '../../../graph/generated'\nimport {\n  GCreateZone,\n  GDestroyZone,\n  GUpdateZonePriority,\n} from '../../../graph/types'\nimport { generatePolygon } from '../../../helpers/gps'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { ZoneMapModel } from '../models/ZoneMapModel'\nimport {\n  CreateZoneMutation,\n  DestroyZoneMutation,\n  UpdateZonePriorityMutation,\n} from './ZoneModel.graphql'\n\ntype TBranch = FCompanyBranchFragment\ntype TBrand = FCompanyBranchBrand\n\ninterface IVolatileProps {\n  branch: Maybe<TBranch>\n}\n\nexport const ZoneModel = BaseModel.named('Zone')\n  .props({\n    map: types.optional(ZoneMapModel, {}),\n    brandId: types.maybeNull(types.string),\n  })\n  .volatile<IVolatileProps>(() => ({\n    branch: null,\n  }))\n  .views(self => ({\n    get brand(): Maybe<TBrand> {\n      return (\n        (self.brandId &&\n          self.root.user.brands.find(RM.propEq('id', self.brandId))) ||\n        null\n      )\n    },\n    get hasBranchFilter() {\n      return self.branch !== null\n    },\n    get branchFilterId(): MaybeID {\n      return self.branch === null ? null : self.branch.id\n    },\n    get branchFilterPredicate() {\n      if (self.branch) {\n        return R.propEq('id', self.branch.id)\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), ['brand', 'id'])\n    },\n    get zoneFilterPredicate() {\n      if (self.branch !== null) {\n        return R.pathSatisfies(R.equals(self.branch.id), [\n          'companyBranch',\n          'id',\n        ])\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), [\n            'companyBranch',\n            'brand',\n            'id',\n          ])\n    },\n    get branches() {\n      return self.root.user.branches\n    },\n  }))\n  .views(self => ({\n    getZoneVariables(zoneId: ID, values: any): MZoneUpdateVariables {\n      return {\n        zoneId,\n        update: {\n          name: values.name,\n          enabled: values.enabled,\n          companyBranch: values.companyBranch.id,\n          zoneColor: values.zoneColor.id,\n          minimalOrderPrice: {\n            value: Number(values.minimalOrderPrice.value) || 0,\n          },\n          priceRangeRules: values.priceRangeRules\n            .map(normalizePriceRangeRule)\n            .filter(R.reject(R.pathEq(['price', 'value'], null))),\n          geoPolygon: self.map.currentZonePoints || undefined,\n        },\n      }\n    },\n  }))\n  .actions(self => ({\n    setBranchFilter(branch: TBranch) {\n      self.branch = branch\n      self.brandId = branch.brand.id\n      self.map.panToBranch(branch)\n    },\n    setBrandFilter(brand: TBrand, brandBranches: TBranch[]) {\n      self.brandId = brand.id\n      if (!self.branch || self.branch.brand.id !== brand.id) {\n        self.branch =\n          (brandBranches.length === 1 && RM.head(brandBranches)) || null\n      }\n    },\n    clearBranchFilter() {\n      self.branch = null\n    },\n    clearBrandFilter() {\n      self.brandId = null\n      self.branch = null\n    },\n  }))\n  .actions(self => ({\n    createZone: flow(function*(onZoneCreate: (zoneId: ID) => void) {\n      if (self.branch === null) {\n        throw new VError('Called createZone without branch being set')\n      }\n      const points = generatePolygon({\n        center: self.branch.gps,\n        metersRadius: 1000,\n        pointsCount: 5,\n      })\n      const variables: GCreateZone.Variables = {\n        branchId: self.branch.id,\n        points,\n      }\n      const { data } = yield self.client.mutate({\n        mutation: CreateZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: (prev, { mutationResult }) => {\n            const zone = (mutationResult.data as GCreateZone.Mutation)\n              .createZone\n            if (zone) {\n              return {\n                ...prev,\n                zones: prev.zones.concat(zone),\n              }\n            }\n            return prev\n          },\n        },\n      })\n      if (data) {\n        const zone = (data as GCreateZone.Mutation).createZone\n        onZoneCreate(zone.id)\n      }\n    }),\n    destroyZone(zoneId: ID) {\n      if (!zoneId) {\n        return\n      }\n      const variables: GDestroyZone.Variables = {\n        zoneId,\n      }\n      return self.client.mutate({\n        mutation: DestroyZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: prev => {\n            return {\n              ...prev,\n              zones: R.reject(R.propEq('id', zoneId), prev.zones),\n            }\n          },\n        },\n      })\n    },\n    changeZonePriority: flow(function*(\n      zone: FZoneFragment,\n      oldIndex: number,\n      newIndex: number,\n    ) {\n      if (!zone || oldIndex === newIndex) {\n        return\n      }\n      const offset = oldIndex - newIndex\n\n      const variables: GUpdateZonePriority.Variables = {\n        zoneId: zone.id,\n        offset,\n      }\n      yield self.client.mutate({\n        mutation: UpdateZonePriorityMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          updateZonePriority: {\n            __typename: 'Zone',\n            id: zone.id,\n            priority: zone.priority + offset,\n          },\n        },\n      })\n    }),\n  }))\n\nfunction numberOrNull(value: string | number | null) {\n  if (value === null) {\n    return null\n  }\n  const num = Number(value)\n  return Number.isNaN(num) ? null : num\n}\n\nfunction normalizePriceRangeRule(range: FZonePriceRangeFragment) {\n  return {\n    price: { value: numberOrNull(range.price.value) },\n    toPrice: { value: numberOrNull(range.toPrice.value) || -1 },\n  }\n}\n\nexport interface TZoneModel extends Instance<typeof ZoneModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { AuthModel } from '../models/AuthModel'\nimport { ConfigModel } from '../models/ConfigModel'\nimport { UserModel } from '../models/UserModel'\nimport { CreateOrderModel } from '../segments/createorder/models/CreateOrderModel'\nimport { OrderModel } from '../segments/order/models/OrderModel'\nimport { StatisticsModel } from '../segments/overview/models/StatisticsModel'\nimport { SettingsModel } from '../segments/settings/models/SettingsModel'\nimport { ZoneModel } from '../segments/zones/models/ZoneModel'\nimport { BaseModel } from './BaseModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    user: types.optional(UserModel, {}),\n    order: types.optional(OrderModel, {}),\n    createOrder: types.optional(CreateOrderModel, {}),\n    zone: types.optional(ZoneModel, {}),\n    settings: types.optional(SettingsModel, {}),\n    config: types.optional(ConfigModel, {}),\n    statistics: types.optional(StatisticsModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.settings,\n        self.zone,\n        self.order,\n        self.statistics,\n        self.createOrder,\n      ]\n    },\n  }))\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import { ApolloProvider, DefaultApolloClient } from '@speedlo/graphql'\nimport { useAsyncEffect } from '@speedlo/hooks'\nimport { Observer } from 'mobx-react'\nimport React from 'react'\n\nimport { RootContext } from '../context/RootContext'\nimport { createApolloClient } from '../graph/createClient'\nimport { persistModel } from '../helpers/persistModel'\nimport { AuthModel } from '../models/AuthModel'\nimport { RootModel, TRootModel } from '../models/RootModel'\nimport Pacman from './Pacman'\n\nexport const RootProvider: React.FC = ({ children }) => {\n  const [isInit, setInit] = React.useState(false)\n  const [root] = React.useState(() => {\n    const auth = AuthModel.create({})\n    const apolloClient = createApolloClient(auth)\n    return RootModel.create(\n      { auth },\n      {\n        apolloClient,\n      },\n    )\n  })\n\n  useAsyncEffect(\n    async () => {\n      if (process.env.REACT_APP_STAGE === 'dev') {\n        // @ts-ignore\n        window.root = root\n      }\n      await Promise.all(root.persistedModels.map(persistModel))\n      setInit(true)\n    },\n    [root],\n  )\n\n  if (!isInit) {\n    return <Pacman />\n  }\n\n  return (\n    <ApolloProvider client={root.client}>\n      <RootContext.Provider value={root}>\n        {React.Children.only(children)}\n      </RootContext.Provider>\n    </ApolloProvider>\n  )\n}\n\nexport const useRoot = () => {\n  const root = React.useContext(RootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\ninterface IWithRootProps {\n  children(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.FC<IWithRootProps> = ({\n  children,\n  observe = true,\n}) => {\n  const root = useRoot()\n  return observe === true ? (\n    <Observer>{() => children(root)}</Observer>\n  ) : (\n    children(root)\n  )\n}\n\nexport interface IRootEnvironment {\n  fetch: TFetch\n  apolloClient: DefaultApolloClient\n}\n","// @ts-ignore temporary before figuring out a logging solution that works in prod\nwindow.localStorage.setItem('debug', '*,-sockjs*')\n","var map = {\n\t\"./af\": [\n\t\t564,\n\t\t4\n\t],\n\t\"./af.js\": [\n\t\t564,\n\t\t4\n\t],\n\t\"./ar\": [\n\t\t571,\n\t\t27\n\t],\n\t\"./ar-dz\": [\n\t\t565,\n\t\t60\n\t],\n\t\"./ar-dz.js\": [\n\t\t565,\n\t\t60\n\t],\n\t\"./ar-kw\": [\n\t\t566,\n\t\t94\n\t],\n\t\"./ar-kw.js\": [\n\t\t566,\n\t\t94\n\t],\n\t\"./ar-ly\": [\n\t\t567,\n\t\t105\n\t],\n\t\"./ar-ly.js\": [\n\t\t567,\n\t\t105\n\t],\n\t\"./ar-ma\": [\n\t\t568,\n\t\t116\n\t],\n\t\"./ar-ma.js\": [\n\t\t568,\n\t\t116\n\t],\n\t\"./ar-sa\": [\n\t\t569,\n\t\t5\n\t],\n\t\"./ar-sa.js\": [\n\t\t569,\n\t\t5\n\t],\n\t\"./ar-tn\": [\n\t\t570,\n\t\t16\n\t],\n\t\"./ar-tn.js\": [\n\t\t570,\n\t\t16\n\t],\n\t\"./ar.js\": [\n\t\t571,\n\t\t27\n\t],\n\t\"./az\": [\n\t\t572,\n\t\t38\n\t],\n\t\"./az.js\": [\n\t\t572,\n\t\t38\n\t],\n\t\"./be\": [\n\t\t573,\n\t\t49\n\t],\n\t\"./be.js\": [\n\t\t573,\n\t\t49\n\t],\n\t\"./bg\": [\n\t\t574,\n\t\t61\n\t],\n\t\"./bg.js\": [\n\t\t574,\n\t\t61\n\t],\n\t\"./bm\": [\n\t\t575,\n\t\t72\n\t],\n\t\"./bm.js\": [\n\t\t575,\n\t\t72\n\t],\n\t\"./bn\": [\n\t\t576,\n\t\t83\n\t],\n\t\"./bn.js\": [\n\t\t576,\n\t\t83\n\t],\n\t\"./bo\": [\n\t\t577,\n\t\t87\n\t],\n\t\"./bo.js\": [\n\t\t577,\n\t\t87\n\t],\n\t\"./br\": [\n\t\t578,\n\t\t88\n\t],\n\t\"./br.js\": [\n\t\t578,\n\t\t88\n\t],\n\t\"./bs\": [\n\t\t579,\n\t\t89\n\t],\n\t\"./bs.js\": [\n\t\t579,\n\t\t89\n\t],\n\t\"./ca\": [\n\t\t580,\n\t\t90\n\t],\n\t\"./ca.js\": [\n\t\t580,\n\t\t90\n\t],\n\t\"./cs\": [\n\t\t581,\n\t\t91\n\t],\n\t\"./cs.js\": [\n\t\t581,\n\t\t91\n\t],\n\t\"./cv\": [\n\t\t582,\n\t\t92\n\t],\n\t\"./cv.js\": [\n\t\t582,\n\t\t92\n\t],\n\t\"./cy\": [\n\t\t583,\n\t\t93\n\t],\n\t\"./cy.js\": [\n\t\t583,\n\t\t93\n\t],\n\t\"./da\": [\n\t\t584,\n\t\t95\n\t],\n\t\"./da.js\": [\n\t\t584,\n\t\t95\n\t],\n\t\"./de\": [\n\t\t587,\n\t\t98\n\t],\n\t\"./de-at\": [\n\t\t585,\n\t\t96\n\t],\n\t\"./de-at.js\": [\n\t\t585,\n\t\t96\n\t],\n\t\"./de-ch\": [\n\t\t586,\n\t\t97\n\t],\n\t\"./de-ch.js\": [\n\t\t586,\n\t\t97\n\t],\n\t\"./de.js\": [\n\t\t587,\n\t\t98\n\t],\n\t\"./dv\": [\n\t\t588,\n\t\t99\n\t],\n\t\"./dv.js\": [\n\t\t588,\n\t\t99\n\t],\n\t\"./el\": [\n\t\t589,\n\t\t100\n\t],\n\t\"./el.js\": [\n\t\t589,\n\t\t100\n\t],\n\t\"./en-au\": [\n\t\t590,\n\t\t101\n\t],\n\t\"./en-au.js\": [\n\t\t590,\n\t\t101\n\t],\n\t\"./en-ca\": [\n\t\t591,\n\t\t102\n\t],\n\t\"./en-ca.js\": [\n\t\t591,\n\t\t102\n\t],\n\t\"./en-gb\": [\n\t\t592,\n\t\t103\n\t],\n\t\"./en-gb.js\": [\n\t\t592,\n\t\t103\n\t],\n\t\"./en-ie\": [\n\t\t593,\n\t\t104\n\t],\n\t\"./en-ie.js\": [\n\t\t593,\n\t\t104\n\t],\n\t\"./en-il\": [\n\t\t594,\n\t\t106\n\t],\n\t\"./en-il.js\": [\n\t\t594,\n\t\t106\n\t],\n\t\"./en-nz\": [\n\t\t595,\n\t\t107\n\t],\n\t\"./en-nz.js\": [\n\t\t595,\n\t\t107\n\t],\n\t\"./eo\": [\n\t\t596,\n\t\t108\n\t],\n\t\"./eo.js\": [\n\t\t596,\n\t\t108\n\t],\n\t\"./es\": [\n\t\t599,\n\t\t111\n\t],\n\t\"./es-do\": [\n\t\t597,\n\t\t109\n\t],\n\t\"./es-do.js\": [\n\t\t597,\n\t\t109\n\t],\n\t\"./es-us\": [\n\t\t598,\n\t\t110\n\t],\n\t\"./es-us.js\": [\n\t\t598,\n\t\t110\n\t],\n\t\"./es.js\": [\n\t\t599,\n\t\t111\n\t],\n\t\"./et\": [\n\t\t600,\n\t\t112\n\t],\n\t\"./et.js\": [\n\t\t600,\n\t\t112\n\t],\n\t\"./eu\": [\n\t\t601,\n\t\t113\n\t],\n\t\"./eu.js\": [\n\t\t601,\n\t\t113\n\t],\n\t\"./fa\": [\n\t\t602,\n\t\t114\n\t],\n\t\"./fa.js\": [\n\t\t602,\n\t\t114\n\t],\n\t\"./fi\": [\n\t\t603,\n\t\t115\n\t],\n\t\"./fi.js\": [\n\t\t603,\n\t\t115\n\t],\n\t\"./fo\": [\n\t\t604,\n\t\t117\n\t],\n\t\"./fo.js\": [\n\t\t604,\n\t\t117\n\t],\n\t\"./fr\": [\n\t\t607,\n\t\t120\n\t],\n\t\"./fr-ca\": [\n\t\t605,\n\t\t118\n\t],\n\t\"./fr-ca.js\": [\n\t\t605,\n\t\t118\n\t],\n\t\"./fr-ch\": [\n\t\t606,\n\t\t119\n\t],\n\t\"./fr-ch.js\": [\n\t\t606,\n\t\t119\n\t],\n\t\"./fr.js\": [\n\t\t607,\n\t\t120\n\t],\n\t\"./fy\": [\n\t\t608,\n\t\t121\n\t],\n\t\"./fy.js\": [\n\t\t608,\n\t\t121\n\t],\n\t\"./gd\": [\n\t\t609,\n\t\t122\n\t],\n\t\"./gd.js\": [\n\t\t609,\n\t\t122\n\t],\n\t\"./gl\": [\n\t\t610,\n\t\t123\n\t],\n\t\"./gl.js\": [\n\t\t610,\n\t\t123\n\t],\n\t\"./gom-latn\": [\n\t\t611,\n\t\t124\n\t],\n\t\"./gom-latn.js\": [\n\t\t611,\n\t\t124\n\t],\n\t\"./gu\": [\n\t\t612,\n\t\t125\n\t],\n\t\"./gu.js\": [\n\t\t612,\n\t\t125\n\t],\n\t\"./he\": [\n\t\t613,\n\t\t126\n\t],\n\t\"./he.js\": [\n\t\t613,\n\t\t126\n\t],\n\t\"./hi\": [\n\t\t614,\n\t\t6\n\t],\n\t\"./hi.js\": [\n\t\t614,\n\t\t6\n\t],\n\t\"./hr\": [\n\t\t615,\n\t\t7\n\t],\n\t\"./hr.js\": [\n\t\t615,\n\t\t7\n\t],\n\t\"./hu\": [\n\t\t616,\n\t\t8\n\t],\n\t\"./hu.js\": [\n\t\t616,\n\t\t8\n\t],\n\t\"./hy-am\": [\n\t\t617,\n\t\t9\n\t],\n\t\"./hy-am.js\": [\n\t\t617,\n\t\t9\n\t],\n\t\"./id\": [\n\t\t618,\n\t\t10\n\t],\n\t\"./id.js\": [\n\t\t618,\n\t\t10\n\t],\n\t\"./is\": [\n\t\t619,\n\t\t11\n\t],\n\t\"./is.js\": [\n\t\t619,\n\t\t11\n\t],\n\t\"./it\": [\n\t\t620,\n\t\t12\n\t],\n\t\"./it.js\": [\n\t\t620,\n\t\t12\n\t],\n\t\"./ja\": [\n\t\t621,\n\t\t13\n\t],\n\t\"./ja.js\": [\n\t\t621,\n\t\t13\n\t],\n\t\"./jv\": [\n\t\t622,\n\t\t14\n\t],\n\t\"./jv.js\": [\n\t\t622,\n\t\t14\n\t],\n\t\"./ka\": [\n\t\t623,\n\t\t15\n\t],\n\t\"./ka.js\": [\n\t\t623,\n\t\t15\n\t],\n\t\"./kk\": [\n\t\t624,\n\t\t17\n\t],\n\t\"./kk.js\": [\n\t\t624,\n\t\t17\n\t],\n\t\"./km\": [\n\t\t625,\n\t\t18\n\t],\n\t\"./km.js\": [\n\t\t625,\n\t\t18\n\t],\n\t\"./kn\": [\n\t\t626,\n\t\t19\n\t],\n\t\"./kn.js\": [\n\t\t626,\n\t\t19\n\t],\n\t\"./ko\": [\n\t\t627,\n\t\t20\n\t],\n\t\"./ko.js\": [\n\t\t627,\n\t\t20\n\t],\n\t\"./ky\": [\n\t\t628,\n\t\t21\n\t],\n\t\"./ky.js\": [\n\t\t628,\n\t\t21\n\t],\n\t\"./lb\": [\n\t\t629,\n\t\t22\n\t],\n\t\"./lb.js\": [\n\t\t629,\n\t\t22\n\t],\n\t\"./lo\": [\n\t\t630,\n\t\t23\n\t],\n\t\"./lo.js\": [\n\t\t630,\n\t\t23\n\t],\n\t\"./lt\": [\n\t\t631,\n\t\t24\n\t],\n\t\"./lt.js\": [\n\t\t631,\n\t\t24\n\t],\n\t\"./lv\": [\n\t\t632,\n\t\t25\n\t],\n\t\"./lv.js\": [\n\t\t632,\n\t\t25\n\t],\n\t\"./me\": [\n\t\t633,\n\t\t26\n\t],\n\t\"./me.js\": [\n\t\t633,\n\t\t26\n\t],\n\t\"./mi\": [\n\t\t634,\n\t\t28\n\t],\n\t\"./mi.js\": [\n\t\t634,\n\t\t28\n\t],\n\t\"./mk\": [\n\t\t635,\n\t\t29\n\t],\n\t\"./mk.js\": [\n\t\t635,\n\t\t29\n\t],\n\t\"./ml\": [\n\t\t636,\n\t\t30\n\t],\n\t\"./ml.js\": [\n\t\t636,\n\t\t30\n\t],\n\t\"./mn\": [\n\t\t637,\n\t\t31\n\t],\n\t\"./mn.js\": [\n\t\t637,\n\t\t31\n\t],\n\t\"./mr\": [\n\t\t638,\n\t\t32\n\t],\n\t\"./mr.js\": [\n\t\t638,\n\t\t32\n\t],\n\t\"./ms\": [\n\t\t640,\n\t\t34\n\t],\n\t\"./ms-my\": [\n\t\t639,\n\t\t33\n\t],\n\t\"./ms-my.js\": [\n\t\t639,\n\t\t33\n\t],\n\t\"./ms.js\": [\n\t\t640,\n\t\t34\n\t],\n\t\"./mt\": [\n\t\t641,\n\t\t35\n\t],\n\t\"./mt.js\": [\n\t\t641,\n\t\t35\n\t],\n\t\"./my\": [\n\t\t642,\n\t\t36\n\t],\n\t\"./my.js\": [\n\t\t642,\n\t\t36\n\t],\n\t\"./nb\": [\n\t\t643,\n\t\t37\n\t],\n\t\"./nb.js\": [\n\t\t643,\n\t\t37\n\t],\n\t\"./ne\": [\n\t\t644,\n\t\t39\n\t],\n\t\"./ne.js\": [\n\t\t644,\n\t\t39\n\t],\n\t\"./nl\": [\n\t\t646,\n\t\t41\n\t],\n\t\"./nl-be\": [\n\t\t645,\n\t\t40\n\t],\n\t\"./nl-be.js\": [\n\t\t645,\n\t\t40\n\t],\n\t\"./nl.js\": [\n\t\t646,\n\t\t41\n\t],\n\t\"./nn\": [\n\t\t647,\n\t\t42\n\t],\n\t\"./nn.js\": [\n\t\t647,\n\t\t42\n\t],\n\t\"./pa-in\": [\n\t\t648,\n\t\t43\n\t],\n\t\"./pa-in.js\": [\n\t\t648,\n\t\t43\n\t],\n\t\"./pl\": [\n\t\t649,\n\t\t44\n\t],\n\t\"./pl.js\": [\n\t\t649,\n\t\t44\n\t],\n\t\"./pt\": [\n\t\t651,\n\t\t46\n\t],\n\t\"./pt-br\": [\n\t\t650,\n\t\t45\n\t],\n\t\"./pt-br.js\": [\n\t\t650,\n\t\t45\n\t],\n\t\"./pt.js\": [\n\t\t651,\n\t\t46\n\t],\n\t\"./ro\": [\n\t\t652,\n\t\t47\n\t],\n\t\"./ro.js\": [\n\t\t652,\n\t\t47\n\t],\n\t\"./ru\": [\n\t\t653,\n\t\t48\n\t],\n\t\"./ru.js\": [\n\t\t653,\n\t\t48\n\t],\n\t\"./sd\": [\n\t\t654,\n\t\t50\n\t],\n\t\"./sd.js\": [\n\t\t654,\n\t\t50\n\t],\n\t\"./se\": [\n\t\t655,\n\t\t51\n\t],\n\t\"./se.js\": [\n\t\t655,\n\t\t51\n\t],\n\t\"./si\": [\n\t\t656,\n\t\t52\n\t],\n\t\"./si.js\": [\n\t\t656,\n\t\t52\n\t],\n\t\"./sk\": [\n\t\t657,\n\t\t53\n\t],\n\t\"./sk.js\": [\n\t\t657,\n\t\t53\n\t],\n\t\"./sl\": [\n\t\t658,\n\t\t54\n\t],\n\t\"./sl.js\": [\n\t\t658,\n\t\t54\n\t],\n\t\"./sq\": [\n\t\t659,\n\t\t55\n\t],\n\t\"./sq.js\": [\n\t\t659,\n\t\t55\n\t],\n\t\"./sr\": [\n\t\t661,\n\t\t57\n\t],\n\t\"./sr-cyrl\": [\n\t\t660,\n\t\t56\n\t],\n\t\"./sr-cyrl.js\": [\n\t\t660,\n\t\t56\n\t],\n\t\"./sr.js\": [\n\t\t661,\n\t\t57\n\t],\n\t\"./ss\": [\n\t\t662,\n\t\t58\n\t],\n\t\"./ss.js\": [\n\t\t662,\n\t\t58\n\t],\n\t\"./sv\": [\n\t\t663,\n\t\t59\n\t],\n\t\"./sv.js\": [\n\t\t663,\n\t\t59\n\t],\n\t\"./sw\": [\n\t\t664,\n\t\t62\n\t],\n\t\"./sw.js\": [\n\t\t664,\n\t\t62\n\t],\n\t\"./ta\": [\n\t\t665,\n\t\t63\n\t],\n\t\"./ta.js\": [\n\t\t665,\n\t\t63\n\t],\n\t\"./te\": [\n\t\t666,\n\t\t64\n\t],\n\t\"./te.js\": [\n\t\t666,\n\t\t64\n\t],\n\t\"./tet\": [\n\t\t667,\n\t\t65\n\t],\n\t\"./tet.js\": [\n\t\t667,\n\t\t65\n\t],\n\t\"./tg\": [\n\t\t668,\n\t\t66\n\t],\n\t\"./tg.js\": [\n\t\t668,\n\t\t66\n\t],\n\t\"./th\": [\n\t\t669,\n\t\t67\n\t],\n\t\"./th.js\": [\n\t\t669,\n\t\t67\n\t],\n\t\"./tl-ph\": [\n\t\t670,\n\t\t68\n\t],\n\t\"./tl-ph.js\": [\n\t\t670,\n\t\t68\n\t],\n\t\"./tlh\": [\n\t\t671,\n\t\t69\n\t],\n\t\"./tlh.js\": [\n\t\t671,\n\t\t69\n\t],\n\t\"./tr\": [\n\t\t672,\n\t\t70\n\t],\n\t\"./tr.js\": [\n\t\t672,\n\t\t70\n\t],\n\t\"./tzl\": [\n\t\t673,\n\t\t71\n\t],\n\t\"./tzl.js\": [\n\t\t673,\n\t\t71\n\t],\n\t\"./tzm\": [\n\t\t675,\n\t\t74\n\t],\n\t\"./tzm-latn\": [\n\t\t674,\n\t\t73\n\t],\n\t\"./tzm-latn.js\": [\n\t\t674,\n\t\t73\n\t],\n\t\"./tzm.js\": [\n\t\t675,\n\t\t74\n\t],\n\t\"./ug-cn\": [\n\t\t676,\n\t\t75\n\t],\n\t\"./ug-cn.js\": [\n\t\t676,\n\t\t75\n\t],\n\t\"./uk\": [\n\t\t677,\n\t\t76\n\t],\n\t\"./uk.js\": [\n\t\t677,\n\t\t76\n\t],\n\t\"./ur\": [\n\t\t678,\n\t\t77\n\t],\n\t\"./ur.js\": [\n\t\t678,\n\t\t77\n\t],\n\t\"./uz\": [\n\t\t680,\n\t\t79\n\t],\n\t\"./uz-latn\": [\n\t\t679,\n\t\t78\n\t],\n\t\"./uz-latn.js\": [\n\t\t679,\n\t\t78\n\t],\n\t\"./uz.js\": [\n\t\t680,\n\t\t79\n\t],\n\t\"./vi\": [\n\t\t681,\n\t\t80\n\t],\n\t\"./vi.js\": [\n\t\t681,\n\t\t80\n\t],\n\t\"./x-pseudo\": [\n\t\t682,\n\t\t81\n\t],\n\t\"./x-pseudo.js\": [\n\t\t682,\n\t\t81\n\t],\n\t\"./yo\": [\n\t\t683,\n\t\t82\n\t],\n\t\"./yo.js\": [\n\t\t683,\n\t\t82\n\t],\n\t\"./zh-cn\": [\n\t\t684,\n\t\t84\n\t],\n\t\"./zh-cn.js\": [\n\t\t684,\n\t\t84\n\t],\n\t\"./zh-hk\": [\n\t\t685,\n\t\t85\n\t],\n\t\"./zh-hk.js\": [\n\t\t685,\n\t\t85\n\t],\n\t\"./zh-tw\": [\n\t\t686,\n\t\t86\n\t],\n\t\"./zh-tw.js\": [\n\t\t686,\n\t\t86\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6430;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./bg\": [\n\t\t687,\n\t\t127\n\t],\n\t\"./bg.js\": [\n\t\t687,\n\t\t127\n\t],\n\t\"./chs\": [\n\t\t688,\n\t\t133\n\t],\n\t\"./chs.js\": [\n\t\t688,\n\t\t133\n\t],\n\t\"./cs\": [\n\t\t689,\n\t\t144\n\t],\n\t\"./cs.js\": [\n\t\t689,\n\t\t144\n\t],\n\t\"./da-dk\": [\n\t\t690,\n\t\t155\n\t],\n\t\"./da-dk.js\": [\n\t\t690,\n\t\t155\n\t],\n\t\"./de\": [\n\t\t692,\n\t\t128\n\t],\n\t\"./de-ch\": [\n\t\t691,\n\t\t160\n\t],\n\t\"./de-ch.js\": [\n\t\t691,\n\t\t160\n\t],\n\t\"./de.js\": [\n\t\t692,\n\t\t128\n\t],\n\t\"./en-au\": [\n\t\t693,\n\t\t129\n\t],\n\t\"./en-au.js\": [\n\t\t693,\n\t\t129\n\t],\n\t\"./en-gb\": [\n\t\t694,\n\t\t130\n\t],\n\t\"./en-gb.js\": [\n\t\t694,\n\t\t130\n\t],\n\t\"./en-za\": [\n\t\t695,\n\t\t131\n\t],\n\t\"./en-za.js\": [\n\t\t695,\n\t\t131\n\t],\n\t\"./es\": [\n\t\t697,\n\t\t134\n\t],\n\t\"./es-es\": [\n\t\t696,\n\t\t132\n\t],\n\t\"./es-es.js\": [\n\t\t696,\n\t\t132\n\t],\n\t\"./es.js\": [\n\t\t697,\n\t\t134\n\t],\n\t\"./et\": [\n\t\t698,\n\t\t135\n\t],\n\t\"./et.js\": [\n\t\t698,\n\t\t135\n\t],\n\t\"./fi\": [\n\t\t699,\n\t\t136\n\t],\n\t\"./fi.js\": [\n\t\t699,\n\t\t136\n\t],\n\t\"./fr\": [\n\t\t702,\n\t\t139\n\t],\n\t\"./fr-ca\": [\n\t\t700,\n\t\t137\n\t],\n\t\"./fr-ca.js\": [\n\t\t700,\n\t\t137\n\t],\n\t\"./fr-ch\": [\n\t\t701,\n\t\t138\n\t],\n\t\"./fr-ch.js\": [\n\t\t701,\n\t\t138\n\t],\n\t\"./fr.js\": [\n\t\t702,\n\t\t139\n\t],\n\t\"./hu\": [\n\t\t703,\n\t\t140\n\t],\n\t\"./hu.js\": [\n\t\t703,\n\t\t140\n\t],\n\t\"./it\": [\n\t\t704,\n\t\t141\n\t],\n\t\"./it.js\": [\n\t\t704,\n\t\t141\n\t],\n\t\"./ja\": [\n\t\t705,\n\t\t142\n\t],\n\t\"./ja.js\": [\n\t\t705,\n\t\t142\n\t],\n\t\"./lv\": [\n\t\t706,\n\t\t143\n\t],\n\t\"./lv.js\": [\n\t\t706,\n\t\t143\n\t],\n\t\"./nl-be\": [\n\t\t707,\n\t\t145\n\t],\n\t\"./nl-be.js\": [\n\t\t707,\n\t\t145\n\t],\n\t\"./nl-nl\": [\n\t\t708,\n\t\t146\n\t],\n\t\"./nl-nl.js\": [\n\t\t708,\n\t\t146\n\t],\n\t\"./no\": [\n\t\t709,\n\t\t147\n\t],\n\t\"./no.js\": [\n\t\t709,\n\t\t147\n\t],\n\t\"./pl\": [\n\t\t710,\n\t\t148\n\t],\n\t\"./pl.js\": [\n\t\t710,\n\t\t148\n\t],\n\t\"./pt-br\": [\n\t\t711,\n\t\t149\n\t],\n\t\"./pt-br.js\": [\n\t\t711,\n\t\t149\n\t],\n\t\"./pt-pt\": [\n\t\t712,\n\t\t150\n\t],\n\t\"./pt-pt.js\": [\n\t\t712,\n\t\t150\n\t],\n\t\"./ru\": [\n\t\t714,\n\t\t152\n\t],\n\t\"./ru-ua\": [\n\t\t713,\n\t\t151\n\t],\n\t\"./ru-ua.js\": [\n\t\t713,\n\t\t151\n\t],\n\t\"./ru.js\": [\n\t\t714,\n\t\t152\n\t],\n\t\"./sk\": [\n\t\t715,\n\t\t153\n\t],\n\t\"./sk.js\": [\n\t\t715,\n\t\t153\n\t],\n\t\"./sl\": [\n\t\t716,\n\t\t154\n\t],\n\t\"./sl.js\": [\n\t\t716,\n\t\t154\n\t],\n\t\"./th\": [\n\t\t717,\n\t\t156\n\t],\n\t\"./th.js\": [\n\t\t717,\n\t\t156\n\t],\n\t\"./tr\": [\n\t\t718,\n\t\t157\n\t],\n\t\"./tr.js\": [\n\t\t718,\n\t\t157\n\t],\n\t\"./uk-ua\": [\n\t\t719,\n\t\t158\n\t],\n\t\"./uk-ua.js\": [\n\t\t719,\n\t\t158\n\t],\n\t\"./vi\": [\n\t\t720,\n\t\t159\n\t],\n\t\"./vi.js\": [\n\t\t720,\n\t\t159\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6431;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.po\": [\n\t\t7645,\n\t\t162\n\t],\n\t\"./de/messages.po\": [\n\t\t7646,\n\t\t163\n\t],\n\t\"./en-dev/messages.po\": [\n\t\t7648,\n\t\t165\n\t],\n\t\"./en/messages.po\": [\n\t\t7647,\n\t\t164\n\t],\n\t\"./pl/messages.po\": [\n\t\t7649,\n\t\t166\n\t],\n\t\"./sk/messages.po\": [\n\t\t7650,\n\t\t167\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6432;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t7651,\n\t\t162\n\t],\n\t\"./de/messages.js\": [\n\t\t7652,\n\t\t163\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t7654,\n\t\t165\n\t],\n\t\"./en/messages.js\": [\n\t\t7653,\n\t\t164\n\t],\n\t\"./pl/messages.js\": [\n\t\t7655,\n\t\t166\n\t],\n\t\"./sk/messages.js\": [\n\t\t7656,\n\t\t167\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6433;\nmodule.exports = webpackAsyncContext;","import { computeDestinationPoint, getBounds } from 'geolib'\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n\ninterface IGeneratePolygonInput {\n  center: GeoPoint\n  metersRadius?: number\n  pointsCount?: number\n}\n\nexport const generatePolygon = ({\n  center,\n  metersRadius = 1000,\n  pointsCount = 15,\n}: IGeneratePolygonInput) => {\n  return new Array(pointsCount).fill(null).map((_, idx) => {\n    const degree = 360 / pointsCount * idx\n    return computeDestinationPoint(center, metersRadius, degree)\n  })\n}\n\nexport const getBoundsOfPoints = (points: GeoPoint[]) => {\n  const bounds = getBounds(points)\n  if (!bounds) {\n    return null\n  }\n  return new google.maps.LatLngBounds(\n    {\n      lat: bounds.minLat,\n      lng: bounds.minLng,\n    },\n    {\n      lat: bounds.maxLat,\n      lng: bounds.maxLng,\n    },\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Dialog } from '@material-ui/core'\nimport { WarningTwoTone } from '@material-ui/icons'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport connectionWarningSound from '../assets/connectionWarning.mp3'\nimport { isNetworkOffline } from '../helpers/offline'\nimport { Colors } from '../styling'\nimport { SoundPlayInterval } from './SoundPlayInterval'\n\nconst MessageStyled = styled.div`\n  padding: 1rem;\n  background-color: ${Colors.red} !important;\n  font-size: 2rem;\n\n  & svg {\n    position: relative;\n    top: 0.3rem;\n    padding-right: 0.5rem;\n  }\n`\n\nexport const ConnectionWarning = observer(() => {\n  return (\n    <>\n      <SoundPlayInterval\n        shouldPlay={isNetworkOffline()}\n        intervalSec={30}\n        soundUrl={connectionWarningSound}\n      />\n\n      <Dialog\n        open={isNetworkOffline()}\n        disableBackdropClick={true}\n        disableEscapeKeyDown={true}\n      >\n        <MessageStyled>\n          <WarningTwoTone fontSize=\"large\" />\n          <Trans>Internet connection is not available</Trans>\n        </MessageStyled>\n      </Dialog>\n    </>\n  )\n})\n","import { css } from 'emotion'\nimport { SnackbarProvider } from 'notistack'\nimport React from 'react'\n\nimport { Colors, Spacing } from '../styling'\n\ninterface IProps {}\n\nconst successStyle = css`\n  background: ${Colors.green} !important;\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nconst errorStyle = css`\n  background: ${Colors.red};\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nconst warningStyle = css`\n  background: ${Colors.orange};\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nexport const snackStyles = {\n  variantSuccess: successStyle,\n  variantInfo: successStyle,\n  variantError: errorStyle,\n  variantWarning: warningStyle,\n}\n\nexport const SnackProvider: React.FC<IProps> = ({ children }) => (\n  <SnackbarProvider\n    maxSnack={3}\n    classes={snackStyles}\n    anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\n  >\n    {children}\n  </SnackbarProvider>\n)\n","import { Button, Snackbar } from '@material-ui/core'\nimport { SnackbarProps } from '@material-ui/core/Snackbar'\nimport { HOUR, MINUTE, SECOND, useInterval, useTimer } from '@speedlo/hooks'\nimport { updateWorker, useReleaseCabinet } from '@speedlo/tools'\nimport { addMilliseconds, formatDistanceStrict } from 'date-fns'\nimport { useObservable, useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { formatDateTime } from '../helpers/formats'\nimport { logUpdate } from '../helpers/logger'\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { i18n } from '../i18n'\nimport { snackStyles } from './SnackProvider'\n\nexport interface IProps {\n  onRestart?(): void\n  autoUpdateDelay?: number\n  postponeTimeout?: number\n  updateCheckInterval?: number\n  serviceWorker?: ServiceWorkerContainer\n  children: ReactNode\n}\n\nexport const UpdateHandler: React.FC<IProps> = ({\n  onRestart = () => window.location.reload(),\n  autoUpdateDelay = 20 * SECOND,\n  postponeTimeout = 2 * MINUTE,\n  updateCheckInterval = process.env.REACT_APP_STAGE === 'prod'\n    ? 1 * HOUR\n    : 5 * MINUTE,\n  serviceWorker = window.navigator.serviceWorker,\n  children,\n}) => {\n  const registrationWorkerRef = React.useRef<ServiceWorkerRegistration | null>(\n    null,\n  )\n  const updateWorkerRef = React.useRef<ServiceWorker | null>(null)\n\n  const state = useObservable({ updatePending: false })\n\n  const { enqueueInfo } = useSnackBar()\n  useReleaseCabinet(({ version, date }) => {\n    enqueueInfo(`Verze aplikace: ${version}, nasazeno: ${formatDateTime(date)}`)\n  })\n\n  useInterval(() => {\n    if (registrationWorkerRef.current) {\n      logUpdate('checking...')\n      registrationWorkerRef.current.update()\n    }\n  }, updateCheckInterval)\n\n  React.useEffect(\n    () => {\n      const onMessage = (event: MessageEvent) => {\n        if (event.data === 'update-applied') {\n          logUpdate('restarting to apply...')\n          onRestart()\n        }\n      }\n      if (serviceWorker) {\n        serviceWorker.addEventListener('message', onMessage)\n        return () => {\n          serviceWorker.removeEventListener('message', onMessage)\n        }\n      } else {\n        logUpdate('serviceWorker is not supported')\n        return () => {\n          /* noop */\n        }\n      }\n    },\n    [onRestart, serviceWorker],\n  )\n\n  React.useEffect(() => {\n    const init = updateWorker.register({\n      onInit: reg => {\n        registrationWorkerRef.current = reg\n      },\n      onUpdate: sw => {\n        updateWorkerRef.current = sw\n        state.updatePending = true\n        logUpdate('new update is available')\n      },\n    })\n    // service worker is normally using load event, but since this\n    // done after the load, it has to be triggered manually\n    init()\n  }, [])\n\n  const onCancel = () => {\n    logUpdate('user postponed')\n    state.updatePending = false\n    setTimeout(() => {\n      logUpdate('reminding update to user again')\n      state.updatePending = true\n    }, postponeTimeout)\n  }\n\n  const onConfirm = () => {\n    state.updatePending = false\n    if (updateWorkerRef.current) {\n      logUpdate('user confirmed')\n      updateWorkerRef.current.postMessage('apply-update')\n    }\n  }\n\n  return useObserver(() => (\n    <>\n      {state.updatePending ? (\n        <UpdateSnack\n          autoHideDuration={autoUpdateDelay}\n          onCancel={onCancel}\n          onConfirm={onConfirm}\n        />\n      ) : null}\n      {children}\n    </>\n  ))\n}\n\ninterface IUpdateSnackProps extends Omit<SnackbarProps, 'open'> {\n  autoHideDuration: number\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport function UpdateSnack(props: IUpdateSnackProps) {\n  const { onConfirm, onCancel, ...rest } = props\n  const now = useTimer({ interval: SECOND, enabled: true })\n  const [endTime] = React.useState(() =>\n    addMilliseconds(now, props.autoHideDuration),\n  )\n  const remainingSeconds = formatDistanceStrict(endTime, now)\n  React.useEffect(\n    () => {\n      if (now >= endTime) {\n        onConfirm()\n      }\n    },\n    [now, endTime],\n  )\n  return (\n    <Snackbar\n      open={true}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center',\n      }}\n      className={snackStyles.variantInfo}\n      message={\n        <span data-testid=\"message\">{i18n.t`Application will be restarted in ${remainingSeconds} to apply available update.`}</span>\n      }\n      disableWindowBlurListener={true}\n      action={[\n        <Button\n          key=\"later\"\n          color=\"secondary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"postpone-button\"\n          onClick={onCancel}\n        >\n          {i18n.t`Postpone update`}\n        </Button>,\n        <Button\n          key=\"confirm\"\n          color=\"primary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"confirm-button\"\n          onClick={onConfirm}\n        >\n          {i18n.t`Restart now`}\n        </Button>,\n      ]}\n      {...rest}\n    />\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { ContactSupport, Warning } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { Sizer } from '../atoms/Sizer'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\nconst IconStyled = styled.div`\n  color: ${Colors.orange};\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ninterface IProps {\n  onFeedback(): void\n}\n\nexport const ErrorPage: React.FC<IProps> = ({ onFeedback }) => (\n  <FullPageLayout\n    width={15}\n    pageTitle={i18n.t`Application error`}\n    useBackButton={true}\n    hideLogoutWidget={true}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          We are sorry, but there is an unexpected problem in the app. Our team\n          was notified and will fix this soon.\n        </Trans>\n      </h3>\n      <Center>\n        <IconStyled>\n          <Warning style={{ fontSize: '5rem' }} />\n        </IconStyled>\n        <Sizer width={20}>\n          <TouchButton onClick={onFeedback}>\n            <ContactSupport />\n            <Trans>Send feedback</Trans>\n          </TouchButton>\n        </Sizer>\n      </Center>\n    </Card>\n  </FullPageLayout>\n)\n","import { Trans } from '@lingui/macro'\nimport { OfflineBolt } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { Sizer } from '../atoms/Sizer'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\nconst IconStyled = styled.div`\n  margin-top: 2rem;\n  color: ${Colors.red};\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ninterface IProps {\n  onRetry(): void\n}\n\nexport const ServiceUnreachablePage: React.FC<IProps> = ({ onRetry }) => (\n  <FullPageLayout\n    width={15}\n    pageTitle={i18n.t`Service unreachable`}\n    useBackButton={false}\n    hideLogoutWidget={true}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          Connection to external service is not possible at the moment. Please\n          try again later or <a href=\"/support\">contact our support</a>.\n        </Trans>\n      </h3>\n      <Center>\n        <IconStyled>\n          <OfflineBolt style={{ fontSize: '5rem' }} />\n        </IconStyled>\n        <Sizer width={20}>\n          <TouchButton onClick={onRetry} iconName=\"cached\">\n            {' '}\n            <Trans>Retry the connection</Trans>\n          </TouchButton>\n        </Sizer>\n      </Center>\n    </Card>\n  </FullPageLayout>\n)\n","import {\n  ApolloDefender,\n  isChunkError,\n  isNetworkUnreachableError,\n} from '@speedlo/graphql'\nimport { flushSentry, Sentry, SillyErrorBoundary } from '@speedlo/tools'\nimport { isApolloError } from 'apollo-client'\nimport React from 'react'\nimport { VError } from 'verror'\n\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { i18n } from '../i18n'\nimport { ErrorPage } from '../pages/ErrorPage'\nimport { ServiceUnreachablePage } from '../pages/ServiceUnreachablePage'\n\nexport type ErrorKind = 'none' | 'serviceUnreachable' | 'otherError'\n\nconst makeError = (message: string) =>\n  `${message} ${i18n.t`Our team was notified about the issue.`}`\n\nexport const DefaultErrorHandler: React.FC = ({ children }) => {\n  const { enqueueWarning, enqueueError } = useSnackBar()\n\n  const [errorKind, setErrorKind] = React.useState<ErrorKind>('none')\n\n  const onRetry = React.useCallback(() => {\n    setErrorKind('none')\n  }, [])\n\n  const onUnhandledError = React.useCallback((error: Error) => {\n    if (isChunkError(error)) {\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Debug)\n        Sentry.captureException(error)\n      })\n      flushSentry().then(() => window.location.reload())\n      return\n    }\n    if (isApolloError(error) && isNetworkUnreachableError(error)) {\n      setErrorKind('serviceUnreachable')\n      return\n    }\n    Sentry.captureException(new VError(error, 'Unhandled exception'))\n    setErrorKind('otherError')\n  }, [])\n\n  const onNetworkError = React.useCallback(\n    (error: Error, isUnreachable: boolean) => {\n      if (isUnreachable) {\n        setErrorKind('serviceUnreachable')\n      } else {\n        enqueueError(\n          makeError(\n            i18n.t`Unexpected error occured in communication with service.`,\n          ),\n        )\n      }\n    },\n    [],\n  )\n\n  const onOperationError = React.useCallback(() => {\n    enqueueError(\n      makeError(i18n.t`Unexpected error occured while sending a request.`),\n    )\n  }, [])\n\n  const onUserErrors = React.useCallback((messages: ReadonlyArray<string>) => {\n    messages.forEach(enqueueWarning)\n  }, [])\n\n  const render = () => {\n    switch (errorKind) {\n      case 'serviceUnreachable': {\n        return <ServiceUnreachablePage onRetry={onRetry} />\n      }\n      case 'otherError': {\n        return <ErrorPage onFeedback={showFeedback} />\n      }\n      default: {\n        return children\n      }\n    }\n  }\n\n  return (\n    <ApolloDefender\n      onNetworkError={onNetworkError}\n      onUserErrors={onUserErrors}\n      onOperationError={onOperationError}\n    >\n      <SillyErrorBoundary onError={onUnhandledError}>\n        {render()}\n      </SillyErrorBoundary>\n    </ApolloDefender>\n  )\n}\n\nfunction showFeedback() {\n  Sentry.showReportDialog({\n    labelClose: i18n.t`Close`,\n    title: i18n.t`Unexpected error in the app`,\n  })\n}\n","import React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { logRouting } from '../helpers/logger'\n\nexport const LogRoute: React.FC = () => {\n  if (process.env.NODE_ENV !== 'development') {\n    return (\n      <Route>\n        {({ location }) => {\n          logRouting('at %s', location.pathname)\n          return null\n        }}\n      </Route>\n    )\n  } else {\n    return null\n  }\n}\n","import debug from 'debug'\nimport { when } from 'mobx'\nimport React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { WithRoot } from '../atoms/WithRoot'\n\nconst log = debug('routing')\n\nexport const RedirectAfterLogin = () => (\n  <Route\n    children={({ location, history }) => (\n      <WithRoot\n        render={root => {\n          if (!root.auth.isAuthenticatedUser) {\n            const route = (location.state && location.state.origin) || '/'\n            const waitForAuthentication = () => root.auth.isAuthenticated\n            const redirectAfterLogin = () => {\n              history.replace(route)\n            }\n            when(waitForAuthentication, redirectAfterLogin)\n            log('will redirect to %s when auth', route)\n          }\n          return null\n        }}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { WithRoot } from '../atoms/WithRoot'\nimport { RedirectToLogin } from './RedirectToLogin'\n\nexport const RedirectAfterLogout = () => (\n  <WithRoot\n    observe={false}\n    render={root => {\n      if (root.auth.isAuthenticated) {\n        root.auth.invalidate()\n        return <RedirectToLogin useOrigin={false} />\n      }\n      return <Redirect to=\"/\" />\n    }}\n  />\n)\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport Pacman from '../atoms/Pacman'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { LogRoute } from './LogRoute'\nimport { RedirectAfterLogin } from './RedirectAfterLogin'\nimport { RedirectAfterLogout } from './RedirectAfterLogout'\nimport { SecureRoute } from './SecureRoute'\n\nconst PasswordLoginRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordLoginRoute'),\n)\n\nconst PasswordChangeRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordChangeRoute'),\n)\n\nconst PasswordResetRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordResetRoute'),\n)\n\nconst MainDashboardPage = React.lazy(() =>\n  import('../segments/main/pages/MainDashboardPage'),\n)\n\nconst OrderRoutes = React.lazy(() =>\n  import('../segments/order/routes/OrderRoutes'),\n)\n\nconst KitchenRoutes = React.lazy(() =>\n  import('../segments/kitchen/routes/KitchenRoutes'),\n)\n\nconst SettingsRoutes = React.lazy(() =>\n  import('../segments/settings/routes/SettingsRoutes'),\n)\n\nconst OverviewRoutes = React.lazy(() =>\n  import('../segments/overview/routes/OverviewRoutes'),\n)\n\nconst SupportPage = React.lazy(() =>\n  import('../segments/main/pages/SupportPage'),\n)\n\nexport const Routing = () => (\n  <React.Suspense fallback={<Pacman />}>\n    <LogRoute />\n    <RedirectAfterLogin />\n    <Switch>\n      <LazyRoute path=\"/login\" exact={true} component={PasswordLoginRoute} />\n      <LazyRoute path=\"/reset\" exact={true} component={PasswordResetRoute} />\n      <LazyRoute\n        path=\"/recovery/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <LazyRoute\n        path=\"/register/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <SecureRoute path=\"/\" exact={true} component={MainDashboardPage} />\n      <SecureRoute path=\"/order\" component={OrderRoutes} />\n      <SecureRoute path=\"/kitchen\" component={KitchenRoutes} />\n      <SecureRoute path=\"/settings\" component={SettingsRoutes} />\n      <SecureRoute path=\"/overview\" component={OverviewRoutes} />\n      <LazyRoute path=\"/support\" component={SupportPage} />\n      <Route path=\"/logout\" component={RedirectAfterLogout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </React.Suspense>\n)\n","import { Sentry } from '@speedlo/tools'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { useQUserBootstrap } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\n\nexport const UserBootstrap = observer(() => {\n  const { auth, user } = useRoot()\n\n  const { data, loading } = useQUserBootstrap(\n    { userId: auth.userId },\n    { skip: !auth.isAuthenticatedUser },\n  )\n\n  React.useEffect(() => {\n    if (!auth.userId) {\n      user.finishBootstrap()\n      Sentry.configureScope(scope => {\n        scope.setUser({\n          id: undefined,\n        })\n        scope.setExtra('roles', [])\n        scope.setExtra('branches', [])\n      })\n    }\n  })\n\n  React.useEffect(() => {\n    if (auth.isAuthenticatedUser && !loading) {\n      user.applyUserData(data.user)\n      user.applyAccess(data.access)\n      user.applyPermissions(data.permissions)\n      user.finishBootstrap()\n      Sentry.configureScope(scope => {\n        scope.setUser({\n          id: auth.userId,\n          username: `${data.user.firstName} ${data.user.lastName}`,\n        })\n        scope.setExtra('roles', data.user.roles.map(RM.prop('name')))\n        scope.setExtra('branches', data.user.branches.map(RM.prop('id')))\n      })\n    }\n  })\n\n  return null\n})\n","import './App.css'\n\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ConnectionWarning } from './atoms/ConnectionWarning'\nimport Pacman from './atoms/Pacman'\nimport { useRoot } from './atoms/RootProvider'\nimport { UpdateHandler } from './atoms/UpdateHandler'\nimport { DefaultErrorHandler } from './organisms/DefaultErrorHandler'\nimport { Routing } from './routes/Routing'\nimport { UserBootstrap } from './segments/login/organisms/UserBootstrap'\n\nexport const App: React.FC = () => {\n  const { user } = useRoot()\n  return (\n    <DefaultErrorHandler>\n      <UserBootstrap />\n      <ConnectionWarning />\n      <UpdateHandler>\n        <Observer>{() => (user.isReady ? <Routing /> : <Pacman />)}</Observer>\n      </UpdateHandler>\n    </DefaultErrorHandler>\n  )\n}\n","import React from 'react'\nimport { Provider as GoodByeProvider } from 'react-goodbye'\nimport { BrowserRouter } from 'react-router-dom'\n\ninterface IProps {}\n\nexport const Router: React.FC<IProps> = ({ children }) => (\n  <GoodByeProvider>\n    {({ handleGetUserConfirm }) => (\n      <BrowserRouter getUserConfirmation={handleGetUserConfirm}>\n        {children}\n      </BrowserRouter>\n    )}\n  </GoodByeProvider>\n)\n","import { createMuiTheme, MuiThemeProvider } from '@material-ui/core'\nimport React from 'react'\n\ninterface IProps {}\n\nexport const ThemeProvider: React.FC<IProps> = ({ children }) => {\n  const theme = createMuiTheme({\n    typography: {\n      useNextVariants: true,\n    },\n  })\n\n  return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>\n}\n","import './enableDebug'\n\nimport { useSentryInit } from '@speedlo/tools'\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport { App } from './App'\nimport { RootProvider } from './atoms/RootProvider'\nimport { Router } from './atoms/Router'\nimport { SnackProvider } from './atoms/SnackProvider'\nimport { ThemeProvider } from './atoms/ThemeProvider'\nimport { appConfig } from './config'\nimport { I18nManager } from './i18n'\n\nconst Main = () => {\n  useSentryInit(appConfig.sentryDSN)\n  return (\n    <ThemeProvider>\n      <RootProvider>\n        <I18nManager>\n          <Router>\n            <SnackProvider>\n              <App />\n            </SnackProvider>\n          </Router>\n        </I18nManager>\n      </RootProvider>\n    </ThemeProvider>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nrender(<Main />, rootElement)\n","export interface IQueryError extends Error {\n  showToUser: boolean\n}\n\nexport type TQueryErrors = IQueryError[] | null\n\n// tslint:disable-next-line:no-any\nexport const getQueryErrors = async (query: Promise<any>) => {\n  const result = await query\n  if (result && result.errors) {\n    return result.errors as IQueryError[]\n  }\n  return null\n}\n","import React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { RedirectToLogin } from './RedirectToLogin'\n\ninterface ISecureRouteProps extends RouteProps {\n  redirect?: boolean\n  lazy?: boolean\n}\n\nexport const SecureRoute: React.FC<ISecureRouteProps> = ({\n  redirect = true,\n  lazy = true,\n  ...props\n}) => {\n  const { auth } = useRoot()\n  if (!auth.isAuthenticatedUser) {\n    return redirect ? <RedirectToLogin /> : <NotFoundPage />\n  }\n  if (props.component && typeof props.component === 'object') {\n    const { component, path, exact } = props\n    return <LazyRoute path={path} exact={exact} component={component} />\n  }\n  return <Route {...props} />\n}\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nimport { Colors } from '../styling'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.FC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n  >\n    <Spinner\n      name=\"pacman\"\n      style={noMargin ? {} : { marginTop: '45vh', color: Colors.orange }}\n    />\n  </div>\n)\n\nexport default Pacman\n","import React from 'react'\n\nimport { TRootModel } from '../models/RootModel'\nimport { WithRoot as RealWithRoot } from './RootProvider'\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.FC<IProps> = ({ render, observe }) => (\n  <RealWithRoot children={render} observe={observe} />\n)\n","import React from 'react'\nimport { Route, RouteComponentProps, RouteProps } from 'react-router-dom'\n\nimport Pacman from '../atoms/Pacman'\n\ninterface IProps<Params> extends Omit<RouteProps, 'render' | 'children'> {\n  component: React.ComponentType<RouteComponentProps<Params>>\n}\n\nexport function LazyRoute<Params = {}>({\n  component: Component,\n  ...props\n}: IProps<Params>) {\n  return (\n    <Route\n      {...props}\n      render={routeProps => (\n        <React.Suspense fallback={<Pacman />}>\n          <Component {...routeProps} />\n        </React.Suspense>\n      )}\n    />\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface IProps {\n  iconName: string\n  color?: string\n  fontSize?: number\n  fontSizeUnit?: string\n}\n\nconst getFontSize = ({ fontSize = 1.5, fontSizeUnit = 'rem' }: IProps) => {\n  return fontSize + fontSizeUnit\n}\n\nconst IconSpanStyled = styled.span`\n  font-size: ${getFontSize} !important;\n  color: ${(props: IProps) => props.color};\n`\n\nexport const Icon: React.FC<IProps> = ({\n  iconName,\n  color = Colors.white,\n  fontSize,\n  fontSizeUnit,\n}) =>\n  iconName ? (\n    <IconSpanStyled\n      color={color}\n      fontSize={fontSize}\n      fontSizeUnit={fontSizeUnit}\n      iconName={iconName}\n      className=\"material-icons\"\n    >\n      {iconName}\n    </IconSpanStyled>\n  ) : null\n"],"sourceRoot":""}