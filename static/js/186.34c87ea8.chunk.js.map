{"version":3,"sources":["atoms/CanMutate.tsx","molecules/PageLayoutFullHeightItem.tsx","atoms/FlexRowSingle.tsx","atoms/FlexColumn.tsx","atoms/VerticalGap.tsx","atoms/ScrollArea.tsx","molecules/TouchButtonDelete.tsx","helpers/form.ts","atoms/BaseMap.tsx","atoms/CardListTitle.tsx","atoms/DragHandle.tsx","atoms/ConfirmDialog.tsx","molecules/CompanyBrandDropdown.tsx","segments/zones/hooks/useZoneId.ts","segments/zones/hooks/useZoneRouteControl.tsx","atoms/FormInputCheckbox.tsx","segments/zones/atoms/ZonePriceInput.tsx","atoms/FormInputSelect.tsx","segments/zones/molecules/ZoneColorSelector.tsx","segments/zones/atoms/ZonePlaceholderInput.tsx","segments/zones/molecules/ZoneFormPriceRange.tsx","segments/zones/molecules/ZoneFormContent.tsx","segments/zones/molecules/ZoneFormControls.tsx","segments/zones/organisms/ZoneListLoader.graphql.ts","segments/zones/organisms/ZoneListLoader.tsx","segments/zones/organisms/ZoneFormPanel.tsx","molecules/MapCompanyBranchMarker.tsx","segments/zones/atoms/ZoneMapArea.tsx","segments/zones/atoms/ZoneMapEditableArea.tsx","segments/zones/hooks/useZoneModel.ts","segments/zones/organisms/ZoneMapControl.tsx","atoms/UserHasMultipleBranches.tsx","segments/zones/molecules/CreateZoneButton.tsx","segments/zones/atoms/ZoneListCard.tsx","segments/zones/molecules/ZoneList.tsx","segments/zones/organisms/ZoneListControl.tsx","segments/zones/organisms/ZoneFilter.tsx","segments/zones/organisms/ZoneMenuPanel.tsx","segments/zones/pages/ZonePageLayout.tsx","segments/zones/routes/ZoneMenuRouting.tsx"],"names":["CanMutate","observer","mutationName","children","useCanMutate","StyledPageLayoutFullHeightItem","styled","div","mediaDesktop","props","undefined","widthInColumns","Spacing","LayoutGridCellMargin","column","row","mediaMobile","rowInMobile","forcePercentHeightInMobile","PageHeaderHeight","DefaultSizeUnit","PageLayoutFullHeightItem","withScrollArea","scrollAreaId","forceHeightInMobile","isMobile","useResponsive","id","height","heightUnit","FlexRowSingle","flexWrap","justify","FlexColumn","fixedWidth","width","widthGrowIndex","padding","margin","VerticalGap","size","sizeUnit","displayName","ScrollArea","TouchButtonDelete","onDelete","confirmText","icon","Delete","color","Colors","greyMiddle","onClick","ev","preventDefault","window","confirm","isFormValid","formState","errors","Object","keys","length","validateIsRequired","fieldName","value","isEmpty","parseNumber","Number","parseFloat","replace","libraries","React","createContext","BaseMap","model","options","streetViewControl","mapTypeControl","fullscreenControl","user","useRoot","useLoadScript","version","googleMapsApiKey","appConfig","googleMapsApi","language","isLoaded","loadError","googleMapUrl","url","googleAvailable","Reflect","has","Sentry","withScope","scope","setExtras","captureException","zoom","center","onCenterChanged","updatePosition","onZoomChanged","updateZoom","onLoad","setMapRef","mapContainerStyle","borderRadius","Radiuses","Card","overflow","useGoogleMap","map","useGoogleMapOrig","Error","CardListTitle","h2","greyLight","StyledDragHandle","DragHandle","SortableHandle","Reorder","ConfirmDialog","isShow","onCancel","onConfirm","useEffect","CompanyBrandDropdown","brands","selectedBrand","onSelection","placeholder","formatOptionLabel","RM","prop","getOptionValue","getOptionLabel","isClearable","isSearchable","onChange","autoFocus","useZoneId","useRouterContext","match","params","zoneId","useZoneRouteControl","zoneModel","zone","history","getRouteToZone","useCallback","ROUTE_SETTINGS_ZONES","routeToZoneEdit","editZoneId","panToZone","canQuery","push","routeToZoneList","FormInputCheckbox","field","label","defaultValue","inputProps","StyledCheckbox","checked","Boolean","LabelStyled","FormInputTextBoxStyled","FormInputTextBox","FormInputTextBoxDeliveryStyled","blue","DeliveryContainer","PriceRangeContainer","VerticalLine","validatePrice","trim","isNaN","i18n","ZonePriceInput","forwardRef","ref","isDeliveryPrice","validate","FormInputSelect","isRequired","validatioName","fieldApi","this","isMulti","selection","isSelected","Array","isArray","item","includes","F","filter","selectedOptions","setValue","find","option","fieldIsPure","pure","SelectControl","getControlProps","onFocus","setTouched","styles","control","base","error","borderColor","Component","defaultProps","getItemId","ColorOption","white","QueryZoneColors","buildQuery","ZoneColorsQuery","ZoneColorSelector","render","zoneColors","menu","maxWidth","head","zoneColor","code","FormInputForPlaceholderStyled","FormInputStyled","Container","ZonePlaceholderInput","display","disabled","AddButtonContainer","RemoveButtonContainer","ZoneFormPriceRange","values","idx","key","removeValue","formApi","TouchButton","submitting","ButtonHeight","AddCircle","addValue","price","toPrice","ZoneFormContentStyled","Middle","black","DescriptionUnderHeadline","greyDark","ZoneFormContent","IconLine","Label","ColorLens","name","toLocaleLowerCase","Headline","component","ZoneFormControls","isSubmitting","isModified","onGoBack","onSave","text","green","ZonesQuery","gql","FZoneFragmentDoc","QueryZones","ZoneListContext","ZoneListLoader","branches","branchFilterPredicate","Provider","fetchPolicy","variables","branchesId","renderLoading","zones","loading","useZoneList","useContext","DeleteButtonContainer","ZoneFormPanel","zoneList","useState","setModified","formApiRef","useRef","useSnackBar","enqueueError","enqueueSuccess","useMZoneUpdate","zoneUpdate","onSubmit","a","getZoneVariables","destroyZone","useReaction","currentZonePoints","propEq","clearZonePoints","defaultValues","logDebug","current","submitForm","when","handleOk","handleCancel","Loading","BranchNameStyled","isActive","css","MapCompanyBranchMarker","branch","getPixelPositionOffset","x","y","mapPaneName","OverlayView","MARKER_LAYER","position","gpsToLatLng","gps","ZoneMapArea","points","priority","onAreaFocus","e","stop","path","fillColor","fillOpacity","strokeWeight","zIndex","editable","draggable","onDblClick","ZoneMapEditableArea","onClear","polygonRef","listenersRef","onAreaChange","getPath","getArray","latLngToGps","polygon","addListener","onUnmount","forEach","lis","remove","onDragEnd","useZoneModel","ZoneMapControl","companyBranchId","hasBranchFilter","branchFilterId","autorun","isReady","panToBranch","renderBranchLabel","areaProps","geoPolygon","companyBranch","enabled","updateZonePoints","UserHasMultipleBranches","hasSingleBranch","CreateZoneButton","createZone","turquoise","textNextToIcon","ZoneNameStyled","ZoneDescriptionStyled","ZoneFlexRowStyled","ZoneListCard","SortableElement","onEdit","SizerButton","Edit","ZoneListContainerStyled","SortableContainer","sortZones","R","groupByBranch","ZoneList","output","onSortEnd","onZoneEdit","renderZone","index","collection","sorted","oldIndex","newIndex","changeZonePriority","grouped","branchZones","renderBranch","useDragHandle","lockAxis","ZoneListControl","primaryOpacity","secondaryOpacity","brand","zoneFilterPredicate","root","filterBranches","ZoneFilter","getBrandBranches","pathEq","setBranchFilter","singleBrand","setBrandFilter","clearBrandFilter","CompanyBranchDropdown","selectedBranch","onSingleSelection","clearBranchFilter","ZoneMenuContainer","FixedHeaderContainer","ScrollAreaContainer","ZoneMenuPanel","memo","useAutorunWhenSingleBranch","ZonePageLayout","isEditing","PageLayoutResponsive","pageTitle","backRoute","ROUTE_SETTINGS","useBackButton","ZonesRouting","NotFoundPage"],"mappings":"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","file":"static/js/186.34c87ea8.chunk.js","sourcesContent":["import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useCanMutate } from '../hooks/useAccessGuard'\nimport { NoAccess } from './NoAccess'\n\ninterface IProps {\n  mutationName: string\n}\n\nexport const CanMutate = observer<IProps>(({ mutationName, children }) => {\n  const canMutate = useCanMutate(mutationName)\n  return canMutate ? (\n    <>{children}</>\n  ) : (\n    <NoAccess>{`No access to mutation ${mutationName}`}</NoAccess>\n  )\n})\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { mediaDesktop, mediaMobile, useResponsive } from '../app/Responsive'\nimport { ScrollArea } from '../atoms/ScrollArea'\nimport { Sizer } from '../atoms/Sizer'\nimport { Spacing } from '../styling'\n\ninterface IPageLayoutFullHeightItemProps {\n  row?: number\n  column?: number\n  rowInMobile?: number\n  widthInColumns?: number\n  withScrollArea?: boolean\n  forcePercentHeightInMobile?: number\n  scrollAreaId?: string\n}\n\nconst gridColumnWidth: string = '6.22vw'\nconst gridColumnHeigth: string = '3.9375rem'\n\nconst leftPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.column !== undefined) {\n    return (\n      'calc((' +\n      props.column +\n      ' * ' +\n      gridColumnWidth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return Spacing.LayoutGridCellMargin\n  }\n}\nconst widthComputed = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.widthInColumns !== undefined) {\n    return (\n      'calc((' +\n      props.widthInColumns +\n      ' * ' +\n      gridColumnWidth +\n      ') - ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return 'calc(100vh - (2 * ' + Spacing.LayoutGridCellMargin + '))'\n  }\n}\nconst topPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.row !== undefined) {\n    return (\n      'calc((' +\n      props.row +\n      ' * ' +\n      gridColumnHeigth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return (\n      'calc(' + gridColumnHeigth + ' + ' + Spacing.LayoutGridCellMargin + ')'\n    )\n  }\n}\n\n// eslint-disable-next-line no-unexpected-multiline\nconst StyledPageLayoutFullHeightItem = styled.div<\n  IPageLayoutFullHeightItemProps\n>`\n  ${mediaDesktop`\n  position: fixed;\n  bottom: 0.5rem;\n  width: ${widthComputed()};\n  left: ${leftPos()};\n  top: ${topPos()};`}\n\n  ${mediaMobile`\n    margin: 0;\n    grid-row: ${({ rowInMobile }: IPageLayoutFullHeightItemProps) =>\n      rowInMobile} ;\n    grid-column: span 16;\n    height: ${({\n      forcePercentHeightInMobile,\n    }: IPageLayoutFullHeightItemProps) =>\n      forcePercentHeightInMobile\n        ? `calc(${forcePercentHeightInMobile}vh - ${Spacing.PageHeaderHeight +\n            0.25 +\n            Spacing.DefaultSizeUnit})`\n        : 'unset'} ;\n    position: relative;\n  `}\n`\n\nexport const PageLayoutFullHeightItem: React.FC<\n  IPageLayoutFullHeightItemProps\n> = ({\n  children,\n  row = 1,\n  rowInMobile = 16,\n  column = 0,\n  widthInColumns = 16,\n  withScrollArea = false,\n  scrollAreaId,\n  forcePercentHeightInMobile: forceHeightInMobile,\n}) => {\n  const { isMobile } = useResponsive()\n\n  return (\n    <StyledPageLayoutFullHeightItem\n      column={column}\n      row={row}\n      rowInMobile={rowInMobile}\n      widthInColumns={widthInColumns}\n      withScrollArea={withScrollArea}\n      forcePercentHeightInMobile={forceHeightInMobile}\n    >\n      {withScrollArea && !isMobile ? (\n        <ScrollArea id={scrollAreaId}>{children}</ScrollArea>\n      ) : (\n        <Sizer height={100} heightUnit=\"%\">\n          {children}\n        </Sizer>\n      )}\n    </StyledPageLayoutFullHeightItem>\n  )\n}\n","import styled from 'styled-components'\n\ninterface IProps {\n  flexWrap?: string\n  justify?: string\n}\n\nexport const FlexRowSingle = styled.div<IProps>`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: ${({ flexWrap = 'unset' }: IProps) => flexWrap};\n  justify-content: ${({ justify = 'space-between' }: IProps) => justify};\n`\n","import styled from 'styled-components'\n\ninterface IFlexColumnProps {\n  fixedWidth?: boolean\n  width?: string\n  widthGrowIndex?: number\n  padding?: string\n  margin?: string\n}\n\nexport const FlexColumn = styled.div`\n  flex: ${getFlexValue};\n  padding: ${getPadding};\n  margin: ${getMargin};\n`\n\nfunction getFlexValue({\n  fixedWidth = false,\n  width,\n  widthGrowIndex = 0,\n}: IFlexColumnProps) {\n  return fixedWidth ? (width ? `0 0 ${width}` : '0 0') : `${widthGrowIndex} 0`\n}\n\nfunction getPadding({ padding = '0.25rem' }: IFlexColumnProps) {\n  return padding\n}\n\nfunction getMargin({ margin = '' }: IFlexColumnProps) {\n  return margin\n}\n","import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import styled from 'styled-components'\n\nexport const ScrollArea = styled.div`\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  height: 100%;\n`\n","import { Delete } from '@material-ui/icons'\nimport React from 'react'\n\nimport { SizerButton } from '../atoms/SizerButton'\nimport { Colors } from '../styling'\nimport { ITouchButtonProps, TouchButton } from './TouchButton'\n\ninterface ITouchButtonDeleteProps\n  extends LegacyOmit<ITouchButtonProps, 'onClick'> {\n  confirmText?: string\n  onDelete(): void\n}\n\nexport const TouchButtonDelete: React.FC<ITouchButtonDeleteProps> = ({\n  onDelete,\n  confirmText,\n  ...props\n}) => {\n  return (\n    <SizerButton>\n      <TouchButton\n        icon={Delete}\n        color={Colors.greyMiddle}\n        onClick={ev => {\n          ev.preventDefault()\n          if (!confirmText || window.confirm(confirmText)) {\n            onDelete()\n          }\n        }}\n        {...props}\n      />\n    </SizerButton>\n  )\n}\n","import { IFormState } from 'react-form'\nimport { isEmpty } from 'validator'\n\nimport { i18n } from '../i18n'\n\nexport function isFormValid(formState: IFormState) {\n  return !formState.errors || Object.keys(formState.errors).length === 0\n}\n\nexport function validateIsRequired(fieldName: string) {\n  return (value: string) =>\n    isEmpty(value + '') ? i18n.t`${fieldName} must be entered` : null\n}\n\nexport function parseNumber(value: string | number) {\n  return typeof value === 'number'\n    ? value\n    : Number.parseFloat(value.replace(',', '.'))\n}\n","import { Trans } from '@lingui/macro'\nimport {\n  GoogleMap,\n  useGoogleMap as useGoogleMapOrig,\n  useLoadScript,\n} from '@react-google-maps/api'\nimport { Sentry } from '@speedlo/sentry'\nimport { Observer } from 'mobx-react-lite'\nimport React, { useContext } from 'react'\n\nimport { appConfig } from '../config'\nimport { TMapModel } from '../models/MapModel'\nimport { Radiuses } from '../styling'\nimport { useRoot } from './RootProvider'\n\ninterface IBaseMapProps {\n  model: TMapModel\n}\n\nconst mapModelContext = React.createContext<TMapModel | null>(null)\n\nconst libraries = ['places']\n\nexport const BaseMap: React.FC<IBaseMapProps> = ({ model, children }) => {\n  const options: google.maps.MapOptions = {\n    streetViewControl: false,\n    mapTypeControl: false,\n    fullscreenControl: false,\n  }\n\n  const { user } = useRoot()\n  const { isLoaded, loadError, url: googleMapUrl } = useLoadScript({\n    id: 'script-loader',\n    version: 'weekly',\n    googleMapsApiKey: appConfig.googleMapsApi,\n    libraries,\n    language: user.language!,\n  })\n\n  const renderMap = () => (\n    <Observer>\n      {() => (\n        <GoogleMap\n          zoom={model.zoom}\n          center={model.center}\n          onCenterChanged={model.updatePosition}\n          onZoomChanged={model.updateZoom}\n          onLoad={model.setMapRef}\n          options={options}\n          mapContainerStyle={{\n            borderRadius: Radiuses.Card,\n            overflow: 'hidden',\n            height: '100%',\n          }}\n        >\n          {children}\n        </GoogleMap>\n      )}\n    </Observer>\n  )\n\n  const googleAvailable = Reflect.has(window, 'google')\n\n  if (loadError || (isLoaded && !googleAvailable)) {\n    Sentry.withScope(scope => {\n      scope.setExtras({ googleMapUrl })\n      Sentry.captureException(loadError)\n    })\n    return (\n      <h2>\n        <Trans>Cannot load map right now. Please try again later.</Trans>\n      </h2>\n    )\n  }\n\n  return isLoaded ? renderMap() : null\n}\n\nexport function useMapModel() {\n  const model = useContext(mapModelContext)\n  if (!model) {\n    throw new Error('Trying to useMapModel, but BaseMap is missing in the tree')\n  }\n  return model\n}\n\nexport function useGoogleMap() {\n  const map = useGoogleMapOrig()\n  if (!map) {\n    throw new Error(\n      'Trying to useGoogleMap, but BaseMap is missing in the tree',\n    )\n  }\n  return map\n}\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\nexport const CardListTitle = styled.h2`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  font-size: 1.2rem;\n  margin: 0.8rem 0 0.8rem 0.3rem;\n`\n","import { Reorder } from '@material-ui/icons'\nimport React from 'react'\nimport { SortableHandle } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Icon } from './Icon'\n\ninterface IProps {}\n\nconst StyledDragHandle = styled.div`\n  padding: 1rem 0.4rem;\n  cursor: grab;\n`\nexport const DragHandle = SortableHandle<IProps>(() => (\n  <StyledDragHandle>\n    <Icon icon={Reorder} />\n  </StyledDragHandle>\n))\n","import React, { useEffect } from 'react'\n\ninterface IProps {\n  isShow: boolean\n  confirmText: string\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport const ConfirmDialog: React.FC<IProps> = ({\n  isShow,\n  confirmText,\n  onCancel,\n  onConfirm,\n}) => {\n  useEffect(() => {\n    if (isShow) {\n      if (window.confirm(confirmText)) {\n        onConfirm()\n      } else {\n        onCancel()\n      }\n    }\n  }, [confirmText, isShow, onCancel, onConfirm])\n  return null\n}\n","import { RM } from '@speedlo/tools'\nimport React from 'react'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { ISelectControlProps, SelectControl } from '../atoms/SelectControl'\nimport { FCompanyBranchBrand } from '../graph/generated'\nimport { i18n } from '../i18n'\n\ntype TBrand = FCompanyBranchBrand\n\ninterface IProps extends ISelectControlProps<TBrand> {\n  brands?: RoA<TBrand>\n  selectedBrand: Maybe<TBrand>\n  onSelection(brand: Maybe<TBrand>): void\n}\n\nexport const CompanyBrandDropdown: React.FC<IProps> = ({\n  brands,\n  selectedBrand,\n  onSelection,\n  ...props\n}) => {\n  const { user } = useRoot()\n\n  return (\n    <SelectControl<TBrand>\n      placeholder={i18n.t`Select brand`}\n      options={brands || user.brands}\n      value={selectedBrand}\n      formatOptionLabel={RM.prop('name')}\n      getOptionValue={RM.prop('id')}\n      getOptionLabel={RM.prop('name')}\n      isClearable={true}\n      isSearchable={true}\n      onChange={value => onSelection(value as Maybe<TBrand>)}\n      autoFocus={true}\n      {...props}\n    />\n  )\n}\n","import { useRouterContext } from '@speedlo/hooks'\n\ninterface IZoneRouteParams {\n  zoneId?: ID\n}\n\nexport function useZoneId() {\n  const { match } = useRouterContext<IZoneRouteParams>()\n  const { zoneId } = match.params\n  return zoneId\n}\n","import { useRouterContext } from '@speedlo/hooks'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { ROUTE_SETTINGS_ZONES } from '../../settings/settings.routes'\n\nexport function useZoneRouteControl() {\n  const { user, zone: zoneModel } = useRoot()\n  const { history } = useRouterContext()\n  const getRouteToZone = React.useCallback((zoneId: ID) => {\n    return `${ROUTE_SETTINGS_ZONES}/${zoneId}`\n  }, [])\n\n  return {\n    getRouteToZone,\n    routeToZoneEdit: React.useCallback(\n      (editZoneId: ID) => {\n        zoneModel.map.panToZone(editZoneId)\n        if (user.canQuery('zone')) {\n          history.push(getRouteToZone(editZoneId))\n        }\n      },\n      [getRouteToZone, history, user, zoneModel.map],\n    ),\n    routeToZoneList: React.useCallback(() => {\n      history.push(ROUTE_SETTINGS_ZONES)\n    }, [history]),\n  }\n}\n","import React from 'react'\nimport { Checkbox, FieldType } from 'react-form'\n\nimport { StyledCheckbox } from './StyledCheckbox'\n\ninterface IProps extends React.InputHTMLAttributes<never> {\n  field: FieldType\n  label?: string\n}\n\nexport const FormInputCheckbox: React.FC<IProps> = ({\n  field,\n  label,\n  defaultValue,\n  children,\n  ...inputProps\n}) => (\n  <StyledCheckbox>\n    <Checkbox field={field} checked={Boolean(defaultValue)} {...inputProps} />\n    {label && <label>{label}</label>}\n  </StyledCheckbox>\n)\n","import React from 'react'\nimport { FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { i18n } from '../../../i18n'\nimport { Colors } from '../../../styling'\n\ninterface IZoneInputProps {\n  field: FieldType\n  label?: string\n  autoFocus?: boolean\n  isDeliveryPrice?: boolean\n}\n\nconst LabelStyled = styled.div`\n  min-width: 2rem;\n  display: inline-block;\n`\n\nconst FormInputTextBoxStyled = styled(FormInputTextBox)`\n  width: 3rem;\n  position: relative;\n  z-index: 4;\n`\nconst FormInputTextBoxDeliveryStyled = styled(FormInputTextBoxStyled)`\n  color: ${Colors.blue};\n`\n\nconst DeliveryContainer = styled.div`\n  position: relative;\n  left: 8rem;\n  top: 0rem;\n`\n\nconst PriceRangeContainer = styled.div`\n  position: relative;\n  left: 4rem;\n  top: -0.3rem;\n  width: 3rem;\n`\n\nconst VerticalLine = styled.div`\n  border-left: 3px solid #707070;\n  width: 3px;\n  position: relative;\n  left: -2rem;\n  height: 4rem;\n  float: left;\n  margin: -0.5rem 0 0 0;\n`\n\nconst validatePrice = (value: string) => {\n  if (typeof value === 'number') {\n    return null\n  }\n  const trim = value.trim()\n  return trim.length && Number.isNaN(Number.parseFloat(trim))\n    ? i18n.t`Must be number`\n    : null\n}\n\nexport const ZonePriceInput = React.forwardRef<\n  HTMLInputElement,\n  IZoneInputProps\n>(\n  ({ field, label, isDeliveryPrice, autoFocus = false }, ref) =>\n    isDeliveryPrice ? (\n      <DeliveryContainer>\n        <VerticalLine />\n        <LabelStyled>{label}</LabelStyled>\n        <FormInputTextBoxDeliveryStyled\n          field={field}\n          validate={validatePrice}\n          // @ts-ignore\n          ref={ref}\n        />\n      </DeliveryContainer>\n    ) : (\n      <PriceRangeContainer>\n        <FormInputTextBoxStyled\n          field={field}\n          validate={validatePrice}\n          autoFocus={autoFocus}\n        />\n      </PriceRangeContainer>\n    ),\n)\n","import React from 'react'\nimport { Field, FieldType, IFieldApi } from 'react-form'\n\nimport { RM } from '../helpers/ramda'\nimport { i18n } from '../i18n'\nimport { ISelectControlProps, SelectControl } from './SelectControl'\n\nexport interface IFormInputSelectProps<OptionType>\n  extends ISelectControlProps<OptionType> {\n  field: FieldType\n  fieldIsPure?: boolean\n  defaultValue?: OptionType\n  isRequired?: boolean\n  validatioName?: string\n}\n\nexport class FormInputSelect<OptionType> extends React.Component<\n  IFormInputSelectProps<OptionType>\n> {\n  static defaultProps = {\n    validatioName: 'Value',\n    getItemId: RM.prop('id'),\n  }\n\n  validate = (value: OptionType | undefined) => {\n    if (this.props.isRequired && !value) {\n      return i18n.t`${this.props.validatioName} must be selected`\n    }\n    return null\n  }\n\n  getControlProps(fieldApi: IFieldApi) {\n    const { isMulti, options, getOptionValue, defaultValue } = this.props\n    const selection = fieldApi.value || defaultValue\n\n    if (isMulti) {\n      const isSelected = Array.isArray(selection)\n        ? (item: OptionType) => selection.includes(getOptionValue!(item))\n        : RM.F\n      return {\n        value: Array.isArray(options)\n          ? (options as OptionType[]).filter(isSelected)\n          : [],\n        onChange: selectedOptions => {\n          fieldApi.setValue(selectedOptions.map(getOptionValue))\n        },\n      }\n    }\n\n    return {\n      value:\n        selection &&\n        (options as OptionType[]).find(\n          item => getOptionValue!(item) === selection,\n        ),\n      onChange: option => {\n        fieldApi.setValue(getOptionValue!(option))\n      },\n    }\n  }\n\n  render() {\n    const { field, fieldIsPure = false, defaultValue, ...props } = this.props\n    return (\n      <Field field={field} validate={this.validate} pure={fieldIsPure}>\n        {fieldApi => (\n          <SelectControl\n            {...this.getControlProps(fieldApi)}\n            onFocus={() => fieldApi.setTouched(true)}\n            styles={{\n              control: base => {\n                if (Boolean(fieldApi.error)) {\n                  return {\n                    ...base,\n                    borderColor: 'red',\n                  }\n                }\n                return base\n              },\n            }}\n            {...props}\n          />\n        )}\n      </Field>\n    )\n  }\n}\n","import React from 'react'\nimport { FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputSelect } from '../../../atoms/FormInputSelect'\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GZoneColors } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { Colors } from '../../../styling'\nimport { ZoneColorsQuery } from '../Zones.graphql'\n\ninterface IZoneColorSelectorProps {\n  field?: FieldType\n}\n\nconst ColorOption = styled.div`\n  background-color: ${({ color }: { color: string }) => color};\n  color: ${Colors.white};\n  width: 6rem;\n  padding: 0.4rem 1rem;\n  margin: 0;\n  height: 100%;\n`\n\nconst QueryZoneColors = buildQuery<GZoneColors.Query, GZoneColors.Variables>(\n  ZoneColorsQuery,\n)\n\nconst makeStyles = () => ({\n  option: base => ({\n    ...base,\n    padding: 0,\n    margin: 0,\n  }),\n  menu: base => ({\n    ...base,\n    width: '8rem',\n    maxWidth: '8rem',\n  }),\n})\n\nexport const ZoneColorSelector: React.FC<IZoneColorSelectorProps> = ({\n  field = 'zoneColor.id',\n}) => (\n  <QueryZoneColors\n    render={({ zoneColors }) => (\n      <FormInputSelect<GZoneColors.ZoneColors>\n        field={field}\n        fieldIsPure={true}\n        options={[...zoneColors]}\n        width={8}\n        styles={makeStyles()}\n        defaultValue={RM.head(zoneColors)}\n        getOptionValue={RM.prop('id')}\n        formatOptionLabel={zoneColor => (\n          <ColorOption color={zoneColor.color}>{zoneColor.code}</ColorOption>\n        )}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { FormInputStyled } from '../../../atoms/FormInputStyled'\n\ninterface IZonePlaceholderInputProps {\n  label: string\n  display: string\n}\n\nconst LabelStyled = styled.div`\n  width: 3rem;\n  display: inline-block;\n`\n\nconst FormInputForPlaceholderStyled = styled(FormInputStyled)`\n  width: 3rem;\n  position: relative;\n  z-index: 4;\n`\n\nconst Container = styled.div`\n  margin: 0 0 0 1rem;\n`\n\nexport const ZonePlaceholderInput: React.FC<IZonePlaceholderInputProps> = ({\n  label,\n  display,\n}) => (\n  <Container>\n    <LabelStyled>{label}</LabelStyled>\n    <FormInputForPlaceholderStyled disabled={true} placeholder={display} />\n  </Container>\n)\n","import { AddCircle } from '@material-ui/icons'\nimport React, { Fragment } from 'react'\nimport { FormApi, NestedFieldComponentProps } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FZonePriceRangeFragment } from '../../../graph/generated'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Spacing } from '../../../styling'\nimport { ZonePlaceholderInput } from '../atoms/ZonePlaceholderInput'\nimport { ZonePriceInput } from '../atoms/ZonePriceInput'\n\ninterface IProps extends NestedFieldComponentProps<FZonePriceRangeFragment[]> {}\n\nconst AddButtonContainer = styled.div`\n  position: relative;\n  top: -6rem;\n`\n\nconst RemoveButtonContainer = styled.div`\n  position: relative;\n  top: -7rem;\n  left: 16rem;\n  height: 0;\n`\n\nexport const ZoneFormPriceRange: React.FC<IProps> = ({ fieldApi }) => {\n  return (\n    <>\n      {fieldApi.values.map((value, idx, values) => (\n        <Fragment key={idx}>\n          <ZonePriceInput\n            label=\"za\"\n            isDeliveryPrice={true}\n            field={[idx, 'price', 'value']}\n          />\n\n          {idx === values.length - 1 ? (\n            <ZonePlaceholderInput display=\"&infin;\" label=\"do\" />\n          ) : (\n            <ZonePriceInput\n              field={[idx, 'toPrice', 'value']}\n              autoFocus={true}\n            />\n          )}\n\n          {values.length > 1 && (\n            <RemoveButtonContainer>\n              <TouchButtonDelete\n                onDelete={() => fieldApi.removeValue('', idx)}\n              />\n            </RemoveButtonContainer>\n          )}\n        </Fragment>\n      ))}\n      <FormApi\n        render={formApi => (\n          <AddButtonContainer>\n            <TouchButton\n              disabled={formApi.submitting}\n              width={Spacing.ButtonHeight + Spacing.DefaultSizeUnit}\n              icon={AddCircle}\n              onClick={() =>\n                fieldApi.addValue('', {\n                  price: { value: 0 },\n                  toPrice: { value: 0 },\n                })\n              }\n            />\n          </AddButtonContainer>\n        )}\n      />\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { ColorLens, Label } from '@material-ui/icons'\nimport React from 'react'\nimport { NestedField } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputCheckbox } from '../../../atoms/FormInputCheckbox'\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { Headline } from '../../../atoms/Headline'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { validateIsRequired } from '../../../helpers/form'\nimport { i18n } from '../../../i18n'\nimport { Colors, Spacing } from '../../../styling'\nimport { ZonePriceInput } from '../atoms/ZonePriceInput'\nimport { ZoneColorSelector } from '../molecules/ZoneColorSelector'\nimport { ZoneFormPriceRange } from '../molecules/ZoneFormPriceRange'\n\ninterface IZoneFormContentProps {}\n\nconst ZoneFormContentStyled = styled.div`\n  margin: ${Spacing.Middle};\n  color: ${Colors.black};\n`\n\nconst DescriptionUnderHeadline = styled.div`\n  color: ${Colors.greyDark};\n  padding-bottom: 0.2rem;\n`\n\nexport const ZoneFormContent: React.FC<IZoneFormContentProps> = props => (\n  <ZoneFormContentStyled>\n    <IconLine icon={Label}>\n      <FormInputTextBox\n        field=\"name\"\n        validate={validateIsRequired(i18n.t`Zone name`)}\n      />\n    </IconLine>\n\n    <IconLine icon={ColorLens}>\n      <ZoneColorSelector />\n    </IconLine>\n\n    <FormInputCheckbox\n      field=\"enabled\"\n      name=\"enabled\"\n      label={i18n.t`Is active`.toLocaleLowerCase()}\n    />\n\n    <Trans>\n      <Headline margin=\"0.5rem 0 0 0\">Delivery cost</Headline>\n      <DescriptionUnderHeadline>\n        according order total cost\n      </DescriptionUnderHeadline>\n    </Trans>\n    <ZonePriceInput field=\"minimalOrderPrice.value\" />\n    <NestedField field=\"priceRangeRules\" component={ZoneFormPriceRange} />\n  </ZoneFormContentStyled>\n)\n","import React, { MouseEvent } from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IProps {\n  isSubmitting: boolean\n  isModified: boolean\n  onSave(e: MouseEvent<HTMLButtonElement>): void\n  onGoBack(): void\n}\n\nexport const ZoneFormControls: React.FC<IProps> = ({\n  isSubmitting,\n  isModified,\n  onGoBack,\n  onSave,\n}) => (\n  <FlexRowSingle>\n    <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n      <TouchButton\n        color={Colors.greyMiddle}\n        onClick={onGoBack}\n        text={i18n.t`Back`}\n        disabled={isSubmitting}\n      />\n    </FlexColumn>\n    <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n      <CanMutate mutationName=\"updateZone\">\n        <TouchButton\n          color={Colors.green}\n          text={i18n.t`Save zone`}\n          onClick={onSave}\n          disabled={isSubmitting || !isModified}\n        />\n      </CanMutate>\n    </FlexColumn>\n  </FlexRowSingle>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { FZoneFragmentDoc } from '../../../graph/generated'\nimport { GZones } from '../../../graph/types'\n\nexport const ZonesQuery = gql`\n  query GZones($branchesId: [ID!]!) {\n    zones(companyBranches: $branchesId) {\n      ...FZone\n    }\n  }\n  ${FZoneFragmentDoc}\n`\n\nexport const QueryZones = buildQuery<GZones.Query, GZones.Variables>(ZonesQuery)\n","import { observer } from 'mobx-react-lite'\nimport React, { useContext } from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { FZoneFragment } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { QueryZones } from './ZoneListLoader.graphql'\n\ninterface IProps {}\n\nexport type TZone = FZoneFragment\n\nconst ZoneListContext = React.createContext<Maybe<RoA<TZone>>>(null)\n\nexport const ZoneListLoader: React.FC<IProps> = observer(({ children }) => {\n  const { zone } = useRoot()\n  const branches = zone.branches.filter(zone.branchFilterPredicate)\n  if (branches.length === 0) {\n    return (\n      <ZoneListContext.Provider value={[]}>{children}</ZoneListContext.Provider>\n    )\n  }\n  return (\n    <QueryZones\n      fetchPolicy=\"cache-and-network\"\n      variables={{ branchesId: branches.map(RM.prop('id')) }}\n      renderLoading={false}\n      render={({ zones }, { loading }) => (\n        <ZoneListContext.Provider value={loading ? null : zones}>\n          {children}\n        </ZoneListContext.Provider>\n      )}\n    />\n  )\n})\n\nexport const useZoneList = () => {\n  return useContext(ZoneListContext)\n}\n","import { useReaction } from '@speedlo/hooks'\nimport React, { useCallback, useRef, useState } from 'react'\nimport { Form, IFormApi } from 'react-form'\nimport Goodbye from 'react-goodbye'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { ConfirmDialog } from '../../../atoms/ConfirmDialog'\nimport { Loading } from '../../../atoms/Loading'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { useMZoneUpdate } from '../../../graph/generated'\nimport { logDebug } from '../../../helpers/logger'\nimport { RM } from '../../../helpers/ramda'\nimport { useSnackBar } from '../../../hooks/useSnackBar'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Spacing } from '../../../styling'\nimport { useZoneId } from '../hooks/useZoneId'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { ZoneFormContent } from '../molecules/ZoneFormContent'\nimport { ZoneFormControls } from '../molecules/ZoneFormControls'\nimport { useZoneList } from './ZoneListLoader'\n\nconst DeleteButtonContainer = styled.div`\n  width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  margin-top: ${Spacing.Middle};\n`\n\nexport const ZoneFormPanel: React.FC = () => {\n  const zoneId = useZoneId()\n  const zoneList = useZoneList()\n  const { zone: zoneModel } = useRoot()\n  const { routeToZoneList } = useZoneRouteControl()\n  const [isModified, setModified] = useState(false)\n  const formApiRef = useRef<IFormApi | null>(null)\n  const { enqueueError, enqueueSuccess } = useSnackBar()\n\n  const [zoneUpdate] = useMZoneUpdate()\n\n  const onSubmit = useCallback(\n    async values => {\n      if (zoneId) {\n        const data = await zoneUpdate(\n          zoneModel.getZoneVariables(zoneId, values),\n        )\n        if (data) {\n          setModified(false)\n          routeToZoneList()\n          enqueueSuccess(i18n.t`Zone has been updated`)\n        }\n      }\n    },\n    [enqueueSuccess, routeToZoneList, zoneId, zoneModel, zoneUpdate],\n  )\n\n  const onDelete = useCallback(async () => {\n    if (zoneId) {\n      await zoneModel.destroyZone(zoneId)\n    }\n    routeToZoneList()\n  }, [routeToZoneList, zoneId, zoneModel])\n\n  useReaction(() => zoneModel.map.currentZonePoints !== null, setModified)\n\n  React.useEffect(() => {\n    if (zoneList && zoneList.length === 0) {\n      enqueueError(i18n.t`Requested zone wasn't found`)\n      routeToZoneList()\n    }\n  }, [enqueueError, routeToZoneList, zoneList])\n\n  const zone =\n    zoneId && zoneList ? zoneList.find(RM.propEq('id', zoneId)) || null : null\n\n  React.useEffect(() => {\n    zoneModel.map.clearZonePoints()\n  }, [zone, zoneModel.map])\n\n  if (!zone) {\n    return <Loading text={i18n.t`Loading form...`} />\n  }\n\n  return (\n    <Form\n      defaultValues={zone}\n      onChange={formState => {\n        logDebug('zone form change', formState.values)\n        setModified(true)\n      }}\n      onSubmit={onSubmit}\n      render={formApi => {\n        formApiRef.current = formApi\n        return (\n          <Card padding={0}>\n            <ZoneFormControls\n              isSubmitting={formApi.submitting}\n              isModified={isModified}\n              onSave={formApi.submitForm}\n              onGoBack={routeToZoneList}\n            />\n            <ZoneFormContent />\n\n            <CanMutate mutationName=\"destroyZone\">\n              <DeleteButtonContainer>\n                <TouchButtonDelete\n                  disabled={formApi.submitting}\n                  confirmText={i18n.t`Remove zone ${zone.name}?`}\n                  onDelete={onDelete}\n                />\n              </DeleteButtonContainer>\n            </CanMutate>\n\n            <Goodbye when={isModified}>\n              {({ isShow, handleOk, handleCancel }) => (\n                <ConfirmDialog\n                  isShow={isShow}\n                  confirmText={i18n.t`Do you want to cancel changes for the zone?`}\n                  onConfirm={handleOk}\n                  onCancel={handleCancel}\n                />\n              )}\n            </Goodbye>\n          </Card>\n        )\n      }}\n    />\n  )\n}\n","import { OverlayView } from '@react-google-maps/api'\nimport React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { FCompanyBranchFragment } from '../graph/generated'\nimport { gpsToLatLng } from '../helpers/gps'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  branch: FCompanyBranchFragment\n  isActive?: boolean\n}\n\nconst BranchNameStyled = styled.div`\n  ${getColors} font-size: 1.3rem;\n  white-space: nowrap;\n  padding: 0.2rem 0.5rem;\n`\n\nexport const MapCompanyBranchMarker: React.FC<IProps> = ({\n  branch,\n  isActive = true,\n}) => (\n  <OverlayView\n    getPixelPositionOffset={(width, height) => ({\n      x: -(width / 2),\n      y: -(height / 2),\n    })}\n    mapPaneName={OverlayView.MARKER_LAYER}\n    position={gpsToLatLng(branch.gps)}\n  >\n    <BranchNameStyled isActive={isActive}>{branch.name}</BranchNameStyled>\n  </OverlayView>\n)\n\nfunction getColors({ isActive }: { isActive: boolean }) {\n  return css`\n    background-color: ${isActive ? Colors.green : Colors.greyLight};\n    color: ${isActive ? Colors.white : Colors.greyDark};\n  `\n}\n","import { Polygon } from '@react-google-maps/api'\nimport React from 'react'\n\nimport { gpsToLatLng } from '../../../helpers/gps'\n\ninterface IZoneMapAreaProps {\n  points: RoA<GeoPoint>\n  color: string\n  priority: number\n  onFocus?(): void\n}\n\nexport const ZoneMapArea: React.FC<IZoneMapAreaProps> = ({\n  points,\n  color,\n  priority,\n  onFocus,\n}) => {\n  const onAreaFocus = React.useCallback(\n    (e: google.maps.PolyMouseEvent) => {\n      if (onFocus) {\n        e.stop()\n        onFocus()\n      }\n    },\n    [onFocus],\n  )\n\n  return (\n    <Polygon\n      path={points.map(gpsToLatLng)}\n      options={{\n        fillColor: color,\n        fillOpacity: 0.3,\n        strokeWeight: 0,\n        zIndex: 5000 - priority,\n      }}\n      editable={false}\n      draggable={false}\n      onDblClick={onAreaFocus}\n    />\n  )\n}\n","import { Polygon } from '@react-google-maps/api'\nimport React from 'react'\n\nimport { gpsToLatLng, latLngToGps } from '../../../helpers/gps'\n\ninterface IZoneMapAreaProps {\n  points: RoA<GeoPoint>\n  color: string\n  priority: number\n  onChange(points: GeoPoint[]): void\n  onClear(): void\n}\n\nexport const ZoneMapEditableArea: React.FC<IZoneMapAreaProps> = ({\n  onChange,\n  onClear,\n  points,\n  color,\n}) => {\n  const polygonRef = React.useRef<google.maps.Polygon | null>(null)\n  const listenersRef = React.useRef<google.maps.MapsEventListener[]>([])\n\n  const onAreaChange = React.useCallback(() => {\n    if (polygonRef.current) {\n      const path = polygonRef.current.getPath()\n      onChange(path.getArray().map(latLngToGps))\n    }\n  }, [onChange])\n\n  const onLoad = React.useCallback(\n    (polygon: google.maps.Polygon) => {\n      polygonRef.current = polygon\n      const path = polygon.getPath()\n      listenersRef.current.push(\n        path.addListener('set_at', onAreaChange),\n        path.addListener('insert_at', onAreaChange),\n        path.addListener('remove_at', onAreaChange),\n      )\n    },\n    [onAreaChange],\n  )\n\n  const onUnmount = React.useCallback(() => {\n    onClear()\n    listenersRef.current.forEach(lis => lis.remove())\n    polygonRef.current = null\n  }, [onClear])\n\n  return (\n    <Polygon\n      path={points.map(gpsToLatLng)}\n      options={{\n        fillColor: color,\n        fillOpacity: 0.6,\n        strokeWeight: 2,\n        zIndex: 10000,\n      }}\n      editable={true}\n      draggable={true}\n      onDragEnd={onAreaChange}\n      onLoad={onLoad}\n      onUnmount={onUnmount}\n    />\n  )\n}\n","import { useRoot } from '../../../atoms/RootProvider'\n\nexport function useZoneModel() {\n  const { zone: zoneModel } = useRoot()\n  return zoneModel\n}\n","import { autorun } from 'mobx'\nimport React, { useCallback } from 'react'\n\nimport { BaseMap } from '../../../atoms/BaseMap'\nimport { FCompanyBranchFragment } from '../../../graph/generated'\nimport { MapCompanyBranchMarker } from '../../../molecules/MapCompanyBranchMarker'\nimport { Colors } from '../../../styling'\nimport { ZoneMapArea } from '../atoms/ZoneMapArea'\nimport { ZoneMapEditableArea } from '../atoms/ZoneMapEditableArea'\nimport { useZoneId } from '../hooks/useZoneId'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { TZone, useZoneList } from '../organisms/ZoneListLoader'\n\nexport const ZoneMapControl: React.FC = () => {\n  const zoneModel = useZoneModel()\n  const editZoneId = useZoneId()\n  const zoneList = useZoneList()\n  const { routeToZoneEdit } = useZoneRouteControl()\n\n  const branches = zoneModel.branches.filter(zoneModel.branchFilterPredicate)\n\n  const isActive = React.useCallback(\n    (companyBranchId: ID) => {\n      return (\n        !zoneModel.hasBranchFilter ||\n        companyBranchId === zoneModel.branchFilterId\n      )\n    },\n    [zoneModel],\n  )\n\n  React.useEffect(\n    () =>\n      autorun(() => {\n        if (zoneModel.branch && zoneModel.map.isReady) {\n          zoneModel.map.panToBranch(zoneModel.branch)\n        }\n      }),\n    [zoneModel],\n  )\n\n  const renderZoneArea = (zone: TZone) => {\n    const areaProps = {\n      key: `zone${zone.id}`,\n      points: zone.geoPolygon,\n      priority: zone.priority,\n      color:\n        isActive(zone.companyBranch.id) && zone.enabled\n          ? zone.zoneColor.color\n          : Colors.greyMiddle,\n    }\n\n    if (zone.id === editZoneId) {\n      return (\n        <ZoneMapEditableArea\n          {...areaProps}\n          onChange={zoneModel.map.updateZonePoints}\n          onClear={zoneModel.map.clearZonePoints}\n        />\n      )\n    }\n\n    return (\n      <ZoneMapArea\n        {...areaProps}\n        onFocus={() => {\n          if (isActive(zone.companyBranch.id)) {\n            routeToZoneEdit(zone.id)\n          }\n        }}\n      />\n    )\n  }\n\n  const renderBranchLabel = useCallback(\n    (branch: FCompanyBranchFragment) => (\n      <MapCompanyBranchMarker\n        key={`branch${branch.id}`}\n        branch={branch}\n        isActive={isActive(branch.id)}\n      />\n    ),\n    [isActive],\n  )\n\n  return (\n    <BaseMap model={zoneModel.map}>\n      {zoneList && zoneList.map(renderZoneArea)}\n      {branches && branches.map(renderBranchLabel)}\n    </BaseMap>\n  )\n}\n","import { observer } from 'mobx-react-lite'\n\nimport { useRoot } from './RootProvider'\n\nexport const UserHasMultipleBranches: React.FC = observer(({ children }) => {\n  const { user } = useRoot()\n  return user.hasSingleBranch ? null : (children as any)\n})\n","import { AddCircle } from '@material-ui/icons'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\n\nexport const CreateZoneButton: React.FC = observer(() => {\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n  return (\n    <TouchButton\n      text={\n        zoneModel.hasBranchFilter\n          ? i18n.t`Create zone for branch`\n          : i18n.t`Select branch to create zone`\n      }\n      onClick={() => zoneModel.createZone(routeToZoneEdit)}\n      disabled={!zoneModel.hasBranchFilter}\n      color={Colors.turquoise}\n      textNextToIcon={true}\n      height={Spacing.ButtonHeight + Spacing.DefaultSizeUnit}\n      icon={AddCircle}\n    />\n  )\n})\n","import { Edit } from '@material-ui/icons'\nimport React from 'react'\nimport { SortableElement } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Card } from '../../../atoms/Card'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { SizerButton } from '../../../atoms/SizerButton'\nimport { FCompanyBranchFragment, FZoneFragment } from '../../../graph/generated'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\n\ninterface IZoneListCardProps {\n  zone: FZoneFragment\n  branch: FCompanyBranchFragment\n  onEdit(): void\n}\n\nconst ZoneNameStyled = styled.div`\n  font-size: 1.125rem;\n  margin-top: 0.2rem;\n`\n\nconst ZoneDescriptionStyled = styled.div`\n  font-size: 0.875rem;\n`\nconst ZoneFlexRowStyled = styled(FlexRowSingle)`\n  height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n`\n\nexport const ZoneListCard = SortableElement<IZoneListCardProps>(\n  ({ zone, branch, onEdit }) => (\n    <Card\n      key={zone.id}\n      padding={0}\n      color={zone.enabled ? zone.zoneColor.color : Colors.greyMiddle}\n      onClick={onEdit}\n    >\n      <ZoneFlexRowStyled>\n        <FlexColumn fixedWidth={true} padding=\"0 0.5rem 0 0\">\n          <SizerButton>\n            <TouchButton icon={Edit} />\n          </SizerButton>\n        </FlexColumn>\n        <FlexColumn widthGrowIndex={1}>\n          <ZoneNameStyled>\n            {zone.name}\n            {` [P${zone.priority}]`}\n          </ZoneNameStyled>\n          <ZoneDescriptionStyled>{branch.name}</ZoneDescriptionStyled>\n        </FlexColumn>\n        <FlexColumn padding=\"0\">\n          <DragHandle />\n        </FlexColumn>\n      </ZoneFlexRowStyled>\n    </Card>\n  ),\n)\n","import * as R from 'ramda'\nimport React, { Fragment } from 'react'\nimport { SortableContainer, SortEndHandler } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { FCompanyBranchFragment, FZoneFragment } from '../../../graph/generated'\nimport { TZoneModel } from '../../../segments/zones/models/ZoneModel'\nimport { ZoneListCard } from '../atoms/ZoneListCard'\n\ntype TBranch = FCompanyBranchFragment\ntype TZone = FZoneFragment\n\ninterface IZoneListProps {\n  branches: TBranch[]\n  zones: TZone[]\n  zoneModel: TZoneModel\n  onZoneEdit(zoneID: ID): void\n}\n\nconst ZoneListContainerStyled = SortableContainer(styled.div`\n  margin-top: 0.5rem;\n  cursor: arrow;\n`)\n\nconst sortZones = R.sortWith<TZone>([\n  R.ascend(R.path(['companyBranch', 'name'])),\n  R.descend(R.prop('priority')),\n])\n\nconst groupByBranch = R.groupBy((zone: TZone) => zone.companyBranch.id)\n\nexport const ZoneList: React.FC<IZoneListProps> = ({\n  branches,\n  zones,\n  zoneModel,\n  onZoneEdit,\n}) => {\n  const renderZone = (zone: TZone, idx: number) => (\n    <ZoneListCard\n      key={zone.id}\n      zone={zone}\n      branch={branches.find(R.propEq('id', zone.companyBranch.id))!}\n      index={idx}\n      collection={zone.companyBranch.id}\n      onEdit={() => onZoneEdit(zone.id)}\n    />\n  )\n  const renderBranch = (branch: TBranch, branchZones: TZone[]) => (\n    <Fragment key={branch.id}>\n      <CardListTitle>{branch.name}</CardListTitle>\n      {branchZones.map(renderZone)}\n    </Fragment>\n  )\n\n  let output\n  let onSortEnd: SortEndHandler\n\n  if (branches.length === 1) {\n    const sorted = sortZones(zones)\n    output = sorted.map(renderZone)\n    onSortEnd = ({ oldIndex, newIndex }) => {\n      const zone = sorted[oldIndex]\n      zoneModel.changeZonePriority(zone, oldIndex, newIndex)\n    }\n  } else {\n    const grouped = R.mapObjIndexed(sortZones, groupByBranch(zones))\n    output = branches.map(branch => {\n      const branchZones = grouped[branch.id]\n      return branchZones ? renderBranch(branch, branchZones) : null\n    })\n    onSortEnd = ({ oldIndex, newIndex, collection }) => {\n      const group = grouped[collection]\n      const zone = group[oldIndex]\n      zoneModel.changeZonePriority(zone, oldIndex, newIndex)\n    }\n  }\n\n  return (\n    <ZoneListContainerStyled\n      useDragHandle={true}\n      lockAxis=\"y\"\n      onSortEnd={onSortEnd}\n    >\n      {output}\n    </ZoneListContainerStyled>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { BulletList } from 'react-content-loader'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { ZoneList } from '../molecules/ZoneList'\nimport { useZoneList } from './ZoneListLoader'\n\nexport const ZoneListControl: React.FC = () => {\n  const zoneList = useZoneList()\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n  if (zoneList === null) {\n    return <BulletList primaryOpacity={0.2} secondaryOpacity={0.2} />\n  }\n  if (zoneModel.brand === null) {\n    return (\n      <CardListTitle>\n        <Trans>Select brand to see its zones</Trans>\n      </CardListTitle>\n    )\n  }\n  return (\n    <ZoneList\n      zoneModel={zoneModel}\n      zones={zoneList.filter(zoneModel.zoneFilterPredicate)}\n      branches={zoneModel.root.user.filterBranches(\n        zoneModel.branchFilterPredicate,\n      )}\n      onZoneEdit={routeToZoneEdit}\n    />\n  )\n}\n","import { autorun } from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { FCompanyBranchBrand } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { CompanyBranchDropdown } from '../../../molecules/CompanyBranchDropdown'\nimport { CompanyBrandDropdown } from '../../../molecules/CompanyBrandDropdown'\n\nexport const ZoneFilter: React.FC = observer(() => {\n  const { user, zone } = useRoot()\n  const branches = user.branches\n\n  const getBrandBranches = React.useCallback(\n    (brand: Maybe<FCompanyBranchBrand>) =>\n      brand === null\n        ? []\n        : user.branches.filter(RM.pathEq(['brand', 'id'], brand.id)),\n    [user.branches],\n  )\n\n  React.useEffect(\n    () =>\n      autorun(() => {\n        if (branches.length === 1) {\n          zone.setBranchFilter(RM.head(branches)!)\n        }\n      }),\n    [branches, zone],\n  )\n\n  // no filter is shown for less than 1 branch available\n  if (branches.length <= 1) {\n    return null\n  }\n\n  const singleBrand = user.brands.length === 1 ? RM.head(user.brands)! : null\n  if (singleBrand) {\n    zone.setBrandFilter(singleBrand, getBrandBranches(zone.brand))\n  }\n\n  return (\n    <>\n      {!singleBrand && (\n        <CompanyBrandDropdown\n          selectedBrand={zone.brand}\n          onSelection={brand => {\n            if (brand === null) {\n              zone.clearBrandFilter()\n            } else {\n              zone.setBrandFilter(brand, getBrandBranches(brand))\n            }\n          }}\n        />\n      )}\n      {!singleBrand && <VerticalGap />}\n      <CompanyBranchDropdown\n        branches={getBrandBranches(zone.brand)}\n        selectedBranch={zone.branch}\n        autoFocus={Boolean(singleBrand)}\n        formatOptionLabel={RM.prop('name')}\n        isClearable={true}\n        onSingleSelection={branch => {\n          if (!branch) {\n            zone.clearBranchFilter()\n          } else {\n            zone.setBranchFilter(branch)\n          }\n        }}\n      />\n    </>\n  )\n})\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { ScrollArea } from '../../../atoms/ScrollArea'\nimport { UserHasMultipleBranches } from '../../../atoms/UserHasMultipleBranches'\nimport { useAutorunWhenSingleBranch } from '../../../hooks/useAutorunWhenSingleBranch'\nimport { CreateZoneButton } from '../molecules/CreateZoneButton'\nimport { ZoneListControl } from '../organisms/ZoneListControl'\nimport { ZoneFilter } from './ZoneFilter'\n\nconst ZoneMenuContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst FixedHeaderContainer = styled.div`\n  flex: 0 0 auto;\n`\nconst ScrollAreaContainer = styled.div`\n  flex: 1 1 0;\n  min-height: 0;\n`\nexport const ZoneMenuPanel = React.memo(() => {\n  const { zone } = useRoot()\n  useAutorunWhenSingleBranch(branch => {\n    zone.setBranchFilter(branch)\n  })\n  return (\n    <ZoneMenuContainer>\n      <FixedHeaderContainer>\n        <UserHasMultipleBranches>\n          <Card>\n            <ZoneFilter />\n          </Card>\n        </UserHasMultipleBranches>\n        <CanMutate mutationName=\"createZone\">\n          <CreateZoneButton />\n        </CanMutate>\n      </FixedHeaderContainer>\n\n      <ScrollAreaContainer>\n        <ScrollArea>\n          <ZoneListControl />\n        </ScrollArea>\n      </ScrollAreaContainer>\n    </ZoneMenuContainer>\n  )\n})\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport { i18n } from '../../../i18n'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { PageLayoutResponsive } from '../../../molecules/PageLayoutResponsive'\nimport { ROUTE_SETTINGS } from '../../settings/settings.routes'\nimport { ZoneFormPanel } from '../organisms/ZoneFormPanel'\nimport { ZoneListLoader } from '../organisms/ZoneListLoader'\nimport { ZoneMapControl } from '../organisms/ZoneMapControl'\nimport { ZoneMenuPanel } from '../organisms/ZoneMenuPanel'\n\ninterface IProps extends RouteComponentProps<{ zoneId?: ID }> {}\n\nexport const ZonePageLayout: React.FC<IProps> = ({ match }) => {\n  const isEditing = Boolean(match.params.zoneId)\n  return (\n    <ZoneListLoader>\n      <PageLayoutResponsive\n        pageTitle={i18n.t`Delivery zones`}\n        backRoute={ROUTE_SETTINGS}\n        useBackButton\n      >\n        <PageLayoutFullHeightItem\n          widthInColumns={6}\n          column={10}\n          rowInMobile={2}\n          withScrollArea={isEditing}\n        >\n          {isEditing ? <ZoneFormPanel /> : <ZoneMenuPanel />}\n        </PageLayoutFullHeightItem>\n        <PageLayoutFullHeightItem\n          widthInColumns={10}\n          rowInMobile={1}\n          forcePercentHeightInMobile={60}\n        >\n          <ZoneMapControl />\n        </PageLayoutFullHeightItem>\n      </PageLayoutResponsive>\n    </ZoneListLoader>\n  )\n}\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { ROUTE_SETTINGS_ZONES } from '../../settings/settings.routes'\nimport { ZonePageLayout } from '../pages/ZonePageLayout'\n\ninterface IProps {}\n\nexport const ZonesRouting: React.FC<IProps> = () => (\n  <Switch>\n    <Route\n      path={`${ROUTE_SETTINGS_ZONES}/:zoneId?`}\n      component={ZonePageLayout}\n    />\n    <Route component={NotFoundPage} />\n  </Switch>\n)\n\nexport default ZonesRouting\n"],"sourceRoot":""}