{"version":3,"sources":["molecules/PageLayoutFullHeightItem.tsx","atoms/FlexRowSingle.tsx","atoms/VerticalGap.tsx","atoms/ScrollArea.tsx","atoms/BaseMap.tsx","atoms/CardListTitle.tsx","atoms/DragHandle.tsx","atoms/ConfirmDialog.tsx","atoms/FormInputSelect.tsx","segments/zones/hooks/useZoneId.ts","segments/zones/hooks/useZoneRouteControl.tsx","segments/zones/atoms/ZonePriceInput.tsx","segments/zones/molecules/ZoneColorSelector.tsx","segments/zones/atoms/ZonePlaceholderInput.tsx","segments/zones/molecules/ZoneFormPriceRange.tsx","segments/zones/molecules/ZoneFormContent.tsx","segments/zones/molecules/ZoneFormControls.tsx","segments/zones/organisms/ZoneListLoader.graphql.ts","segments/zones/organisms/ZoneListLoader.tsx","segments/zones/organisms/ZoneFormPanel.tsx","molecules/MapCompanyBranchMarker.tsx","segments/zones/atoms/ZoneMapArea.tsx","segments/zones/atoms/ZoneMapEditableArea.tsx","segments/zones/hooks/useZoneModel.ts","segments/zones/organisms/ZoneMapControl.tsx","segments/zones/molecules/CreateZoneButton.tsx","segments/zones/atoms/ZoneListCard.tsx","segments/zones/molecules/ZoneList.tsx","segments/zones/organisms/ZoneListControl.tsx","segments/zones/molecules/ZoneFIlterBranch.tsx","segments/zones/molecules/ZoneFilterBrand.tsx","segments/zones/organisms/ZoneFilter.tsx","segments/zones/organisms/ZoneMenuPanel.tsx","segments/zones/pages/ZonePageLayout.tsx","segments/zones/routes/ZoneMenuRoutes.tsx"],"names":["FullHeightDiv","styled","div","_templateObject","props","undefined","widthInColumns","Spacing","LayoutGridCellMargin","column","row","FullHeightDivStyled","_templateObject2","PageLayoutFullHeightItem","_ref","children","_ref$row","_ref$column","_ref$widthInColumns","_ref$withScrollArea","withScrollArea","scrollAreaId","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_atoms_ScrollArea__WEBPACK_IMPORTED_MODULE_3__","id","FlexRowSingle","_ref$justify","justify","VerticalGap","_ref$size","size","_ref$sizeUnit","sizeUnit","concat","displayName","ScrollArea","MapContainerStyled","Radiuses","Card","BaseMapContainer","withGoogleMap","react__WEBPACK_IMPORTED_MODULE_9___default","Fragment","mapModelContext","React","createContext","mapContext","GoogleMapProvider","context","_this","Object","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","map","MAP","Provider","value","PureComponent","contextTypes","object","BaseMap","_ref2","model","options","streetViewControl","mapTypeControl","fullscreenControl","containerElement","mapElement","style","height","mobx_react__WEBPACK_IMPORTED_MODULE_7__","react_google_maps__WEBPACK_IMPORTED_MODULE_10__","ref","setMapRef","zoom","center","onCenterChanged","updatePosition","onZoomChanged","updateZoom","useGoogleMap","useContext","Error","CardListTitle","h2","Colors","greyLight","DragHandleContainerStyled","DragHandle","SortableHandle","_Icon__WEBPACK_IMPORTED_MODULE_4__","iconName","__webpack_require__","d","__webpack_exports__","ConfirmDialog","react__WEBPACK_IMPORTED_MODULE_0__","useEffect","isShow","window","confirm","confirmText","onConfirm","onCancel","FormInputSelect","_React$Component","_getPrototypeOf2","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_len","arguments","length","args","Array","_key","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","apply","validate","isRequired","_i18n__WEBPACK_IMPORTED_MODULE_10__","_","0","validatioName","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","key","fieldApi","_this$props","isMulti","getOptionValue","defaultValue","selection","isSelected","isArray","item","includes","RM","F","filter","onChange","selectedOptions","setValue","find","option","_this2","_this$props2","field","_this$props2$fieldIsP","fieldIsPure","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_7___default","react_form__WEBPACK_IMPORTED_MODULE_8__","pure","_SelectControl__WEBPACK_IMPORTED_MODULE_11__","assign","getControlProps","onFocus","setTouched","styles","control","base","Boolean","error","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","borderColor","Component","defaultProps","getItemId","prop","useZoneId","useRouterContext","match","params","zoneId","useZoneRouteControl","_useRoot","useRoot","user","zoneModel","zone","history","getRouteToZone","routeToZoneEdit","editZoneId","panToZone","canQuery","push","routeToZoneList","LabelStyled","FormInputTextBoxStyled","FormInputTextBox","FormInputTextBoxDeliveryStyled","_templateObject3","blue","DeliveryContainer","_templateObject4","PriceRangeContainer","_templateObject5","VerticalLine","_templateObject6","validatePrice","trim","Number","isNaN","parseFloat","i18n","ZonePriceInput","forwardRef","label","isDeliveryPrice","_ref$autoFocus","autoFocus","react_default","ColorOption","ZoneColorSelector_templateObject","color","white","QueryZoneColors","buildQuery","ZoneColorsQuery","ZoneColorSelector","_ref2$field","render","_ref3","zoneColors","toConsumableArray","width","objectSpread","padding","margin","menu","maxWidth","head","formatOptionLabel","zoneColor","code","ZonePlaceholderInput_templateObject","FormInputForPlaceholderStyled","FormInputStyled","ZonePlaceholderInput_templateObject2","Container","ZonePlaceholderInput_templateObject3","ZonePlaceholderInput","display","ZonePlaceholderInput_LabelStyled","disabled","placeholder","AddButtonContainer","ZoneFormPriceRange_templateObject","RemoveButtonContainer","ZoneFormPriceRange_templateObject2","ZoneFormPriceRange","values","idx","react","ZonePlaceholderInput_ZonePlaceholderInput","TouchButtonDelete","onDelete","removeValue","es","formApi","TouchButton","submitting","ButtonHeight","DefaultSizeUnit","onClick","addValue","price","toPrice","ZoneFormContentStyled","ZoneFormContent_templateObject","Middle","black","DescriptionUnderHeadline","ZoneFormContent_templateObject2","greyDark","ZoneFormContent","IconLine","icon","validateIsRequired","ZoneColorSelector_ZoneColorSelector","FormInputCheckbox","name","toLocaleLowerCase","_lingui_react","components","Headline","component","ZoneFormControls","isSubmitting","isModified","onGoBack","onSave","FlexColumn","widthGrowIndex","greyMiddle","text","CanMutate","mutationName","green","ZonesQuery","gql","ZoneListLoader_graphql_templateObject","FZoneFragmentDoc","QueryZones","ZoneListContext","ZoneListLoader","observer","branches","branchFilterPredicate","fetchPolicy","variables","branchesId","renderLoading","zones","loading","useZoneList","DeleteButtonContainer","ZoneFormPanel_templateObject","ZoneFormPanel","zoneList","_useState","useState","_useState2","slicedToArray","setModified","formApiRef","useRef","_useSnackBar","useSnackBar","enqueueError","enqueueSuccess","_useMZoneUpdate","useMZoneUpdate","zoneUpdate","onSubmit","useCallback","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","getZoneVariables","sent","stop","_x","_callee2","_context2","destroyZone","useDisposable","reaction","currentZonePoints","propEq","clearZonePoints","defaultValues","formState","logDebug","current","ZoneFormControls_ZoneFormControls","submitForm","ZoneFormContent_ZoneFormContent","index_es","when","handleOk","handleCancel","Loading","BranchNameStyled","MapCompanyBranchMarker_templateObject","isActive","css","MapCompanyBranchMarker_templateObject2","MapCompanyBranchMarker","branch","_ref$isActive","lib","getPixelPositionOffset","x","y","mapPaneName","OverlayView","MARKER_LAYER","position","gpsToLatLng","gps","ZoneMapArea","onAreaFocus","e","points","priority","defaultPath","fillColor","fillOpacity","strokeWeight","zIndex","editable","draggable","onDblClick","ZoneMapEditableArea","polygonRef","onAreaChange","path","getPath","getArray","latLngToGps","listeners","addListener","onClear","forEach","lis","remove","onDragEnd","useZoneModel","ZoneMapControl","companyBranchId","hasBranchFilter","branchFilterId","renderBranchLabel","MapCompanyBranchMarker_MapCompanyBranchMarker","areaProps","geoPolygon","companyBranch","enabled","ZoneMapEditableArea_ZoneMapEditableArea","updateZonePoints","ZoneMapArea_ZoneMapArea","CreateZoneButton","createZone","turquoise","textNextToIcon","ZoneNameStyled","ZoneListCard_templateObject","ZoneDescriptionStyled","ZoneListCard_templateObject2","ZoneFlexRowStyled","ZoneListCard_templateObject3","ZoneListCard","SortableElement","onEdit","fixedWidth","SizerButton","ZoneListContainerStyled","SortableContainer","ZoneList_templateObject","sortZones","R","groupByBranch","ZoneList","output","onSortEnd","onZoneEdit","renderZone","index","collection","sorted","oldIndex","newIndex","changeZonePriority","grouped","branchZones","renderBranch","useDragHandle","lockAxis","ZoneListControl","react_content_loader_es","primaryOpacity","secondaryOpacity","brand","ZoneList_ZoneList","zoneFilterPredicate","root","filterBranches","ZoneFilterBranch","selectedBranch","onSelection","CompanyBranchDropdown","onSingleSelection","isClearable","ZoneFilterBrand","brands","selectedBrand","SelectControl","getOptionLabel","isSearchable","ZoneFilter","getBrandBranches","pathEq","autorun","setBranchFilter","singleBrand","setBrandFilter","ZoneFilterBrand_ZoneFilterBrand","clearBrandFilter","ZoneFIlterBranch_ZoneFilterBranch","clearBranchFilter","ZoneMenuContainer","ZoneMenuPanel_templateObject","FixedHeaderContainer","ZoneMenuPanel_templateObject2","ScrollAreaContainer","ZoneMenuPanel_templateObject3","ZoneMenuPanel","ZoneListControl_ZoneListControl","ZonePageLayout","isEditing","PageLayout","pageTitle","useBackButton","backRoute","ZoneFormPanel_ZoneFormPanel","ZoneMenuPanel_ZoneMenuPanel","ZoneMapControl_ZoneMapControl","ZoneMenuRoutes_ZoneMenuRoutes","ZoneMenuRoutes","react_router","NotFoundPage"],"mappings":"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","file":"static/js/177.002a78a0.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nimport { ScrollArea } from '../atoms/ScrollArea'\nimport { Spacing } from '../styling'\n\ninterface IPageLayoutFullHeightItemProps {\n  row?: number\n  column?: number\n  widthInColumns?: number\n  withScrollArea?: boolean\n  scrollAreaId?: string\n}\n\nconst gridColumnWidth: string = '6.22vw'\nconst gridColumnHeigth: string = '3.9375rem'\n\nconst leftPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.column !== undefined) {\n    return (\n      'calc((' +\n      props.column +\n      ' * ' +\n      gridColumnWidth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return Spacing.LayoutGridCellMargin\n  }\n}\nconst widthComputed = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.widthInColumns !== undefined) {\n    return (\n      'calc((' +\n      props.widthInColumns +\n      ' * ' +\n      gridColumnWidth +\n      ') - ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return 'calc(100vh - (2 * ' + Spacing.LayoutGridCellMargin + '))'\n  }\n}\nconst topPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.row !== undefined) {\n    return (\n      'calc((' +\n      props.row +\n      ' * ' +\n      gridColumnHeigth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return (\n      'calc(' + gridColumnHeigth + ' + ' + Spacing.LayoutGridCellMargin + ')'\n    )\n  }\n}\n\nconst FullHeightDiv = styled.div`\n  position: fixed;\n  bottom: 0.5rem;\n  width: ${widthComputed()};\n  left: ${leftPos()};\n  top: ${topPos()};\n`\n\nconst FullHeightDivStyled = styled.div`\n  height: 100%;\n`\n\nexport const PageLayoutFullHeightItem: React.FC<\n  IPageLayoutFullHeightItemProps\n> = ({\n  children,\n  row = 1,\n  column = 0,\n  widthInColumns = 16,\n  withScrollArea = false,\n  scrollAreaId,\n}) => (\n  <FullHeightDiv\n    column={column}\n    row={row}\n    widthInColumns={widthInColumns}\n    withScrollArea={withScrollArea}\n  >\n    {withScrollArea ? (\n      <ScrollArea id={scrollAreaId}>{children}</ScrollArea>\n    ) : (\n      <FullHeightDivStyled>{children}</FullHeightDivStyled>\n    )}\n  </FullHeightDiv>\n)\n","import styled from 'styled-components'\n\nexport const FlexRowSingle = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: ${({ justify = 'space-between' }: { justify?: string }) =>\n    justify};\n`\n","import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import styled from 'styled-components'\n\nexport const ScrollArea = styled.div`\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  height: 100%;\n`\n","import { Observer } from 'mobx-react'\nimport { object } from 'prop-types'\nimport React, { useContext } from 'react'\nimport { GoogleMap, GoogleMapProps, withGoogleMap } from 'react-google-maps'\nimport { MAP } from 'react-google-maps/lib/constants'\nimport styled from 'styled-components'\n\nimport { TMapModel } from '../models/MapModel'\nimport { Radiuses } from '../styling'\n\ninterface IBaseMapProps extends GoogleMapProps {\n  model: TMapModel\n}\n\nconst MapContainerStyled = styled.div`\n  border-radius: ${Radiuses.Card};\n  overflow: hidden;\n  height: 100%;\n`\n\nconst BaseMapContainer = withGoogleMap(({ children }) => <>{children}</>)\n\nconst mapModelContext = React.createContext<TMapModel | null>(null)\nconst mapContext = React.createContext<google.maps.Map | null>(null)\n\nclass GoogleMapProvider extends React.PureComponent {\n  static contextTypes = { [MAP]: object }\n  private map: google.maps.Map\n  constructor(props, context) {\n    super(props)\n    this.map = context[MAP]\n  }\n  render() {\n    return (\n      <mapContext.Provider value={this.map}>\n        {this.props.children}\n      </mapContext.Provider>\n    )\n  }\n}\n\nexport const BaseMap: React.FC<IBaseMapProps> = ({ model, children }) => {\n  const options: google.maps.MapOptions = {\n    streetViewControl: false,\n    mapTypeControl: false,\n    fullscreenControl: false,\n  }\n  return (\n    <mapModelContext.Provider value={model}>\n      <BaseMapContainer\n        containerElement={<MapContainerStyled />}\n        mapElement={<div style={{ height: `100%` }} />}\n      >\n        <GoogleMapProvider>\n          <Observer>\n            {() => (\n              <GoogleMap\n                ref={model.setMapRef}\n                zoom={model.zoom}\n                center={model.center}\n                onCenterChanged={model.updatePosition}\n                onZoomChanged={model.updateZoom}\n                options={options}\n              >\n                {children}\n              </GoogleMap>\n            )}\n          </Observer>\n        </GoogleMapProvider>\n      </BaseMapContainer>\n    </mapModelContext.Provider>\n  )\n}\n\nexport function useMapModel() {\n  const model = useContext(mapModelContext)\n  if (!model) {\n    throw new Error('Trying to useMapModel, but BaseMap is missing in the tree')\n  }\n  return model\n}\n\nexport function useGoogleMap() {\n  const map = useContext(mapContext)\n  if (!map) {\n    throw new Error(\n      'Trying to useGoogleMap, but BaseMap is missing in the tree',\n    )\n  }\n  return map\n}\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\nexport const CardListTitle = styled.h2`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  font-size: 1.2rem;\n  margin: 0.8rem 0 0.8rem 0.3rem;\n`\n","import React from 'react'\nimport { SortableHandle } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Icon } from './Icon'\n\ninterface IDragHandleProps {}\n\nconst DragHandleContainerStyled = styled.div`\n  padding: 1rem 0.4rem;\n  cursor: grab;\n`\nexport const DragHandle = SortableHandle<IDragHandleProps>(() => (\n  <DragHandleContainerStyled>\n    <Icon iconName=\"reorder\" />\n  </DragHandleContainerStyled>\n))\n","import React, { useEffect } from 'react'\n\ninterface IProps {\n  isShow: boolean\n  confirmText: string\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport const ConfirmDialog: React.FC<IProps> = props => {\n  useEffect(\n    () => {\n      if (props.isShow) {\n        if (window.confirm(props.confirmText)) {\n          props.onConfirm()\n        } else {\n          props.onCancel()\n        }\n      }\n    },\n    [props.isShow],\n  )\n  return null\n}\n","import React from 'react'\nimport { Field, FieldType, IFieldApi } from 'react-form'\n\nimport { RM } from '../helpers/ramda'\nimport { i18n } from '../i18n'\nimport { ISelectControlProps, SelectControl } from './SelectControl'\n\nexport interface IFormInputSelectProps<OptionType>\n  extends ISelectControlProps<OptionType> {\n  field: FieldType\n  fieldIsPure?: boolean\n  defaultValue?: OptionType\n  isRequired?: boolean\n  validatioName?: string\n}\n\nexport class FormInputSelect<OptionType> extends React.Component<\n  IFormInputSelectProps<OptionType>\n> {\n  static defaultProps = {\n    validatioName: 'Value',\n    getItemId: RM.prop('id'),\n  }\n\n  validate = (value: OptionType | undefined) => {\n    if (this.props.isRequired && !value) {\n      return i18n.t`${this.props.validatioName} must be selected`\n    }\n    return null\n  }\n\n  getControlProps(fieldApi: IFieldApi) {\n    const { isMulti, options, getOptionValue, defaultValue } = this.props\n    const selection = fieldApi.value || defaultValue\n\n    if (isMulti) {\n      const isSelected = Array.isArray(selection)\n        ? (item: OptionType) => selection.includes(getOptionValue!(item))\n        : RM.F\n      return {\n        value: Array.isArray(options)\n          ? (options as OptionType[]).filter(isSelected)\n          : [],\n        onChange: selectedOptions => {\n          fieldApi.setValue(selectedOptions.map(getOptionValue))\n        },\n      }\n    }\n\n    return {\n      value:\n        selection &&\n        (options as OptionType[]).find(\n          item => getOptionValue!(item) === selection,\n        ),\n      onChange: option => {\n        fieldApi.setValue(getOptionValue!(option))\n      },\n    }\n  }\n\n  render() {\n    const {\n      field,\n      fieldIsPure = false,\n      isRequired = false,\n      defaultValue,\n      ...props\n    } = this.props\n    return (\n      <Field field={field} validate={this.validate} pure={fieldIsPure}>\n        {fieldApi => (\n          <SelectControl\n            {...this.getControlProps(fieldApi)}\n            onFocus={() => fieldApi.setTouched(true)}\n            styles={{\n              control: base => {\n                if (Boolean(fieldApi.error)) {\n                  return {\n                    ...base,\n                    borderColor: 'red',\n                  }\n                }\n                return base\n              },\n            }}\n            {...props}\n          />\n        )}\n      </Field>\n    )\n  }\n}\n","import { useRouterContext } from '@speedlo/hooks'\n\ninterface IZoneRouteParams {\n  zoneId?: ID\n}\n\nexport function useZoneId() {\n  const { match } = useRouterContext<IZoneRouteParams>()\n  const { zoneId } = match.params\n  return zoneId\n}\n","import { useRouterContext } from '@speedlo/hooks'\n\nimport { useRoot } from '../../../atoms/RootProvider'\n\nexport function useZoneRouteControl() {\n  const { user, zone: zoneModel } = useRoot()\n  const { history } = useRouterContext()\n  const baseRoute = '/settings/zones'\n  const getRouteToZone = (zoneId: ID) => {\n    return `${baseRoute}/${zoneId}`\n  }\n  return {\n    getRouteToZone,\n    routeToZoneEdit(editZoneId: ID) {\n      zoneModel.map.panToZone(editZoneId)\n      if (user.canQuery('zone')) {\n        history.push(getRouteToZone(editZoneId))\n      }\n    },\n    routeToZoneList() {\n      history.push(baseRoute)\n    },\n  }\n}\n","import React from 'react'\nimport { FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { i18n } from '../../../i18n'\nimport { Colors } from '../../../styling'\n\ninterface IZoneInputProps {\n  field: FieldType\n  label?: string\n  autoFocus?: boolean\n  isDeliveryPrice?: boolean\n}\n\nconst LabelStyled = styled.div`\n  min-width: 2rem;\n  display: inline-block;\n`\n\nconst FormInputTextBoxStyled = styled(FormInputTextBox)`\n  width: 3rem;\n  position: relative;\n  z-index: 4;\n`\nconst FormInputTextBoxDeliveryStyled = styled(FormInputTextBoxStyled)`\n  color: ${Colors.blue};\n`\n\nconst DeliveryContainer = styled.div`\n  position: relative;\n  left: 8rem;\n  top: 0rem;\n`\n\nconst PriceRangeContainer = styled.div`\n  position: relative;\n  left: 4rem;\n  top: -0.3rem;\n  width: 3rem;\n`\n\nconst VerticalLine = styled.div`\n  border-left: 3px solid #707070;\n  width: 3px;\n  position: relative;\n  left: -2rem;\n  height: 4rem;\n  float: left;\n  margin: -0.5rem 0 0 0;\n`\n\nconst validatePrice = (value: string) => {\n  if (typeof value === 'number') {\n    return null\n  }\n  const trim = value.trim()\n  return trim.length && Number.isNaN(Number.parseFloat(trim))\n    ? i18n.t`Must be number`\n    : null\n}\n\nexport const ZonePriceInput = React.forwardRef<\n  HTMLInputElement,\n  IZoneInputProps\n>(\n  ({ field, label, isDeliveryPrice, autoFocus = false }, ref) =>\n    isDeliveryPrice ? (\n      <DeliveryContainer>\n        <VerticalLine />\n        <LabelStyled>{label}</LabelStyled>\n        <FormInputTextBoxDeliveryStyled\n          field={field}\n          validate={validatePrice}\n          // @ts-ignore\n          ref={ref}\n        />\n      </DeliveryContainer>\n    ) : (\n      <PriceRangeContainer>\n        <FormInputTextBoxStyled\n          field={field}\n          validate={validatePrice}\n          autoFocus={autoFocus}\n        />\n      </PriceRangeContainer>\n    ),\n)\n","import React from 'react'\nimport { FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputSelect } from '../../../atoms/FormInputSelect'\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GZoneColors } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { Colors } from '../../../styling'\nimport { ZoneColorsQuery } from '../Zones.graphql'\n\ninterface IZoneColorSelectorProps {\n  field?: FieldType\n}\n\nconst ColorOption = styled.div`\n  background-color: ${({ color }: { color: string }) => color};\n  color: ${Colors.white};\n  width: 6rem;\n  padding: 0.4rem 1rem;\n  margin: 0;\n  height: 100%;\n`\n\nconst QueryZoneColors = buildQuery<GZoneColors.Query, GZoneColors.Variables>(\n  ZoneColorsQuery,\n)\n\nconst makeStyles = () => ({\n  option: base => ({\n    ...base,\n    padding: 0,\n    margin: 0,\n  }),\n  menu: base => ({\n    ...base,\n    width: '8rem',\n    maxWidth: '8rem',\n  }),\n})\n\nexport const ZoneColorSelector: React.FC<IZoneColorSelectorProps> = ({\n  field = 'zoneColor.id',\n}) => (\n  <QueryZoneColors\n    render={({ zoneColors }) => (\n      <FormInputSelect<GZoneColors.ZoneColors>\n        field={field}\n        fieldIsPure={true}\n        options={[...zoneColors]}\n        width={8}\n        styles={makeStyles()}\n        defaultValue={RM.head(zoneColors)}\n        getOptionValue={RM.prop('id')}\n        formatOptionLabel={zoneColor => (\n          <ColorOption color={zoneColor.color}>{zoneColor.code}</ColorOption>\n        )}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { FormInputStyled } from '../../../atoms/FormInputStyled'\n\ninterface IZonePlaceholderInputProps {\n  label: string\n  display: string\n}\n\nconst LabelStyled = styled.div`\n  width: 3rem;\n  display: inline-block;\n`\n\nconst FormInputForPlaceholderStyled = styled(FormInputStyled)`\n  width: 3rem;\n  position: relative;\n  z-index: 4;\n`\n\nconst Container = styled.div`\n  margin: 0 0 0 1rem;\n`\n\nexport const ZonePlaceholderInput: React.FC<IZonePlaceholderInputProps> = ({\n  label,\n  display,\n}) => (\n  <Container>\n    <LabelStyled>{label}</LabelStyled>\n    <FormInputForPlaceholderStyled disabled={true} placeholder={display} />\n  </Container>\n)\n","import React, { Fragment } from 'react'\nimport { FormApi, NestedFieldComponentProps } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FZonePriceRangeFragment } from '../../../graph/generated'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Spacing } from '../../../styling'\nimport { ZonePlaceholderInput } from '../atoms/ZonePlaceholderInput'\nimport { ZonePriceInput } from '../atoms/ZonePriceInput'\n\ninterface IProps extends NestedFieldComponentProps<FZonePriceRangeFragment[]> {}\n\nconst AddButtonContainer = styled.div`\n  position: relative;\n  top: -6rem;\n`\n\nconst RemoveButtonContainer = styled.div`\n  position: relative;\n  top: -7rem;\n  left: 16rem;\n  height: 0;\n`\n\nexport const ZoneFormPriceRange: React.FC<IProps> = ({ fieldApi }) => {\n  return (\n    <>\n      {fieldApi.values.map((value, idx, values) => (\n        <Fragment key={idx}>\n          <ZonePriceInput\n            label=\"za\"\n            isDeliveryPrice={true}\n            field={[idx, 'price', 'value']}\n          />\n\n          {idx === values.length - 1 ? (\n            <ZonePlaceholderInput display=\"&infin;\" label=\"do\" />\n          ) : (\n            <ZonePriceInput\n              field={[idx, 'toPrice', 'value']}\n              autoFocus={true}\n            />\n          )}\n\n          {values.length > 1 && (\n            <RemoveButtonContainer>\n              <TouchButtonDelete\n                onDelete={() => fieldApi.removeValue('', idx)}\n              />\n            </RemoveButtonContainer>\n          )}\n        </Fragment>\n      ))}\n      <FormApi\n        render={formApi => (\n          <AddButtonContainer>\n            <TouchButton\n              disabled={formApi.submitting}\n              width={Spacing.ButtonHeight + Spacing.DefaultSizeUnit}\n              iconName=\"add_circle\"\n              onClick={() =>\n                fieldApi.addValue('', {\n                  price: { value: 0 },\n                  toPrice: { value: 0 },\n                })\n              }\n            />\n          </AddButtonContainer>\n        )}\n      />\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { NestedField } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputCheckbox } from '../../../atoms/FormInputCheckbox'\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { Headline } from '../../../atoms/Headline'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { validateIsRequired } from '../../../helpers/form'\nimport { i18n } from '../../../i18n'\nimport { Colors, Spacing } from '../../../styling'\nimport { ZonePriceInput } from '../atoms/ZonePriceInput'\nimport { ZoneColorSelector } from '../molecules/ZoneColorSelector'\nimport { ZoneFormPriceRange } from '../molecules/ZoneFormPriceRange'\n\ninterface IZoneFormContentProps {}\n\nconst ZoneFormContentStyled = styled.div`\n  margin: ${Spacing.Middle};\n  color: ${Colors.black};\n`\n\nconst DescriptionUnderHeadline = styled.div`\n  color: ${Colors.greyDark};\n  padding-bottom: 0.2rem;\n`\n\nexport const ZoneFormContent: React.FC<IZoneFormContentProps> = props => (\n  <ZoneFormContentStyled>\n    <IconLine icon=\"label\">\n      <FormInputTextBox\n        field=\"name\"\n        validate={validateIsRequired(i18n.t`Zone name`)}\n      />\n    </IconLine>\n\n    <IconLine icon=\"color_lens\">\n      <ZoneColorSelector />\n    </IconLine>\n\n    <FormInputCheckbox\n      field=\"enabled\"\n      name=\"enabled\"\n      label={i18n.t`Is active`.toLocaleLowerCase()}\n    />\n\n    <Trans>\n      <Headline margin=\"0.5rem 0 0 0\">Delivery cost</Headline>\n      <DescriptionUnderHeadline>\n        according order total cost\n      </DescriptionUnderHeadline>\n    </Trans>\n    <ZonePriceInput field=\"minimalOrderPrice.value\" />\n    <NestedField field=\"priceRangeRules\" component={ZoneFormPriceRange} />\n  </ZoneFormContentStyled>\n)\n","import React, { MouseEvent } from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IProps {\n  isSubmitting: boolean\n  isModified: boolean\n  onSave(e: MouseEvent<HTMLButtonElement>): void\n  onGoBack(): void\n}\n\nexport const ZoneFormControls: React.FC<IProps> = ({\n  isSubmitting,\n  isModified,\n  onGoBack,\n  onSave,\n}) => (\n  <FlexRowSingle>\n    <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n      <TouchButton\n        color={Colors.greyMiddle}\n        onClick={onGoBack}\n        text={i18n.t`Back`}\n        disabled={isSubmitting}\n      />\n    </FlexColumn>\n    <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n      <CanMutate mutationName=\"updateZone\">\n        <TouchButton\n          color={Colors.green}\n          text={i18n.t`Save zone`}\n          onClick={onSave}\n          disabled={isSubmitting || !isModified}\n        />\n      </CanMutate>\n    </FlexColumn>\n  </FlexRowSingle>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { FZoneFragmentDoc } from '../../../graph/generated'\nimport { GZones } from '../../../graph/types'\n\nexport const ZonesQuery = gql`\n  query GZones($branchesId: [ID!]!) {\n    zones(companyBranches: $branchesId) {\n      ...FZone\n    }\n  }\n  ${FZoneFragmentDoc}\n`\n\nexport const QueryZones = buildQuery<GZones.Query, GZones.Variables>(ZonesQuery)\n","import { observer } from 'mobx-react-lite'\nimport React, { useContext } from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { FZoneFragment } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { QueryZones } from './ZoneListLoader.graphql'\n\ninterface IProps {}\n\nexport type TZone = FZoneFragment\n\nconst ZoneListContext = React.createContext<Maybe<ReadonlyArray<TZone>>>(null)\n\nexport const ZoneListLoader: React.FC<IProps> = observer(({ children }) => {\n  const { zone } = useRoot()\n  const branches = zone.branches.filter(zone.branchFilterPredicate)\n  if (branches.length === 0) {\n    return (\n      <ZoneListContext.Provider value={[]}>{children}</ZoneListContext.Provider>\n    )\n  }\n  return (\n    <QueryZones\n      fetchPolicy=\"cache-and-network\"\n      variables={{ branchesId: branches.map(RM.prop('id')) }}\n      renderLoading={false}\n      render={({ zones }, { loading }) => (\n        <ZoneListContext.Provider value={loading ? null : zones}>\n          {children}\n        </ZoneListContext.Provider>\n      )}\n    />\n  )\n})\n\nexport const useZoneList = () => {\n  return useContext(ZoneListContext)\n}\n","import { reaction } from 'mobx'\nimport { useDisposable } from 'mobx-react-lite'\nimport React, { useCallback, useRef, useState } from 'react'\nimport { Form, IFormApi } from 'react-form'\nimport Goodbye from 'react-goodbye'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { ConfirmDialog } from '../../../atoms/ConfirmDialog'\nimport { Loading } from '../../../atoms/Loading'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { useMZoneUpdate } from '../../../graph/generated'\nimport { logDebug } from '../../../helpers/logger'\nimport { RM } from '../../../helpers/ramda'\nimport { useSnackBar } from '../../../hooks/useSnackBar'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Spacing } from '../../../styling'\nimport { useZoneId } from '../hooks/useZoneId'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { ZoneFormContent } from '../molecules/ZoneFormContent'\nimport { ZoneFormControls } from '../molecules/ZoneFormControls'\nimport { useZoneList } from './ZoneListLoader'\n\nconst DeleteButtonContainer = styled.div`\n  width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  margin-top: ${Spacing.Middle};\n`\n\nexport const ZoneFormPanel: React.FC = () => {\n  const zoneId = useZoneId()\n  const zoneList = useZoneList()\n  const { zone: zoneModel } = useRoot()\n  const { routeToZoneList } = useZoneRouteControl()\n  const [isModified, setModified] = useState(false)\n  const formApiRef = useRef<IFormApi | null>(null)\n  const { enqueueError, enqueueSuccess } = useSnackBar()\n\n  const [zoneUpdate] = useMZoneUpdate()\n\n  const onSubmit = useCallback(\n    async values => {\n      if (zoneId) {\n        const data = await zoneUpdate(\n          zoneModel.getZoneVariables(zoneId, values),\n        )\n        if (data) {\n          setModified(false)\n          routeToZoneList()\n          enqueueSuccess(i18n.t`Zone has been updated`)\n        }\n      }\n    },\n    [zoneId],\n  )\n\n  const onDelete = useCallback(\n    async () => {\n      if (zoneId) {\n        await zoneModel.destroyZone(zoneId)\n      }\n      routeToZoneList()\n    },\n    [zoneId],\n  )\n\n  useDisposable(() =>\n    reaction(() => zoneModel.map.currentZonePoints !== null, setModified),\n  )\n\n  React.useEffect(\n    () => {\n      if (zoneList && zoneList.length === 0) {\n        enqueueError(i18n.t`Requested zone wasn't found`)\n        routeToZoneList()\n      }\n    },\n    [zoneList],\n  )\n\n  const zone =\n    zoneId && zoneList ? zoneList.find(RM.propEq('id', zoneId)) || null : null\n\n  React.useEffect(\n    () => {\n      zoneModel.map.clearZonePoints()\n    },\n    [zone],\n  )\n\n  if (!zone) {\n    return <Loading text={i18n.t`Loading form...`} />\n  }\n\n  return (\n    <Form\n      defaultValues={zone}\n      onChange={formState => {\n        logDebug('zone form change', formState.values)\n        setModified(true)\n      }}\n      onSubmit={onSubmit}\n      render={formApi => {\n        formApiRef.current = formApi\n        return (\n          <Card padding={0}>\n            <ZoneFormControls\n              isSubmitting={formApi.submitting}\n              isModified={isModified}\n              onSave={formApi.submitForm}\n              onGoBack={routeToZoneList}\n            />\n            <ZoneFormContent />\n\n            <CanMutate mutationName=\"destroyZone\">\n              <DeleteButtonContainer>\n                <TouchButtonDelete\n                  disabled={formApi.submitting}\n                  confirmText={i18n.t`Remove zone ${zone.name}?`}\n                  onDelete={onDelete}\n                />\n              </DeleteButtonContainer>\n            </CanMutate>\n\n            <Goodbye when={isModified}>\n              {({ isShow, handleOk, handleCancel }) => (\n                <ConfirmDialog\n                  isShow={isShow}\n                  confirmText={i18n.t`Do you want to cancel changes for the zone?`}\n                  onConfirm={handleOk}\n                  onCancel={handleCancel}\n                />\n              )}\n            </Goodbye>\n          </Card>\n        )\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport { OverlayView } from 'react-google-maps'\nimport styled, { css } from 'styled-components'\n\nimport { FCompanyBranchFragment } from '../graph/generated'\nimport { gpsToLatLng } from '../helpers/gps'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  branch: FCompanyBranchFragment\n  isActive?: boolean\n}\n\nconst BranchNameStyled = styled.div`\n  ${getColors} font-size: 1.3rem;\n  white-space: nowrap;\n  padding: 0.2rem 0.5rem;\n`\n\nexport const MapCompanyBranchMarker: React.FC<IProps> = ({\n  branch,\n  isActive = true,\n}) => (\n  <OverlayView\n    getPixelPositionOffset={(width, height) => ({\n      x: -(width / 2),\n      y: -(height / 2),\n    })}\n    mapPaneName={OverlayView.MARKER_LAYER}\n    position={gpsToLatLng(branch.gps)}\n  >\n    <BranchNameStyled isActive={isActive}>{branch.name}</BranchNameStyled>\n  </OverlayView>\n)\n\nfunction getColors({ isActive }: { isActive: boolean }) {\n  return css`\n    background-color: ${isActive ? Colors.green : Colors.greyLight};\n    color: ${isActive ? Colors.white : Colors.greyDark};\n  `\n}\n","import React, { useCallback } from 'react'\nimport { Polygon } from 'react-google-maps'\n\nimport { gpsToLatLng } from '../../../helpers/gps'\n\ninterface IZoneMapAreaProps {\n  points: ReadonlyArray<GeoPoint>\n  color: string\n  priority: number\n  onFocus?(): void\n}\n\nexport const ZoneMapArea: React.FC<IZoneMapAreaProps> = props => {\n  const onAreaFocus = useCallback(\n    (e: google.maps.PolyMouseEvent) => {\n      if (props.onFocus) {\n        e.stop()\n        props.onFocus()\n      }\n    },\n    [props.onFocus],\n  )\n\n  const { points, color, priority } = props\n  return (\n    <Polygon\n      defaultPath={points.map(gpsToLatLng)}\n      options={{\n        fillColor: color,\n        fillOpacity: 0.3,\n        strokeWeight: 0,\n        zIndex: 5000 - priority,\n      }}\n      editable={false}\n      draggable={false}\n      onDblClick={onAreaFocus}\n    />\n  )\n}\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport { Polygon } from 'react-google-maps'\n\nimport { gpsToLatLng, latLngToGps } from '../../../helpers/gps'\n\ninterface IZoneMapAreaProps {\n  points: ReadonlyArray<GeoPoint>\n  color: string\n  priority: number\n  onChange(points: GeoPoint[]): void\n  onClear(): void\n}\n\nexport const ZoneMapEditableArea: React.FC<IZoneMapAreaProps> = props => {\n  const polygonRef = useRef<Polygon | null>(null)\n\n  const onAreaChange = useCallback(\n    () => {\n      if (polygonRef.current) {\n        const path = polygonRef.current.getPath()\n        props.onChange(path.getArray().map(latLngToGps))\n      }\n    },\n    [props.onChange],\n  )\n\n  useEffect(() => {\n    let listeners\n    if (polygonRef.current && props.onChange) {\n      const path = polygonRef.current.getPath()\n      listeners = [\n        path.addListener('set_at', onAreaChange),\n        path.addListener('insert_at', onAreaChange),\n        path.addListener('remove_at', onAreaChange),\n      ]\n    }\n    return () => {\n      props.onClear()\n      if (listeners) {\n        listeners.forEach(lis => lis.remove())\n      }\n    }\n  }, [])\n\n  const { points, color } = props\n  return (\n    <Polygon\n      defaultPath={points.map(gpsToLatLng)}\n      options={{\n        fillColor: color,\n        fillOpacity: 0.6,\n        strokeWeight: 2,\n        zIndex: 10000,\n      }}\n      editable={true}\n      draggable={true}\n      ref={polygonRef}\n      onDragEnd={onAreaChange}\n    />\n  )\n}\n","import { useRoot } from '../../../atoms/RootProvider'\n\nexport function useZoneModel() {\n  const { zone: zoneModel } = useRoot()\n  return zoneModel\n}\n","import React, { useCallback } from 'react'\n\nimport { BaseMap } from '../../../atoms/BaseMap'\nimport { FCompanyBranchFragment } from '../../../graph/generated'\nimport { MapCompanyBranchMarker } from '../../../molecules/MapCompanyBranchMarker'\nimport { Colors } from '../../../styling'\nimport { ZoneMapArea } from '../atoms/ZoneMapArea'\nimport { ZoneMapEditableArea } from '../atoms/ZoneMapEditableArea'\nimport { useZoneId } from '../hooks/useZoneId'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { TZone, useZoneList } from '../organisms/ZoneListLoader'\n\nexport const ZoneMapControl: React.FC = () => {\n  const zoneModel = useZoneModel()\n  const editZoneId = useZoneId()\n  const zoneList = useZoneList()\n  const { routeToZoneEdit } = useZoneRouteControl()\n\n  const branches = zoneModel.branches.filter(zoneModel.branchFilterPredicate)\n\n  const isActive = (companyBranchId: ID) =>\n    !zoneModel.hasBranchFilter || companyBranchId === zoneModel.branchFilterId\n\n  const renderZoneArea = (zone: TZone) => {\n    const areaProps = {\n      key: `zone${zone.id}`,\n      points: zone.geoPolygon,\n      priority: zone.priority,\n      color:\n        isActive(zone.companyBranch.id) && zone.enabled\n          ? zone.zoneColor.color\n          : Colors.greyMiddle,\n    }\n\n    if (zone.id === editZoneId) {\n      return (\n        <ZoneMapEditableArea\n          {...areaProps}\n          onChange={zoneModel.map.updateZonePoints}\n          onClear={zoneModel.map.clearZonePoints}\n        />\n      )\n    }\n\n    return (\n      <ZoneMapArea\n        {...areaProps}\n        onFocus={() => {\n          if (isActive(zone.companyBranch.id)) {\n            routeToZoneEdit(zone.id)\n          }\n        }}\n      />\n    )\n  }\n\n  const renderBranchLabel = useCallback(\n    (branch: FCompanyBranchFragment) => (\n      <MapCompanyBranchMarker\n        key={`branch${branch.id}`}\n        branch={branch}\n        isActive={isActive(branch.id)}\n      />\n    ),\n    [],\n  )\n\n  return (\n    <BaseMap model={zoneModel.map}>\n      {zoneList && zoneList.map(renderZoneArea)}\n      {branches && branches.map(renderBranchLabel)}\n    </BaseMap>\n  )\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\n\nexport const CreateZoneButton: React.FC = observer(() => {\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n  return (\n    <TouchButton\n      text={\n        zoneModel.hasBranchFilter\n          ? i18n.t`Create zone for branch`\n          : i18n.t`Select branch to create zone`\n      }\n      onClick={() => zoneModel.createZone(routeToZoneEdit)}\n      disabled={!zoneModel.hasBranchFilter}\n      color={Colors.turquoise}\n      textNextToIcon={true}\n      height={Spacing.ButtonHeight + Spacing.DefaultSizeUnit}\n      iconName=\"add_circle\"\n    />\n  )\n})\n","import React from 'react'\nimport { SortableElement } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Card } from '../../../atoms/Card'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { SizerButton } from '../../../atoms/SizerButton'\nimport { FCompanyBranchFragment, FZoneFragment } from '../../../graph/generated'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\n\ninterface IZoneListCardProps {\n  zone: FZoneFragment\n  branch: FCompanyBranchFragment\n  onEdit(): void\n}\n\nconst ZoneNameStyled = styled.div`\n  font-size: 1.125rem;\n  margin-top: 0.2rem;\n`\n\nconst ZoneDescriptionStyled = styled.div`\n  font-size: 0.875rem;\n`\nconst ZoneFlexRowStyled = styled(FlexRowSingle)`\n  height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n`\n\nexport const ZoneListCard = SortableElement<IZoneListCardProps>(\n  ({ zone, branch, onEdit }) => (\n    <Card\n      key={zone.id}\n      padding={0}\n      color={zone.enabled ? zone.zoneColor.color : Colors.greyMiddle}\n      onClick={onEdit}\n    >\n      <ZoneFlexRowStyled>\n        <FlexColumn fixedWidth={true} padding=\"0 0.5rem 0 0\">\n          <SizerButton>\n            <TouchButton iconName=\"mode_edit\" />\n          </SizerButton>\n        </FlexColumn>\n        <FlexColumn widthGrowIndex={1}>\n          <ZoneNameStyled>\n            {zone.name}\n            {` [P${zone.priority}]`}\n          </ZoneNameStyled>\n          <ZoneDescriptionStyled>{branch.name}</ZoneDescriptionStyled>\n        </FlexColumn>\n        <FlexColumn padding=\"0\">\n          <DragHandle />\n        </FlexColumn>\n      </ZoneFlexRowStyled>\n    </Card>\n  ),\n)\n","import * as R from 'ramda'\nimport React, { Fragment } from 'react'\nimport { SortableContainer, SortEndHandler } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { FCompanyBranchFragment, FZoneFragment } from '../../../graph/generated'\nimport { TZoneModel } from '../../../segments/zones/models/ZoneModel'\nimport { ZoneListCard } from '../atoms/ZoneListCard'\n\ntype TBranch = FCompanyBranchFragment\ntype TZone = FZoneFragment\n\ninterface IZoneListProps {\n  branches: TBranch[]\n  zones: TZone[]\n  zoneModel: TZoneModel\n  onZoneEdit(zoneID: ID): void\n}\n\nconst ZoneListContainerStyled = SortableContainer(styled.div`\n  margin-top: 0.5rem;\n  cursor: arrow;\n`)\n\nconst sortZones = R.sortWith<TZone>([\n  R.ascend(R.path(['companyBranch', 'name'])),\n  R.descend(R.prop('priority')),\n])\n\nconst groupByBranch = R.groupBy((zone: TZone) => zone.companyBranch.id)\n\nexport const ZoneList: React.FC<IZoneListProps> = ({\n  branches,\n  zones,\n  zoneModel,\n  onZoneEdit,\n}) => {\n  const renderZone = (zone: TZone, idx: number) => (\n    <ZoneListCard\n      key={zone.id}\n      zone={zone}\n      branch={branches.find(R.propEq('id', zone.companyBranch.id))!}\n      index={idx}\n      collection={zone.companyBranch.id}\n      onEdit={() => onZoneEdit(zone.id)}\n    />\n  )\n  const renderBranch = (branch: TBranch, branchZones: TZone[]) => (\n    <Fragment key={branch.id}>\n      <CardListTitle>{branch.name}</CardListTitle>\n      {branchZones.map(renderZone)}\n    </Fragment>\n  )\n\n  let output\n  let onSortEnd: SortEndHandler\n\n  if (branches.length === 1) {\n    const sorted = sortZones(zones)\n    output = sorted.map(renderZone)\n    onSortEnd = ({ oldIndex, newIndex }) => {\n      const zone = sorted[oldIndex]\n      zoneModel.changeZonePriority(zone, oldIndex, newIndex)\n    }\n  } else {\n    const grouped = R.mapObjIndexed(sortZones, groupByBranch(zones))\n    output = branches.map(branch => {\n      const branchZones = grouped[branch.id]\n      return branchZones ? renderBranch(branch, branchZones) : null\n    })\n    onSortEnd = ({ oldIndex, newIndex, collection }) => {\n      const group = grouped[collection]\n      const zone = group[oldIndex]\n      zoneModel.changeZonePriority(zone, oldIndex, newIndex)\n    }\n  }\n\n  return (\n    <ZoneListContainerStyled\n      useDragHandle={true}\n      lockAxis=\"y\"\n      onSortEnd={onSortEnd}\n    >\n      {output}\n    </ZoneListContainerStyled>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { BulletList } from 'react-content-loader'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { ZoneList } from '../molecules/ZoneList'\nimport { useZoneList } from './ZoneListLoader'\n\nexport const ZoneListControl: React.FC = () => {\n  const zoneList = useZoneList()\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n  if (zoneList === null) {\n    return <BulletList primaryOpacity={0.2} secondaryOpacity={0.2} />\n  }\n  if (zoneModel.brand === null) {\n    return (\n      <CardListTitle>\n        <Trans>Select brand to see its zones</Trans>\n      </CardListTitle>\n    )\n  }\n  return (\n    <ZoneList\n      zoneModel={zoneModel}\n      zones={zoneList.filter(zoneModel.zoneFilterPredicate)}\n      branches={zoneModel.root.user.filterBranches(\n        zoneModel.branchFilterPredicate,\n      )}\n      onZoneEdit={routeToZoneEdit}\n    />\n  )\n}\n","import React from 'react'\n\nimport { FCompanyBranchFragment } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport { CompanyBranchDropdown } from '../../../molecules/CompanyBranchDropdown'\n\ntype TBranch = FCompanyBranchFragment\n\ninterface IProps {\n  branches: TBranch[]\n  selectedBranch: Maybe<TBranch>\n  onSelection(branch: Maybe<TBranch>): void\n  autoFocus: boolean\n}\n\nexport const ZoneFilterBranch: React.FC<IProps> = ({\n  branches,\n  selectedBranch,\n  onSelection,\n  autoFocus,\n}) => (\n  <CompanyBranchDropdown\n    placeholder={i18n.t`Select branch`}\n    branches={branches}\n    selectedBranch={selectedBranch}\n    onSingleSelection={onSelection}\n    formatOptionLabel={RM.prop('name')}\n    isClearable={true}\n    autoFocus={autoFocus}\n  />\n)\n","import React from 'react'\n\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { FCompanyBranchBrand } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\n\ntype TBrand = FCompanyBranchBrand\n\ninterface IProps {\n  brands: ReadonlyArray<TBrand>\n  selectedBrand: Maybe<TBrand>\n  onSelection(brand: Maybe<TBrand>): void\n}\n\nexport const ZoneFilterBrand: React.FC<IProps> = ({\n  brands,\n  selectedBrand,\n  onSelection,\n}) => (\n  <SelectControl<TBrand>\n    placeholder={i18n.t`Select brand`}\n    options={brands as TBrand[]}\n    value={selectedBrand}\n    formatOptionLabel={RM.prop('name')}\n    getOptionValue={RM.prop('id')}\n    getOptionLabel={RM.prop('name')}\n    isClearable={true}\n    isSearchable={true}\n    onChange={value => onSelection(value as Maybe<TBrand>)}\n    autoFocus={true}\n  />\n)\n","import { autorun } from 'mobx'\nimport { observer, useDisposable } from 'mobx-react-lite'\nimport React, { useCallback } from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { FCompanyBranchBrand } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { ZoneFilterBranch } from '../molecules/ZoneFIlterBranch'\nimport { ZoneFilterBrand } from '../molecules/ZoneFilterBrand'\n\nexport const ZoneFilter: React.FC = observer(() => {\n  const { user, zone } = useRoot()\n  const branches = user.branches\n\n  const getBrandBranches = useCallback(\n    (brand: Maybe<FCompanyBranchBrand>) =>\n      brand === null\n        ? []\n        : user.branches.filter(RM.pathEq(['brand', 'id'], brand.id)),\n    [],\n  )\n\n  useDisposable(() =>\n    autorun(() => {\n      if (branches.length === 1) {\n        zone.setBranchFilter(RM.head(branches)!)\n      }\n    }),\n  )\n\n  // no filter is shown for less than 1 branch available\n  if (branches.length <= 1) {\n    return null\n  }\n\n  const singleBrand = user.brands.length === 1 ? RM.head(user.brands)! : null\n  if (singleBrand) {\n    zone.setBrandFilter(singleBrand, getBrandBranches(zone.brand))\n  }\n\n  return (\n    <>\n      {!singleBrand && (\n        <ZoneFilterBrand\n          brands={user.brands}\n          selectedBrand={zone.brand}\n          onSelection={brand => {\n            if (brand === null) {\n              zone.clearBrandFilter()\n            } else {\n              zone.setBrandFilter(brand, getBrandBranches(brand))\n            }\n          }}\n        />\n      )}\n      {!singleBrand && <VerticalGap />}\n      <ZoneFilterBranch\n        branches={getBrandBranches(zone.brand)}\n        selectedBranch={zone.branch}\n        autoFocus={Boolean(singleBrand)}\n        onSelection={branch => {\n          if (!branch) {\n            zone.clearBranchFilter()\n          } else {\n            zone.setBranchFilter(branch)\n          }\n        }}\n      />\n    </>\n  )\n})\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { ScrollArea } from '../../../atoms/ScrollArea'\nimport { CreateZoneButton } from '../molecules/CreateZoneButton'\nimport { ZoneListControl } from '../organisms/ZoneListControl'\nimport { ZoneFilter } from './ZoneFilter'\n\nconst ZoneMenuContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst FixedHeaderContainer = styled.div`\n  flex: 0 0 auto;\n`\nconst ScrollAreaContainer = styled.div`\n  flex: 1 1 0;\n  min-height: 0;\n`\nexport const ZoneMenuPanel: React.FC = () => (\n  <ZoneMenuContainer>\n    <FixedHeaderContainer>\n      <Card>\n        <ZoneFilter />\n      </Card>\n      <CanMutate mutationName=\"createZone\">\n        <CreateZoneButton />\n      </CanMutate>\n    </FixedHeaderContainer>\n\n    <ScrollAreaContainer>\n      <ScrollArea>\n        <ZoneListControl />\n      </ScrollArea>\n    </ScrollAreaContainer>\n  </ZoneMenuContainer>\n)\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport { i18n } from '../../../i18n'\nimport { PageLayout } from '../../../molecules/PageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { ZoneFormPanel } from '../organisms/ZoneFormPanel'\nimport { ZoneListLoader } from '../organisms/ZoneListLoader'\nimport { ZoneMapControl } from '../organisms/ZoneMapControl'\nimport { ZoneMenuPanel } from '../organisms/ZoneMenuPanel'\n\ninterface IProps extends RouteComponentProps<{ zoneId?: ID }> {}\n\nexport const ZonePageLayout: React.FC<IProps> = ({ match }) => {\n  const isEditing = Boolean(match.params.zoneId)\n  return (\n    <ZoneListLoader>\n      <PageLayout\n        pageTitle={i18n.t`Delivery zones`}\n        useBackButton={true}\n        backRoute=\"/settings\"\n      />\n      <PageLayoutFullHeightItem\n        widthInColumns={6}\n        column={10}\n        withScrollArea={isEditing}\n      >\n        {isEditing ? <ZoneFormPanel /> : <ZoneMenuPanel />}\n      </PageLayoutFullHeightItem>\n      <PageLayoutFullHeightItem widthInColumns={10}>\n        <ZoneMapControl />\n      </PageLayoutFullHeightItem>\n    </ZoneListLoader>\n  )\n}\n","import React from 'react'\nimport { Route, RouteComponentProps, Switch } from 'react-router-dom'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { ZonePageLayout } from '../../../segments/zones/pages/ZonePageLayout'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\n\ninterface IZoneMenuRoutesProps extends RouteComponentProps<{}> {}\n\nexport const ZoneMenuRoutes: React.FC<IZoneMenuRoutesProps> = () => {\n  const { getRouteToZone } = useZoneRouteControl()\n  return (\n    <Switch>\n      <Route path={getRouteToZone(':zoneId?')} component={ZonePageLayout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  )\n}\n\nexport default ZoneMenuRoutes\n"],"sourceRoot":""}