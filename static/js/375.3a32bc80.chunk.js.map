{"version":3,"sources":["atoms/IconLine.tsx","helpers/form.ts","hooks/useAccessGuard.ts","atoms/SelectControl.tsx","atoms/FormInputStyled.tsx","atoms/NoAccess.tsx","atoms/Headline.tsx","atoms/SelectControlFlat.tsx","hooks/useUserModel.ts","atoms/FormGrid.tsx","../node_modules/@speedlo/assets/flags sync /^/.*/.svg$","../node_modules/@speedlo/assets/logos sync /^/logo/-.*/.svg$","hooks/useAutorunWhenSingleBranch.ts","hooks/useQueryParams.ts","atoms/CursorContainer.tsx","atoms/CompanyBranch.tsx","molecules/CompanyBranchDropdown.tsx","segments/dashboard/atoms/DashboardButton.tsx","molecules/PageLayoutItem.tsx","segments/menu/menu.routes.ts","molecules/CompanyBranchFlatSelect.tsx","organisms/CompanyBranchPicker.tsx","../node_modules/@material-ui/icons/esm/StoreMallDirectory.js","segments/settings/organisms/SettingsCompanyBranchPicker.tsx","atoms/FormInputTextBox.tsx","segments/dashboard/molecules/DashboardPage.tsx","components/forms/FormInputCheckbox.tsx","atoms/StyledCheckbox.tsx","../node_modules/@material-ui/icons/esm/Inbox.js","../node_modules/@material-ui/icons/esm/Person.js","segments/branchpreferences/organism/SaveInvoicePreferencesButton.tsx","segments/branchpreferences/organism/InvoicePreferencesForm.tsx","segments/branchpreferences/organism/StoppageForm.tsx","segments/branchpreferences/pages/BranchPreferencesPage.tsx","segments/branchpreferences/routes/BranchPreferencesRoutes.tsx","../node_modules/@material-ui/icons/esm/AvTimer.js","../node_modules/@material-ui/icons/esm/EditLocation.js","../node_modules/@material-ui/icons/esm/InsertDriveFile.js","../node_modules/@material-ui/icons/esm/Folder.js","segments/dashboard/pages/SettingsDashboardPage.tsx","segments/settings/routes/SettingsRouting.tsx"],"names":["StyledIconLine","styled","div","labelMargin","labelWidth","labelWidthUnits","StyledGridDescription","mediaMobile","replace","StyledGridContent","IconLine","icon","label","Spacing","DefaultSizeUnit","labelSmallCaps","children","iconComponent","logError","Error","isInFormGrid","useFormGridCheck","descriptionPart","color","Colors","greyDark","className","cn","smallCaps","isFormValid","formState","errors","Object","keys","length","fieldIsRequiredMsg","fieldDescription","fieldIsPositiveNumberMsg","validateAsNumberField","yup","number","default","transform","_","origValue","parseNumber","test","fieldIsNumberMsg","value","isNaN","ARRAY_EMPTY","useAccessGuard","queries","mutations","user","useRoot","every","canQuery","canMutate","useCanQuery","useCanMutate","getControlStyles","width","minWidth","invalid","border","red","backgroundColor","errorBackground","greyMiddle","margin","MarginAroundFormComponents","undefined","composeSelectControlStyles","outerStyles","control","base","state","controlStyles","selectProps","menu","menuStyles","zIndex","black","valueContainer","maxHeight","valueContainerStyles","overflowY","clearIndicator","cursor","SelectControl","hideOnSingleOption","props","options","components","ClearIndicator","styles","getStyles","innerProps","ref","restInnerProps","style","padding","FormInputStyled","input","attrs","inputFullWidth","fullWidth","NoAccess","Headline","h2","light","greyLight","greyDarkest","size","StyledSelectControlFlat","textColor","SelectControlFlat","items","formatItem","RM","prop","isMulti","isClearable","isInvalid","disabled","selectedItem","selectedItems","onSingleSelection","onMultiSelection","hasSingleItem","isItemSelected","item","Array","isArray","contains","equals","updateSelection","without","concat","interactive","active","onClick","id","map","idx","formatted","key","useUserModel","StyledFormGrid","formGridCounter","formGridContext","React","createContext","FormGrid","Provider","useContext","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","resolve","module","exports","useAutorunWhenSingleBranch","onSingleBranch","useAutorun","isReady","hasSingleBranch","branches","useQueryParams","search","window","location","searchParams","useMemo","URLSearchParams","getQueryParam","param","get","createQueryString","keyValueObj","entries","join","CursorContainer","CompanyBranch","branch","short","showBrand","name","substr","brand","CompanyBranchDropdown","selectedBranch","selectedBranches","placeholder","i18n","ButtonHeight","getOptionValue","formatOptionLabel","filterOption","rawInput","data","toLocaleLowerCase","includes","closeMenuOnSelect","onChange","selection","head","DashboardButton","row","column","route","canAccessWithSingleBranch","buttonProps","gridColumnSpan","gridColumn","gridRow","EMPTY_ARRAY","PageLayoutItem","gridItemProps","userModel","normalizeAccess","layoutItem","to","height","DashboardButtonHeight","access","ROUTE_MENU","ROUTE_SETTINGS_MENU","ROUTE_MENU_RECIPE","ROUTE_MENU_CATEGORY","ROUTE_MENU_STOCK","CompanyBranchFlatSelect","title","CompanyBranchPicker","observer","breakpoint","hideWhenSingleBranch","onSelectionChange","onSelectionClear","getDropdownProps","isSelected","find","filter","selected","createSvgIcon","createElement","d","SettingsCompanyBranchPicker","settings","selectBranch","branchId","useEffect","useObserver","StoreMallDirectory","FormInputTextBox","forwardRef","inputRef","field","isRequired","validatioName","validationMessage","validate","isEmpty","fieldApi","ev","target","validity","valid","setTouched","setValue","Boolean","error","DashboardPage","isForIconDashboard","showSoundControl","FormCheckbox","fieldName","inputProps","useXField","useXFormState","type","checked","isSubmitting","htmlFor","StyledCheckbox","span","white","Radiuses","TextComponent","Fragment","fill","SaveInvoicePreferencesButton","TouchButton","text","green","SaveButtonContainer","InvoicePreferencesForm","StoppageForm","BranchPreferencesPage","FullPageLayout","pageTitle","Card","BranchPreferencesRoutes","SecureRoute","exact","path","ROUTE_SETTINGS_PREFS","component","NotFoundPage","SettingsPage","PageTitle","Route","ROUTE_SETTINGS","AvTimer","ROUTE_SETTINGS_HOURS","EditLocation","violet","ROUTE_SETTINGS_ZONES","Person","ROUTE_SETTINGS_USER","InsertDriveFile","turquoise","Folder","Inbox","BusinessHoursRouting","lazy","ZoneMenuRouting","MenuRouting","UserMenuPage","SettingsRouting"],"mappings":"+qCAqBA,IAAMA,EAAiBC,IAAOC,IAAV,IAIN,qBAAGC,aACA,gBAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,gBAAf,gBACRD,GADQ,OACKC,KAoBhBC,EAAwBL,IAAOC,IAAV,IAEf,qBAAGC,aAUXI,YAZuB,IAef,qBAAGJ,YAA8BK,QAAQ,OAAQ,aAIvDC,EAAoBR,IAAOC,IAAV,KAKVQ,EAA6B,SAAC,GAQpC,IAPLC,EAOI,EAPJA,KACAC,EAMI,EANJA,MAMI,IALJR,kBAKI,MALS,EAKT,MAJJC,uBAII,MAJcQ,IAAQC,gBAItB,MAHJX,mBAGI,MAHU,uBAGV,MAFJY,sBAEI,SADJC,EACI,EADJA,SAEIC,EAAgBN,EACA,kBAATA,IACTO,YAAS,sDAAD,OACgDP,EADhD,qDAGRM,EAAgBE,KAElB,IAAMC,EAAeC,cAEfC,EACJ,oCACE,kBAAC,IAAD,CAAMX,KAAMM,EAAeM,MAAOC,IAAOC,WACxCb,EACC,yBAAKc,UAAWC,YAAG,QAAS,CAAEC,UAAWb,KACtCH,GAED,MAIR,OAAOQ,EACL,oCACE,kBAACd,EAAD,CAAuBH,YAAaA,GACjCmB,GAEH,kBAACb,EAAD,KAAoBO,IAGtB,kBAAChB,EAAD,CACEI,WAAYA,EACZC,gBAAiBA,EACjBF,YAAaA,GAEb,yBAAKuB,UAAU,eAAeJ,GAC9B,yBAAKI,UAAU,YAAYV,M,kCClHjC,+LAMO,SAASa,EAAYC,GAC1B,OAAQA,EAAUC,QAAmD,IAAzCC,OAAOC,KAAKH,EAAUC,QAAQG,OAGrD,SAASC,EAAmBC,GACjC,OAAO,IAAK,EAAD,4CAAWA,qBAOjB,SAASC,EAAyBD,GACvC,OAAO,IAAK,EAAD,sDAAWA,qBAGjB,IAAME,EAAwB,SAACF,GAAD,OACnCG,IACGC,SACAC,QAAQ,GACRC,UAAU,SAACC,EAAGC,GAAJ,OAAkBC,YAAYD,KACxCE,KACC,eAdC,SAA0BV,GAC/B,OAAO,IAAK,EAAD,6CAAWA,qBAclBW,CAAiBX,GACjB,SAAAY,GAAK,OAAKC,MAAMD,MAGTE,EAAwB,I,kCCjCrC,4GAEO,SAASC,EACdC,EACAC,GACU,IACFC,EAASC,cAATD,KACR,OAAOF,EAAQI,MAAMF,EAAKG,WAAaJ,EAAUG,MAAMF,EAAKI,WAGvD,SAASC,IAAmC,IAAD,uBAAnBP,EAAmB,yBAAnBA,EAAmB,gBAChD,OAAOD,EAAeC,EAAS,IAG1B,SAASQ,IAAsC,IAAD,uBAArBP,EAAqB,yBAArBA,EAAqB,gBACnD,OAAOF,EAAe,GAAIE,K,orBCE5B,SAASQ,EAAT,GAIkC,IAHhCC,EAG+B,EAH/BA,MACAC,EAE+B,EAF/BA,SAYA,OAAO,EAAP,IARc,IAFiB,EAD/BC,QAIM,CACEC,OAAO,aAAD,OAAezC,IAAO0C,KAC5BC,gBAAiB3C,IAAO4C,iBAE1B,CACEH,OAAO,aAAD,OAAezC,IAAO6C,aAEpC,CAEEC,OAAQzD,IAAQ0D,2BAChBT,WAAiBU,IAAVV,EAAA,UAAyBA,EAAzB,OAAsC,OAC7CC,cAAuBS,IAAbT,EAAA,UAA4BA,EAA5B,OAA4C,SAInD,IAAMU,EAA6B,eAACC,EAAD,uDAA6B,GAA7B,YACrCA,EADqC,CAExCC,QAAS,SAACC,EAAMC,GACd,IAAMC,EAAa,KAAQF,EAAR,GAAiBf,EAAiBgB,EAAME,cAC3D,OAAOL,EAAYC,QACfD,EAAYC,QAAQG,EAAeD,GACnCC,GAENE,KAAM,SAACJ,EAAMC,GAAW,IAELf,EACbe,EADFE,YAAejB,MAEXmB,EAAU,KACXL,EADW,CAEdM,OAAQ,GACR3D,MAAOC,IAAO2D,MACdrB,WAAiBU,IAAVV,EAAA,UAAyBA,EAAzB,OAAsC,SAE/C,OAAOY,EAAYM,KAAON,EAAYM,KAAKC,EAAYJ,GAASI,GAElEG,eAAgB,SAACR,EAAMC,GAAW,IAEfQ,EACbR,EADFE,YAAeM,UAEXC,EAAoB,KACrBV,EADqB,CAExBS,eAAyBb,IAAda,EAAA,UAA6BA,EAA7B,OAA8C,OACzDE,eAAyBf,IAAda,EAA0B,SAAW,WAElD,OAAOX,EAAYU,eACfV,EAAYU,eAAeE,EAAsBT,GACjDS,GAENE,eAAgB,SAAAZ,GAAI,YACfA,EADe,CAElBa,OAAQ,gBAIL,SAASC,EAAT,GAG8B,IAAD,IAFlCC,0BAEkC,SAD/BC,EAC+B,sCAClC,OAAID,GAAsBC,EAAMC,SAAWD,EAAMC,QAAQ3D,QAAU,EAC1D,KAIP,kBAAC,IAAD,iBACM0D,EADN,CAEEE,WAAU,GACRC,kBACGH,EAAME,YAEXE,OAAQvB,EAA2BmB,EAAMI,WAK/C,SAASD,EAAeH,GAAQ,IAE5BK,EAEEL,EAFFK,UAF2B,EAIzBL,EADFM,WAAcC,EAHa,EAGbA,IAAQC,EAHK,uBAK7B,OACE,yCACMA,EADN,CAEED,IAAKA,EACLE,MAAOJ,EAAU,iBAAkBL,KAEnC,yBAAKS,MAAO,CAAEC,QAAS,YACrB,kBAAC,QAAD,gB,gICpGKC,EAAkBtG,IAAOuG,MAAMC,MAC1C,oBAAGzC,eAAH,aAAoB0C,sBAApB,eAAkD,CAChDhF,UAAWC,YAAG,CAAEqC,UAAS2C,UAAWD,OAFZ,sEAAGzG,CAAH,6FAKhBY,IAAQ0D,2BAEF/C,IAAO0C,IACD1C,IAAO4C,kB,kCClB/B,yCAQawC,EAA6B,SAAC,GAAD,EAAG5F,SAAH,OAKpC,O,+OCHN,IAOa6F,EAAW5G,IAAO6G,GAAV,IAHJ,SAAC,GAAD,QAAGC,MAAH,qBACPvF,IAAOwF,UAAYxF,IAAOyF,aALlB,SAAC,GAAD,QAAG3C,OAAH,kBAAY,oBAAZ,GAEE,SAAC,GAAD,MAAuC,YAAvC,EAAG4C,MAAiD,U,ylBCUxE,IAAMC,EAA0BlH,IAAOC,IAAV,IACzB,SAAC0F,GAAD,UAEO,gBAAGwB,EAAH,EAAGA,UAAH,OAAoBA,GAAwB,WAc9B5F,IAAO6C,YAanBgD,EAAoB,SAC/BzB,GACI,IAEF0B,EAWE1B,EAXF0B,MAFC,EAaC1B,EAVF2B,kBAHC,MAGYC,IAAGC,KAAK,eAHpB,IAaC7B,EATF8B,eAJC,WAaC9B,EARF+B,mBALC,WAaC/B,EAPFgC,iBANC,WAaChC,EANFiC,gBAPC,SAQDC,EAKElC,EALFkC,aACAC,EAIEnC,EAJFmC,cACAC,EAGEpC,EAHFoC,kBACAC,EAEErC,EAFFqC,iBACAb,EACExB,EADFwB,UAGIc,EAAiC,IAAjBZ,EAAMpF,OAStBiG,EAAiB,SAACC,GACtB,OAAqB,IAAjBd,EAAMpF,SAINwF,GAAWW,MAAMC,QAAQP,GACpBP,IAAGe,SAASH,EAAML,GAEpBP,IAAGgB,OAAOV,EAAcM,KAG3BK,EAAkB,SAACL,GACnBF,GAAiBL,IAGR,OAATO,EACEV,GAAWO,EACbA,EAAiB,IACRD,GACTA,EAAkB,MAEXN,GAAWO,EAChBE,EAAeC,GACjBH,EACEI,MAAMC,QAAQP,GACVP,IAAGkB,QAAQ,CAACN,GAAOL,GACnB,CAACK,IAGPH,EACEI,MAAMC,QAAQP,GAAiBP,IAAGmB,OAAOZ,EAAe,CAACK,IAAS,IAG7DJ,GACTA,EAAkBI,KAGtB,OACE,kBAACjB,EAAD,CACEzF,UAAWC,YAAG,CACZqC,QAAS4D,EACTgB,aAAcV,GAAiBL,IAEjCT,UAAWA,GAEVO,GACC,yBACEjG,UAAWC,YAAG,CAAEkH,SArDlBnB,EACKW,MAAMC,QAAQP,IAAkBA,EAAc7F,OAAS,EAExC,OAAjB4F,QAA0CtD,IAAjBsD,KAmD1BgB,QAAS,WACPL,EAAgB,QAGlB,kBAAC,QAAD,CAAOM,GAAG,iCAGbzB,EAAM0B,IAAI,SAACZ,EAAMa,GAEhB,IAAMC,EAAY3B,EAAWa,GAC7B,OACE,yBACEe,IAAKF,EACLvH,UAAWC,YAAG,CAAEkH,OAAQV,EAAeC,KACvCU,QAAS,WACPL,EAAgBL,KAGjBc,Q,kCChJb,4CAEO,SAASE,IAEd,OADiB7F,cAATD,O,mSCEV,IAAM+F,EAAiBpJ,IAAOC,IAAV,iEAAGD,CAAH,0IAMhBM,YANgB,MAchB+I,EAAkB,EAChBC,EAAkBC,IAAMC,cAAcH,GAE/BI,EAA6B,SAAA9D,GACxC,OACE,kBAACyD,EAAD,KACE,kBAACE,EAAgBI,SAAjB,CAA0B3G,QAASsG,GAChC1D,EAAM5E,YAMR,SAASK,IACd,OAAOmI,IAAMI,WAAWL,GAAmB,I,qBCjC7C,IAAIP,EAAM,CACT,WAAY,KACZ,WAAY,KACZ,WAAY,KACZ,WAAY,KACZ,WAAY,MAIb,SAASa,EAAeC,GACvB,IAAIf,EAAKgB,EAAsBD,GAC/B,OAAOE,EAAoBjB,GAE5B,SAASgB,EAAsBD,GAC9B,IAAIE,EAAoBC,EAAEjB,EAAKc,GAAM,CACpC,IAAII,EAAI,IAAI/I,MAAM,uBAAyB2I,EAAM,KAEjD,MADAI,EAAEC,KAAO,mBACHD,EAEP,OAAOlB,EAAIc,GAEZD,EAAe5H,KAAO,WACrB,OAAOD,OAAOC,KAAK+G,IAEpBa,EAAeO,QAAUL,EACzBM,EAAOC,QAAUT,EACjBA,EAAed,GAAK,M,qBC1BpB,IAAIC,EAAM,CACT,oBAAqB,KACrB,mBAAoB,KACpB,wBAAyB,KACzB,kBAAmB,MAIpB,SAASa,EAAeC,GACvB,IAAIf,EAAKgB,EAAsBD,GAC/B,OAAOE,EAAoBjB,GAE5B,SAASgB,EAAsBD,GAC9B,IAAIE,EAAoBC,EAAEjB,EAAKc,GAAM,CACpC,IAAII,EAAI,IAAI/I,MAAM,uBAAyB2I,EAAM,KAEjD,MADAI,EAAEC,KAAO,mBACHD,EAEP,OAAOlB,EAAIc,GAEZD,EAAe5H,KAAO,WACrB,OAAOD,OAAOC,KAAK+G,IAEpBa,EAAeO,QAAUL,EACzBM,EAAOC,QAAUT,EACjBA,EAAed,GAAK,M,kCCzBpB,oDAKO,SAASwB,EACdC,GACC,IACOlH,EAASC,cAATD,KACRmH,YAAW,WACLnH,EAAKoH,SAAWpH,EAAKqH,iBACvBH,EAAelH,EAAKsH,SAAS,Q,8FCT5B,SAASC,IAAkB,IACxBC,EAAWC,OAAOC,SAAlBF,OACFG,EAAezB,IAAM0B,QAAQ,kBAAM,IAAIC,gBAAgBL,IAAS,CACpEA,IAUF,MAAO,CAAEM,cAPa,SAACC,GAAD,OAAmBJ,EAAaK,IAAID,IAOlCE,kBANE,SAACC,GACzB,OAAOxJ,OAAOyJ,QAAQD,GACnBxC,IAAI,mCAAEG,EAAF,KAAOnG,EAAP,qBAAqBmG,EAArB,YAA4BnG,KAChC0I,KAAK,S,4JCRL,IAAMC,E,MAAkB1L,EAAOC,IAAV,IAChB,oBAAGuF,OAAH,kBAAY,UAAZ,ICOCmG,EAA+C,SAAC,GAAD,IAC1DC,EAD0D,EAC1DA,OACA/C,EAF0D,EAE1DA,QAF0D,IAG1DgD,aAH0D,aAI1DC,iBAJ0D,gBAM1D,kBAACJ,EAAD,CAAiBlG,OAAO,UAAUqD,QAASA,GACxCgD,EACCD,EAAOG,KAAKC,OAAO,EAAG,GAEtB,oCACE,8BAAOJ,EAAOG,MACbD,GAAa,0CAAYF,EAAOK,MAAMF,KAAzB,S,4ECJf,IAAMG,EAA0C,SAAC,GAAD,IACrDvB,EADqD,EACrDA,SACAwB,EAFqD,EAErDA,eACApE,EAHqD,EAGrDA,kBACAqE,EAJqD,EAIrDA,iBACApE,EALqD,EAKrDA,iBACGrC,EANkD,8GAQrD,kBAACF,EAAA,EAAD,eACE1C,MAAO4C,EAAM8B,QAAU2E,EAAmBD,EAC1CE,YACE1G,EAAM8B,QAAU6E,EAAA,EAAK,EAAD,sBAAyBA,EAAA,EAAK,EAAD,mBAEnDlH,UAAWxE,IAAQ2L,aACnB3G,QAAS+E,EACT6B,eAAgBjF,IAAGC,KAAK,MACxBiF,kBAAmB,SAAAb,GAAM,OAAI,kBAAC,EAAD,CAAeA,OAAQA,KACpDc,aAAc,SAACd,EAAQe,GAAT,OACZf,EAAOgB,KAAKb,KACTc,oBACAC,SAASH,EAASE,sBAEvBE,mBAAoBpH,EAAM8B,QAC1BuF,SAAU,SAAAC,GACJtH,EAAM8B,SAAWO,GACnBA,EACEI,MAAMC,QAAQ4E,GAAaA,EAAahK,MAGvC0C,EAAM8B,SAAWM,IAChBK,MAAMC,QAAQ4E,GAChBlF,EAAkBR,IAAG2F,KAAKD,IAAc,MAExClF,EAAmBkF,GAAwC,SAI7DtH,M,iHCxCKwH,EAAoC,SAAC,GAQ3C,IAPLC,EAOI,EAPJA,IACAC,EAMI,EANJA,OACAC,EAKI,EALJA,MACA9J,EAII,EAJJA,SACAC,EAGI,EAHJA,UACA8J,EAEI,EAFJA,0BACGC,EACC,2FACJ,OACE,kBAAC,IAAD,CACEC,eAAgB,EAChBC,WAA2B,GAAdL,EAAS,GAAS,EAC/BM,QAASP,EACTE,MAAOA,EACP9J,SAAUA,EACVC,UAAWA,EACX8J,0BAA2BA,GAE3B,kBAAC,IAAgBC,M,8JCdjBI,EAAc,GAEPC,EAAiD,SAAC,GAOxD,IANLP,EAMI,EANJA,MACAvM,EAKI,EALJA,SAKI,IAJJyC,gBAII,MAJOoK,EAIP,MAHJnK,iBAGI,MAHQmK,EAGR,MAFJL,iCAEI,SADDO,EACC,uFACEC,EAAY5E,cAEZhG,EAAU6K,EAAgBxK,GAC1BJ,EAAY4K,EAAgBvK,GAGlC,IAFkBP,YAAeC,EAASC,GAGxC,OACE,kBAAC,IAAD,4BACED,EAAQlB,OAAR,kBAA4BkB,EAAQsI,KAAK,KAAzC,KAAmD,IADrD,OAGErI,EAAUnB,OAAV,oBAAgCmB,EAAUqI,KAAK,MAAS,KAK9D,IAAK8B,GAA6BQ,EAAUrD,gBAC1C,OAAO,kBAAC,IAAD,2CAGT,IAAMuD,EAAaX,EACjB,kBAAC,IAAD,CAAMY,GAAIZ,GAAQvM,GAElB,oCAAGA,GAGL,OACE,kBAAC,IAAuB+M,EACtB,kBAAC,IAAD,CAAOK,OAAQvN,IAAQwN,uBAAwBH,KAKrD,SAASD,EAAgBK,GACvB,OAAOjG,MAAMC,QAAQgG,GAAUA,EAAS,CAACA,K,kCClE3C,oIAEaC,EAFb,OAE0BC,EACbC,EAAiB,UAAMF,EAAN,WACjBG,EAAmB,UAAMH,EAAN,aACnBI,EAAgB,UAAMJ,EAAN,W,0GCEhBK,EAA8D,SAAC,GAAD,IACzEhE,EADyE,EACzEA,SACAwB,EAFyE,EAEzEA,eACAC,EAHyE,EAGzEA,iBAHyE,IAIzEjF,iBAJyE,MAI7D5F,IAAO2D,MAJsD,EAKtES,EALsE,mFAOzE,kBAACyB,EAAA,EAAD,eACEC,MAAOsD,EACP9C,aAAcsE,EACdrE,cAAesE,EACfjF,UAAWA,EACXG,WAAY,SAAAa,GAAI,OAAI,0BAAMyG,MAAOzG,EAAK8D,MAAMF,MAAO5D,EAAK4D,QACpDpG,K,QCpBR,gCAsCO,IAAMkJ,EAAsBC,YACjC,YAWO,IAAD,IAVJC,kBAUI,MAVS,EAUT,EATJpE,EASI,EATJA,SASI,IARJyB,wBAQI,MARe,GAQf,MAPJ3E,eAOI,aANJC,mBAMI,aALJsH,4BAKI,SAJJ7H,EAII,EAJJA,UACA8H,EAGI,EAHJA,kBACAC,EAEI,EAFJA,iBAEI,IADJC,wBACI,MADe,iBAAO,IACtB,EACI9L,EAASC,cAATD,KAEF+L,EAAa,SAAAxD,GAAM,OAAIQ,EAAiBU,SAASlB,EAAO9C,KAExDnD,EAAkC,CACtCwB,YACAO,cACAD,UACAkD,SAAUA,GAAYtH,EAAKsH,SAC3BwB,eAAgB9I,EAAKsH,SAAS0E,KAAKD,IAAe,KAClDhD,iBAAkB/I,EAAKsH,SAAS2E,OAAOF,GACvCrH,kBAPsC,SAOpBwH,GACC,OAAbA,GAAqBL,EACvBA,IACsB,OAAbK,GAAqBN,GAC9BA,EAAkB,CAACM,EAASzG,IAAK,CAACyG,KAGtCvH,iBAdsC,SAcrBuH,GACS,IAApBA,EAAStN,QAAgBiN,EAC3BA,IACSK,EAAStN,QAAUgN,GAC5BA,EAAkBM,EAASxG,IAAIxB,IAAGC,KAAK,OAAQ+H,KAKrD,OAAIlM,EAAKqH,iBAAmBsE,EACnB,KAGL3L,EAAKsH,SAAS1I,OAAS8M,EAClB,kBAAC,EAA4BpJ,GAG/B,kBAACuG,EAAA,EAAD,iBAA2BvG,EAAWwJ,S,sECpFlC,SAAAK,EAAA,GAAc,IAAMC,cAAc,OAAQ,CACvDC,EAAG,+EACD,sB,wFCWG,IAAMC,EAAgD,SAAC,GAGvD,IAAD,IAFJlI,eAEI,SADJ5D,EACI,EADJA,MACI,EACuBP,cAAnBsM,EADJ,EACIA,SAAUvM,EADd,EACcA,KAElBiH,YAA2B,SAAAsB,GACzBgE,EAASC,aAAajE,EAAO9C,MAJ3B,IAQEgH,GAAW3E,EADSP,cAAlBO,eACuB,YAS/B,OANA5B,IAAMwG,UAAU,WACVD,GACFF,EAASC,aAAaC,IAEvB,CAACA,EAAUF,IAEPI,YAAY,WACjB,OAAI3M,EAAKqH,gBACA,KAGP,kBAACjK,EAAA,EAAD,CAAUC,KAAMuP,GACd,kBAACpB,EAAA,EAAD,CACEzC,iBAAkBwD,EAASE,SAAW,CAACF,EAASE,eAAYvL,EAC5D0K,kBAAmB,gBAAErD,EAAF,2BAAcgE,EAASC,aAAajE,IACvDnE,QAASA,EACTC,aAAa,EACbyH,iBAAkB,iBAAO,CAAEtL,UAC3BmL,sBAAsB,S,oIC5BnBkB,EAAmB3G,IAAM4G,WACpC,WAUEC,GAVF,IAEIC,EAFJ,EAEIA,MAFJ,IAGI5J,sBAHJ,SAII6J,EAJJ,EAIIA,WACAC,EALJ,EAKIA,cACAC,EANJ,EAMIA,kBACAC,EAPJ,EAOIA,SACG9K,EARP,6GAYE,kBAAC,QAAD,CACE0K,MAAOA,EACPI,SACEA,GACC,SAAA1N,GACC,OAAIuN,GAAcI,kBAAQ3N,EAAQ,IAC5ByN,GAGG,IAAK,EAAD,+BAAKD,kBAEX,OAIV,SAAAI,GAAQ,OACP,kBAAC,IAAD,eACE5N,MAAQ4N,EAAS5N,OAA4B,IAAnB4N,EAAS5N,MAAmB4N,EAAS5N,MAAd,GACjDiK,SAAU,SAAA4D,GACJA,EAAGC,OAAOC,SAASC,QACrBJ,EAASK,YAAW,GACpBL,EAASM,SAASL,EAAGC,OAAO9N,SAGhC0D,eAAgBA,EAChB1C,QAASmN,QAAQP,EAASQ,OAC1BjL,IAAKkK,GACDzK,S,uGClDDyL,EAAkC,SAAC,GAA4B,IAA1BrQ,EAAyB,EAAzBA,SAAa4E,EAAY,4BACzE,OACE,kBAAC,IAAD,eAAsB0L,oBAAkB,EAACC,kBAAgB,GAAK3L,GAC3D5E,K,0HCEMwQ,EAAiC,SAAC,GAKxC,IAJLC,EAII,EAJJA,UACA7Q,EAGI,EAHJA,MAEG8Q,GACC,EAFJ1Q,SAEI,iDACEsP,EAAQqB,YAAeF,GACvB3P,EAAY8P,cAClB,OAAO3B,YAAY,kBACjB,kBAAC,IAAD,KACE,yCACE4B,KAAK,WACL9I,GAAIuH,EAAMtE,KACVA,KAAMsE,EAAMtE,KACZ8F,SAAyB,IAAhBxB,EAAMtN,MACfiK,SAAU,kBAAMqD,EAAMY,UAAUZ,EAAMtN,QACtC6E,SAAU/F,EAAUiQ,cAChBL,IAEL9Q,GAAS,2BAAOoR,QAAS1B,EAAMtE,MAAOpL,Q,6vDC7BtC,IAAMqR,EAAiBhS,IAAOiS,KAAV,IAIH1Q,IAAO2Q,MACP3Q,IAAO6C,WAEV+N,IAASC,cAIhBxR,IAAQ0D,2BAEI/C,IAAO2Q,MACP3Q,IAAO6C,WAQlB7C,IAAOC,SAIID,IAAOwF,UAGlBxF,IAAO6C,a,kCCjCtB,4BAEe,gBAAc,IAAMqL,cAAc,IAAM4C,SAAU,KAAM,IAAM5C,cAAc,OAAQ,CACjGC,EAAG,sJACD,IAAMD,cAAc,OAAQ,CAC9B6C,KAAM,OACN5C,EAAG,qBACA,U,kCCPL,4BAEe,gBAAc,IAAMD,cAAc,OAAQ,CACvDC,EAAG,kHACD,W,0MCES6C,EAAyC,SAAA5M,GAAK,OACzD,kBAAC6M,EAAA,EAAD,CAAaC,KAAMnG,EAAA,EAAK,EAAD,4BAA8BhL,MAAOC,IAAOmR,S,6GCErE,IAAMC,EAAsB3S,IAAOC,IAAV,KAKZ2S,EAET,SAAAjN,GAAK,OACP,kBAAC,OAAD,KACE,kBAACuK,EAAA,EAAD,CAAkBG,MAAM,UAAUhE,YAAY,mBAC9C,6BACA,kBAAC6D,EAAA,EAAD,CAAkBG,MAAM,SAAShE,YAAY,YAC7C,kBAAC6D,EAAA,EAAD,CAAkBG,MAAM,WAAWhE,YAAY,aAE/C,kBAACsG,EAAD,KACE,kBAAC,EAAD,S,UCjBOE,EAA6C,SAAAlN,GAAK,OAC7D,6BACE,kBAAC,IAAD,CACE6L,UAAU,qBACV7Q,MAAO2L,EAAA,EAAK,EAAD,4CAEb,6BACA,kBAAC,IAAD,CACEkF,UAAU,WACV7Q,MAAO2L,EAAA,EAAK,EAAD,mCCHJwG,EAAyD,SAAAnN,GAAK,OACzE,kBAACoN,EAAA,EAAD,CAAgBC,UAAW1G,EAAA,EAAK,EAAD,uBAC7B,kBAAC2G,EAAA,EAAD,KACE,kBAACtD,EAAA,EAAD,MACA,kBAAC/I,EAAA,EAAD,KACE,kBAAC,QAAD,CAAOkC,GAAG,iCAEZ,kBAAC,EAAD,MAEA,kBAAClC,EAAA,EAAD,KACE,kBAAC,QAAD,uCAEF,kBAAC,EAAD,SCfOsM,EAA4C,kBACvD,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CACEC,OAAK,EACLC,KAAMC,IACNC,UAAWT,IAEb,kBAAC,IAAD,CAAOS,UAAWC,Q,QCfP,SAAAhE,EAAA,GAAc,IAAMC,cAAc,OAAQ,CACvDC,EAAG,iWACD,WCFW,SAAAF,EAAA,GAAc,IAAMC,cAAc,OAAQ,CACvDC,EAAG,uMACD,gB,UCFW,SAAAF,EAAA,GAAc,IAAMC,cAAc,OAAQ,CACvDC,EAAG,oGACD,mBCFW,SAAAF,EAAA,GAAc,IAAMC,cAAc,OAAQ,CACvDC,EAAG,gGACD,U,iDCuBS+D,EAAyB,kBACpC,kBAACrC,EAAA,EAAD,KACE,kBAACsC,EAAA,EAAUC,MAAX,CAAiBN,KAAMO,IAAgBhF,MAAOtC,EAAA,EAAK,EAAD,cAClD,kBAACa,EAAA,EAAD,CACEC,IAAK,EACLC,OAAQ,EACR7J,SAAS,gBACTiP,KAAMnG,EAAA,EAAK,EAAD,kBACV5L,KAAMmT,EACNvS,MAAOC,IAAO0C,IACdqJ,MAAOwG,MAET,kBAAC3G,EAAA,EAAD,CACEC,IAAK,EACLC,OAAQ,EACR7J,SAAS,QACTiP,KAAMnG,EAAA,EAAK,EAAD,kBACV5L,KAAMqT,EACNzS,MAAOC,IAAOyS,OACd1G,MAAO2G,MAET,kBAAC9G,EAAA,EAAD,CACEC,IAAK,EACLC,OAAQ,EACR7J,SAAS,OACTiP,KAAMnG,EAAA,EAAK,EAAD,QACV5L,KAAMwT,IACN5S,MAAOC,IAAO6C,WACdkJ,MAAO6G,MAET,kBAAChH,EAAA,EAAD,CACEC,IAAK,EACLC,OAAQ,EACR7J,SAAS,UACTiP,KAAMnG,EAAA,EAAK,EAAD,WACV5L,KAAM0T,EACN9S,MAAOC,IAAO8S,UACd/G,MAAOkB,MAET,kBAACrB,EAAA,EAAD,CACEC,IAAK,EACLC,OAAQ,EACR7J,SAAS,iBACTiP,KAAMnG,EAAA,EAAK,EAAD,cACV5L,KAAM4T,EACNhT,MAAOC,IAAO8S,UACd/G,MAAOmB,MAET,kBAACtB,EAAA,EAAD,CACEC,IAAK,EACLC,OAAQ,EACR7J,SAAS,aACTiP,KAAMnG,EAAA,EAAK,EAAD,kBACV5L,KAAM6T,IACNjT,MAAOC,IAAO8S,UACd/G,MAAOoB,QClFb,8CAgBA,IAAM8F,EAAuBjL,IAAMkL,KAAK,kBACtC,mEAGIC,EAAkBnL,IAAMkL,KAAK,kBACjC,mEAGIE,EAAcpL,IAAMkL,KAAK,kBAC7B,kFAGIG,EAAerL,IAAMkL,KAAK,kBAAM,mCAEzBI,EAA4B,WACvC,OACE,kBAAC,IAAD,KACE,kBAAC1B,EAAA,EAAD,CAAaE,KAAMO,IAAgBR,OAAK,EAACG,UAAWE,IACpD,kBAACN,EAAA,EAAD,CAAaE,KAAM9E,IAAqBgF,UAAWoB,IACnD,kBAACxB,EAAA,EAAD,CAAaE,KAAMY,IAAsBV,UAAWmB,IACpD,kBAACvB,EAAA,EAAD,CAAaE,KAAMc,IAAqBZ,UAAWqB,IACnD,kBAACzB,EAAA,EAAD,CACEE,KAAMS,IACNP,UAAWiB,IAEb,kBAACrB,EAAA,EAAD,CACEE,KAAMC,IACNC,UAAWL,IAEb,kBAAC,IAAD,CAAOK,UAAWC,QAKTqB","file":"static/js/375.3a32bc80.chunk.js","sourcesContent":["import { Error, SvgIconComponent } from '@material-ui/icons'\nimport { cn } from '@speedlo/ui'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { mediaMobile } from '../app/Responsive'\nimport { logError } from '../helpers/logger'\nimport { Colors, Spacing } from '../styling'\nimport { useFormGridCheck } from './FormGrid'\nimport { Icon } from './Icon'\n\ninterface IProps {\n  icon?: SvgIconComponent\n  label?: string | ReactNode\n  labelWidth?: number\n  labelWidthUnits?: string\n  labelMargin?: string\n  labelSmallCaps?: boolean\n  className?: string\n}\n\nconst StyledIconLine = styled.div<IProps>`\n  display: flex;\n\n  div.description {\n    margin: ${({ labelMargin }) => labelMargin};\n    min-width: ${({ labelWidth, labelWidthUnits }) =>\n      `${labelWidth}${labelWidthUnits}`};\n    flex: 0 0 auto;\n    text-align: right;\n  }\n\n  div.contents {\n    margin-left: 0.5rem;\n    align-self: stretch;\n    flex: 1 1 auto;\n  }\n\n  div.label {\n    padding-top: 0.2rem;\n    display: inline-block;\n    &.smallCaps {\n      font-variant-caps: all-petite-caps;\n    }\n  }\n`\n\nconst StyledGridDescription = styled.div<IProps>`\n  grid-column: desc;\n  margin: ${({ labelMargin }) => labelMargin};\n\n  div.label {\n    padding-top: 0.2rem;\n    display: inline-block;\n    &.smallCaps {\n      font-variant-caps: all-petite-caps;\n    }\n  }\n\n  ${mediaMobile`\n  grid-column: content;\n  justify-self: start;\n  margin: ${({ labelMargin }) => labelMargin.replace('auto', '0.7rem')};\n  `};\n`\n\nconst StyledGridContent = styled.div<IProps>`\n  grid-column: content;\n  margin-left: 0.5rem;\n`\n\nexport const IconLine: React.FC<IProps> = ({\n  icon,\n  label,\n  labelWidth = 0,\n  labelWidthUnits = Spacing.DefaultSizeUnit,\n  labelMargin = '0.5rem 0.2rem 0 auto',\n  labelSmallCaps = true,\n  children,\n}) => {\n  let iconComponent = icon\n  if (typeof icon === 'string') {\n    logError(\n      `IconLine: Do not use icon prop as string! Replace \"${icon}\" with the one imported from @material-ui/icons.`,\n    )\n    iconComponent = Error\n  }\n  const isInFormGrid = useFormGridCheck()\n\n  const descriptionPart = (\n    <>\n      <Icon icon={iconComponent} color={Colors.greyDark} />\n      {label ? (\n        <div className={cn('label', { smallCaps: labelSmallCaps })}>\n          {label}\n        </div>\n      ) : null}\n    </>\n  )\n\n  return isInFormGrid ? (\n    <>\n      <StyledGridDescription labelMargin={labelMargin}>\n        {descriptionPart}\n      </StyledGridDescription>\n      <StyledGridContent>{children}</StyledGridContent>\n    </>\n  ) : (\n    <StyledIconLine\n      labelWidth={labelWidth}\n      labelWidthUnits={labelWidthUnits}\n      labelMargin={labelMargin}\n    >\n      <div className=\"description\">{descriptionPart}</div>\n      <div className=\"contents\">{children}</div>\n    </StyledIconLine>\n  )\n}\n","import { yup } from '@speedlo/xform'\nimport { IFormState } from 'react-form'\n\nimport { i18n } from '../i18n'\nimport { parseNumber } from './numeral'\n\nexport function isFormValid(formState: IFormState) {\n  return !formState.errors || Object.keys(formState.errors).length === 0\n}\n\nexport function fieldIsRequiredMsg(fieldDescription: string) {\n  return i18n.t`Field ${fieldDescription} cannot be empty`\n}\n\nexport function fieldIsNumberMsg(fieldDescription: string) {\n  return i18n.t`Field ${fieldDescription} must be a number`\n}\n\nexport function fieldIsPositiveNumberMsg(fieldDescription: string) {\n  return i18n.t`Field ${fieldDescription} must be a positive number`\n}\n\nexport const validateAsNumberField = (fieldDescription: string) =>\n  yup\n    .number()\n    .default(0)\n    .transform((_, origValue) => parseNumber(origValue))\n    .test(\n      'number-field',\n      fieldIsNumberMsg(fieldDescription),\n      value => !isNaN(value),\n    )\n\nexport const ARRAY_EMPTY: RoA<any> = []\n","import { useRoot } from '../atoms/RootProvider'\n\nexport function useAccessGuard(\n  queries: string[],\n  mutations: string[],\n): boolean {\n  const { user } = useRoot()\n  return queries.every(user.canQuery) && mutations.every(user.canMutate)\n}\n\nexport function useCanQuery(...queries: string[]) {\n  return useAccessGuard(queries, [])\n}\n\nexport function useCanMutate(...mutations: string[]) {\n  return useAccessGuard([], mutations)\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport Select from 'react-select'\nimport { Props } from 'react-select/src/Select'\nimport { StylesConfig } from 'react-select/src/styles'\n\nimport { Colors, Spacing } from '../styling'\n\nexport type TSelectControlProps<OptionType> = NoChildren &\n  Props<OptionType> & {\n    width?: number\n    minWidth?: number\n    maxHeight?: number\n    invalid?: boolean\n    hideOnSingleOption?: boolean\n  }\n\nfunction getControlStyles({\n  width,\n  minWidth,\n  invalid,\n}: TSelectControlProps<unknown>) {\n  const colors =\n    invalid === true\n      ? {\n          border: `1px solid ${Colors.red}`,\n          backgroundColor: Colors.errorBackground,\n        }\n      : {\n          border: `1px solid ${Colors.greyMiddle}`,\n        }\n  return {\n    ...colors,\n    margin: Spacing.MarginAroundFormComponents,\n    width: width !== undefined ? `${width}rem` : '100%',\n    minWidth: minWidth !== undefined ? `${minWidth}rem` : '8rem',\n  }\n}\n\nexport const composeSelectControlStyles = (outerStyles: StylesConfig = {}) => ({\n  ...outerStyles,\n  control: (base, state) => {\n    const controlStyles = { ...base, ...getControlStyles(state.selectProps) }\n    return outerStyles.control\n      ? outerStyles.control(controlStyles, state)\n      : controlStyles\n  },\n  menu: (base, state) => {\n    const {\n      selectProps: { width },\n    } = state\n    const menuStyles = {\n      ...base,\n      zIndex: 20,\n      color: Colors.black,\n      width: width !== undefined ? `${width}rem` : '100%',\n    }\n    return outerStyles.menu ? outerStyles.menu(menuStyles, state) : menuStyles\n  },\n  valueContainer: (base, state) => {\n    const {\n      selectProps: { maxHeight },\n    } = state\n    const valueContainerStyles = {\n      ...base,\n      maxHeight: maxHeight !== undefined ? `${maxHeight}rem` : '100%',\n      overflowY: maxHeight !== undefined ? 'scroll' : 'hidden',\n    }\n    return outerStyles.valueContainer\n      ? outerStyles.valueContainer(valueContainerStyles, state)\n      : valueContainerStyles\n  },\n  clearIndicator: base => ({\n    ...base,\n    cursor: 'pointer',\n  }),\n})\n\nexport function SelectControl<OptionType>({\n  hideOnSingleOption = false,\n  ...props\n}: TSelectControlProps<OptionType>) {\n  if (hideOnSingleOption && props.options && props.options.length <= 1) {\n    return null\n  }\n\n  return (\n    <Select<OptionType>\n      {...props}\n      components={{\n        ClearIndicator,\n        ...props.components,\n      }}\n      styles={composeSelectControlStyles(props.styles)}\n    />\n  )\n}\n\nfunction ClearIndicator(props) {\n  const {\n    getStyles,\n    innerProps: { ref, ...restInnerProps },\n  } = props\n  return (\n    <div\n      {...restInnerProps}\n      ref={ref}\n      style={getStyles('clearIndicator', props)}\n    >\n      <div style={{ padding: '0px 5px' }}>\n        <Trans>All</Trans>\n      </div>\n    </div>\n  )\n}\n","import { cn } from '@speedlo/ui'\nimport styled from 'styled-components/macro'\n\nimport { Colors, Spacing } from '../styling'\n\ninterface IProps {\n  invalid?: boolean\n  inputFullWidth?: boolean\n}\n\nexport const FormInputStyled = styled.input.attrs<IProps>(\n  ({ invalid = false, inputFullWidth = false }) => ({\n    className: cn({ invalid, fullWidth: inputFullWidth }),\n  }),\n)<IProps>`\n  margin: ${Spacing.MarginAroundFormComponents};\n  &.invalid {\n    border: 1px ${Colors.red} solid;\n    background-color: ${Colors.errorBackground};\n  }\n  &.fullWidth {\n    width: 100%;\n  }\n`\n\n// TODO: Rename all uses in separate commit\nexport { FormInputStyled as StyledFormInput }\n","import { Tooltip } from '@material-ui/core'\nimport { PanTool } from '@material-ui/icons'\nimport React from 'react'\n\ninterface IProps {\n  children: string\n}\n\nexport const NoAccess: React.FC<IProps> = ({ children }) =>\n  process.env.REACT_APP_STAGE !== 'prod' ? (\n    <Tooltip title={children}>\n      <PanTool />\n    </Tooltip>\n  ) : null\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface IHeadlineProps {\n  margin?: string\n  size?: 'smaller'\n  light?: boolean\n}\n\nconst getMargin = ({ margin = '0 0.5rem 0 0.5rem' }: IHeadlineProps) => margin\n\nconst getFontSize = ({ size }: IHeadlineProps) => size === 'smaller' && '1rem'\n\nconst getColor = ({ light = false }: IHeadlineProps) =>\n  light ? Colors.greyLight : Colors.greyDarkest\n\nexport const Headline = styled.h2`\n  color: ${getColor};\n  font-weight: lighter;\n  margin: ${getMargin};\n  font-size: ${getFontSize};\n`\n","import { Trans } from '@lingui/macro'\nimport { cn } from '@speedlo/ui'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { RM } from '../tools/ramda'\nimport { Colors } from '../styling'\n\nexport interface ISelectControlFlatProps<ItemType = unknown> {\n  items: RoA<ItemType>\n  selectedItem?: Maybe<ItemType>\n  formatItem?: (item: ItemType) => string | ReactNode\n  onSingleSelection?(selected: Maybe<ItemType>): void\n  selectedItems?: RoA<ItemType>\n  onMultiSelection?(selected: RoA<ItemType>): void\n  isMulti?: boolean\n  isClearable?: boolean\n  isInvalid?: boolean\n  disabled?: boolean\n  textColor?: string\n}\n\nconst StyledSelectControlFlat = styled.div`\n  ${(props: { textColor?: string }) => ``}\n\n  color: ${({ textColor }) => (textColor ? textColor : 'inherit')};\n\n  &.interactive {\n    cursor: pointer;\n  }\n\n  &.invalid {\n    border: 1px red solid;\n  }\n\n  > div {\n    padding: 0.2rem 0.3rem;\n    margin: 0.3rem 0.3rem;\n    display: inline-block;\n    border: 1px dotted ${Colors.greyMiddle};\n  }\n\n  > div.active {\n    font-weight: bolder;\n    text-decoration: underline;\n  }\n\n  > div.hover {\n    text-decoration: underline;\n  }\n`\n\nexport const SelectControlFlat = <ItemType extends any>(\n  props: ISelectControlFlatProps<ItemType>,\n) => {\n  const {\n    items,\n    formatItem = RM.prop('displayName'),\n    isMulti = false,\n    isClearable = false,\n    isInvalid = false,\n    disabled = false,\n    selectedItem,\n    selectedItems,\n    onSingleSelection,\n    onMultiSelection,\n    textColor,\n  } = props\n\n  const hasSingleItem = items.length === 1\n\n  const hasSelection = () => {\n    if (isMulti) {\n      return Array.isArray(selectedItems) && selectedItems.length > 0\n    }\n    return selectedItem !== null && selectedItem !== undefined\n  }\n\n  const isItemSelected = (item: ItemType) => {\n    if (items.length === 1) {\n      // with one item there no selection happening\n      return false\n    }\n    if (isMulti && Array.isArray(selectedItems)) {\n      return RM.contains(item, selectedItems)\n    }\n    return RM.equals(selectedItem, item)\n  }\n\n  const updateSelection = (item: Maybe<ItemType>) => {\n    if (hasSingleItem || disabled) {\n      return\n    }\n    if (item === null) {\n      if (isMulti && onMultiSelection) {\n        onMultiSelection([])\n      } else if (onSingleSelection) {\n        onSingleSelection(null)\n      }\n    } else if (isMulti && onMultiSelection) {\n      if (isItemSelected(item)) {\n        onMultiSelection(\n          Array.isArray(selectedItems)\n            ? RM.without([item], selectedItems)\n            : [item],\n        )\n      } else {\n        onMultiSelection(\n          Array.isArray(selectedItems) ? RM.concat(selectedItems, [item]) : [],\n        )\n      }\n    } else if (onSingleSelection) {\n      onSingleSelection(item)\n    }\n  }\n  return (\n    <StyledSelectControlFlat\n      className={cn({\n        invalid: isInvalid,\n        interactive: !hasSingleItem || disabled,\n      })}\n      textColor={textColor}\n    >\n      {isClearable && (\n        <div\n          className={cn({ active: !hasSelection() })}\n          onClick={() => {\n            updateSelection(null)\n          }}\n        >\n          <Trans id=\"optionselector.clear-filter\">All</Trans>\n        </div>\n      )}\n      {items.map((item, idx) => {\n        // @ts-ignore Have to use any in generics due to parsing error\n        const formatted = formatItem(item)\n        return (\n          <div\n            key={idx}\n            className={cn({ active: isItemSelected(item) })}\n            onClick={() => {\n              updateSelection(item)\n            }}\n          >\n            {formatted}\n          </div>\n        )\n      })}\n    </StyledSelectControlFlat>\n  )\n}\n","import { useRoot } from '../atoms/RootProvider'\n\nexport function useUserModel() {\n  const { user } = useRoot()\n  return user\n}\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { mediaMobile } from '../app/Responsive'\n\nconst StyledFormGrid = styled.div`\n  display: grid;\n  grid-template-columns: 0.1fr [desc] auto [content] 1fr;\n  grid-template-areas: '. desc content';\n  grid-auto-flow: row dense;\n\n  ${mediaMobile`\n    grid-template-columns: 1fr;\n    grid-template-areas:\n      'content';\n  `};\n`\n\ninterface IProps {}\nlet formGridCounter = 0\nconst formGridContext = React.createContext(formGridCounter)\n\nexport const FormGrid: React.FC<IProps> = props => {\n  return (\n    <StyledFormGrid>\n      <formGridContext.Provider value={++formGridCounter}>\n        {props.children}\n      </formGridContext.Provider>\n    </StyledFormGrid>\n  )\n}\n\nexport function useFormGridCheck() {\n  return React.useContext(formGridContext) > 0\n}\n","var map = {\n\t\"./cs.svg\": 1387,\n\t\"./de.svg\": 1388,\n\t\"./en.svg\": 1389,\n\t\"./pl.svg\": 1390,\n\t\"./sk.svg\": 1391\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1386;","var map = {\n\t\"./logo-doveze.svg\": 1393,\n\t\"./logo-gopay.svg\": 1394,\n\t\"./logo-mastercard.svg\": 1395,\n\t\"./logo-visa.svg\": 1396\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1392;","import { useAutorun } from '@speedlo/hooks'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { FCompanyBranchFragment } from '../graph/generated'\n\nexport function useAutorunWhenSingleBranch(\n  onSingleBranch: (branch: FCompanyBranchFragment) => void,\n) {\n  const { user } = useRoot()\n  useAutorun(() => {\n    if (user.isReady && user.hasSingleBranch) {\n      onSingleBranch(user.branches[0])\n    }\n  })\n}\n","import React from 'react'\n\nexport function useQueryParams() {\n  const { search } = window.location\n  const searchParams = React.useMemo(() => new URLSearchParams(search), [\n    search,\n  ])\n\n  const getQueryParam = (param: string) => searchParams.get(param)\n  const createQueryString = (keyValueObj: Record<string, string>) => {\n    return Object.entries(keyValueObj)\n      .map(([key, value]) => `${key}=${value}`)\n      .join('&')\n  }\n\n  return { getQueryParam, createQueryString }\n}\n","import styled from 'styled-components'\n\ntype TCursor = 'pointer' | 'arrow' | 'default'\n\nexport const CursorContainer = styled.div`\n  cursor: ${({ cursor = 'default' }: { cursor?: TCursor }) => cursor};\n`\n","import React from 'react'\n\nimport { CursorContainer } from '../atoms/CursorContainer'\nimport { FCompanyBranchFragment } from '../graph/generated'\n\ninterface ICompanyBranchProps {\n  branch: FCompanyBranchFragment\n  onClick?: () => void\n  short?: boolean\n  showBrand?: boolean\n}\n\nexport const CompanyBranch: React.FC<ICompanyBranchProps> = ({\n  branch,\n  onClick,\n  short = false,\n  showBrand = true,\n}) => (\n  <CursorContainer cursor=\"pointer\" onClick={onClick}>\n    {short ? (\n      branch.name.substr(0, 8)\n    ) : (\n      <>\n        <span>{branch.name}</span>\n        {showBrand && <span>{` [${branch.brand.name}]`}</span>}\n      </>\n    )}\n  </CursorContainer>\n)\n","import React from 'react'\n\nimport { CompanyBranch } from '../atoms/CompanyBranch'\nimport { SelectControl, TSelectControlProps } from '../atoms/SelectControl'\nimport { FCompanyBranchFragment } from '../graph/generated'\nimport { ARRAY_EMPTY } from '../helpers/form'\nimport { i18n } from '../i18n'\nimport { ICompanyBranchPickerImpl } from '../organisms/CompanyBranchPicker'\nimport { Spacing } from '../styling'\nimport { RM } from '../tools/ramda'\n\ntype TProps = NoChildren &\n  ICompanyBranchPickerImpl &\n  TSelectControlProps<FCompanyBranchFragment>\n\nexport type TCompanyBranchDropdownProps = Pick<\n  TSelectControlProps<FCompanyBranchFragment>,\n  'placeholder' | 'width'\n>\n\nexport const CompanyBranchDropdown: React.FC<TProps> = ({\n  branches,\n  selectedBranch,\n  onSingleSelection,\n  selectedBranches,\n  onMultiSelection,\n  ...props\n}) => (\n  <SelectControl<FCompanyBranchFragment>\n    value={props.isMulti ? selectedBranches : selectedBranch}\n    placeholder={\n      props.isMulti ? i18n.t`Filter branches...` : i18n.t`Select a branch`\n    }\n    maxHeight={Spacing.ButtonHeight}\n    options={branches as FCompanyBranchFragment[]}\n    getOptionValue={RM.prop('id')}\n    formatOptionLabel={branch => <CompanyBranch branch={branch} />}\n    filterOption={(branch, rawInput) =>\n      branch.data.name\n        .toLocaleLowerCase()\n        .includes(rawInput.toLocaleLowerCase())\n    }\n    closeMenuOnSelect={!props.isMulti}\n    onChange={selection => {\n      if (props.isMulti && onMultiSelection) {\n        onMultiSelection(\n          Array.isArray(selection) ? selection : (ARRAY_EMPTY as any),\n        )\n      }\n      if (!props.isMulti && onSingleSelection) {\n        if (Array.isArray(selection)) {\n          onSingleSelection(RM.head(selection) || null)\n        } else {\n          onSingleSelection((selection as FCompanyBranchFragment) || null)\n        }\n      }\n    }}\n    {...props}\n  />\n)\n","import { History } from 'history'\nimport React from 'react'\n\nimport { PageLayoutItem } from '../../../molecules/PageLayoutItem'\nimport { ITouchButtonProps, TouchButton } from '../../../molecules/TouchButton'\n\ninterface IProps extends ITouchButtonProps {\n  row: number\n  column: number\n  route?: History.LocationDescriptor<any>\n  canQuery?: string | string[]\n  canMutate?: string | string[]\n  canAccessWithSingleBranch?: boolean\n}\n\nexport type IDashboardButtonProps = IProps\n\nexport const DashboardButton: React.FC<IProps> = ({\n  row,\n  column,\n  route,\n  canQuery,\n  canMutate,\n  canAccessWithSingleBranch,\n  ...buttonProps\n}) => {\n  return (\n    <PageLayoutItem\n      gridColumnSpan={2}\n      gridColumn={(column - 1) * 2 + 1}\n      gridRow={row}\n      route={route}\n      canQuery={canQuery}\n      canMutate={canMutate}\n      canAccessWithSingleBranch={canAccessWithSingleBranch}\n    >\n      <TouchButton {...buttonProps} />\n    </PageLayoutItem>\n  )\n}\n","import { History } from 'history'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { NoAccess } from '../atoms/NoAccess'\nimport {\n  IPageLayoutGridItemProps,\n  PageLayoutGridItem,\n} from '../atoms/PageLayoutGridItem'\nimport { Sizer } from '../atoms/Sizer'\nimport { useAccessGuard } from '../hooks/useAccessGuard'\nimport { useUserModel } from '../hooks/useUserModel'\nimport { Spacing } from '../styling'\n\ninterface IPageLayoutItemProps extends IPageLayoutGridItemProps {\n  children: ReactNode\n  route?: History.LocationDescriptor<any>\n  canQuery?: string | string[]\n  canMutate?: string | string[]\n  canAccessWithSingleBranch?: boolean\n}\n\nconst EMPTY_ARRAY = []\n\nexport const PageLayoutItem: React.FC<IPageLayoutItemProps> = ({\n  route,\n  children,\n  canQuery = EMPTY_ARRAY,\n  canMutate = EMPTY_ARRAY,\n  canAccessWithSingleBranch = true,\n  ...gridItemProps\n}) => {\n  const userModel = useUserModel()\n\n  const queries = normalizeAccess(canQuery)\n  const mutations = normalizeAccess(canMutate)\n  const hasAccess = useAccessGuard(queries, mutations)\n\n  if (!hasAccess) {\n    return (\n      <NoAccess>{`No access to ${\n        queries.length ? `queries ${queries.join(',')} ` : ''\n      }${\n        mutations.length ? `mutations ${mutations.join(',')}` : ''\n      }`}</NoAccess>\n    )\n  }\n\n  if (!canAccessWithSingleBranch && userModel.hasSingleBranch) {\n    return <NoAccess>No access to single branch account</NoAccess>\n  }\n\n  const layoutItem = route ? (\n    <Link to={route}>{children}</Link>\n  ) : (\n    <>{children}</>\n  )\n\n  return (\n    <PageLayoutGridItem {...gridItemProps}>\n      <Sizer height={Spacing.DashboardButtonHeight}>{layoutItem}</Sizer>\n    </PageLayoutGridItem>\n  )\n}\n\nfunction normalizeAccess(access: string | string[]) {\n  return Array.isArray(access) ? access : [access]\n}\n","import { ROUTE_SETTINGS_MENU } from '../settings/settings.routes'\n\nexport const ROUTE_MENU = ROUTE_SETTINGS_MENU\nexport const ROUTE_MENU_RECIPE = `${ROUTE_MENU}/recipe`\nexport const ROUTE_MENU_CATEGORY = `${ROUTE_MENU}/category`\nexport const ROUTE_MENU_STOCK = `${ROUTE_MENU}/stock`\n","import React from 'react'\n\nimport { SelectControlFlat } from '../atoms/SelectControlFlat'\nimport { FCompanyBranchFragment } from '../graph/generated'\nimport { ICompanyBranchPickerImpl } from '../organisms/CompanyBranchPicker'\nimport { Colors } from '../styling'\n\nexport const CompanyBranchFlatSelect: React.FC<ICompanyBranchPickerImpl> = ({\n  branches,\n  selectedBranch,\n  selectedBranches,\n  textColor = Colors.black,\n  ...props\n}) => (\n  <SelectControlFlat<FCompanyBranchFragment>\n    items={branches}\n    selectedItem={selectedBranch}\n    selectedItems={selectedBranches}\n    textColor={textColor}\n    formatItem={item => <span title={item.brand.name}>{item.name}</span>}\n    {...props}\n  />\n)\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { FCompanyBranchFragment } from '../graph/generated'\nimport {\n  CompanyBranchDropdown,\n  TCompanyBranchDropdownProps,\n} from '../molecules/CompanyBranchDropdown'\nimport { CompanyBranchFlatSelect } from '../molecules/CompanyBranchFlatSelect'\nimport { RM } from '../tools/ramda'\n\ntype TBranch = FCompanyBranchFragment\n\ninterface ICompanyBranchPickerProps {\n  branches?: RoA<TBranch>\n  selectedBranches?: RoA<ID>\n  onSelectionChange?(branchIds: ID[], branches: TBranch[]): void\n  onSelectionClear?(): void\n  breakpoint?: number\n  isMulti?: boolean\n  isClearable?: boolean\n  textColor?: string\n  hideWhenSingleBranch?: boolean\n  getDropdownProps?(): Partial<TCompanyBranchDropdownProps>\n}\n\nexport interface ICompanyBranchPickerImpl {\n  branches: RoA<TBranch>\n  isMulti?: boolean\n  isClearable?: boolean\n  selectedBranch?: Maybe<TBranch>\n  onSingleSelection?(branch: Maybe<TBranch>): void\n  selectedBranches?: TBranch[]\n  onMultiSelection?(branches: TBranch[]): void\n  textColor?: string\n}\n\nexport const CompanyBranchPicker = observer<ICompanyBranchPickerProps>(\n  ({\n    breakpoint = 3,\n    branches,\n    selectedBranches = [],\n    isMulti = false,\n    isClearable = true,\n    hideWhenSingleBranch = false,\n    textColor,\n    onSelectionChange,\n    onSelectionClear,\n    getDropdownProps = () => ({}),\n  }) => {\n    const { user } = useRoot()\n\n    const isSelected = branch => selectedBranches.includes(branch.id)\n\n    const props: ICompanyBranchPickerImpl = {\n      textColor,\n      isClearable,\n      isMulti,\n      branches: branches || user.branches,\n      selectedBranch: user.branches.find(isSelected) || null,\n      selectedBranches: user.branches.filter(isSelected),\n      onSingleSelection(selected: TBranch) {\n        if (selected === null && onSelectionClear) {\n          onSelectionClear()\n        } else if (selected !== null && onSelectionChange) {\n          onSelectionChange([selected.id], [selected])\n        }\n      },\n      onMultiSelection(selected: TBranch[]) {\n        if (selected.length === 0 && onSelectionClear) {\n          onSelectionClear()\n        } else if (selected.length && onSelectionChange) {\n          onSelectionChange(selected.map(RM.prop('id')), selected)\n        }\n      },\n    }\n\n    if (user.hasSingleBranch && hideWhenSingleBranch) {\n      return null\n    }\n\n    if (user.branches.length < breakpoint) {\n      return <CompanyBranchFlatSelect {...props} />\n    }\n\n    return <CompanyBranchDropdown {...props} {...getDropdownProps()} />\n  },\n)\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M20 4H4v2h16V4zm1 10v-2l-1-5H4l-1 5v2h1v6h10v-6h4v6h2v-6h1zm-9 4H6v-4h6v4z\"\n}), 'StoreMallDirectory');","import { StoreMallDirectory } from '@material-ui/icons'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { useAutorunWhenSingleBranch } from '../../../hooks/useAutorunWhenSingleBranch'\nimport { useQueryParams } from '../../../hooks/useQueryParams'\nimport { CompanyBranchPicker } from '../../../organisms/CompanyBranchPicker'\n\ninterface IProps {\n  isMulti?: boolean\n  width?: number\n}\n\nexport const SettingsCompanyBranchPicker: React.FC<IProps> = ({\n  isMulti = false,\n  width,\n}) => {\n  const { settings, user } = useRoot()\n\n  useAutorunWhenSingleBranch(branch => {\n    settings.selectBranch(branch.id)\n  })\n\n  const { getQueryParam } = useQueryParams()\n  const branchId = getQueryParam('branchId')\n\n  // Change to branch specified in query params\n  React.useEffect(() => {\n    if (branchId) {\n      settings.selectBranch(branchId)\n    }\n  }, [branchId, settings])\n\n  return useObserver(() => {\n    if (user.hasSingleBranch) {\n      return null\n    }\n    return (\n      <IconLine icon={StoreMallDirectory}>\n        <CompanyBranchPicker\n          selectedBranches={settings.branchId ? [settings.branchId] : undefined}\n          onSelectionChange={([branch]) => settings.selectBranch(branch)}\n          isMulti={isMulti}\n          isClearable={false}\n          getDropdownProps={() => ({ width })}\n          hideWhenSingleBranch={true}\n        />\n      </IconLine>\n    )\n  })\n}\n","import React from 'react'\nimport { Field, FieldType, ValidationResult } from 'react-form'\nimport { isEmpty } from 'validator'\n\nimport { i18n } from '../i18n'\nimport { FormInputStyled } from './FormInputStyled'\n\ninterface IProps extends React.InputHTMLAttributes<never> {\n  field: FieldType\n  defaultValue?: string\n  isRequired?: boolean\n  validatioName?: string\n  validationMessage?: string\n  inputFullWidth?: boolean\n  validate?(value: string): ValidationResult\n}\n\nexport type TFormInputTextBoxProps = IProps\n\nexport const FormInputTextBox = React.forwardRef<HTMLInputElement, IProps>(\n  (\n    {\n      field,\n      inputFullWidth = false,\n      isRequired,\n      validatioName,\n      validationMessage,\n      validate,\n      ...props\n    },\n    inputRef,\n  ) => (\n    <Field\n      field={field}\n      validate={\n        validate ||\n        (value => {\n          if (isRequired && isEmpty(value + '')) {\n            if (validationMessage) {\n              return validationMessage\n            }\n            return i18n.t`${validatioName} is required`\n          }\n          return null\n        })\n      }\n    >\n      {fieldApi => (\n        <FormInputStyled\n          value={!fieldApi.value && fieldApi.value !== 0 ? '' : fieldApi.value}\n          onChange={ev => {\n            if (ev.target.validity.valid) {\n              fieldApi.setTouched(true)\n              fieldApi.setValue(ev.target.value)\n            }\n          }}\n          inputFullWidth={inputFullWidth}\n          invalid={Boolean(fieldApi.error)}\n          ref={inputRef}\n          {...props}\n        />\n      )}\n    </Field>\n  ),\n)\n","import React from 'react'\n\nimport {\n  IPageLayoutResponsiveProps,\n  PageLayoutResponsive,\n} from '../../../molecules/PageLayoutResponsive'\n\ninterface IProps extends IPageLayoutResponsiveProps {}\n\nexport const DashboardPage: React.FC<IProps> = ({ children, ...props }) => {\n  return (\n    <PageLayoutResponsive isForIconDashboard showSoundControl {...props}>\n      {children}\n    </PageLayoutResponsive>\n  )\n}\n","import { useXField, useXFormState, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { StyledCheckbox } from '../../atoms/StyledCheckbox'\n\ntype TProps = NoChildren &\n  Omit<React.InputHTMLAttributes<never>, 'name'> & {\n    fieldName: XFieldName\n    label?: string\n  }\n\nexport type FormInputCheckboxProps = TProps\n\nexport const FormCheckbox: React.FC<TProps> = ({\n  fieldName,\n  label,\n  children,\n  ...inputProps\n}) => {\n  const field = useXField<any>(fieldName)\n  const formState = useXFormState()\n  return useObserver(() => (\n    <StyledCheckbox>\n      <input\n        type=\"checkbox\"\n        id={field.name}\n        name={field.name}\n        checked={field.value === true}\n        onChange={() => field.setValue(!field.value)}\n        disabled={formState.isSubmitting}\n        {...inputProps}\n      />\n      {label && <label htmlFor={field.name}>{label}</label>}\n    </StyledCheckbox>\n  ))\n}\n","import styled from 'styled-components'\n\nimport { Colors, Radiuses, Spacing } from '../styling'\n\nexport const StyledCheckbox = styled.span`\n  input {\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    background-color: ${Colors.white};\n    border: 1px solid ${Colors.greyMiddle};\n    padding: 1rem;\n    border-radius: ${Radiuses.TextComponent};\n    display: inline-block;\n    overflow: hidden;\n    position: relative;\n    margin: ${Spacing.MarginAroundFormComponents};\n    &:checked {\n      background-color: ${Colors.white};\n      border: 1px solid ${Colors.greyMiddle};\n    }\n    &:checked:after {\n      content: '\\\\2714';\n      font-size: 2rem;\n      position: absolute;\n      top: -0.5rem;\n      left: 0.1rem;\n      color: ${Colors.greyDark};\n      overflow: hidden;\n    }\n    &:disabled {\n      background-color: ${Colors.greyLight};\n    }\n    &:disabled:after {\n      color: ${Colors.greyMiddle};\n    }\n    &:focus {\n      box-sizing: content-box;\n    }\n  }\n  label {\n    display: inline-block;\n    margin: 0.4rem 0 0 0.5rem;\n    vertical-align: top;\n  }\n`\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(React.Fragment, null, React.createElement(\"path\", {\n  d: \"M19 3H4.99c-1.11 0-1.98.89-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.11-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10z\"\n}), React.createElement(\"path\", {\n  fill: \"none\",\n  d: \"M0 0h24v24H0V0z\"\n})), 'Inbox');","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"\n}), 'Person');","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nexport const SaveInvoicePreferencesButton: React.FC = props => (\n  <TouchButton text={i18n.t`Save invoice preferences`} color={Colors.green} />\n)\n","import React from 'react'\nimport { Form } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { SaveInvoicePreferencesButton } from './SaveInvoicePreferencesButton'\n\ninterface IInvoicePreferencesFormProps {}\n\nconst SaveButtonContainer = styled.div`\n  margin-top: 1rem;\n  width: 15rem;\n`\n\nexport const InvoicePreferencesForm: React.FC<\n  IInvoicePreferencesFormProps\n> = props => (\n  <Form>\n    <FormInputTextBox field=\"account\" placeholder=\"Název firmy\" />\n    <br />\n    <FormInputTextBox field=\"number\" placeholder=\"IČ\" />\n    <FormInputTextBox field=\"vatIdent\" placeholder=\"DIČ\" />\n\n    <SaveButtonContainer>\n      <SaveInvoicePreferencesButton />\n    </SaveButtonContainer>\n  </Form>\n)\n","import React from 'react'\n\nimport { FormCheckbox } from '../../../components/forms/FormInputCheckbox'\nimport { i18n } from '../../../i18n'\n\ninterface IStoppageFormProps {}\n\nexport const StoppageForm: React.FC<IStoppageFormProps> = props => (\n  <div>\n    <FormCheckbox\n      fieldName=\"onlyPersonalPickup\"\n      label={i18n.t`We are not delivering, only take away.`}\n    />\n    <br />\n    <FormCheckbox\n      fieldName=\"stoppage\"\n      label={i18n.t`Completely stop all orders.`}\n    />\n  </div>\n)\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { SettingsCompanyBranchPicker } from '../../settings/organisms/SettingsCompanyBranchPicker'\nimport { InvoicePreferencesForm } from '../organism/InvoicePreferencesForm'\nimport { StoppageForm } from '../organism/StoppageForm'\n\ninterface IPreferencesPageProps {}\n\nexport const BranchPreferencesPage: React.FC<IPreferencesPageProps> = props => (\n  <FullPageLayout pageTitle={i18n.t`Branch preferences`}>\n    <Card>\n      <SettingsCompanyBranchPicker />\n      <Headline>\n        <Trans id=\"branch.preferences.stoppage\">Stoppage</Trans>\n      </Headline>\n      <StoppageForm />\n\n      <Headline>\n        <Trans>Change of invoice preferences</Trans>\n      </Headline>\n      <InvoicePreferencesForm />\n    </Card>\n  </FullPageLayout>\n)\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { SecureRoute } from '../../../routes/SecureRoute'\nimport { ROUTE_SETTINGS_PREFS } from '../../settings/settings.routes'\nimport { BranchPreferencesPage } from '../pages/BranchPreferencesPage'\n\ninterface IProps {}\n\nexport const BranchPreferencesRoutes: React.FC<IProps> = () => (\n  <Switch>\n    <SecureRoute\n      exact\n      path={ROUTE_SETTINGS_PREFS}\n      component={BranchPreferencesPage}\n    />\n    <Route component={NotFoundPage} />\n  </Switch>\n)\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M11 17c0 .55.45 1 1 1s1-.45 1-1-.45-1-1-1-1 .45-1 1zm0-14v4h2V5.08c3.39.49 6 3.39 6 6.92 0 3.87-3.13 7-7 7s-7-3.13-7-7c0-1.68.59-3.22 1.58-4.42L12 13l1.41-1.41-6.8-6.8v.02C4.42 6.45 3 9.05 3 12c0 4.97 4.02 9 9 9 4.97 0 9-4.03 9-9s-4.03-9-9-9h-1zm7 9c0-.55-.45-1-1-1s-1 .45-1 1 .45 1 1 1 1-.45 1-1zM6 12c0 .55.45 1 1 1s1-.45 1-1-.45-1-1-1-1 .45-1 1z\"\n}), 'AvTimer');","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M12 2C8.14 2 5 5.14 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.86-3.14-7-7-7zm-1.56 10H9v-1.44l3.35-3.34 1.43 1.43L10.44 12zm4.45-4.45l-.7.7-1.44-1.44.7-.7c.15-.15.39-.15.54 0l.9.9c.15.15.15.39 0 .54z\"\n}), 'EditLocation');","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M6 2c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6H6zm7 7V3.5L18.5 9H13z\"\n}), 'InsertDriveFile');","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z\"\n}), 'Folder');","import {\n  AvTimer,\n  EditLocation,\n  Folder,\n  Inbox,\n  InsertDriveFile,\n  Person,\n} from '@material-ui/icons'\nimport React from 'react'\n\nimport { PageTitle } from '../../../atoms/PageTitle'\nimport { i18n } from '../../../i18n'\nimport { Colors } from '../../../styling'\nimport {\n  ROUTE_MENU_CATEGORY,\n  ROUTE_MENU_RECIPE,\n  ROUTE_MENU_STOCK,\n} from '../../menu/menu.routes'\nimport {\n  ROUTE_SETTINGS,\n  ROUTE_SETTINGS_HOURS,\n  ROUTE_SETTINGS_USER,\n  ROUTE_SETTINGS_ZONES,\n} from '../../settings/settings.routes'\nimport { DashboardButton } from '../atoms/DashboardButton'\nimport { DashboardPage } from '../molecules/DashboardPage'\n\nexport const SettingsPage: React.FC = () => (\n  <DashboardPage>\n    <PageTitle.Route path={ROUTE_SETTINGS} title={i18n.t`Settings`} />\n    <DashboardButton\n      row={1}\n      column={1}\n      canQuery=\"businessHours\"\n      text={i18n.t`Business hours`}\n      icon={AvTimer}\n      color={Colors.red}\n      route={ROUTE_SETTINGS_HOURS}\n    />\n    <DashboardButton\n      row={1}\n      column={2}\n      canQuery=\"zones\"\n      text={i18n.t`Delivery zones`}\n      icon={EditLocation}\n      color={Colors.violet}\n      route={ROUTE_SETTINGS_ZONES}\n    />\n    <DashboardButton\n      row={1}\n      column={3}\n      canQuery=\"user\"\n      text={i18n.t`User`}\n      icon={Person}\n      color={Colors.greyMiddle}\n      route={ROUTE_SETTINGS_USER}\n    />\n    <DashboardButton\n      row={2}\n      column={1}\n      canQuery=\"recipes\"\n      text={i18n.t`Recipes`}\n      icon={InsertDriveFile}\n      color={Colors.turquoise}\n      route={ROUTE_MENU_RECIPE}\n    />\n    <DashboardButton\n      row={2}\n      column={2}\n      canQuery=\"wareCategories\"\n      text={i18n.t`Categories`}\n      icon={Folder}\n      color={Colors.turquoise}\n      route={ROUTE_MENU_CATEGORY}\n    />\n    <DashboardButton\n      row={2}\n      column={3}\n      canQuery=\"stockItems\"\n      text={i18n.t`Stock overview`}\n      icon={Inbox}\n      color={Colors.turquoise}\n      route={ROUTE_MENU_STOCK}\n    />\n  </DashboardPage>\n)\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { SecureRoute } from '../../../routes/SecureRoute'\nimport { BranchPreferencesRoutes } from '../../branchpreferences/routes/BranchPreferencesRoutes'\nimport { SettingsPage } from '../../dashboard/pages/SettingsDashboardPage'\nimport {\n  ROUTE_SETTINGS,\n  ROUTE_SETTINGS_HOURS,\n  ROUTE_SETTINGS_MENU,\n  ROUTE_SETTINGS_PREFS,\n  ROUTE_SETTINGS_USER,\n  ROUTE_SETTINGS_ZONES,\n} from '../settings.routes'\n\nconst BusinessHoursRouting = React.lazy(() =>\n  import('../../businesshours/routes/BusinessHoursRouting'),\n)\n\nconst ZoneMenuRouting = React.lazy(() =>\n  import('../../../segments/zones/routes/ZoneMenuRouting'),\n)\n\nconst MenuRouting = React.lazy(() =>\n  import('../../../segments/menu/routes/MenuRouting'),\n)\n\nconst UserMenuPage = React.lazy(() => import('../pages/UserMenuPage'))\n\nexport const SettingsRouting: React.FC = () => {\n  return (\n    <Switch>\n      <SecureRoute path={ROUTE_SETTINGS} exact component={SettingsPage} />\n      <SecureRoute path={ROUTE_SETTINGS_MENU} component={MenuRouting} />\n      <SecureRoute path={ROUTE_SETTINGS_ZONES} component={ZoneMenuRouting} />\n      <SecureRoute path={ROUTE_SETTINGS_USER} component={UserMenuPage} />\n      <SecureRoute\n        path={ROUTE_SETTINGS_HOURS}\n        component={BusinessHoursRouting}\n      />\n      <SecureRoute\n        path={ROUTE_SETTINGS_PREFS}\n        component={BranchPreferencesRoutes}\n      />\n      <Route component={NotFoundPage} />\n    </Switch>\n  )\n}\n\nexport default SettingsRouting\n"],"sourceRoot":""}