{"version":3,"sources":["atoms/Icon.tsx","helpers/offline.ts","molecules/TouchButton.tsx","atoms/Sizer.tsx","segments/menu/models/MenuBaseModel.ts","atoms/PageTitle.tsx","atoms/Card.tsx","molecules/FullPageLayout.tsx","graph/buildQuery.tsx","pages/NotFoundPage.tsx","hooks/useSnackBar.ts","styling.ts","routes/RedirectToLogin.tsx","helpers/formats.ts","helpers/ramda.ts","models/BaseModel.ts","graph/generated.ts","atoms/SizerButton.tsx","atoms/SoundControl.tsx","organisms/LogoutWidget.tsx","molecules/HomeButton.tsx","molecules/PageLayout.tsx","atoms/Loading.tsx","helpers/logger.ts","atoms/GridLayout.tsx","segments/menu/organisms/RecipeForm.graphql.ts","locale/moment.ts","i18n.tsx","segments/menu/models/MenuCategoryModel.graphql.ts","segments/menu/models/MenuCategoryModel.ts","segments/businesshours/models/BusinessHoursModel.graphql.ts","segments/businesshours/models/BusinessHoursModel.ts","segments/menu/models/MenuRecipeModel.graphql.ts","segments/menu/models/MenuRecipeModel.ts","locale/numeral.ts","segments/businesshours/organisms/SpecificBusinessHours.graphql.ts","segments/zones/Zones.graphql.ts","atoms/MarginBox.tsx","atoms/IntervalRender.tsx","atoms/SoundPlayInterval.tsx","assets/connectionWarning.mp3","segments/order/models/OrderListModel.ts","config.ts","enableDebug.ts","context/RootContext.ts","graph/createClient.ts","graph/AuthLink.ts","helpers/persistModel.ts","segments/login/models/PasswordLoginModel.ts","segments/login/models/LoginProviderModel.ts","models/AuthModel.graphql.ts","models/AuthModel.ts","models/ConfigModel.ts","models/UserModel.ts","helpers/faker.ts","segments/createorder/models/CreateOrderModel.ts","models/MapModel.ts","segments/order/models/OrderMapModel.graphql.ts","segments/order/models/OrderMapModel.ts","segments/order/models/OrderModel.ts","segments/overview/models/StatisticsModel.ts","segments/settings/models/SettingsBaseModel.ts","segments/menu/models/MenuStockModel.graphql.ts","segments/menu/models/MenuStockModel.ts","segments/menu/models/MenuModel.ts","segments/settings/models/SettingsModel.ts","segments/zones/models/ZoneMapModel.ts","segments/zones/models/ZoneModel.graphql.ts","segments/zones/models/ZoneModel.ts","models/RootModel.ts","atoms/RootProvider.tsx","../node_modules/moment/locale lazy /^/.*$/ groupOptions: {} namespace object","../node_modules/numeral/locales lazy /^/.*$/ groupOptions: {} namespace object","../ /^/.*/messages/.po$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","helpers/gps.ts","atoms/ConnectionWarning.tsx","atoms/SnackProvider.tsx","atoms/UpdateHandler.tsx","pages/ErrorPage.tsx","pages/ServiceUnreachablePage.tsx","organisms/DefaultErrorHandler.tsx","routes/LogRoute.tsx","routes/RedirectAfterLogin.tsx","routes/RedirectAfterLogout.tsx","routes/Routing.tsx","segments/login/organisms/UserBootstrap.tsx","App.tsx","atoms/Router.tsx","atoms/ThemeProvider.tsx","index.tsx","graph/errorHandler.ts","routes/SecureRoute.tsx","atoms/Pacman.tsx","atoms/WithRoot.tsx","routes/LazyRoute.tsx"],"names":["IconSpanStyled","styled","span","_templateObject","_ref","_ref$fontSize","fontSize","_ref$fontSizeUnit","fontSizeUnit","props","color","Icon","_ref2","iconName","_ref2$color","Colors","white","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","__webpack_require__","d","__webpack_exports__","isNetworkOnline","isNetworkOffline","whenGoingOnline","isOnline","observable","box","navigator","onLine","window","addEventListener","set","get","cb","observe","change","oldValue","newValue","applyAlpha","alphaValue","applyAlphaToColor","TouchButtonStyled","button","Spacing","ButtonHeight","DefaultSizeUnit","_ref$width","width","_ref2$height","height","Radiuses","Button","ButtonLabelStyled","div","_templateObject2","ButtonLabelNextToIconStyled","_templateObject3","TouchButton","React","forwardRef","_ref3","forwardedRef","children","_ref3$iconColor","iconColor","_ref3$iconSize","iconSize","_ref3$color","greyMiddle","_ref3$textNextToIcon","textNextToIcon","badge","text","Object","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_2___default","assign","ref","_atoms_Icon__WEBPACK_IMPORTED_MODULE_4__","SizerContainer","_ref$widthUnit","widthUnit","undefined","concat","_ref2$heightUnit","heightUnit","Sizer","_ref3$widthUnit","_ref3$heightUnit","margin","wrap","_MarginBox__WEBPACK_IMPORTED_MODULE_5__","MenuBaseModel","mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__","BaseModel","named","volatile","filterInput","actions","self","setFilterInput","input","views","branchId","getParent","settings","TitleStyled","h1","greyLight","observableTitles","array","autorun","lastTitle","Array","from","pop","document","title","appConfig","pageTitleSuffix","PageTitle","_React$Component","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","apply","arguments","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","key","value","push","prevProps","idx","findIndex","RM","equals","splice","remove","Component","Route","react__WEBPACK_IMPORTED_MODULE_9___default","react_router_dom__WEBPACK_IMPORTED_MODULE_10__","render","Display","mobx_react_lite__WEBPACK_IMPORTED_MODULE_8__","join","Card","Color","alpha","lighten","string","textColor","black","_ref$padding","padding","_ref3$stretchToParent","stretchToParent","css","displayName","getLayout","i","x","y","w","h","FullPageLayout","_molecules_PageLayout__WEBPACK_IMPORTED_MODULE_2__","layouts","buildQuery","query","cleanup","useRef","executeCleanup","useCallback","current","forEach","fn","length","useEffect","renderFragment","_props$renderLoading","renderLoading","_props$refetchOnConne","renderError","refetchOnConnectionLost","rest","react_apollo__WEBPACK_IMPORTED_MODULE_2__","result","loading","_atoms_Loading__WEBPACK_IMPORTED_MODULE_3__","error","refetch","data","Fragment","NotFoundPage","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_atoms_PageTitle__WEBPACK_IMPORTED_MODULE_1__","_i18n__WEBPACK_IMPORTED_MODULE_2__","_","useSnackBar","EVariant","notistack_build_SnackbarContext__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","successVariant","variant","success","errorVariant","warningVariant","warning","infoVariant","info","enqueueSnackbar","useContext","SnackbarContextNext","enqueueSuccess","errorMessage","enqueueError","enqueueWarning","enqueueInfo","FontSizes","color__WEBPACK_IMPORTED_MODULE_0__","color__WEBPACK_IMPORTED_MODULE_0___default","_helpers_ramda__WEBPACK_IMPORTED_MODULE_1__","curry","MarginAroundFormComponents","Small","Middle","LayoutGridCellMargin","DefaultInputWidth","ButtonColumnWidthPx","InfoMessageFontSize","CompactCard","CompactCardBig","RedirectToLogin","debug__WEBPACK_IMPORTED_MODULE_0__","debug__WEBPACK_IMPORTED_MODULE_0___default","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","log","debug","_ref$useOrigin","useOrigin","path","match","location","to","pathname","state","origin","fullDateFormat","formatDateISO","formatTime","priceFormat","formatPrice","formatTimeWithoutTodayDate","formatAddress","formatFullName","date_fns__WEBPACK_IMPORTED_MODULE_0__","date_fns_fp__WEBPACK_IMPORTED_MODULE_1__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_2___default","numeral__WEBPACK_IMPORTED_MODULE_3__","numeral__WEBPACK_IMPORTED_MODULE_3___default","currentLocale","csLocale","formatLocale","formatWithOptions","locale","format","formatDateTime","price","numeral","time","isSameDay","Date","address","street","houseNumber","city","user","lastName","firstName","trim","ramda__WEBPACK_IMPORTED_MODULE_0__","mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__","verror__WEBPACK_IMPORTED_MODULE_2__","types","model","getPath","client","getEnv","apolloClient","VError","root","getRoot","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","WeekDayEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","MobilePlatformEnum","WareUnitEnum","AvailabilityTypeEnum","AllergenEnum","WarePriceTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","OrderBillingTypeEnum","DeliveryTypeEnum","OrderRecipeStateEnum","LanguageEnum","OrderOnlineStateEnum","OrderOriginEnum","PaymentGateEnum","PaymentTypeEnum","OrderStateEnum","ZoneTypeEnum","ShiftUserStateEnum","WareCategoryTypeEnum","SettingTypeEnum","WareRequirementEnum","SubscriptionActionType","GSpecificBusinessHourFragmentDoc","gql","FPriceFragmentDoc","GMenuRecipeFragmentDoc","FMenuAllergenFragmentDoc","_templateObject4","FMenuWareUnitFragmentDoc","_templateObject5","GMenuStockItemFragmentDoc","_templateObject6","GMenuRecipePriceFragmentDoc","_templateObject7","GMenuAssocRecipeFragmentDoc","_templateObject8","FAddressFragmentDoc","_templateObject9","FEmailFragmentDoc","_templateObject10","FPhoneFragmentDoc","_templateObject11","FCustomerFragmentDoc","_templateObject12","GOrderListTickerFragmentDoc","_templateObject13","GOrderDetailWareFragmentDoc","_templateObject14","FGeoPointFragmentDoc","_templateObject15","GOrderMarkerFragmentDoc","_templateObject16","FCompanyBranchFragmentDoc","_templateObject17","FOrderStateCategoryFragmentDoc","_templateObject18","FPriceWithCurrencyFragmentDoc","_templateObject19","FCreateOrderItemFragmentDoc","_templateObject20","FCreateOrderFragmentDoc","_templateObject21","FCreateOrderRecipeSidedishesFragmentDoc","_templateObject22","FOrderMenuRecipeFragmentDoc","_templateObject23","FOrderMenuCategoryFragmentDoc","_templateObject24","FKitchenOrderRecipeFragmentDoc","_templateObject25","FKitchenOrderFragmentDoc","_templateObject26","FMenuRecipeFragmentDoc","_templateObject27","FMenuCategoryFragmentDoc","_templateObject28","FMenuCategoryListItemFragmentDoc","_templateObject29","FUserNameFragmentDoc","_templateObject30","_templateObject31","FDriverFragmentDoc","_templateObject32","FOrderDriverFragmentDoc","_templateObject33","FOrderMapDriverFragmentDoc","_templateObject34","FOrderMapDeviceFragmentDoc","_templateObject35","FOrderMapDeliveryFragmentDoc","_templateObject36","FOrderTimingFragmentDoc","_templateObject37","FZonePriceRangeFragmentDoc","_templateObject38","FZoneFragmentDoc","_templateObject39","_templateObject40","_templateObject41","_templateObject42","_templateObject43","_templateObject44","_templateObject45","_templateObject46","_templateObject47","_templateObject48","_templateObject49","_templateObject50","_templateObject51","_templateObject52","_templateObject53","_templateObject54","_templateObject55","_templateObject56","_templateObject57","_templateObject58","_templateObject59","_templateObject60","_templateObject61","_templateObject62","_templateObject63","_templateObject64","_templateObject65","_templateObject66","_templateObject67","_templateObject68","_templateObject69","_templateObject70","_templateObject71","_templateObject72","_templateObject73","_templateObject74","_templateObject75","_templateObject76","_templateObject77","QAddressSuggestDocument","_templateObject78","useQAddressSuggest","variables","baseOptions","Hooks","MOrderStateDocument","_templateObject79","useMOrderState","QLogoutWidgetDocument","_templateObject80","useQLogoutWidget","MAddOrderPromoDocument","_templateObject81","useMAddOrderPromo","MCancelOrderDocument","_templateObject82","useMCancelOrder","MCreateOrderAcceptDocument","_templateObject83","useMCreateOrderAccept","MCreateOrderAddRecipeDocument","_templateObject84","useMCreateOrderAddRecipe","MCreateOrderNewDocument","_templateObject85","useMCreateOrderNew","MCreateOrderRemoveItemDocument","_templateObject86","useMCreateOrderRemoveItem","MCreateOrderUpdateDocument","_templateObject87","useMCreateOrderUpdate","MCreateOrderUpdateItemDocument","_templateObject88","useMCreateOrderUpdateItem","MRemoveOrderPromoDocument","_templateObject89","useMRemoveOrderPromo","QCreateOrderItemDocument","_templateObject90","QCreateOrderRecipeDocument","_templateObject91","QOrderCartDocument","_templateObject92","useQOrderCart","QOrderFormDeliverAtDefaultsDocument","_templateObject93","useQOrderFormDeliverAtDefaults","QOrderMenuDocument","_templateObject94","useQOrderMenu","QValidateLocationDocument","_templateObject95","MKitchenRecipeStateDocument","_templateObject96","useMKitchenRecipeState","QKitchenOrderListDocument","_templateObject97","useQKitchenOrderList","SKitchenOrderListDocument","_templateObject98","useSKitchenOrderList","QUserBootstrapDocument","_templateObject99","useQUserBootstrap","_templateObject100","SOrderCallDocument","_templateObject101","useSOrderCall","_templateObject102","MMenuCategoryVisibilityDocument","_templateObject103","useMMenuCategoryVisibility","MMenuStockQuantityDocument","_templateObject104","useMMenuStockQuantity","QMenuCategoryDocument","_templateObject105","QMenuCategoryFilterDocument","_templateObject106","useQMenuCategoryFilter","QMenuCategoryListDocument","_templateObject107","useQMenuCategoryList","QMenuGuideDownloadDocument","_templateObject108","useQMenuGuideDownload","QMenuRecipeListDocument","_templateObject109","useQMenuRecipeList","QMenuStockDepositDocument","_templateObject110","useQMenuStockDeposit","QMenuStockListDocument","_templateObject111","useQMenuStockList","QStockRecipesDocument","_templateObject112","useQStockRecipes","MBranchDefaultTimeDocument","_templateObject113","useMBranchDefaultTime","MOrderChangeToPickupDocument","_templateObject114","useMOrderChangeToPickup","MOrderTimeNotificationDocument","_templateObject115","useMOrderTimeNotification","MRemoveOrderDriverDocument","_templateObject116","useMRemoveOrderDriver","MSelectOrderDriverDocument","_templateObject117","useMSelectOrderDriver","QBranchDefeaultTimesDocument","_templateObject118","useQBranchDefeaultTimes","QOrderDriversDocument","_templateObject119","useQOrderDrivers","QOrderMapDeliveriesDocument","_templateObject120","useQOrderMapDeliveries","QOrderStateDocument","_templateObject121","useQOrderState","SOrderMapDeliveriesDocument","_templateObject122","useSOrderMapDeliveries","MFinancialReportCreateDocument","_templateObject123","useMFinancialReportCreate","QAllDriversDocument","_templateObject124","useQAllDrivers","QClosureHistoryDocument","_templateObject125","QClosureReportDocument","_templateObject126","useQClosureReport","QStatsDailyDocument","_templateObject127","useQStatsDaily","QStatsOrdersDocument","_templateObject128","useQStatsOrders","QStatsOrdersCountsDocument","_templateObject129","useQStatsOrdersCounts","QStatsOrdersListDocument","_templateObject130","MUserMenuLanguageDocument","_templateObject131","useMUserMenuLanguage","QUserMenuLanguagesDocument","_templateObject132","useQUserMenuLanguages","MZoneUpdateDocument","_templateObject133","useMZoneUpdate","SizerButton","_Sizer__WEBPACK_IMPORTED_MODULE_3__","SoundControl","_getPrototypeOf2","_this","classCallCheck","_len","args","_key","possibleConstructorReturn","getPrototypeOf","call","playPreview","inherits","createClass","react_default","WithRoot","soundEnabled","green","red","onClick","controlSound","LogoutWidgetStyled","LoggedUserNameStyled","IconStyled","LogoutWidget","observer","auth","useRoot","_useQLogoutWidget","id","userId","i18n","data-testid","react_router_dom","HomeButtonStyled","HomeButton_templateObject","HomeButton","_ref$color","_ref$iconColor","_ref$goBack","goBack","backRoute","objectWithoutProperties","react_router","history","TopLeftButtonContainer","PageLayout_templateObject","getPosition","scrollPageTitle","TopRightContainer","PageLayout_templateObject2","PageTitleContainer","PageLayout_templateObject3","PageHeaderItem","PageLayout","_ref$pageTitle","pageTitle","_ref$layouts","_ref$hideLogoutWidget","hideLogoutWidget","_ref$showSoundControl","showSoundControl","_ref$useBackButton","useBackButton","_ref$scrollPageTitle","topContent","SoundControl_SoundControl","SecureRoute","component","redirect","GridLayout","toConsumableArray","HomeButton_HomeButton","Loading","_ref$text","logMain","logDebug","logError","logAuth","logRouting","logPersistence","logGraph","logForm","logLang","logUpdate","useColors","console","react_grid_layout__WEBPACK_IMPORTED_MODULE_1__","react_grid_layout__WEBPACK_IMPORTED_MODULE_1___default","ReactGridLayout","WidthProvider","RGL","layout","cols","rowHeight","autoSize","isDraggable","isResizable","compactType","measureBeforeMount","MenuRecipePriceFragment","MenuAssocRecipeFragment","MenuRecipeFormQuery","MenuRecipeFormAssocQuery","MenuRecipeDefaults","QueryMenuRecipeFormAssoc","changeMomentLocale","_x","_changeMomentLocale","_callee","lang","regenerator_default","_context","prev","next","moment","abrupt","sent","updateLocale","stop","setupI18n","I18nManager","_React$useState","useState","forceUpdate","slicedToArray","useReaction","language","asyncToGenerator","mark","_args","detectLanguage","setupLanguage","node_modules_react_default","react","Children","only","languages","detector","getLocales","find","loc","supportedLanguages","includes","fallbackLanguage","_setupLanguage","_callee2","_context2","Promise","all","loadCatalog","changeNumeralLocale","activate","_callee3","catalog","_context3","load","defineProperty","SortMenuCategoryMutation","MenuCategoryCreateMutation","MenuCategoryUpdateMutation","MenuCategoryDeleteMutation","MenuCategoryModel","sortCategory","_sortCategory","categoryId","offset","mutate","mutation","Boolean","_x2","createCategory","formValues","categoryType","objectSpread","companyBranch","wareCategoryType","getFormVariables","getQueryErrors","updateCategory","_updateCategory","_x3","_x4","deleteCategory","_deleteCategory","_x5","_x6","nameLabel","internalNoteLabel","enabled","visible","pictogram","recipes","map","prop","minCount","maxCount","getCategoryRoute","recipeId","ESpecificHourMode","CreateSpecificBusinessHour","SpecificBusinessHourFragment","DeleteSpecificBusinessHour","BusinessHoursModel","byIdPredicate","complement","propEq","specificMode","optional","enumeration","TIMESPAN","changeSpecificMode","mode","submitSpecificHour","values","specificDate","isoDate","date","closed","FULLDAY","openAt","closeAt","closedNote","note","updateQueries","GSpecificBusinessHours","mutationResult","businessHours","deleteSpecificHour","businessHourId","filter","MenuRecipeFragment","MenuRecipeVisibilityMutation","MenuRecipeCreateMutation","MenuRecipeUpdateMutation","MenuRecipeDeleteMutation","MenuRecipeModel","categoryFilterId","changeVisibility","optimisticResponse","updateRecipe","__typename","setCategoryFilter","createRecipe","recipeType","recipe","getRecipeVariables","deleteRecipe","_deleteRecipe","queryDefaults","_queryDefaults","_data$companyBranch","vats","code","currency","reduce","vatId","priceType","enum","currencyCode","internalNote","descriptionLabel","prices","keys","warePriceType","vat","sideDishCategories","sideDishes","wareCategories","categories","associatedRecipes","pick","ingredients","stockItem","quantity","Number","parseFloat","replace","getRecipeRoute","_changeNumeralLocale","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","numberRx","validateNumber","test","QuerySpecificBusinessHours","ZoneLocationQuery","ZoneColorsQuery","MarginBox","IntervalRender","_Component","isActive","nextTime","getNextTime","timer","executeTimer","clearTimeout","timeMs","differenceInMilliseconds","setTimeout","setState","deactivate","addSeconds","intervalSec","nextLoop","SoundPlayInterval_SoundPlayInterval","SoundPlayInterval","soundUrl","_ref$shouldPlay","shouldPlay","_ref$skipEnableChecks","skipEnableChecks","config","IntervalRender_IntervalRender","lib_default","url","playStatus","onFinishedPlaying","loop","autoLoad","volume","soundVolume","module","exports","p","setImmediate","OrderListModel","mobx__WEBPACK_IMPORTED_MODULE_0__","react_scroll__WEBPACK_IMPORTED_MODULE_2__","_graph_generated__WEBPACK_IMPORTED_MODULE_3__","branches","collapsedCategories","Finished","branchesFilter","hasBranchFilter","isSingleBranchSelected","firstBranchId","orderMap","clearBranchFilter","clear","setBranchFilter","panMapToOrder","order","panToOrder","extend","detailOpen","isOrderDetailOpen","orderId","has","isCategoryCollapsed","categoryCode","toggleOrderDetail","delete","add","toggleCategoryCollapse","category","index","indexOf","focusOrderDetail","scroller","scrollTo","smooth","containerId","absolute","observerOrderDetail","bind","endpoint","persistenceKey","sentryDSN","localStorage","setItem","RootContext","createContext","createApolloClient","createDefaultApolloClient","headers","computed","Authorization","communicationToken","token","ApolloLink","operation","forward","canCommunicate","operationName","context","getContext","setContext","Observable","sub","subscribe","networkError","invalidate","complete","unsubscribe","createAuthLink","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","offlineLink","QueueLink","open","close","createOfflineLink","createNetworkLink","persistModel","_persistModel","modelName","stateKey","writeState","getType","name","snapshot","localforage","getItem","applySnapshot","getSnapshot","t0","removeItem","onSnapshot","getLoginUrl","username","password","PasswordLoginModel","errorCode","hasFailed","setFailure","message","setSuccess","authenticate","requestToken","_requestToken","fetch","response","payload","Accept","json","status","String","Sentry","withScope","scope","setExtra","setLevel","Severity","Debug","captureException","LoginProviderModel","passwordLogin","PasswordChangeMutation","AuthModel","provider","isAuthenticated","isAuthenticatedUser","tokenForPasswordChange","cache","reset","setForPasswordChange","temporaryB64EncodedToken","Base64","decode","changePassword","_changePassword","_ref$updateUserPasswo","fetchPolicy","updateUserPassword","ConfigModel","orderListPollIntervalSec","orderListSoundIntervalSec","UserModel","maybe","number","soundIgnore","isLoaded","brands","access","permissions","canCancelOrders","canCreateOrder","branchesId","R","defaultBranch","Error","filterBranches","predicate","canQuery","queryName","queries","toLowerCase","canMutate","mutationName","mutations","isReady","applyUserData","rawCode","uniqBy","applyPermissions","applyAccess","makeSet","fields","Set","compose","toLower","subscriptions","finishBootstrap","setLanguage","ignore","setSoundVolume","faker","CreateOrderModel","getDefaultProps","currentBranch","deliveryType","isDelivery","Messenger","deliverAt","deliverAtIso","startOfMinute","hasAddress","deliveryAddress","fakeAddress","gps","clearGps","phone","phonePrefix","prefix","country","customer","emails","email","phones","vamCustomer","isFound","_self$vamCustomer","lastOrder","defaults","fakeValues","hasOrder","createOrderVariables","callEventId","eventId","updateOrderVariables","acceptOrderVariables","resetOrder","resetModel","setOrder","useLocation","clearLocation","setMinimalPrice","minimalPrice","selectBranch","userIsCalling","setDeliveryMinutes","minutes","deliveryMinutes","updateFormValues","touched","updateFromVam","updateFormWithFakeValues","internet","phoneNumberFormat","lorem","sentence","slice","latitude","longitude","resolver","makeResolver","resolve","selectSidedishesForRecipe","sidedishMode","sidedishRootId","selectSidedishesForItem","itemId","sidedishSelectionConfirmed","sidedishes","isConfirmed","sidedishSelectionCancel","notDeliveryLocation","sidedishSelection","GPSCzechia","MapModel","zoom","mapRef","center","gpsToLatLng","setMapRef","updateZoom","getZoom","updatePosition","getCenter","lat","lng","OrderBranchLocationQuery","OrderMapModel_graphql_templateObject","OrderLocationQuery","OrderMapModel","activeDriverId","_panToOrder","panTo","panToBranch","_panToBranch","activateDriver","driverId","position","OrderModel","list","StatisticsModel","drivers","closureBranch","maybeNull","dateTimeFrom","startOfDay","dateTimeTo","endOfDay","updateFilter","setDriversFilter","setClosureBranch","branch","setTodayOrdersFilter","SettingsBaseModel","MenuStockItemFragment","MenuStockModel_graphql_templateObject","MenuStockCreateMutation","MenuStockModel_graphql_templateObject2","MenuStockUpdateMutation","MenuStockDeleteMutation","MenuStockModel","createItem","updateItem","stockId","deleteItem","_deleteItem","label","plu","allergens","wareUnit","allowNegative","MenuModel","stock","SettingsModel","selectedBranchId","menu","head","ZoneMapModel","currentZonePoints","updateZonePoints","points","clearZonePoints","panToZone","_panToZone","zoneId","zone","CreateZoneMutation","ZoneModel_graphql_templateObject","UpdateZonePriorityMutation","ZoneModel_graphql_templateObject2","DestroyZoneMutation","ZoneModel_graphql_templateObject3","ZoneModel","brandId","brand","branchFilterId","branchFilterPredicate","zoneFilterPredicate","getZoneVariables","update","zoneColor","minimalOrderPrice","priceRangeRules","normalizePriceRangeRule","geoPolygon","setBrandFilter","brandBranches","clearBrandFilter","createZone","flow","onZoneCreate","generatePolygon","metersRadius","pointsCount","GZones","zones","destroyZone","changeZonePriority","oldIndex","newIndex","updateZonePriority","priority","numberOrNull","num","isNaN","range","toPrice","RootModel","createOrder","statistics","persistedModels","RootProvider","_React$useState2","isInit","setInit","_React$useState3","create","useAsyncEffect","dist","Provider","Pacman","_ref3$observe","index_module","./af","./af.js","./ar","./ar-dz","./ar-dz.js","./ar-kw","./ar-kw.js","./ar-ly","./ar-ly.js","./ar-ma","./ar-ma.js","./ar-sa","./ar-sa.js","./ar-tn","./ar-tn.js","./ar.js","./az","./az.js","./be","./be.js","./bg","./bg.js","./bm","./bm.js","./bn","./bn.js","./bo","./bo.js","./br","./br.js","./bs","./bs.js","./ca","./ca.js","./cs","./cs.js","./cv","./cv.js","./cy","./cy.js","./da","./da.js","./de","./de-at","./de-at.js","./de-ch","./de-ch.js","./de.js","./dv","./dv.js","./el","./el.js","./en-au","./en-au.js","./en-ca","./en-ca.js","./en-gb","./en-gb.js","./en-ie","./en-ie.js","./en-il","./en-il.js","./en-nz","./en-nz.js","./eo","./eo.js","./es","./es-do","./es-do.js","./es-us","./es-us.js","./es.js","./et","./et.js","./eu","./eu.js","./fa","./fa.js","./fi","./fi.js","./fo","./fo.js","./fr","./fr-ca","./fr-ca.js","./fr-ch","./fr-ch.js","./fr.js","./fy","./fy.js","./gd","./gd.js","./gl","./gl.js","./gom-latn","./gom-latn.js","./gu","./gu.js","./he","./he.js","./hi","./hi.js","./hr","./hr.js","./hu","./hu.js","./hy-am","./hy-am.js","./id","./id.js","./is","./is.js","./it","./it.js","./ja","./ja.js","./jv","./jv.js","./ka","./ka.js","./kk","./kk.js","./km","./km.js","./kn","./kn.js","./ko","./ko.js","./ky","./ky.js","./lb","./lb.js","./lo","./lo.js","./lt","./lt.js","./lv","./lv.js","./me","./me.js","./mi","./mi.js","./mk","./mk.js","./ml","./ml.js","./mn","./mn.js","./mr","./mr.js","./ms","./ms-my","./ms-my.js","./ms.js","./mt","./mt.js","./my","./my.js","./nb","./nb.js","./ne","./ne.js","./nl","./nl-be","./nl-be.js","./nl.js","./nn","./nn.js","./pa-in","./pa-in.js","./pl","./pl.js","./pt","./pt-br","./pt-br.js","./pt.js","./ro","./ro.js","./ru","./ru.js","./sd","./sd.js","./se","./se.js","./si","./si.js","./sk","./sk.js","./sl","./sl.js","./sq","./sq.js","./sr","./sr-cyrl","./sr-cyrl.js","./sr.js","./ss","./ss.js","./sv","./sv.js","./sw","./sw.js","./ta","./ta.js","./te","./te.js","./tet","./tet.js","./tg","./tg.js","./th","./th.js","./tl-ph","./tl-ph.js","./tlh","./tlh.js","./tr","./tr.js","./tzl","./tzl.js","./tzm","./tzm-latn","./tzm-latn.js","./tzm.js","./ug-cn","./ug-cn.js","./uk","./uk.js","./ur","./ur.js","./uz","./uz-latn","./uz-latn.js","./uz.js","./vi","./vi.js","./x-pseudo","./x-pseudo.js","./yo","./yo.js","./zh-cn","./zh-cn.js","./zh-hk","./zh-hk.js","./zh-tw","./zh-tw.js","webpackAsyncContext","req","ids","e","then","t","./chs","./chs.js","./da-dk","./da-dk.js","./en-za","./en-za.js","./es-es","./es-es.js","./nl-nl","./nl-nl.js","./no","./no.js","./pt-pt","./pt-pt.js","./ru-ua","./ru-ua.js","./uk-ua","./uk-ua.js","./cs/messages.po","./de/messages.po","./en-dev/messages.po","./en/messages.po","./pl/messages.po","./sk/messages.po","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","latLngToGps","geolib__WEBPACK_IMPORTED_MODULE_0__","latLng","_ref$metersRadius","_ref$pointsCount","fill","degree","computeDestinationPoint","MessageStyled","ConnectionWarning","connectionWarningSound","index_es","disableBackdropClick","disableEscapeKeyDown","icons_index_es","_lingui_react","successStyle","SnackProvider_templateObject","snackStyles","variantSuccess","variantInfo","variantError","variantWarning","orange","SnackProvider","build","maxSnack","classes","anchorOrigin","horizontal","vertical","UpdateHandler","_ref$onRestart","onRestart","reload","_ref$autoUpdateDelay","autoUpdateDelay","SECOND","_ref$postponeTimeout","postponeTimeout","MINUTE","_ref$updateCheckInter","updateCheckInterval","HOUR","_ref$serviceWorker","serviceWorker","registrationWorkerRef","updateWorkerRef","useObservable","updatePending","useReleaseCabinet","useInterval","onMessage","event","removeEventListener","updateWorker","register","onInit","reg","onUpdate","sw","init","onCancel","onConfirm","postMessage","useObserver","UpdateSnack","autoHideDuration","now","useTimer","interval","addMilliseconds","endTime","remainingSeconds","formatDistanceStrict","disableWindowBlurListener","action","size","role","ErrorPage_templateObject","Center","ErrorPage_templateObject2","ErrorPage","onFeedback","style","ServiceUnreachablePage_templateObject","ServiceUnreachablePage_templateObject2","ServiceUnreachablePage","onRetry","components","href","ServiceUnreachablePage_Center","ServiceUnreachablePage_IconStyled","makeError","DefaultErrorHandler","_useSnackBar","errorKind","setErrorKind","onUnhandledError","isChunkError","flushSentry","isApolloError","isNetworkUnreachableError","onNetworkError","isUnreachable","onOperationError","onUserErrors","messages","graphql_dist","tools_dist","onError","ServiceUnreachablePage_ServiceUnreachablePage","ErrorPage_ErrorPage","showFeedback","showReportDialog","labelClose","LogRoute","RedirectAfterLogin","route","when","RedirectAfterLogout","PasswordLoginRoute","lazy","PasswordChangeRoute","PasswordResetRoute","MainDashboardPage","OrderRoutes","KitchenRoutes","SettingsRoutes","OverviewRoutes","SupportPage","Routing","Suspense","fallback","LogRoute_LogRoute","RedirectAfterLogin_RedirectAfterLogin","LazyRoute","exact","UserBootstrap","_useRoot","_useQUserBootstrap","skip","configureScope","setUser","roles","App","DefaultErrorHandler_DefaultErrorHandler","UpdateHandler_UpdateHandler","Routing_Routing","Router","dist_index_es","handleGetUserConfirm","getUserConfirmation","ThemeProvider","theme","createMuiTheme","typography","useNextVariants","styles","rootElement","getElementById","useSentryInit","ThemeProvider_ThemeProvider","Router_Router","SnackProvider_SnackProvider","App_App","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","errors","_ref$redirect","_RedirectToLogin__WEBPACK_IMPORTED_MODULE_6__","_pages_NotFoundPage__WEBPACK_IMPORTED_MODULE_4__","_LazyRoute__WEBPACK_IMPORTED_MODULE_5__","react_spinkit__WEBPACK_IMPORTED_MODULE_1__","react_spinkit__WEBPACK_IMPORTED_MODULE_1___default","_styling__WEBPACK_IMPORTED_MODULE_2__","_ref$noMargin","noMargin","display","alignSelf","justifyContent","marginTop","_RootProvider__WEBPACK_IMPORTED_MODULE_1__","routeProps","_atoms_Pacman__WEBPACK_IMPORTED_MODULE_3__"],"mappings":"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,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,gBAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,UAAA,CACA,IACA,GAEAC,aAAA,CACA,IACA,GAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,YAAA,CACA,IACA,IAEAC,eAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,QAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,gBAAA,CACA,IACA,IAEAC,WAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,YAAA,CACA,IACA,IAEAC,eAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,gBAAA,CACA,IACA,IAEAC,OAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,IAEAC,UAAA,CACA,IACA,IAEAC,aAAA,CACA,IACA,KAGA,SAAAC,EAAAC,GACA,IAAAC,EAAAjwB,EAAAgwB,GACA,OAAAC,EAOA1gD,EAAA2gD,EAAAD,EAAA,IAAAE,KAAA,WACA,IAAAv6B,EAAAq6B,EAAA,GACA,OAAA1gD,EAAA6gD,EAAAx6B,EAAA,KARAuH,QAAAwa,UAAAwY,KAAA,WACA,IAAAD,EAAA,IAAA7d,MAAA,uBAAA2d,EAAA,KAEA,MADAE,EAAAtsB,KAAA,mBACAssB,IAQAH,EAAAzrB,KAAA,WACA,OAAAxxB,OAAAwxB,KAAAtE,IAEA+vB,EAAAn6B,GAAA,KACAoS,EAAAC,QAAA8nB,wBC5+BA,IAAA/vB,EAAA,CACA6hB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAuO,QAAA,CACA,IACA,KAEAC,WAAA,CACA,IACA,KAEA3N,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEA2N,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEArN,OAAA,CACA,IACA,KAEAG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAK,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAuM,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA/L,OAAA,CACA,IACA,KAEAgM,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA5L,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAK,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAG,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAiB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAO,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAqB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEA0B,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAgG,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEA7F,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAE,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEA0F,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAvF,OAAA,CACA,IACA,KAEAwF,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAxF,UAAA,CACA,IACA,KAEAO,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAqB,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAK,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,KAEAmD,UAAA,CACA,IACA,KAEAC,aAAA,CACA,IACA,KAEAnC,OAAA,CACA,IACA,KAEAC,UAAA,CACA,IACA,MAGA,SAAAW,EAAAC,GACA,IAAAC,EAAAjwB,EAAAgwB,GACA,OAA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","file":"static/js/main.4c830703.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface IProps {\n  iconName: string\n  color?: string\n  fontSize?: number\n  fontSizeUnit?: string\n}\n\nconst getFontSize = ({ fontSize = 1.5, fontSizeUnit = 'rem' }: IProps) => {\n  return fontSize + fontSizeUnit\n}\n\nconst IconSpanStyled = styled.span`\n  font-size: ${getFontSize} !important;\n  color: ${(props: IProps) => props.color};\n`\n\nexport const Icon: React.FC<IProps> = ({\n  iconName,\n  color = Colors.white,\n  fontSize,\n  fontSizeUnit,\n}) =>\n  iconName ? (\n    <IconSpanStyled\n      color={color}\n      fontSize={fontSize}\n      fontSizeUnit={fontSizeUnit}\n      iconName={iconName}\n      className=\"material-icons\"\n    >\n      {iconName}\n    </IconSpanStyled>\n  ) : null\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import React, { MouseEvent } from 'react'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { applyAlphaToColor, Colors, Radiuses, Spacing } from '../styling'\n\nexport interface ITouchButtonProps\n  extends React.HTMLAttributes<HTMLButtonElement> {\n  iconName?: string\n  iconColor?: Colors\n  iconSize?: number\n  text?: string\n  color?: Colors\n  badge?: ReactNode\n  disabled?: boolean\n  textNextToIcon?: boolean\n  className?: string\n  width?: string\n  height?: string\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n}\n\nconst applyAlpha = (alphaValue: number) => (props: ITouchButtonProps) =>\n  applyAlphaToColor(props.color!, alphaValue)\n\nconst TouchButtonStyled = styled.button`\n  min-height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  min-width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  width: ${({ width = '100%' }: ITouchButtonProps) => width};\n  height: ${({ height = '100%' }: ITouchButtonProps) => height};\n  margin: 0;\n  padding: 0 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  /* fallback font size for incompatible browsers */\n  font-size: 1rem;\n  font-size: calc(0.6rem + 0.5vw);\n  transition-duration: 0.2s;\n\n  & .material-icons {\n    vertical-align: middle;\n  }\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nconst ButtonLabelStyled = styled.div`\n  color: white;\n  text-align: center;\n  width: 100%;\n  overflow: hidden;\n`\nconst ButtonLabelNextToIconStyled = styled(ButtonLabelStyled)`\n  width: calc(100% - 4rem);\n  margin: 0 0 0 1rem;\n  text-align: left;\n  display: inline-block;\n  vertical-align: top;\n  overflow: hidden;\n`\n\nexport const TouchButton = React.forwardRef<\n  HTMLButtonElement,\n  ITouchButtonProps\n>(\n  (\n    {\n      children,\n      iconName,\n      iconColor = Colors.white,\n      iconSize = 3,\n      color = Colors.greyMiddle,\n      textNextToIcon = false,\n      badge,\n      text,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    return (\n      <TouchButtonStyled color={color} {...props} ref={forwardedRef}>\n        {iconName && (\n          <Icon iconName={iconName} color={iconColor} fontSize={iconSize} />\n        )}\n\n        {text &&\n          textNextToIcon && (\n            <ButtonLabelNextToIconStyled>{text}</ButtonLabelNextToIconStyled>\n          )}\n\n        {text &&\n          !textNextToIcon && <ButtonLabelStyled>{text}</ButtonLabelStyled>}\n\n        {badge}\n        {children}\n      </TouchButtonStyled>\n    )\n  },\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Spacing } from '../styling'\nimport { MarginBox } from './MarginBox'\n\ninterface IProps {\n  width?: number\n  widthUnit?: string\n  height?: number\n  heightUnit?: string\n  margin?: string\n  className?: string\n}\n\nconst widthProperty = ({\n  width: width,\n  widthUnit: widthUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (width === undefined) {\n    return ''\n  } else {\n    return `width: ${width}${widthUnit}`\n  }\n}\n\nconst heightProperty = ({\n  height: height,\n  heightUnit: heightUnit = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  if (height === undefined) {\n    return ''\n  } else {\n    return `height: ${height}${heightUnit}`\n  }\n}\n\nconst SizerContainer = styled('div')`\n  ${widthProperty};\n  ${heightProperty};\n`\n\nexport const Sizer: React.FC<IProps> = ({\n  width,\n  widthUnit = Spacing.DefaultSizeUnit,\n  height,\n  heightUnit = Spacing.DefaultSizeUnit,\n  margin,\n  children,\n  className,\n  ...props\n}) => {\n  const wrap = (\n    <SizerContainer\n      width={width}\n      widthUnit={widthUnit}\n      height={height}\n      heightUnit={heightUnit}\n      className={className}\n      {...props}\n    >\n      {children}\n    </SizerContainer>\n  )\n\n  return margin === undefined ? (\n    wrap\n  ) : (\n    <MarginBox margin={margin}>{wrap}</MarginBox>\n  )\n}\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TMenuModel } from './MenuModel'\n\nexport const MenuBaseModel = BaseModel.named('MenuBase')\n  .volatile(() => ({\n    filterInput: '',\n  }))\n  .actions(self => ({\n    setFilterInput(input: string) {\n      self.filterInput = input\n    },\n  }))\n  .views(self => ({\n    get branchId() {\n      return getParent<TMenuModel>(self).settings.branchId\n    },\n  }))\n","import { autorun, observable } from 'mobx'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { appConfig } from '../config'\nimport { RM } from '../helpers/ramda'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  title: string\n}\n\nconst TitleStyled = styled.h1`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  margin: 0.5rem 0.5rem 0 0.5rem;\n  white-space: nowrap;\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.9);\n`\n\nconst observableTitles = observable.array<string>([])\n\nautorun(() => {\n  const lastTitle = Array.from(observableTitles).pop()\n  if (lastTitle) {\n    document.title = `${lastTitle} :: ${appConfig.pageTitleSuffix}`\n  } else {\n    document.title = appConfig.pageTitleSuffix\n  }\n})\n\nconst PageTitleDisplay: React.FC = () => (\n  <Observer>\n    {() => <TitleStyled>{observableTitles.join(' - ')}</TitleStyled>}\n  </Observer>\n)\n\nexport class PageTitle extends React.Component<IProps> {\n  static Route = PageTitleRoute\n  static Display = PageTitleDisplay\n  componentDidMount() {\n    observableTitles.push(this.props.title)\n  }\n  componentDidUpdate(prevProps: IProps) {\n    const idx = observableTitles.findIndex(RM.equals(prevProps.title))\n    if (idx >= 0) {\n      observableTitles.splice(idx, 1, this.props.title)\n    }\n  }\n  componentWillUnmount() {\n    observableTitles.remove(this.props.title)\n  }\n  render() {\n    return null\n  }\n}\n\nfunction PageTitleRoute({ title, ...props }: IProps & RouteProps) {\n  return <Route {...props} render={() => <PageTitle title={title} />} />\n}\n","import Color from 'color'\nimport styled, { css } from 'styled-components'\n\nimport { Colors, Radiuses } from '../styling'\n\ninterface IProps {\n  color?: string\n  textColor?: string\n  padding?: number\n  stretchToParent?: boolean\n}\n\nexport const Card = styled.div`\n  background: ${getBackgroundColor};\n  color: ${getTextColor};\n  border-radius: ${Radiuses.Card};\n  padding: ${getPadding}rem;\n  margin: 0 0 0.5rem 0;\n  position: relative;\n  ${applyStretchToParentStyle};\n`\n\nCard.displayName = 'Card'\n\nfunction getPadding({ padding = 0.5 }: IProps) {\n  return padding\n}\n\nfunction getBackgroundColor({ color }: IProps) {\n  return Color(color || Colors.greyLight)\n    .alpha(0.8)\n    .lighten(0.4)\n    .string()\n}\n\nfunction getTextColor(props: IProps) {\n  return props.textColor || Colors.black\n}\n\nfunction applyStretchToParentStyle({ stretchToParent = false }: IProps) {\n  if (!stretchToParent) {\n    return ''\n  }\n  return css`\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  `\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\n\nimport { IPageLayoutProps, PageLayout } from '../molecules/PageLayout'\n\ninterface IFullPageLayoutProps extends IPageLayoutProps {\n  width?: number\n}\n\nfunction getLayout(width: number): Layout[] {\n  return [{ i: 'full', x: 0, y: 1, w: width, h: 10 }]\n}\n\nexport const FullPageLayout: React.FC<IFullPageLayoutProps> = ({\n  children,\n  width = 16,\n  ...props\n}) => (\n  <PageLayout layouts={getLayout(width)} {...props}>\n    <div key=\"full\">{children}</div>\n  </PageLayout>\n)\n","import { DocumentNode } from 'graphql'\nimport { Lambda } from 'mobx'\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\n\nimport { Loading } from '../atoms/Loading'\nimport { whenGoingOnline } from '../helpers/offline'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean\n    refetchOnConnectionLost?: boolean\n  }\n  const GQuery: React.FC<IProps> = props => {\n    const cleanup = useRef<Lambda[]>([])\n    const executeCleanup = useCallback(() => {\n      cleanup.current.forEach(fn => fn())\n      cleanup.current.length = 0\n    }, [])\n\n    useEffect(\n      () => {\n        return executeCleanup\n      },\n      [cleanup.current.length],\n    )\n\n    const {\n      render,\n      renderFragment,\n      renderLoading = true,\n      renderError = true,\n      refetchOnConnectionLost = false,\n      children,\n      ...rest\n    } = props\n\n    return (\n      // @ts-ignore Some weird changes in @types/react\n      <Query query={query} {...rest}>\n        {result => {\n          if (result.loading) {\n            if (typeof renderLoading === 'function') {\n              return renderLoading(result)\n            } else if (renderLoading === true) {\n              return <Loading />\n            }\n          }\n          if (result.error) {\n            throw result.error\n          }\n          if (refetchOnConnectionLost) {\n            cleanup.current.push(whenGoingOnline(result.refetch))\n          }\n          if (result.data) {\n            if (renderFragment) {\n              return <>{renderFragment(result.data, result)}</>\n            }\n            if (render) {\n              return render(result.data, result)\n            }\n          }\n          return children || null\n        }}\n      </Query>\n    )\n  }\n  return GQuery\n}\n","import React from 'react'\n\nimport { PageTitle } from '../atoms/PageTitle'\nimport { i18n } from '../i18n'\n\nexport const NotFoundPage: React.FC = () => (\n  <>\n    <PageTitle title={i18n.t`Not found`} />\n    <h1>{i18n.t`There is nothing here, sorry!`}</h1>\n  </>\n)\n","import { SnackbarContextNext } from 'notistack/build/SnackbarContext'\nimport { useCallback, useContext } from 'react'\n\nenum EVariant {\n  default = 'default',\n  error = 'error',\n  success = 'success',\n  warning = 'warning',\n  info = 'info',\n}\n\ninterface IEnqueueOptions {\n  /** Type of the snackbar */\n  variant: EVariant\n  /** Event fired when user clicks on action button (if any) */\n  onClickAction(): void\n  /**\n   * You can pass material-ui Snackbar props here, and they will be applied to this individual snackbar.\n   * for example, this particular snackbar will be dismissed after 1sec.\n   */\n  autoHideDuration: number\n  action: ReactNode[]\n}\n\ninterface IEnqueueSnackbar {\n  (message: string, options?: Partial<IEnqueueOptions>)\n}\n\nconst successVariant = { variant: EVariant.success }\nconst errorVariant = { variant: EVariant.error }\nconst warningVariant = { variant: EVariant.warning }\nconst infoVariant = { variant: EVariant.info }\n\nexport function useSnackBar() {\n  const enqueueSnackbar: IEnqueueSnackbar = useContext(SnackbarContextNext)\n  const enqueueSuccess = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, successVariant),\n    [],\n  )\n  const enqueueError = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, errorVariant),\n    [],\n  )\n  const enqueueWarning = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, warningVariant),\n    [],\n  )\n  const enqueueInfo = useCallback(\n    (errorMessage: string) => enqueueSnackbar(errorMessage, infoVariant),\n    [],\n  )\n  return {\n    enqueueSnackbar,\n    enqueueSuccess,\n    enqueueError,\n    enqueueWarning,\n    enqueueInfo,\n  }\n}\n","import Color from 'color'\n\nimport { RM } from './helpers/ramda'\n\nexport enum Colors {\n  yellow = '#FFDB2B',\n  pink = '#FF2B95',\n  blue = '#2441FF',\n  red = '#FF1C1C',\n  green = '#179B12',\n  turquoise = '#2BFFFF',\n  orange = '#FF862B',\n  violet = '#6D4F8C',\n  black = '#000000',\n  greyDarkest = '#080808',\n  greyDark = '#2C2C2C',\n  greyMiddle = '#939393',\n  greyLight = '#EDEDED',\n  white = '#FFFFFF',\n}\n\nexport const applyAlphaToColor = RM.curry((color: Colors, alphaValue: number) =>\n  Color(color)\n    .alpha(alphaValue)\n    .string(),\n)\n\nexport enum Radiuses {\n  Card = '0.5rem',\n  Button = '0.5rem',\n  TextComponent = '0.25rem',\n}\n\nexport const Spacing = {\n  MarginAroundFormComponents: '0.1rem',\n  Small: '0.25rem',\n  Middle: '0.5rem',\n  LayoutGridCellMargin: '0.5rem',\n  ButtonHeight: 3.4375,\n  DefaultInputWidth: 20,\n  DefaultSizeUnit: 'rem',\n  ButtonColumnWidthPx: 55,\n  InfoMessageFontSize: '1.375rem',\n}\n\nexport const FontSizes = {\n  CompactCard: '0.95rem',\n  CompactCardBig: '1rem',\n}\n","import debug from 'debug'\nimport React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\n\ninterface IRedirectToLoginProps {\n  useOrigin?: boolean\n}\n\nconst log = debug('routing')\n\nexport const RedirectToLogin: React.FC<IRedirectToLoginProps> = ({\n  useOrigin = true,\n}) => (\n  <Route\n    path=\"/login\"\n    children={({ match, location }) => {\n      if (match) {\n        return null\n      }\n      log('redirecting to login...')\n      return (\n        <Redirect\n          to={{\n            pathname: '/login',\n            state: { origin: useOrigin ? location.pathname : '/' },\n          }}\n        />\n      )\n    }}\n  />\n)\n","import { isSameDay } from 'date-fns'\nimport { format, formatWithOptions } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\nimport numeral from 'numeral'\n\nimport { FAddressFragment, FUserNameFragment } from '../graph/generated'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const fullDateFormat = 'dddd LL'\nexport const formatFullDate = formatLocale(fullDateFormat)\n\nexport const dateFormat = 'D.M.YYYY'\nexport const formatDate = formatLocale(dateFormat)\n\nexport const dateFormatISO = 'YYYY-MM-DD'\nexport const formatDateISO = format(dateFormatISO)\n\nexport const timeFormat = 'H:mm'\nexport const formatTime = formatLocale(timeFormat)\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const priceFormat = '0,0.[00]'\nexport const formatPrice = price => numeral(price).format(priceFormat)\n\nexport const formatTimeWithoutTodayDate = (time: string) =>\n  isSameDay(time, new Date()) ? formatTime(time) : formatDateTime(time)\n\nexport const formatAddress = (address: FAddressFragment) => {\n  if (!address) {\n    return ''\n  }\n  if (!address.street) {\n    if (address.city && address.houseNumber) {\n      return `${address.city} ${address.houseNumber}, ${address.state}`\n    }\n    if (address.city) {\n      if (address.state) {\n        return `${address.city}, ${address.state}`\n      }\n      return address.city\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n\nexport function formatFullName(user: FUserNameFragment) {\n  return `${user.lastName} ${user.firstName}`.trim()\n}\n","import * as RM from 'ramda'\n\nexport { RM }\n","import debug from 'debug'\nimport { getEnv, getPath, getRoot, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { IRootEnvironment } from '../atoms/RootProvider'\nimport { TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    return debug(`model${getPath(self)}`)\n  },\n  get client() {\n    const client = getEnv<IRootEnvironment>(self).apolloClient\n    if (!client) {\n      throw new VError('Apollo client is missing from environment setup')\n    }\n    return client\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n}))\n","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<string>\n\n  readonly includeOldFinished?: boolean\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputStatisticCreate {\n  readonly dateFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly dateTimeFrom?: Maybe<string>\n\n  readonly dateTimeTo?: Maybe<string>\n\n  readonly branches: ReadonlyArray<string>\n\n  readonly drivers?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: string\n\n  readonly closed?: boolean\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly minCount?: number\n\n  readonly maxCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly minCount?: Maybe<number>\n\n  readonly maxCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityCreate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityUpdate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment method used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<string>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: number\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n  Pln = 'PLN',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  FeAdmin = 'FE_ADMIN',\n  FeKitchen = 'FE_KITCHEN',\n  Driver = 'DRIVER',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n  Pl = 'PL',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n  Pwa = 'PWA',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type MPasswordChangeVariables = {\n  readonly password: string\n}\n\nexport type MPasswordChangeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateUserPassword: MPasswordChangeUpdateUserPassword\n}\n\nexport type MPasswordChangeUpdateUserPassword = {\n  readonly __typename?: 'UserUpdatedPassword'\n\n  readonly id: string\n\n  readonly token: string\n}\n\nexport type GCreateSpecificBusinessHourVariables = {\n  readonly input: InputBusinessHourSpecificDateCreate\n}\n\nexport type GCreateSpecificBusinessHourMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GCreateSpecificBusinessHourResult\n}\n\nexport type GCreateSpecificBusinessHourResult = GSpecificBusinessHourFragment\n\nexport type GDeleteSpecificBusinessHourVariables = {\n  readonly id: string\n}\n\nexport type GDeleteSpecificBusinessHourMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: GDeleteSpecificBusinessHourResult\n}\n\nexport type GDeleteSpecificBusinessHourResult = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n}\n\nexport type GSpecificBusinessHoursVariables = {\n  readonly branchId: string\n}\n\nexport type GSpecificBusinessHoursQuery = {\n  readonly __typename?: 'Query'\n\n  readonly businessHours: ReadonlyArray<GSpecificBusinessHoursBusinessHours>\n}\n\nexport type GSpecificBusinessHoursBusinessHours = GSpecificBusinessHourFragment\n\nexport type GOrderVamVariables = {\n  readonly branchId: string\n  readonly phone: string\n}\n\nexport type GOrderVamQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vamCustomer: GOrderVamVamCustomer\n}\n\nexport type GOrderVamVamCustomer = {\n  readonly __typename?: 'CustomerInformation'\n\n  readonly isFound: boolean\n\n  readonly email: string\n\n  readonly firstName: string\n\n  readonly lastName: string\n\n  readonly lastOrder: Maybe<GOrderVamLastOrder>\n\n  readonly locations: ReadonlyArray<GOrderVamLocations>\n}\n\nexport type GOrderVamLastOrder = {\n  readonly __typename?: 'Order'\n\n  readonly note: Maybe<string>\n}\n\nexport type GOrderVamLocations = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly state: Maybe<string>\n\n  readonly gps: Maybe<GOrderVamGps>\n}\n\nexport type GOrderVamGps = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type GOrderPromoVariables = {\n  readonly branchId: string\n}\n\nexport type GOrderPromoQuery = {\n  readonly __typename?: 'Query'\n\n  readonly promoCodes: ReadonlyArray<GOrderPromoPromoCodes>\n}\n\nexport type GOrderPromoPromoCodes = {\n  readonly __typename?: 'PromoCode'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type GSortMenuCategoryVariables = {\n  readonly categoryId: string\n  readonly offset: number\n}\n\nexport type GSortMenuCategoryMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly success: boolean\n}\n\nexport type GMenuCategoryCreateVariables = {\n  readonly input: InputWareCategoryCreate\n}\n\nexport type GMenuCategoryCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createWareCategory: GMenuCategoryCreateCreateWareCategory\n}\n\nexport type GMenuCategoryCreateCreateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type GMenuCategoryUpdateVariables = {\n  readonly categoryId: string\n  readonly input: InputWareCategoryUpdate\n}\n\nexport type GMenuCategoryUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: GMenuCategoryUpdateUpdateWareCategory\n}\n\nexport type GMenuCategoryUpdateUpdateWareCategory = FMenuCategoryFragment\n\nexport type GMenuCategoryDeleteVariables = {\n  readonly categoryId: string\n}\n\nexport type GMenuCategoryDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyWareCategory: GMenuCategoryDeleteDestroyWareCategory\n}\n\nexport type GMenuCategoryDeleteDestroyWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n}\n\nexport type GMenuRecipeVisibilityVariables = {\n  readonly recipeId: string\n  readonly visible: boolean\n}\n\nexport type GMenuRecipeVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateRecipe: GMenuRecipeVisibilityUpdateRecipe\n}\n\nexport type GMenuRecipeVisibilityUpdateRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type GMenuRecipeCreateVariables = {\n  readonly recipe: InputRecipeCreate\n}\n\nexport type GMenuRecipeCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createRecipe: GMenuRecipeCreateCreateRecipe\n}\n\nexport type GMenuRecipeCreateCreateRecipe = GMenuRecipeFragment\n\nexport type GMenuRecipeUpdateVariables = {\n  readonly recipeId: string\n  readonly recipe: InputRecipeUpdate\n}\n\nexport type GMenuRecipeUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateRecipe: GMenuRecipeUpdateUpdateRecipe\n}\n\nexport type GMenuRecipeUpdateUpdateRecipe = GMenuRecipeFragment\n\nexport type GMenuRecipeDeleteVariables = {\n  readonly recipeId: string\n}\n\nexport type GMenuRecipeDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyRecipe: GMenuRecipeDeleteDestroyRecipe\n}\n\nexport type GMenuRecipeDeleteDestroyRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type GMenuStockCreateVariables = {\n  readonly stockItem: InputStockItemCreate\n}\n\nexport type GMenuStockCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createStockItem: GMenuStockCreateCreateStockItem\n}\n\nexport type GMenuStockCreateCreateStockItem = GMenuStockItemFragment\n\nexport type GMenuStockUpdateVariables = {\n  readonly stockId: string\n  readonly stockItem: InputStockItemUpdate\n}\n\nexport type GMenuStockUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateStockItem: GMenuStockUpdateUpdateStockItem\n}\n\nexport type GMenuStockUpdateUpdateStockItem = GMenuStockItemFragment\n\nexport type GMenuStockDeleteVariables = {\n  readonly stockId: string\n}\n\nexport type GMenuStockDeleteMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyStockItem: GMenuStockDeleteDestroyStockItem\n}\n\nexport type GMenuStockDeleteDestroyStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n}\n\nexport type GAllergensVariables = {}\n\nexport type GAllergensQuery = {\n  readonly __typename?: 'Query'\n\n  readonly allergens: ReadonlyArray<GAllergensAllergens>\n}\n\nexport type GAllergensAllergens = FMenuAllergenFragment\n\nexport type GCurrenciesVariables = {\n  readonly branchId: string\n}\n\nexport type GCurrenciesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly currencies: ReadonlyArray<GCurrenciesCurrencies>\n\n  readonly companyBranch: GCurrenciesCompanyBranch\n}\n\nexport type GCurrenciesCurrencies = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n\n  readonly code: string\n}\n\nexport type GCurrenciesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly address: GCurrenciesAddress\n}\n\nexport type GCurrenciesAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<GCurrenciesCountry>\n}\n\nexport type GCurrenciesCountry = {\n  readonly __typename?: 'Country'\n\n  readonly currency: GCurrenciesCurrency\n}\n\nexport type GCurrenciesCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly enum: CurrencyEnum\n}\n\nexport type GVatsVariables = {\n  readonly branchId: string\n}\n\nexport type GVatsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vats: ReadonlyArray<GVatsVats>\n}\n\nexport type GVatsVats = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n\n  readonly vat: number\n}\n\nexport type GWareUnitsVariables = {}\n\nexport type GWareUnitsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareUnits: ReadonlyArray<GWareUnitsWareUnits>\n}\n\nexport type GWareUnitsWareUnits = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: WareUnitEnum\n}\n\nexport type GMenuRecipeFormVariables = {\n  readonly recipeId: string\n}\n\nexport type GMenuRecipeFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: GMenuRecipeFormRecipe\n}\n\nexport type GMenuRecipeFormRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly image: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly visible: boolean\n\n  readonly recipeType: GMenuRecipeFormRecipeType\n\n  readonly sourcePrices: ReadonlyArray<GMenuRecipeFormSourcePrices>\n\n  readonly sideDishes: ReadonlyArray<GMenuRecipeFormSideDishes>\n\n  readonly categories: ReadonlyArray<GMenuRecipeFormCategories>\n\n  readonly sourceAssociatedRecipes: ReadonlyArray<\n    GMenuRecipeFormSourceAssociatedRecipes\n  >\n\n  readonly sourceIngredients: ReadonlyArray<GMenuRecipeFormSourceIngredients>\n}\n\nexport type GMenuRecipeFormRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuRecipeFormSourcePrices = GMenuRecipePriceFragment\n\nexport type GMenuRecipeFormSideDishes = FMenuCategoryListItemFragment\n\nexport type GMenuRecipeFormCategories = FMenuCategoryListItemFragment\n\nexport type GMenuRecipeFormSourceAssociatedRecipes = {\n  readonly __typename?: 'RecipeRelation'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipeFormPriceType\n\n  readonly recipe: GMenuRecipeForm_Recipe\n}\n\nexport type GMenuRecipeFormPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipeForm_Recipe = GMenuAssocRecipeFragment\n\nexport type GMenuRecipeFormSourceIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly quantity: number\n\n  readonly stockItem: GMenuRecipeFormStockItem\n}\n\nexport type GMenuRecipeFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly label: string\n\n  readonly wareUnit: GMenuRecipeFormWareUnit\n\n  readonly allergens: ReadonlyArray<GMenuRecipeFormAllergens>\n}\n\nexport type GMenuRecipeFormWareUnit = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type GMenuRecipeFormAllergens = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly enum: AllergenEnum\n}\n\nexport type GMenuRecipeFormAssocVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuRecipeFormAssocQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<GMenuRecipeFormAssocRecipes>\n}\n\nexport type GMenuRecipeFormAssocRecipes = GMenuAssocRecipeFragment\n\nexport type GMenuRecipeDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuRecipeDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GMenuRecipeDefaultsCompanyBranch\n}\n\nexport type GMenuRecipeDefaultsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly vats: ReadonlyArray<GMenuRecipeDefaultsVats>\n\n  readonly currency: GMenuRecipeDefaultsCurrency\n}\n\nexport type GMenuRecipeDefaultsVats = {\n  readonly __typename?: 'VatPriceType'\n\n  readonly vatId: string\n\n  readonly priceType: GMenuRecipeDefaultsPriceType\n}\n\nexport type GMenuRecipeDefaultsPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipeDefaultsCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GMenuStockFormVariables = {\n  readonly stockId: string\n}\n\nexport type GMenuStockFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: GMenuStockFormStockItem\n}\n\nexport type GMenuStockFormStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly note: string\n\n  readonly nameLabel: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly wareUnit: GMenuStockFormWareUnit\n\n  readonly allergens: ReadonlyArray<GMenuStockFormAllergens>\n\n  readonly companyBranch: GMenuStockFormCompanyBranch\n}\n\nexport type GMenuStockFormWareUnit = FMenuWareUnitFragment\n\nexport type GMenuStockFormAllergens = FMenuAllergenFragment\n\nexport type GMenuStockFormCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type GMenuStockDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GMenuStockDefaultsCompanyBranch\n}\n\nexport type GMenuStockDefaultsCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowNegative: boolean\n}\n\nexport type GOrderBranchLocationVariables = {\n  readonly branchId: string\n}\n\nexport type GOrderBranchLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GOrderBranchLocationCompanyBranch\n}\n\nexport type GOrderBranchLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GOrderBranchLocationGps\n}\n\nexport type GOrderBranchLocationGps = FGeoPointFragment\n\nexport type GOrderLocationVariables = {\n  readonly orderId: string\n}\n\nexport type GOrderLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GOrderLocationOrder\n}\n\nexport type GOrderLocationOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly gps: Maybe<GOrderLocationGps>\n}\n\nexport type GOrderLocationGps = FGeoPointFragment\n\nexport type GOrderDetailVariables = {\n  readonly id: string\n}\n\nexport type GOrderDetailQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GOrderDetailOrder\n}\n\nexport type GOrderDetailOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly companyBranch: GOrderDetailCompanyBranch\n\n  readonly customer: GOrderDetailCustomer\n\n  readonly customerOrdersCountCurrent: number\n\n  readonly customerOrdersCountTotal: number\n\n  readonly note: Maybe<string>\n\n  readonly previousNote: Maybe<string>\n\n  readonly allAppliedRules: ReadonlyArray<string>\n\n  readonly items: ReadonlyArray<GOrderDetailItems>\n\n  readonly totalSum: GOrderDetailTotalSum\n\n  readonly transportFee: GOrderDetailTransportFee\n\n  readonly coverPrice: GOrderDetailCoverPrice\n\n  readonly totalDiscount: GOrderDetailTotalDiscount\n\n  readonly orderOrigin: GOrderDetailOrderOrigin\n\n  readonly tip: GOrderDetailTip\n} & (FOrderTimingFragment & FOrderDriverFragment)\n\nexport type GOrderDetailCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type GOrderDetailCustomer = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly emails: ReadonlyArray<GOrderDetailEmails>\n\n  readonly phones: ReadonlyArray<GOrderDetailPhones>\n}\n\nexport type GOrderDetailEmails = FEmailFragment\n\nexport type GOrderDetailPhones = FPhoneFragment\n\nexport type GOrderDetailItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<GOrderDetailSidedishes>\n} & GOrderDetailWareFragment\n\nexport type GOrderDetailSidedishes = GOrderDetailWareFragment\n\nexport type GOrderDetailTotalSum = FPriceFragment\n\nexport type GOrderDetailTransportFee = FPriceFragment\n\nexport type GOrderDetailCoverPrice = FPriceFragment\n\nexport type GOrderDetailTotalDiscount = FPriceFragment\n\nexport type GOrderDetailOrderOrigin = {\n  readonly __typename?: 'OrderOrigin'\n\n  readonly code: string\n\n  readonly enum: OrderOriginEnum\n}\n\nexport type GOrderDetailTip = FPriceFragment\n\nexport type GOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n  readonly includeOldFinished?: Maybe<boolean>\n}\n\nexport type GOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<GOrderListOrders>\n\n  readonly orderStateCategories: ReadonlyArray<GOrderListOrderStateCategories>\n}\n\nexport type GOrderListOrders = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (FOrderStateCategoryFragment &\n  GOrderListTickerFragment &\n  GOrderMarkerFragment)\n\nexport type GOrderListOrderStateCategories = {\n  readonly __typename?: 'OrderStateCategory'\n\n  readonly code: string\n\n  readonly enum: OrderStateCategoryEnum\n}\n\nexport type SOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SOrderListUpdatedOrder\n}\n\nexport type SOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SOrderListOrder>\n}\n\nexport type SOrderListOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & (FOrderStateCategoryFragment &\n  GOrderListTickerFragment &\n  GOrderMarkerFragment)\n\nexport type GCreateZoneVariables = {\n  readonly branchId: string\n  readonly points?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n}\n\nexport type GCreateZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createZone: GCreateZoneCreateZone\n}\n\nexport type GCreateZoneCreateZone = FZoneFragment\n\nexport type GUpdateZonePriorityVariables = {\n  readonly zoneId: string\n  readonly offset: number\n}\n\nexport type GUpdateZonePriorityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZonePriority: ReadonlyArray<\n    GUpdateZonePriorityUpdateZonePriority\n  >\n}\n\nexport type GUpdateZonePriorityUpdateZonePriority = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly priority: number\n}\n\nexport type GDestroyZoneVariables = {\n  readonly zoneId: string\n}\n\nexport type GDestroyZoneMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyZone: GDestroyZoneDestroyZone\n}\n\nexport type GDestroyZoneDestroyZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n}\n\nexport type GZonesVariables = {\n  readonly branchesId: ReadonlyArray<string>\n}\n\nexport type GZonesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zones: ReadonlyArray<GZonesZones>\n}\n\nexport type GZonesZones = FZoneFragment\n\nexport type GZoneLocationVariables = {\n  readonly zoneId: string\n}\n\nexport type GZoneLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zone: GZoneLocationZone\n}\n\nexport type GZoneLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly companyBranch: GZoneLocationCompanyBranch\n}\n\nexport type GZoneLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GZoneLocationGps\n}\n\nexport type GZoneLocationGps = FGeoPointFragment\n\nexport type GZoneBranchLocationVariables = {\n  readonly branchId: string\n}\n\nexport type GZoneBranchLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GZoneBranchLocationCompanyBranch\n}\n\nexport type GZoneBranchLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly gps: GZoneBranchLocationGps\n}\n\nexport type GZoneBranchLocationGps = FGeoPointFragment\n\nexport type GZoneColorsVariables = {}\n\nexport type GZoneColorsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly zoneColors: ReadonlyArray<GZoneColorsZoneColors>\n}\n\nexport type GZoneColorsZoneColors = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type QAddressSuggestVariables = {\n  readonly search: string\n}\n\nexport type QAddressSuggestQuery = {\n  readonly __typename?: 'Query'\n\n  readonly suggest: ReadonlyArray<QAddressSuggestSuggest>\n}\n\nexport type QAddressSuggestSuggest = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly gps: Maybe<QAddressSuggestGps>\n} & FAddressFragment\n\nexport type QAddressSuggestGps = FGeoPointFragment\n\nexport type MOrderStateVariables = {\n  readonly orderId: string\n  readonly state: OrderStateEnum\n}\n\nexport type MOrderStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MOrderStateAddOrderState\n}\n\nexport type MOrderStateAddOrderState = FOrderStateCategoryFragment &\n  FOrderTimingFragment\n\nexport type QLogoutWidgetVariables = {\n  readonly id: string\n}\n\nexport type QLogoutWidgetQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: QLogoutWidgetUser\n}\n\nexport type QLogoutWidgetUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type MAddOrderPromoVariables = {\n  readonly orderId: string\n  readonly code: string\n}\n\nexport type MAddOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderPromoCode: MAddOrderPromoAddOrderPromoCode\n}\n\nexport type MAddOrderPromoAddOrderPromoCode = {\n  readonly __typename?: 'OrderWithErrors'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MAddOrderPromoOrder\n}\n\nexport type MAddOrderPromoOrder = FCreateOrderFragment\n\nexport type MCancelOrderVariables = {\n  readonly orderId: string\n}\n\nexport type MCancelOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderState: MCancelOrderAddOrderState\n}\n\nexport type MCancelOrderAddOrderState = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n}\n\nexport type MCreateOrderAcceptVariables = {\n  readonly orderId: string\n  readonly customer: InputCustomerCreate\n  readonly deliverAt?: Maybe<string>\n  readonly note?: Maybe<string>\n}\n\nexport type MCreateOrderAcceptMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: MCreateOrderAcceptFinishOrder\n}\n\nexport type MCreateOrderAcceptFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MCreateOrderAcceptOrder\n}\n\nexport type MCreateOrderAcceptOrder = FCreateOrderFragment\n\nexport type MCreateOrderAddRecipeVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderAddRecipeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrderRecipe: MCreateOrderAddRecipeCreateOrderRecipe\n}\n\nexport type MCreateOrderAddRecipeCreateOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderNewVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly callEventId?: Maybe<string>\n}\n\nexport type MCreateOrderNewMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrder: MCreateOrderNewCreateOrder\n}\n\nexport type MCreateOrderNewCreateOrder = FCreateOrderFragment\n\nexport type MCreateOrderRemoveItemVariables = {\n  readonly itemId: string\n}\n\nexport type MCreateOrderRemoveItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyOrderRecipe: MCreateOrderRemoveItemDestroyOrderRecipe\n}\n\nexport type MCreateOrderRemoveItemDestroyOrderRecipe = FCreateOrderFragment\n\nexport type MCreateOrderUpdateVariables = {\n  readonly orderId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly deliverAt?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport type MCreateOrderUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MCreateOrderUpdateUpdateOrder\n}\n\nexport type MCreateOrderUpdateUpdateOrder = FCreateOrderFragment\n\nexport type MCreateOrderUpdateItemVariables = {\n  readonly itemId: string\n  readonly sidedishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MCreateOrderUpdateItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipe: MCreateOrderUpdateItemUpdateOrderRecipe\n}\n\nexport type MCreateOrderUpdateItemUpdateOrderRecipe = FCreateOrderFragment\n\nexport type MRemoveOrderPromoVariables = {\n  readonly orderId: string\n  readonly codeId: string\n}\n\nexport type MRemoveOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly removeOrderPromoCode: MRemoveOrderPromoRemoveOrderPromoCode\n}\n\nexport type MRemoveOrderPromoRemoveOrderPromoCode = FCreateOrderFragment\n\nexport type QCreateOrderItemVariables = {\n  readonly itemId: string\n}\n\nexport type QCreateOrderItemQuery = {\n  readonly __typename?: 'Query'\n\n  readonly item: QCreateOrderItemItem\n}\n\nexport type QCreateOrderItemItem = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItemRecipe\n\n  readonly selectedSidedishes: ReadonlyArray<QCreateOrderItemSelectedSidedishes>\n}\n\nexport type QCreateOrderItemRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QCreateOrderItemSelectedSidedishes = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCreateOrderItem_Recipe\n}\n\nexport type QCreateOrderItem_Recipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type QCreateOrderRecipeVariables = {\n  readonly recipeId: string\n}\n\nexport type QCreateOrderRecipeQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QCreateOrderRecipeRecipe\n}\n\nexport type QCreateOrderRecipeRecipe = FCreateOrderRecipeSidedishesFragment\n\nexport type QOrderCartVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderCartQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderCartOrder\n}\n\nexport type QOrderCartOrder = FCreateOrderFragment\n\nexport type QOrderFormDeliverAtDefaultsVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderFormDeliverAtDefaultsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly times: QOrderFormDeliverAtDefaultsTimes\n}\n\nexport type QOrderFormDeliverAtDefaultsTimes = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly deliveryTime: number\n\n  readonly pickupTime: number\n}\n\nexport type QOrderMenuVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderMenuQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orderMenu: ReadonlyArray<QOrderMenuOrderMenu>\n}\n\nexport type QOrderMenuOrderMenu = FOrderMenuCategoryFragment\n\nexport type QValidateLocationVariables = {\n  readonly branchId: string\n  readonly latitude: number\n  readonly longitude: number\n}\n\nexport type QValidateLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly resolveLocation: QValidateLocationResolveLocation\n}\n\nexport type QValidateLocationResolveLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly inDeliveryLocation: boolean\n\n  readonly zone: Maybe<QValidateLocationZone>\n}\n\nexport type QValidateLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly minimalOrderPrice: QValidateLocationMinimalOrderPrice\n}\n\nexport type QValidateLocationMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type MKitchenRecipeStateVariables = {\n  readonly recipeId: string\n  readonly state: OrderRecipeStateEnum\n}\n\nexport type MKitchenRecipeStateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipeState: MKitchenRecipeStateUpdateOrderRecipeState\n}\n\nexport type MKitchenRecipeStateUpdateOrderRecipeState = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly orderRecipeState: MKitchenRecipeStateOrderRecipeState\n\n  readonly order: MKitchenRecipeStateOrder\n}\n\nexport type MKitchenRecipeStateOrderRecipeState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type MKitchenRecipeStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type QKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type QKitchenOrderListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly orders: ReadonlyArray<QKitchenOrderListOrders>\n}\n\nexport type QKitchenOrderListOrders = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FKitchenOrderFragment\n\nexport type SKitchenOrderListVariables = {\n  readonly branches?: Maybe<ReadonlyArray<string>>\n  readonly categories?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n}\n\nexport type SKitchenOrderListSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrder: SKitchenOrderListUpdatedOrder\n}\n\nexport type SKitchenOrderListUpdatedOrder = {\n  readonly __typename?: 'OrderUpdateSubscription'\n\n  readonly order: Maybe<SKitchenOrderListOrder>\n}\n\nexport type SKitchenOrderListOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FKitchenOrderFragment\n\nexport type QUserBootstrapVariables = {\n  readonly userId: string\n}\n\nexport type QUserBootstrapQuery = {\n  readonly __typename?: 'Query'\n\n  readonly user: QUserBootstrapUser\n\n  readonly permissions: QUserBootstrapPermissions\n\n  readonly access: QUserBootstrapAccess\n}\n\nexport type QUserBootstrapUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly language: QUserBootstrapLanguage\n\n  readonly roles: ReadonlyArray<QUserBootstrapRoles>\n\n  readonly branches: ReadonlyArray<QUserBootstrapBranches>\n}\n\nexport type QUserBootstrapLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly rawCode: string\n}\n\nexport type QUserBootstrapRoles = {\n  readonly __typename?: 'Role'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type QUserBootstrapBranches = FCompanyBranchFragment\n\nexport type QUserBootstrapPermissions = {\n  readonly __typename?: 'UserPermission'\n\n  readonly canCancelOrders: boolean\n\n  readonly canCreateOrder: boolean\n}\n\nexport type QUserBootstrapAccess = {\n  readonly __typename?: '__Schema'\n\n  readonly queries: QUserBootstrapQueries\n\n  readonly mutations: Maybe<QUserBootstrapMutations>\n\n  readonly subscriptions: Maybe<QUserBootstrapSubscriptions>\n}\n\nexport type QUserBootstrapQueries = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrapFields>>\n}\n\nexport type QUserBootstrapFields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QUserBootstrapMutations = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrap_Fields>>\n}\n\nexport type QUserBootstrap_Fields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QUserBootstrapSubscriptions = {\n  readonly __typename?: '__Type'\n\n  readonly fields: Maybe<ReadonlyArray<QUserBootstrap__Fields>>\n}\n\nexport type QUserBootstrap__Fields = {\n  readonly __typename?: '__Field'\n\n  readonly name: string\n}\n\nexport type QOrderCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n  readonly categories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type QOrderCountQuery = {\n  readonly __typename?: 'Query'\n\n  readonly ordersCount: number\n}\n\nexport type SOrderCallVariables = {}\n\nexport type SOrderCallSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly call: SOrderCallCall\n}\n\nexport type SOrderCallCall = {\n  readonly __typename?: 'UserCallingCustomerSubscription'\n\n  readonly eventId: string\n\n  readonly phone: string\n\n  readonly prefix: string\n\n  readonly isRinging: boolean\n}\n\nexport type SOrderCountVariables = {\n  readonly branchesId: ReadonlyArray<string>\n}\n\nexport type SOrderCountSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly updatedOrdersCount: SOrderCountUpdatedOrdersCount\n}\n\nexport type SOrderCountUpdatedOrdersCount = {\n  readonly __typename?: 'OrderCountSubscription'\n\n  readonly ordersCount: number\n}\n\nexport type MMenuCategoryVisibilityVariables = {\n  readonly categoryId: string\n  readonly visible: boolean\n}\n\nexport type MMenuCategoryVisibilityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateWareCategory: MMenuCategoryVisibilityUpdateWareCategory\n}\n\nexport type MMenuCategoryVisibilityUpdateWareCategory = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly visible: boolean\n}\n\nexport type MMenuStockQuantityVariables = {\n  readonly stockItem: string\n  readonly quantityChange: number\n}\n\nexport type MMenuStockQuantityMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly changeAmountStockItem: MMenuStockQuantityChangeAmountStockItem\n}\n\nexport type MMenuStockQuantityChangeAmountStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly quantity: number\n}\n\nexport type QMenuCategoryVariables = {\n  readonly categoryId: string\n}\n\nexport type QMenuCategoryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly category: QMenuCategoryCategory\n}\n\nexport type QMenuCategoryCategory = FMenuCategoryFragment\n\nexport type QMenuCategoryFilterVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuCategoryFilterQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryFilterCategories>\n}\n\nexport type QMenuCategoryFilterCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly countRecipes: number\n\n  readonly categoryType: QMenuCategoryFilterCategoryType\n}\n\nexport type QMenuCategoryFilterCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type QMenuCategoryListVariables = {\n  readonly branchId: string\n  readonly categoryType: WareCategoryTypeEnum\n}\n\nexport type QMenuCategoryListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly categories: ReadonlyArray<QMenuCategoryListCategories>\n}\n\nexport type QMenuCategoryListCategories = FMenuCategoryListItemFragment\n\nexport type QMenuGuideDownloadVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuGuideDownloadQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QMenuGuideDownloadCompanyBranch\n}\n\nexport type QMenuGuideDownloadCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly foodMenuUrl: Maybe<string>\n}\n\nexport type QMenuRecipeListVariables = {\n  readonly branchId: string\n  readonly categoryId?: Maybe<string>\n  readonly categoryType?: Maybe<WareCategoryTypeEnum>\n}\n\nexport type QMenuRecipeListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipes: ReadonlyArray<QMenuRecipeListRecipes>\n}\n\nexport type QMenuRecipeListRecipes = FMenuRecipeFragment\n\nexport type QMenuStockDepositVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockDepositQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QMenuStockDepositStockItems>\n}\n\nexport type QMenuStockDepositStockItems = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly plu: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly note: string\n\n  readonly quantity: number\n\n  readonly wareUnit: QMenuStockDepositWareUnit\n}\n\nexport type QMenuStockDepositWareUnit = FMenuWareUnitFragment\n\nexport type QMenuStockListVariables = {\n  readonly branchId: string\n}\n\nexport type QMenuStockListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItems: ReadonlyArray<QMenuStockListStockItems>\n}\n\nexport type QMenuStockListStockItems = GMenuStockItemFragment\n\nexport type QStockRecipesVariables = {\n  readonly stockId: string\n}\n\nexport type QStockRecipesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stockItem: QStockRecipesStockItem\n}\n\nexport type QStockRecipesStockItem = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly ingredients: ReadonlyArray<QStockRecipesIngredients>\n}\n\nexport type QStockRecipesIngredients = {\n  readonly __typename?: 'Ingredient'\n\n  readonly id: string\n\n  readonly recipe: QStockRecipesRecipe\n}\n\nexport type QStockRecipesRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly recipeType: QStockRecipesRecipeType\n}\n\nexport type QStockRecipesRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type MBranchDefaultTimeVariables = {\n  readonly branchId: string\n  readonly deliveryType: DeliveryTypeEnum\n  readonly time: number\n}\n\nexport type MBranchDefaultTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateDefaultOrderProcessTime: MBranchDefaultTimeUpdateDefaultOrderProcessTime\n}\n\nexport type MBranchDefaultTimeUpdateDefaultOrderProcessTime = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type MOrderChangeToPickupVariables = {\n  readonly orderId: string\n}\n\nexport type MOrderChangeToPickupMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderDeliveryToPickup: MOrderChangeToPickupUpdateOrderDeliveryToPickup\n}\n\nexport type MOrderChangeToPickupUpdateOrderDeliveryToPickup = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliveryType: Maybe<MOrderChangeToPickupDeliveryType>\n}\n\nexport type MOrderChangeToPickupDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type MOrderTimeNotificationVariables = {\n  readonly orderId: string\n  readonly minutes: number\n}\n\nexport type MOrderTimeNotificationMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly orderNotifyCustomer: MOrderTimeNotificationOrderNotifyCustomer\n}\n\nexport type MOrderTimeNotificationOrderNotifyCustomer = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n}\n\nexport type MRemoveOrderDriverVariables = {\n  readonly orderDriverId: string\n}\n\nexport type MRemoveOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyUserDeliveringOrder: MRemoveOrderDriverDestroyUserDeliveringOrder\n}\n\nexport type MRemoveOrderDriverDestroyUserDeliveringOrder = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: MRemoveOrderDriverOrder\n}\n\nexport type MRemoveOrderDriverOrder = FOrderDriverFragment\n\nexport type MSelectOrderDriverVariables = {\n  readonly driverId: string\n  readonly orderId: string\n}\n\nexport type MSelectOrderDriverMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MSelectOrderDriverResult\n}\n\nexport type MSelectOrderDriverResult = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly order: MSelectOrderDriverOrder\n}\n\nexport type MSelectOrderDriverOrder = FOrderDriverFragment\n\nexport type QBranchDefeaultTimesVariables = {\n  readonly branchId: string\n}\n\nexport type QBranchDefeaultTimesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QBranchDefeaultTimesCompanyBranch\n}\n\nexport type QBranchDefeaultTimesCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n}\n\nexport type QOrderDriversVariables = {\n  readonly orderId: string\n  readonly branchId: ReadonlyArray<string>\n}\n\nexport type QOrderDriversQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderDriversOrder\n\n  readonly drivers: ReadonlyArray<QOrderDriversDrivers>\n}\n\nexport type QOrderDriversOrder = FOrderDriverFragment\n\nexport type QOrderDriversDrivers = FDriverFragment\n\nexport type QOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QOrderMapDeliveriesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly deliveries: ReadonlyArray<QOrderMapDeliveriesDeliveries>\n}\n\nexport type QOrderMapDeliveriesDeliveries = FOrderMapDeliveryFragment\n\nexport type QOrderStateVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type QOrderStateQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderStateOrder\n\n  readonly companyBranch: QOrderStateCompanyBranch\n}\n\nexport type QOrderStateOrder = {\n  readonly __typename?: 'Order'\n\n  readonly deliveryType: Maybe<QOrderStateDeliveryType>\n\n  readonly isCancelable: boolean\n} & FOrderStateCategoryFragment\n\nexport type QOrderStateDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type QOrderStateCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly allowedCategories: ReadonlyArray<OrderStateCategoryEnum>\n}\n\nexport type SOrderMapDeliveriesVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type SOrderMapDeliveriesSubscription = {\n  readonly __typename?: 'Subscription'\n\n  readonly update: SOrderMapDeliveriesUpdate\n}\n\nexport type SOrderMapDeliveriesUpdate = {\n  readonly __typename?: 'TransportationDeviceUserUpdateSubscription'\n\n  readonly actionType: SubscriptionActionType\n\n  readonly device: Maybe<SOrderMapDeliveriesDevice>\n}\n\nexport type SOrderMapDeliveriesDevice = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly user: SOrderMapDeliveriesUser\n} & FOrderMapDeviceFragment\n\nexport type SOrderMapDeliveriesUser = FOrderMapDriverFragment\n\nexport type MFinancialReportCreateVariables = {\n  readonly branchId: string\n}\n\nexport type MFinancialReportCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly result: MFinancialReportCreateResult\n}\n\nexport type MFinancialReportCreateResult = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n}\n\nexport type QAllDriversVariables = {\n  readonly branches: ReadonlyArray<string>\n}\n\nexport type QAllDriversQuery = {\n  readonly __typename?: 'Query'\n\n  readonly drivers: ReadonlyArray<QAllDriversDrivers>\n}\n\nexport type QAllDriversDrivers = FDriverFragment\n\nexport type QClosureHistoryVariables = {\n  readonly branchId: string\n  readonly dateFrom: string\n  readonly dateTo: string\n}\n\nexport type QClosureHistoryQuery = {\n  readonly __typename?: 'Query'\n\n  readonly history: ReadonlyArray<QClosureHistoryHistory>\n}\n\nexport type QClosureHistoryHistory = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly id: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QClosureReportVariables = {\n  readonly branchId: string\n  readonly reportId: string\n  readonly showReport: boolean\n}\n\nexport type QClosureReportQuery = {\n  readonly __typename?: 'Query'\n\n  readonly lastReport: QClosureReportLastReport\n\n  readonly report: Maybe<QClosureReportReport>\n}\n\nexport type QClosureReportLastReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QClosureReportReport = {\n  readonly __typename?: 'FinancialReport'\n\n  readonly plainData: string\n\n  readonly reportDatetime: string\n\n  readonly reportSequence: number\n}\n\nexport type QStatsDailyVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsDailyQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsDailyStats\n}\n\nexport type QStatsDailyStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly category: string\n\n  readonly daily: string\n\n  readonly delivery: string\n\n  readonly drivers: string\n}\n\nexport type QStatsOrdersVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsOrdersQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersStats\n}\n\nexport type QStatsOrdersStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly finishedOrders: QStatsOrdersFinishedOrders\n\n  readonly orderStatisticsPlain: string\n}\n\nexport type QStatsOrdersFinishedOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly fees: QStatsOrdersFees\n\n  readonly onlinePayments: QStatsOrdersOnlinePayments\n\n  readonly total: QStatsOrdersTotal\n\n  readonly finishedCount: number\n\n  readonly cancelledCount: number\n}\n\nexport type QStatsOrdersFees = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersOnlinePayments = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersTotal = FPriceWithCurrencyFragment\n\nexport type QStatsOrdersCountsVariables = {\n  readonly filter: InputStatisticCreate\n}\n\nexport type QStatsOrdersCountsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersCountsStats\n}\n\nexport type QStatsOrdersCountsStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly counts: QStatsOrdersCountsCounts\n}\n\nexport type QStatsOrdersCountsCounts = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly finished: number\n\n  readonly cancelled: number\n}\n\nexport type QStatsOrdersListVariables = {\n  readonly filter: InputStatisticCreate\n  readonly pagination?: Maybe<InputPaginationParams>\n}\n\nexport type QStatsOrdersListQuery = {\n  readonly __typename?: 'Query'\n\n  readonly stats: QStatsOrdersListStats\n}\n\nexport type QStatsOrdersListStats = {\n  readonly __typename?: 'Statistics'\n\n  readonly orders: QStatsOrdersListOrders\n}\n\nexport type QStatsOrdersListOrders = {\n  readonly __typename?: 'StatisticsOrders'\n\n  readonly list: ReadonlyArray<QStatsOrdersListList>\n}\n\nexport type QStatsOrdersListList = GOrderListTickerFragment &\n  FOrderStateCategoryFragment\n\nexport type MUserMenuLanguageVariables = {\n  readonly userId: string\n  readonly lang: LanguageEnum\n}\n\nexport type MUserMenuLanguageMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateUser: MUserMenuLanguageUpdateUser\n}\n\nexport type MUserMenuLanguageUpdateUser = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly language: MUserMenuLanguageLanguage\n}\n\nexport type MUserMenuLanguageLanguage = {\n  readonly __typename?: 'Language'\n\n  readonly enum: LanguageEnum\n}\n\nexport type QUserMenuLanguagesVariables = {}\n\nexport type QUserMenuLanguagesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly languages: ReadonlyArray<QUserMenuLanguagesLanguages>\n}\n\nexport type QUserMenuLanguagesLanguages = {\n  readonly __typename?: 'Language'\n\n  readonly code: string\n\n  readonly enum: LanguageEnum\n\n  readonly rawCode: string\n}\n\nexport type MZoneUpdateVariables = {\n  readonly zoneId: string\n  readonly update: InputZoneUpdate\n}\n\nexport type MZoneUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateZone: MZoneUpdateUpdateZone\n}\n\nexport type MZoneUpdateUpdateZone = FZoneFragment\n\nexport type GSpecificBusinessHourFragment = {\n  readonly __typename?: 'BusinessHour'\n\n  readonly id: string\n\n  readonly companyBranch: GSpecificBusinessHourCompanyBranch\n\n  readonly specificDate: Maybe<string>\n\n  readonly specificDateLocalized: Maybe<string>\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n\n  readonly openAt: string\n\n  readonly closeAt: string\n}\n\nexport type GSpecificBusinessHourCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type GMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly visible: boolean\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly availableAmount: number\n\n  readonly prices: ReadonlyArray<GMenuRecipePrices>\n\n  readonly recipeType: GMenuRecipeRecipeType\n}\n\nexport type GMenuRecipePrices = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipePriceType\n\n  readonly price: GMenuRecipePrice\n}\n\nexport type GMenuRecipePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n} & FPriceFragment\n\nexport type GMenuRecipeRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type GMenuStockItemFragment = {\n  readonly __typename?: 'StockItem'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly note: string\n\n  readonly plu: Maybe<string>\n\n  readonly quantity: number\n\n  readonly nameLabel: string\n\n  readonly allergens: ReadonlyArray<GMenuStockItemAllergens>\n\n  readonly wareUnit: GMenuStockItemWareUnit\n\n  readonly allowNegative: boolean\n}\n\nexport type GMenuStockItemAllergens = FMenuAllergenFragment\n\nexport type GMenuStockItemWareUnit = FMenuWareUnitFragment\n\nexport type GMenuRecipePriceFragment = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: GMenuRecipePricePriceType\n\n  readonly price: GMenuRecipePricePrice\n\n  readonly vat: GMenuRecipePriceVat\n}\n\nexport type GMenuRecipePricePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type GMenuRecipePricePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly currency: GMenuRecipePriceCurrency\n} & FPriceFragment\n\nexport type GMenuRecipePriceCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GMenuRecipePriceVat = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n}\n\nexport type GMenuAssocRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n}\n\nexport type GOrderListTickerFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly createdAt: string\n\n  readonly isPaidWithCard: boolean\n\n  readonly deliveryType: Maybe<GOrderListTickerDeliveryType>\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliverAtWorst: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly companyBranch: GOrderListTickerCompanyBranch\n\n  readonly address: GOrderListTickerAddress\n\n  readonly customer: GOrderListTickerCustomer\n\n  readonly totalSum: GOrderListTickerTotalSum\n}\n\nexport type GOrderListTickerDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type GOrderListTickerCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly oldOrderThreshold: number\n}\n\nexport type GOrderListTickerAddress = FAddressFragment\n\nexport type GOrderListTickerCustomer = FCustomerFragment\n\nexport type GOrderListTickerTotalSum = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: GOrderListTickerCurrency\n}\n\nexport type GOrderListTickerCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type GOrderDetailWareFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: GOrderDetailWareRecipe\n\n  readonly price: GOrderDetailWarePrice\n}\n\nexport type GOrderDetailWareRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type GOrderDetailWarePrice = FPriceFragment\n\nexport type GOrderMarkerFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly gps: Maybe<GOrderMarkerGps>\n}\n\nexport type GOrderMarkerGps = FGeoPointFragment\n\nexport type FAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly state: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n}\n\nexport type FCompanyBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly address: FCompanyBranchAddress\n\n  readonly gps: FCompanyBranchGps\n\n  readonly brand: FCompanyBranchBrand\n}\n\nexport type FCompanyBranchAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<FCompanyBranchCountry>\n}\n\nexport type FCompanyBranchCountry = {\n  readonly __typename?: 'Country'\n\n  readonly phonePrefix: string\n}\n\nexport type FCompanyBranchGps = FGeoPointFragment\n\nexport type FCompanyBranchBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FCustomerFragment = {\n  readonly __typename?: 'JsonCustomer'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n\n  readonly defaultEmail: Maybe<FCustomerDefaultEmail>\n\n  readonly defaultPhone: Maybe<FCustomerDefaultPhone>\n}\n\nexport type FCustomerDefaultEmail = FEmailFragment\n\nexport type FCustomerDefaultPhone = FPhoneFragment\n\nexport type FEmailFragment = {\n  readonly __typename?: 'Email'\n\n  readonly email: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FGeoPointFragment = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type FOrderStateCategoryFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type FPhoneFragment = {\n  readonly __typename?: 'Phone'\n\n  readonly phone: string\n\n  readonly description: Maybe<string>\n\n  readonly default: boolean\n}\n\nexport type FPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n}\n\nexport type FPriceWithCurrencyFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FPriceWithCurrencyCurrency\n}\n\nexport type FPriceWithCurrencyCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FUserNameFragment = {\n  readonly __typename?: 'User'\n\n  readonly firstName: Maybe<string>\n\n  readonly lastName: Maybe<string>\n}\n\nexport type FCreateOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly items: ReadonlyArray<FCreateOrderItems>\n\n  readonly coverPrice: FCreateOrderCoverPrice\n\n  readonly transportFee: FCreateOrderTransportFee\n\n  readonly discounts: ReadonlyArray<FCreateOrderDiscounts>\n\n  readonly minimalOrderPrice: Maybe<FCreateOrderMinimalOrderPrice>\n\n  readonly totalDiscount: FCreateOrderTotalDiscount\n\n  readonly totalSum: FCreateOrderTotalSum\n}\n\nexport type FCreateOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly recipe: FCreateOrderRecipe\n\n  readonly priceWithSidedishes: FCreateOrderPriceWithSidedishes\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderSidedishes>\n} & FCreateOrderItemFragment\n\nexport type FCreateOrderRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly sidedishCount: number\n}\n\nexport type FCreateOrderPriceWithSidedishes = FPriceFragment\n\nexport type FCreateOrderSidedishes = FCreateOrderItemFragment\n\nexport type FCreateOrderCoverPrice = FPriceFragment\n\nexport type FCreateOrderTransportFee = FPriceFragment\n\nexport type FCreateOrderDiscounts = {\n  readonly __typename?: 'PriceWithDescription'\n\n  readonly code: string\n\n  readonly description: string\n\n  readonly price: FCreateOrderPrice\n}\n\nexport type FCreateOrderPrice = FPriceFragment\n\nexport type FCreateOrderMinimalOrderPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n}\n\nexport type FCreateOrderTotalDiscount = FPriceFragment\n\nexport type FCreateOrderTotalSum = FPriceFragment\n\nexport type FCreateOrderItemFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly price: FCreateOrderItemPrice\n\n  readonly recipe: FCreateOrderItemRecipe\n}\n\nexport type FCreateOrderItemPrice = FPriceFragment\n\nexport type FCreateOrderItemRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FCreateOrderRecipeSidedishesFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly sidedishCategories: ReadonlyArray<\n    FCreateOrderRecipeSidedishesSidedishCategories\n  >\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly sidedishes: ReadonlyArray<FCreateOrderRecipeSidedishesSidedishes>\n}\n\nexport type FCreateOrderRecipeSidedishesSidedishes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly price: FCreateOrderRecipeSidedishesPrice\n}\n\nexport type FCreateOrderRecipeSidedishesPrice = FPriceFragment\n\nexport type FOrderMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly pictogram: Maybe<string>\n\n  readonly recipes: ReadonlyArray<FOrderMenuCategoryRecipes>\n}\n\nexport type FOrderMenuCategoryRecipes = FOrderMenuRecipeFragment\n\nexport type FOrderMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly price: FOrderMenuRecipePrice\n\n  readonly sidedishCount: number\n}\n\nexport type FOrderMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly currency: FOrderMenuRecipeCurrency\n}\n\nexport type FOrderMenuRecipeCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FKitchenOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly deliverAt: Maybe<string>\n\n  readonly deliveredAt: Maybe<string>\n\n  readonly delayedDeliveryTime: Maybe<string>\n\n  readonly deliveryType: Maybe<FKitchenOrderDeliveryType>\n\n  readonly companyBranch: FKitchenOrderCompanyBranch\n\n  readonly address: FKitchenOrderAddress\n\n  readonly customer: FKitchenOrderCustomer\n\n  readonly note: Maybe<string>\n\n  readonly previousNote: Maybe<string>\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n\n  readonly items: ReadonlyArray<FKitchenOrderItems>\n}\n\nexport type FKitchenOrderDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FKitchenOrderCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n}\n\nexport type FKitchenOrderAddress = FAddressFragment\n\nexport type FKitchenOrderCustomer = FCustomerFragment\n\nexport type FKitchenOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sidedishes: ReadonlyArray<FKitchenOrderSidedishes>\n} & FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderSidedishes = FKitchenOrderRecipeFragment\n\nexport type FKitchenOrderRecipeFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly orderRecipeState: FKitchenOrderRecipeOrderRecipeState\n\n  readonly recipe: FKitchenOrderRecipeRecipe\n}\n\nexport type FKitchenOrderRecipeOrderRecipeState = {\n  readonly __typename?: 'OrderRecipeState'\n\n  readonly enum: OrderRecipeStateEnum\n}\n\nexport type FKitchenOrderRecipeRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly nameLabel: string\n}\n\nexport type FMenuAllergenFragment = {\n  readonly __typename?: 'Allergen'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly enum: AllergenEnum\n\n  readonly category: number\n}\n\nexport type FMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly visible: boolean\n\n  readonly categoryType: FMenuCategoryCategoryType\n\n  readonly pictogram: Maybe<string>\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly recipes: ReadonlyArray<FMenuCategoryRecipes>\n}\n\nexport type FMenuCategoryCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuCategoryRecipes = FMenuRecipeFragment\n\nexport type FMenuCategoryListItemFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel: Maybe<string>\n\n  readonly countRecipes: number\n\n  readonly visible: boolean\n\n  readonly categoryType: FMenuCategoryListItemCategoryType\n}\n\nexport type FMenuCategoryListItemCategoryType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly visible: boolean\n\n  readonly nameLabel: string\n\n  readonly internalNote: Maybe<string>\n\n  readonly availableAmount: number\n\n  readonly prices: ReadonlyArray<FMenuRecipePrices>\n\n  readonly recipeType: FMenuRecipeRecipeType\n}\n\nexport type FMenuRecipePrices = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: FMenuRecipePriceType\n\n  readonly price: FMenuRecipePrice\n}\n\nexport type FMenuRecipePriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type FMenuRecipePrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly formattedValue: string\n} & FPriceFragment\n\nexport type FMenuRecipeRecipeType = {\n  readonly __typename?: 'WareCategoryType'\n\n  readonly enum: WareCategoryTypeEnum\n}\n\nexport type FMenuRecipePricingFragment = {\n  readonly __typename?: 'RecipePrice'\n\n  readonly id: string\n\n  readonly priceType: FMenuRecipePricingPriceType\n\n  readonly price: FMenuRecipePricingPrice\n\n  readonly vat: FMenuRecipePricingVat\n}\n\nexport type FMenuRecipePricingPriceType = {\n  readonly __typename?: 'WarePriceType'\n\n  readonly enum: WarePriceTypeEnum\n}\n\nexport type FMenuRecipePricingPrice = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly currency: FMenuRecipePricingCurrency\n} & FPriceFragment\n\nexport type FMenuRecipePricingCurrency = {\n  readonly __typename?: 'Currency'\n\n  readonly code: string\n}\n\nexport type FMenuRecipePricingVat = {\n  readonly __typename?: 'Vat'\n\n  readonly id: string\n}\n\nexport type FMenuWareUnitFragment = {\n  readonly __typename?: 'WareUnit'\n\n  readonly id: string\n\n  readonly enum: WareUnitEnum\n\n  readonly code: string\n}\n\nexport type FDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n} & FUserNameFragment\n\nexport type FOrderDriverFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly driver: Maybe<FOrderDriverDriver>\n}\n\nexport type FOrderDriverDriver = {\n  readonly __typename?: 'UserDeliveringOrder'\n\n  readonly id: string\n\n  readonly user: FOrderDriverUser\n}\n\nexport type FOrderDriverUser = FDriverFragment\n\nexport type FOrderMapDeliveryFragment = {\n  readonly __typename?: 'User'\n\n  readonly device: Maybe<FOrderMapDeliveryDevice>\n} & FOrderMapDriverFragment\n\nexport type FOrderMapDeliveryDevice = FOrderMapDeviceFragment\n\nexport type FOrderMapDeviceFragment = {\n  readonly __typename?: 'TransportationDeviceUser'\n\n  readonly id: string\n\n  readonly lastPosition: Maybe<FOrderMapDeviceLastPosition>\n\n  readonly isFinalized: boolean\n}\n\nexport type FOrderMapDeviceLastPosition = {\n  readonly __typename?: 'GeoPositionWithTimestamp'\n\n  readonly gps: FOrderMapDeviceGps\n\n  readonly timestamp: string\n}\n\nexport type FOrderMapDeviceGps = FGeoPointFragment\n\nexport type FOrderMapDriverFragment = {\n  readonly __typename?: 'User'\n\n  readonly id: string\n\n  readonly initials: string\n\n  readonly countUndeliveredOrders: number\n}\n\nexport type FOrderTimingFragment = {\n  readonly __typename?: 'Order'\n\n  readonly orderTiming: ReadonlyArray<FOrderTimingOrderTiming>\n}\n\nexport type FOrderTimingOrderTiming = {\n  readonly __typename?: 'OrderStateCategoryRelation'\n\n  readonly createdAt: string\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type FZoneFragment = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly enabled: boolean\n\n  readonly priority: number\n\n  readonly companyBranch: FZoneCompanyBranch\n\n  readonly geoPolygon: ReadonlyArray<FZoneGeoPolygon>\n\n  readonly priceRangeRules: ReadonlyArray<FZonePriceRangeRules>\n\n  readonly minimalOrderPrice: FZoneMinimalOrderPrice\n\n  readonly zoneColor: FZoneZoneColor\n}\n\nexport type FZoneCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly brand: FZoneBrand\n}\n\nexport type FZoneBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type FZoneGeoPolygon = FGeoPointFragment\n\nexport type FZonePriceRangeRules = FZonePriceRangeFragment\n\nexport type FZoneMinimalOrderPrice = FPriceFragment\n\nexport type FZoneZoneColor = {\n  readonly __typename?: 'ZoneColor'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly color: string\n}\n\nexport type FZonePriceRangeFragment = {\n  readonly __typename?: 'ZonePriceRangeRule'\n\n  readonly toPrice: FZonePriceRangeToPrice\n\n  readonly price: FZonePriceRangePrice\n}\n\nexport type FZonePriceRangeToPrice = FPriceFragment\n\nexport type FZonePriceRangePrice = FPriceFragment\n\nimport * as Hooks from '@speedlo/graphql'\nimport gql from 'graphql-tag'\n\n// ====================================================\n// Fragments\n// ====================================================\n\nexport const GSpecificBusinessHourFragmentDoc = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const FPriceFragmentDoc = gql`\n  fragment FPrice on PriceConverted {\n    value\n  }\n`\n\nexport const GMenuRecipeFragmentDoc = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FMenuAllergenFragmentDoc = gql`\n  fragment FMenuAllergen on Allergen {\n    id\n    code\n    enum\n    category\n  }\n`\n\nexport const FMenuWareUnitFragmentDoc = gql`\n  fragment FMenuWareUnit on WareUnit {\n    id\n    enum\n    code\n  }\n`\n\nexport const GMenuStockItemFragmentDoc = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...FMenuAllergen\n    }\n    wareUnit {\n      ...FMenuWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n\n  ${FMenuAllergenFragmentDoc}\n  ${FMenuWareUnitFragmentDoc}\n`\n\nexport const GMenuRecipePriceFragmentDoc = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const GMenuAssocRecipeFragmentDoc = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const FAddressFragmentDoc = gql`\n  fragment FAddress on JsonAddress {\n    state\n    city\n    street\n    houseNumber\n  }\n`\n\nexport const FEmailFragmentDoc = gql`\n  fragment FEmail on Email {\n    email\n    description\n    default\n  }\n`\n\nexport const FPhoneFragmentDoc = gql`\n  fragment FPhone on Phone {\n    phone\n    description\n    default\n  }\n`\n\nexport const FCustomerFragmentDoc = gql`\n  fragment FCustomer on JsonCustomer {\n    firstName\n    lastName\n    defaultEmail {\n      ...FEmail\n    }\n    defaultPhone {\n      ...FPhone\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n`\n\nexport const GOrderListTickerFragmentDoc = gql`\n  fragment GOrderListTicker on Order {\n    id\n    createdAt\n    isPaidWithCard\n    deliveryType {\n      enum\n    }\n    deliverAt\n    deliverAtWorst\n    deliveredAt\n    delayedDeliveryTime\n    companyBranch {\n      id\n      name\n      oldOrderThreshold\n    }\n    address {\n      ...FAddress\n    }\n    customer {\n      ...FCustomer\n    }\n    totalSum {\n      value\n      currency {\n        code\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n`\n\nexport const GOrderDetailWareFragmentDoc = gql`\n  fragment GOrderDetailWare on OrderRecipe {\n    id\n    recipe {\n      id\n      code\n      nameLabel\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FGeoPointFragmentDoc = gql`\n  fragment FGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const GOrderMarkerFragmentDoc = gql`\n  fragment GOrderMarker on Order {\n    id\n    deliverAt\n    delayedDeliveryTime\n    gps {\n      ...FGeoPoint\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FCompanyBranchFragmentDoc = gql`\n  fragment FCompanyBranch on CompanyBranch {\n    id\n    name\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    gps {\n      ...FGeoPoint\n    }\n    brand {\n      id\n      name\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderStateCategoryFragmentDoc = gql`\n  fragment FOrderStateCategory on Order {\n    id\n    orderStateCategory\n  }\n`\n\nexport const FPriceWithCurrencyFragmentDoc = gql`\n  fragment FPriceWithCurrency on PriceConverted {\n    value\n    currency {\n      code\n    }\n  }\n`\n\nexport const FCreateOrderItemFragmentDoc = gql`\n  fragment FCreateOrderItem on OrderRecipe {\n    id\n    price {\n      ...FPrice\n    }\n    recipe {\n      id\n      code\n      nameLabel\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderFragmentDoc = gql`\n  fragment FCreateOrder on Order {\n    id\n    countWares\n    items {\n      ...FCreateOrderItem\n      recipe {\n        sidedishCount: sideDishesWareCategoriesCount\n      }\n      priceWithSidedishes: priceWithSideDishes {\n        ...FPrice\n      }\n      sidedishes: sideDishes {\n        ...FCreateOrderItem\n      }\n    }\n    coverPrice {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...FPrice\n      }\n    }\n    minimalOrderPrice {\n      formattedValue\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    totalSum {\n      ...FPrice\n    }\n  }\n\n  ${FCreateOrderItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCreateOrderRecipeSidedishesFragmentDoc = gql`\n  fragment FCreateOrderRecipeSidedishes on Recipe {\n    id\n    nameLabel\n    sidedishCategories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sidedishes: sideDishes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderMenuRecipeFragmentDoc = gql`\n  fragment FOrderMenuRecipe on Recipe {\n    id\n    code\n    nameLabel\n    descriptionLabel\n    price(warePriceType: DELIVERY) {\n      value\n      currency {\n        code\n      }\n    }\n    sidedishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const FOrderMenuCategoryFragmentDoc = gql`\n  fragment FOrderMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n    recipes(enabled: true, isAvailable: true) {\n      ...FOrderMenuRecipe\n    }\n  }\n\n  ${FOrderMenuRecipeFragmentDoc}\n`\n\nexport const FKitchenOrderRecipeFragmentDoc = gql`\n  fragment FKitchenOrderRecipe on OrderRecipe {\n    id\n    orderRecipeState {\n      enum\n    }\n    recipe {\n      id\n      code\n      nameLabel\n    }\n  }\n`\n\nexport const FKitchenOrderFragmentDoc = gql`\n  fragment FKitchenOrder on Order {\n    id\n    deliverAt\n    deliveredAt\n    delayedDeliveryTime\n    deliveryType {\n      enum\n    }\n    companyBranch {\n      id\n      name\n    }\n    address {\n      ...FAddress\n    }\n    customer {\n      ...FCustomer\n    }\n    note\n    previousNote\n    orderStateCategory(target: FE_KITCHEN)\n    items {\n      ...FKitchenOrderRecipe\n      sidedishes: sideDishes {\n        ...FKitchenOrderRecipe\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FCustomerFragmentDoc}\n  ${FKitchenOrderRecipeFragmentDoc}\n`\n\nexport const FMenuRecipeFragmentDoc = gql`\n  fragment FMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FMenuCategoryFragmentDoc = gql`\n  fragment FMenuCategory on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n    pictogram\n    minCount\n    maxCount\n    recipes {\n      ...FMenuRecipe\n    }\n  }\n\n  ${FMenuRecipeFragmentDoc}\n`\n\nexport const FMenuCategoryListItemFragmentDoc = gql`\n  fragment FMenuCategoryListItem on WareCategory {\n    id\n    nameLabel\n    internalNoteLabel\n    countRecipes\n    visible: enabled\n    categoryType: wareCategoryType {\n      enum\n    }\n  }\n`\n\nexport const FMenuRecipePricingFragmentDoc = gql`\n  fragment FMenuRecipePricing on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FUserNameFragmentDoc = gql`\n  fragment FUserName on User {\n    firstName\n    lastName\n  }\n`\n\nexport const FDriverFragmentDoc = gql`\n  fragment FDriver on User {\n    id\n    initials\n    ...FUserName\n  }\n\n  ${FUserNameFragmentDoc}\n`\n\nexport const FOrderDriverFragmentDoc = gql`\n  fragment FOrderDriver on Order {\n    id\n    driver: userDeliveringOrder {\n      id\n      user {\n        ...FDriver\n      }\n    }\n  }\n\n  ${FDriverFragmentDoc}\n`\n\nexport const FOrderMapDriverFragmentDoc = gql`\n  fragment FOrderMapDriver on User {\n    id\n    initials\n    countUndeliveredOrders\n  }\n`\n\nexport const FOrderMapDeviceFragmentDoc = gql`\n  fragment FOrderMapDevice on TransportationDeviceUser {\n    id\n    lastPosition {\n      gps: geoPosition {\n        ...FGeoPoint\n      }\n      timestamp\n    }\n    isFinalized\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport const FOrderMapDeliveryFragmentDoc = gql`\n  fragment FOrderMapDelivery on User {\n    ...FOrderMapDriver\n    device: usedTransportationDevice {\n      ...FOrderMapDevice\n    }\n  }\n\n  ${FOrderMapDriverFragmentDoc}\n  ${FOrderMapDeviceFragmentDoc}\n`\n\nexport const FOrderTimingFragmentDoc = gql`\n  fragment FOrderTiming on Order {\n    orderTiming: orderStateCategoryRelations {\n      createdAt\n      orderStateCategory\n    }\n  }\n`\n\nexport const FZonePriceRangeFragmentDoc = gql`\n  fragment FZonePriceRange on ZonePriceRangeRule {\n    toPrice {\n      ...FPrice\n    }\n    price {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FZoneFragmentDoc = gql`\n  fragment FZone on Zone {\n    id\n    name\n    enabled\n    priority\n    companyBranch {\n      id\n      brand {\n        id\n      }\n    }\n    geoPolygon {\n      ...FGeoPoint\n    }\n    priceRangeRules {\n      ...FZonePriceRange\n    }\n    minimalOrderPrice {\n      ...FPrice\n    }\n    zoneColor {\n      id\n      code\n      color\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n  ${FZonePriceRangeFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\n// ====================================================\n// Hooks\n// ====================================================\n\nexport const MPasswordChangeDocument = gql`\n  mutation MPasswordChange($password: String!) {\n    updateUserPassword(newPassword: $password) {\n      id\n      token\n    }\n  }\n`\n\nexport function useMPasswordChange(\n  baseOptions?: Hooks.MutationHookOptions<\n    MPasswordChangeMutation,\n    MPasswordChangeVariables\n  >,\n) {\n  return Hooks.useMutation<MPasswordChangeMutation, MPasswordChangeVariables>(\n    MPasswordChangeDocument,\n    baseOptions,\n  )\n}\n\nexport const GCreateSpecificBusinessHourDocument = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n\n  ${GSpecificBusinessHourFragmentDoc}\n`\n\nexport function useGCreateSpecificBusinessHour(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateSpecificBusinessHourMutation,\n    GCreateSpecificBusinessHourVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreateSpecificBusinessHourMutation,\n    GCreateSpecificBusinessHourVariables\n  >(GCreateSpecificBusinessHourDocument, baseOptions)\n}\n\nexport const GDeleteSpecificBusinessHourDocument = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n\nexport function useGDeleteSpecificBusinessHour(\n  baseOptions?: Hooks.MutationHookOptions<\n    GDeleteSpecificBusinessHourMutation,\n    GDeleteSpecificBusinessHourVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GDeleteSpecificBusinessHourMutation,\n    GDeleteSpecificBusinessHourVariables\n  >(GDeleteSpecificBusinessHourDocument, baseOptions)\n}\n\nexport const GSpecificBusinessHoursDocument = gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n\n  ${GSpecificBusinessHourFragmentDoc}\n`\n\nexport function useGSpecificBusinessHours(\n  variables?: GSpecificBusinessHoursVariables,\n  baseOptions?: Hooks.QueryHookOptions<GSpecificBusinessHoursVariables>,\n) {\n  return Hooks.useQuery<\n    GSpecificBusinessHoursQuery,\n    GSpecificBusinessHoursVariables\n  >(GSpecificBusinessHoursDocument, variables, baseOptions)\n}\n\nexport const GOrderVamDocument = gql`\n  query GOrderVam($branchId: ID!, $phone: String!) {\n    vamCustomer: vamInformation(companyBranchId: $branchId, phone: $phone) {\n      isFound\n      email\n      firstName\n      lastName\n      lastOrder {\n        note\n      }\n      locations {\n        street\n        houseNumber\n        city\n        state\n        gps {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n`\n\nexport function useGOrderVam(\n  variables?: GOrderVamVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderVamVariables>,\n) {\n  return Hooks.useQuery<GOrderVamQuery, GOrderVamVariables>(\n    GOrderVamDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderPromoDocument = gql`\n  query GOrderPromo($branchId: ID!) {\n    promoCodes(promoCode: { companyBranch: $branchId, enabled: true }) {\n      id\n      code\n    }\n  }\n`\n\nexport function useGOrderPromo(\n  variables?: GOrderPromoVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderPromoVariables>,\n) {\n  return Hooks.useQuery<GOrderPromoQuery, GOrderPromoVariables>(\n    GOrderPromoDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GSortMenuCategoryDocument = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport function useGSortMenuCategory(\n  baseOptions?: Hooks.MutationHookOptions<\n    GSortMenuCategoryMutation,\n    GSortMenuCategoryVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GSortMenuCategoryMutation,\n    GSortMenuCategoryVariables\n  >(GSortMenuCategoryDocument, baseOptions)\n}\n\nexport const GMenuCategoryCreateDocument = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport function useGMenuCategoryCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryCreateMutation,\n    GMenuCategoryCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryCreateMutation,\n    GMenuCategoryCreateVariables\n  >(GMenuCategoryCreateDocument, baseOptions)\n}\n\nexport const GMenuCategoryUpdateDocument = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...FMenuCategory\n    }\n  }\n\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport function useGMenuCategoryUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryUpdateMutation,\n    GMenuCategoryUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryUpdateMutation,\n    GMenuCategoryUpdateVariables\n  >(GMenuCategoryUpdateDocument, baseOptions)\n}\n\nexport const GMenuCategoryDeleteDocument = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuCategoryDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuCategoryDeleteMutation,\n    GMenuCategoryDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuCategoryDeleteMutation,\n    GMenuCategoryDeleteVariables\n  >(GMenuCategoryDeleteDocument, baseOptions)\n}\n\nexport const GMenuRecipeVisibilityDocument = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useGMenuRecipeVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeVisibilityMutation,\n    GMenuRecipeVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeVisibilityMutation,\n    GMenuRecipeVisibilityVariables\n  >(GMenuRecipeVisibilityDocument, baseOptions)\n}\n\nexport const GMenuRecipeCreateDocument = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeCreateMutation,\n    GMenuRecipeCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeCreateMutation,\n    GMenuRecipeCreateVariables\n  >(GMenuRecipeCreateDocument, baseOptions)\n}\n\nexport const GMenuRecipeUpdateDocument = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n\n  ${GMenuRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeUpdateMutation,\n    GMenuRecipeUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeUpdateMutation,\n    GMenuRecipeUpdateVariables\n  >(GMenuRecipeUpdateDocument, baseOptions)\n}\n\nexport const GMenuRecipeDeleteDocument = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuRecipeDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuRecipeDeleteMutation,\n    GMenuRecipeDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GMenuRecipeDeleteMutation,\n    GMenuRecipeDeleteVariables\n  >(GMenuRecipeDeleteDocument, baseOptions)\n}\n\nexport const GMenuStockCreateDocument = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockCreateMutation,\n    GMenuStockCreateVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockCreateMutation, GMenuStockCreateVariables>(\n    GMenuStockCreateDocument,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockUpdateDocument = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useGMenuStockUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockUpdateMutation,\n    GMenuStockUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockUpdateMutation, GMenuStockUpdateVariables>(\n    GMenuStockUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockDeleteDocument = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n\nexport function useGMenuStockDelete(\n  baseOptions?: Hooks.MutationHookOptions<\n    GMenuStockDeleteMutation,\n    GMenuStockDeleteVariables\n  >,\n) {\n  return Hooks.useMutation<GMenuStockDeleteMutation, GMenuStockDeleteVariables>(\n    GMenuStockDeleteDocument,\n    baseOptions,\n  )\n}\n\nexport const GAllergensDocument = gql`\n  query GAllergens {\n    allergens {\n      ...FMenuAllergen\n    }\n  }\n\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport function useGAllergens(\n  variables?: GAllergensVariables,\n  baseOptions?: Hooks.QueryHookOptions<GAllergensVariables>,\n) {\n  return Hooks.useQuery<GAllergensQuery, GAllergensVariables>(\n    GAllergensDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCurrenciesDocument = gql`\n  query GCurrencies($branchId: ID!) {\n    currencies {\n      enum\n      code\n    }\n    companyBranch(id: $branchId) {\n      address {\n        country {\n          currency {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useGCurrencies(\n  variables?: GCurrenciesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GCurrenciesVariables>,\n) {\n  return Hooks.useQuery<GCurrenciesQuery, GCurrenciesVariables>(\n    GCurrenciesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GVatsDocument = gql`\n  query GVats($branchId: ID!) {\n    vats(companyBranch: $branchId) {\n      id\n      vat\n    }\n  }\n`\n\nexport function useGVats(\n  variables?: GVatsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GVatsVariables>,\n) {\n  return Hooks.useQuery<GVatsQuery, GVatsVariables>(\n    GVatsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GWareUnitsDocument = gql`\n  query GWareUnits {\n    wareUnits {\n      id\n      code\n      enum\n    }\n  }\n`\n\nexport function useGWareUnits(\n  variables?: GWareUnitsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GWareUnitsVariables>,\n) {\n  return Hooks.useQuery<GWareUnitsQuery, GWareUnitsVariables>(\n    GWareUnitsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuRecipeFormDocument = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...FMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...FMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n\n  ${GMenuRecipePriceFragmentDoc}\n  ${FMenuCategoryListItemFragmentDoc}\n  ${GMenuAssocRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeForm(\n  variables?: GMenuRecipeFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeFormVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeFormQuery, GMenuRecipeFormVariables>(\n    GMenuRecipeFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuRecipeFormAssocDocument = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n\n  ${GMenuAssocRecipeFragmentDoc}\n`\n\nexport function useGMenuRecipeFormAssoc(\n  variables?: GMenuRecipeFormAssocVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeFormAssocVariables>,\n) {\n  return Hooks.useQuery<\n    GMenuRecipeFormAssocQuery,\n    GMenuRecipeFormAssocVariables\n  >(GMenuRecipeFormAssocDocument, variables, baseOptions)\n}\n\nexport const GMenuRecipeDefaultsDocument = gql`\n  query GMenuRecipeDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport function useGMenuRecipeDefaults(\n  variables?: GMenuRecipeDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuRecipeDefaultsVariables>,\n) {\n  return Hooks.useQuery<GMenuRecipeDefaultsQuery, GMenuRecipeDefaultsVariables>(\n    GMenuRecipeDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockFormDocument = gql`\n  query GMenuStockForm($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      code\n      plu\n      note\n      nameLabel: label\n      allowNegative\n      wareUnit {\n        ...FMenuWareUnit\n      }\n      allergens {\n        ...FMenuAllergen\n      }\n      companyBranch {\n        id\n        allowNegative: stockItemsCanBeNegative\n      }\n    }\n  }\n\n  ${FMenuWareUnitFragmentDoc}\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport function useGMenuStockForm(\n  variables?: GMenuStockFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockFormVariables>,\n) {\n  return Hooks.useQuery<GMenuStockFormQuery, GMenuStockFormVariables>(\n    GMenuStockFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMenuStockDefaultsDocument = gql`\n  query GMenuStockDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      allowNegative: stockItemsCanBeNegative\n    }\n  }\n`\n\nexport function useGMenuStockDefaults(\n  variables?: GMenuStockDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMenuStockDefaultsVariables>,\n) {\n  return Hooks.useQuery<GMenuStockDefaultsQuery, GMenuStockDefaultsVariables>(\n    GMenuStockDefaultsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderBranchLocationDocument = gql`\n  query GOrderBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGOrderBranchLocation(\n  variables?: GOrderBranchLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderBranchLocationVariables>,\n) {\n  return Hooks.useQuery<\n    GOrderBranchLocationQuery,\n    GOrderBranchLocationVariables\n  >(GOrderBranchLocationDocument, variables, baseOptions)\n}\n\nexport const GOrderLocationDocument = gql`\n  query GOrderLocation($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGOrderLocation(\n  variables?: GOrderLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderLocationVariables>,\n) {\n  return Hooks.useQuery<GOrderLocationQuery, GOrderLocationVariables>(\n    GOrderLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderDetailDocument = gql`\n  query GOrderDetail($id: ID!) {\n    order(id: $id) {\n      id\n      createdAt\n      deliverAt\n      delayedDeliveryTime\n      companyBranch {\n        id\n      }\n      customer {\n        emails {\n          ...FEmail\n        }\n        phones {\n          ...FPhone\n        }\n      }\n      customerOrdersCountCurrent\n      customerOrdersCountTotal\n      note\n      previousNote\n      allAppliedRules\n      items {\n        ...GOrderDetailWare\n        sidedishes: sideDishes {\n          ...GOrderDetailWare\n        }\n      }\n      totalSum {\n        ...FPrice\n      }\n      transportFee {\n        ...FPrice\n      }\n      coverPrice {\n        ...FPrice\n      }\n      totalDiscount {\n        ...FPrice\n      }\n      orderOrigin {\n        code\n        enum\n      }\n      tip {\n        ...FPrice\n      }\n      ...FOrderTiming\n      ...FOrderDriver\n    }\n  }\n\n  ${FEmailFragmentDoc}\n  ${FPhoneFragmentDoc}\n  ${GOrderDetailWareFragmentDoc}\n  ${FPriceFragmentDoc}\n  ${FOrderTimingFragmentDoc}\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useGOrderDetail(\n  variables?: GOrderDetailVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderDetailVariables>,\n) {\n  return Hooks.useQuery<GOrderDetailQuery, GOrderDetailVariables>(\n    GOrderDetailDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderListDocument = gql`\n  query GOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n    $includeOldFinished: Boolean\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoriesOR: $categories\n        includeOldFinished: $includeOldFinished\n      }\n    ) {\n      id\n      ...FOrderStateCategory\n      ...GOrderListTicker\n      ...GOrderMarker\n    }\n    orderStateCategories {\n      code\n      enum\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${GOrderListTickerFragmentDoc}\n  ${GOrderMarkerFragmentDoc}\n`\n\nexport function useGOrderList(\n  variables?: GOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderListVariables>,\n) {\n  return Hooks.useQuery<GOrderListQuery, GOrderListVariables>(\n    GOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderListDocument = gql`\n  subscription SOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        id\n        ...FOrderStateCategory\n        ...GOrderListTicker\n        ...GOrderMarker\n      }\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${GOrderListTickerFragmentDoc}\n  ${GOrderMarkerFragmentDoc}\n`\n\nexport function useSOrderList(\n  variables?: SOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderListSubscription,\n    SOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderListSubscription, SOrderListVariables>(\n    SOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCreateZoneDocument = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useGCreateZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateZoneMutation,\n    GCreateZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GCreateZoneMutation, GCreateZoneVariables>(\n    GCreateZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GUpdateZonePriorityDocument = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport function useGUpdateZonePriority(\n  baseOptions?: Hooks.MutationHookOptions<\n    GUpdateZonePriorityMutation,\n    GUpdateZonePriorityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GUpdateZonePriorityMutation,\n    GUpdateZonePriorityVariables\n  >(GUpdateZonePriorityDocument, baseOptions)\n}\n\nexport const GDestroyZoneDocument = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n\nexport function useGDestroyZone(\n  baseOptions?: Hooks.MutationHookOptions<\n    GDestroyZoneMutation,\n    GDestroyZoneVariables\n  >,\n) {\n  return Hooks.useMutation<GDestroyZoneMutation, GDestroyZoneVariables>(\n    GDestroyZoneDocument,\n    baseOptions,\n  )\n}\n\nexport const GZonesDocument = gql`\n  query GZones($branchesId: [ID!]!) {\n    zones(companyBranches: $branchesId) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useGZones(\n  variables?: GZonesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZonesVariables>,\n) {\n  return Hooks.useQuery<GZonesQuery, GZonesVariables>(\n    GZonesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneLocationDocument = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...FGeoPoint\n        }\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGZoneLocation(\n  variables?: GZoneLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneLocationVariables>,\n) {\n  return Hooks.useQuery<GZoneLocationQuery, GZoneLocationVariables>(\n    GZoneLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneBranchLocationDocument = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useGZoneBranchLocation(\n  variables?: GZoneBranchLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneBranchLocationVariables>,\n) {\n  return Hooks.useQuery<GZoneBranchLocationQuery, GZoneBranchLocationVariables>(\n    GZoneBranchLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GZoneColorsDocument = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n\nexport function useGZoneColors(\n  variables?: GZoneColorsVariables,\n  baseOptions?: Hooks.QueryHookOptions<GZoneColorsVariables>,\n) {\n  return Hooks.useQuery<GZoneColorsQuery, GZoneColorsVariables>(\n    GZoneColorsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QAddressSuggestDocument = gql`\n  query QAddressSuggest($search: String!) {\n    suggest: suggestGeolocation(address: $search) {\n      ...FAddress\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FGeoPointFragmentDoc}\n`\n\nexport function useQAddressSuggest(\n  variables?: QAddressSuggestVariables,\n  baseOptions?: Hooks.QueryHookOptions<QAddressSuggestVariables>,\n) {\n  return Hooks.useQuery<QAddressSuggestQuery, QAddressSuggestVariables>(\n    QAddressSuggestDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MOrderStateDocument = gql`\n  mutation MOrderState($orderId: ID!, $state: OrderStateEnum!) {\n    addOrderState(order: $orderId, orderState: $state) {\n      ...FOrderStateCategory\n      ...FOrderTiming\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n  ${FOrderTimingFragmentDoc}\n`\n\nexport function useMOrderState(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderStateMutation,\n    MOrderStateVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderStateMutation, MOrderStateVariables>(\n    MOrderStateDocument,\n    baseOptions,\n  )\n}\n\nexport const QLogoutWidgetDocument = gql`\n  query QLogoutWidget($id: ID!) {\n    user(id: $id) {\n      id\n      firstName\n      lastName\n    }\n  }\n`\n\nexport function useQLogoutWidget(\n  variables?: QLogoutWidgetVariables,\n  baseOptions?: Hooks.QueryHookOptions<QLogoutWidgetVariables>,\n) {\n  return Hooks.useQuery<QLogoutWidgetQuery, QLogoutWidgetVariables>(\n    QLogoutWidgetDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MAddOrderPromoDocument = gql`\n  mutation MAddOrderPromo($orderId: ID!, $code: String!) {\n    addOrderPromoCode(order: $orderId, promoCode: $code) {\n      userErrors: errors\n      order {\n        ...FCreateOrder\n      }\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMAddOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddOrderPromoMutation,\n    MAddOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<MAddOrderPromoMutation, MAddOrderPromoVariables>(\n    MAddOrderPromoDocument,\n    baseOptions,\n  )\n}\n\nexport const MCancelOrderDocument = gql`\n  mutation MCancelOrder($orderId: ID!) {\n    addOrderState(order: $orderId, orderState: CANCELED) {\n      id\n    }\n  }\n`\n\nexport function useMCancelOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCancelOrderMutation,\n    MCancelOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MCancelOrderMutation, MCancelOrderVariables>(\n    MCancelOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderAcceptDocument = gql`\n  mutation MCreateOrderAccept(\n    $orderId: ID!\n    $customer: InputCustomerCreate!\n    $deliverAt: DateTime\n    $note: String\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        customer: $customer\n        note: $note\n        deliverAt: $deliverAt\n        paymentMethod: CASH\n        paymentGate: CASH\n      }\n    ) {\n      userErrors\n      order {\n        ...FCreateOrder\n      }\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderAccept(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAcceptMutation,\n    MCreateOrderAcceptVariables\n  >(MCreateOrderAcceptDocument, baseOptions)\n}\n\nexport const MCreateOrderAddRecipeDocument = gql`\n  mutation MCreateOrderAddRecipe(\n    $orderId: ID!\n    $recipeId: ID!\n    $sidedishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sidedishes\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderAddRecipe(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderAddRecipeMutation,\n    MCreateOrderAddRecipeVariables\n  >(MCreateOrderAddRecipeDocument, baseOptions)\n}\n\nexport const MCreateOrderNewDocument = gql`\n  mutation MCreateOrderNew(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $callEventId: ID\n  ) {\n    createOrder(\n      order: {\n        companyBranch: $branchId\n        deliveryType: $deliveryType\n        callEventId: $callEventId\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: {}\n        warePriceType: DELIVERY\n        orderOrigin: STAFF\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderNew(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderNewMutation,\n    MCreateOrderNewVariables\n  >,\n) {\n  return Hooks.useMutation<MCreateOrderNewMutation, MCreateOrderNewVariables>(\n    MCreateOrderNewDocument,\n    baseOptions,\n  )\n}\n\nexport const MCreateOrderRemoveItemDocument = gql`\n  mutation MCreateOrderRemoveItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderRemoveItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderRemoveItemMutation,\n    MCreateOrderRemoveItemVariables\n  >(MCreateOrderRemoveItemDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateDocument = gql`\n  mutation MCreateOrderUpdate(\n    $orderId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $deliverAt: DateTime\n    $gps: InputGeoPointCreate!\n    $customer: InputCustomerCreate\n  ) {\n    updateOrder(\n      id: $orderId\n      order: {\n        deliveryType: $deliveryType\n        deliverAt: $deliverAt\n        gps: $gps\n        customer: $customer\n      }\n    ) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateMutation,\n    MCreateOrderUpdateVariables\n  >(MCreateOrderUpdateDocument, baseOptions)\n}\n\nexport const MCreateOrderUpdateItemDocument = gql`\n  mutation MCreateOrderUpdateItem($itemId: ID!, $sidedishes: [ID!]) {\n    updateOrderRecipe(id: $itemId, orderRecipe: { sideDishes: $sidedishes }) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMCreateOrderUpdateItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MCreateOrderUpdateItemMutation,\n    MCreateOrderUpdateItemVariables\n  >(MCreateOrderUpdateItemDocument, baseOptions)\n}\n\nexport const MRemoveOrderPromoDocument = gql`\n  mutation MRemoveOrderPromo($orderId: ID!, $codeId: ID!) {\n    removeOrderPromoCode(order: $orderId, promoCode: $codeId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useMRemoveOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >(MRemoveOrderPromoDocument, baseOptions)\n}\n\nexport const QCreateOrderItemDocument = gql`\n  query QCreateOrderItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...FCreateOrderRecipeSidedishes\n      }\n      selectedSidedishes: sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderItem(\n  variables?: QCreateOrderItemVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCreateOrderItemVariables>,\n) {\n  return Hooks.useQuery<QCreateOrderItemQuery, QCreateOrderItemVariables>(\n    QCreateOrderItemDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QCreateOrderRecipeDocument = gql`\n  query QCreateOrderRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...FCreateOrderRecipeSidedishes\n    }\n  }\n\n  ${FCreateOrderRecipeSidedishesFragmentDoc}\n`\n\nexport function useQCreateOrderRecipe(\n  variables?: QCreateOrderRecipeVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCreateOrderRecipeVariables>,\n) {\n  return Hooks.useQuery<QCreateOrderRecipeQuery, QCreateOrderRecipeVariables>(\n    QCreateOrderRecipeDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderCartDocument = gql`\n  query QOrderCart($orderId: ID!) {\n    order(id: $orderId) {\n      ...FCreateOrder\n    }\n  }\n\n  ${FCreateOrderFragmentDoc}\n`\n\nexport function useQOrderCart(\n  variables?: QOrderCartVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderCartVariables>,\n) {\n  return Hooks.useQuery<QOrderCartQuery, QOrderCartVariables>(\n    QOrderCartDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderFormDeliverAtDefaultsDocument = gql`\n  query QOrderFormDeliverAtDefaults($branchId: ID!) {\n    times: companyBranch(id: $branchId) {\n      id\n      deliveryTime: defaultDeliveryTime\n      pickupTime: defaultPickupTime\n    }\n  }\n`\n\nexport function useQOrderFormDeliverAtDefaults(\n  variables?: QOrderFormDeliverAtDefaultsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFormDeliverAtDefaultsVariables>,\n) {\n  return Hooks.useQuery<\n    QOrderFormDeliverAtDefaultsQuery,\n    QOrderFormDeliverAtDefaultsVariables\n  >(QOrderFormDeliverAtDefaultsDocument, variables, baseOptions)\n}\n\nexport const QOrderMenuDocument = gql`\n  query QOrderMenu($branchId: ID!) {\n    orderMenu: wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n    ) {\n      ...FOrderMenuCategory\n    }\n  }\n\n  ${FOrderMenuCategoryFragmentDoc}\n`\n\nexport function useQOrderMenu(\n  variables?: QOrderMenuVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMenuVariables>,\n) {\n  return Hooks.useQuery<QOrderMenuQuery, QOrderMenuVariables>(\n    QOrderMenuDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QValidateLocationDocument = gql`\n  query QValidateLocation(\n    $branchId: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    resolveLocation(\n      companyBranch: $branchId\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      inDeliveryLocation\n      zone {\n        minimalOrderPrice {\n          formattedValue\n        }\n      }\n    }\n  }\n`\n\nexport function useQValidateLocation(\n  variables?: QValidateLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<QValidateLocationVariables>,\n) {\n  return Hooks.useQuery<QValidateLocationQuery, QValidateLocationVariables>(\n    QValidateLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MKitchenRecipeStateDocument = gql`\n  mutation MKitchenRecipeState($recipeId: ID!, $state: OrderRecipeStateEnum!) {\n    updateOrderRecipeState(id: $recipeId, orderRecipeState: $state) {\n      id\n      orderRecipeState {\n        enum\n      }\n      order {\n        id\n        orderStateCategory(target: FE_KITCHEN)\n      }\n    }\n  }\n`\n\nexport function useMKitchenRecipeState(\n  baseOptions?: Hooks.MutationHookOptions<\n    MKitchenRecipeStateMutation,\n    MKitchenRecipeStateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MKitchenRecipeStateMutation,\n    MKitchenRecipeStateVariables\n  >(MKitchenRecipeStateDocument, baseOptions)\n}\n\nexport const QKitchenOrderListDocument = gql`\n  query QKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoryTarget: FE_KITCHEN\n        orderStateCategoriesOR: $categories\n        includeOldFinished: false\n      }\n    ) {\n      id\n      ...FKitchenOrder\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useQKitchenOrderList(\n  variables?: QKitchenOrderListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QKitchenOrderListVariables>,\n) {\n  return Hooks.useQuery<QKitchenOrderListQuery, QKitchenOrderListVariables>(\n    QKitchenOrderListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SKitchenOrderListDocument = gql`\n  subscription SKitchenOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n      orderStateCategoryTarget: FE_KITCHEN\n    ) {\n      order {\n        id\n        ...FKitchenOrder\n      }\n    }\n  }\n\n  ${FKitchenOrderFragmentDoc}\n`\n\nexport function useSKitchenOrderList(\n  variables?: SKitchenOrderListVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SKitchenOrderListSubscription,\n    SKitchenOrderListVariables\n  >(SKitchenOrderListDocument, variables, baseOptions)\n}\n\nexport const QUserBootstrapDocument = gql`\n  query QUserBootstrap($userId: ID!) {\n    user(id: $userId) {\n      id\n      firstName\n      lastName\n      language {\n        rawCode\n      }\n      roles {\n        id\n        name\n      }\n      branches: accessibleBranches {\n        ...FCompanyBranch\n      }\n    }\n    permissions: permissions {\n      canCancelOrders\n      canCreateOrder\n    }\n    access: __schema {\n      queries: queryType {\n        fields {\n          name\n        }\n      }\n      mutations: mutationType {\n        fields {\n          name\n        }\n      }\n      subscriptions: subscriptionType {\n        fields {\n          name\n        }\n      }\n    }\n  }\n\n  ${FCompanyBranchFragmentDoc}\n`\n\nexport function useQUserBootstrap(\n  variables?: QUserBootstrapVariables,\n  baseOptions?: Hooks.QueryHookOptions<QUserBootstrapVariables>,\n) {\n  return Hooks.useQuery<QUserBootstrapQuery, QUserBootstrapVariables>(\n    QUserBootstrapDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderCountDocument = gql`\n  query QOrderCount(\n    $branchesId: [ID!]!\n    $categories: [OrderStateCategoryEnum!]!\n  ) {\n    ordersCount(companyBranches: $branchesId, orderStateCategories: $categories)\n  }\n`\n\nexport function useQOrderCount(\n  variables?: QOrderCountVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderCountVariables>,\n) {\n  return Hooks.useQuery<QOrderCountQuery, QOrderCountVariables>(\n    QOrderCountDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderCallDocument = gql`\n  subscription SOrderCall {\n    call: updatedUserCallingCustomer {\n      eventId\n      phone\n      prefix\n      isRinging\n    }\n  }\n`\n\nexport function useSOrderCall(\n  variables?: SOrderCallVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderCallSubscription,\n    SOrderCallVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderCallSubscription, SOrderCallVariables>(\n    SOrderCallDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderCountDocument = gql`\n  subscription SOrderCount($branchesId: [ID!]!) {\n    updatedOrdersCount(companyBranches: $branchesId) {\n      ordersCount\n    }\n  }\n`\n\nexport function useSOrderCount(\n  variables?: SOrderCountVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderCountSubscription,\n    SOrderCountVariables\n  >,\n) {\n  return Hooks.useSubscription<SOrderCountSubscription, SOrderCountVariables>(\n    SOrderCountDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MMenuCategoryVisibilityDocument = gql`\n  mutation MMenuCategoryVisibility($categoryId: ID!, $visible: Boolean!) {\n    updateWareCategory(id: $categoryId, wareCategory: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport function useMMenuCategoryVisibility(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuCategoryVisibilityMutation,\n    MMenuCategoryVisibilityVariables\n  >(MMenuCategoryVisibilityDocument, baseOptions)\n}\n\nexport const MMenuStockQuantityDocument = gql`\n  mutation MMenuStockQuantity($stockItem: ID!, $quantityChange: Float!) {\n    changeAmountStockItem(id: $stockItem, amountOffset: $quantityChange) {\n      id\n      quantity\n    }\n  }\n`\n\nexport function useMMenuStockQuantity(\n  baseOptions?: Hooks.MutationHookOptions<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MMenuStockQuantityMutation,\n    MMenuStockQuantityVariables\n  >(MMenuStockQuantityDocument, baseOptions)\n}\n\nexport const QMenuCategoryDocument = gql`\n  query QMenuCategory($categoryId: ID!) {\n    category: wareCategory(id: $categoryId) {\n      ...FMenuCategory\n    }\n  }\n\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport function useQMenuCategory(\n  variables?: QMenuCategoryVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryQuery, QMenuCategoryVariables>(\n    QMenuCategoryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuCategoryFilterDocument = gql`\n  query QMenuCategoryFilter($branchId: ID!) {\n    categories: wareCategories(companyBranch: $branchId) {\n      id\n      nameLabel\n      countRecipes\n      categoryType: wareCategoryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useQMenuCategoryFilter(\n  variables?: QMenuCategoryFilterVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryFilterVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryFilterQuery, QMenuCategoryFilterVariables>(\n    QMenuCategoryFilterDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuCategoryListDocument = gql`\n  query QMenuCategoryList(\n    $branchId: ID!\n    $categoryType: WareCategoryTypeEnum!\n  ) {\n    categories: wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: $categoryType\n    ) {\n      ...FMenuCategoryListItem\n    }\n  }\n\n  ${FMenuCategoryListItemFragmentDoc}\n`\n\nexport function useQMenuCategoryList(\n  variables?: QMenuCategoryListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuCategoryListVariables>,\n) {\n  return Hooks.useQuery<QMenuCategoryListQuery, QMenuCategoryListVariables>(\n    QMenuCategoryListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuGuideDownloadDocument = gql`\n  query QMenuGuideDownload($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      foodMenuUrl\n    }\n  }\n`\n\nexport function useQMenuGuideDownload(\n  variables?: QMenuGuideDownloadVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuGuideDownloadVariables>,\n) {\n  return Hooks.useQuery<QMenuGuideDownloadQuery, QMenuGuideDownloadVariables>(\n    QMenuGuideDownloadDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuRecipeListDocument = gql`\n  query QMenuRecipeList(\n    $branchId: ID!\n    $categoryId: ID\n    $categoryType: WareCategoryTypeEnum\n  ) {\n    recipes(\n      companyBranch: $branchId\n      wareCategory: $categoryId\n      wareCategoryType: $categoryType\n    ) {\n      ...FMenuRecipe\n    }\n  }\n\n  ${FMenuRecipeFragmentDoc}\n`\n\nexport function useQMenuRecipeList(\n  variables?: QMenuRecipeListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuRecipeListVariables>,\n) {\n  return Hooks.useQuery<QMenuRecipeListQuery, QMenuRecipeListVariables>(\n    QMenuRecipeListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuStockDepositDocument = gql`\n  query QMenuStockDeposit($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      id\n      code\n      plu\n      nameLabel: label\n      note\n      quantity\n      wareUnit {\n        ...FMenuWareUnit\n      }\n    }\n  }\n\n  ${FMenuWareUnitFragmentDoc}\n`\n\nexport function useQMenuStockDeposit(\n  variables?: QMenuStockDepositVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuStockDepositVariables>,\n) {\n  return Hooks.useQuery<QMenuStockDepositQuery, QMenuStockDepositVariables>(\n    QMenuStockDepositDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QMenuStockListDocument = gql`\n  query QMenuStockList($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      ...GMenuStockItem\n    }\n  }\n\n  ${GMenuStockItemFragmentDoc}\n`\n\nexport function useQMenuStockList(\n  variables?: QMenuStockListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMenuStockListVariables>,\n) {\n  return Hooks.useQuery<QMenuStockListQuery, QMenuStockListVariables>(\n    QMenuStockListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStockRecipesDocument = gql`\n  query QStockRecipes($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      ingredients {\n        id\n        recipe {\n          id\n          nameLabel\n          descriptionLabel\n          recipeType: wareCategoryType {\n            enum\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useQStockRecipes(\n  variables?: QStockRecipesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStockRecipesVariables>,\n) {\n  return Hooks.useQuery<QStockRecipesQuery, QStockRecipesVariables>(\n    QStockRecipesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MBranchDefaultTimeDocument = gql`\n  mutation MBranchDefaultTime(\n    $branchId: ID!\n    $deliveryType: DeliveryTypeEnum!\n    $time: Int!\n  ) {\n    updateDefaultOrderProcessTime(\n      companyBranch: $branchId\n      deliveryType: $deliveryType\n      defaultTime: $time\n    ) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useMBranchDefaultTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MBranchDefaultTimeMutation,\n    MBranchDefaultTimeVariables\n  >(MBranchDefaultTimeDocument, baseOptions)\n}\n\nexport const MOrderChangeToPickupDocument = gql`\n  mutation MOrderChangeToPickup($orderId: ID!) {\n    updateOrderDeliveryToPickup(id: $orderId) {\n      id\n      deliveryType {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMOrderChangeToPickup(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderChangeToPickupMutation,\n    MOrderChangeToPickupVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderChangeToPickupMutation,\n    MOrderChangeToPickupVariables\n  >(MOrderChangeToPickupDocument, baseOptions)\n}\n\nexport const MOrderTimeNotificationDocument = gql`\n  mutation MOrderTimeNotification($orderId: ID!, $minutes: Int!) {\n    orderNotifyCustomer(id: $orderId, minutes: $minutes) {\n      id\n      deliverAt\n    }\n  }\n`\n\nexport function useMOrderTimeNotification(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderTimeNotificationMutation,\n    MOrderTimeNotificationVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderTimeNotificationMutation,\n    MOrderTimeNotificationVariables\n  >(MOrderTimeNotificationDocument, baseOptions)\n}\n\nexport const MRemoveOrderDriverDocument = gql`\n  mutation MRemoveOrderDriver($orderDriverId: ID!) {\n    destroyUserDeliveringOrder(id: $orderDriverId) {\n      order {\n        ...FOrderDriver\n      }\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useMRemoveOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderDriverMutation,\n    MRemoveOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderDriverMutation,\n    MRemoveOrderDriverVariables\n  >(MRemoveOrderDriverDocument, baseOptions)\n}\n\nexport const MSelectOrderDriverDocument = gql`\n  mutation MSelectOrderDriver($driverId: ID!, $orderId: ID!) {\n    result: createUserDeliveringOrder(user: $driverId, order: $orderId) {\n      order {\n        ...FOrderDriver\n      }\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n`\n\nexport function useMSelectOrderDriver(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSelectOrderDriverMutation,\n    MSelectOrderDriverVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MSelectOrderDriverMutation,\n    MSelectOrderDriverVariables\n  >(MSelectOrderDriverDocument, baseOptions)\n}\n\nexport const QBranchDefeaultTimesDocument = gql`\n  query QBranchDefeaultTimes($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      defaultDeliveryTime\n      defaultPickupTime\n    }\n  }\n`\n\nexport function useQBranchDefeaultTimes(\n  variables?: QBranchDefeaultTimesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QBranchDefeaultTimesVariables>,\n) {\n  return Hooks.useQuery<\n    QBranchDefeaultTimesQuery,\n    QBranchDefeaultTimesVariables\n  >(QBranchDefeaultTimesDocument, variables, baseOptions)\n}\n\nexport const QOrderDriversDocument = gql`\n  query QOrderDrivers($orderId: ID!, $branchId: [ID!]!) {\n    order(id: $orderId) {\n      ...FOrderDriver\n    }\n    drivers(companyBranches: $branchId, onlyAvailable: true) {\n      ...FDriver\n    }\n  }\n\n  ${FOrderDriverFragmentDoc}\n  ${FDriverFragmentDoc}\n`\n\nexport function useQOrderDrivers(\n  variables?: QOrderDriversVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderDriversVariables>,\n) {\n  return Hooks.useQuery<QOrderDriversQuery, QOrderDriversVariables>(\n    QOrderDriversDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderMapDeliveriesDocument = gql`\n  query QOrderMapDeliveries($branches: [ID!]!) {\n    deliveries: drivers(companyBranches: $branches, onlyAvailable: false) {\n      ...FOrderMapDelivery\n    }\n  }\n\n  ${FOrderMapDeliveryFragmentDoc}\n`\n\nexport function useQOrderMapDeliveries(\n  variables?: QOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderMapDeliveriesVariables>,\n) {\n  return Hooks.useQuery<QOrderMapDeliveriesQuery, QOrderMapDeliveriesVariables>(\n    QOrderMapDeliveriesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderStateDocument = gql`\n  query QOrderState($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      deliveryType {\n        enum\n      }\n      isCancelable\n      ...FOrderStateCategory\n    }\n    companyBranch(id: $branchId) {\n      id\n      allowedCategories\n    }\n  }\n\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useQOrderState(\n  variables?: QOrderStateVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderStateVariables>,\n) {\n  return Hooks.useQuery<QOrderStateQuery, QOrderStateVariables>(\n    QOrderStateDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const SOrderMapDeliveriesDocument = gql`\n  subscription SOrderMapDeliveries($branches: [ID!]!) {\n    update: updatedTransportationDeviceUser(companyBranches: $branches) {\n      actionType\n      device: transportationDeviceUser {\n        ...FOrderMapDevice\n        user {\n          ...FOrderMapDriver\n        }\n      }\n    }\n  }\n\n  ${FOrderMapDeviceFragmentDoc}\n  ${FOrderMapDriverFragmentDoc}\n`\n\nexport function useSOrderMapDeliveries(\n  variables?: SOrderMapDeliveriesVariables,\n  baseOptions?: Hooks.SubscriptionHookOptions<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >,\n) {\n  return Hooks.useSubscription<\n    SOrderMapDeliveriesSubscription,\n    SOrderMapDeliveriesVariables\n  >(SOrderMapDeliveriesDocument, variables, baseOptions)\n}\n\nexport const MFinancialReportCreateDocument = gql`\n  mutation MFinancialReportCreate($branchId: ID!) {\n    result: createFinancialReport(companyBranchId: $branchId) {\n      id\n    }\n  }\n`\n\nexport function useMFinancialReportCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MFinancialReportCreateMutation,\n    MFinancialReportCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MFinancialReportCreateMutation,\n    MFinancialReportCreateVariables\n  >(MFinancialReportCreateDocument, baseOptions)\n}\n\nexport const QAllDriversDocument = gql`\n  query QAllDrivers($branches: [ID!]!) {\n    drivers(companyBranches: $branches, onlyAvailable: false) {\n      ...FDriver\n    }\n  }\n\n  ${FDriverFragmentDoc}\n`\n\nexport function useQAllDrivers(\n  variables?: QAllDriversVariables,\n  baseOptions?: Hooks.QueryHookOptions<QAllDriversVariables>,\n) {\n  return Hooks.useQuery<QAllDriversQuery, QAllDriversVariables>(\n    QAllDriversDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QClosureHistoryDocument = gql`\n  query QClosureHistory($branchId: ID!, $dateFrom: Date!, $dateTo: Date!) {\n    history: financialReports(\n      companyBranchId: $branchId\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n    ) {\n      id\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useQClosureHistory(\n  variables?: QClosureHistoryVariables,\n  baseOptions?: Hooks.QueryHookOptions<QClosureHistoryVariables>,\n) {\n  return Hooks.useQuery<QClosureHistoryQuery, QClosureHistoryVariables>(\n    QClosureHistoryDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QClosureReportDocument = gql`\n  query QClosureReport($branchId: ID!, $reportId: ID!, $showReport: Boolean!) {\n    lastReport: lastFinancialReport(companyBranchId: $branchId)\n      @skip(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n    report: financialReport(report: $reportId) @include(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport function useQClosureReport(\n  variables?: QClosureReportVariables,\n  baseOptions?: Hooks.QueryHookOptions<QClosureReportVariables>,\n) {\n  return Hooks.useQuery<QClosureReportQuery, QClosureReportVariables>(\n    QClosureReportDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsDailyDocument = gql`\n  query QStatsDaily($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      category: categoryStatisticsPlain\n      daily: dailyStatisticsPlain\n      delivery: deliveryStatisticsPlain\n      drivers: driversStatisticsPlain\n    }\n  }\n`\n\nexport function useQStatsDaily(\n  variables?: QStatsDailyVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsDailyVariables>,\n) {\n  return Hooks.useQuery<QStatsDailyQuery, QStatsDailyVariables>(\n    QStatsDailyDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsOrdersDocument = gql`\n  query QStatsOrders($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      finishedOrders {\n        fees {\n          ...FPriceWithCurrency\n        }\n        onlinePayments {\n          ...FPriceWithCurrency\n        }\n        total {\n          ...FPriceWithCurrency\n        }\n        finishedCount: ordersCount\n        cancelledCount: ordersCanceledCount\n      }\n      orderStatisticsPlain\n    }\n  }\n\n  ${FPriceWithCurrencyFragmentDoc}\n`\n\nexport function useQStatsOrders(\n  variables?: QStatsOrdersVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersQuery, QStatsOrdersVariables>(\n    QStatsOrdersDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsOrdersCountsDocument = gql`\n  query QStatsOrdersCounts($filter: InputStatisticCreate!) {\n    stats: statistics(statisticsInput: $filter) {\n      counts: finishedOrders {\n        finished: ordersCount\n        cancelled: ordersCanceledCount\n      }\n    }\n  }\n`\n\nexport function useQStatsOrdersCounts(\n  variables?: QStatsOrdersCountsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersCountsVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersCountsQuery, QStatsOrdersCountsVariables>(\n    QStatsOrdersCountsDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QStatsOrdersListDocument = gql`\n  query QStatsOrdersList(\n    $filter: InputStatisticCreate!\n    $pagination: InputPaginationParams\n  ) {\n    stats: statistics(statisticsInput: $filter) {\n      orders: finishedOrders {\n        list: orders(includeCanceled: true, pagination: $pagination) {\n          ...GOrderListTicker\n          ...FOrderStateCategory\n        }\n      }\n    }\n  }\n\n  ${GOrderListTickerFragmentDoc}\n  ${FOrderStateCategoryFragmentDoc}\n`\n\nexport function useQStatsOrdersList(\n  variables?: QStatsOrdersListVariables,\n  baseOptions?: Hooks.QueryHookOptions<QStatsOrdersListVariables>,\n) {\n  return Hooks.useQuery<QStatsOrdersListQuery, QStatsOrdersListVariables>(\n    QStatsOrdersListDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MUserMenuLanguageDocument = gql`\n  mutation MUserMenuLanguage($userId: ID!, $lang: LanguageEnum!) {\n    updateUser(id: $userId, user: { language: $lang }) {\n      id\n      language {\n        enum\n      }\n    }\n  }\n`\n\nexport function useMUserMenuLanguage(\n  baseOptions?: Hooks.MutationHookOptions<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MUserMenuLanguageMutation,\n    MUserMenuLanguageVariables\n  >(MUserMenuLanguageDocument, baseOptions)\n}\n\nexport const QUserMenuLanguagesDocument = gql`\n  query QUserMenuLanguages {\n    languages {\n      code\n      enum\n      rawCode\n    }\n  }\n`\n\nexport function useQUserMenuLanguages(\n  variables?: QUserMenuLanguagesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QUserMenuLanguagesVariables>,\n) {\n  return Hooks.useQuery<QUserMenuLanguagesQuery, QUserMenuLanguagesVariables>(\n    QUserMenuLanguagesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MZoneUpdateDocument = gql`\n  mutation MZoneUpdate($zoneId: ID!, $update: InputZoneUpdate!) {\n    updateZone(id: $zoneId, zone: $update) {\n      ...FZone\n    }\n  }\n\n  ${FZoneFragmentDoc}\n`\n\nexport function useMZoneUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MZoneUpdateMutation,\n    MZoneUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<MZoneUpdateMutation, MZoneUpdateVariables>(\n    MZoneUpdateDocument,\n    baseOptions,\n  )\n}\n\n// Generated in 2019-04-14T13:55:32+02:00\n","import React from 'react'\n\nimport { Spacing } from '../styling'\nimport { Sizer } from './Sizer'\n\ninterface IProps {}\n\nexport const SizerButton: React.FC<IProps> = ({ children, ...props }) => {\n  return (\n    <Sizer\n      width={Spacing.ButtonHeight}\n      height={Spacing.ButtonHeight}\n      {...props}\n    >\n      {children}\n    </Sizer>\n  )\n}\n","import 'rc-slider/assets/index.css'\n\nimport React from 'react'\n\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\nimport { SizerButton } from './SizerButton'\nimport { WithRoot } from './WithRoot'\n\nexport class SoundControl extends React.Component {\n  state = { playPreview: false }\n  render() {\n    return (\n      <WithRoot\n        observe={true}\n        render={({ user }) => (\n          <SizerButton>\n            <TouchButton\n              color={user.soundEnabled ? Colors.green : Colors.red}\n              iconName={user.soundEnabled ? 'volume_up' : 'volume_off'}\n              iconSize={2}\n              onClick={() => {\n                user.controlSound(!user.soundEnabled)\n              }}\n            />\n          </SizerButton>\n        )}\n      />\n    )\n  }\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { useRoot } from '../atoms/RootProvider'\nimport { useQLogoutWidget } from '../graph/generated'\nimport { i18n } from '../i18n'\nimport { Colors } from '../styling'\n\nconst LogoutWidgetStyled = styled.div`\n  margin-left: 1rem;\n  color: ${Colors.greyLight};\n  &:hover {\n    color: ${Colors.white};\n  }\n`\nconst LoggedUserNameStyled = styled.span`\n  color: ${Colors.greyLight};\n  text-decoration: none;\n  font-weight: lighter;\n  position: relative;\n  top: 0.6rem;\n  display: inline-block;\n  max-width: 10rem;\n  text-align: right;\n`\n\nconst IconStyled = styled.span`\n  padding: 0.5rem 0.5rem 0 0.5rem;\n  display: inline-block;\n  vertical-align: top;\n`\n\nexport const LogoutWidget = observer(() => {\n  const { auth } = useRoot()\n  const { data, loading } = useQLogoutWidget({ id: auth.userId })\n\n  let displayName\n  if (loading) {\n    displayName = i18n.t`Not logged in`\n  } else {\n    displayName = `${data.user.firstName} ${data.user.lastName}`\n  }\n\n  return (\n    <LogoutWidgetStyled data-testid=\"logout-widget\">\n      <Link to=\"/logout\">\n        <LoggedUserNameStyled>{displayName}</LoggedUserNameStyled>\n        <IconStyled>\n          <Icon iconName=\"exit_to_app\" />\n        </IconStyled>\n      </Link>\n    </LogoutWidgetStyled>\n  )\n})\n","import Color from 'color'\nimport React, { MouseEvent } from 'react'\nimport { Link, Route } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Icon } from '../atoms/Icon'\nimport { Colors, Radiuses, Spacing } from '../styling'\n\ninterface IHomeButtonProps {\n  iconColor?: Colors\n  color?: Colors\n  disabled?: boolean\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n  goBack?: boolean\n  backRoute?: string\n}\n\nconst applyAlpha = (alphaValue: number) => (props: IHomeButtonProps) =>\n  Color(props.color)\n    .alpha(alphaValue)\n    .string()\n\nconst HomeButtonStyled = styled.button`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 0 0 ${Radiuses.Button} 0 !important;\n  height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  margin: 0;\n  padding: 0.2rem;\n  border: none;\n  border-radius: ${Radiuses.Button};\n  background-color: ${applyAlpha(0.7)};\n  color: white;\n  position: relative;\n  font-size: 1rem;\n  transition-duration: 0.2s;\n\n  &:hover:enabled {\n    background-color: ${applyAlpha(0.9)};\n  }\n  &:active:enabled {\n    background-color: ${applyAlpha(1)};\n  }\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`\n\nexport const HomeButton: React.FC<IHomeButtonProps> = ({\n  color = Colors.greyMiddle,\n  iconColor = Colors.white,\n  goBack = false,\n  backRoute,\n  ...props\n}) => {\n  if (goBack) {\n    return (\n      <Route>\n        {({ history }) => (\n          <HomeButtonStyled\n            color={color}\n            onClick={() => {\n              if (backRoute) {\n                history.push(backRoute)\n              } else {\n                history.goBack()\n              }\n            }}\n            {...props}\n          >\n            <Icon iconName=\"chevron_left\" color={iconColor} fontSize={2.2} />\n          </HomeButtonStyled>\n        )}\n      </Route>\n    )\n  }\n  return (\n    <Link to=\"/\">\n      <HomeButtonStyled color={color} {...props}>\n        <Icon iconName=\"home\" color={iconColor} fontSize={2.2} />\n      </HomeButtonStyled>\n    </Link>\n  )\n}\n","import React from 'react'\nimport { Layout } from 'react-grid-layout'\nimport styled from 'styled-components'\n\nimport { GridLayout } from '../atoms/GridLayout'\nimport { PageTitle } from '../atoms/PageTitle'\nimport { SoundControl } from '../atoms/SoundControl'\nimport { LogoutWidget } from '../organisms/LogoutWidget'\nimport { SecureRoute } from '../routes/SecureRoute'\nimport { HomeButton } from './HomeButton'\n\nexport interface IPageLayoutProps {\n  pageTitle?: string\n  layouts?: Layout[]\n  hideLogoutWidget?: boolean\n  showSoundControl?: boolean\n  useBackButton?: boolean\n  backRoute?: string\n  scrollPageTitle?: boolean\n  topContent?: React.ReactNode\n}\n\nconst TopLeftButtonContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n`\n\nconst getPosition = (props: IPageLayoutProps) =>\n  props.scrollPageTitle ? 'absolute' : 'fixed'\n\nconst TopRightContainer = styled.div`\n  position: ${getPosition};\n  top: 0;\n  right: 0;\n  z-index: 100;\n  display: flex;\n  justify-content: flex-end;\n`\nconst PageTitleContainer = styled.div`\n  position: ${getPosition};\n  top: 0rem;\n  left: 4rem;\n`\nconst PageHeaderItem = styled.div`\n  margin: 0.5rem;\n`\n\nexport const PageLayout: React.FC<IPageLayoutProps> = ({\n  pageTitle = '',\n  layouts = [],\n  hideLogoutWidget = false,\n  showSoundControl = false,\n  useBackButton = false,\n  scrollPageTitle = true,\n  backRoute,\n  children,\n  topContent,\n}) => (\n  <>\n    {pageTitle && <PageTitle title={pageTitle} />}\n\n    <TopRightContainer scrollPageTitle={scrollPageTitle}>\n      <PageHeaderItem>{topContent}</PageHeaderItem>\n      {showSoundControl && (\n        <PageHeaderItem>\n          <SoundControl />\n        </PageHeaderItem>\n      )}\n\n      {!hideLogoutWidget && (\n        <SecureRoute path=\"/\" component={LogoutWidget} redirect={false} />\n      )}\n    </TopRightContainer>\n\n    <PageTitleContainer scrollPageTitle={scrollPageTitle}>\n      <PageTitle.Display />\n    </PageTitleContainer>\n\n    <GridLayout layouts={[...layouts]}>{children}</GridLayout>\n\n    <TopLeftButtonContainer>\n      <HomeButton goBack={useBackButton} backRoute={backRoute} />\n    </TopLeftButtonContainer>\n  </>\n)\n","import React from 'react'\n\ninterface ILoadingProps {\n  text?: string\n}\n\nexport const Loading: React.FC<ILoadingProps> = ({ text = '...' }) => (\n  <h1>{text}</h1>\n)\n","import debug from 'debug'\n\n// @ts-ignore\ndebug.useColors = () => !process.env.REACT_APP_STAGE\n\nexport const logMain = debug('main')\nexport const logDebug = debug('debug')\nexport const logError = debug('error')\nexport const logAuth = debug('auth')\nexport const logRouting = debug('routing')\nexport const logPersistence = debug('persistence')\nexport const logBootstrap = debug('bootstrap')\nexport const logAccess = debug('access')\nexport const logGraph = debug('graph')\nexport const logForm = debug('form')\nexport const logSentry = debug('sentry')\nexport const logLang = debug('lang')\nexport const logUpdate = debug('update')\n// tslint:disable-next-line:no-console\nexport const logTest = console.log\n","import React from 'react'\nimport RGL, { Layout, WidthProvider } from 'react-grid-layout'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\ninterface IGridLayoutProps {\n  layouts: Layout[]\n}\n\nexport const GridLayout: React.FC<IGridLayoutProps> = ({\n  children,\n  layouts,\n}) => (\n  <ReactGridLayout\n    className=\"layout\"\n    layout={layouts}\n    cols={16}\n    rowHeight={55}\n    margin={[8, 8]}\n    autoSize={false}\n    isDraggable={false}\n    isResizable={false}\n    compactType={null}\n    measureBeforeMount={true}\n  >\n    {children}\n  </ReactGridLayout>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport {\n  FMenuCategoryListItemFragmentDoc,\n  FPriceFragmentDoc,\n} from '../../../graph/generated'\nimport { GMenuRecipeFormAssoc } from '../../../graph/types'\n\nexport const MenuRecipePriceFragment = gql`\n  fragment GMenuRecipePrice on RecipePrice {\n    id\n    priceType: warePriceType {\n      enum\n    }\n    price {\n      currency {\n        code\n      }\n      ...FPrice\n    }\n    vat {\n      id\n    }\n  }\n  ${FPriceFragmentDoc}\n`\n\nexport const MenuAssocRecipeFragment = gql`\n  fragment GMenuAssocRecipe on Recipe {\n    id\n    nameLabel\n  }\n`\n\nexport const MenuRecipeFormQuery = gql`\n  query GMenuRecipeForm($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      id\n      code\n      image\n      nameLabel\n      internalNote\n      descriptionLabel\n      visible: enabled\n      recipeType: wareCategoryType {\n        enum\n      }\n      sourcePrices: prices {\n        ...GMenuRecipePrice\n      }\n      sideDishes: sideDishesWareCategories {\n        ...FMenuCategoryListItem\n      }\n      categories: wareCategories {\n        ...FMenuCategoryListItem\n      }\n      sourceAssociatedRecipes: associatedRecipes {\n        id\n        priceType: warePriceType {\n          enum\n        }\n        recipe: associatedRecipe {\n          ...GMenuAssocRecipe\n        }\n      }\n      sourceIngredients: ingredients {\n        id\n        quantity\n        stockItem {\n          id\n          label\n          wareUnit {\n            id\n            code\n          }\n          allergens {\n            id\n            enum\n          }\n        }\n      }\n    }\n  }\n  ${MenuRecipePriceFragment}\n  ${FMenuCategoryListItemFragmentDoc}\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeFormAssocQuery = gql`\n  query GMenuRecipeFormAssoc($branchId: ID!) {\n    recipes(companyBranch: $branchId) {\n      ...GMenuAssocRecipe\n    }\n  }\n  ${MenuAssocRecipeFragment}\n`\n\nexport const MenuRecipeDefaults = gql`\n  query GMenuRecipeDefaults($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      vats: defaultVats {\n        vatId: id\n        priceType: warePriceType {\n          enum\n        }\n      }\n      currency: defaultCurrency {\n        code\n      }\n    }\n  }\n`\n\nexport const QueryMenuRecipeFormAssoc = buildQuery<\n  GMenuRecipeFormAssoc.Query,\n  GMenuRecipeFormAssoc.Variables\n>(MenuRecipeFormAssocQuery)\n","import moment from 'moment'\n\nexport async function changeMomentLocale(lang: string) {\n  if (lang === 'en') {\n    moment.locale(lang)\n    return\n  }\n  const locale = await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"moment-[index]\" */\n    `moment/locale/${lang}`\n  )\n  moment.updateLocale(lang, locale)\n}\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { useReaction } from '@speedlo/hooks'\nimport * as detector from 'locales-detector'\nimport React from 'react'\n\nimport { useRoot } from './atoms/RootProvider'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\nimport { changeMomentLocale } from './locale/moment'\nimport { changeNumeralLocale } from './locale/numeral'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC = ({ children }) => {\n  const { user } = useRoot()\n  const [, forceUpdate] = React.useState(0)\n\n  useReaction(\n    () => user.language,\n    async (lang = detectLanguage()) => {\n      await setupLanguage(lang)\n      user.log('setup for language %s done', lang)\n      forceUpdate(i => i + 1)\n    },\n  )\n\n  return (\n    <I18nProvider i18n={i18n}>{React.Children.only(children)}</I18nProvider>\n  )\n}\n\nexport function detectLanguage() {\n  const resolver = new detector.LocaleResolver(\n    [new detector.NavigatorDetector()],\n    [new detector.LanguageOnlyTransformer()],\n  )\n  const languages = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nexport async function setupLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await Promise.all([\n    loadCatalog(lang),\n    changeNumeralLocale(lang),\n    changeMomentLocale(lang),\n  ])\n  i18n.activate(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","import gql from 'graphql-tag'\n\nimport { FMenuCategoryFragmentDoc } from '../../../graph/generated'\n\nexport const SortMenuCategoryMutation = gql`\n  mutation GSortMenuCategory($categoryId: ID!, $offset: Int!) {\n    success: updateWareCategoriesOrder(\n      wareCategory: $categoryId\n      offset: $offset\n    )\n  }\n`\n\nexport const MenuCategoryCreateMutation = gql`\n  mutation GMenuCategoryCreate($input: InputWareCategoryCreate!) {\n    createWareCategory(wareCategory: $input) {\n      id\n    }\n  }\n`\n\nexport const MenuCategoryUpdateMutation = gql`\n  mutation GMenuCategoryUpdate(\n    $categoryId: ID!\n    $input: InputWareCategoryUpdate!\n  ) {\n    updateWareCategory(id: $categoryId, wareCategory: $input) {\n      ...FMenuCategory\n    }\n  }\n  ${FMenuCategoryFragmentDoc}\n`\n\nexport const MenuCategoryDeleteMutation = gql`\n  mutation GMenuCategoryDelete($categoryId: ID!) {\n    destroyWareCategory(id: $categoryId) {\n      id\n    }\n  }\n`\n","import { LocationDescriptor } from 'history'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  FMenuCategoryFragment,\n  WareCategoryTypeEnum,\n} from '../../../graph/generated'\nimport {\n  GMenuCategoryCreate,\n  GMenuCategoryDelete,\n  GMenuCategoryUpdate,\n  GSortMenuCategory,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuCategoryCreateMutation,\n  MenuCategoryDeleteMutation,\n  MenuCategoryUpdateMutation,\n  SortMenuCategoryMutation,\n} from './MenuCategoryModel.graphql'\n\nexport interface TCategoryFormValues extends FMenuCategoryFragment {}\n\nexport const MenuCategoryModel = MenuBaseModel.named('MenuCategory').actions(\n  self => ({\n    async sortCategory(categoryId: ID, offset: number) {\n      const variables: GSortMenuCategory.Variables = {\n        categoryId,\n        offset,\n      }\n      const result = await self.client.mutate({\n        mutation: SortMenuCategoryMutation,\n        variables,\n      })\n      return Boolean(result.data && result.data.success)\n    },\n    createCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryCreate.Variables = {\n        input: {\n          companyBranch: self.branchId,\n          wareCategoryType: categoryType,\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryCreateMutation,\n          variables,\n        }),\n      )\n    },\n    async updateCategory(\n      formValues: TCategoryFormValues,\n      categoryType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuCategoryUpdate.Variables = {\n        categoryId: formValues.id,\n        input: {\n          ...getFormVariables(formValues, categoryType),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuCategoryUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteCategory(categoryId: ID, categoryType: WareCategoryTypeEnum) {\n      const variables: GMenuCategoryDelete.Variables = {\n        categoryId,\n      }\n      await self.client.mutate({\n        mutation: MenuCategoryDeleteMutation,\n        variables,\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(\n  formValues: TCategoryFormValues,\n  categoryType: WareCategoryTypeEnum,\n) {\n  return Object.assign({\n    nameLabel: formValues.nameLabel,\n    internalNoteLabel: formValues.internalNoteLabel,\n    enabled: formValues.visible,\n    pictogram: formValues.pictogram,\n    recipes: formValues.recipes.map(RM.prop('id')),\n    minCount: formValues.minCount,\n    maxCount: formValues.maxCount,\n  })\n}\n\nexport const getCategoryRoute = (\n  recipeId: ID,\n  categoryType: WareCategoryTypeEnum,\n): LocationDescriptor => ({\n  pathname: recipeId,\n  state: { categoryType },\n})\n","import gql from 'graphql-tag'\n\nimport { SpecificBusinessHourFragment } from '../organisms/SpecificBusinessHours.graphql'\n\nexport const CreateSpecificBusinessHour = gql`\n  mutation GCreateSpecificBusinessHour(\n    $input: InputBusinessHourSpecificDateCreate!\n  ) {\n    result: addSpecialBusinessHour(businessHour: $input) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`\n\nexport const DeleteSpecificBusinessHour = gql`\n  mutation GDeleteSpecificBusinessHour($id: ID!) {\n    result: destroyBusinessHour(id: $id) {\n      id\n    }\n  }\n`\n","import { isoDate } from '@speedlo/graphql'\nimport { types } from 'mobx-state-tree'\n\nimport {\n  GCreateSpecificBusinessHour,\n  GDeleteSpecificBusinessHour,\n} from '../../../graph/types'\nimport { formatTime } from '../../../helpers/formats'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport {\n  CreateSpecificBusinessHour,\n  DeleteSpecificBusinessHour,\n} from './BusinessHoursModel.graphql'\n\nexport enum ESpecificHourMode {\n  TIMESPAN = 'TIMESPAN',\n  FULLDAY = 'FULLDAY',\n}\n\nexport interface ISpecificFormData {\n  date: Date\n  openAt: Date\n  closeAt: Date\n  note: string\n}\n\nconst byIdPredicate = RM.complement(RM.propEq('id'))\n\nexport const BusinessHoursModel = BaseModel.named('BusinessHours')\n  .props({\n    specificMode: types.optional(\n      types.enumeration(['TIMESPAN', 'FULLDAY']),\n      ESpecificHourMode.TIMESPAN,\n    ),\n  })\n  .actions(self => ({\n    changeSpecificMode(mode: ESpecificHourMode) {\n      self.specificMode = mode\n    },\n    submitSpecificHour(values: ISpecificFormData) {\n      const variables: GCreateSpecificBusinessHour.Variables = {\n        input: {\n          companyBranch: self.root.settings.branchId,\n          specificDate: isoDate(values.date),\n          closed: self.specificMode === ESpecificHourMode.FULLDAY,\n          openAt: values.openAt && formatTime(values.openAt),\n          closeAt: values.closeAt && formatTime(values.closeAt),\n          closedNote: values.note,\n        },\n      }\n      self.client.mutate<GCreateSpecificBusinessHour.Mutation>({\n        mutation: CreateSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.concat(\n                  mutationResult.data.result,\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n    deleteSpecificHour(businessHourId: ID) {\n      const variables: GDeleteSpecificBusinessHour.Variables = {\n        id: businessHourId,\n      }\n      self.client.mutate({\n        mutation: DeleteSpecificBusinessHour,\n        variables,\n        updateQueries: {\n          GSpecificBusinessHours: (prev, { mutationResult }) => {\n            if (mutationResult.data) {\n              return {\n                businessHours: prev.businessHours.filter(\n                  byIdPredicate(mutationResult.data.result.id),\n                ),\n              }\n            }\n            return prev\n          },\n        },\n      })\n    },\n  }))\n","import gql from 'graphql-tag'\n\nimport { FPriceFragmentDoc } from '../../../graph/generated'\n\nexport const MenuRecipeFragment = gql`\n  fragment GMenuRecipe on Recipe {\n    id\n    code\n    visible: enabled\n    nameLabel\n    internalNote\n    availableAmount\n    prices {\n      id\n      priceType: warePriceType {\n        enum\n      }\n      price {\n        ...FPrice\n        formattedValue\n      }\n    }\n    recipeType: wareCategoryType {\n      enum\n    }\n  }\n  ${FPriceFragmentDoc}\n`\n\nexport const MenuRecipeVisibilityMutation = gql`\n  mutation GMenuRecipeVisibility($recipeId: ID!, $visible: Boolean!) {\n    updateRecipe(id: $recipeId, recipe: { enabled: $visible }) {\n      id\n      visible: enabled\n    }\n  }\n`\n\nexport const MenuRecipeCreateMutation = gql`\n  mutation GMenuRecipeCreate($recipe: InputRecipeCreate!) {\n    createRecipe(recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeUpdateMutation = gql`\n  mutation GMenuRecipeUpdate($recipeId: ID!, $recipe: InputRecipeUpdate!) {\n    updateRecipe(id: $recipeId, recipe: $recipe) {\n      ...GMenuRecipe\n    }\n  }\n  ${MenuRecipeFragment}\n`\n\nexport const MenuRecipeDeleteMutation = gql`\n  mutation GMenuRecipeDelete($recipeId: ID!) {\n    destroyRecipe(id: $recipeId) {\n      id\n    }\n  }\n`\n","import { LocationDescriptorObject } from 'history'\nimport numeral from 'numeral'\n\nimport { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  WareCategoryTypeEnum,\n  WarePriceTypeEnum,\n} from '../../../graph/generated'\nimport {\n  GMenuRecipeCreate,\n  GMenuRecipeDefaults,\n  GMenuRecipeDelete,\n  GMenuRecipeUpdate,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { TRecipeFormValues } from '../menutypes'\nimport { MenuRecipeDefaults } from '../organisms/RecipeForm.graphql'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuRecipeCreateMutation,\n  MenuRecipeDeleteMutation,\n  MenuRecipeUpdateMutation,\n  MenuRecipeVisibilityMutation,\n} from './MenuRecipeModel.graphql'\n\nexport const MenuRecipeModel = MenuBaseModel.named('MenuRecipe')\n  .volatile(() => ({\n    categoryFilterId: null as MaybeID,\n  }))\n  .actions(self => ({\n    changeVisibility(recipeId: ID, visible: boolean) {\n      self.client.mutate({\n        mutation: MenuRecipeVisibilityMutation,\n        variables: { recipeId, visible },\n        optimisticResponse: {\n          updateRecipe: {\n            __typename: 'Recipe',\n            id: recipeId,\n            visible,\n          },\n        },\n      })\n    },\n    setCategoryFilter(categoryId: MaybeID) {\n      self.categoryFilterId = categoryId\n    },\n    createRecipe(\n      formValues: TRecipeFormValues,\n      recipeType: WareCategoryTypeEnum,\n    ) {\n      const variables: GMenuRecipeCreate.Variables = {\n        recipe: {\n          companyBranch: self.branchId,\n          wareCategoryType: recipeType,\n          ...getRecipeVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeCreateMutation,\n          variables,\n        }),\n      )\n    },\n    updateRecipe(formValues: TRecipeFormValues) {\n      const variables: GMenuRecipeUpdate.Variables = {\n        recipeId: formValues.id,\n        recipe: {\n          ...getRecipeVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuRecipeUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteRecipe(recipeId: ID) {\n      const variables: GMenuRecipeDelete.Variables = {\n        recipeId,\n      }\n      await self.client.mutate({\n        mutation: MenuRecipeDeleteMutation,\n        variables,\n      })\n    },\n    async queryDefaults() {\n      const { data } = await self.client.query<GMenuRecipeDefaults.Query>({\n        query: MenuRecipeDefaults,\n        variables: { branchId: self.branchId },\n      })\n      const {\n        companyBranch: {\n          vats,\n          currency: { code },\n        },\n      } = data\n      return {\n        vats: vats.reduce((result, { vatId, priceType }) => {\n          result[priceType.enum] = vatId\n          return result\n        }, {}),\n        currencyCode: code,\n      }\n    },\n  }))\n\nfunction getRecipeVariables(formValues: TRecipeFormValues) {\n  return {\n    code: formValues.code,\n    nameLabel: formValues.nameLabel,\n    internalNote: formValues.internalNote,\n    descriptionLabel: formValues.descriptionLabel,\n    enabled: formValues.visible,\n    prices: Object.keys(formValues.prices).map(priceType => ({\n      warePriceType: (priceType as unknown) as WarePriceTypeEnum,\n      price: { value: numeral(formValues.prices[priceType].value).value() },\n      vat: formValues.prices[priceType].vatId!,\n    })),\n    sideDishCategories: formValues.sideDishes.map(RM.prop('id')),\n    wareCategories: formValues.categories.map(RM.prop('id')),\n    associatedRecipes: formValues.associatedRecipes.map(\n      RM.pick(['associatedRecipe', 'warePriceType']),\n    ),\n    ingredients: formValues.ingredients.map(({ stockItem, quantity }) => {\n      return { stockItem, quantity: parseNumber(quantity) }\n    }),\n  }\n}\n\nfunction parseNumber(value: string | number) {\n  return typeof value === 'number'\n    ? value\n    : Number.parseFloat(value.replace(',', '.'))\n}\n\nexport const getRecipeRoute = (\n  recipeId: ID,\n  recipeType: WareCategoryTypeEnum,\n): LocationDescriptorObject<any> => ({\n  pathname: recipeId,\n  state: { recipeType },\n})\n","import numeral from 'numeral'\n\nexport async function changeNumeralLocale(lang: string) {\n  if (lang === 'en') {\n    numeral.locale(lang)\n    return\n  }\n  await import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"numeral-[index]\" */\n    `numeral/locales/${lang}`\n  )\n  numeral.locale(lang)\n}\n\nconst numberRx = /[\\d\\.,\\s]+/\n\nexport function validateNumber(input: string) {\n  return numberRx.test(input)\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GSpecificBusinessHours } from '../../../graph/types'\n\nexport const SpecificBusinessHourFragment = gql`\n  fragment GSpecificBusinessHour on BusinessHour {\n    id\n    companyBranch {\n      id\n    }\n    specificDate\n    specificDateLocalized\n    closed\n    closedNote\n    openAt\n    closeAt\n  }\n`\n\nexport const QuerySpecificBusinessHours = buildQuery<\n  GSpecificBusinessHours.Query,\n  GSpecificBusinessHours.Variables\n>(gql`\n  query GSpecificBusinessHours($branchId: ID!) {\n    businessHours(companyBranch: $branchId, specific: true) {\n      ...GSpecificBusinessHour\n    }\n  }\n  ${SpecificBusinessHourFragment}\n`)\n","import gql from 'graphql-tag'\n\nimport { FGeoPointFragmentDoc } from '../../graph/generated'\n\nexport const ZoneLocationQuery = gql`\n  query GZoneLocation($zoneId: ID!) {\n    zone(id: $zoneId) {\n      id\n      companyBranch {\n        id\n        gps {\n          ...FGeoPoint\n        }\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n\nexport const ZoneBranchLocationQuery = gql`\n  query GZoneBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n\nexport const ZoneColorsQuery = gql`\n  query GZoneColors {\n    zoneColors {\n      id\n      code\n      color\n    }\n  }\n`\n","import styled from 'styled-components'\n\nexport interface IProps {\n  margin: string\n  className?: string\n}\n\nexport const MarginBox = styled('div')`\n  margin: ${(props: IProps) => props.margin};\n`\n","import { addSeconds, differenceInMilliseconds } from 'date-fns'\nimport { Component } from 'react'\n\ninterface IRenderProps {\n  isActive: boolean\n  nextLoop(): void\n}\n\ninterface IProps {\n  intervalSec: number\n  enabled?: boolean\n  render(props: IRenderProps): ReactNode\n}\n\ninterface IState {\n  isActive: boolean\n  nextTime: Date\n}\n\nexport class IntervalRender extends Component<IProps, IState> {\n  state: IState = { isActive: false, nextTime: this.getNextTime() }\n  timer = 0\n  componentDidMount() {\n    this.executeTimer()\n  }\n  componentDidUpdate() {\n    this.executeTimer()\n  }\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer)\n    }\n  }\n  getNextTime() {\n    return addSeconds(new Date(), this.props.intervalSec)\n  }\n  executeTimer = () => {\n    if (this.timer) {\n      clearTimeout(this.timer)\n      this.timer = 0\n    }\n    if (this.props.enabled === false) {\n      return\n    }\n    const timeMs = differenceInMilliseconds(this.state.nextTime, new Date())\n    // @ts-ignore (setTimeout returning NodeJS.Timer) for some weird reason\n    this.timer = setTimeout(this.activate, timeMs)\n  }\n  activate = () => {\n    if (this.props.enabled !== false) {\n      this.setState({\n        isActive: true,\n        nextTime: this.getNextTime(),\n      })\n    }\n  }\n  deactivate = () => {\n    this.setState({ isActive: false })\n    this.executeTimer()\n  }\n  render() {\n    const { isActive } = this.state\n    return this.props.render({\n      isActive,\n      nextLoop: this.deactivate,\n    })\n  }\n}\n","import React from 'react'\nimport Sound from 'react-sound'\n\nimport { logMain } from '../helpers/logger'\nimport { IntervalRender } from './IntervalRender'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {\n  intervalSec: number\n  soundUrl: string\n  shouldPlay?: boolean\n  skipEnableChecks?: boolean\n}\n\nexport const SoundPlayInterval: React.FC<IProps> = ({\n  intervalSec,\n  soundUrl,\n  shouldPlay = true,\n  skipEnableChecks = false,\n}) => (\n  <WithRoot\n    observe={true}\n    render={({ config, user }) => {\n      if (!skipEnableChecks) {\n        if (!config.soundEnabled) {\n          logMain('sound is disabled')\n          return null\n        }\n        if (!user.soundEnabled) {\n          logMain('sound not enabled by user')\n          return null\n        }\n      }\n      logMain('sound play status: %s', shouldPlay)\n      return (\n        <IntervalRender\n          intervalSec={intervalSec}\n          enabled={shouldPlay}\n          render={({ isActive, nextLoop }) => (\n            <Sound\n              url={soundUrl}\n              playStatus={isActive ? 'PLAYING' : 'STOPPED'}\n              onFinishedPlaying={nextLoop}\n              loop={false}\n              autoLoad={true}\n              volume={user.soundVolume}\n            />\n          )}\n        />\n      )\n    }}\n  />\n)\n","module.exports = __webpack_public_path__ + \"static/media/connectionWarning.ac6fe03b.mp3\";","import { ISetDidChange, Lambda, observable } from 'mobx'\nimport { getParent, Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { scroller } from 'react-scroll'\n\nimport { OrderStateCategoryEnum } from '../../../graph/generated'\nimport { GOrderList } from '../../../graph/types'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TOrderModel } from './OrderModel'\n\nexport const OrderListModel = BaseModel.named('OrderList')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    collapsedCategories: types.optional(types.array(types.string), [\n      OrderStateCategoryEnum.Finished,\n    ]),\n  })\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length ? Array.from(self.branches) : []\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n    get isSingleBranchSelected() {\n      return self.branches.length === 1\n    },\n    get firstBranchId() {\n      if (self.branches.length === 1) {\n        return self.branches[0]\n      }\n      return null\n    },\n    get orderMap() {\n      return getParent<TOrderModel>(self).map\n    },\n  }))\n  .actions(self => ({\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    panMapToOrder(order: GOrderList.Orders) {\n      self.orderMap.panToOrder(order.id)\n    },\n  }))\n  .extend(self => {\n    const detailOpen = observable.set<ID>()\n\n    return {\n      views: {\n        isOrderDetailOpen(orderId: ID) {\n          return detailOpen.has(orderId)\n        },\n        isCategoryCollapsed(categoryCode: OrderStateCategoryEnum) {\n          return self.collapsedCategories.includes(categoryCode)\n        },\n      },\n      actions: {\n        toggleOrderDetail(orderId: ID) {\n          if (detailOpen.has(orderId)) {\n            detailOpen.delete(orderId)\n          } else {\n            detailOpen.add(orderId)\n          }\n        },\n        toggleCategoryCollapse(category: OrderStateCategoryEnum) {\n          const index = self.collapsedCategories.indexOf(category)\n          if (index >= 0) {\n            self.collapsedCategories.splice(index, 1)\n          } else {\n            self.collapsedCategories.push(category)\n          }\n        },\n        focusOrderDetail(orderId: ID) {\n          if (!detailOpen.has(orderId)) {\n            detailOpen.add(orderId)\n          }\n          setImmediate(() => {\n            scroller.scrollTo(`order-${orderId}`, {\n              smooth: 'easeInOutQuart',\n              containerId: 'order-list',\n              absolute: true,\n              offset: -140,\n            })\n          })\n        },\n        observerOrderDetail: detailOpen.observe.bind(detailOpen) as (\n          listener: (changes: ISetDidChange<ID>) => void,\n        ) => Lambda,\n      },\n    }\n  })\n\nexport interface TOrderListModel extends Instance<typeof OrderListModel> {}\nexport interface TOrderListModelProps\n  extends SnapshotIn<typeof OrderListModel> {}\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n  persistenceKey: 'admin@local',\n  pageTitleSuffix: 'LOCAL',\n  sentryDSN: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'admin@dev',\n    pageTitleSuffix: 'DEV',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'admin@prod',\n    pageTitleSuffix: 'Speɘdlo',\n    sentryDSN: 'https://8838fede172840779e9f26fed441e44c@sentry.io/1354462',\n  })\n}\n","// @ts-ignore temporary before figuring out a logging solution that works in prod\nwindow.localStorage.setItem('debug', '*,-sockjs*')\n","import { createContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const RootContext = createContext<TRootModel | undefined>(undefined)\n","import { createDefaultApolloClient, createNetworkLink } from '@speedlo/graphql'\nimport QueueLink from 'apollo-link-queue'\nimport { RetryLink } from 'apollo-link-retry'\nimport { autorun } from 'mobx'\n\nimport { appConfig } from '../config'\nimport { logGraph } from '../helpers/logger'\nimport { isNetworkOnline } from '../helpers/offline'\nimport { TAuthModel } from '../models/AuthModel'\nimport createAuthLink from './AuthLink'\n\nexport function createApolloClient(auth: TAuthModel) {\n  return createDefaultApolloClient(\n    createAuthLink(auth),\n    createRetryLink(),\n    createOfflineLink(),\n    createNetworkLink(appConfig.endpoint),\n  )\n}\n\nfunction createRetryLink() {\n  return new RetryLink({\n    delay: {\n      initial: 300,\n      max: Infinity,\n      jitter: true,\n    },\n    attempts: {\n      max: 5,\n      retryIf: error => !!error,\n    },\n  })\n}\n\nfunction createOfflineLink() {\n  const offlineLink = new QueueLink()\n  autorun(() => {\n    if (isNetworkOnline()) {\n      logGraph('client is online')\n      offlineLink.open()\n    } else {\n      logGraph('client is offline')\n      offlineLink.close()\n    }\n  })\n  return offlineLink\n}\n","import { ApolloLink, FetchResult, Observable } from 'apollo-link'\nimport { computed } from 'mobx'\nimport VError from 'verror'\n\nimport { TAuthModel } from '../models/AuthModel'\n\nexport default function createAuthLink(auth: TAuthModel) {\n  const headers = computed(() => ({\n    Authorization: `Bearer ${auth.communicationToken}`,\n  }))\n  const token = computed(() => auth.communicationToken)\n\n  return new ApolloLink((operation, forward) => {\n    if (!auth.canCommunicate) {\n      throw new VError(\n        `Executing operation ${operation.operationName} before authenticated`,\n        { operation },\n      )\n    }\n\n    const context = operation.getContext()\n    operation.setContext({\n      ...context,\n      headers: headers.get(),\n      token: token.get(),\n    })\n\n    return new Observable<FetchResult>(observer => {\n      const sub = forward!(operation).subscribe({\n        error: networkError => {\n          if (\n            networkError.result &&\n            networkError.result.code === 'INVALID_TOKEN'\n          ) {\n            auth.invalidate()\n            return\n          }\n          observer.error(networkError)\n        },\n        next: observer.next.bind(observer),\n        complete: observer.complete.bind(observer),\n      })\n      return () => sub.unsubscribe()\n    })\n  })\n}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersistence } from './logger'\n\nconst persistenceKey = appConfig.persistenceKey\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = (snapshot: object) =>\n    localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersistence('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersistence('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersistence('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { Sentry } from '@speedlo/sentry'\nimport { getParent, Instance } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { IRootEnvironment } from '../../../atoms/RootProvider'\nimport { appConfig } from '../../../config'\nimport { i18n } from '../../../i18n'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TLoginProviderModel } from './LoginProviderModel'\n\nconst getLoginUrl = ({ username, password }: Dictionary<string>) =>\n  `${appConfig.endpoint}/users/token?username=${username}&password=${password}`\n\nexport const PasswordLoginModel = BaseModel.named('PasswordLogin')\n  .volatile(self => ({\n    errorCode: '',\n    errorMessage: '',\n  }))\n  .views(self => ({\n    get hasFailed() {\n      return Boolean(self.errorCode)\n    },\n  }))\n  .actions(self => ({\n    setFailure(code: string, message: string) {\n      self.errorCode = code\n      self.errorMessage = message\n    },\n    setSuccess(token: string, userId: string) {\n      const provider = getParent<TLoginProviderModel>(self)\n      provider.authenticate(token, userId)\n    },\n  }))\n  .actions(self => ({\n    async requestToken(username: string, password: string) {\n      const url = getLoginUrl({ username, password })\n      const fetch: TFetch = window.fetch\n      try {\n        const response = await fetch(url, {\n          headers: {\n            Accept: 'application/json',\n          },\n        })\n        const payload = await response.json()\n        self.log('received payload %j', payload)\n\n        if (response.status !== 200) {\n          self.setFailure(payload.code, payload.error)\n          self.log('token request failed for username %s', username)\n        } else {\n          self.setSuccess(payload.token, String(payload.userId))\n          self.log(\n            'token request success for username %s [%s]',\n            username,\n            payload.userId,\n          )\n        }\n      } catch (err) {\n        self.setFailure(\n          'FAIL',\n          i18n.t`Cannot login right now, please try again later`,\n        )\n        Sentry.withScope(scope => {\n          scope.setExtra('username', username)\n          scope.setLevel(Sentry.Severity.Debug)\n          Sentry.captureException(\n            new VError(err, 'Failed fetching password token'),\n          )\n        })\n      }\n    },\n  }))\n\nexport const createPasswordLoginModelMock = (\n  overrides = {},\n  env: IRootEnvironment,\n) => PasswordLoginModel.create({ ...overrides }, env)\n\nexport interface TPasswordLoginModel\n  extends Instance<typeof PasswordLoginModel> {}\n","import { getParent, Instance, types } from 'mobx-state-tree'\n\nimport { TAuthModel } from '../../../models/AuthModel'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { PasswordLoginModel } from './PasswordLoginModel'\n\nexport const LoginProviderModel = BaseModel.named('LoginProvider')\n  .props({\n    passwordLogin: types.optional(PasswordLoginModel, {}),\n  })\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      const auth = getParent<TAuthModel>(self)\n      auth.authenticate(token, userId)\n    },\n  }))\n\nexport interface TLoginProviderModel\n  extends Instance<typeof LoginProviderModel> {}\n","import gql from 'graphql-tag'\n\nexport const PasswordChangeMutation = gql`\n  mutation MPasswordChange($password: String!) {\n    updateUserPassword(newPassword: $password) {\n      id\n      token\n    }\n  }\n`\n","import { Base64 } from 'js-base64'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { MPasswordChange } from '../graph/types'\nimport { LoginProviderModel } from '../segments/login/models/LoginProviderModel'\nimport { PasswordChangeMutation } from './AuthModel.graphql'\nimport { BaseModel } from './BaseModel'\n\ninterface IVolatileProps {\n  tokenForPasswordChange?: string\n}\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    userId: types.optional(types.string, ''),\n    token: types.optional(types.string, ''),\n    provider: types.optional(LoginProviderModel, {}),\n  })\n  .volatile<IVolatileProps>(() => ({}))\n  .views(self => ({\n    get isAuthenticated() {\n      return self.token.length > 0\n    },\n    get isAuthenticatedUser() {\n      return this.isAuthenticated && self.userId.length > 0\n    },\n    get communicationToken() {\n      return self.tokenForPasswordChange || self.token\n    },\n    get canCommunicate() {\n      return this.isAuthenticated || self.tokenForPasswordChange !== undefined\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      self.tokenForPasswordChange = undefined\n      self.log('authenticated with id %s', userId)\n    },\n    invalidate() {\n      self.token = ''\n      self.userId = ''\n      self.tokenForPasswordChange = undefined\n      self.client.cache.reset()\n      self.log('invalidated authentication')\n    },\n  }))\n  .actions(self => ({\n    setForPasswordChange(temporaryB64EncodedToken: string) {\n      self.invalidate()\n      self.log('encoded token %s', temporaryB64EncodedToken)\n      self.tokenForPasswordChange = Base64.decode(temporaryB64EncodedToken)\n      self.log('using temp token %s', self.tokenForPasswordChange)\n    },\n    async changePassword(password: string) {\n      const variables: MPasswordChange.Variables = {\n        password,\n      }\n      const result = await self.client.mutate({\n        mutation: PasswordChangeMutation,\n        variables,\n        fetchPolicy: 'no-cache',\n      })\n\n      const {\n        updateUserPassword: { id, token },\n      } = result.data as MPasswordChange.Mutation\n\n      if (token && id) {\n        self.invalidate()\n        self.authenticate(token, id)\n      }\n    },\n  }))\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { BaseModel } from '../models/BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  soundEnabled: true,\n  orderListPollIntervalSec: 60,\n  orderListSoundIntervalSec: 60,\n})\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\n\nimport {\n  FCompanyBranchBrand,\n  FCompanyBranchFragment,\n  QUserBootstrapAccess,\n  QUserBootstrapFields,\n  QUserBootstrapPermissions,\n  QUserBootstrapUser,\n} from '../graph/generated'\nimport { RM } from '../helpers/ramda'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  isLoaded: boolean\n  branches: ReadonlyArray<FCompanyBranchFragment>\n  brands: ReadonlyArray<FCompanyBranchBrand>\n  soundEnabled: boolean\n  access: Maybe<IUserAccess>\n  permissions: QUserBootstrapPermissions\n}\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    language: types.maybe(types.string),\n    soundVolume: types.optional(types.number, 25),\n    soundIgnore: false,\n  })\n  .volatile<IVolatileProps>(() => ({\n    isLoaded: false,\n    branches: [],\n    brands: [],\n    soundEnabled: false,\n    access: null,\n    permissions: {\n      canCancelOrders: false,\n      canCreateOrder: false,\n    },\n  }))\n  .views(self => ({\n    get branchesId() {\n      return self.branches.map(R.prop('id'))\n    },\n    get defaultBranch() {\n      if (self.branches.length === 0) {\n        throw new Error('No user branches available to get defaultBranchId')\n      }\n      return self.branches[0]\n    },\n    filterBranches(predicate: (value: FCompanyBranchFragment) => boolean) {\n      return self.branches.filter(predicate)\n    },\n    canQuery(queryName: string) {\n      return (\n        self.access !== null && self.access.queries.has(queryName.toLowerCase())\n      )\n    },\n    canMutate(mutationName: string) {\n      return (\n        self.access !== null &&\n        self.access.mutations.has(mutationName.toLowerCase())\n      )\n    },\n    get isReady() {\n      return self.isLoaded || !self.root.auth.isAuthenticated\n    },\n  }))\n  .actions(self => ({\n    applyUserData(user: QUserBootstrapUser) {\n      self.language = user.language.rawCode\n      self.branches = user.branches\n      self.brands = RM.uniqBy(\n        RM.prop('id'),\n        user.branches.map(RM.prop('brand')),\n      )\n    },\n    applyPermissions(permissions: QUserBootstrapPermissions) {\n      self.permissions = permissions\n    },\n    applyAccess(access: QUserBootstrapAccess) {\n      const makeSet = (fields: ReadonlyArray<QUserBootstrapFields>) =>\n        new Set(\n          fields.map(\n            RM.compose(\n              RM.toLower,\n              RM.prop('name'),\n            ),\n          ),\n        )\n\n      self.access = {\n        queries: makeSet(access.queries.fields ? access.queries.fields : []),\n        mutations: makeSet(\n          access.mutations && access.mutations.fields\n            ? access.mutations.fields\n            : [],\n        ),\n        subscriptions: makeSet(\n          access.subscriptions && access.subscriptions.fields\n            ? access.subscriptions.fields\n            : [],\n        ),\n      }\n    },\n    finishBootstrap() {\n      self.isLoaded = true\n    },\n    setLanguage(lang: string) {\n      self.language = lang\n    },\n    controlSound(enabled: boolean = true, ignore: boolean = false) {\n      self.soundEnabled = enabled\n      self.soundIgnore = ignore\n    },\n    setSoundVolume(volume: number) {\n      self.soundVolume = volume\n    },\n  }))\n\ninterface IUserAccess {\n  queries: Set<string>\n  mutations: Set<string>\n  subscriptions: Set<string>\n}\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import faker from 'faker'\n\nfaker.locale = 'cz'\n\nexport { faker }\n","import { isoDate } from '@speedlo/graphql'\nimport { startOfMinute } from 'date-fns'\nimport _ from 'lodash'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { ISuggestion } from '../../../components/AddressSuggest'\nimport {\n  DeliveryTypeEnum,\n  MCreateOrderAcceptVariables,\n  MCreateOrderNewVariables,\n  MCreateOrderUpdateVariables,\n} from '../../../graph/generated'\nimport { GOrderVam, SOrderCall } from '../../../graph/types'\nimport { faker } from '../../../helpers/faker'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\n\nexport interface IOrderSidedishControlResult {\n  sidedishes: ReadonlyArray<ID>\n  isConfirmed: boolean\n}\n\nexport interface ICall extends Omit<SOrderCall.Call, 'isRinging' | 'eventId'> {\n  eventId?: ID\n}\n\nexport interface IOrderFormValues {\n  deliveryType: DeliveryTypeEnum.Messenger | DeliveryTypeEnum.Pickup\n  deliverAt?: Date\n  phone?: string\n  phonePrefix?: string\n  firstName?: string\n  lastName?: string\n  email?: string\n  note?: string\n}\n\ninterface IVolatileProps {\n  orderId: MaybeID\n  call?: ICall\n  deliveryAddress?: ISuggestion\n  deliveryMinutes?: number\n  minimalPrice?: string\n  notDeliveryLocation: boolean\n  values: IOrderFormValues\n  fakeValues?: Partial<IOrderFormValues>\n  fakeAddress?: ISuggestion\n  vamCustomer: Maybe<GOrderVam.VamCustomer>\n  sidedishMode: 'none' | 'recipe' | 'item'\n  sidedishRootId?: ID\n  sidedishSelection?: ReadonlyArray<ID>\n}\n\nexport const CreateOrderModel = BaseModel.named('CreateOrder')\n  .props({\n    branchId: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(getDefaultProps)\n  .views(self => ({\n    get currentBranch() {\n      return (\n        self.root.user.branches.find(RM.propEq('id', self.branchId)) ||\n        self.root.user.defaultBranch\n      )\n    },\n  }))\n  .views(self => ({\n    get deliveryType() {\n      return self.values.deliveryType\n    },\n    get isDelivery() {\n      return self.values.deliveryType === DeliveryTypeEnum.Messenger\n    },\n    get deliverAt() {\n      return (self.values.deliverAt && new Date(self.values.deliverAt)) || null\n    },\n    get deliverAtIso() {\n      return (this.deliverAt && isoDate(startOfMinute(this.deliverAt))) || null\n    },\n    get hasAddress() {\n      return Boolean(self.deliveryAddress || self.fakeAddress)\n    },\n    get gps() {\n      if (this.isDelivery && this.hasAddress) {\n        if (self.deliveryAddress && self.deliveryAddress.gps) {\n          return clearGps(self.deliveryAddress.gps)\n        } else if (self.fakeAddress && self.fakeAddress.gps) {\n          return clearGps(self.fakeAddress.gps)\n        }\n      }\n      return { ...clearGps(self.currentBranch.gps) }\n    },\n    get phone() {\n      if (self.values.phone !== undefined) {\n        return self.values.phone\n      }\n      return self.call ? self.call.phone : ''\n    },\n    get phonePrefix() {\n      if (self.values.phonePrefix !== undefined) {\n        return self.values.phonePrefix\n      }\n      if (self.call) {\n        return self.call.prefix\n      }\n      if (self.currentBranch.address.country) {\n        return self.currentBranch.address.country.phonePrefix\n      }\n      return '+'\n    },\n    get customer() {\n      const formValues = this.formValues as IOrderFormValues\n      return {\n        firstName: formValues.firstName,\n        lastName: formValues.lastName,\n        emails: formValues.email ? [{ email: formValues.email }] : null,\n        phones: formValues.phone\n          ? [\n              {\n                phone: `${formValues.phonePrefix}${formValues.phone}`,\n              },\n            ]\n          : null,\n      }\n    },\n    get formValues() {\n      if (self.vamCustomer !== null && self.vamCustomer.isFound) {\n        const { firstName, lastName, email, lastOrder } = self.vamCustomer\n        return _.defaults(\n          { ...self.values },\n          {\n            phone: this.phone,\n            phonePrefix: this.phonePrefix,\n            firstName,\n            lastName,\n            email,\n            note: (lastOrder && lastOrder.note) || '',\n          },\n        )\n      }\n      if (self.fakeValues) {\n        return _.defaults({ ...self.values }, { ...self.fakeValues })\n      }\n      return _.defaults(\n        { ...self.values },\n        { phone: this.phone, phonePrefix: this.phonePrefix },\n      )\n    },\n    get hasOrder() {\n      return self.orderId !== null\n    },\n  }))\n  .views(self => ({\n    get createOrderVariables(): MCreateOrderNewVariables {\n      return {\n        branchId: self.currentBranch.id,\n        deliveryType: self.values.deliveryType,\n        deliverAt: self.deliverAtIso,\n        callEventId: self.call && self.call.eventId,\n        gps: self.gps,\n      }\n    },\n    get updateOrderVariables(): MCreateOrderUpdateVariables {\n      return {\n        orderId: self.orderId!,\n        deliveryType: self.deliveryType,\n        deliverAt: self.deliverAtIso,\n        customer: self.customer,\n        gps: self.gps,\n      }\n    },\n    get acceptOrderVariables(): MCreateOrderAcceptVariables {\n      return {\n        orderId: self.orderId!,\n        customer: self.customer,\n        deliverAt: self.deliverAtIso,\n        note: self.formValues.note,\n      }\n    },\n  }))\n  .actions(self => ({\n    resetOrder() {\n      self.orderId = null\n    },\n    resetModel() {\n      Object.assign(self, getDefaultProps())\n    },\n    setOrder(orderId: ID) {\n      self.orderId = orderId\n      return orderId\n    },\n  }))\n  .actions(self => ({\n    useLocation(address: ISuggestion) {\n      self.deliveryAddress = address\n    },\n    clearLocation() {\n      self.deliveryAddress = undefined\n    },\n    setMinimalPrice(price: string | undefined) {\n      self.minimalPrice = price\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    userIsCalling(call: ICall | undefined) {\n      self.call = call\n    },\n    setDeliveryMinutes(minutes: number | undefined) {\n      self.deliveryMinutes = minutes\n    },\n    updateFormValues(\n      values: IOrderFormValues,\n      touched: { [K in keyof IOrderFormValues]?: boolean },\n    ) {\n      self.values = {\n        deliveryType: values.deliveryType,\n        ..._.pick(values, Object.keys(touched)),\n        deliverAt: values.deliverAt,\n      }\n      self.log('updated values: %j', self.values)\n    },\n    updateFromVam(vamCustomer: Maybe<GOrderVam.VamCustomer>) {\n      self.vamCustomer = vamCustomer\n      self.log('vam customer: %j', vamCustomer)\n    },\n    updateFormWithFakeValues() {\n      self.fakeValues = {\n        firstName: faker.name.firstName(),\n        lastName: faker.name.lastName(),\n        email: faker.internet.email(),\n        phone: faker.phone.phoneNumberFormat(3).replace(/\\s/g, ''),\n        phonePrefix: '+420',\n        note: faker.lorem.sentence().slice(0, 50 - 1),\n      }\n      self.fakeAddress = {\n        state: '',\n        city: 'Hradec Králové',\n        street: 'Opletalova',\n        houseNumber: '334/2',\n        gps: {\n          latitude: 50.2129839,\n          longitude: 15.8342836,\n        },\n      }\n    },\n  }))\n  .actions(self => {\n    let resolver: Maybe<(result: IOrderSidedishControlResult) => void> = null\n    const makeResolver = () => {\n      return new Promise<IOrderSidedishControlResult>(resolve => {\n        resolver = resolve\n      })\n    }\n    return {\n      selectSidedishesForRecipe(recipeId: ID) {\n        self.sidedishMode = 'recipe'\n        self.sidedishRootId = recipeId\n        return makeResolver()\n      },\n      selectSidedishesForItem(itemId: ID) {\n        self.sidedishMode = 'item'\n        self.sidedishRootId = itemId\n        return makeResolver()\n      },\n      sidedishSelectionConfirmed(sidedishes: ReadonlyArray<ID>) {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: true,\n            sidedishes,\n          })\n          resolver = null\n        }\n      },\n      sidedishSelectionCancel() {\n        self.sidedishMode = 'none'\n        self.sidedishRootId = undefined\n        if (resolver) {\n          resolver({\n            isConfirmed: false,\n            sidedishes: [],\n          })\n          resolver = null\n        }\n      },\n    }\n  })\n\nfunction getDefaultProps(): IVolatileProps {\n  return {\n    orderId: null,\n    call: undefined,\n    values: {\n      deliveryType: DeliveryTypeEnum.Messenger,\n      deliverAt: undefined,\n      phone: undefined,\n      email: undefined,\n      firstName: undefined,\n      lastName: undefined,\n      note: undefined,\n    },\n    fakeAddress: undefined,\n    fakeValues: undefined,\n    deliveryAddress: undefined,\n    deliveryMinutes: undefined,\n    minimalPrice: undefined,\n    vamCustomer: null,\n    notDeliveryLocation: false,\n    sidedishMode: 'none',\n    sidedishRootId: undefined,\n    sidedishSelection: undefined,\n  }\n}\n\nfunction clearGps({ latitude, longitude }: GeoPoint) {\n  return { latitude, longitude }\n}\n\nexport interface TCreateOrderModel extends Instance<typeof CreateOrderModel> {}\nexport interface TCreateOrderModelProps\n  extends SnapshotIn<typeof CreateOrderModel> {}\n","import { Instance, types } from 'mobx-state-tree'\nimport GoogleMap from 'react-google-maps/lib/components/GoogleMap'\n\nimport { gpsToLatLng } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<GoogleMap>\n}\n\nconst GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 12),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLng(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<GoogleMap>) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\n","import gql from 'graphql-tag'\n\nimport { FGeoPointFragmentDoc } from '../../../graph/generated'\n\nexport const OrderBranchLocationQuery = gql`\n  query GOrderBranchLocation($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n\nexport const OrderLocationQuery = gql`\n  query GOrderLocation($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      gps {\n        ...FGeoPoint\n      }\n    }\n  }\n  ${FGeoPointFragmentDoc}\n`\n","import { GOrderBranchLocation, GOrderLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport {\n  OrderBranchLocationQuery,\n  OrderLocationQuery,\n} from './OrderMapModel.graphql'\n\ninterface IVolatileProps {\n  activeDriverId: MaybeID\n}\n\nexport const OrderMapModel = MapModel.named('OrderMap')\n  .volatile<IVolatileProps>(() => ({\n    activeDriverId: null,\n  }))\n  .actions(self => ({\n    async panToOrder(orderId: ID) {\n      if (!self.mapRef) {\n        return\n      }\n      const { data } = await self.client.query<GOrderLocation.Query>({\n        query: OrderLocationQuery,\n        variables: { orderId },\n      })\n      if (data && data.order.gps) {\n        self.mapRef.panTo(gpsToLatLng(data.order.gps))\n      }\n    },\n    async panToBranch(branchId: ID) {\n      const { data } = await self.client.query<GOrderBranchLocation.Query>({\n        query: OrderBranchLocationQuery,\n        variables: { branchId },\n      })\n      if (!self.mapRef) {\n        return\n      }\n      if (data) {\n        self.mapRef.panTo(gpsToLatLng(data.companyBranch.gps))\n      }\n    },\n    activateDriver(driverId: ID, position: GeoPoint) {\n      self.activeDriverId = driverId\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(position))\n      }\n    },\n  }))\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { OrderListModel } from './OrderListModel'\nimport { OrderMapModel } from './OrderMapModel'\n\nexport const OrderModel = types.model('Order', {\n  list: types.optional(OrderListModel, {}),\n  map: types.optional(OrderMapModel, {}),\n})\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\n","import { endOfDay, startOfDay } from 'date-fns'\nimport { types } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\n\nexport interface IStatisticsDateFilter {\n  dateTimeFrom: Date\n  dateTimeTo: Date\n}\n\nexport const StatisticsModel = BaseModel.named('Statistics')\n  .props({\n    branches: types.optional(types.array(types.string), []),\n    drivers: types.optional(types.array(types.string), []),\n    closureBranch: types.maybeNull(types.string),\n  })\n  .volatile<IStatisticsDateFilter>(() => ({\n    dateTimeFrom: startOfDay(new Date()),\n    dateTimeTo: endOfDay(new Date()),\n  }))\n  .views(self => ({\n    get branchesFilter() {\n      return self.branches.length > 0\n        ? Array.from(self.branches)\n        : self.root.user.branchesId\n    },\n    get hasBranchFilter() {\n      return self.branches.length > 0\n    },\n  }))\n  .actions(self => ({\n    updateFilter(formValues: IStatisticsDateFilter) {\n      self.dateTimeFrom = new Date(formValues.dateTimeFrom)\n      self.dateTimeTo = new Date(formValues.dateTimeTo)\n    },\n    clearBranchFilter() {\n      self.branches.clear()\n    },\n    setBranchFilter(branches: ID[]) {\n      self.branches.replace(branches)\n    },\n    setDriversFilter(drivers: ID[]) {\n      self.drivers.replace(drivers)\n    },\n    setClosureBranch(branch: MaybeID) {\n      self.closureBranch = branch\n    },\n    setTodayOrdersFilter() {\n      self.dateTimeFrom = startOfDay(new Date())\n      self.dateTimeTo = endOfDay(new Date())\n      self.branches.replace(self.root.order.list.branchesFilter)\n    },\n  }))\n","import { getParent } from 'mobx-state-tree'\n\nimport { BaseModel } from '../../../models/BaseModel'\nimport { TSettingsModel } from './SettingsModel'\n\nexport const SettingsBaseModel = BaseModel.named('SettingsBase').views(\n  self => ({\n    get settings() {\n      return getParent<TSettingsModel>(self)\n    },\n  }),\n)\n","import gql from 'graphql-tag'\n\nimport {\n  FMenuAllergenFragmentDoc,\n  FMenuWareUnitFragmentDoc,\n} from '../../../graph/generated'\n\nexport const MenuStockItemFragment = gql`\n  fragment GMenuStockItem on StockItem {\n    id\n    code\n    note\n    plu\n    quantity\n    nameLabel: label\n    allergens {\n      ...FMenuAllergen\n    }\n    wareUnit {\n      ...FMenuWareUnit\n    }\n    allowNegative: allowNegativeValue\n  }\n  ${FMenuWareUnitFragmentDoc}\n  ${FMenuAllergenFragmentDoc}\n`\n\nexport const MenuStockCreateMutation = gql`\n  mutation GMenuStockCreate($stockItem: InputStockItemCreate!) {\n    createStockItem(stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockUpdateMutation = gql`\n  mutation GMenuStockUpdate($stockId: ID!, $stockItem: InputStockItemUpdate!) {\n    updateStockItem(id: $stockId, stockItem: $stockItem) {\n      ...GMenuStockItem\n    }\n  }\n  ${MenuStockItemFragment}\n`\n\nexport const MenuStockDeleteMutation = gql`\n  mutation GMenuStockDelete($stockId: ID!) {\n    destroyStockItem(id: $stockId) {\n      id\n    }\n  }\n`\n","import { getQueryErrors } from '../../../graph/errorHandler'\nimport {\n  GMenuStockCreate,\n  GMenuStockDelete,\n  GMenuStockUpdate,\n} from '../../../graph/types'\nimport { TStockFormValues } from '../organisms/StockFormLoader'\nimport { MenuBaseModel } from './MenuBaseModel'\nimport {\n  MenuStockCreateMutation,\n  MenuStockDeleteMutation,\n  MenuStockUpdateMutation,\n} from './MenuStockModel.graphql'\n\nexport const MenuStockModel = MenuBaseModel.named('MenuStock').actions(\n  self => ({\n    createItem(formValues: TStockFormValues) {\n      const variables: GMenuStockCreate.Variables = {\n        stockItem: {\n          companyBranch: self.branchId,\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockCreateMutation,\n          variables,\n        }),\n      )\n    },\n    updateItem(formValues: TStockFormValues) {\n      const variables: GMenuStockUpdate.Variables = {\n        stockId: formValues.id,\n        stockItem: {\n          ...getFormVariables(formValues),\n        },\n      }\n      return getQueryErrors(\n        self.client.mutate({\n          mutation: MenuStockUpdateMutation,\n          variables,\n        }),\n      )\n    },\n    async deleteItem(stockId: ID) {\n      const variables: GMenuStockDelete.Variables = {\n        stockId,\n      }\n      await self.client.mutate({\n        mutation: MenuStockDeleteMutation,\n        variables,\n      })\n    },\n  }),\n)\n\nfunction getFormVariables(formValues: TStockFormValues) {\n  return {\n    code: formValues.code,\n    label: formValues.nameLabel,\n    note: formValues.note,\n    plu: formValues.plu,\n    allergens: formValues.allergens,\n    wareUnit: formValues.wareUnit!,\n    allowNegative: formValues.allowNegative,\n  }\n}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { SettingsBaseModel } from '../../settings/models/SettingsBaseModel'\nimport { MenuCategoryModel } from './MenuCategoryModel'\nimport { MenuRecipeModel } from './MenuRecipeModel'\nimport { MenuStockModel } from './MenuStockModel'\n\nexport const MenuModel = SettingsBaseModel.named('Menu').props({\n  category: types.optional(MenuCategoryModel, {}),\n  recipe: types.optional(MenuRecipeModel, {}),\n  stock: types.optional(MenuStockModel, {}),\n})\n\nexport interface TMenuModel extends Instance<typeof MenuModel> {}\n","import { Instance, types } from 'mobx-state-tree'\n\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { BusinessHoursModel } from '../../businesshours/models/BusinessHoursModel'\nimport { MenuModel } from '../../menu/models/MenuModel'\n\nexport const SettingsModel = BaseModel.named('Settings')\n  .props({\n    selectedBranchId: types.maybe(types.string),\n    businessHours: types.optional(BusinessHoursModel, {}),\n    menu: types.optional(MenuModel, {}),\n  })\n  .views(self => ({\n    get branchId() {\n      return self.selectedBranchId || RM.head(self.root.user.defaultBranch.id)\n    },\n  }))\n  .actions(self => ({\n    selectBranch(branchId: ID) {\n      self.selectedBranchId = branchId\n    },\n  }))\n\nexport interface TSettingsModel extends Instance<typeof SettingsModel> {}\n","import { FCompanyBranchFragment } from '../../../graph/generated'\nimport { GZoneLocation } from '../../../graph/types'\nimport { gpsToLatLng } from '../../../helpers/gps'\nimport { MapModel } from '../../../models/MapModel'\nimport { ZoneLocationQuery } from '../Zones.graphql'\n\ninterface IVolatileProps {\n  currentZonePoints: Maybe<GeoPoint[]>\n}\n\nexport const ZoneMapModel = MapModel.named('ZoneMap')\n  .volatile<IVolatileProps>(() => ({\n    currentZonePoints: null,\n  }))\n  .actions(self => ({\n    updateZonePoints(points: GeoPoint[]) {\n      self.currentZonePoints = points\n    },\n    clearZonePoints() {\n      self.currentZonePoints = null\n    },\n    async panToZone(zoneId: ID) {\n      const { data } = await self.client.query({\n        query: ZoneLocationQuery,\n        variables: { zoneId },\n      })\n      if (data) {\n        const {\n          zone: {\n            companyBranch: { gps },\n          },\n        } = data as GZoneLocation.Query\n        if (self.mapRef) {\n          self.mapRef.panTo(gpsToLatLng(gps))\n        }\n      }\n    },\n    async panToBranch(branch: FCompanyBranchFragment) {\n      if (self.mapRef) {\n        self.mapRef.panTo(gpsToLatLng(branch.gps))\n      }\n    },\n  }))\n","import gql from 'graphql-tag'\n\nimport { FZoneFragmentDoc } from '../../../graph/generated'\n\nexport const CreateZoneMutation = gql`\n  mutation GCreateZone($branchId: ID!, $points: [InputGeoPointCreate!]) {\n    createZone(zone: { companyBranch: $branchId, geoPolygon: $points }) {\n      ...FZone\n    }\n  }\n  ${FZoneFragmentDoc}\n`\n\nexport const UpdateZonePriorityMutation = gql`\n  mutation GUpdateZonePriority($zoneId: ID!, $offset: Int!) {\n    updateZonePriority(zone: $zoneId, offset: $offset) {\n      id\n      priority\n    }\n  }\n`\n\nexport const DestroyZoneMutation = gql`\n  mutation GDestroyZone($zoneId: ID!) {\n    destroyZone(id: $zoneId) {\n      id\n    }\n  }\n`\n","import { flow, Instance, types } from 'mobx-state-tree'\nimport * as R from 'ramda'\nimport { VError } from 'verror'\n\nimport {\n  FCompanyBranchBrand,\n  FCompanyBranchFragment,\n  FZoneFragment,\n  FZonePriceRangeFragment,\n  MZoneUpdateVariables,\n} from '../../../graph/generated'\nimport {\n  GCreateZone,\n  GDestroyZone,\n  GUpdateZonePriority,\n} from '../../../graph/types'\nimport { generatePolygon } from '../../../helpers/gps'\nimport { RM } from '../../../helpers/ramda'\nimport { BaseModel } from '../../../models/BaseModel'\nimport { ZoneMapModel } from '../models/ZoneMapModel'\nimport {\n  CreateZoneMutation,\n  DestroyZoneMutation,\n  UpdateZonePriorityMutation,\n} from './ZoneModel.graphql'\n\ntype TBranch = FCompanyBranchFragment\ntype TBrand = FCompanyBranchBrand\n\ninterface IVolatileProps {\n  branch: Maybe<TBranch>\n}\n\nexport const ZoneModel = BaseModel.named('Zone')\n  .props({\n    map: types.optional(ZoneMapModel, {}),\n    brandId: types.maybeNull(types.string),\n  })\n  .volatile<IVolatileProps>(() => ({\n    branch: null,\n  }))\n  .views(self => ({\n    get brand(): Maybe<TBrand> {\n      return (\n        (self.brandId &&\n          self.root.user.brands.find(RM.propEq('id', self.brandId))) ||\n        null\n      )\n    },\n    get hasBranchFilter() {\n      return self.branch !== null\n    },\n    get branchFilterId(): MaybeID {\n      return self.branch === null ? null : self.branch.id\n    },\n    get branchFilterPredicate() {\n      if (self.branch) {\n        return R.propEq('id', self.branch.id)\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), ['brand', 'id'])\n    },\n    get zoneFilterPredicate() {\n      if (self.branch !== null) {\n        return R.pathSatisfies(R.equals(self.branch.id), [\n          'companyBranch',\n          'id',\n        ])\n      }\n      return this.brand === null\n        ? () => false\n        : R.pathSatisfies(R.equals(this.brand.id), [\n            'companyBranch',\n            'brand',\n            'id',\n          ])\n    },\n    get branches() {\n      return self.root.user.branches\n    },\n  }))\n  .views(self => ({\n    getZoneVariables(zoneId: ID, values: any): MZoneUpdateVariables {\n      return {\n        zoneId,\n        update: {\n          name: values.name,\n          enabled: values.enabled,\n          companyBranch: values.companyBranch.id,\n          zoneColor: values.zoneColor.id,\n          minimalOrderPrice: {\n            value: Number(values.minimalOrderPrice.value) || 0,\n          },\n          priceRangeRules: values.priceRangeRules\n            .map(normalizePriceRangeRule)\n            .filter(R.reject(R.pathEq(['price', 'value'], null))),\n          geoPolygon: self.map.currentZonePoints || undefined,\n        },\n      }\n    },\n  }))\n  .actions(self => ({\n    setBranchFilter(branch: TBranch) {\n      self.branch = branch\n      self.brandId = branch.brand.id\n      self.map.panToBranch(branch)\n    },\n    setBrandFilter(brand: TBrand, brandBranches: TBranch[]) {\n      self.brandId = brand.id\n      if (!self.branch || self.branch.brand.id !== brand.id) {\n        self.branch =\n          (brandBranches.length === 1 && RM.head(brandBranches)) || null\n      }\n    },\n    clearBranchFilter() {\n      self.branch = null\n    },\n    clearBrandFilter() {\n      self.brandId = null\n      self.branch = null\n    },\n  }))\n  .actions(self => ({\n    createZone: flow(function*(onZoneCreate: (zoneId: ID) => void) {\n      if (self.branch === null) {\n        throw new VError('Called createZone without branch being set')\n      }\n      const points = generatePolygon({\n        center: self.branch.gps,\n        metersRadius: 1000,\n        pointsCount: 5,\n      })\n      const variables: GCreateZone.Variables = {\n        branchId: self.branch.id,\n        points,\n      }\n      const { data } = yield self.client.mutate({\n        mutation: CreateZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: (prev, { mutationResult }) => {\n            const zone = (mutationResult.data as GCreateZone.Mutation)\n              .createZone\n            if (zone) {\n              return {\n                ...prev,\n                zones: prev.zones.concat(zone),\n              }\n            }\n            return prev\n          },\n        },\n      })\n      if (data) {\n        const zone = (data as GCreateZone.Mutation).createZone\n        onZoneCreate(zone.id)\n      }\n    }),\n    destroyZone(zoneId: ID) {\n      if (!zoneId) {\n        return\n      }\n      const variables: GDestroyZone.Variables = {\n        zoneId,\n      }\n      return self.client.mutate({\n        mutation: DestroyZoneMutation,\n        variables,\n        updateQueries: {\n          GZones: prev => {\n            return {\n              ...prev,\n              zones: R.reject(R.propEq('id', zoneId), prev.zones),\n            }\n          },\n        },\n      })\n    },\n    changeZonePriority: flow(function*(\n      zone: FZoneFragment,\n      oldIndex: number,\n      newIndex: number,\n    ) {\n      if (!zone || oldIndex === newIndex) {\n        return\n      }\n      const offset = oldIndex - newIndex\n\n      const variables: GUpdateZonePriority.Variables = {\n        zoneId: zone.id,\n        offset,\n      }\n      yield self.client.mutate({\n        mutation: UpdateZonePriorityMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          updateZonePriority: {\n            __typename: 'Zone',\n            id: zone.id,\n            priority: zone.priority + offset,\n          },\n        },\n      })\n    }),\n  }))\n\nfunction numberOrNull(value: string | number | null) {\n  if (value === null) {\n    return null\n  }\n  const num = Number(value)\n  return Number.isNaN(num) ? null : num\n}\n\nfunction normalizePriceRangeRule(range: FZonePriceRangeFragment) {\n  return {\n    price: { value: numberOrNull(range.price.value) },\n    toPrice: { value: numberOrNull(range.toPrice.value) || -1 },\n  }\n}\n\nexport interface TZoneModel extends Instance<typeof ZoneModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { AuthModel } from '../models/AuthModel'\nimport { ConfigModel } from '../models/ConfigModel'\nimport { UserModel } from '../models/UserModel'\nimport { CreateOrderModel } from '../segments/createorder/models/CreateOrderModel'\nimport { OrderModel } from '../segments/order/models/OrderModel'\nimport { StatisticsModel } from '../segments/overview/models/StatisticsModel'\nimport { SettingsModel } from '../segments/settings/models/SettingsModel'\nimport { ZoneModel } from '../segments/zones/models/ZoneModel'\nimport { BaseModel } from './BaseModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    user: types.optional(UserModel, {}),\n    order: types.optional(OrderModel, {}),\n    createOrder: types.optional(CreateOrderModel, {}),\n    zone: types.optional(ZoneModel, {}),\n    settings: types.optional(SettingsModel, {}),\n    config: types.optional(ConfigModel, {}),\n    statistics: types.optional(StatisticsModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.settings,\n        self.zone,\n        self.order,\n        self.statistics,\n        self.createOrder,\n      ]\n    },\n  }))\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import { ApolloProvider, DefaultApolloClient } from '@speedlo/graphql'\nimport { useAsyncEffect } from '@speedlo/hooks'\nimport { Observer } from 'mobx-react'\nimport React from 'react'\n\nimport { RootContext } from '../context/RootContext'\nimport { createApolloClient } from '../graph/createClient'\nimport { persistModel } from '../helpers/persistModel'\nimport { AuthModel } from '../models/AuthModel'\nimport { RootModel, TRootModel } from '../models/RootModel'\nimport Pacman from './Pacman'\n\nexport const RootProvider: React.FC = ({ children }) => {\n  const [isInit, setInit] = React.useState(false)\n  const [root] = React.useState(() => {\n    const auth = AuthModel.create({})\n    const apolloClient = createApolloClient(auth)\n    return RootModel.create(\n      { auth },\n      {\n        apolloClient,\n      },\n    )\n  })\n\n  useAsyncEffect(\n    async () => {\n      if (process.env.REACT_APP_STAGE === 'dev') {\n        // @ts-ignore\n        window.root = root\n      }\n      await Promise.all(root.persistedModels.map(persistModel))\n      setInit(true)\n    },\n    [root],\n  )\n\n  if (!isInit) {\n    return <Pacman />\n  }\n\n  return (\n    <ApolloProvider client={root.client}>\n      <RootContext.Provider value={root}>\n        {React.Children.only(children)}\n      </RootContext.Provider>\n    </ApolloProvider>\n  )\n}\n\nexport const useRoot = () => {\n  const root = React.useContext(RootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\ninterface IWithRootProps {\n  children(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.FC<IWithRootProps> = ({\n  children,\n  observe = true,\n}) => {\n  const root = useRoot()\n  return observe === true ? (\n    <Observer>{() => children(root)}</Observer>\n  ) : (\n    children(root)\n  )\n}\n\nexport interface IRootEnvironment {\n  fetch: TFetch\n  apolloClient: DefaultApolloClient\n}\n","var map = {\n\t\"./af\": [\n\t\t574,\n\t\t4\n\t],\n\t\"./af.js\": [\n\t\t574,\n\t\t4\n\t],\n\t\"./ar\": [\n\t\t581,\n\t\t27\n\t],\n\t\"./ar-dz\": [\n\t\t575,\n\t\t60\n\t],\n\t\"./ar-dz.js\": [\n\t\t575,\n\t\t60\n\t],\n\t\"./ar-kw\": [\n\t\t576,\n\t\t94\n\t],\n\t\"./ar-kw.js\": [\n\t\t576,\n\t\t94\n\t],\n\t\"./ar-ly\": [\n\t\t577,\n\t\t105\n\t],\n\t\"./ar-ly.js\": [\n\t\t577,\n\t\t105\n\t],\n\t\"./ar-ma\": [\n\t\t578,\n\t\t116\n\t],\n\t\"./ar-ma.js\": [\n\t\t578,\n\t\t116\n\t],\n\t\"./ar-sa\": [\n\t\t579,\n\t\t5\n\t],\n\t\"./ar-sa.js\": [\n\t\t579,\n\t\t5\n\t],\n\t\"./ar-tn\": [\n\t\t580,\n\t\t16\n\t],\n\t\"./ar-tn.js\": [\n\t\t580,\n\t\t16\n\t],\n\t\"./ar.js\": [\n\t\t581,\n\t\t27\n\t],\n\t\"./az\": [\n\t\t582,\n\t\t38\n\t],\n\t\"./az.js\": [\n\t\t582,\n\t\t38\n\t],\n\t\"./be\": [\n\t\t583,\n\t\t49\n\t],\n\t\"./be.js\": [\n\t\t583,\n\t\t49\n\t],\n\t\"./bg\": [\n\t\t584,\n\t\t61\n\t],\n\t\"./bg.js\": [\n\t\t584,\n\t\t61\n\t],\n\t\"./bm\": [\n\t\t585,\n\t\t72\n\t],\n\t\"./bm.js\": [\n\t\t585,\n\t\t72\n\t],\n\t\"./bn\": [\n\t\t586,\n\t\t83\n\t],\n\t\"./bn.js\": [\n\t\t586,\n\t\t83\n\t],\n\t\"./bo\": [\n\t\t587,\n\t\t87\n\t],\n\t\"./bo.js\": [\n\t\t587,\n\t\t87\n\t],\n\t\"./br\": [\n\t\t588,\n\t\t88\n\t],\n\t\"./br.js\": [\n\t\t588,\n\t\t88\n\t],\n\t\"./bs\": [\n\t\t589,\n\t\t89\n\t],\n\t\"./bs.js\": [\n\t\t589,\n\t\t89\n\t],\n\t\"./ca\": [\n\t\t590,\n\t\t90\n\t],\n\t\"./ca.js\": [\n\t\t590,\n\t\t90\n\t],\n\t\"./cs\": [\n\t\t591,\n\t\t91\n\t],\n\t\"./cs.js\": [\n\t\t591,\n\t\t91\n\t],\n\t\"./cv\": [\n\t\t592,\n\t\t92\n\t],\n\t\"./cv.js\": [\n\t\t592,\n\t\t92\n\t],\n\t\"./cy\": [\n\t\t593,\n\t\t93\n\t],\n\t\"./cy.js\": [\n\t\t593,\n\t\t93\n\t],\n\t\"./da\": [\n\t\t594,\n\t\t95\n\t],\n\t\"./da.js\": [\n\t\t594,\n\t\t95\n\t],\n\t\"./de\": [\n\t\t597,\n\t\t98\n\t],\n\t\"./de-at\": [\n\t\t595,\n\t\t96\n\t],\n\t\"./de-at.js\": [\n\t\t595,\n\t\t96\n\t],\n\t\"./de-ch\": [\n\t\t596,\n\t\t97\n\t],\n\t\"./de-ch.js\": [\n\t\t596,\n\t\t97\n\t],\n\t\"./de.js\": [\n\t\t597,\n\t\t98\n\t],\n\t\"./dv\": [\n\t\t598,\n\t\t99\n\t],\n\t\"./dv.js\": [\n\t\t598,\n\t\t99\n\t],\n\t\"./el\": [\n\t\t599,\n\t\t100\n\t],\n\t\"./el.js\": [\n\t\t599,\n\t\t100\n\t],\n\t\"./en-au\": [\n\t\t600,\n\t\t101\n\t],\n\t\"./en-au.js\": [\n\t\t600,\n\t\t101\n\t],\n\t\"./en-ca\": [\n\t\t601,\n\t\t102\n\t],\n\t\"./en-ca.js\": [\n\t\t601,\n\t\t102\n\t],\n\t\"./en-gb\": [\n\t\t602,\n\t\t103\n\t],\n\t\"./en-gb.js\": [\n\t\t602,\n\t\t103\n\t],\n\t\"./en-ie\": [\n\t\t603,\n\t\t104\n\t],\n\t\"./en-ie.js\": [\n\t\t603,\n\t\t104\n\t],\n\t\"./en-il\": [\n\t\t604,\n\t\t106\n\t],\n\t\"./en-il.js\": [\n\t\t604,\n\t\t106\n\t],\n\t\"./en-nz\": [\n\t\t605,\n\t\t107\n\t],\n\t\"./en-nz.js\": [\n\t\t605,\n\t\t107\n\t],\n\t\"./eo\": [\n\t\t606,\n\t\t108\n\t],\n\t\"./eo.js\": [\n\t\t606,\n\t\t108\n\t],\n\t\"./es\": [\n\t\t609,\n\t\t111\n\t],\n\t\"./es-do\": [\n\t\t607,\n\t\t109\n\t],\n\t\"./es-do.js\": [\n\t\t607,\n\t\t109\n\t],\n\t\"./es-us\": [\n\t\t608,\n\t\t110\n\t],\n\t\"./es-us.js\": [\n\t\t608,\n\t\t110\n\t],\n\t\"./es.js\": [\n\t\t609,\n\t\t111\n\t],\n\t\"./et\": [\n\t\t610,\n\t\t112\n\t],\n\t\"./et.js\": [\n\t\t610,\n\t\t112\n\t],\n\t\"./eu\": [\n\t\t611,\n\t\t113\n\t],\n\t\"./eu.js\": [\n\t\t611,\n\t\t113\n\t],\n\t\"./fa\": [\n\t\t612,\n\t\t114\n\t],\n\t\"./fa.js\": [\n\t\t612,\n\t\t114\n\t],\n\t\"./fi\": [\n\t\t613,\n\t\t115\n\t],\n\t\"./fi.js\": [\n\t\t613,\n\t\t115\n\t],\n\t\"./fo\": [\n\t\t614,\n\t\t117\n\t],\n\t\"./fo.js\": [\n\t\t614,\n\t\t117\n\t],\n\t\"./fr\": [\n\t\t617,\n\t\t120\n\t],\n\t\"./fr-ca\": [\n\t\t615,\n\t\t118\n\t],\n\t\"./fr-ca.js\": [\n\t\t615,\n\t\t118\n\t],\n\t\"./fr-ch\": [\n\t\t616,\n\t\t119\n\t],\n\t\"./fr-ch.js\": [\n\t\t616,\n\t\t119\n\t],\n\t\"./fr.js\": [\n\t\t617,\n\t\t120\n\t],\n\t\"./fy\": [\n\t\t618,\n\t\t121\n\t],\n\t\"./fy.js\": [\n\t\t618,\n\t\t121\n\t],\n\t\"./gd\": [\n\t\t619,\n\t\t122\n\t],\n\t\"./gd.js\": [\n\t\t619,\n\t\t122\n\t],\n\t\"./gl\": [\n\t\t620,\n\t\t123\n\t],\n\t\"./gl.js\": [\n\t\t620,\n\t\t123\n\t],\n\t\"./gom-latn\": [\n\t\t621,\n\t\t124\n\t],\n\t\"./gom-latn.js\": [\n\t\t621,\n\t\t124\n\t],\n\t\"./gu\": [\n\t\t622,\n\t\t125\n\t],\n\t\"./gu.js\": [\n\t\t622,\n\t\t125\n\t],\n\t\"./he\": [\n\t\t623,\n\t\t126\n\t],\n\t\"./he.js\": [\n\t\t623,\n\t\t126\n\t],\n\t\"./hi\": [\n\t\t624,\n\t\t6\n\t],\n\t\"./hi.js\": [\n\t\t624,\n\t\t6\n\t],\n\t\"./hr\": [\n\t\t625,\n\t\t7\n\t],\n\t\"./hr.js\": [\n\t\t625,\n\t\t7\n\t],\n\t\"./hu\": [\n\t\t626,\n\t\t8\n\t],\n\t\"./hu.js\": [\n\t\t626,\n\t\t8\n\t],\n\t\"./hy-am\": [\n\t\t627,\n\t\t9\n\t],\n\t\"./hy-am.js\": [\n\t\t627,\n\t\t9\n\t],\n\t\"./id\": [\n\t\t628,\n\t\t10\n\t],\n\t\"./id.js\": [\n\t\t628,\n\t\t10\n\t],\n\t\"./is\": [\n\t\t629,\n\t\t11\n\t],\n\t\"./is.js\": [\n\t\t629,\n\t\t11\n\t],\n\t\"./it\": [\n\t\t630,\n\t\t12\n\t],\n\t\"./it.js\": [\n\t\t630,\n\t\t12\n\t],\n\t\"./ja\": [\n\t\t631,\n\t\t13\n\t],\n\t\"./ja.js\": [\n\t\t631,\n\t\t13\n\t],\n\t\"./jv\": [\n\t\t632,\n\t\t14\n\t],\n\t\"./jv.js\": [\n\t\t632,\n\t\t14\n\t],\n\t\"./ka\": [\n\t\t633,\n\t\t15\n\t],\n\t\"./ka.js\": [\n\t\t633,\n\t\t15\n\t],\n\t\"./kk\": [\n\t\t634,\n\t\t17\n\t],\n\t\"./kk.js\": [\n\t\t634,\n\t\t17\n\t],\n\t\"./km\": [\n\t\t635,\n\t\t18\n\t],\n\t\"./km.js\": [\n\t\t635,\n\t\t18\n\t],\n\t\"./kn\": [\n\t\t636,\n\t\t19\n\t],\n\t\"./kn.js\": [\n\t\t636,\n\t\t19\n\t],\n\t\"./ko\": [\n\t\t637,\n\t\t20\n\t],\n\t\"./ko.js\": [\n\t\t637,\n\t\t20\n\t],\n\t\"./ky\": [\n\t\t638,\n\t\t21\n\t],\n\t\"./ky.js\": [\n\t\t638,\n\t\t21\n\t],\n\t\"./lb\": [\n\t\t639,\n\t\t22\n\t],\n\t\"./lb.js\": [\n\t\t639,\n\t\t22\n\t],\n\t\"./lo\": [\n\t\t640,\n\t\t23\n\t],\n\t\"./lo.js\": [\n\t\t640,\n\t\t23\n\t],\n\t\"./lt\": [\n\t\t641,\n\t\t24\n\t],\n\t\"./lt.js\": [\n\t\t641,\n\t\t24\n\t],\n\t\"./lv\": [\n\t\t642,\n\t\t25\n\t],\n\t\"./lv.js\": [\n\t\t642,\n\t\t25\n\t],\n\t\"./me\": [\n\t\t643,\n\t\t26\n\t],\n\t\"./me.js\": [\n\t\t643,\n\t\t26\n\t],\n\t\"./mi\": [\n\t\t644,\n\t\t28\n\t],\n\t\"./mi.js\": [\n\t\t644,\n\t\t28\n\t],\n\t\"./mk\": [\n\t\t645,\n\t\t29\n\t],\n\t\"./mk.js\": [\n\t\t645,\n\t\t29\n\t],\n\t\"./ml\": [\n\t\t646,\n\t\t30\n\t],\n\t\"./ml.js\": [\n\t\t646,\n\t\t30\n\t],\n\t\"./mn\": [\n\t\t647,\n\t\t31\n\t],\n\t\"./mn.js\": [\n\t\t647,\n\t\t31\n\t],\n\t\"./mr\": [\n\t\t648,\n\t\t32\n\t],\n\t\"./mr.js\": [\n\t\t648,\n\t\t32\n\t],\n\t\"./ms\": [\n\t\t650,\n\t\t34\n\t],\n\t\"./ms-my\": [\n\t\t649,\n\t\t33\n\t],\n\t\"./ms-my.js\": [\n\t\t649,\n\t\t33\n\t],\n\t\"./ms.js\": [\n\t\t650,\n\t\t34\n\t],\n\t\"./mt\": [\n\t\t651,\n\t\t35\n\t],\n\t\"./mt.js\": [\n\t\t651,\n\t\t35\n\t],\n\t\"./my\": [\n\t\t652,\n\t\t36\n\t],\n\t\"./my.js\": [\n\t\t652,\n\t\t36\n\t],\n\t\"./nb\": [\n\t\t653,\n\t\t37\n\t],\n\t\"./nb.js\": [\n\t\t653,\n\t\t37\n\t],\n\t\"./ne\": [\n\t\t654,\n\t\t39\n\t],\n\t\"./ne.js\": [\n\t\t654,\n\t\t39\n\t],\n\t\"./nl\": [\n\t\t656,\n\t\t41\n\t],\n\t\"./nl-be\": [\n\t\t655,\n\t\t40\n\t],\n\t\"./nl-be.js\": [\n\t\t655,\n\t\t40\n\t],\n\t\"./nl.js\": [\n\t\t656,\n\t\t41\n\t],\n\t\"./nn\": [\n\t\t657,\n\t\t42\n\t],\n\t\"./nn.js\": [\n\t\t657,\n\t\t42\n\t],\n\t\"./pa-in\": [\n\t\t658,\n\t\t43\n\t],\n\t\"./pa-in.js\": [\n\t\t658,\n\t\t43\n\t],\n\t\"./pl\": [\n\t\t659,\n\t\t44\n\t],\n\t\"./pl.js\": [\n\t\t659,\n\t\t44\n\t],\n\t\"./pt\": [\n\t\t661,\n\t\t46\n\t],\n\t\"./pt-br\": [\n\t\t660,\n\t\t45\n\t],\n\t\"./pt-br.js\": [\n\t\t660,\n\t\t45\n\t],\n\t\"./pt.js\": [\n\t\t661,\n\t\t46\n\t],\n\t\"./ro\": [\n\t\t662,\n\t\t47\n\t],\n\t\"./ro.js\": [\n\t\t662,\n\t\t47\n\t],\n\t\"./ru\": [\n\t\t663,\n\t\t48\n\t],\n\t\"./ru.js\": [\n\t\t663,\n\t\t48\n\t],\n\t\"./sd\": [\n\t\t664,\n\t\t50\n\t],\n\t\"./sd.js\": [\n\t\t664,\n\t\t50\n\t],\n\t\"./se\": [\n\t\t665,\n\t\t51\n\t],\n\t\"./se.js\": [\n\t\t665,\n\t\t51\n\t],\n\t\"./si\": [\n\t\t666,\n\t\t52\n\t],\n\t\"./si.js\": [\n\t\t666,\n\t\t52\n\t],\n\t\"./sk\": [\n\t\t667,\n\t\t53\n\t],\n\t\"./sk.js\": [\n\t\t667,\n\t\t53\n\t],\n\t\"./sl\": [\n\t\t668,\n\t\t54\n\t],\n\t\"./sl.js\": [\n\t\t668,\n\t\t54\n\t],\n\t\"./sq\": [\n\t\t669,\n\t\t55\n\t],\n\t\"./sq.js\": [\n\t\t669,\n\t\t55\n\t],\n\t\"./sr\": [\n\t\t671,\n\t\t57\n\t],\n\t\"./sr-cyrl\": [\n\t\t670,\n\t\t56\n\t],\n\t\"./sr-cyrl.js\": [\n\t\t670,\n\t\t56\n\t],\n\t\"./sr.js\": [\n\t\t671,\n\t\t57\n\t],\n\t\"./ss\": [\n\t\t672,\n\t\t58\n\t],\n\t\"./ss.js\": [\n\t\t672,\n\t\t58\n\t],\n\t\"./sv\": [\n\t\t673,\n\t\t59\n\t],\n\t\"./sv.js\": [\n\t\t673,\n\t\t59\n\t],\n\t\"./sw\": [\n\t\t674,\n\t\t62\n\t],\n\t\"./sw.js\": [\n\t\t674,\n\t\t62\n\t],\n\t\"./ta\": [\n\t\t675,\n\t\t63\n\t],\n\t\"./ta.js\": [\n\t\t675,\n\t\t63\n\t],\n\t\"./te\": [\n\t\t676,\n\t\t64\n\t],\n\t\"./te.js\": [\n\t\t676,\n\t\t64\n\t],\n\t\"./tet\": [\n\t\t677,\n\t\t65\n\t],\n\t\"./tet.js\": [\n\t\t677,\n\t\t65\n\t],\n\t\"./tg\": [\n\t\t678,\n\t\t66\n\t],\n\t\"./tg.js\": [\n\t\t678,\n\t\t66\n\t],\n\t\"./th\": [\n\t\t679,\n\t\t67\n\t],\n\t\"./th.js\": [\n\t\t679,\n\t\t67\n\t],\n\t\"./tl-ph\": [\n\t\t680,\n\t\t68\n\t],\n\t\"./tl-ph.js\": [\n\t\t680,\n\t\t68\n\t],\n\t\"./tlh\": [\n\t\t681,\n\t\t69\n\t],\n\t\"./tlh.js\": [\n\t\t681,\n\t\t69\n\t],\n\t\"./tr\": [\n\t\t682,\n\t\t70\n\t],\n\t\"./tr.js\": [\n\t\t682,\n\t\t70\n\t],\n\t\"./tzl\": [\n\t\t683,\n\t\t71\n\t],\n\t\"./tzl.js\": [\n\t\t683,\n\t\t71\n\t],\n\t\"./tzm\": [\n\t\t685,\n\t\t74\n\t],\n\t\"./tzm-latn\": [\n\t\t684,\n\t\t73\n\t],\n\t\"./tzm-latn.js\": [\n\t\t684,\n\t\t73\n\t],\n\t\"./tzm.js\": [\n\t\t685,\n\t\t74\n\t],\n\t\"./ug-cn\": [\n\t\t686,\n\t\t75\n\t],\n\t\"./ug-cn.js\": [\n\t\t686,\n\t\t75\n\t],\n\t\"./uk\": [\n\t\t687,\n\t\t76\n\t],\n\t\"./uk.js\": [\n\t\t687,\n\t\t76\n\t],\n\t\"./ur\": [\n\t\t688,\n\t\t77\n\t],\n\t\"./ur.js\": [\n\t\t688,\n\t\t77\n\t],\n\t\"./uz\": [\n\t\t690,\n\t\t79\n\t],\n\t\"./uz-latn\": [\n\t\t689,\n\t\t78\n\t],\n\t\"./uz-latn.js\": [\n\t\t689,\n\t\t78\n\t],\n\t\"./uz.js\": [\n\t\t690,\n\t\t79\n\t],\n\t\"./vi\": [\n\t\t691,\n\t\t80\n\t],\n\t\"./vi.js\": [\n\t\t691,\n\t\t80\n\t],\n\t\"./x-pseudo\": [\n\t\t692,\n\t\t81\n\t],\n\t\"./x-pseudo.js\": [\n\t\t692,\n\t\t81\n\t],\n\t\"./yo\": [\n\t\t693,\n\t\t82\n\t],\n\t\"./yo.js\": [\n\t\t693,\n\t\t82\n\t],\n\t\"./zh-cn\": [\n\t\t694,\n\t\t84\n\t],\n\t\"./zh-cn.js\": [\n\t\t694,\n\t\t84\n\t],\n\t\"./zh-hk\": [\n\t\t695,\n\t\t85\n\t],\n\t\"./zh-hk.js\": [\n\t\t695,\n\t\t85\n\t],\n\t\"./zh-tw\": [\n\t\t696,\n\t\t86\n\t],\n\t\"./zh-tw.js\": [\n\t\t696,\n\t\t86\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6438;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./bg\": [\n\t\t697,\n\t\t127\n\t],\n\t\"./bg.js\": [\n\t\t697,\n\t\t127\n\t],\n\t\"./chs\": [\n\t\t698,\n\t\t133\n\t],\n\t\"./chs.js\": [\n\t\t698,\n\t\t133\n\t],\n\t\"./cs\": [\n\t\t699,\n\t\t144\n\t],\n\t\"./cs.js\": [\n\t\t699,\n\t\t144\n\t],\n\t\"./da-dk\": [\n\t\t700,\n\t\t155\n\t],\n\t\"./da-dk.js\": [\n\t\t700,\n\t\t155\n\t],\n\t\"./de\": [\n\t\t702,\n\t\t128\n\t],\n\t\"./de-ch\": [\n\t\t701,\n\t\t160\n\t],\n\t\"./de-ch.js\": [\n\t\t701,\n\t\t160\n\t],\n\t\"./de.js\": [\n\t\t702,\n\t\t128\n\t],\n\t\"./en-au\": [\n\t\t703,\n\t\t129\n\t],\n\t\"./en-au.js\": [\n\t\t703,\n\t\t129\n\t],\n\t\"./en-gb\": [\n\t\t704,\n\t\t130\n\t],\n\t\"./en-gb.js\": [\n\t\t704,\n\t\t130\n\t],\n\t\"./en-za\": [\n\t\t705,\n\t\t131\n\t],\n\t\"./en-za.js\": [\n\t\t705,\n\t\t131\n\t],\n\t\"./es\": [\n\t\t707,\n\t\t134\n\t],\n\t\"./es-es\": [\n\t\t706,\n\t\t132\n\t],\n\t\"./es-es.js\": [\n\t\t706,\n\t\t132\n\t],\n\t\"./es.js\": [\n\t\t707,\n\t\t134\n\t],\n\t\"./et\": [\n\t\t708,\n\t\t135\n\t],\n\t\"./et.js\": [\n\t\t708,\n\t\t135\n\t],\n\t\"./fi\": [\n\t\t709,\n\t\t136\n\t],\n\t\"./fi.js\": [\n\t\t709,\n\t\t136\n\t],\n\t\"./fr\": [\n\t\t712,\n\t\t139\n\t],\n\t\"./fr-ca\": [\n\t\t710,\n\t\t137\n\t],\n\t\"./fr-ca.js\": [\n\t\t710,\n\t\t137\n\t],\n\t\"./fr-ch\": [\n\t\t711,\n\t\t138\n\t],\n\t\"./fr-ch.js\": [\n\t\t711,\n\t\t138\n\t],\n\t\"./fr.js\": [\n\t\t712,\n\t\t139\n\t],\n\t\"./hu\": [\n\t\t713,\n\t\t140\n\t],\n\t\"./hu.js\": [\n\t\t713,\n\t\t140\n\t],\n\t\"./it\": [\n\t\t714,\n\t\t141\n\t],\n\t\"./it.js\": [\n\t\t714,\n\t\t141\n\t],\n\t\"./ja\": [\n\t\t715,\n\t\t142\n\t],\n\t\"./ja.js\": [\n\t\t715,\n\t\t142\n\t],\n\t\"./lv\": [\n\t\t716,\n\t\t143\n\t],\n\t\"./lv.js\": [\n\t\t716,\n\t\t143\n\t],\n\t\"./nl-be\": [\n\t\t717,\n\t\t145\n\t],\n\t\"./nl-be.js\": [\n\t\t717,\n\t\t145\n\t],\n\t\"./nl-nl\": [\n\t\t718,\n\t\t146\n\t],\n\t\"./nl-nl.js\": [\n\t\t718,\n\t\t146\n\t],\n\t\"./no\": [\n\t\t719,\n\t\t147\n\t],\n\t\"./no.js\": [\n\t\t719,\n\t\t147\n\t],\n\t\"./pl\": [\n\t\t720,\n\t\t148\n\t],\n\t\"./pl.js\": [\n\t\t720,\n\t\t148\n\t],\n\t\"./pt-br\": [\n\t\t721,\n\t\t149\n\t],\n\t\"./pt-br.js\": [\n\t\t721,\n\t\t149\n\t],\n\t\"./pt-pt\": [\n\t\t722,\n\t\t150\n\t],\n\t\"./pt-pt.js\": [\n\t\t722,\n\t\t150\n\t],\n\t\"./ru\": [\n\t\t724,\n\t\t152\n\t],\n\t\"./ru-ua\": [\n\t\t723,\n\t\t151\n\t],\n\t\"./ru-ua.js\": [\n\t\t723,\n\t\t151\n\t],\n\t\"./ru.js\": [\n\t\t724,\n\t\t152\n\t],\n\t\"./sk\": [\n\t\t725,\n\t\t153\n\t],\n\t\"./sk.js\": [\n\t\t725,\n\t\t153\n\t],\n\t\"./sl\": [\n\t\t726,\n\t\t154\n\t],\n\t\"./sl.js\": [\n\t\t726,\n\t\t154\n\t],\n\t\"./th\": [\n\t\t727,\n\t\t156\n\t],\n\t\"./th.js\": [\n\t\t727,\n\t\t156\n\t],\n\t\"./tr\": [\n\t\t728,\n\t\t157\n\t],\n\t\"./tr.js\": [\n\t\t728,\n\t\t157\n\t],\n\t\"./uk-ua\": [\n\t\t729,\n\t\t158\n\t],\n\t\"./uk-ua.js\": [\n\t\t729,\n\t\t158\n\t],\n\t\"./vi\": [\n\t\t730,\n\t\t159\n\t],\n\t\"./vi.js\": [\n\t\t730,\n\t\t159\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6439;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.po\": [\n\t\t7657,\n\t\t162\n\t],\n\t\"./de/messages.po\": [\n\t\t7658,\n\t\t163\n\t],\n\t\"./en-dev/messages.po\": [\n\t\t7660,\n\t\t165\n\t],\n\t\"./en/messages.po\": [\n\t\t7659,\n\t\t164\n\t],\n\t\"./pl/messages.po\": [\n\t\t7661,\n\t\t166\n\t],\n\t\"./sk/messages.po\": [\n\t\t7662,\n\t\t167\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6440;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t7663,\n\t\t162\n\t],\n\t\"./de/messages.js\": [\n\t\t7664,\n\t\t163\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t7666,\n\t\t165\n\t],\n\t\"./en/messages.js\": [\n\t\t7665,\n\t\t164\n\t],\n\t\"./pl/messages.js\": [\n\t\t7667,\n\t\t166\n\t],\n\t\"./sk/messages.js\": [\n\t\t7668,\n\t\t167\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 6441;\nmodule.exports = webpackAsyncContext;","import { computeDestinationPoint, getBounds } from 'geolib'\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n\ninterface IGeneratePolygonInput {\n  center: GeoPoint\n  metersRadius?: number\n  pointsCount?: number\n}\n\nexport const generatePolygon = ({\n  center,\n  metersRadius = 1000,\n  pointsCount = 15,\n}: IGeneratePolygonInput) => {\n  return new Array(pointsCount).fill(null).map((_, idx) => {\n    const degree = 360 / pointsCount * idx\n    return computeDestinationPoint(center, metersRadius, degree)\n  })\n}\n\nexport const getBoundsOfPoints = (points: GeoPoint[]) => {\n  const bounds = getBounds(points)\n  if (!bounds) {\n    return null\n  }\n  return new google.maps.LatLngBounds(\n    {\n      lat: bounds.minLat,\n      lng: bounds.minLng,\n    },\n    {\n      lat: bounds.maxLat,\n      lng: bounds.maxLng,\n    },\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Dialog } from '@material-ui/core'\nimport { WarningTwoTone } from '@material-ui/icons'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport connectionWarningSound from '../assets/connectionWarning.mp3'\nimport { isNetworkOffline } from '../helpers/offline'\nimport { Colors } from '../styling'\nimport { SoundPlayInterval } from './SoundPlayInterval'\n\nconst MessageStyled = styled.div`\n  padding: 1rem;\n  background-color: ${Colors.red} !important;\n  font-size: 2rem;\n\n  & svg {\n    position: relative;\n    top: 0.3rem;\n    padding-right: 0.5rem;\n  }\n`\n\nexport const ConnectionWarning = observer(() => {\n  return (\n    <>\n      <SoundPlayInterval\n        shouldPlay={isNetworkOffline()}\n        intervalSec={30}\n        soundUrl={connectionWarningSound}\n      />\n\n      <Dialog\n        open={isNetworkOffline()}\n        disableBackdropClick={true}\n        disableEscapeKeyDown={true}\n      >\n        <MessageStyled>\n          <WarningTwoTone fontSize=\"large\" />\n          <Trans>Internet connection is not available</Trans>\n        </MessageStyled>\n      </Dialog>\n    </>\n  )\n})\n","import { css } from 'emotion'\nimport { SnackbarProvider } from 'notistack'\nimport React from 'react'\n\nimport { Colors, Spacing } from '../styling'\n\ninterface IProps {}\n\nconst successStyle = css`\n  background: ${Colors.green} !important;\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nconst errorStyle = css`\n  background: ${Colors.red};\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nconst warningStyle = css`\n  background: ${Colors.orange};\n  font-size: ${Spacing.InfoMessageFontSize} !important;\n`\nexport const snackStyles = {\n  variantSuccess: successStyle,\n  variantInfo: successStyle,\n  variantError: errorStyle,\n  variantWarning: warningStyle,\n}\n\nexport const SnackProvider: React.FC<IProps> = ({ children }) => (\n  <SnackbarProvider\n    maxSnack={3}\n    classes={snackStyles}\n    anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\n  >\n    {children}\n  </SnackbarProvider>\n)\n","import { Button, Snackbar } from '@material-ui/core'\nimport { SnackbarProps } from '@material-ui/core/Snackbar'\nimport { HOUR, MINUTE, SECOND, useInterval, useTimer } from '@speedlo/hooks'\nimport { updateWorker, useReleaseCabinet } from '@speedlo/tools'\nimport { addMilliseconds, formatDistanceStrict } from 'date-fns'\nimport { useObservable, useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { logUpdate } from '../helpers/logger'\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { i18n } from '../i18n'\nimport { snackStyles } from './SnackProvider'\n\nexport interface IProps {\n  onRestart?(): void\n  autoUpdateDelay?: number\n  postponeTimeout?: number\n  updateCheckInterval?: number\n  serviceWorker?: ServiceWorkerContainer\n  children: ReactNode\n}\n\nexport const UpdateHandler: React.FC<IProps> = ({\n  onRestart = () => window.location.reload(),\n  autoUpdateDelay = 20 * SECOND,\n  postponeTimeout = 2 * MINUTE,\n  updateCheckInterval = process.env.REACT_APP_STAGE === 'prod'\n    ? 1 * HOUR\n    : 5 * MINUTE,\n  serviceWorker = window.navigator.serviceWorker,\n  children,\n}) => {\n  const registrationWorkerRef = React.useRef<ServiceWorkerRegistration | null>(\n    null,\n  )\n  const updateWorkerRef = React.useRef<ServiceWorker | null>(null)\n\n  const state = useObservable({ updatePending: false })\n\n  const { enqueueInfo } = useSnackBar()\n  useReleaseCabinet(enqueueInfo)\n\n  useInterval(() => {\n    if (registrationWorkerRef.current) {\n      logUpdate('checking...')\n      registrationWorkerRef.current.update()\n    }\n  }, updateCheckInterval)\n\n  React.useEffect(\n    () => {\n      const onMessage = (event: MessageEvent) => {\n        if (event.data === 'update-applied') {\n          logUpdate('restarting to apply...')\n          onRestart()\n        }\n      }\n      if (serviceWorker) {\n        serviceWorker.addEventListener('message', onMessage)\n        return () => {\n          serviceWorker.removeEventListener('message', onMessage)\n        }\n      } else {\n        logUpdate('serviceWorker is not supported')\n        return () => {\n          /* noop */\n        }\n      }\n    },\n    [onRestart, serviceWorker],\n  )\n\n  React.useEffect(() => {\n    const init = updateWorker.register({\n      onInit: reg => {\n        registrationWorkerRef.current = reg\n      },\n      onUpdate: sw => {\n        updateWorkerRef.current = sw\n        state.updatePending = true\n        logUpdate('new update is available')\n      },\n    })\n    // service worker is normally using load event, but since this\n    // done after the load, it has to be triggered manually\n    init()\n  }, [])\n\n  const onCancel = () => {\n    logUpdate('user postponed')\n    state.updatePending = false\n    setTimeout(() => {\n      logUpdate('reminding update to user again')\n      state.updatePending = true\n    }, postponeTimeout)\n  }\n\n  const onConfirm = () => {\n    state.updatePending = false\n    if (updateWorkerRef.current) {\n      logUpdate('user confirmed')\n      updateWorkerRef.current.postMessage('apply-update')\n    }\n  }\n\n  return useObserver(() => (\n    <>\n      {state.updatePending ? (\n        <UpdateSnack\n          autoHideDuration={autoUpdateDelay}\n          onCancel={onCancel}\n          onConfirm={onConfirm}\n        />\n      ) : null}\n      {children}\n    </>\n  ))\n}\n\ninterface IUpdateSnackProps extends Omit<SnackbarProps, 'open'> {\n  autoHideDuration: number\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport function UpdateSnack(props: IUpdateSnackProps) {\n  const { onConfirm, onCancel, ...rest } = props\n  const now = useTimer({ interval: SECOND, enabled: true })\n  const [endTime] = React.useState(() =>\n    addMilliseconds(now, props.autoHideDuration),\n  )\n  const remainingSeconds = formatDistanceStrict(endTime, now)\n  React.useEffect(\n    () => {\n      if (now >= endTime) {\n        onConfirm()\n      }\n    },\n    [now, endTime],\n  )\n  return (\n    <Snackbar\n      open={true}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center',\n      }}\n      className={snackStyles.variantInfo}\n      message={\n        <span data-testid=\"message\">{i18n.t`Application will be restarted in ${remainingSeconds} to apply available update.`}</span>\n      }\n      disableWindowBlurListener={true}\n      action={[\n        <Button\n          key=\"later\"\n          color=\"secondary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"postpone-button\"\n          onClick={onCancel}\n        >\n          {i18n.t`Postpone update`}\n        </Button>,\n        <Button\n          key=\"confirm\"\n          color=\"primary\"\n          size=\"small\"\n          role=\"button\"\n          data-testid=\"confirm-button\"\n          onClick={onConfirm}\n        >\n          {i18n.t`Restart now`}\n        </Button>,\n      ]}\n      {...rest}\n    />\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { ContactSupport, Warning } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { Sizer } from '../atoms/Sizer'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\nconst IconStyled = styled.div`\n  color: ${Colors.orange};\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ninterface IProps {\n  onFeedback(): void\n}\n\nexport const ErrorPage: React.FC<IProps> = ({ onFeedback }) => (\n  <FullPageLayout\n    width={15}\n    pageTitle={i18n.t`Application error`}\n    useBackButton={true}\n    hideLogoutWidget={true}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          We are sorry, but there is an unexpected problem in the app. Our team\n          was notified and will fix this soon.\n        </Trans>\n      </h3>\n      <Center>\n        <IconStyled>\n          <Warning style={{ fontSize: '5rem' }} />\n        </IconStyled>\n        <Sizer width={20}>\n          <TouchButton onClick={onFeedback}>\n            <ContactSupport />\n            <Trans>Send feedback</Trans>\n          </TouchButton>\n        </Sizer>\n      </Center>\n    </Card>\n  </FullPageLayout>\n)\n","import { Trans } from '@lingui/macro'\nimport { OfflineBolt } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../atoms/Card'\nimport { Sizer } from '../atoms/Sizer'\nimport { i18n } from '../i18n'\nimport { FullPageLayout } from '../molecules/FullPageLayout'\nimport { TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\nconst IconStyled = styled.div`\n  margin-top: 2rem;\n  color: ${Colors.red};\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ninterface IProps {\n  onRetry(): void\n}\n\nexport const ServiceUnreachablePage: React.FC<IProps> = ({ onRetry }) => (\n  <FullPageLayout\n    width={15}\n    pageTitle={i18n.t`Service unreachable`}\n    useBackButton={false}\n    hideLogoutWidget={true}\n  >\n    <Card>\n      <h3>\n        <Trans>\n          Connection to external service is not possible at the moment. Please\n          try again later or <a href=\"/support\">contact our support</a>.\n        </Trans>\n      </h3>\n      <Center>\n        <IconStyled>\n          <OfflineBolt style={{ fontSize: '5rem' }} />\n        </IconStyled>\n        <Sizer width={20}>\n          <TouchButton onClick={onRetry} iconName=\"cached\">\n            {' '}\n            <Trans>Retry the connection</Trans>\n          </TouchButton>\n        </Sizer>\n      </Center>\n    </Card>\n  </FullPageLayout>\n)\n","import {\n  ApolloDefender,\n  isChunkError,\n  isNetworkUnreachableError,\n} from '@speedlo/graphql'\nimport { flushSentry, Sentry } from '@speedlo/sentry'\nimport { SillyErrorBoundary } from '@speedlo/tools'\nimport { isApolloError } from 'apollo-client'\nimport React from 'react'\nimport { VError } from 'verror'\n\nimport { useSnackBar } from '../hooks/useSnackBar'\nimport { i18n } from '../i18n'\nimport { ErrorPage } from '../pages/ErrorPage'\nimport { ServiceUnreachablePage } from '../pages/ServiceUnreachablePage'\n\nexport type ErrorKind = 'none' | 'serviceUnreachable' | 'otherError'\n\nconst makeError = (message: string) =>\n  `${message} ${i18n.t`Our team was notified about the issue.`}`\n\nexport const DefaultErrorHandler: React.FC = ({ children }) => {\n  const { enqueueWarning, enqueueError } = useSnackBar()\n\n  const [errorKind, setErrorKind] = React.useState<ErrorKind>('none')\n\n  const onRetry = React.useCallback(() => {\n    setErrorKind('none')\n  }, [])\n\n  const onUnhandledError = React.useCallback((error: Error) => {\n    if (isChunkError(error)) {\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Debug)\n        Sentry.captureException(error)\n      })\n      flushSentry().then(() => window.location.reload())\n      return\n    }\n    if (isApolloError(error) && isNetworkUnreachableError(error)) {\n      setErrorKind('serviceUnreachable')\n      return\n    }\n    Sentry.captureException(new VError(error, 'Unhandled exception'))\n    setErrorKind('otherError')\n  }, [])\n\n  const onNetworkError = React.useCallback(\n    (error: Error, isUnreachable: boolean) => {\n      if (isUnreachable) {\n        setErrorKind('serviceUnreachable')\n      } else {\n        enqueueError(\n          makeError(\n            i18n.t`Unexpected error occured in communication with service.`,\n          ),\n        )\n      }\n    },\n    [],\n  )\n\n  const onOperationError = React.useCallback(() => {\n    enqueueError(\n      makeError(i18n.t`Unexpected error occured while sending a request.`),\n    )\n  }, [])\n\n  const onUserErrors = React.useCallback((messages: ReadonlyArray<string>) => {\n    messages.forEach(enqueueWarning)\n  }, [])\n\n  const render = () => {\n    switch (errorKind) {\n      case 'serviceUnreachable': {\n        return <ServiceUnreachablePage onRetry={onRetry} />\n      }\n      case 'otherError': {\n        return <ErrorPage onFeedback={showFeedback} />\n      }\n      default: {\n        return children\n      }\n    }\n  }\n\n  return (\n    <ApolloDefender\n      onNetworkError={onNetworkError}\n      onUserErrors={onUserErrors}\n      onOperationError={onOperationError}\n    >\n      <SillyErrorBoundary onError={onUnhandledError}>\n        {render()}\n      </SillyErrorBoundary>\n    </ApolloDefender>\n  )\n}\n\nfunction showFeedback() {\n  Sentry.showReportDialog({\n    labelClose: i18n.t`Close`,\n    title: i18n.t`Unexpected error in the app`,\n  })\n}\n","import React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { logRouting } from '../helpers/logger'\n\nexport const LogRoute: React.FC = () => {\n  if (process.env.NODE_ENV !== 'development') {\n    return (\n      <Route>\n        {({ location }) => {\n          logRouting('at %s', location.pathname)\n          return null\n        }}\n      </Route>\n    )\n  } else {\n    return null\n  }\n}\n","import debug from 'debug'\nimport { when } from 'mobx'\nimport React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { WithRoot } from '../atoms/WithRoot'\n\nconst log = debug('routing')\n\nexport const RedirectAfterLogin = () => (\n  <Route\n    children={({ location, history }) => (\n      <WithRoot\n        render={root => {\n          if (!root.auth.isAuthenticatedUser) {\n            const route = (location.state && location.state.origin) || '/'\n            const waitForAuthentication = () => root.auth.isAuthenticated\n            const redirectAfterLogin = () => {\n              history.replace(route)\n            }\n            when(waitForAuthentication, redirectAfterLogin)\n            log('will redirect to %s when auth', route)\n          }\n          return null\n        }}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { WithRoot } from '../atoms/WithRoot'\nimport { RedirectToLogin } from './RedirectToLogin'\n\nexport const RedirectAfterLogout = () => (\n  <WithRoot\n    observe={false}\n    render={root => {\n      if (root.auth.isAuthenticated) {\n        root.auth.invalidate()\n        return <RedirectToLogin useOrigin={false} />\n      }\n      return <Redirect to=\"/\" />\n    }}\n  />\n)\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport Pacman from '../atoms/Pacman'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { LogRoute } from './LogRoute'\nimport { RedirectAfterLogin } from './RedirectAfterLogin'\nimport { RedirectAfterLogout } from './RedirectAfterLogout'\nimport { SecureRoute } from './SecureRoute'\n\nconst PasswordLoginRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordLoginRoute'),\n)\n\nconst PasswordChangeRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordChangeRoute'),\n)\n\nconst PasswordResetRoute = React.lazy(() =>\n  import('../segments/login/routes/PasswordResetRoute'),\n)\n\nconst MainDashboardPage = React.lazy(() =>\n  import('../segments/main/pages/MainDashboardPage'),\n)\n\nconst OrderRoutes = React.lazy(() =>\n  import('../segments/order/routes/OrderRoutes'),\n)\n\nconst KitchenRoutes = React.lazy(() =>\n  import('../segments/kitchen/routes/KitchenRoutes'),\n)\n\nconst SettingsRoutes = React.lazy(() =>\n  import('../segments/settings/routes/SettingsRoutes'),\n)\n\nconst OverviewRoutes = React.lazy(() =>\n  import('../segments/overview/routes/OverviewRoutes'),\n)\n\nconst SupportPage = React.lazy(() =>\n  import('../segments/main/pages/SupportPage'),\n)\n\nexport const Routing = () => (\n  <React.Suspense fallback={<Pacman />}>\n    <LogRoute />\n    <RedirectAfterLogin />\n    <Switch>\n      <LazyRoute path=\"/login\" exact={true} component={PasswordLoginRoute} />\n      <LazyRoute path=\"/reset\" exact={true} component={PasswordResetRoute} />\n      <LazyRoute\n        path=\"/recovery/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <LazyRoute\n        path=\"/register/:token\"\n        exact={true}\n        component={PasswordChangeRoute}\n      />\n      <SecureRoute path=\"/\" exact={true} component={MainDashboardPage} />\n      <SecureRoute path=\"/order\" component={OrderRoutes} />\n      <SecureRoute path=\"/kitchen\" component={KitchenRoutes} />\n      <SecureRoute path=\"/settings\" component={SettingsRoutes} />\n      <SecureRoute path=\"/overview\" component={OverviewRoutes} />\n      <LazyRoute path=\"/support\" component={SupportPage} />\n      <Route path=\"/logout\" component={RedirectAfterLogout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </React.Suspense>\n)\n","import { Sentry } from '@speedlo/sentry'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { useQUserBootstrap } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\n\nexport const UserBootstrap = observer(() => {\n  const { auth, user } = useRoot()\n\n  const { data, loading } = useQUserBootstrap(\n    { userId: auth.userId },\n    { skip: !auth.isAuthenticatedUser },\n  )\n\n  React.useEffect(() => {\n    if (!auth.userId) {\n      user.finishBootstrap()\n      Sentry.configureScope(scope => {\n        scope.setUser({\n          id: undefined,\n        })\n        scope.setExtra('roles', [])\n        scope.setExtra('branches', [])\n      })\n    }\n  })\n\n  React.useEffect(() => {\n    if (auth.isAuthenticatedUser && !loading) {\n      user.applyUserData(data.user)\n      user.applyAccess(data.access)\n      user.applyPermissions(data.permissions)\n      user.finishBootstrap()\n      Sentry.configureScope(scope => {\n        scope.setUser({\n          id: auth.userId,\n          username: `${data.user.firstName} ${data.user.lastName}`,\n        })\n        scope.setExtra('roles', data.user.roles.map(RM.prop('name')))\n        scope.setExtra('branches', data.user.branches.map(RM.prop('id')))\n      })\n    }\n  })\n\n  return null\n})\n","import './App.css'\n\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ConnectionWarning } from './atoms/ConnectionWarning'\nimport Pacman from './atoms/Pacman'\nimport { useRoot } from './atoms/RootProvider'\nimport { UpdateHandler } from './atoms/UpdateHandler'\nimport { DefaultErrorHandler } from './organisms/DefaultErrorHandler'\nimport { Routing } from './routes/Routing'\nimport { UserBootstrap } from './segments/login/organisms/UserBootstrap'\n\nexport const App: React.FC = () => {\n  const { user } = useRoot()\n  return (\n    <DefaultErrorHandler>\n      <UserBootstrap />\n      <ConnectionWarning />\n      <UpdateHandler>\n        <Observer>{() => (user.isReady ? <Routing /> : <Pacman />)}</Observer>\n      </UpdateHandler>\n    </DefaultErrorHandler>\n  )\n}\n","import React from 'react'\nimport { Provider as GoodByeProvider } from 'react-goodbye'\nimport { BrowserRouter } from 'react-router-dom'\n\ninterface IProps {}\n\nexport const Router: React.FC<IProps> = ({ children }) => (\n  <GoodByeProvider>\n    {({ handleGetUserConfirm }) => (\n      <BrowserRouter getUserConfirmation={handleGetUserConfirm}>\n        {children}\n      </BrowserRouter>\n    )}\n  </GoodByeProvider>\n)\n","import { createMuiTheme, MuiThemeProvider } from '@material-ui/core'\nimport React from 'react'\n\ninterface IProps {}\n\nexport const ThemeProvider: React.FC<IProps> = ({ children }) => {\n  const theme = createMuiTheme({\n    typography: {\n      useNextVariants: true,\n    },\n  })\n\n  return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>\n}\n","import './enableDebug'\n\nimport { useSentryInit } from '@speedlo/sentry'\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport { App } from './App'\nimport { RootProvider } from './atoms/RootProvider'\nimport { Router } from './atoms/Router'\nimport { SnackProvider } from './atoms/SnackProvider'\nimport { ThemeProvider } from './atoms/ThemeProvider'\nimport { appConfig } from './config'\nimport { I18nManager } from './i18n'\n\nconst Main = () => {\n  useSentryInit(appConfig.sentryDSN)\n  return (\n    <ThemeProvider>\n      <RootProvider>\n        <I18nManager>\n          <Router>\n            <SnackProvider>\n              <App />\n            </SnackProvider>\n          </Router>\n        </I18nManager>\n      </RootProvider>\n    </ThemeProvider>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nrender(<Main />, rootElement)\n","export interface IQueryError extends Error {\n  showToUser: boolean\n}\n\nexport type TQueryErrors = IQueryError[] | null\n\n// tslint:disable-next-line:no-any\nexport const getQueryErrors = async (query: Promise<any>) => {\n  const result = await query\n  if (result && result.errors) {\n    return result.errors as IQueryError[]\n  }\n  return null\n}\n","import React from 'react'\nimport { Route, RouteProps } from 'react-router-dom'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { NotFoundPage } from '../pages/NotFoundPage'\nimport { LazyRoute } from './LazyRoute'\nimport { RedirectToLogin } from './RedirectToLogin'\n\ninterface ISecureRouteProps extends RouteProps {\n  redirect?: boolean\n  lazy?: boolean\n}\n\nexport const SecureRoute: React.FC<ISecureRouteProps> = ({\n  redirect = true,\n  lazy = true,\n  ...props\n}) => {\n  const { auth } = useRoot()\n  if (!auth.isAuthenticatedUser) {\n    return redirect ? <RedirectToLogin /> : <NotFoundPage />\n  }\n  if (props.component && typeof props.component === 'object') {\n    const { component, path, exact } = props\n    return <LazyRoute path={path} exact={exact} component={component} />\n  }\n  return <Route {...props} />\n}\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nimport { Colors } from '../styling'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.FC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n  >\n    <Spinner\n      name=\"pacman\"\n      style={noMargin ? {} : { marginTop: '45vh', color: Colors.orange }}\n    />\n  </div>\n)\n\nexport default Pacman\n","import React from 'react'\n\nimport { TRootModel } from '../models/RootModel'\nimport { WithRoot as RealWithRoot } from './RootProvider'\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithRoot: React.FC<IProps> = ({ render, observe }) => (\n  <RealWithRoot children={render} observe={observe} />\n)\n","import React from 'react'\nimport { Route, RouteComponentProps, RouteProps } from 'react-router-dom'\n\nimport Pacman from '../atoms/Pacman'\n\ninterface IProps<Params> extends Omit<RouteProps, 'render' | 'children'> {\n  component: React.ComponentType<RouteComponentProps<Params>>\n}\n\nexport function LazyRoute<Params = {}>({\n  component: Component,\n  ...props\n}: IProps<Params>) {\n  return (\n    <Route\n      {...props}\n      render={routeProps => (\n        <React.Suspense fallback={<Pacman />}>\n          <Component {...routeProps} />\n        </React.Suspense>\n      )}\n    />\n  )\n}\n"],"sourceRoot":""}