{"version":3,"sources":["atoms/IconLine.tsx","atoms/CanMutate.tsx","atoms/Headline.tsx","atoms/SelectControl.tsx","atoms/NoAccess.tsx","molecules/PageLayoutFullHeightItem.tsx","atoms/CanQuery.tsx","atoms/HorizontalSeparator.tsx","atoms/ScrollArea.tsx","atoms/SelectControlFlat.tsx","atoms/CardListTitle.tsx","atoms/FlexColumn.tsx","molecules/CompanyBranchFlatSelect.tsx","organisms/UserCompanyBranches.tsx","organisms/CompanyBranchPicker.tsx","atoms/Price.tsx","segments/order/molecules/OrderMapMarker.graphql.ts","segments/order/organisms/OrderListLoader.graphql.ts","segments/order/organisms/OrderListLoader.tsx","atoms/CursorContainer.tsx","atoms/CompanyBranch.tsx","molecules/CompanyBranchDropdown.tsx","graph/buildSubscription.tsx","molecules/PageLayoutItem.tsx","atoms/LinkStyled.tsx","atoms/RelativeLink.tsx","segments/order/molecules/OrderTicker.graphql.ts","helpers/moment.ts","atoms/TimeBadge.tsx","hooks/useTimer.ts","hooks/useStateRef.ts","segments/order/atoms/DeliveryTimeBadge.tsx","../node_modules/raf/index.js","atoms/FormInputDate.tsx","atoms/FlexRow.tsx","atoms/ObserverWhen.tsx","segments/order/atoms/AddressDisplay.tsx","segments/order/atoms/CustomerIdentity.tsx","segments/order/molecules/OrderTicker.tsx","segments/order/molecules/ContactLines.tsx","segments/order/molecules/NoteLine.tsx","segments/order/molecules/OrderCountLine.tsx","segments/order/molecules/OrderWareLine.tsx","segments/order/molecules/OrderDetailTotals.tsx","segments/order/molecules/OrderRuleLines.tsx","segments/order/molecules/OrderStats.tsx","segments/order/molecules/OrderTimeLine.tsx","segments/order/molecules/OrderWareList.tsx","segments/order/organisms/OrderDetail.graphql.ts","segments/order/molecules/OrderStateButton.tsx","segments/order/atoms/OrderDriverSelect.tsx","segments/order/molecules/OrderStateDeliver.tsx","segments/order/molecules/OrderStateFlowContainer.tsx","segments/order/molecules/OrderStateTimeNotification.tsx","segments/order/organisms/OrderStateFlow.graphql.ts","segments/order/organisms/OrderStateFlow.tsx","segments/order/organisms/OrderDetail.tsx","segments/order/atoms/OrderBox.tsx","segments/overview/molecules/ClosureHistoryTable.tsx","segments/overview/molecules/StatisticsFilter.tsx","segments/overview/organisms/ClosureHistoryLoader.graphql.ts","segments/overview/organisms/ClosureHistoryLoader.tsx","segments/overview/pages/ClosureHistoryPage.tsx","segments/overview/molecules/ClosureSubmitButton.tsx","segments/overview/molecules/ClosureStatisticsFilter.tsx","atoms/MonospaceOutput.tsx","segments/overview/organisms/ClosureStatisticsContent.graphql.ts","segments/overview/organisms/ClosureStatisticsContent.tsx","segments/overview/pages/ClosurePage.tsx","segments/overview/organisms/StatisticsContent.tsx","segments/overview/pages/DailyStatisticsPage.tsx","segments/overview/molecules/OrdersStatisticsSummary.tsx","segments/overview/organisms/OrdersStatisticsList.tsx","segments/overview/organisms/OrdersStatisticsLoader.graphql.ts","segments/overview/organisms/OrdersStatisticsLoader.tsx","segments/overview/pages/OrdersStatisticsPage.tsx","segments/overview/molecules/ClosureButton.tsx","segments/overview/molecules/DailyStatisticsButton.tsx","segments/overview/molecules/OrdersStatisticsButton.tsx","segments/overview/pages/OverviewPage.tsx","segments/overview/routes/OverviewRoutes.tsx"],"names":["IconLineWrap","styled_components__WEBPACK_IMPORTED_MODULE_1__","div","withConfig","displayName","DescriptionContainer","labelMargin","labelWidth","labelWidthUnits","_styling__WEBPACK_IMPORTED_MODULE_2__","DefaultSizeUnit","IconLineChildren","LabelStyled","IconLine","_a","icon","label","children","props","__rest","iconComponent","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_Icon__WEBPACK_IMPORTED_MODULE_3__","iconName","color","greyDark","nativeColor","__webpack_require__","d","__webpack_exports__","CanMutate","react__WEBPACK_IMPORTED_MODULE_0__","n","_NoAccess__WEBPACK_IMPORTED_MODULE_1__","_RootProvider__WEBPACK_IMPORTED_MODULE_2__","mutationName","user","Object","canMutate","Fragment","Headline","styled_components__WEBPACK_IMPORTED_MODULE_0__","_styling__WEBPACK_IMPORTED_MODULE_1__","h2","light","greyLight","greyDarkest","margin","size","composeStyles","outerStyles","assign","control","base","state","selectProps","width","minWidth","controlStyles","border","greyMiddle","MarginAroundFormComponents","undefined","menu","menuStyles","zIndex","black","SelectControl","Component","[object Object]","react_select__WEBPACK_IMPORTED_MODULE_1__","_extends","this","styles","NoAccess","PageLayoutFullHeightItem","_atoms_ScrollArea__WEBPACK_IMPORTED_MODULE_2__","_styling__WEBPACK_IMPORTED_MODULE_3__","FullHeightDiv","widthInColumns","LayoutGridCellMargin","widthComputed","column","leftPos","row","topPos","FullHeightDivStyled","withScrollArea","scrollAreaId","id","CanQuery","queryName","canQuery","HorizontalSeparator","HorizontalSeparatorStyled","visible","ScrollArea","SelectControlFlat","_lingui_react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","styled_components__WEBPACK_IMPORTED_MODULE_2__","_helpers_ramda__WEBPACK_IMPORTED_MODULE_3__","ItemStyled","textColor","isSelected","SelectorStyled","isInvalid","isMulti","selectedItem","selectedItems","Array","isArray","length","item","contains","equals","onSingleSelection","onMultiSelection","isItemSelected","without","concat","items","isClearable","formatItem","hasSelection","onClick","updateSelection","map","idx","key","defaultProps","prop","getItemValue","CardListTitle","FlexColumn","fixedWidth","widthGrowIndex","padding","CompanyBranchFlatSelect","branches","selectedBranch","selectedBranches","styling","react_default","title","brand","name","UserCompanyBranches","render","WithRoot","CompanyBranchPicker","breakpoint","onSelectionChange","onSelectionClear","isLoading","branch","includes","find","filter","selected","ramda","CompanyBranchDropdown","Price","_helpers_formats__WEBPACK_IMPORTED_MODULE_1__","price","OrderMapMarkerFragment","src_default","fragments","OrderListQuery","OrderStateModel_graphql","OrderTicker_graphql","OrderListSubscription","QueryOrderList","buildQuery","SubscribeOrderList","buildSubscription","OrderListLoader","getOrderState","knownCategories","types","NEW_ORDERS","PREPARING","READY_TO_DELIVER","ON_WAY","FINISHED","includeOldFinished","root","order","list","hasBranchFilter","noFilter","variables","branchesFilter","categories","fetchPolicy","refetchOnConnectionLost","renderLoading","orders","orderStateCategories","result","queryResult","handleUpdate","handleSubscriptionUpdate","loading","categorizedOrders","reduce","category","push","categorizeOrders","orderStateCategory","update","prev","updatedOrder","orderExists","reject","isOldFinishedOrder","o","unshift","esm","Date","createdAt","companyBranch","oldOrderThreshold","CursorContainer","cursor","CompanyBranch","short","showBrand","substr","value","placeholder","i18n","_","options","getOptionValue","formatOptionLabel","filterOption","rawInput","data","toLocaleLowerCase","onChange","selection","head","_hooks_useEffectOnce__WEBPACK_IMPORTED_MODULE_0__","subscription","subscribeToMore","document","updateQuery","subscriptionData","PageLayoutItem","route","component","layoutItem","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","to","_atoms_CanQuery__WEBPACK_IMPORTED_MODULE_3__","_atoms_CanMutate__WEBPACK_IMPORTED_MODULE_2__","LinkStyled","RelativeLink","from","linkProps","location","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","resolveLocation","pathname","resolve_pathname__WEBPACK_IMPORTED_MODULE_3__","resolved","OrderTickerFragment","graphql_tag__WEBPACK_IMPORTED_MODULE_0__","graphql_tag__WEBPACK_IMPORTED_MODULE_0___default","_graph_fragments__WEBPACK_IMPORTED_MODULE_1__","moment__WEBPACK_IMPORTED_MODULE_0__","moment__WEBPACK_IMPORTED_MODULE_0___default","cs","updateLocale","TimeBadgeStyled","styled_components_browser_esm","white","TimeBadgeUnknown","TimeBadgeInProgress","orange","TimeBadgeBigTime","TimeBadgeWarning","red","TimeBadgeCompleted","green","TimeBadgeCancelled","TimeBadge","minutes","isFinished","isCancelled","index_es","toString","container","Number","isNaN","useTimer","interval","enabled","getNow","now","nextTick","raf_default","cancelTick","cancel","getLastUpdate","setLastUpdate","initialState","setState","react","ref","current","useStateRef","handleRef","onFrame","loop","onStop","DeliveryTimeBadge","deliverAt","deliveredAt","Boolean","global","window","vendors","suffix","raf","caf","i","last","queue","callback","_now","next","Math","max","setTimeout","cp","slice","cancelled","e","round","handle","module","exports","fn","call","apply","arguments","polyfill","object","requestAnimationFrame","cancelAnimationFrame","FormInputDateContainer","styled_components__WEBPACK_IMPORTED_MODULE_4__","FormInputDate","field","defaultValue","inputWidth","minDate","react_form__WEBPACK_IMPORTED_MODULE_3__","fieldApi","react_datepicker__WEBPACK_IMPORTED_MODULE_2__","_helpers_moment__WEBPACK_IMPORTED_MODULE_5__","date","setValue","FlexRow","ObserverWhen","test","renderSuccess","renderFailure","index_module","AddressDisplay","address","street","houseNumber","city","CustomerIdentity","customer","lastName","firstName","defaultPhone","phone","OrderTickerStyled","modules","color_default","turquoise","alpha","string","OrderTickerMainContentStyled","DeliveryTimeBadgeContainerStyled","AddressDisplayContainerStyled","CustomerIdentityContainerStyled","PriceContainerStyled","PaidMarkStyled","PaidTextStyled","ToBranchContainerStyled","Card","OrderTicker","showBranch","CANCEL","totalSum","isPaidWithCard","_lingui_react","ContactLines","phones","emails","renderContact","contact","description","isMail","href","replace","renderClickableLink","email","CurrentNoteStyled","span","PreviousNoteStyled","NoteLine","note","previousNote","OrderCountLine","total","values","OrderWareLineWrap","CodeContainerStyled","NameContainerStyled","OrderWareLine_PriceContainerStyled","OrderWareLine","code","OrderCartTotalsContainer","OrderDetailTotals","transportFee","coverPrice","totalDiscount","OrderRuleLines","rules","join","OrderStats","stats","formats","driver","OrderTimeLine_LabelStyled","labelMap","OrderTimeLine","orderTiming","timing","OrderWareList","orderWares","orderWare","recipe","nameLabel","sidedishes","sidedish","QueryOrderDetail","OrderStateDeliver_graphql","stateLabels","ACCEPTED","OrderStateButton","orderId","nextState","stateModel","TouchButton","text","updateOrderState","DriverName","backgroundColor","background","height","ButtonHeight","borderWidth","borderRadius","Button","valueContainer","singleValue","fontSize","OrderDriverSelect","drivers","selectedDriver","onSelect","onClear","onReload","isSearchable","noOptionsMessage","onMenuOpen","components","ValueContainer","Icon","react_select_esm","DropdownIndicator","OrderStateDeliver","branchId","orderDriver","refetch","removeDriver","selectDriver","deliverOrder","OrderStateFlowContainerWrapper","Control","OrderStateFlowContainer","child","minutesOption","MinutesContainer","MinutesItem","OrderStateTimeNotification_OrderStateTimeNotification","dialogOpen","openDialog","closeDialog","core_index_es","open","onClose","sendTimeNotification","QueryOrderState","OrderStateNewOrder","OrderStateAcceptedOrder","canDeliver","OrderStateOnWayOrder","OrderStateFlow","observe","allowedCategories","sentry","verror","deliveryType","enum","PICKUP","stateProps","OrderDetailContainerStyled","OrderDetail","allAppliedRules","customerOrdersCountCurrent","customerOrdersCountTotal","OrderBox","OrderBoxStyled","listModel","isSingleBranchSelected","toggleOrderDetail","isOrderDetailOpen","ClosureHistoryTable","reports","Loading","report","reportSequence","reportDatetime","StatisticsFilter","statistics","setBranchFilter","clearBranchFilter","es","submitFilter","dateFrom","dateTo","ClosureHistoryQuery","QueryClosureHistory","ClosureHistoryLoader","RootProvider","singleBranchFilter","financialReports","ClosureHistoryPage","loaderProps","FullPageLayout","pageTitle","useBackButton","ClosureSubmitButton","ButtonToRight","ClosureStatisticsFilter","isShowingHistory","createClosure","react_router_dom","core","iconSize","textNextToIcon","MonospaceOutputStyled","p","MonospaceOutput","output","RegExp","formatOutput","FinancialReport","QueryFinancialReport","ClosureStatisticsContent","reportId","showReport","lastReport","plainData","ClosurePage","match","params","StatisticsContent","StatisticsModel_graphql","dailyStatisticsPlain","categoryStatisticsPlain","deliveryStatisticsPlain","DailyStatisticsPage","StatPanel","StatLabel","h1","StatValue","OrdersStatisticsSummary","formattedValue","onlinePayments","ordersCount","fees","OrdersStatisticsList","orderModel","OrdersStatisticsQuery","QueryOrdersStatistics","OrdersStatisticsLoader","finishedOrders","OrdersStatisticsPage","PageLayout","layouts","x","y","w","h","showSoundControl","scrollPageTitle","ClosureButton","DailyStatisticsButton","OrdersStatisticsButton","OverviewPage","OverviewRoutes","PageTitle","react_router","SecureRoute","exact","path","NotFoundPage"],"mappings":"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","file":"static/js/52.f2c5082e.chunk.js","sourcesContent":["import { SvgIconProps } from '@material-ui/core/SvgIcon'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors, Spacing } from '../styling'\nimport { Icon } from './Icon'\n\ninterface IProps {\n  icon?: string | React.ComponentType<SvgIconProps>\n  label?: string\n  labelWidth?: number\n  labelWidthUnits?: string\n  labelMargin?: string\n  className?: string\n}\n\nconst getLabelWidth = ({\n  labelWidth = 0,\n  labelWidthUnits = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  return labelWidth + labelWidthUnits\n}\n\nconst getLabelMargin = ({ labelMargin = '0.5rem 0.2rem 0 auto' }: IProps) => {\n  return labelMargin\n}\n\nconst IconLineWrap = styled.div`\n  display: flex;\n`\nIconLineWrap.displayName = 'IconLineWrap'\n\nconst DescriptionContainer = styled.div`\n  margin: ${getLabelMargin};\n  min-width: ${getLabelWidth};\n  flex: 0 1 auto;\n  text-align: right;\n`\n\nconst IconLineChildren = styled.div`\n  margin-left: 0.5rem;\n  align-self: stretch;\n  flex: 1 0 auto;\n`\nconst LabelStyled = styled.div`\n  padding-top: 0.2rem;\n  display: inline-block;\n`\n\nIconLineChildren.displayName = 'IconLineChildren'\n\nexport const IconLine: React.SFC<IProps> = ({\n  icon,\n  label,\n  labelWidth,\n  labelWidthUnits,\n  labelMargin,\n  children,\n  ...props\n}) => {\n  let iconComponent\n  if (icon) {\n    if (typeof icon === 'string') {\n      iconComponent = <Icon iconName={icon} color={Colors.greyDark} />\n    } else {\n      iconComponent = React.createElement(icon, {\n        nativeColor: Colors.greyDark,\n      })\n    }\n  }\n\n  return (\n    <IconLineWrap {...props}>\n      <DescriptionContainer\n        labelWidth={labelWidth}\n        labelWidthUnits={labelWidthUnits}\n        labelMargin={labelMargin}\n      >\n        {iconComponent}\n        {label ? <LabelStyled>{label}</LabelStyled> : null}\n      </DescriptionContainer>\n      <IconLineChildren>{children}</IconLineChildren>\n    </IconLineWrap>\n  )\n}\n","import React from 'react'\n\nimport { NoAccess } from './NoAccess'\nimport { useRoot } from './RootProvider'\n\ninterface IProps {\n  mutationName: string\n}\n\nexport const CanMutate: React.SFC<IProps> = ({ mutationName, children }) => {\n  const { user } = useRoot()\n  return user.canMutate(mutationName) ? (\n    <>{children}</>\n  ) : (\n    <NoAccess>{`No access to mutation ${mutationName}`}</NoAccess>\n  )\n}\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface IHeadlineProps {\n  margin?: string\n  size?: 'smaller'\n  light?: boolean\n}\n\nconst getMargin = ({ margin = '0 0.5rem 0 0.5rem' }: IHeadlineProps) => margin\n\nconst getFontSize = ({ size }: IHeadlineProps) => size === 'smaller' && '1rem'\n\nconst getColor = ({ light = false }: IHeadlineProps) =>\n  light ? Colors.greyLight : Colors.greyDarkest\n\nexport const Headline = styled.h2`\n  color: ${getColor};\n  font-weight: lighter;\n  margin: ${getMargin};\n  font-size: ${getFontSize};\n`\n","import React from 'react'\nimport Select from 'react-select'\nimport { Props } from 'react-select/lib/Select'\nimport { StylesConfig } from 'react-select/lib/styles'\n\nimport { Colors, Spacing } from '../styling'\n\nexport interface ISelectControlProps<OptionType = {}>\n  extends Props<OptionType> {\n  width?: number\n  minWidth?: number\n}\n\nconst composeStyles = (outerStyles: StylesConfig = {}) => ({\n  ...outerStyles,\n  control: (base, state) => {\n    const {\n      selectProps: { width, minWidth },\n    } = state\n    const controlStyles = {\n      ...base,\n      border: `1px solid ${Colors.greyMiddle}`,\n      margin: Spacing.MarginAroundFormComponents,\n      width: width !== undefined ? `${width}rem` : '100%',\n      minWidth: minWidth !== undefined ? `${minWidth}rem` : '8rem',\n    }\n    return outerStyles.control\n      ? outerStyles.control(controlStyles, state)\n      : controlStyles\n  },\n  menu: (base, state) => {\n    const {\n      selectProps: { width },\n    } = state\n    const menuStyles = {\n      ...base,\n      zIndex: 20,\n      color: Colors.black,\n      width: width !== undefined ? `${width}rem` : '100%',\n    }\n    return outerStyles.menu ? outerStyles.menu(menuStyles, state) : menuStyles\n  },\n})\n\nexport class SelectControl<OptionType> extends React.Component<\n  ISelectControlProps<OptionType>\n> {\n  render() {\n    return <Select {...this.props} styles={composeStyles(this.props.styles)} />\n  }\n}\n","import { Tooltip } from '@material-ui/core'\nimport { PanTool } from '@material-ui/icons'\nimport React from 'react'\n\ninterface IProps {\n  children: string\n}\n\nexport const NoAccess: React.SFC<IProps> = ({ children }) =>\n  process.env.REACT_APP_STAGE !== 'prod' ? (\n    <Tooltip title={children}>\n      <PanTool />\n    </Tooltip>\n  ) : null\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { ScrollArea } from '../atoms/ScrollArea'\nimport { Spacing } from '../styling'\n\ninterface IPageLayoutFullHeightItemProps {\n  row?: number\n  column?: number\n  widthInColumns?: number\n  withScrollArea?: boolean\n  scrollAreaId?: string\n}\n\nconst gridColumnWidth: string = '6.22vw'\nconst gridColumnHeigth: string = '3.9375rem'\n\nconst leftPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.column !== undefined) {\n    return (\n      'calc((' +\n      props.column +\n      ' * ' +\n      gridColumnWidth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return Spacing.LayoutGridCellMargin\n  }\n}\nconst widthComputed = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.widthInColumns !== undefined) {\n    return (\n      'calc((' +\n      props.widthInColumns +\n      ' * ' +\n      gridColumnWidth +\n      ') - ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return 'calc(100vh - (2 * ' + Spacing.LayoutGridCellMargin + '))'\n  }\n}\nconst topPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.row !== undefined) {\n    return (\n      'calc((' +\n      props.row +\n      ' * ' +\n      gridColumnHeigth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return (\n      'calc(' + gridColumnHeigth + ' + ' + Spacing.LayoutGridCellMargin + ')'\n    )\n  }\n}\n\nconst FullHeightDiv = styled.div`\n  position: fixed;\n  bottom: 0.5rem;\n  width: ${widthComputed()};\n  left: ${leftPos()};\n  top: ${topPos()};\n`\n\nconst FullHeightDivStyled = styled.div`\n  height: 100%;\n`\n\nexport const PageLayoutFullHeightItem: React.SFC<\n  IPageLayoutFullHeightItemProps\n> = ({\n  children,\n  row = 1,\n  column = 0,\n  widthInColumns = 16,\n  withScrollArea = false,\n  scrollAreaId,\n}) => (\n  <FullHeightDiv\n    column={column}\n    row={row}\n    widthInColumns={widthInColumns}\n    withScrollArea={withScrollArea}\n  >\n    {withScrollArea ? (\n      <ScrollArea id={scrollAreaId}>{children}</ScrollArea>\n    ) : (\n      <FullHeightDivStyled>{children}</FullHeightDivStyled>\n    )}\n  </FullHeightDiv>\n)\n","import React from 'react'\n\nimport { NoAccess } from './NoAccess'\nimport { useRoot } from './RootProvider'\n\ninterface IProps {\n  queryName: string\n}\n\nexport const CanQuery: React.SFC<IProps> = ({ queryName, children }) => {\n  const { user } = useRoot()\n  return user.canQuery(queryName) ? (\n    <>{children}</>\n  ) : (\n    <NoAccess>{`No access to query ${queryName}`}</NoAccess>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface IProps {\n  visible?: boolean\n}\n\nconst HorizontalSeparatorStyled = styled.div`\n  border-top: 1px solid ${Colors.greyLight};\n  margin: 0.25rem 0rem;\n`\n\nexport const HorizontalSeparator: React.SFC<IProps> = ({ visible = true }) =>\n  visible ? <HorizontalSeparatorStyled /> : null\n","import styled from 'styled-components'\n\nexport const ScrollArea = styled.div`\n  overflow-y: scroll;\n  -webkit-overflow-scrolling: touch;\n  height: 100%;\n`\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { RM } from '../helpers/ramda'\n\nexport interface ISelectControlFlatProps<ItemType> {\n  items: ReadonlyArray<ItemType>\n  selectedItem?: Maybe<ItemType>\n  onSingleSelection?(selected: Maybe<ItemType>): void\n  selectedItems?: ReadonlyArray<ItemType>\n  onMultiSelection?(selected: ReadonlyArray<ItemType>): void\n  formatItem?: (item: ItemType) => string | ReactNode\n  isMulti?: boolean\n  isClearable?: boolean\n  isInvalid?: boolean\n  textColor?: string\n}\n\ninterface IItemProps {\n  isSelected: boolean\n  textColor: string\n  onClick(): void\n}\n\nconst ItemStyled = styled.div`\n  margin: 0.5rem 0.6rem;\n  display: inline-block;\n  cursor: pointer;\n  color: ${({ textColor }: IItemProps) => textColor};\n  ${applySelectionStyle};\n`\n\nconst SelectorStyled = styled.div`\n  border: ${({ isInvalid }: { isInvalid: boolean }) =>\n    isInvalid === true ? '1px red solid' : 'auto'};\n`\n\nexport class SelectControlFlat<\n  ItemType = { id: ID; displayName: string }\n> extends React.Component<ISelectControlFlatProps<ItemType>> {\n  static defaultProps = {\n    formatItem: RM.prop('displayName'),\n    getItemValue: RM.prop('id'),\n  }\n  hasSelection() {\n    const { isMulti, selectedItem, selectedItems } = this.props\n    if (isMulti) {\n      return Array.isArray(selectedItems) && selectedItems.length > 0\n    }\n    return selectedItem != null\n  }\n  isItemSelected(item: ItemType) {\n    const { isMulti, selectedItem, selectedItems } = this.props\n    if (isMulti && Array.isArray(selectedItems)) {\n      return RM.contains(item, selectedItems)\n    }\n    return RM.equals(selectedItem, item)\n  }\n  updateSelection(item: Maybe<ItemType>) {\n    const {\n      isMulti,\n      selectedItems = [],\n      onSingleSelection,\n      onMultiSelection,\n    } = this.props\n    if (item === null) {\n      if (isMulti && onMultiSelection) {\n        onMultiSelection([])\n      } else if (onSingleSelection) {\n        onSingleSelection(null)\n      }\n    } else if (isMulti && onMultiSelection) {\n      if (this.isItemSelected(item)) {\n        onMultiSelection(\n          Array.isArray(selectedItems)\n            ? RM.without([item], selectedItems)\n            : [item],\n        )\n      } else {\n        onMultiSelection(\n          Array.isArray(selectedItems) ? RM.concat(selectedItems, [item]) : [],\n        )\n      }\n    } else if (onSingleSelection) {\n      onSingleSelection(item)\n    }\n  }\n  render() {\n    const {\n      items,\n      isClearable,\n      isInvalid = false,\n      textColor = 'inherit',\n      formatItem,\n    } = this.props\n    return (\n      <SelectorStyled isInvalid={isInvalid}>\n        {isClearable && (\n          <ItemStyled\n            isSelected={!this.hasSelection()}\n            textColor={textColor}\n            onClick={() => {\n              this.updateSelection(null)\n            }}\n          >\n            <Trans id=\"optionselector.clear-filter\">All</Trans>\n          </ItemStyled>\n        )}\n        {items.map((item, idx) => {\n          return (\n            <ItemStyled\n              key={idx}\n              isSelected={this.isItemSelected(item)}\n              textColor={textColor}\n              onClick={() => {\n                this.updateSelection(item)\n              }}\n            >\n              {formatItem!(item)}\n            </ItemStyled>\n          )\n        })}\n      </SelectorStyled>\n    )\n  }\n}\n\nfunction applySelectionStyle({ isSelected }: IItemProps) {\n  if (!isSelected) {\n    return ''\n  }\n  return css`\n    font-weight: bolder;\n    text-decoration: underline;\n  `\n}\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\nexport const CardListTitle = styled.h2`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  font-size: 1.2rem;\n  margin: 0.8rem 0 0.8rem 0.3rem;\n`\n","import styled from 'styled-components'\n\ninterface IFlexColumnProps {\n  fixedWidth?: boolean\n  width?: string\n  widthGrowIndex?: number\n  padding?: string\n  margin?: string\n}\n\nexport const FlexColumn = styled.div`\n  flex: ${getFlexValue};\n  padding: ${getPadding};\n  margin: ${getMargin};\n`\n\nfunction getFlexValue({\n  fixedWidth = false,\n  width,\n  widthGrowIndex = 0,\n}: IFlexColumnProps) {\n  return fixedWidth ? (width ? `0 0 ${width}` : '0 0') : `${widthGrowIndex} 0`\n}\n\nfunction getPadding({ padding = '0.25rem' }: IFlexColumnProps) {\n  return padding\n}\n\nfunction getMargin({ margin = '' }: IFlexColumnProps) {\n  return margin\n}\n","import React from 'react'\n\nimport { SelectControlFlat } from '../atoms/SelectControlFlat'\nimport { GCompanyBranch } from '../graph/types'\nimport { ICompanyBranchPickerImpl } from '../organisms/CompanyBranchPicker'\nimport { Colors } from '../styling'\n\nexport const CompanyBranchFlatSelect: React.SFC<ICompanyBranchPickerImpl> = ({\n  branches,\n  selectedBranch,\n  selectedBranches,\n  textColor = Colors.black,\n  ...props\n}) => (\n  <SelectControlFlat<GCompanyBranch.Fragment>\n    items={branches}\n    selectedItem={selectedBranch}\n    selectedItems={selectedBranches}\n    textColor={textColor}\n    formatItem={item => <span title={item.brand.name}>{item.name}</span>}\n    {...props}\n  />\n)\n","import React from 'react'\n\nimport { WithRoot } from '../atoms/WithRoot'\nimport { GCompanyBranch } from '../graph/types'\n\ninterface IUserCompanyBranchesProps {\n  render(branches: GCompanyBranch.Fragment[], isLoading: boolean): ReactNode\n}\n\nexport const UserCompanyBranches: React.SFC<IUserCompanyBranchesProps> = ({\n  render,\n}) => (\n  <WithRoot\n    render={({ user }) =>\n      user.branches ? render(user.branches, false) : render([], true)\n    }\n  />\n)\n","import React from 'react'\n\nimport { GCompanyBranch } from '../graph/types'\nimport { RM } from '../helpers/ramda'\nimport { CompanyBranchDropdown } from '../molecules/CompanyBranchDropdown'\nimport { CompanyBranchFlatSelect } from '../molecules/CompanyBranchFlatSelect'\nimport { UserCompanyBranches } from '../organisms/UserCompanyBranches'\n\ntype TBranch = GCompanyBranch.Fragment\n\ninterface ICompanyBranchPickerProps {\n  selectedBranches?: ID[]\n  onSelectionChange?(branchIds: ID[], branches: TBranch[]): void\n  onSelectionClear?(): void\n  breakpoint?: number\n  isMulti?: boolean\n  isClearable?: boolean\n  textColor?: string\n}\n\nexport interface ICompanyBranchPickerImpl {\n  branches: TBranch[]\n  isMulti?: boolean\n  isClearable?: boolean\n  isLoading?: boolean\n  selectedBranch?: Maybe<TBranch>\n  onSingleSelection?(branch: Maybe<TBranch>): void\n  selectedBranches?: TBranch[]\n  onMultiSelection?(branches: TBranch[]): void\n  textColor?: string\n}\n\nexport const CompanyBranchPicker: React.SFC<ICompanyBranchPickerProps> = ({\n  breakpoint = 3,\n  selectedBranches = [],\n  isMulti = false,\n  isClearable = true,\n  textColor,\n  onSelectionChange,\n  onSelectionClear,\n}) => (\n  <UserCompanyBranches\n    render={(branches, isLoading) => {\n      const isSelected = branch => selectedBranches.includes(branch.id)\n      const props: ICompanyBranchPickerImpl = {\n        textColor,\n        isClearable,\n        isMulti,\n        isLoading,\n        branches,\n        selectedBranch: isLoading ? null : branches.find(isSelected),\n        selectedBranches: isLoading ? [] : branches.filter(isSelected),\n        onSingleSelection(selected: TBranch) {\n          if (selected === null && onSelectionClear) {\n            onSelectionClear()\n          } else if (selected !== null && onSelectionChange) {\n            onSelectionChange([selected.id], [selected])\n          }\n        },\n        onMultiSelection(selected: TBranch[]) {\n          if (selected.length === 0 && onSelectionClear) {\n            onSelectionClear()\n          } else if (selected.length && onSelectionChange) {\n            onSelectionChange(selected.map(RM.prop('id')), selected)\n          }\n        },\n      }\n      const Component =\n        branches.length > breakpoint\n          ? CompanyBranchDropdown\n          : CompanyBranchFlatSelect\n      return <Component {...props} />\n    }}\n  />\n)\n","import React from 'react'\n\nimport { formatPrice } from '../helpers/formats'\n\ninterface IPriceProps {\n  price: number\n}\n\nexport const Price: React.SFC<IPriceProps> = ({ price }) => (\n  <span>{formatPrice(price)}</span>\n)\n","import gql from 'graphql-tag'\n\nimport { GeoPointFragment } from '../../../graph/fragments'\n\nexport const OrderMapMarkerFragment = gql`\n  fragment GOrderMapMarker on Order {\n    id\n    deliverAt\n    gps {\n      ...GGeoPoint\n    }\n  }\n  ${GeoPointFragment}\n`\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { buildSubscription } from '../../../graph/buildSubscription'\nimport { GOrderList, SOrderList } from '../../../graph/types'\nimport { OrderStateCategoryFragment } from '../models/OrderStateModel.graphql'\nimport { OrderMapMarkerFragment } from '../molecules/OrderMapMarker.graphql'\nimport { OrderTickerFragment } from '../molecules/OrderTicker.graphql'\n\nconst OrderListQuery = gql`\n  query GOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n    $includeOldFinished: Boolean\n  ) {\n    orders(\n      order: {\n        companyBranches: $branches\n        orderStateCategoriesOR: $categories\n        includeOldFinished: $includeOldFinished\n      }\n    ) {\n      id\n      ...GOrderStateCategory\n      ...GOrderListTicker\n      ...GOrderMapMarker\n    }\n    orderStateCategories {\n      code\n      enum\n    }\n  }\n\n  ${OrderStateCategoryFragment}\n  ${OrderMapMarkerFragment}\n  ${OrderTickerFragment}\n`\n\nconst OrderListSubscription = gql`\n  subscription SOrderList(\n    $branches: [ID!]\n    $categories: [OrderStateCategoryEnum!]\n  ) {\n    updatedOrder(\n      companyBranches: $branches\n      orderStateCategoriesOR: $categories\n    ) {\n      order {\n        id\n        ...GOrderStateCategory\n        ...GOrderListTicker\n        ...GOrderMapMarker\n      }\n    }\n  }\n  ${OrderStateCategoryFragment}\n  ${OrderMapMarkerFragment}\n  ${OrderTickerFragment}\n`\n\nexport const QueryOrderList = buildQuery<\n  GOrderList.Query,\n  GOrderList.Variables\n>(OrderListQuery)\n\nexport const SubscribeOrderList = buildSubscription<\n  SOrderList.Subscription,\n  SOrderList.Variables,\n  GOrderList.Query\n>(OrderListSubscription)\n","import { differenceInHours } from 'date-fns'\nimport React from 'react'\n\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport {\n  GOrderList,\n  OrderStateCategoryEnum,\n  SOrderList,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { QueryOrderList, SubscribeOrderList } from './OrderListLoader.graphql'\n\nconst knownCategories = [\n  OrderStateCategoryEnum.NEW_ORDERS,\n  OrderStateCategoryEnum.PREPARING,\n  OrderStateCategoryEnum.READY_TO_DELIVER,\n  OrderStateCategoryEnum.ON_WAY,\n  OrderStateCategoryEnum.FINISHED,\n]\n\nexport type TOrder = GOrderList.Orders\n\nexport type TCategorizedOrders = { [state in OrderStateCategoryEnum]: TOrder[] }\n\nexport interface ILoaderProps {\n  isLoading: boolean\n  noFilter: boolean\n  orders?: TOrder[]\n  categorizedOrders?: TCategorizedOrders\n  categories?: GOrderList.OrderStateCategories[]\n}\n\ninterface IProps {\n  children(props: ILoaderProps): ReactNode\n  includeOldFinished?: boolean\n}\n\nexport const OrderListLoader: React.SFC<IProps> = ({\n  children,\n  includeOldFinished = false,\n}) => (\n  <WithRoot\n    render={root => {\n      if (!root.order.list.hasBranchFilter) {\n        return children({ isLoading: false, noFilter: true })\n      }\n      const variables: GOrderList.Variables = {\n        branches: root.order.list.branchesFilter,\n        categories: knownCategories,\n        includeOldFinished,\n      }\n      return (\n        <QueryOrderList\n          fetchPolicy=\"cache-and-network\"\n          refetchOnConnectionLost={true}\n          variables={variables}\n          renderLoading={false}\n          render={(\n            { orders = [], orderStateCategories: categories = [] },\n            result,\n          ) => {\n            return (\n              <SubscribeOrderList\n                queryResult={result}\n                variables={variables}\n                handleUpdate={handleSubscriptionUpdate}\n              >\n                {children({\n                  isLoading: result.loading,\n                  noFilter: false,\n                  orders,\n                  categorizedOrders: categorizeOrders(orders),\n                  categories,\n                })}\n              </SubscribeOrderList>\n            )\n          }}\n        />\n      )\n    }}\n  />\n)\n\nexport function getOrderState(order: {\n  orderStateCategory: OrderStateCategoryEnum\n}) {\n  return order.orderStateCategory\n}\n\nfunction categorizeOrders(orders: TOrder[]) {\n  return orders.reduce(\n    (result, order) => {\n      const category = getOrderState(order)\n      if (!result[category]) {\n        result[category] = [order]\n      } else {\n        result[category].push(order)\n      }\n      return result\n    },\n    {} as TCategorizedOrders,\n  )\n}\n\nfunction handleSubscriptionUpdate(\n  update: SOrderList.Subscription,\n  prev: GOrderList.Query,\n) {\n  const { order } = update.updatedOrder\n  if (!order) {\n    return prev\n  }\n  let orderExists = false\n  const orders = RM.reject(isOldFinishedOrder, prev.orders).map(o => {\n    if (o.id === order.id) {\n      orderExists = true\n      return order\n    }\n    return o\n  })\n  if (!orderExists) {\n    orders.unshift(order)\n  }\n  return { ...prev, orders }\n}\n\nfunction isOldFinishedOrder(order: GOrderList.Orders) {\n  return (\n    order.orderStateCategory === OrderStateCategoryEnum.FINISHED &&\n    differenceInHours(new Date(), order.createdAt) >\n      order.companyBranch.oldOrderThreshold\n  )\n}\n","import styled from 'styled-components'\n\ntype TCursor = 'pointer' | 'arrow' | 'default'\n\nexport const CursorContainer = styled.div`\n  cursor: ${({ cursor = 'default' }: { cursor?: TCursor }) => cursor};\n`\n","import React from 'react'\n\nimport { CursorContainer } from '../atoms/CursorContainer'\nimport { GCompanyBranch } from '../graph/types'\n\ninterface ICompanyBranchProps {\n  branch: GCompanyBranch.Fragment\n  onClick?: () => void\n  short?: boolean\n  showBrand?: boolean\n}\n\nexport const CompanyBranch: React.SFC<ICompanyBranchProps> = ({\n  branch,\n  onClick,\n  short = false,\n  showBrand = true,\n}) => (\n  <CursorContainer cursor=\"pointer\" onClick={onClick}>\n    {short ? (\n      branch.name.substr(0, 8)\n    ) : (\n      <>\n        <span>{branch.name}</span>\n        {showBrand && <span>{` [${branch.brand.name}]`}</span>}\n      </>\n    )}\n  </CursorContainer>\n)\n","import React from 'react'\nimport { Props } from 'react-select/lib/Select'\n\nimport { CompanyBranch } from '../atoms/CompanyBranch'\nimport { SelectControl } from '../atoms/SelectControl'\nimport { GCompanyBranch } from '../graph/types'\nimport { RM } from '../helpers/ramda'\nimport { i18n } from '../i18n'\nimport { ICompanyBranchPickerImpl } from '../organisms/CompanyBranchPicker'\n\ninterface IProps\n  extends ICompanyBranchPickerImpl,\n    Props<GCompanyBranch.Fragment> {}\n\nexport const CompanyBranchDropdown: React.SFC<IProps> = ({\n  branches,\n  selectedBranch,\n  onSingleSelection,\n  selectedBranches,\n  onMultiSelection,\n  ...props\n}) => (\n  <SelectControl<GCompanyBranch.Fragment>\n    value={props.isMulti ? selectedBranches : selectedBranch}\n    placeholder={i18n.t`Filter branches...`}\n    options={branches}\n    getOptionValue={RM.prop('id')}\n    formatOptionLabel={branch => <CompanyBranch branch={branch} />}\n    filterOption={(branch, rawInput) =>\n      branch.data.name\n        .toLocaleLowerCase()\n        .includes(rawInput.toLocaleLowerCase())\n    }\n    onChange={selection => {\n      if (props.isMulti && onMultiSelection && Array.isArray(selection)) {\n        onMultiSelection(selection)\n      }\n      if (!props.isMulti && onSingleSelection) {\n        if (Array.isArray(selection)) {\n          onSingleSelection(RM.head(selection) || null)\n        } else {\n          onSingleSelection(selection || null)\n        }\n      }\n    }}\n    {...props}\n  />\n)\n","import { DocumentNode } from 'graphql'\nimport { QueryResult } from 'react-apollo'\n\nimport { useEffectOnce } from '../hooks/useEffectOnce'\n\nexport function buildSubscription<TSubscription, TVariables, TQuery = {}>(\n  subscription: DocumentNode,\n) {\n  type TResult = QueryResult<TQuery, TVariables>\n  interface IProps {\n    children: ReactNode\n    queryResult: TResult\n    variables: TVariables\n    handleUpdate(updatedData: TSubscription, prevData: TQuery): TQuery | void\n  }\n  function GSubscription(props: IProps) {\n    useEffectOnce(() => {\n      const { queryResult, variables, handleUpdate } = props\n      return queryResult.subscribeToMore({\n        document: subscription,\n        variables,\n        updateQuery: (prev, { subscriptionData }) => {\n          if (!(subscriptionData && subscriptionData.data)) {\n            return prev\n          }\n          // @ts-ignore Bad typing of updateQuery using TQuery\n          return handleUpdate(subscriptionData.data, prev) || prev\n        },\n      })\n    })\n    return props.children\n  }\n  return GSubscription\n}\n","import React, { createElement, HTMLAttributes } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { CanMutate } from '../atoms/CanMutate'\nimport { CanQuery } from '../atoms/CanQuery'\n\ninterface IPageLayoutItemProps extends HTMLAttributes<HTMLElement> {\n  route?: string\n  component: React.ComponentType\n  canQuery?: string\n  canMutate?: string\n}\n\nexport const PageLayoutItem: React.SFC<IPageLayoutItemProps> = ({\n  route,\n  component,\n  canQuery,\n  canMutate,\n  ...props\n}) => {\n  let layoutItem = route ? (\n    <Link to={route}>{createElement(component)}</Link>\n  ) : (\n    createElement(component)\n  )\n\n  if (canQuery) {\n    layoutItem = <CanQuery queryName={canQuery}>{layoutItem}</CanQuery>\n  }\n  if (canMutate) {\n    layoutItem = <CanMutate mutationName={canMutate}>{layoutItem}</CanMutate>\n  }\n  return <div {...props}>{layoutItem}</div>\n}\n","import styled from 'styled-components'\n\nexport const LinkStyled = styled.a`\n  color: inherit;\n  text-decoration-color: rgba(0, 0, 0, 0.08);\n  &:hover {\n    text-decoration-color: rgba(0, 0, 0, 0.5);\n  }\n  &:visited {\n    text-decoration-color: rgba(0, 0, 0, 0.08);\n  }\n`\n","import { LocationDescriptor } from 'history'\nimport React from 'react'\nimport { Link, LinkProps, Route } from 'react-router-dom'\nimport resolvePathname from 'resolve-pathname'\n\ninterface IRelativeLinkProps extends LinkProps {\n  to: LocationDescriptor\n  from?: string\n}\n\nexport const RelativeLink: React.SFC<IRelativeLinkProps> = ({\n  to,\n  from,\n  ...linkProps\n}) => (\n  <Route\n    children={({ location }) => (\n      <Link\n        to={resolveLocation(to, from || `${location.pathname}/`)}\n        {...linkProps}\n      />\n    )}\n  />\n)\n\nexport function resolveLocation(to: LocationDescriptor, from: string) {\n  if (typeof to === 'string') {\n    return resolvePathname(to, from)\n  }\n  const resolved = resolvePathname(to.pathname || '', from)\n  return { ...to, pathname: resolved }\n}\n","import gql from 'graphql-tag'\n\nimport { AddressFragment, CustomerFragment } from '../../../graph/fragments'\n\nexport const OrderTickerFragment = gql`\n  fragment GOrderListTicker on Order {\n    id\n    createdAt\n    isPaidWithCard\n    deliverAt\n    deliverAtWorst\n    deliveredAt\n    companyBranch {\n      id\n      name\n      oldOrderThreshold\n    }\n    address {\n      ...GAddress\n    }\n    customer {\n      ...GCustomer\n    }\n    totalSum {\n      value\n    }\n  }\n  ${AddressFragment}\n  ${CustomerFragment}\n`\n","import moment from 'moment'\n\nconst cs = require('moment/locale/cs')\n\nmoment.updateLocale('cs', cs)\n\nexport default moment\n","import { CancelOutlined } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface ITimeBadgeProps {\n  minutes?: number\n  onClick?(): void\n  isFinished?: boolean\n  isCancelled?: boolean\n}\n\nconst TimeBadgeStyled = styled.div`\n  min-width: 1.5rem;\n  min-height: 1.5rem;\n  padding: 0.3rem;\n  border: 1px solid white;\n  border-radius: 4rem;\n  color: ${Colors.white};\n  text-align: center;\n  font-size: 1rem;\n  margin: 0;\n  vertical-align: middle;\n  font-family: 'Open Sans', sans-serif;\n`\n\nconst TimeBadgeUnknown = styled(TimeBadgeStyled)`\n  background: ${Colors.greyMiddle};\n  color: ${Colors.greyDarkest};\n`\nconst TimeBadgeInProgress = styled(TimeBadgeStyled)`\n  background: ${Colors.orange};\n`\nconst TimeBadgeBigTime = styled(TimeBadgeStyled)`\n  font-size: 0.8rem;\n  padding: 0.4rem 0.3rem 0.2rem 0.3rem;\n`\nconst TimeBadgeWarning = styled(TimeBadgeStyled)`\n  background: ${Colors.red};\n`\nconst TimeBadgeCompleted = styled(TimeBadgeStyled)`\n  background: ${Colors.green};\n`\nconst TimeBadgeCancelled = styled(TimeBadgeStyled)`\n  background: ${Colors.greyMiddle};\n  padding: 0.3rem 0.3rem 0 0.3rem;\n`\n\nexport const TimeBadge: React.SFC<ITimeBadgeProps> = ({\n  minutes = 0,\n  onClick,\n  isFinished = false,\n  isCancelled = false,\n}) => {\n  if (isCancelled) {\n    return (\n      <TimeBadgeCancelled onClick={onClick}>\n        <CancelOutlined />\n      </TimeBadgeCancelled>\n    )\n  }\n\n  let children = minutes.toString()\n  let container = TimeBadgeInProgress\n\n  if (Number.isNaN(minutes)) {\n    container = TimeBadgeUnknown\n    children = '?'\n  } else if (isFinished) {\n    container = TimeBadgeCompleted\n  } else if (minutes <= 20) {\n    container = TimeBadgeWarning\n    if (minutes < -99) {\n      children = '-'\n    }\n  } else if (minutes > 99) {\n    container = TimeBadgeBigTime\n  }\n\n  return React.createElement(container, { children })\n}\n","import raf from 'raf'\nimport { useEffect, useRef } from 'react'\n\nimport { useStateRef } from './useStateRef'\n\ninterface IOptions {\n  interval: number\n  enabled: boolean\n  getNow?(): number\n  nextTick?(onTick: () => void): number\n  cancelTick?(handle: number): void\n}\n\nexport const useTimer = ({\n  interval,\n  enabled,\n  getNow = Date.now,\n  nextTick = raf,\n  cancelTick = raf.cancel,\n}: IOptions) => {\n  const [getLastUpdate, setLastUpdate] = useStateRef(getNow)\n  const handleRef = useRef<number | null>()\n\n  useEffect(\n    () => {\n      const onFrame = () => {\n        const now = getNow()\n        const last = getLastUpdate()\n        const delta = now - last\n        if (delta >= interval) {\n          setLastUpdate(now)\n        }\n        loop()\n      }\n\n      const onStart = () => {\n        loop()\n      }\n\n      const onStop = () => {\n        if (handleRef.current) {\n          cancelTick(handleRef.current)\n          handleRef.current = null\n        }\n      }\n\n      const loop = () => {\n        if (enabled) {\n          handleRef.current = nextTick(onFrame)\n        } else {\n          onStop()\n        }\n      }\n\n      onStart()\n      return onStop\n    },\n    [interval, enabled],\n  )\n\n  return getLastUpdate()\n}\n","import { useRef, useState } from 'react'\n\nexport function useStateRef<T>(initialState: T | (() => T)) {\n  const [state, setState] = useState(initialState)\n  const ref = useRef<T>()\n  ref.current = state\n  const getValue = () => ref.current\n  return [getValue, setState] as [(() => T), ((value: T) => void)]\n}\n","import { differenceInMinutes } from 'date-fns'\nimport React from 'react'\n\nimport { TimeBadge } from '../../../atoms/TimeBadge'\nimport { DateTime } from '../../../graph/types'\nimport { useTimer } from '../../../hooks/useTimer'\n\ninterface IDeliveryTimeBadgeProps {\n  deliverAt: DateTime\n  deliveredAt: DateTime | null\n  isCancelled?: boolean\n  onClick?(): void\n}\n\nconst MINUTE = 60 * 1000\n\nexport const DeliveryTimeBadge: React.SFC<IDeliveryTimeBadgeProps> = ({\n  deliverAt,\n  deliveredAt,\n  isCancelled = false,\n  onClick,\n}) => {\n  const now = useTimer({ interval: MINUTE, enabled: !deliveredAt })\n  const minutes = differenceInMinutes(deliverAt, deliveredAt || now)\n  return (\n    <TimeBadge\n      minutes={minutes}\n      onClick={onClick}\n      isFinished={Boolean(deliveredAt)}\n      isCancelled={isCancelled}\n    />\n  )\n}\n","var now = require('performance-now'),\n    root = typeof window === 'undefined' ? global : window,\n    vendors = ['moz', 'webkit'],\n    suffix = 'AnimationFrame',\n    raf = root['request' + suffix],\n    caf = root['cancel' + suffix] || root['cancelRequest' + suffix];\n\nfor (var i = 0; !raf && i < vendors.length; i++) {\n  raf = root[vendors[i] + 'Request' + suffix];\n  caf = root[vendors[i] + 'Cancel' + suffix] || root[vendors[i] + 'CancelRequest' + suffix];\n} // Some versions of FF have rAF but not cAF\n\n\nif (!raf || !caf) {\n  var last = 0,\n      id = 0,\n      queue = [],\n      frameDuration = 1000 / 60;\n\n  raf = function raf(callback) {\n    if (queue.length === 0) {\n      var _now = now(),\n          next = Math.max(0, frameDuration - (_now - last));\n\n      last = next + _now;\n      setTimeout(function () {\n        var cp = queue.slice(0); // Clear queue here to prevent\n        // callbacks from appending listeners\n        // to the current frame's queue\n\n        queue.length = 0;\n\n        for (var i = 0; i < cp.length; i++) {\n          if (!cp[i].cancelled) {\n            try {\n              cp[i].callback(last);\n            } catch (e) {\n              setTimeout(function () {\n                throw e;\n              }, 0);\n            }\n          }\n        }\n      }, Math.round(next));\n    }\n\n    queue.push({\n      handle: ++id,\n      callback: callback,\n      cancelled: false\n    });\n    return id;\n  };\n\n  caf = function caf(handle) {\n    for (var i = 0; i < queue.length; i++) {\n      if (queue[i].handle === handle) {\n        queue[i].cancelled = true;\n      }\n    }\n  };\n}\n\nmodule.exports = function (fn) {\n  // Wrap in a new function to prevent\n  // `cancel` potentially being assigned\n  // to the native rAF function\n  return raf.call(root, fn);\n};\n\nmodule.exports.cancel = function () {\n  caf.apply(root, arguments);\n};\n\nmodule.exports.polyfill = function (object) {\n  if (!object) {\n    object = root;\n  }\n\n  object.requestAnimationFrame = raf;\n  object.cancelAnimationFrame = caf;\n};","import 'react-datepicker/dist/react-datepicker.css'\n\nimport React from 'react'\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker'\nimport { Field, FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport moment from '../helpers/moment'\n\ninterface IProps\n  extends Omit<ReactDatePickerProps, 'onChange' | 'selected' | 'minDate'> {\n  field: FieldType\n  defaultValue?: Date\n  inputWidth?: string\n  minDate?: Date\n}\n\nconst FormInputDateContainer = styled.div`\n  & .react-datepicker-wrapper,\n  .react-datepicker__input-container,\n  .react-datepicker__input-container input {\n    width: ${({ width = '6rem' }: { width?: string }) => width};\n  }\n`\nFormInputDateContainer.displayName = 'FormInputDateContainer'\n\nexport const FormInputDate: React.SFC<IProps> = ({\n  field,\n  defaultValue,\n  inputWidth,\n  minDate,\n  ...props\n}) => (\n  <FormInputDateContainer width={inputWidth}>\n    <Field\n      field={field}\n      defaultValue={defaultValue}\n      render={fieldApi => (\n        <DatePicker\n          selected={moment(fieldApi.value || new Date())}\n          onChange={date => fieldApi.setValue(date)}\n          minDate={minDate === undefined ? undefined : moment(minDate)}\n          {...props}\n        />\n      )}\n    />\n  </FormInputDateContainer>\n)\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\nexport const FlexRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  border-bottom: 1px solid ${Colors.greyMiddle};\n  padding: 0.1rem 0 0.1rem 0;\n`\n","import { Observer } from 'mobx-react'\nimport React from 'react'\n\ninterface IObserverWhenProps {\n  test(): boolean\n  renderSuccess(): ReactNode\n  renderFailure?(): ReactNode\n}\n\nexport const ObserverWhen: React.SFC<IObserverWhenProps> = ({\n  test,\n  renderSuccess,\n  renderFailure,\n}) => (\n  <Observer\n    render={() =>\n      test() ? renderSuccess() : renderFailure ? renderFailure() : null\n    }\n  />\n)\n","import React from 'react'\n\nimport { GAddress } from '../../../graph/types'\n\ninterface IAddressDisplayProps {\n  address: GAddress.Fragment | null\n}\n\nexport const AddressDisplay: React.SFC<IAddressDisplayProps> = ({ address }) =>\n  address ? (\n    <span>{`${address.street} ${address.houseNumber}, ${address.city}`}</span>\n  ) : (\n    <i>unknown</i>\n  )\n","import React from 'react'\n\nimport { GCustomer } from '../../../graph/types'\n\ninterface ICustomerNameProps {\n  customer: GCustomer.Fragment | null\n}\n\nexport const CustomerIdentity: React.SFC<ICustomerNameProps> = ({ customer }) =>\n  customer ? (\n    <span>{`${\n      customer.lastName\n        ? `${customer.firstName} ${customer.lastName}`\n        : customer.defaultPhone\n          ? customer.defaultPhone.phone\n          : ``\n    }`}</span>\n  ) : (\n    <i>unknown</i>\n  )\n","import { Trans } from '@lingui/react'\nimport Color from 'color'\nimport React from 'react'\nimport { Element } from 'react-scroll'\nimport styled from 'styled-components'\n\nimport { Price } from '../../../atoms/Price'\nimport { GOrderList, OrderStateCategoryEnum } from '../../../graph/types'\nimport { Colors, Radiuses } from '../../../styling'\nimport { AddressDisplay } from '../atoms/AddressDisplay'\nimport { CustomerIdentity } from '../atoms/CustomerIdentity'\nimport { DeliveryTimeBadge } from '../atoms/DeliveryTimeBadge'\n\ninterface IOrderTickerProps {\n  onClick(): void\n  order: GOrderList.Orders\n  showBranch: boolean\n}\n\nconst OrderTickerStyled = styled(Element)`\n  text-align: left;\n  cursor: pointer;\n  &:hover {\n    background-color: ${Color(Colors.turquoise)\n      .alpha(0.05)\n      .string()};\n  }\n  &:active {\n    background-color: ${Color(Colors.turquoise)\n      .alpha(0.2)\n      .string()};\n  }\n`\n\nconst OrderTickerMainContentStyled = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  padding: 0.4rem;\n`\n\nconst DeliveryTimeBadgeContainerStyled = styled.div`\n  flex: 0 0 2rem;\n`\nconst AddressDisplayContainerStyled = styled.div`\n  flex: 1 0;\n  padding: 0 0 0 0.5rem;\n`\nconst CustomerIdentityContainerStyled = styled.div`\n  flex: 1 0;\n  padding: 0 0 0 0.5rem;\n`\nconst PriceContainerStyled = styled.div`\n  flex: 0 0 3.5rem;\n  text-align: right;\n  position: relative;\n`\nconst PaidMarkStyled = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 0.1rem;\n    right: -0.3rem;\n    left: 0.9rem;\n    bottom: 0.3rem;\n    border-top: 2px solid ${Colors.orange};\n    transform: rotate(13deg);\n    transform-origin: 0% 0%;\n    opacity: 0.7;\n  }\n`\nconst PaidTextStyled = styled.div`\n  color: ${Colors.orange};\n`\n\nconst ToBranchContainerStyled = styled.div`\n  padding: 0.3rem 0.6rem;\n  display: inline-block;\n  border-top-left-radius: ${Radiuses.Card};\n  background-color: ${Colors.green};\n  color: ${Colors.white};\n`\n\nexport const OrderTicker: React.SFC<IOrderTickerProps> = ({\n  order,\n  showBranch,\n  onClick,\n}) => (\n  <OrderTickerStyled onClick={onClick} name={`order-${order.id}`}>\n    {showBranch && (\n      <ToBranchContainerStyled>\n        {order.companyBranch.name}\n      </ToBranchContainerStyled>\n    )}\n\n    <OrderTickerMainContentStyled>\n      <DeliveryTimeBadgeContainerStyled>\n        <DeliveryTimeBadge\n          deliverAt={order.deliverAt}\n          deliveredAt={order.deliveredAt}\n          isCancelled={\n            order.orderStateCategory === OrderStateCategoryEnum.CANCEL\n          }\n        />\n      </DeliveryTimeBadgeContainerStyled>\n\n      <AddressDisplayContainerStyled>\n        <AddressDisplay address={order.address} />\n      </AddressDisplayContainerStyled>\n\n      <CustomerIdentityContainerStyled>\n        <CustomerIdentity customer={order.customer} />\n      </CustomerIdentityContainerStyled>\n\n      <PriceContainerStyled>\n        <Price price={order.totalSum.value} />\n        {order.isPaidWithCard && (\n          <>\n            <PaidMarkStyled />\n            <PaidTextStyled>\n              <Trans>Paid</Trans>\n            </PaidTextStyled>\n          </>\n        )}\n      </PriceContainerStyled>\n    </OrderTickerMainContentStyled>\n  </OrderTickerStyled>\n)\n","import React from 'react'\n\nimport { HorizontalSeparator } from '../../../atoms/HorizontalSeparator'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { LinkStyled } from '../../../atoms/LinkStyled'\nimport { GEmail, GPhone } from '../../../graph/types'\n\ninterface IContactLinesProps {\n  phones: GPhone.Fragment[]\n  emails: GEmail.Fragment[]\n}\n\ntype Contact = {\n  icon: string\n  isMail: boolean\n  value: string\n} & (GPhone.Fragment | GEmail.Fragment)\n\nexport const ContactLines: React.SFC<IContactLinesProps> = ({\n  phones,\n  emails,\n}) => {\n  const renderClickableLink = (contact: Contact) =>\n    contact.isMail ? (\n      <LinkStyled href={`mailto:${contact.value}`}>{contact.value}</LinkStyled>\n    ) : (\n      <LinkStyled href={`tel:${contact.value.replace('/ /g', '')}`}>\n        {contact.value}\n      </LinkStyled>\n    )\n\n  const renderContact = (contact: Contact) => (\n    <IconLine icon={contact.icon} key={contact.value} labelMargin=\"0\">\n      <div title={contact.description || ''}>\n        {renderClickableLink(contact)}\n      </div>\n    </IconLine>\n  )\n  return (\n    <>\n      {(phones.length > 0 || emails.length > 0) && <HorizontalSeparator />}\n      {phones.map(phone =>\n        renderContact({\n          icon: 'phone',\n          isMail: false,\n          value: phone.phone,\n          ...phone,\n        }),\n      )}\n      {emails.map(email =>\n        renderContact({\n          icon: 'mail_outline',\n          isMail: true,\n          value: email.email,\n          ...email,\n        }),\n      )}\n    </>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { HorizontalSeparator } from '../../../atoms/HorizontalSeparator'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\nimport { Colors } from '../../../styling'\n\ninterface INoteLineProps {\n  note?: string | null\n  previousNote?: string | null\n}\n\nconst CurrentNoteStyled = styled.span`\n  color: ${Colors.orange};\n`\nconst PreviousNoteStyled = styled.span`\n  color: ${Colors.greyDark};\n  margin-left: 0.5rem;\n`\n\nexport const NoteLine: React.SFC<INoteLineProps> = ({ note, previousNote }) =>\n  note || previousNote ? (\n    <>\n      <HorizontalSeparator />\n      <IconLine icon=\"note\" labelMargin=\"0\">\n        <CurrentNoteStyled>\n          {note || i18n.t`Without note`.toLocaleLowerCase()}\n        </CurrentNoteStyled>\n        <PreviousNoteStyled>{previousNote}</PreviousNoteStyled>\n      </IconLine>\n    </>\n  ) : null\n","import { Plural, SelectOrdinal, Trans } from '@lingui/react'\nimport React from 'react'\n\ninterface IProps {\n  current: number\n  total: number\n}\n\nexport const OrderCountLine: React.SFC<IProps> = ({ current, total }) => (\n  <Trans>\n    It's customer's{' '}\n    <SelectOrdinal value={current} one=\"#st\" two=\"#nd\" few=\"#rd\" other=\"#th\" />{' '}\n    order <Plural value={total} one=\"\" other=\"from total of # orders\" />\n  </Trans>\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Price } from '../../../atoms/Price'\nimport { Colors } from '../../../styling'\n\ninterface IOrderWareLineProps {\n  code?: string\n  label: string\n  price: number\n}\n\nconst OrderWareLineWrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-left: 3rem;\n`\nconst CodeContainerStyled = styled.div`\n  flex: 0 0 5rem;\n`\nconst NameContainerStyled = styled.div`\n  flex: 1 0;\n  color: ${Colors.greyMiddle};\n`\nconst PriceContainerStyled = styled.div`\n  flex: 0 0 4.5rem;\n  text-align: right;\n  color: ${Colors.greyMiddle};\n`\n\nexport const OrderWareLine: React.SFC<IOrderWareLineProps> = ({\n  code,\n  label,\n  price,\n}) => (\n  <OrderWareLineWrap>\n    <CodeContainerStyled>{code}</CodeContainerStyled>\n\n    <NameContainerStyled>{label}</NameContainerStyled>\n    <PriceContainerStyled>\n      <Price price={price} />\n    </PriceContainerStyled>\n  </OrderWareLineWrap>\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { GOrderDetail } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { OrderWareLine } from './OrderWareLine'\n\ninterface IProps {\n  order: GOrderDetail.Order\n}\n\nconst OrderCartTotalsContainer = styled.div`\n  margin: 0 0 0 auto;\n  width: 20rem;\n  text-align: right;\n`\n\nexport const OrderDetailTotals: React.SFC<IProps> = ({ order }) => (\n  <OrderCartTotalsContainer>\n    <OrderWareLine\n      label={i18n.t`Transport fee`}\n      price={order.transportFee.value}\n    />\n    <OrderWareLine\n      label={i18n.t`Covers price`}\n      price={order.coverPrice.value}\n    />\n    <OrderWareLine\n      label={i18n.t`Discount total`}\n      price={order.totalDiscount.value * -1}\n    />\n    <b>\n      <OrderWareLine label={i18n.t`Total price`} price={order.totalSum.value} />\n    </b>\n  </OrderCartTotalsContainer>\n)\n","import React from 'react'\n\nimport { HorizontalSeparator } from '../../../atoms/HorizontalSeparator'\nimport { IconLine } from '../../../atoms/IconLine'\n\ninterface IOrderRuleLinesProps {\n  rules: string[]\n}\n\nexport const OrderRuleLines: React.SFC<IOrderRuleLinesProps> = ({\n  rules,\n  children,\n}) =>\n  rules.length > 0 || children ? (\n    <>\n      <HorizontalSeparator />\n      <IconLine icon=\"announcement\" labelMargin=\"0\">\n        {children}\n        <br />\n        {rules.join(', ')}\n      </IconLine>\n    </>\n  ) : null\n","import { Trans } from '@lingui/react'\nimport { Timelapse } from '@material-ui/icons'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { GOrderDetail } from '../../../graph/types'\nimport { formatTimeWithoutTodayDate } from '../../../helpers/formats'\n\ninterface IProps {\n  order: GOrderDetail.Order\n}\n\nconst LabelStyled = styled.i`\n  padding-left: 1rem;\n  font-size: 0.8rem;\n`\n\nexport const OrderStats: React.SFC<IProps> = ({ order }) => {\n  const stats: ReactNode[] = []\n  if (order.deliverAt) {\n    stats.push(\n      <div key=\"deliverAt\">\n        {formatTimeWithoutTodayDate(order.deliverAt)}\n        <LabelStyled>\n          <Trans>Deliver on time</Trans>\n        </LabelStyled>\n      </div>,\n    )\n  }\n  if (order.driver) {\n    const { firstName, lastName } = order.driver.user\n    stats.push(\n      <div key=\"driver\">\n        {`${firstName} ${lastName}`}\n        <LabelStyled>\n          <Trans>Driver</Trans>\n        </LabelStyled>\n      </div>,\n    )\n  }\n  if (stats.length === 0) {\n    return null\n  }\n  return (\n    <IconLine icon={Timelapse} labelMargin=\"0\">\n      {stats}\n    </IconLine>\n  )\n}\n","import { i18nMark } from '@lingui/react'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { GOrderDetail, OrderStateCategoryEnum } from '../../../graph/types'\nimport { formatTimeWithoutTodayDate } from '../../../helpers/formats'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {\n  orderTiming: GOrderDetail.OrderTiming[]\n}\n\nconst LabelStyled = styled.i`\n  padding-left: 1rem;\n  font-size: 0.8rem;\n`\n\nconst labelMap = {\n  [OrderStateCategoryEnum.NEW_ORDERS]: i18nMark('Created'),\n  [OrderStateCategoryEnum.PREPARING]: i18nMark('Preparing'),\n  [OrderStateCategoryEnum.READY_TO_DELIVER]: i18nMark('Ready to deliver'),\n  [OrderStateCategoryEnum.ON_WAY]: i18nMark('On way'),\n  [OrderStateCategoryEnum.FINISHED]: i18nMark('Finished'),\n}\n\nexport const OrderTimeLine: React.SFC<IProps> = ({ orderTiming }) => (\n  <IconLine icon=\"access_time\" labelMargin=\"0\">\n    {RM.reject(\n      ({ createdAt, orderStateCategory }) =>\n        createdAt === null || !labelMap[orderStateCategory],\n      orderTiming,\n    ).map(timing => (\n      <div key={timing.orderStateCategory}>\n        {formatTimeWithoutTodayDate(timing.createdAt)}\n        <LabelStyled>{i18n._(labelMap[timing.orderStateCategory])}</LabelStyled>\n      </div>\n    ))}\n  </IconLine>\n)\n","import React, { Fragment } from 'react'\n\nimport { GOrderDetail } from '../../../graph/types'\nimport { OrderWareLine } from './OrderWareLine'\n\ninterface IOrderWareListProps {\n  orderWares: GOrderDetail.Items[]\n}\n\nexport const OrderWareList: React.SFC<IOrderWareListProps> = ({\n  orderWares,\n}) => {\n  const renderWare = (orderWare: GOrderDetail.Items) => (\n    <Fragment key={orderWare.id}>\n      <OrderWareLine\n        code={orderWare.recipe.code}\n        label={orderWare.recipe.nameLabel}\n        price={orderWare.price.value}\n      />\n      <>\n        {orderWare.sidedishes.map(sidedish => (\n          <OrderWareLine\n            key={sidedish.id}\n            code={`+${sidedish.recipe.code}`}\n            label={sidedish.recipe.nameLabel}\n            price={sidedish.price.value}\n          />\n        ))}\n      </>\n    </Fragment>\n  )\n  return <div>{orderWares.map(renderWare)}</div>\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport {\n  EmailFragment,\n  PhoneFragment,\n  PriceFragment,\n} from '../../../graph/fragments'\nimport { GOrderDetail } from '../../../graph/types'\nimport { OrderDriverFragment } from '../molecules/OrderStateDeliver.graphql'\n\nexport const QueryOrderDetail = buildQuery<\n  GOrderDetail.Query,\n  GOrderDetail.Variables\n>(gql`\n  query GOrderDetail($id: ID!) {\n    order(id: $id) {\n      id\n      createdAt\n      deliverAt\n      companyBranch {\n        id\n      }\n      customer {\n        emails {\n          ...GEmail\n        }\n        phones {\n          ...GPhone\n        }\n      }\n      customerOrdersCountCurrent\n      customerOrdersCountTotal\n      note\n      previousNote\n      allAppliedRules\n      items {\n        ...GOrderDetailWare\n        sidedishes: sideDishes {\n          ...GOrderDetailWare\n        }\n      }\n      totalSum {\n        ...GPrice\n      }\n      transportFee {\n        ...GPrice\n      }\n      coverPrice {\n        ...GPrice\n      }\n      totalDiscount {\n        ...GPrice\n      }\n      orderTiming: orderStateCategoryRelations {\n        createdAt\n        orderStateCategory\n      }\n      ...GOrderDriver\n    }\n  }\n\n  fragment GOrderDetailWare on OrderRecipe {\n    id\n    recipe {\n      id\n      code\n      nameLabel\n    }\n    price {\n      ...GPrice\n    }\n  }\n  ${PriceFragment}\n  ${EmailFragment}\n  ${PhoneFragment}\n  ${OrderDriverFragment}\n`)\n","import { i18nMark } from '@lingui/react'\nimport React from 'react'\n\nimport { OrderStateEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { TOrderStateModel } from '../models/OrderStateModel'\n\ninterface IProps {\n  orderId: ID\n  nextState: OrderStateEnum\n  stateModel: TOrderStateModel\n}\n\nconst stateLabels = {\n  [OrderStateEnum.ACCEPTED]: i18nMark('Accept order'),\n  [OrderStateEnum.FINISHED]: i18nMark('Finish order'),\n}\n\nexport const OrderStateButton: React.SFC<IProps> = ({\n  orderId,\n  nextState,\n  stateModel,\n}) => (\n  <TouchButton\n    text={i18n._(stateLabels[nextState])}\n    width=\"7.375rem\"\n    onClick={() => {\n      stateModel.updateOrderState(orderId, nextState)\n    }}\n  />\n)\n","import React from 'react'\nimport { components } from 'react-select'\nimport { StylesConfig } from 'react-select/lib/styles'\nimport styled from 'styled-components'\n\nimport { Icon } from '../../../atoms/Icon'\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { GDriver } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport { Colors, Radiuses, Spacing } from '../../../styling'\n\ntype TDriver = GDriver.Fragment\n\ninterface IProps {\n  drivers: TDriver[]\n  selectedDriver: Maybe<TDriver>\n  isLoading: boolean\n  onSelect(driver: TDriver): void\n  onClear(): void\n  onReload(): void\n}\n\nconst DriverName = styled.div`\n  margin: 0.1rem 0 0rem 0.2rem;\n  display: inline-block;\n  vertical-align: top;\n  font-size: 1.25rem;\n`\n\nconst backgroundColor = {\n  background: Colors.greyMiddle,\n}\nconst textColor = { color: Colors.white }\n\nconst styles: StylesConfig = {\n  control: base => ({\n    ...base,\n    ...backgroundColor,\n    ...textColor,\n    height: Spacing.ButtonHeight,\n    borderWidth: 0,\n    borderRadius: Radiuses.Button,\n    margin: 0,\n  }),\n  menu: base => ({\n    ...base,\n    ...backgroundColor,\n  }),\n  valueContainer: base => ({\n    ...base,\n    ...textColor,\n  }),\n  singleValue: base => ({\n    ...base,\n    ...textColor,\n  }),\n  placeholder: base => ({\n    ...base,\n    ...textColor,\n    fontSize: '1.2rem',\n  }),\n}\n\nexport const OrderDriverSelect: React.SFC<IProps> = ({\n  drivers,\n  selectedDriver,\n  isLoading,\n  onSelect,\n  onClear,\n  onReload,\n}) => (\n  <SelectControl<TDriver>\n    options={drivers}\n    value={selectedDriver}\n    getOptionValue={RM.prop('id')}\n    isLoading={isLoading}\n    isSearchable={true}\n    isClearable={true}\n    placeholder=\"Deliver order\"\n    width={16}\n    styles={styles}\n    noOptionsMessage={() => i18n.t`No drivers available`}\n    onChange={driver =>\n      driver === null ? onClear() : onSelect(driver as TDriver)\n    }\n    onMenuOpen={onReload}\n    components={{\n      ValueContainer: props => (\n        <>\n          <Icon iconName=\"directions_car\" fontSize={2} color={Colors.white} />\n          <components.ValueContainer {...props} />\n        </>\n      ),\n      DropdownIndicator: () => null,\n    }}\n    formatOptionLabel={driver => (\n      <DriverName>{`${driver.firstName} ${driver.lastName}`}</DriverName>\n    )}\n  />\n)\n","import React from 'react'\n\nimport { OrderStateCategoryEnum } from '../../../graph/types'\nimport { OrderDriverSelect } from '../atoms/OrderDriverSelect'\nimport { TOrderStateModel } from '../models/OrderStateModel'\nimport { QueryDriverSelection } from './OrderStateDeliver.graphql'\n\ninterface IProps {\n  branchId: ID\n  orderId: ID\n  orderStateCategory: OrderStateCategoryEnum\n  stateModel: TOrderStateModel\n}\n\nexport const OrderStateDeliver: React.SFC<IProps> = ({\n  branchId,\n  orderId,\n  orderStateCategory,\n  stateModel,\n}) => (\n  <QueryDriverSelection\n    fetchPolicy=\"network-only\"\n    variables={{ branchId: branchId, orderId }}\n    render={(\n      { drivers, order: { driver: orderDriver } },\n      { loading, refetch },\n    ) => (\n      <OrderDriverSelect\n        drivers={drivers}\n        selectedDriver={orderDriver ? orderDriver.user : null}\n        isLoading={loading}\n        onReload={refetch}\n        onClear={() => {\n          if (orderDriver) stateModel.removeDriver(orderDriver.id)\n        }}\n        onSelect={driver => {\n          stateModel.selectDriver(orderId, driver.id)\n          if (orderStateCategory !== OrderStateCategoryEnum.ON_WAY) {\n            stateModel.deliverOrder(orderId)\n          }\n        }}\n      />\n    )}\n  />\n)\n","import React, { Children } from 'react'\nimport styled from 'styled-components'\n\nimport { Spacing } from '../../../styling'\n\ninterface IProps {}\n\nconst OrderStateFlowContainerWrapper = styled.div`\n  margin: 0 0 0 auto;\n  text-align: right;\n  height: ${Spacing.ButtonHeight};\n`\n\nconst Control = styled.div`\n  margin: 0 0 0 0.5rem;\n  display: inline-block;\n  vertical-align: bottom;\n  text-align: left;\n  height: 100%;\n`\n\nexport const OrderStateFlowContainer: React.SFC<IProps> = ({ children }) => (\n  <OrderStateFlowContainerWrapper>\n    {Children.map(children, (child, idx) => (\n      <Control key={idx}>{child}</Control>\n    ))}\n  </OrderStateFlowContainerWrapper>\n)\n","import { Trans } from '@lingui/react'\nimport { Dialog, DialogTitle } from '@material-ui/core'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\nimport { TOrderStateModel } from '../models/OrderStateModel'\n\ninterface IProps {\n  orderId: ID\n  stateModel: TOrderStateModel\n}\n\ninterface IState {\n  dialogOpen: boolean\n}\n\nconst minutesOption = [20, 30, 45, 60, 75, 90, 105, 120]\n\nconst MinutesContainer = styled.div`\n  display: flex;\n  justify-content: 'center';\n  flex-wrap: 'wrap';\n  font-size: 2rem;\n`\nconst MinutesItem = styled.div`\n  margin: 1rem 1rem 0 0;\n`\n\nexport class OrderStateTimeNotification extends React.Component<\n  IProps,\n  IState\n> {\n  state = { dialogOpen: false }\n  openDialog = () => {\n    this.setState({ dialogOpen: true })\n  }\n  closeDialog = () => {\n    this.setState({ dialogOpen: false })\n  }\n  render() {\n    const { orderId, stateModel } = this.props\n    return (\n      <>\n        <TouchButton iconName=\"schedule\" onClick={this.openDialog} />\n        <Dialog open={this.state.dialogOpen} onClose={this.closeDialog}>\n          <DialogTitle>\n            <Trans>\n              Send expected time of delivery to customer (in minutes)\n            </Trans>\n            <MinutesContainer>\n              {minutesOption.map(minutes => (\n                <MinutesItem key={minutes}>\n                  <TouchButton\n                    onClick={() => {\n                      stateModel.sendTimeNotification(orderId, minutes)\n                      this.closeDialog()\n                    }}\n                    color={Colors.green}\n                  >\n                    {minutes}\n                  </TouchButton>\n                </MinutesItem>\n              ))}\n            </MinutesContainer>\n          </DialogTitle>\n        </Dialog>\n      </>\n    )\n  }\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GOrderState } from '../../../graph/types'\nimport { OrderStateCategoryFragment } from '../models/OrderStateModel.graphql'\n\nexport const QueryOrderState = buildQuery<\n  GOrderState.Query,\n  GOrderState.Variables\n>(gql`\n  query GOrderState($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      deliveryType {\n        enum\n      }\n      ...GOrderStateCategory\n    }\n    companyBranch(id: $branchId) {\n      id\n      allowedCategories\n    }\n  }\n  ${OrderStateCategoryFragment}\n`)\n","import React from 'react'\nimport { VError } from 'verror'\n\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport {\n  DeliveryTypeEnum,\n  OrderStateCategoryEnum,\n  OrderStateEnum,\n} from '../../../graph/types'\nimport { reportError } from '../../../helpers/sentry'\nimport { TOrderStateModel } from '../models/OrderStateModel'\nimport { OrderStateButton } from '../molecules/OrderStateButton'\nimport { OrderStateDeliver } from '../molecules/OrderStateDeliver'\nimport { OrderStateFlowContainer } from '../molecules/OrderStateFlowContainer'\nimport { OrderStateTimeNotification } from '../molecules/OrderStateTimeNotification'\nimport { getOrderState } from './OrderListLoader'\nimport { QueryOrderState } from './OrderStateFlow.graphql'\n\ninterface IProps {\n  orderId: ID\n  branchId: ID\n}\n\ninterface IStateProps extends IProps {\n  stateModel: TOrderStateModel\n  orderStateCategory: OrderStateCategoryEnum\n  canDeliver: boolean\n}\n\nconst OrderStateNewOrder: React.SFC<IStateProps> = props => (\n  <OrderStateFlowContainer>\n    <OrderStateTimeNotification {...props} />\n    <OrderStateButton nextState={OrderStateEnum.ACCEPTED} {...props} />\n  </OrderStateFlowContainer>\n)\n\nconst OrderStateAcceptedOrder: React.SFC<IStateProps> = props => (\n  <OrderStateFlowContainer>\n    <OrderStateTimeNotification {...props} />\n    {props.canDeliver ? (\n      <OrderStateDeliver {...props} />\n    ) : (\n      <OrderStateButton nextState={OrderStateEnum.FINISHED} {...props} />\n    )}\n  </OrderStateFlowContainer>\n)\n\nconst OrderStateOnWayOrder: React.SFC<IStateProps> = props => (\n  <OrderStateFlowContainer>\n    <OrderStateTimeNotification {...props} />\n    <OrderStateDeliver {...props} />\n    <OrderStateButton nextState={OrderStateEnum.FINISHED} {...props} />\n  </OrderStateFlowContainer>\n)\n\nexport const OrderStateFlow: React.SFC<IProps> = ({ orderId, branchId }) => (\n  <WithRoot\n    observe={false}\n    render={({ order: { state: stateModel } }) => (\n      <QueryOrderState\n        variables={{ orderId, branchId }}\n        render={({ order, companyBranch: { allowedCategories } }) => {\n          const orderStateCategory = getOrderState(order)\n          if (!orderStateCategory) {\n            reportError(new VError('Order %s has got no state categories'))\n            return null\n          }\n          const canDeliver =\n            allowedCategories.includes(OrderStateCategoryEnum.ON_WAY) &&\n            order.deliveryType != null &&\n            order.deliveryType.enum !== DeliveryTypeEnum.PICKUP\n\n          const stateProps: IStateProps = {\n            orderId,\n            branchId,\n            stateModel,\n            orderStateCategory,\n            canDeliver,\n          }\n          switch (orderStateCategory) {\n            case OrderStateCategoryEnum.NEW_ORDERS:\n              return <OrderStateNewOrder {...stateProps} />\n            case OrderStateCategoryEnum.PREPARING:\n              return <OrderStateAcceptedOrder {...stateProps} />\n            case OrderStateCategoryEnum.ON_WAY:\n              return <OrderStateOnWayOrder {...stateProps} />\n            default:\n              return null\n          }\n        }}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { HorizontalSeparator } from '../../../atoms/HorizontalSeparator'\nimport { ContactLines } from '../molecules/ContactLines'\nimport { NoteLine } from '../molecules/NoteLine'\nimport { OrderCountLine } from '../molecules/OrderCountLine'\nimport { OrderDetailTotals } from '../molecules/OrderDetailTotals'\nimport { OrderRuleLines } from '../molecules/OrderRuleLines'\nimport { OrderStats } from '../molecules/OrderStats'\nimport { OrderTimeLine } from '../molecules/OrderTimeLine'\nimport { OrderWareList } from '../molecules/OrderWareList'\nimport { QueryOrderDetail } from './OrderDetail.graphql'\nimport { OrderStateFlow } from './OrderStateFlow'\n\ninterface IOrderDetailProps {\n  orderId: string\n}\n\nconst OrderDetailContainerStyled = styled.div`\n  padding: 0 0.5rem 0.5rem 1.1rem;\n`\n\nexport const OrderDetail: React.SFC<IOrderDetailProps> = ({ orderId }) => (\n  <QueryOrderDetail\n    variables={{ id: orderId }}\n    fetchPolicy=\"cache-and-network\"\n    render={({ order }) => (\n      <>\n        <OrderDetailContainerStyled>\n          <HorizontalSeparator />\n          <OrderWareList orderWares={order.items} />\n          <OrderDetailTotals order={order} />\n          <OrderRuleLines rules={order.allAppliedRules}>\n            <OrderCountLine\n              current={order.customerOrdersCountCurrent}\n              total={order.customerOrdersCountTotal}\n            />\n          </OrderRuleLines>\n          <ContactLines\n            phones={order.customer.phones}\n            emails={order.customer.emails}\n          />\n          <NoteLine note={order.note} previousNote={order.previousNote} />\n          <HorizontalSeparator />\n          <OrderTimeLine orderTiming={order.orderTiming} />\n          <OrderStats order={order} />\n        </OrderDetailContainerStyled>\n        <OrderStateFlow orderId={orderId} branchId={order.companyBranch.id} />\n      </>\n    )}\n  />\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { ObserverWhen } from '../../../atoms/ObserverWhen'\nimport { GOrderList } from '../../../graph/types'\nimport { Colors, Radiuses } from '../../../styling'\nimport { TOrderListModel } from '../models/OrderListModel'\nimport { OrderTicker } from '../molecules/OrderTicker'\nimport { OrderDetail } from '../organisms/OrderDetail'\n\ninterface IProps {\n  order: GOrderList.Orders\n  listModel: TOrderListModel\n}\n\nexport const OrderBoxStyled = styled.div`\n  background-color: ${Colors.white};\n  color: ${Colors.greyDarkest};\n  border-radius: ${Radiuses.Card};\n  margin-bottom: 0.5rem;\n  position: relative;\n`\n\nexport const OrderBox: React.SFC<IProps> = ({ order, listModel }) => (\n  <OrderBoxStyled id={`order-${order.id}`}>\n    <OrderTicker\n      order={order}\n      showBranch={!listModel.isSingleBranchSelected}\n      onClick={() => listModel.toggleOrderDetail(order)}\n    />\n    <ObserverWhen\n      test={() => listModel.isOrderDetailOpen(order.id)}\n      renderSuccess={() => <OrderDetail orderId={order.id} />}\n    />\n  </OrderBoxStyled>\n)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRow } from '../../../atoms/FlexRow'\nimport { Loading } from '../../../atoms/Loading'\nimport { RelativeLink } from '../../../atoms/RelativeLink'\nimport { formatDateISO } from '../../../helpers/formats'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Spacing } from '../../../styling'\nimport { IClosureHistoryLoaderProps } from '../organisms/ClosureHistoryLoader'\n\ninterface IProps extends IClosureHistoryLoaderProps {}\n\nexport const ClosureHistoryTable: React.SFC<IProps> = ({\n  isLoading,\n  noFilter,\n  reports,\n}) => {\n  if (isLoading) {\n    return (\n      <CardListTitle>\n        <Loading />\n      </CardListTitle>\n    )\n  }\n  if (noFilter) {\n    return (\n      <CardListTitle>\n        <Trans>Select a branch</Trans>\n      </CardListTitle>\n    )\n  }\n  if (!reports || reports.length === 0) {\n    return (\n      <CardListTitle>\n        <Trans>No closures found</Trans>\n      </CardListTitle>\n    )\n  }\n  return (\n    <>\n      {reports.map(report => (\n        <FlexRow key={report.id}>\n          <FlexColumn>\n            <RelativeLink to={`../${report.id}`}>\n              <TouchButton\n                iconName=\"mode_edit\"\n                width={Spacing.ButtonHeight}\n                height={Spacing.ButtonHeight}\n              />\n            </RelativeLink>\n            {`[${report.reportSequence}] ${formatDateISO(\n              report.reportDatetime,\n            )}`}\n          </FlexColumn>\n        </FlexRow>\n      ))}\n    </>\n  )\n}\n","import React from 'react'\nimport { Form } from 'react-form'\n\nimport { Card } from '../../../atoms/Card'\nimport { FormInputDate } from '../../../atoms/FormInputDate'\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { CompanyBranchPicker } from '../../../organisms/CompanyBranchPicker'\n\ninterface IProps {}\n\nexport const StatisticsFilter: React.SFC<IProps> = props => (\n  <WithRoot\n    render={({ statistics }) => (\n      <Card>\n        <CompanyBranchPicker\n          selectedBranches={statistics.branches}\n          onSelectionChange={([branch]) => statistics.setBranchFilter(branch)}\n          onSelectionClear={statistics.clearBranchFilter}\n        />\n\n        <Form onChange={statistics.submitFilter}>\n          <FormInputDate field=\"dateFrom\" defaultValue={statistics.dateFrom} />\n          <FormInputDate field=\"dateTo\" defaultValue={statistics.dateTo} />\n        </Form>\n      </Card>\n    )}\n  />\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GClosureHistory } from '../../../graph/types'\n\nconst ClosureHistoryQuery = gql`\n  query GClosureHistory($branchId: ID!, $dateFrom: Date!, $dateTo: Date!) {\n    financialReports(\n      companyBranchId: $branchId\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n    ) {\n      id\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport const QueryClosureHistory = buildQuery<\n  GClosureHistory.Query,\n  GClosureHistory.Variables\n>(ClosureHistoryQuery)\n","import { observer } from 'mobx-react'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { GClosureHistory } from '../../../graph/types'\nimport { formatDateISO } from '../../../helpers/formats'\nimport { QueryClosureHistory } from './ClosureHistoryLoader.graphql'\n\nexport interface IClosureHistoryLoaderProps {\n  isLoading: boolean\n  noFilter: boolean\n  reports?: GClosureHistory.FinancialReports[]\n}\n\ninterface IProps {\n  children(props: IClosureHistoryLoaderProps): ReactNode\n}\n\nexport const ClosureHistoryLoader: React.SFC<IProps> = observer(\n  ({ children }) => {\n    const { statistics } = useRoot()\n    if (!statistics.isSingleBranchSelected) {\n      return children({ isLoading: false, noFilter: true })\n    }\n    return (\n      <QueryClosureHistory\n        fetchPolicy=\"cache-and-network\"\n        variables={{\n          branchId: statistics.singleBranchFilter,\n          dateFrom: formatDateISO(statistics.dateFrom),\n          dateTo: formatDateISO(statistics.dateTo),\n        }}\n        renderLoading={false}\n        render={({ financialReports }, { loading }) =>\n          children({\n            noFilter: false,\n            isLoading: loading,\n            reports: financialReports,\n          })\n        }\n      />\n    )\n  },\n)\n","import React from 'react'\n\nimport { Card } from '../../../atoms/Card'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { ClosureHistoryTable } from '../molecules/ClosureHistoryTable'\nimport { StatisticsFilter } from '../molecules/StatisticsFilter'\nimport { ClosureHistoryLoader } from '../organisms/ClosureHistoryLoader'\n\ninterface IProps {}\n\nexport const ClosureHistoryPage: React.SFC<IProps> = props => (\n  <ClosureHistoryLoader>\n    {loaderProps => (\n      <FullPageLayout pageTitle={i18n.t`Closure history`} useBackButton={true}>\n        <StatisticsFilter />\n        <Card>\n          <ClosureHistoryTable {...loaderProps} />\n        </Card>\n      </FullPageLayout>\n    )}\n  </ClosureHistoryLoader>\n)\n","import React, { MouseEvent } from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nexport interface IProps {\n  onClick?(e: MouseEvent<HTMLButtonElement>): void\n}\n\nexport const ClosureSubmitButton: React.SFC<IProps> = props => (\n  <TouchButton\n    text={i18n.t`Create closure`}\n    color={Colors.green}\n    width=\"12rem\"\n    onClick={props.onClick}\n    {...props}\n  />\n)\n","import { i18n } from '@lingui/core'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { CanQuery } from '../../../atoms/CanQuery'\nimport { Card } from '../../../atoms/Card'\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { CompanyBranchPicker } from '../../../organisms/CompanyBranchPicker'\nimport { Colors, Spacing } from '../../../styling'\nimport { ClosureSubmitButton } from './ClosureSubmitButton'\n\ninterface IProps {\n  isShowingHistory: boolean\n}\n\nconst ButtonToRight = styled(TouchButton)`\n  float: right;\n`\n\nexport const ClosureStatisticsFilter: React.SFC<IProps> = ({\n  isShowingHistory,\n}) => (\n  <WithRoot\n    render={({ statistics }) => (\n      <Card>\n        <CompanyBranchPicker\n          selectedBranches={statistics.branches}\n          onSelectionChange={([branch]) => statistics.setBranchFilter(branch)}\n          onSelectionClear={statistics.clearBranchFilter}\n          isClearable={false}\n        />\n        <CanMutate mutationName=\"createFinancialReport\">\n          <br />\n          <ClosureSubmitButton\n            onClick={() => {\n              statistics.createClosure()\n            }}\n          />\n        </CanMutate>\n        <CanQuery queryName=\"financialReports\">\n          <Link to=\"/overview/closure/history\">\n            <ButtonToRight\n              text={i18n.t`Closure history`}\n              iconName=\"assignment\"\n              iconSize={2.5}\n              textNextToIcon={true}\n              color={Colors.greyDark}\n              width=\"15rem\"\n              height={Spacing.ButtonHeight}\n            />\n          </Link>\n        </CanQuery>\n        {isShowingHistory && (\n          <CanQuery queryName=\"lastFinancialReport\">\n            <Link to=\"/overview/closure\">\n              <ButtonToRight\n                text={i18n.t`Current closure`}\n                iconName=\"assignment\"\n                iconSize={2.5}\n                textNextToIcon={true}\n                color={Colors.orange}\n                width=\"15rem\"\n                height={Spacing.ButtonHeight}\n              />\n            </Link>\n          </CanQuery>\n        )}\n      </Card>\n    )}\n  />\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface IProps {\n  text: string\n}\n\nconst MonospaceOutputStyled = styled.p`\n  color: white;\n  font-family: 'Lucida Console', Monaco, monospace;\n  white-space: pre-wrap;\n  margin: 0.2rem 0.5rem 0.5rem 1rem;\n  line-height: 1.8rem;\n`\n\nconst formatOutput = (output: string) =>\n  output.replace(new RegExp('\\t', 'g'), '\\u0009')\n\nexport const MonospaceOutput: React.SFC<IProps> = ({ text }) => (\n  <MonospaceOutputStyled>{formatOutput(text)}</MonospaceOutputStyled>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GClosureReportQuery } from '../../../graph/types'\n\nexport const FinancialReport = gql`\n  query GClosureReportQuery(\n    $branchId: ID!\n    $reportId: ID!\n    $showReport: Boolean!\n  ) {\n    lastReport: lastFinancialReport(companyBranchId: $branchId)\n      @skip(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n    report: financialReport(report: $reportId) @include(if: $showReport) {\n      plainData\n      reportDatetime\n      reportSequence\n    }\n  }\n`\n\nexport const QueryFinancialReport = buildQuery<\n  GClosureReportQuery.Query,\n  GClosureReportQuery.Variables\n>(FinancialReport)\n","import React from 'react'\n\nimport { MonospaceOutput } from '../../../atoms/MonospaceOutput'\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { i18n } from '../../../i18n'\nimport { QueryFinancialReport } from './ClosureStatisticsContent.graphql'\n\ninterface IProps {\n  reportId?: string\n}\n\nexport const ClosureStatisticsContent: React.SFC<IProps> = ({\n  reportId = '',\n}) => (\n  <WithRoot\n    render={({ statistics }) =>\n      statistics.isSingleBranchSelected ? (\n        <QueryFinancialReport\n          variables={{\n            branchId: statistics.singleBranchFilter,\n            reportId,\n            showReport: Boolean(reportId),\n          }}\n          fetchPolicy=\"cache-and-network\"\n          renderLoading={false}\n          render={({ report, lastReport }, { loading }) =>\n            loading ? (\n              <MonospaceOutput text={i18n.t`Computing`} />\n            ) : (\n              <MonospaceOutput\n                text={reportId ? report!.plainData : lastReport.plainData}\n              />\n            )\n          }\n        />\n      ) : null\n    }\n  />\n)\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router'\n\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { ClosureStatisticsFilter } from '../molecules/ClosureStatisticsFilter'\nimport { ClosureStatisticsContent } from '../organisms/ClosureStatisticsContent'\n\ninterface IRouteParams {\n  reportId?: string\n}\n\ninterface IProps extends RouteComponentProps<IRouteParams> {}\n\nexport const ClosurePage: React.SFC<IProps> = ({ match }) => (\n  <FullPageLayout pageTitle={i18n.t`Closure`} useBackButton={true}>\n    <ClosureStatisticsFilter\n      isShowingHistory={Boolean(match.params.reportId)}\n    />\n    <ClosureStatisticsContent reportId={match.params.reportId} />\n  </FullPageLayout>\n)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\n\nimport { Headline } from '../../../atoms/Headline'\nimport { MonospaceOutput } from '../../../atoms/MonospaceOutput'\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { formatDateISO } from '../../../helpers/formats'\nimport { i18n } from '../../../i18n'\nimport { QueryStatistics } from '../models/StatisticsModel.graphql'\n\ninterface IProps {}\n\nexport const StatisticsContent: React.SFC<IProps> = props => (\n  <WithRoot\n    render={({ statistics }) =>\n      statistics.branchesFilter && (\n        <QueryStatistics\n          variables={{\n            branches: statistics.branchesFilter,\n            dateFrom: formatDateISO(statistics.dateFrom),\n            dateTo: formatDateISO(statistics.dateTo),\n          }}\n          fetchPolicy=\"cache-and-network\"\n          renderLoading={false}\n          render={({ stats }, { loading }) =>\n            loading ? (\n              <MonospaceOutput text={i18n.t`Computing`} />\n            ) : (\n              <>\n                <Headline light={true}>\n                  <Trans>Daily statistics</Trans>\n                </Headline>\n                <MonospaceOutput text={stats.dailyStatisticsPlain} />\n\n                <Headline light={true}>\n                  <Trans>By category</Trans>\n                </Headline>\n                <MonospaceOutput text={stats.categoryStatisticsPlain} />\n\n                <Headline light={true}>\n                  <Trans>By type</Trans>\n                </Headline>\n                <MonospaceOutput text={stats.deliveryStatisticsPlain} />\n              </>\n            )\n          }\n        />\n      )\n    }\n  />\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { StatisticsFilter } from '../molecules/StatisticsFilter'\nimport { StatisticsContent } from '../organisms/StatisticsContent'\n\ninterface IProps {}\n\nexport const DailyStatisticsPage: React.SFC<IProps> = props => (\n  <FullPageLayout pageTitle={i18n.t`Sales statistics`} useBackButton={true}>\n    <StatisticsFilter />\n    <StatisticsContent />\n  </FullPageLayout>\n)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { ILoaderProps } from '../organisms/OrdersStatisticsLoader'\nimport { StatisticsFilter } from './StatisticsFilter'\n\ninterface IProps extends ILoaderProps {}\n\nconst StatPanel = styled.div``\n\nconst StatLabel = styled.h1``\n\nconst StatValue = styled.h2``\n\nexport const OrdersStatisticsSummary: React.SFC<IProps> = ({\n  isLoading,\n  stats,\n}) => (\n  <>\n    <StatisticsFilter />\n    {!isLoading &&\n      stats && (\n        <>\n          <StatPanel>\n            <StatLabel>\n              <Trans>Total turnover</Trans>\n            </StatLabel>\n            <StatValue>{stats.total.formattedValue}</StatValue>\n          </StatPanel>\n          <StatPanel>\n            <StatLabel>\n              <Trans>Online payments</Trans>\n            </StatLabel>\n            <StatValue>{stats.onlinePayments.formattedValue}</StatValue>\n          </StatPanel>\n          <StatPanel>\n            <StatLabel>\n              <Trans>Orders count</Trans>\n            </StatLabel>\n            <StatValue>{stats.ordersCount}</StatValue>\n          </StatPanel>\n          <StatPanel>\n            <StatLabel>\n              <Trans>Total commissions</Trans>\n            </StatLabel>\n            <StatValue>{stats.fees.formattedValue}</StatValue>\n          </StatPanel>\n        </>\n      )}\n  </>\n)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { Loading } from '../../../atoms/Loading'\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { OrderStateCategoryEnum } from '../../../graph/types'\nimport { OrderBox } from '../../../segments/order/atoms/OrderBox'\nimport { ILoaderProps } from './OrdersStatisticsLoader'\n\nexport const OrdersStatisticsList: React.SFC<ILoaderProps> = ({\n  isLoading,\n  noFilter,\n  stats,\n}) => (\n  <WithRoot\n    render={({ order: orderModel }) => {\n      if (isLoading) {\n        return <Loading />\n      }\n      if (noFilter) {\n        return (\n          <CardListTitle>\n            <Trans>Select at least one branch</Trans>\n          </CardListTitle>\n        )\n      }\n      if (stats!.orders.length === 0) {\n        return (\n          <CardListTitle>\n            <Trans>No orders</Trans>\n          </CardListTitle>\n        )\n      }\n      return (\n        <>\n          {stats!.orders.map(order => (\n            <OrderBox\n              key={order.id}\n              order={{\n                ...order,\n                orderStateCategory: OrderStateCategoryEnum.FINISHED,\n              }}\n              listModel={orderModel.list}\n            />\n          ))}\n        </>\n      )\n    }}\n  />\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GOrdersStatistics } from '../../../graph/types'\nimport { OrderTickerFragment } from '../../../segments/order/molecules/OrderTicker.graphql'\n\nconst OrdersStatisticsQuery = gql`\n  query GOrdersStatistics($branches: [ID!]!, $dateFrom: Date!, $dateTo: Date!) {\n    stats: statistics(\n      branches: $branches\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n    ) {\n      finishedOrders {\n        fees {\n          ...GStatsPrice\n        }\n        onlinePayments {\n          ...GStatsPrice\n        }\n        total {\n          ...GStatsPrice\n        }\n        ordersCount\n        orders {\n          ...GOrderListTicker\n        }\n      }\n    }\n  }\n\n  fragment GStatsPrice on PriceConverted {\n    formattedValue\n  }\n\n  ${OrderTickerFragment}\n`\n\nexport const QueryOrdersStatistics = buildQuery<\n  GOrdersStatistics.Query,\n  GOrdersStatistics.Variables\n>(OrdersStatisticsQuery)\n","import React from 'react'\n\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { GOrdersStatistics } from '../../../graph/types'\nimport { formatDateISO } from '../../../helpers/formats'\nimport { QueryOrdersStatistics } from './OrdersStatisticsLoader.graphql'\n\nexport type TOrdersStats = GOrdersStatistics.FinishedOrders\n\nexport interface ILoaderProps {\n  isLoading: boolean\n  noFilter: boolean\n  stats?: TOrdersStats\n}\n\ninterface IProps {\n  children(props: ILoaderProps): ReactNode\n}\n\nexport const OrdersStatisticsLoader: React.SFC<IProps> = ({ children }) => (\n  <WithRoot\n    render={({ statistics }) => {\n      if (!statistics.hasBranchFilter) {\n        return children({ isLoading: false, noFilter: true })\n      }\n      const variables: GOrdersStatistics.Variables = {\n        branches: statistics.branchesFilter,\n        dateFrom: formatDateISO(statistics.dateFrom),\n        dateTo: formatDateISO(statistics.dateTo),\n      }\n      return (\n        <QueryOrdersStatistics\n          fetchPolicy=\"cache-and-network\"\n          variables={variables}\n          renderLoading={false}\n          render={({ stats }, { loading }) =>\n            children({\n              noFilter: false,\n              isLoading: loading,\n              stats: stats && stats.finishedOrders,\n            })\n          }\n        />\n      )\n    }}\n  />\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { PageLayout } from '../../../molecules/PageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { OrdersStatisticsSummary } from '../molecules/OrdersStatisticsSummary'\nimport { OrdersStatisticsList } from '../organisms/OrdersStatisticsList'\nimport { OrdersStatisticsLoader } from '../organisms/OrdersStatisticsLoader'\n\ninterface IProps {}\n\nfunction getLayout() {\n  return [{ i: 'filter', x: 0, y: 1, w: 8, h: 1 }]\n}\n\nexport const OrdersStatisticsPage: React.SFC<IProps> = props => (\n  <OrdersStatisticsLoader>\n    {loaderProps => (\n      <>\n        <PageLayoutFullHeightItem\n          withScrollArea={true}\n          row={1}\n          column={8}\n          widthInColumns={8}\n        >\n          <OrdersStatisticsList {...loaderProps} />\n        </PageLayoutFullHeightItem>\n\n        <PageLayout\n          layouts={getLayout()}\n          pageTitle={i18n.t`Orders statistics`}\n          showSoundControl={false}\n          scrollPageTitle={false}\n          useBackButton={true}\n        >\n          <div key=\"filter\">\n            <OrdersStatisticsSummary {...loaderProps} />\n          </div>\n        </PageLayout>\n      </>\n    )}\n  </OrdersStatisticsLoader>\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nexport const ClosureButton: React.SFC = props => (\n  <TouchButton\n    text={i18n.t`Closure`}\n    iconName=\"assignment\"\n    color={Colors.turquoise}\n  />\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nexport const DailyStatisticsButton: React.SFC = props => (\n  <TouchButton\n    text={i18n.t`Sales statistics`}\n    iconName=\"assignment\"\n    color={Colors.turquoise}\n  />\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nexport const OrdersStatisticsButton: React.SFC = props => (\n  <TouchButton\n    text={i18n.t`Orders statistics`}\n    iconName=\"assignment\"\n    color={Colors.turquoise}\n  />\n)\n","import React from 'react'\n\nimport { PageLayout } from '../../../molecules/PageLayout'\nimport { PageLayoutItem } from '../../../molecules/PageLayoutItem'\nimport { ClosureButton } from '../molecules/ClosureButton'\nimport { DailyStatisticsButton } from '../molecules/DailyStatisticsButton'\nimport { OrdersStatisticsButton } from '../molecules/OrdersStatisticsButton'\n\ninterface IProps {}\n\nfunction getLayout() {\n  return [\n    { i: 'OrdersStatistics', x: 0, y: 1, w: 2, h: 2 },\n    { i: 'DailyStatistics', x: 2, y: 1, w: 2, h: 2 },\n    { i: 'Closure', x: 4, y: 1, w: 2, h: 2 },\n  ]\n}\n\nexport const OverviewPage: React.SFC<IProps> = props => (\n  <PageLayout layouts={getLayout()}>\n    <PageLayoutItem\n      key=\"OrdersStatistics\"\n      route=\"/overview/orders\"\n      component={OrdersStatisticsButton}\n      canQuery=\"orders\"\n    />\n    <PageLayoutItem\n      key=\"DailyStatistics\"\n      route=\"/overview/statistics\"\n      component={DailyStatisticsButton}\n      canQuery=\"statistics\"\n    />\n    <PageLayoutItem\n      key=\"Closure\"\n      route=\"/overview/closure\"\n      component={ClosureButton}\n      canQuery=\"lastFinancialReport\"\n    />\n  </PageLayout>\n)\n","import React from 'react'\nimport { Route, RouteComponentProps, Switch } from 'react-router'\n\nimport { PageTitle } from '../../../atoms/PageTitle'\nimport { i18n } from '../../../i18n'\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { SecureRoute } from '../../../routes/SecureRoute'\nimport { ClosureHistoryPage } from '../pages/ClosureHistoryPage'\nimport { ClosurePage } from '../pages/ClosurePage'\nimport { DailyStatisticsPage } from '../pages/DailyStatisticsPage'\nimport { OrdersStatisticsPage } from '../pages/OrdersStatisticsPage'\nimport { OverviewPage } from '../pages/OverviewPage'\n\ninterface ISettingsRoutesProps extends RouteComponentProps<{}> {}\n\nexport const OverviewRoutes: React.SFC<ISettingsRoutesProps> = ({ match }) => (\n  <>\n    <PageTitle title={i18n.t`Overview`} />\n    <Switch>\n      <SecureRoute exact={true} path={match.path} component={OverviewPage} />\n      <SecureRoute\n        path={`${match.path}/closure/history`}\n        component={ClosureHistoryPage}\n      />\n      <SecureRoute\n        path={`${match.path}/closure/:reportId?`}\n        component={ClosurePage}\n      />\n      <SecureRoute\n        path={`${match.path}/statistics`}\n        component={DailyStatisticsPage}\n      />\n      <SecureRoute\n        path={`${match.path}/orders`}\n        component={OrdersStatisticsPage}\n      />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </>\n)\n\nexport default OverviewRoutes\n"],"sourceRoot":""}