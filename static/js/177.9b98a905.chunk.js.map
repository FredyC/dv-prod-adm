{"version":3,"sources":["molecules/PageLayoutFullHeightItem.tsx","atoms/FlexRowSingle.tsx","atoms/VerticalGap.tsx","atoms/ScrollArea.tsx","atoms/CardListTitle.tsx","atoms/BaseMap.tsx","atoms/DragHandle.tsx","atoms/FormInputSelect.tsx","atoms/ConfirmDialog.tsx","segments/zones/hooks/useZoneId.ts","segments/zones/hooks/useZoneRouteControl.tsx","segments/zones/atoms/ZonePriceInput.tsx","segments/zones/molecules/ZoneColorSelector.tsx","segments/zones/atoms/ZonePlaceholderInput.tsx","segments/zones/molecules/ZoneFormPriceRange.tsx","segments/zones/molecules/ZoneFormContent.tsx","segments/zones/molecules/ZoneFormControls.tsx","segments/zones/organisms/ZoneListLoader.graphql.ts","segments/zones/organisms/ZoneListLoader.tsx","segments/zones/organisms/ZoneFormPanel.tsx","molecules/MapCompanyBranchMarker.tsx","segments/zones/atoms/ZoneMapArea.tsx","segments/zones/atoms/ZoneMapEditableArea.tsx","segments/zones/hooks/useZoneModel.ts","segments/zones/organisms/ZoneMapControl.tsx","segments/zones/molecules/CreateZoneButton.tsx","segments/zones/atoms/ZoneListCard.tsx","segments/zones/molecules/ZoneList.tsx","segments/zones/organisms/ZoneListControl.tsx","segments/zones/molecules/ZoneFIlterBranch.tsx","segments/zones/molecules/ZoneFilterBrand.tsx","segments/zones/organisms/ZoneFilter.tsx","segments/zones/organisms/ZoneMenuPanel.tsx","segments/zones/pages/ZonePageLayout.tsx","segments/zones/routes/ZoneMenuRoutes.tsx"],"names":["__webpack_require__","d","__webpack_exports__","PageLayoutFullHeightItem","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","styled_components__WEBPACK_IMPORTED_MODULE_1__","_atoms_ScrollArea__WEBPACK_IMPORTED_MODULE_2__","_styling__WEBPACK_IMPORTED_MODULE_3__","FullHeightDiv","styled","div","withConfig","displayName","componentId","props","undefined","widthInColumns","Spacing","LayoutGridCellMargin","column","row","FullHeightDivStyled","_ref","children","_ref$row","_ref$column","_ref$widthInColumns","_ref$withScrollArea","withScrollArea","scrollAreaId","a","createElement","id","FlexRowSingle","_ref$justify","justify","VerticalGap","_ref$size","size","_ref$sizeUnit","sizeUnit","concat","ScrollArea","CardListTitle","styled_components__WEBPACK_IMPORTED_MODULE_0__","_styling__WEBPACK_IMPORTED_MODULE_1__","h2","Colors","greyLight","MapContainerStyled","Radiuses","Card","BaseMapContainer","withGoogleMap","react__WEBPACK_IMPORTED_MODULE_8___default","Fragment","mapModelContext","React","createContext","mapContext","GoogleMapProvider","context","_this","Object","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","map","MAP","Provider","value","PureComponent","contextTypes","object","BaseMap","_ref2","model","options","streetViewControl","mapTypeControl","fullscreenControl","containerElement","mapElement","style","height","mobx_react__WEBPACK_IMPORTED_MODULE_6__","react_google_maps__WEBPACK_IMPORTED_MODULE_9__","ref","setMapRef","zoom","center","onCenterChanged","updatePosition","onZoomChanged","updateZoom","useGoogleMap","useContext","Error","DragHandle","react_sortable_hoc__WEBPACK_IMPORTED_MODULE_1__","styled_components__WEBPACK_IMPORTED_MODULE_2__","_Icon__WEBPACK_IMPORTED_MODULE_3__","DragHandleContainerStyled","SortableHandle","iconName","FormInputSelect","_React$Component","_getPrototypeOf2","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_len","arguments","length","args","Array","_key","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","apply","validate","isRequired","_i18n__WEBPACK_IMPORTED_MODULE_10__","_","0","validatioName","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","key","fieldApi","_this$props","isMulti","getOptionValue","defaultValue","selection","isSelected","isArray","item","includes","RM","F","filter","onChange","selectedOptions","setValue","find","option","_this2","_this$props2","field","_this$props2$fieldIsP","fieldIsPure","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_7___default","react_form__WEBPACK_IMPORTED_MODULE_8__","pure","_SelectControl__WEBPACK_IMPORTED_MODULE_11__","assign","getControlProps","onFocus","setTouched","styles","control","base","Boolean","error","D_workspace_deepvision_admin_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","borderColor","Component","defaultProps","getItemId","prop","ConfirmDialog","useEffect","isShow","window","confirm","confirmText","onConfirm","onCancel","useZoneId","useRouterContext","match","params","zoneId","useZoneRouteControl","_useRoot","useRoot","user","zoneModel","zone","history","getRouteToZone","routeToZoneEdit","editZoneId","panToZone","canQuery","push","routeToZoneList","LabelStyled","FormInputTextBoxStyled","FormInputTextBox","FormInputTextBoxDeliveryStyled","blue","DeliveryContainer","PriceRangeContainer","VerticalLine","validatePrice","trim","Number","isNaN","parseFloat","i18n","ZonePriceInput","forwardRef","label","isDeliveryPrice","_ref$autoFocus","autoFocus","react_default","ColorOption","color","white","QueryZoneColors","buildQuery","ZoneColorsQuery","ZoneColorSelector","_ref2$field","render","_ref3","zoneColors","toConsumableArray","width","objectSpread","padding","margin","menu","maxWidth","head","formatOptionLabel","zoneColor","code","FormInputForPlaceholderStyled","FormInputStyled","Container","ZonePlaceholderInput","display","ZonePlaceholderInput_LabelStyled","disabled","placeholder","AddButtonContainer","RemoveButtonContainer","ZoneFormPriceRange","values","idx","react","ZonePlaceholderInput_ZonePlaceholderInput","TouchButtonDelete","onDelete","removeValue","es","formApi","TouchButton","submitting","ButtonHeight","onClick","addValue","price","toPrice","ZoneFormContentStyled","Middle","black","DescriptionUnderHeadline","greyDark","ZoneFormContent","IconLine","icon","validateIsRequired","ZoneColorSelector_ZoneColorSelector","FormInputCheckbox","name","toLocaleLowerCase","_lingui_react","components","Headline","component","ZoneFormControls","isSubmitting","isModified","onGoBack","onSave","FlexColumn","widthGrowIndex","greyMiddle","text","CanMutate","mutationName","green","ZonesQuery","gql","_templateObject","ZoneFragment","QueryZones","ZoneListContext","ZoneListLoader","observer","branches","branchFilterPredicate","variables","branchesId","renderLoading","zones","loading","useZoneList","DeleteButtonContainer","ZoneFormPanel","zoneList","_useState","useState","_useState2","slicedToArray","setModified","formApiRef","useRef","enqueueError","useSnackBar","useCallback","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","current","submitForm","stop","_callee2","_context2","destroyZone","useDisposable","reaction","currentZonePoints","propEq","defaultValues","formState","logDebug","onSubmit","saveZone","ZoneFormControls_ZoneFormControls","ZoneFormContent_ZoneFormContent","index_es","when","handleOk","handleCancel","ConfirmDialog_ConfirmDialog","Loading","BranchNameStyled","isActive","css","MapCompanyBranchMarker","branch","_ref$isActive","lib","getPixelPositionOffset","x","y","mapPaneName","OverlayView","MARKER_LAYER","position","gpsToLatLng","gps","ZoneMapArea","onAreaFocus","e","points","priority","defaultPath","fillColor","fillOpacity","strokeWeight","zIndex","editable","draggable","onDblClick","ZoneMapEditableArea","polygonRef","onAreaChange","path","getPath","getArray","latLngToGps","listeners","addListener","onClear","forEach","lis","remove","onDragEnd","useZoneModel","ZoneMapControl","companyBranchId","hasBranchFilter","branchFilterId","renderBranchLabel","MapCompanyBranchMarker_MapCompanyBranchMarker","areaProps","geoPolygon","companyBranch","enabled","ZoneMapEditableArea_ZoneMapEditableArea","updateZonePoints","clearZonePoints","ZoneMapArea_ZoneMapArea","CreateZoneButton","createZone","turquoise","textNextToIcon","ZoneNameStyled","ZoneDescriptionStyled","ZoneFlexRowStyled","ZoneListCard","SortableElement","onEdit","fixedWidth","ZoneListContainerStyled","SortableContainer","sortZones","R","groupByBranch","ZoneList","output","onSortEnd","onZoneEdit","renderZone","index","collection","sorted","oldIndex","newIndex","changeZonePriority","grouped","branchZones","renderBranch","useDragHandle","lockAxis","ZoneListControl","react_content_loader_es","primaryOpacity","secondaryOpacity","brand","ZoneList_ZoneList","zoneFilterPredicate","root","filterBranches","ZoneFilterBranch","selectedBranch","onSelection","CompanyBranchDropdown","onSingleSelection","isClearable","ZoneFilterBrand","brands","selectedBrand","SelectControl","getOptionLabel","isSearchable","ZoneFilter","getBrandBranches","pathEq","autorun","setBranchFilter","singleBrand","setBrandFilter","ZoneFilterBrand_ZoneFilterBrand","clearBrandFilter","ZoneFIlterBranch_ZoneFilterBranch","clearBranchFilter","ZoneMenuContainer","FixedHeaderContainer","ScrollAreaContainer","ZoneMenuPanel","ZoneListControl_ZoneListControl","ZonePageLayout","isEditing","PageLayout","pageTitle","useBackButton","backRoute","ZoneFormPanel_ZoneFormPanel","ZoneMenuPanel_ZoneMenuPanel","ZoneMapControl_ZoneMapControl","ZoneMenuRoutes_ZoneMenuRoutes","ZoneMenuRoutes","react_router","NotFoundPage"],"mappings":"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","file":"static/js/177.9b98a905.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nimport { ScrollArea } from '../atoms/ScrollArea'\nimport { Spacing } from '../styling'\n\ninterface IPageLayoutFullHeightItemProps {\n  row?: number\n  column?: number\n  widthInColumns?: number\n  withScrollArea?: boolean\n  scrollAreaId?: string\n}\n\nconst gridColumnWidth: string = '6.22vw'\nconst gridColumnHeigth: string = '3.9375rem'\n\nconst leftPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.column !== undefined) {\n    return (\n      'calc((' +\n      props.column +\n      ' * ' +\n      gridColumnWidth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return Spacing.LayoutGridCellMargin\n  }\n}\nconst widthComputed = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.widthInColumns !== undefined) {\n    return (\n      'calc((' +\n      props.widthInColumns +\n      ' * ' +\n      gridColumnWidth +\n      ') - ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return 'calc(100vh - (2 * ' + Spacing.LayoutGridCellMargin + '))'\n  }\n}\nconst topPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.row !== undefined) {\n    return (\n      'calc((' +\n      props.row +\n      ' * ' +\n      gridColumnHeigth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return (\n      'calc(' + gridColumnHeigth + ' + ' + Spacing.LayoutGridCellMargin + ')'\n    )\n  }\n}\n\nconst FullHeightDiv = styled.div`\n  position: fixed;\n  bottom: 0.5rem;\n  width: ${widthComputed()};\n  left: ${leftPos()};\n  top: ${topPos()};\n`\n\nconst FullHeightDivStyled = styled.div`\n  height: 100%;\n`\n\nexport const PageLayoutFullHeightItem: React.FC<\n  IPageLayoutFullHeightItemProps\n> = ({\n  children,\n  row = 1,\n  column = 0,\n  widthInColumns = 16,\n  withScrollArea = false,\n  scrollAreaId,\n}) => (\n  <FullHeightDiv\n    column={column}\n    row={row}\n    widthInColumns={widthInColumns}\n    withScrollArea={withScrollArea}\n  >\n    {withScrollArea ? (\n      <ScrollArea id={scrollAreaId}>{children}</ScrollArea>\n    ) : (\n      <FullHeightDivStyled>{children}</FullHeightDivStyled>\n    )}\n  </FullHeightDiv>\n)\n","import styled from 'styled-components'\n\nexport const FlexRowSingle = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: ${({ justify = 'space-between' }: { justify?: string }) =>\n    justify};\n`\n","import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import styled from 'styled-components'\n\nexport const ScrollArea = styled.div`\n  overflow-y: scroll;\n  -webkit-overflow-scrolling: touch;\n  height: 100%;\n`\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\nexport const CardListTitle = styled.h2`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  font-size: 1.2rem;\n  margin: 0.8rem 0 0.8rem 0.3rem;\n`\n","import { Observer } from 'mobx-react'\nimport { object } from 'prop-types'\nimport React, { useContext } from 'react'\nimport { GoogleMap, GoogleMapProps, withGoogleMap } from 'react-google-maps'\nimport { MAP } from 'react-google-maps/lib/constants'\nimport styled from 'styled-components'\n\nimport { TMapModel } from '../models/MapModel'\nimport { Radiuses } from '../styling'\n\ninterface IBaseMapProps extends GoogleMapProps {\n  model: TMapModel\n}\n\nconst MapContainerStyled = styled.div`\n  border-radius: ${Radiuses.Card};\n  overflow: hidden;\n  height: 100%;\n`\n\nconst BaseMapContainer = withGoogleMap(({ children }) => <>{children}</>)\n\nconst mapModelContext = React.createContext<TMapModel | null>(null)\nconst mapContext = React.createContext<google.maps.Map | null>(null)\n\nclass GoogleMapProvider extends React.PureComponent {\n  static contextTypes = { [MAP]: object }\n  private map: google.maps.Map\n  constructor(props, context) {\n    super(props)\n    this.map = context[MAP]\n  }\n  render() {\n    return (\n      <mapContext.Provider value={this.map}>\n        {this.props.children}\n      </mapContext.Provider>\n    )\n  }\n}\n\nexport const BaseMap: React.FC<IBaseMapProps> = ({ model, children }) => {\n  const options: google.maps.MapOptions = {\n    streetViewControl: false,\n    mapTypeControl: false,\n    fullscreenControl: false,\n  }\n  return (\n    <mapModelContext.Provider value={model}>\n      <BaseMapContainer\n        containerElement={<MapContainerStyled />}\n        mapElement={<div style={{ height: `100%` }} />}\n      >\n        <GoogleMapProvider>\n          <Observer>\n            {() => (\n              <GoogleMap\n                ref={model.setMapRef}\n                zoom={model.zoom}\n                center={model.center}\n                onCenterChanged={model.updatePosition}\n                onZoomChanged={model.updateZoom}\n                options={options}\n              >\n                {children}\n              </GoogleMap>\n            )}\n          </Observer>\n        </GoogleMapProvider>\n      </BaseMapContainer>\n    </mapModelContext.Provider>\n  )\n}\n\nexport function useMapModel() {\n  const model = useContext(mapModelContext)\n  if (!model) {\n    throw new Error('Trying to useMapModel, but BaseMap is missing in the tree')\n  }\n  return model\n}\n\nexport function useGoogleMap() {\n  const map = useContext(mapContext)\n  if (!map) {\n    throw new Error(\n      'Trying to useGoogleMap, but BaseMap is missing in the tree',\n    )\n  }\n  return map\n}\n","import React from 'react'\nimport { SortableHandle } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Icon } from './Icon'\n\ninterface IDragHandleProps {}\n\nconst DragHandleContainerStyled = styled.div`\n  padding: 1rem 0.4rem;\n  cursor: grab;\n`\nexport const DragHandle = SortableHandle<IDragHandleProps>(() => (\n  <DragHandleContainerStyled>\n    <Icon iconName=\"reorder\" />\n  </DragHandleContainerStyled>\n))\n","import React from 'react'\nimport { Field, FieldType, IFieldApi } from 'react-form'\n\nimport { RM } from '../helpers/ramda'\nimport { i18n } from '../i18n'\nimport { ISelectControlProps, SelectControl } from './SelectControl'\n\nexport interface IFormInputSelectProps<OptionType>\n  extends ISelectControlProps<OptionType> {\n  field: FieldType\n  fieldIsPure?: boolean\n  defaultValue?: OptionType\n  isRequired?: boolean\n  validatioName?: string\n}\n\nexport class FormInputSelect<OptionType> extends React.Component<\n  IFormInputSelectProps<OptionType>\n> {\n  static defaultProps = {\n    validatioName: 'Value',\n    getItemId: RM.prop('id'),\n  }\n\n  validate = (value: OptionType | undefined) => {\n    if (this.props.isRequired && !value) {\n      return i18n.t`${this.props.validatioName} must be selected`\n    }\n    return null\n  }\n\n  getControlProps(fieldApi: IFieldApi) {\n    const { isMulti, options, getOptionValue, defaultValue } = this.props\n    const selection = fieldApi.value || defaultValue\n\n    if (isMulti) {\n      const isSelected = Array.isArray(selection)\n        ? (item: OptionType) => selection.includes(getOptionValue!(item))\n        : RM.F\n      return {\n        value: Array.isArray(options)\n          ? (options as OptionType[]).filter(isSelected)\n          : [],\n        onChange: selectedOptions => {\n          fieldApi.setValue(selectedOptions.map(getOptionValue))\n        },\n      }\n    }\n\n    return {\n      value:\n        selection &&\n        (options as OptionType[]).find(\n          item => getOptionValue!(item) === selection,\n        ),\n      onChange: option => {\n        fieldApi.setValue(getOptionValue!(option))\n      },\n    }\n  }\n\n  render() {\n    const {\n      field,\n      fieldIsPure = false,\n      isRequired = false,\n      defaultValue,\n      ...props\n    } = this.props\n    return (\n      <Field field={field} validate={this.validate} pure={fieldIsPure}>\n        {fieldApi => (\n          <SelectControl\n            {...this.getControlProps(fieldApi)}\n            onFocus={() => fieldApi.setTouched(true)}\n            styles={{\n              control: base => {\n                if (Boolean(fieldApi.error)) {\n                  return {\n                    ...base,\n                    borderColor: 'red',\n                  }\n                }\n                return base\n              },\n            }}\n            {...props}\n          />\n        )}\n      </Field>\n    )\n  }\n}\n","import React, { useEffect } from 'react'\n\ninterface IProps {\n  isShow: boolean\n  confirmText: string\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport const ConfirmDialog: React.FC<IProps> = props => {\n  useEffect(\n    () => {\n      if (props.isShow) {\n        if (window.confirm(props.confirmText)) {\n          props.onConfirm()\n        } else {\n          props.onCancel()\n        }\n      }\n    },\n    [props.isShow],\n  )\n  return null\n}\n","import { useRouterContext } from '@speedlo/hooks'\n\ninterface IZoneRouteParams {\n  zoneId?: ID\n}\n\nexport function useZoneId() {\n  const { match } = useRouterContext<IZoneRouteParams>()\n  const { zoneId } = match.params\n  return zoneId\n}\n","import { useRouterContext } from '@speedlo/hooks'\n\nimport { useRoot } from '../../../atoms/RootProvider'\n\nexport function useZoneRouteControl() {\n  const { user, zone: zoneModel } = useRoot()\n  const { history } = useRouterContext()\n  const baseRoute = '/settings/zones'\n  const getRouteToZone = (zoneId: ID) => {\n    return `${baseRoute}/${zoneId}`\n  }\n  return {\n    getRouteToZone,\n    routeToZoneEdit(editZoneId: ID) {\n      zoneModel.map.panToZone(editZoneId)\n      if (user.canQuery('zone')) {\n        history.push(getRouteToZone(editZoneId))\n      }\n    },\n    routeToZoneList() {\n      history.push(baseRoute)\n    },\n  }\n}\n","import React from 'react'\nimport { FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { i18n } from '../../../i18n'\nimport { Colors } from '../../../styling'\n\ninterface IZoneInputProps {\n  field: FieldType\n  label?: string\n  autoFocus?: boolean\n  isDeliveryPrice?: boolean\n}\n\nconst LabelStyled = styled.div`\n  min-width: 2rem;\n  display: inline-block;\n`\n\nconst FormInputTextBoxStyled = styled(FormInputTextBox)`\n  width: 3rem;\n  position: relative;\n  z-index: 4;\n`\nconst FormInputTextBoxDeliveryStyled = styled(FormInputTextBoxStyled)`\n  color: ${Colors.blue};\n`\n\nconst DeliveryContainer = styled.div`\n  position: relative;\n  left: 8rem;\n  top: 0rem;\n`\n\nconst PriceRangeContainer = styled.div`\n  position: relative;\n  left: 4rem;\n  top: -0.3rem;\n  width: 3rem;\n`\n\nconst VerticalLine = styled.div`\n  border-left: 3px solid #707070;\n  width: 3px;\n  position: relative;\n  left: -2rem;\n  height: 4rem;\n  float: left;\n  margin: -0.5rem 0 0 0;\n`\n\nconst validatePrice = (value: string) => {\n  if (typeof value === 'number') {\n    return null\n  }\n  const trim = value.trim()\n  return trim.length && Number.isNaN(Number.parseFloat(trim))\n    ? i18n.t`Must be number`\n    : null\n}\n\nexport const ZonePriceInput = React.forwardRef<\n  HTMLInputElement,\n  IZoneInputProps\n>(\n  ({ field, label, isDeliveryPrice, autoFocus = false }, ref) =>\n    isDeliveryPrice ? (\n      <DeliveryContainer>\n        <VerticalLine />\n        <LabelStyled>{label}</LabelStyled>\n        <FormInputTextBoxDeliveryStyled\n          field={field}\n          validate={validatePrice}\n          // @ts-ignore\n          ref={ref}\n        />\n      </DeliveryContainer>\n    ) : (\n      <PriceRangeContainer>\n        <FormInputTextBoxStyled\n          field={field}\n          validate={validatePrice}\n          autoFocus={autoFocus}\n        />\n      </PriceRangeContainer>\n    ),\n)\n","import React from 'react'\nimport { FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputSelect } from '../../../atoms/FormInputSelect'\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GZoneColors } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { Colors } from '../../../styling'\nimport { ZoneColorsQuery } from '../Zones.graphql'\n\ninterface IZoneColorSelectorProps {\n  field?: FieldType\n}\n\nconst ColorOption = styled.div`\n  background-color: ${({ color }: { color: string }) => color};\n  color: ${Colors.white};\n  width: 6rem;\n  padding: 0.4rem 1rem;\n  margin: 0;\n  height: 100%;\n`\n\nconst QueryZoneColors = buildQuery<GZoneColors.Query, GZoneColors.Variables>(\n  ZoneColorsQuery,\n)\n\nconst makeStyles = () => ({\n  option: base => ({\n    ...base,\n    padding: 0,\n    margin: 0,\n  }),\n  menu: base => ({\n    ...base,\n    width: '8rem',\n    maxWidth: '8rem',\n  }),\n})\n\nexport const ZoneColorSelector: React.FC<IZoneColorSelectorProps> = ({\n  field = 'zoneColor.id',\n}) => (\n  <QueryZoneColors\n    render={({ zoneColors }) => (\n      <FormInputSelect<GZoneColors.ZoneColors>\n        field={field}\n        fieldIsPure={true}\n        options={[...zoneColors]}\n        width={8}\n        styles={makeStyles()}\n        defaultValue={RM.head(zoneColors)}\n        getOptionValue={RM.prop('id')}\n        formatOptionLabel={zoneColor => (\n          <ColorOption color={zoneColor.color}>{zoneColor.code}</ColorOption>\n        )}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { FormInputStyled } from '../../../atoms/FormInputStyled'\n\ninterface IZonePlaceholderInputProps {\n  label: string\n  display: string\n}\n\nconst LabelStyled = styled.div`\n  width: 3rem;\n  display: inline-block;\n`\n\nconst FormInputForPlaceholderStyled = styled(FormInputStyled)`\n  width: 3rem;\n  position: relative;\n  z-index: 4;\n`\n\nconst Container = styled.div`\n  margin: 0 0 0 1rem;\n`\n\nexport const ZonePlaceholderInput: React.FC<IZonePlaceholderInputProps> = ({\n  label,\n  display,\n}) => (\n  <Container>\n    <LabelStyled>{label}</LabelStyled>\n    <FormInputForPlaceholderStyled disabled={true} placeholder={display} />\n  </Container>\n)\n","import React, { Fragment } from 'react'\nimport { FormApi, NestedFieldComponentProps } from 'react-form'\nimport styled from 'styled-components'\n\nimport { GZonePriceRange } from '../../../graph/types'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Spacing } from '../../../styling'\nimport { ZonePlaceholderInput } from '../atoms/ZonePlaceholderInput'\nimport { ZonePriceInput } from '../atoms/ZonePriceInput'\n\ninterface IProps\n  extends NestedFieldComponentProps<GZonePriceRange.Fragment[]> {}\n\nconst AddButtonContainer = styled.div`\n  position: relative;\n  top: -6rem;\n`\n\nconst RemoveButtonContainer = styled.div`\n  position: relative;\n  top: -7rem;\n  left: 16rem;\n`\n\nexport const ZoneFormPriceRange: React.FC<IProps> = ({ fieldApi }) => {\n  return (\n    <>\n      {fieldApi.values.map((value, idx, values) => (\n        <Fragment key={idx}>\n          <ZonePriceInput\n            label=\"za\"\n            isDeliveryPrice={true}\n            field={[idx, 'price', 'value']}\n          />\n\n          {idx === values.length - 1 ? (\n            <ZonePlaceholderInput display=\"&infin;\" label=\"do\" />\n          ) : (\n            <ZonePriceInput\n              field={[idx, 'toPrice', 'value']}\n              autoFocus={true}\n            />\n          )}\n\n          {values.length > 1 && (\n            <RemoveButtonContainer>\n              <TouchButtonDelete\n                onDelete={() => fieldApi.removeValue('', idx)}\n              />\n            </RemoveButtonContainer>\n          )}\n        </Fragment>\n      ))}\n      <FormApi\n        render={formApi => (\n          <AddButtonContainer>\n            <TouchButton\n              disabled={formApi.submitting}\n              width={Spacing.ButtonHeight}\n              iconName=\"add_circle\"\n              onClick={() =>\n                fieldApi.addValue('', {\n                  price: { value: 0 },\n                  toPrice: { value: 0 },\n                })\n              }\n            />\n          </AddButtonContainer>\n        )}\n      />\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { NestedField } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputCheckbox } from '../../../atoms/FormInputCheckbox'\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { Headline } from '../../../atoms/Headline'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { validateIsRequired } from '../../../helpers/form'\nimport { i18n } from '../../../i18n'\nimport { Colors, Spacing } from '../../../styling'\nimport { ZonePriceInput } from '../atoms/ZonePriceInput'\nimport { ZoneColorSelector } from '../molecules/ZoneColorSelector'\nimport { ZoneFormPriceRange } from '../molecules/ZoneFormPriceRange'\n\ninterface IZoneFormContentProps {}\n\nconst ZoneFormContentStyled = styled.div`\n  margin: ${Spacing.Middle};\n  color: ${Colors.black};\n`\n\nconst DescriptionUnderHeadline = styled.div`\n  color: ${Colors.greyDark};\n  padding-bottom: 0.2rem;\n`\n\nexport const ZoneFormContent: React.FC<IZoneFormContentProps> = props => (\n  <ZoneFormContentStyled>\n    <IconLine icon=\"label\">\n      <FormInputTextBox\n        field=\"name\"\n        validate={validateIsRequired(i18n.t`Zone name`)}\n      />\n    </IconLine>\n\n    <IconLine icon=\"color_lens\">\n      <ZoneColorSelector />\n    </IconLine>\n\n    <FormInputCheckbox\n      field=\"enabled\"\n      name=\"enabled\"\n      label={i18n.t`Is active`.toLocaleLowerCase()}\n    />\n\n    <Trans>\n      <Headline margin=\"0.5rem 0 0 0\">Delivery cost</Headline>\n      <DescriptionUnderHeadline>\n        according order total cost\n      </DescriptionUnderHeadline>\n    </Trans>\n    <ZonePriceInput field=\"minimalOrderPrice.value\" />\n    <NestedField field=\"priceRangeRules\" component={ZoneFormPriceRange} />\n  </ZoneFormContentStyled>\n)\n","import React, { MouseEvent } from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IProps {\n  isSubmitting: boolean\n  isModified: boolean\n  onSave(e: MouseEvent<HTMLButtonElement>): void\n  onGoBack(): void\n}\n\nexport const ZoneFormControls: React.FC<IProps> = ({\n  isSubmitting,\n  isModified,\n  onGoBack,\n  onSave,\n}) => (\n  <FlexRowSingle>\n    <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n      <TouchButton\n        color={Colors.greyMiddle}\n        onClick={onGoBack}\n        text={i18n.t`Back`}\n        disabled={isSubmitting}\n      />\n    </FlexColumn>\n    <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n      <CanMutate mutationName=\"updateZone\">\n        <TouchButton\n          color={Colors.green}\n          text={i18n.t`Save zone`}\n          onClick={onSave}\n          disabled={isSubmitting || !isModified}\n        />\n      </CanMutate>\n    </FlexColumn>\n  </FlexRowSingle>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GZones } from '../../../graph/types'\nimport { ZoneFragment } from '../Zones.graphql'\n\nexport const ZonesQuery = gql`\n  query GZones($branchesId: [ID!]!) {\n    zones(companyBranches: $branchesId) {\n      ...GZone\n    }\n  }\n  ${ZoneFragment}\n`\n\nexport const QueryZones = buildQuery<GZones.Query, GZones.Variables>(ZonesQuery)\n","import { observer } from 'mobx-react-lite'\nimport React, { useContext } from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { GZone } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { QueryZones } from './ZoneListLoader.graphql'\n\ninterface IProps {}\n\nexport type TZone = GZone.Fragment\n\nconst ZoneListContext = React.createContext<Maybe<ReadonlyArray<TZone>>>(null)\n\nexport const ZoneListLoader: React.FC<IProps> = observer(({ children }) => {\n  const { zone } = useRoot()\n  const branches = zone.branches.filter(zone.branchFilterPredicate)\n  if (branches.length === 0) {\n    return (\n      <ZoneListContext.Provider value={[]}>{children}</ZoneListContext.Provider>\n    )\n  }\n  return (\n    <QueryZones\n      variables={{ branchesId: branches.map(RM.prop('id')) }}\n      renderLoading={false}\n      render={({ zones }, { loading }) => (\n        <ZoneListContext.Provider value={loading ? null : zones}>\n          {children}\n        </ZoneListContext.Provider>\n      )}\n    />\n  )\n})\n\nexport const useZoneList = () => {\n  return useContext(ZoneListContext)\n}\n","import { reaction } from 'mobx'\nimport { useDisposable } from 'mobx-react-lite'\nimport React, { useCallback, useRef, useState } from 'react'\nimport { Form, IFormApi } from 'react-form'\nimport Goodbye from 'react-goodbye'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { ConfirmDialog } from '../../../atoms/ConfirmDialog'\nimport { Loading } from '../../../atoms/Loading'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { logDebug } from '../../../helpers/logger'\nimport { RM } from '../../../helpers/ramda'\nimport { useSnackBar } from '../../../hooks/useSnackBar'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Spacing } from '../../../styling'\nimport { useZoneId } from '../hooks/useZoneId'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { ZoneFormContent } from '../molecules/ZoneFormContent'\nimport { ZoneFormControls } from '../molecules/ZoneFormControls'\nimport { useZoneList } from './ZoneListLoader'\n\nconst DeleteButtonContainer = styled.div`\n  width: ${Spacing.ButtonHeight};\n  margin-top: ${Spacing.Middle};\n`\n\nexport const ZoneFormPanel: React.FC = () => {\n  const zoneId = useZoneId()\n  const zoneList = useZoneList()\n  const { zone: zoneModel } = useRoot()\n  const { routeToZoneList } = useZoneRouteControl()\n  const [isModified, setModified] = useState(false)\n  const formApiRef = useRef<IFormApi | null>(null)\n  const { enqueueError } = useSnackBar()\n\n  const onSave = useCallback(async () => {\n    if (formApiRef.current) {\n      await formApiRef.current.submitForm()\n      setModified(false)\n      routeToZoneList()\n    }\n  }, [])\n\n  const onDelete = useCallback(\n    async () => {\n      if (zoneId) {\n        await zoneModel.destroyZone(zoneId)\n      }\n      routeToZoneList()\n    },\n    [zoneId],\n  )\n\n  useDisposable(() =>\n    reaction(() => zoneModel.map.currentZonePoints !== null, setModified),\n  )\n\n  React.useEffect(\n    () => {\n      if (zoneList && zoneList.length === 0) {\n        enqueueError(i18n.t`Requested zone wasn't found`)\n        routeToZoneList()\n      }\n    },\n    [zoneList],\n  )\n\n  const zone =\n    zoneId && zoneList ? zoneList.find(RM.propEq('id', zoneId)) || null : null\n\n  if (!zone) {\n    return <Loading text={i18n.t`Loading form...`} />\n  }\n\n  return (\n    <Form\n      defaultValues={zone}\n      onChange={formState => {\n        logDebug('zone form change', formState.values)\n        setModified(true)\n      }}\n      onSubmit={values => zoneModel.saveZone(zoneId!, values)}\n      render={formApi => {\n        formApiRef.current = formApi\n        return (\n          <Card padding={0}>\n            <ZoneFormControls\n              isSubmitting={formApi.submitting}\n              isModified={isModified}\n              onSave={onSave}\n              onGoBack={routeToZoneList}\n            />\n            <ZoneFormContent />\n\n            <CanMutate mutationName=\"destroyZone\">\n              <DeleteButtonContainer>\n                <TouchButtonDelete\n                  disabled={formApi.submitting}\n                  confirmText={i18n.t`Remove zone ${zone.name}?`}\n                  onDelete={onDelete}\n                />\n              </DeleteButtonContainer>\n            </CanMutate>\n\n            <Goodbye when={isModified}>\n              {({ isShow, handleOk, handleCancel }) => (\n                <ConfirmDialog\n                  isShow={isShow}\n                  confirmText={i18n.t`Do you want to cancel changes for the zone?`}\n                  onConfirm={handleOk}\n                  onCancel={handleCancel}\n                />\n              )}\n            </Goodbye>\n          </Card>\n        )\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport { OverlayView } from 'react-google-maps'\nimport styled, { css } from 'styled-components'\n\nimport { GCompanyBranch } from '../graph/types'\nimport { gpsToLatLng } from '../helpers/gps'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  branch: GCompanyBranch.Fragment\n  isActive?: boolean\n}\n\nconst BranchNameStyled = styled.div`\n  ${getColors} font-size: 1.3rem;\n  white-space: nowrap;\n  padding: 0.2rem 0.5rem;\n`\n\nexport const MapCompanyBranchMarker: React.FC<IProps> = ({\n  branch,\n  isActive = true,\n}) => (\n  <OverlayView\n    getPixelPositionOffset={(width, height) => ({\n      x: -(width / 2),\n      y: -(height / 2),\n    })}\n    mapPaneName={OverlayView.MARKER_LAYER}\n    position={gpsToLatLng(branch.gps)}\n  >\n    <BranchNameStyled isActive={isActive}>{branch.name}</BranchNameStyled>\n  </OverlayView>\n)\n\nfunction getColors({ isActive }: { isActive: boolean }) {\n  return css`\n    background-color: ${isActive ? Colors.green : Colors.greyLight};\n    color: ${isActive ? Colors.white : Colors.greyDark};\n  `\n}\n","import React, { useCallback } from 'react'\nimport { Polygon } from 'react-google-maps'\n\nimport { gpsToLatLng } from '../../../helpers/gps'\n\ninterface IZoneMapAreaProps {\n  points: ReadonlyArray<GeoPoint>\n  color: string\n  priority: number\n  onFocus?(): void\n}\n\nexport const ZoneMapArea: React.FC<IZoneMapAreaProps> = props => {\n  const onAreaFocus = useCallback(\n    (e: google.maps.PolyMouseEvent) => {\n      if (props.onFocus) {\n        e.stop()\n        props.onFocus()\n      }\n    },\n    [props.onFocus],\n  )\n\n  const { points, color, priority } = props\n  return (\n    <Polygon\n      defaultPath={points.map(gpsToLatLng)}\n      options={{\n        fillColor: color,\n        fillOpacity: 0.3,\n        strokeWeight: 0,\n        zIndex: 5000 - priority,\n      }}\n      editable={false}\n      draggable={false}\n      onDblClick={onAreaFocus}\n    />\n  )\n}\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport { Polygon } from 'react-google-maps'\n\nimport { gpsToLatLng, latLngToGps } from '../../../helpers/gps'\n\ninterface IZoneMapAreaProps {\n  points: ReadonlyArray<GeoPoint>\n  color: string\n  priority: number\n  onChange(points: GeoPoint[]): void\n  onClear(): void\n}\n\nexport const ZoneMapEditableArea: React.FC<IZoneMapAreaProps> = props => {\n  const polygonRef = useRef<Polygon | null>(null)\n\n  const onAreaChange = useCallback(\n    () => {\n      if (polygonRef.current) {\n        const path = polygonRef.current.getPath()\n        props.onChange(path.getArray().map(latLngToGps))\n      }\n    },\n    [props.onChange],\n  )\n\n  useEffect(() => {\n    let listeners\n    if (polygonRef.current && props.onChange) {\n      const path = polygonRef.current.getPath()\n      listeners = [\n        path.addListener('set_at', onAreaChange),\n        path.addListener('insert_at', onAreaChange),\n        path.addListener('remove_at', onAreaChange),\n      ]\n    }\n    return () => {\n      props.onClear()\n      if (listeners) {\n        listeners.forEach(lis => lis.remove())\n      }\n    }\n  }, [])\n\n  const { points, color } = props\n  return (\n    <Polygon\n      defaultPath={points.map(gpsToLatLng)}\n      options={{\n        fillColor: color,\n        fillOpacity: 0.6,\n        strokeWeight: 2,\n        zIndex: 10000,\n      }}\n      editable={true}\n      draggable={true}\n      ref={polygonRef}\n      onDragEnd={onAreaChange}\n    />\n  )\n}\n","import { useRoot } from '../../../atoms/RootProvider'\n\nexport function useZoneModel() {\n  const { zone: zoneModel } = useRoot()\n  return zoneModel\n}\n","import React, { useCallback } from 'react'\n\nimport { BaseMap } from '../../../atoms/BaseMap'\nimport { GCompanyBranch } from '../../../graph/types'\nimport { MapCompanyBranchMarker } from '../../../molecules/MapCompanyBranchMarker'\nimport { Colors } from '../../../styling'\nimport { ZoneMapArea } from '../atoms/ZoneMapArea'\nimport { ZoneMapEditableArea } from '../atoms/ZoneMapEditableArea'\nimport { useZoneId } from '../hooks/useZoneId'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { TZone, useZoneList } from '../organisms/ZoneListLoader'\n\nexport const ZoneMapControl: React.FC = () => {\n  const zoneModel = useZoneModel()\n  const editZoneId = useZoneId()\n  const zoneList = useZoneList()\n  const { routeToZoneEdit } = useZoneRouteControl()\n\n  const branches = zoneModel.branches.filter(zoneModel.branchFilterPredicate)\n\n  const isActive = (companyBranchId: ID) =>\n    !zoneModel.hasBranchFilter || companyBranchId === zoneModel.branchFilterId\n\n  const renderZoneArea = (zone: TZone) => {\n    const areaProps = {\n      key: `zone${zone.id}`,\n      points: zone.geoPolygon,\n      priority: zone.priority,\n      color:\n        isActive(zone.companyBranch.id) && zone.enabled\n          ? zone.zoneColor.color\n          : Colors.greyMiddle,\n    }\n\n    if (zone.id === editZoneId) {\n      return (\n        <ZoneMapEditableArea\n          {...areaProps}\n          onChange={zoneModel.map.updateZonePoints}\n          onClear={zoneModel.map.clearZonePoints}\n        />\n      )\n    }\n\n    return (\n      <ZoneMapArea\n        {...areaProps}\n        onFocus={() => {\n          if (isActive(zone.companyBranch.id)) {\n            routeToZoneEdit(zone.id)\n          }\n        }}\n      />\n    )\n  }\n\n  const renderBranchLabel = useCallback(\n    (branch: GCompanyBranch.Fragment) => (\n      <MapCompanyBranchMarker\n        key={`branch${branch.id}`}\n        branch={branch}\n        isActive={isActive(branch.id)}\n      />\n    ),\n    [],\n  )\n\n  return (\n    <BaseMap model={zoneModel.map}>\n      {zoneList && zoneList.map(renderZoneArea)}\n      {branches && branches.map(renderBranchLabel)}\n    </BaseMap>\n  )\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\n\nexport const CreateZoneButton: React.FC = observer(() => {\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n  return (\n    <TouchButton\n      text={\n        zoneModel.hasBranchFilter\n          ? i18n.t`Create zone for branch`\n          : i18n.t`Select branch to create zone`\n      }\n      onClick={() => zoneModel.createZone(routeToZoneEdit)}\n      disabled={!zoneModel.hasBranchFilter}\n      color={Colors.turquoise}\n      textNextToIcon={true}\n      height={Spacing.ButtonHeight}\n      iconName=\"add_circle\"\n    />\n  )\n})\n","import React from 'react'\nimport { SortableElement } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Card } from '../../../atoms/Card'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { GCompanyBranch, GZone } from '../../../graph/types'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\n\ninterface IZoneListCardProps {\n  zone: GZone.Fragment\n  branch: GCompanyBranch.Fragment\n  onEdit(): void\n}\n\nconst ZoneNameStyled = styled.div`\n  font-size: 1.125rem;\n  margin-top: 0.2rem;\n`\n\nconst ZoneDescriptionStyled = styled.div`\n  font-size: 0.875rem;\n`\nconst ZoneFlexRowStyled = styled(FlexRowSingle)`\n  height: ${Spacing.ButtonHeight};\n`\n\nexport const ZoneListCard = SortableElement<IZoneListCardProps>(\n  ({ zone, branch, onEdit }) => (\n    <Card\n      key={zone.id}\n      padding={0}\n      color={zone.enabled ? zone.zoneColor.color : Colors.greyMiddle}\n      onClick={onEdit}\n    >\n      <ZoneFlexRowStyled>\n        <FlexColumn fixedWidth={true} padding=\"0 0.5rem 0 0\">\n          <TouchButton\n            width={Spacing.ButtonHeight}\n            height={Spacing.ButtonHeight}\n            iconName=\"mode_edit\"\n          />\n        </FlexColumn>\n        <FlexColumn widthGrowIndex={1}>\n          <ZoneNameStyled>\n            {zone.name}\n            {` [P${zone.priority}]`}\n          </ZoneNameStyled>\n          <ZoneDescriptionStyled>{branch.name}</ZoneDescriptionStyled>\n        </FlexColumn>\n        <FlexColumn padding=\"0\">\n          <DragHandle />\n        </FlexColumn>\n      </ZoneFlexRowStyled>\n    </Card>\n  ),\n)\n","import * as R from 'ramda'\nimport React, { Fragment } from 'react'\nimport { SortableContainer, SortEndHandler } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { GCompanyBranch, GZone } from '../../../graph/types'\nimport { TZoneModel } from '../../../segments/zones/models/ZoneModel'\nimport { ZoneListCard } from '../atoms/ZoneListCard'\n\ninterface IZoneListProps {\n  branches: GCompanyBranch.Fragment[]\n  zones: GZone.Fragment[]\n  zoneModel: TZoneModel\n  onZoneEdit(zoneID: ID): void\n}\n\nconst ZoneListContainerStyled = SortableContainer(styled.div`\n  margin-top: 0.5rem;\n  cursor: arrow;\n`)\n\nconst sortZones = R.sortWith<GZone.Fragment>([\n  R.ascend(R.path(['companyBranch', 'name'])),\n  R.descend(R.prop('priority')),\n])\n\nconst groupByBranch = R.groupBy((zone: GZone.Fragment) => zone.companyBranch.id)\n\nexport const ZoneList: React.FC<IZoneListProps> = ({\n  branches,\n  zones,\n  zoneModel,\n  onZoneEdit,\n}) => {\n  const renderZone = (zone: GZone.Fragment, idx: number) => (\n    <ZoneListCard\n      key={zone.id}\n      zone={zone}\n      branch={branches.find(R.propEq('id', zone.companyBranch.id))!}\n      index={idx}\n      collection={zone.companyBranch.id}\n      onEdit={() => onZoneEdit(zone.id)}\n    />\n  )\n  const renderBranch = (\n    branch: GCompanyBranch.Fragment,\n    branchZones: GZone.Fragment[],\n  ) => (\n    <Fragment key={branch.id}>\n      <CardListTitle>{branch.name}</CardListTitle>\n      {branchZones.map(renderZone)}\n    </Fragment>\n  )\n\n  let output\n  let onSortEnd: SortEndHandler\n\n  if (branches.length === 1) {\n    const sorted = sortZones(zones)\n    output = sorted.map(renderZone)\n    onSortEnd = ({ oldIndex, newIndex }) => {\n      const zone = sorted[oldIndex]\n      zoneModel.changeZonePriority(zone, oldIndex, newIndex)\n    }\n  } else {\n    const grouped = R.mapObjIndexed(sortZones, groupByBranch(zones))\n    output = branches.map(branch => {\n      const branchZones = grouped[branch.id]\n      return branchZones ? renderBranch(branch, branchZones) : null\n    })\n    onSortEnd = ({ oldIndex, newIndex, collection }) => {\n      const group = grouped[collection]\n      const zone = group[oldIndex]\n      zoneModel.changeZonePriority(zone, oldIndex, newIndex)\n    }\n  }\n\n  return (\n    <ZoneListContainerStyled\n      useDragHandle={true}\n      lockAxis=\"y\"\n      onSortEnd={onSortEnd}\n    >\n      {output}\n    </ZoneListContainerStyled>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { BulletList } from 'react-content-loader'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { ZoneList } from '../molecules/ZoneList'\nimport { useZoneList } from './ZoneListLoader'\n\nexport const ZoneListControl: React.FC = () => {\n  const zoneList = useZoneList()\n  if (zoneList === null) {\n    return <BulletList primaryOpacity={0.2} secondaryOpacity={0.2} />\n  }\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n  if (zoneModel.brand === null) {\n    return (\n      <CardListTitle>\n        <Trans>Select brand to see its zones</Trans>\n      </CardListTitle>\n    )\n  }\n  return (\n    <ZoneList\n      zoneModel={zoneModel}\n      zones={zoneList.filter(zoneModel.zoneFilterPredicate)}\n      branches={zoneModel.root.user.filterBranches(\n        zoneModel.branchFilterPredicate,\n      )}\n      onZoneEdit={routeToZoneEdit}\n    />\n  )\n}\n","import React from 'react'\n\nimport { GCompanyBranch } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport { CompanyBranchDropdown } from '../../../molecules/CompanyBranchDropdown'\n\ntype TBranch = GCompanyBranch.Fragment\n\ninterface IProps {\n  branches: TBranch[]\n  selectedBranch: Maybe<TBranch>\n  onSelection(branch: Maybe<TBranch>): void\n  autoFocus: boolean\n}\n\nexport const ZoneFilterBranch: React.FC<IProps> = ({\n  branches,\n  selectedBranch,\n  onSelection,\n  autoFocus,\n}) => (\n  <CompanyBranchDropdown\n    placeholder={i18n.t`Select branch`}\n    branches={branches}\n    selectedBranch={selectedBranch}\n    onSingleSelection={onSelection}\n    formatOptionLabel={RM.prop('name')}\n    isClearable={true}\n    autoFocus={autoFocus}\n  />\n)\n","import React from 'react'\n\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { GCompanyBranch } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\n\ntype TBrand = GCompanyBranch.Brand\n\ninterface IProps {\n  brands: ReadonlyArray<TBrand>\n  selectedBrand: Maybe<TBrand>\n  onSelection(brand: Maybe<TBrand>): void\n}\n\nexport const ZoneFilterBrand: React.FC<IProps> = ({\n  brands,\n  selectedBrand,\n  onSelection,\n}) => (\n  <SelectControl<TBrand>\n    placeholder={i18n.t`Select brand`}\n    options={brands as TBrand[]}\n    value={selectedBrand}\n    formatOptionLabel={RM.prop('name')}\n    getOptionValue={RM.prop('id')}\n    getOptionLabel={RM.prop('name')}\n    isClearable={true}\n    isSearchable={true}\n    onChange={value => onSelection(value as Maybe<TBrand>)}\n    autoFocus={true}\n  />\n)\n","import { autorun } from 'mobx'\nimport { observer, useDisposable } from 'mobx-react-lite'\nimport React, { useCallback } from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { GCompanyBranch } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { ZoneFilterBranch } from '../molecules/ZoneFIlterBranch'\nimport { ZoneFilterBrand } from '../molecules/ZoneFilterBrand'\n\nexport const ZoneFilter: React.FC = observer(() => {\n  const { user, zone } = useRoot()\n  const branches = user.branches\n\n  const getBrandBranches = useCallback(\n    (brand: Maybe<GCompanyBranch.Brand>) =>\n      brand === null\n        ? []\n        : user.branches.filter(RM.pathEq(['brand', 'id'], brand.id)),\n    [],\n  )\n\n  useDisposable(() =>\n    autorun(() => {\n      if (branches.length === 1) {\n        zone.setBranchFilter(RM.head(branches)!)\n      }\n    }),\n  )\n\n  // no filter is shown for less than 1 branch available\n  if (branches.length <= 1) {\n    return null\n  }\n\n  const singleBrand = user.brands.length === 1 ? RM.head(user.brands)! : null\n  if (singleBrand) {\n    zone.setBrandFilter(singleBrand, getBrandBranches(zone.brand))\n  }\n\n  return (\n    <>\n      {!singleBrand && (\n        <ZoneFilterBrand\n          brands={user.brands}\n          selectedBrand={zone.brand}\n          onSelection={brand => {\n            if (brand === null) {\n              zone.clearBrandFilter()\n            } else {\n              zone.setBrandFilter(brand, getBrandBranches(brand))\n            }\n          }}\n        />\n      )}\n      {!singleBrand && <VerticalGap />}\n      <ZoneFilterBranch\n        branches={getBrandBranches(zone.brand)}\n        selectedBranch={zone.branch}\n        autoFocus={Boolean(singleBrand)}\n        onSelection={branch => {\n          if (!branch) {\n            zone.clearBranchFilter()\n          } else {\n            zone.setBranchFilter(branch)\n          }\n        }}\n      />\n    </>\n  )\n})\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { ScrollArea } from '../../../atoms/ScrollArea'\nimport { CreateZoneButton } from '../molecules/CreateZoneButton'\nimport { ZoneListControl } from '../organisms/ZoneListControl'\nimport { ZoneFilter } from './ZoneFilter'\n\nconst ZoneMenuContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst FixedHeaderContainer = styled.div`\n  flex: 0 0 auto;\n`\nconst ScrollAreaContainer = styled.div`\n  flex: 1 1 0;\n  min-height: 0;\n`\nexport const ZoneMenuPanel: React.FC = () => (\n  <ZoneMenuContainer>\n    <FixedHeaderContainer>\n      <Card>\n        <ZoneFilter />\n      </Card>\n      <CanMutate mutationName=\"createZone\">\n        <CreateZoneButton />\n      </CanMutate>\n    </FixedHeaderContainer>\n\n    <ScrollAreaContainer>\n      <ScrollArea>\n        <ZoneListControl />\n      </ScrollArea>\n    </ScrollAreaContainer>\n  </ZoneMenuContainer>\n)\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport { i18n } from '../../../i18n'\nimport { PageLayout } from '../../../molecules/PageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { ZoneFormPanel } from '../organisms/ZoneFormPanel'\nimport { ZoneListLoader } from '../organisms/ZoneListLoader'\nimport { ZoneMapControl } from '../organisms/ZoneMapControl'\nimport { ZoneMenuPanel } from '../organisms/ZoneMenuPanel'\n\ninterface IProps extends RouteComponentProps<{ zoneId?: ID }> {}\n\nexport const ZonePageLayout: React.FC<IProps> = ({ match }) => {\n  const isEditing = Boolean(match.params.zoneId)\n  return (\n    <ZoneListLoader>\n      <PageLayout\n        pageTitle={i18n.t`Delivery zones`}\n        useBackButton={true}\n        backRoute=\"/settings\"\n      />\n      <PageLayoutFullHeightItem\n        widthInColumns={6}\n        column={10}\n        withScrollArea={isEditing}\n      >\n        {isEditing ? <ZoneFormPanel /> : <ZoneMenuPanel />}\n      </PageLayoutFullHeightItem>\n      <PageLayoutFullHeightItem widthInColumns={10}>\n        <ZoneMapControl />\n      </PageLayoutFullHeightItem>\n    </ZoneListLoader>\n  )\n}\n","import React from 'react'\nimport { Route, RouteComponentProps, Switch } from 'react-router-dom'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { ZonePageLayout } from '../../../segments/zones/pages/ZonePageLayout'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\n\ninterface IZoneMenuRoutesProps extends RouteComponentProps<{}> {}\n\nexport const ZoneMenuRoutes: React.FC<IZoneMenuRoutesProps> = () => {\n  const { getRouteToZone } = useZoneRouteControl()\n  return (\n    <Switch>\n      <Route path={getRouteToZone(':zoneId?')} component={ZonePageLayout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  )\n}\n\nexport default ZoneMenuRoutes\n"],"sourceRoot":""}