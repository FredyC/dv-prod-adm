{"version":3,"sources":["atoms/FormInputTextBox.tsx","helpers/form.ts","molecules/FormSubmit.tsx","atoms/LoginPageBackground.tsx","assets/bg_login.jpg","assets/bg_login@2x.jpg","atoms/NotifyMessage.tsx","segments/login/molecules/PasswordLoginError.tsx","segments/login/organisms/PasswordLoginForm.tsx","segments/login/pages/PasswordLoginPage.tsx","segments/login/routes/PasswordLoginRoute.tsx"],"names":["inputStyle","styled_components__WEBPACK_IMPORTED_MODULE_2__","_styling__WEBPACK_IMPORTED_MODULE_5__","MarginAroundFormComponents","invalidInputStyle","FormInputStyled","input","withConfig","displayName","invalid","FormInputTextBox","react__WEBPACK_IMPORTED_MODULE_0___default","a","forwardRef","_a","inputRef","field","inputWidth","DefaultInputWidth","inputWidthUnit","DefaultSizeUnit","isRequired","validatioName","validate","props","__rest","createElement","react_form__WEBPACK_IMPORTED_MODULE_1__","value","Object","validator__WEBPACK_IMPORTED_MODULE_3__","_i18n__WEBPACK_IMPORTED_MODULE_4__","_","fieldApi","_extends","width","onChange","ev","setTouched","setValue","target","ref","__webpack_require__","d","__webpack_exports__","isFormValid","validateIsRequired","validator__WEBPACK_IMPORTED_MODULE_0__","_i18n__WEBPACK_IMPORTED_MODULE_1__","formState","errors","keys","length","fieldName","FormSubmit","children","form","_molecules_TouchButton__WEBPACK_IMPORTED_MODULE_2__","color","_styling__WEBPACK_IMPORTED_MODULE_3__","green","disabled","_helpers_form__WEBPACK_IMPORTED_MODULE_1__","submitting","onClick","e","preventDefault","submitForm","LoginPageBackground","styled_components__WEBPACK_IMPORTED_MODULE_0__","_assets_bg_login_jpg__WEBPACK_IMPORTED_MODULE_1__","_assets_bg_login_jpg__WEBPACK_IMPORTED_MODULE_1___default","n","_assets_bg_login_2x_jpg__WEBPACK_IMPORTED_MODULE_2__","_assets_bg_login_2x_jpg__WEBPACK_IMPORTED_MODULE_2___default","div","module","exports","p","NotifyMessageStyled","styled_components_browser_esm","NotifyMessage","isVisible","isError","react_default","react_acrylic_default","height","opacity","left","blur","style","colorOverlay","styling","red","data-testid","PasswordLoginError","model","index_module","render","hasFailed","errorMessage","LoginContainerStyled","PasswordContainerStyled","SubmitButtonContainerStyled","PasswordLoginForm","es","onSubmit","username","password","requestToken","formApi","name","i18n","autoFocus","placeholder","type","_lingui_react","id","PasswordLoginPage","PageTitle","title","GridLayout","layouts","i","x","y","w","h","key","Display","PasswordLoginRoute","auth","RootProvider","isAuthenticatedUser","react_router","to","provider","passwordLogin"],"mappings":"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","file":"static/js/48.fa7c9ed6.chunk.js","sourcesContent":["import React from 'react'\nimport { Field, FieldType, ValidationResult } from 'react-form'\nimport styled, { css } from 'styled-components'\nimport { isEmpty } from 'validator'\n\nimport { i18n } from '../i18n'\nimport { Spacing } from '../styling'\n\ninterface IProps extends React.InputHTMLAttributes<never> {\n  field: FieldType\n  defaultValue?: string\n  inputWidth?: number\n  inputWidthUnit?: string\n  isRequired?: boolean\n  validatioName?: string\n  validate?(value: string): ValidationResult\n}\n\nexport type TFormInputTextBoxProps = IProps\n\nconst inputStyle = css`\n  outline: none;\n  margin: ${Spacing.MarginAroundFormComponents};\n`\n\nconst invalidInputStyle = css`\n  border: '1px red solid';\n`\n\nexport const FormInputStyled = styled.input`\n  ${inputStyle};\n  ${({ invalid }: { invalid?: boolean }) => invalid && invalidInputStyle};\n`\n\nexport const FormInputTextBox = React.forwardRef<HTMLInputElement, IProps>(\n  (\n    {\n      field,\n      inputWidth = Spacing.DefaultInputWidth,\n      inputWidthUnit = Spacing.DefaultSizeUnit,\n      isRequired,\n      validatioName,\n      validate,\n      ...props\n    },\n    inputRef,\n  ) => (\n    <Field\n      field={field}\n      validate={\n        validate ||\n        (value => {\n          if (isRequired && isEmpty(value + '')) {\n            return i18n.t`${validatioName} is required`\n          }\n          return null\n        })\n      }\n    >\n      {fieldApi => (\n        <FormInputStyled\n          width={`${inputWidth}${inputWidthUnit}`}\n          value={!fieldApi.value && fieldApi.value !== 0 ? '' : fieldApi.value}\n          onChange={ev => {\n            fieldApi.setTouched(true)\n            fieldApi.setValue(ev.target.value)\n          }}\n          // @ts-ignore\n          ref={inputRef}\n          {...props}\n        />\n      )}\n    </Field>\n  ),\n)\n","import { IFormState } from 'react-form'\nimport { isEmpty } from 'validator'\n\nimport { i18n } from '../i18n'\n\nexport function isFormValid(formState: IFormState) {\n  return !formState.errors || Object.keys(formState.errors).length === 0\n}\n\nexport function validateIsRequired(fieldName: string) {\n  return (value: string) =>\n    isEmpty(value + '') ? i18n.t`${fieldName} must be entered` : null\n}\n","import React from 'react'\nimport { IFormApi, IFormState } from 'react-form'\n\nimport { isFormValid } from '../helpers/form'\nimport { ITouchButtonProps, TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\ninterface IProps extends ITouchButtonProps {\n  form: IFormState & IFormApi\n}\n\nexport const FormSubmit: React.SFC<IProps> = ({ children, form, ...props }) => (\n  <TouchButton\n    color={Colors.green}\n    disabled={!isFormValid(form) || form.submitting}\n    onClick={e => {\n      e.preventDefault()\n      form.submitForm(e)\n    }}\n    {...props}\n  >\n    {children}\n  </TouchButton>\n)\n","import styled from 'styled-components'\n\nimport backgroundImage from '../assets/bg_login.jpg'\nimport backgroundImage2x from '../assets/bg_login@2x.jpg'\n\nexport const LoginPageBackground = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-image: url(${backgroundImage});\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n\n  @media only screen and (-webkit-min-device-pixel-ratio: 1.3),\n    only screen and (min--moz-device-pixel-ratio: 1.3),\n    only screen and (-o-min-device-pixel-ratio: 2.6/2),\n    only screen and (min-device-pixel-ratio: 1.3),\n    only screen and (min-width: 1024px) {\n    background-image: url(${backgroundImage2x});\n  }\n`\n","module.exports = __webpack_public_path__ + \"static/media/bg_login.382d98be.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_login@2x.35ab1818.jpg\";","import React from 'react'\nimport Acrylic from 'react-acrylic'\nimport styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface INotifyMessageProps {\n  isError?: Boolean\n  isVisible: Boolean\n  onClick?(): void\n}\n\nconst NotifyMessageStyled = styled.div`\n  color: white;\n  text-align: center;\n  margin: 0.8rem 0.5rem 0.5rem 0.5rem;\n  font-size: 1.375rem;\n`\n\nexport const NotifyMessage: React.SFC<INotifyMessageProps> = ({\n  children,\n  isVisible,\n  isError = false,\n  onClick,\n}) =>\n  isVisible ? (\n    <Acrylic\n      onClick={onClick}\n      width=\"60%\"\n      height=\"3.46rem\"\n      opacity=\"0.4\"\n      left=\"20%\"\n      blur={5}\n      style=\"border-radius: 1rem;\"\n      colorOverlay={isError ? Colors.red : Colors.green}\n    >\n      <NotifyMessageStyled data-testid={`notify${isError ? '-error' : ''}`}>\n        {children}\n      </NotifyMessageStyled>\n    </Acrylic>\n  ) : null\n","import { Observer } from 'mobx-react'\nimport React from 'react'\n\nimport { NotifyMessage } from '../../../atoms/NotifyMessage'\nimport { TPasswordLoginModel } from '../models/PasswordLoginModel'\n\ninterface IPasswordLoginErrorProps {\n  model: TPasswordLoginModel\n}\n\nexport const PasswordLoginError: React.SFC<IPasswordLoginErrorProps> = ({\n  model,\n}) => (\n  <Observer\n    render={() =>\n      model.hasFailed ? (\n        <NotifyMessage isVisible={true} isError={true}>\n          {model.errorMessage}\n        </NotifyMessage>\n      ) : null\n    }\n  />\n)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport { Form } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { i18n } from '../../../i18n'\nimport { FormSubmit } from '../../../molecules/FormSubmit'\nimport { TPasswordLoginModel } from '../models/PasswordLoginModel'\n\ninterface IPasswordLoginFormProps {\n  model: TPasswordLoginModel\n}\n\nconst LoginContainerStyled = styled.div`\n  display: inline-block;\n  margin: 0.5rem;\n`\nconst PasswordContainerStyled = styled.div`\n  margin: 0.5rem;\n`\nconst SubmitButtonContainerStyled = styled.div`\n  display: inline-block;\n  width: 14rem;\n  margin: 0.5rem;\n`\n\ninterface IFormValues {\n  username: string\n  password: string\n}\n\nexport const PasswordLoginForm: React.SFC<IPasswordLoginFormProps> = ({\n  model,\n}) => (\n  <Form\n    onSubmit={({ username, password }: IFormValues) =>\n      model.requestToken(username, password)\n    }\n    render={formApi => (\n      <form onSubmit={formApi.submitForm}>\n        <LoginContainerStyled>\n          <FormInputTextBox\n            field=\"username\"\n            name=\"username\"\n            isRequired={true}\n            validatioName={i18n.t`username`}\n            autoFocus={true}\n            placeholder={i18n.t`username`}\n          />\n        </LoginContainerStyled>\n\n        <PasswordContainerStyled>\n          <FormInputTextBox\n            field=\"password\"\n            name=\"password\"\n            isRequired={true}\n            validatioName={i18n.t`password`}\n            type=\"password\"\n            placeholder={i18n.t`password`}\n          />\n        </PasswordContainerStyled>\n\n        <SubmitButtonContainerStyled>\n          <FormSubmit form={formApi}>\n            <Trans>Sign-in</Trans>\n          </FormSubmit>\n        </SubmitButtonContainerStyled>\n      </form>\n    )}\n  />\n)\n","import React from 'react'\n\nimport { GridLayout } from '../../../atoms/GridLayout'\nimport { LoginPageBackground } from '../../../atoms/LoginPageBackground'\nimport { PageTitle } from '../../../atoms/PageTitle'\nimport { i18n } from '../../../i18n'\nimport { TPasswordLoginModel } from '../models/PasswordLoginModel'\nimport { PasswordLoginError } from '../molecules/PasswordLoginError'\nimport { PasswordLoginForm } from '../organisms/PasswordLoginForm'\n\ninterface IPasswordLoginPageProps {\n  model: TPasswordLoginModel\n}\n\nfunction getLayout() {\n  return [\n    { i: 'title', x: 6, y: 2, w: 8, h: 1 },\n    { i: 'loginform', x: 6, y: 3, w: 8, h: 4 },\n  ]\n}\n\nexport const PasswordLoginPage: React.SFC<IPasswordLoginPageProps> = ({\n  model,\n}) => (\n  <LoginPageBackground>\n    <PageTitle title={i18n.t`Login page`} />\n    <GridLayout layouts={getLayout()}>\n      <div key=\"title\">\n        <PageTitle.Display />\n      </div>\n      <div key=\"loginform\">\n        <PasswordLoginForm model={model} />\n      </div>\n    </GridLayout>\n    <PasswordLoginError model={model} />\n  </LoginPageBackground>\n)\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { PasswordLoginPage } from '../pages/PasswordLoginPage'\n\nexport const PasswordLoginRoute = () => {\n  const { auth } = useRoot()\n  return auth.isAuthenticatedUser ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <PasswordLoginPage model={auth.provider.passwordLogin} />\n  )\n}\n\nexport default PasswordLoginRoute\n"],"sourceRoot":""}