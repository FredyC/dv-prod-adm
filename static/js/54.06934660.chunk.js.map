{"version":3,"sources":["molecules/PageLayoutFullHeightItem.tsx","atoms/VerticalGap.tsx","atoms/ScrollArea.tsx","atoms/FlexRowSingle.tsx","atoms/RelativeLink.tsx","atoms/FormInputFlatSelect.tsx","atoms/DragHandle.tsx","atoms/FormInputSelect.tsx","molecules/TouchButtonEdit.tsx","molecules/TouchButtonRemove.tsx","molecules/TouchButtonVisibility.tsx","atoms/DataTable.tsx","molecules/SortableDataTable.tsx","segments/menu/molecules/CategoryListTable.tsx","segments/menu/molecules/CreateButton.tsx","segments/menu/organisms/CategoryList.tsx","segments/menu/pages/MenuCategoryListPage.tsx","molecules/TopRightButtonContainer.tsx","segments/menu/molecules/SubmitButton.tsx","atoms/FormContainer.tsx","atoms/PictogramDisplay.tsx","segments/menu/atoms/MenuCategoryPictogramSelect.tsx","segments/menu/molecules/FormDeleteButton.tsx","segments/menu/molecules/FormInputInternalNote.tsx","segments/menu/molecules/FormInputName.tsx","segments/menu/organisms/CategoryFormBasic.tsx","atoms/FormLoader.tsx","atoms/NavigateBack.tsx","segments/menu/atoms/MenuBaseFormLoader.tsx","segments/menu/hooks/useMenu.ts","segments/menu/organisms/CategoryFormLoader.tsx","segments/menu/molecules/RecipeListTable.tsx","segments/menu/atoms/MenuSuggestionPanel.tsx","segments/menu/organisms/RecipeSuggestionPanel.tsx","segments/menu/organisms/CategoryRecipesView.tsx","segments/menu/pages/MenuCategoryPage.tsx","atoms/DataTableContainer.tsx","atoms/RelativeRedirect.tsx","segments/menu/molecules/RecipeTypeSelection.tsx","segments/menu/organisms/RecipeListLoader.tsx","segments/menu/pages/MenuRecipeListPage.tsx","segments/menu/atoms/IsCategoryType.tsx","segments/menu/organisms/CategorySuggestionPanel.tsx","segments/menu/organisms/RecipeCategoryView.tsx","segments/menu/molecules/FormInputCode.tsx","segments/menu/molecules/FormInputDescription.tsx","segments/menu/molecules/FormInputAllergens.graphql.ts","segments/menu/atoms/AllergenIndicator.tsx","segments/menu/molecules/RecipeAllergenDisplay.tsx","segments/menu/organisms/RecipeFormBasic.tsx","segments/menu/organisms/RecipeFormLoader.tsx","segments/menu/molecules/FormInputPrice.tsx","segments/menu/molecules/FormInputVatSelect.graphql.ts","segments/menu/molecules/FormInputVatSelect.tsx","segments/menu/molecules/FormPricingField.tsx","segments/menu/molecules/RecipeAssocListTable.tsx","segments/menu/organisms/RecipeAssociatedView.tsx","segments/menu/organisms/RecipeFormPricing.tsx","segments/menu/molecules/RecipeIngredientsTable.tsx","segments/menu/organisms/RecipeIngredientsView.tsx","segments/menu/pages/MenuRecipePage.tsx","segments/menu/molecules/StockDepositConfirmButton.tsx","segments/menu/molecules/StockDepositFilterInput.tsx","segments/menu/molecules/StockDepositQuantityInput.tsx","segments/menu/molecules/StockDepositResultTable.tsx","segments/menu/organisms/StockDepositControl.tsx","segments/menu/organisms/StockDepositLoader.graphql.ts","graph/buildMutation.tsx","segments/menu/organisms/StockDepositLoader.tsx","segments/menu/pages/MenuStockDepositPage.tsx","segments/menu/organisms/StockListTable.tsx","segments/menu/organisms/StockListLoader.tsx","segments/menu/pages/MenuStockListPage.tsx","segments/menu/organisms/StockForm.graphql.ts","segments/menu/organisms/StockFormLoader.tsx","segments/menu/molecules/FormInputAllergens.tsx","segments/menu/molecules/FormInputAllowNegative.tsx","segments/menu/molecules/FormInputPlu.tsx","segments/menu/molecules/FormInputWareUnit.graphql.ts","segments/menu/molecules/FormInputWareUnit.tsx","segments/menu/organisms/StockFormMain.tsx","segments/menu/organisms/StockRecipesView.graphql.ts","segments/menu/organisms/StockRecipesVIew.tsx","segments/menu/pages/MenuStockPage.tsx","segments/menu/routes/MenuRoutes.tsx"],"names":["__webpack_require__","d","__webpack_exports__","PageLayoutFullHeightItem","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","styled_components__WEBPACK_IMPORTED_MODULE_1__","_atoms_ScrollArea__WEBPACK_IMPORTED_MODULE_2__","_styling__WEBPACK_IMPORTED_MODULE_3__","FullHeightDiv","div","withConfig","displayName","props","undefined","widthInColumns","LayoutGridCellMargin","widthComputed","column","leftPos","row","topPos","FullHeightDivStyled","children","withScrollArea","scrollAreaId","a","createElement","id","VerticalGap","size","sizeUnit","ScrollArea","FlexRowSingle","justify","RelativeLink","_a","to","from","linkProps","__rest","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","location","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","_extends","resolveLocation","pathname","Object","resolve_pathname__WEBPACK_IMPORTED_MODULE_3__","resolved","assign","FormInputFlatSelect","Component","[object Object]","this","validate","value","isRequired","isMulti","validationName","Array","isArray","length","_i18n__WEBPACK_IMPORTED_MODULE_3__","_","fieldApi","items","defaultSelection","getItemId","selection","isSelected","item","includes","selectedItems","filter","onMultiSelection","setValue","map","setTouched","selectedItem","find","onSingleSelection","field","fieldIsPure","isClearable","react_form__WEBPACK_IMPORTED_MODULE_1__","pure","_SelectControlFlat__WEBPACK_IMPORTED_MODULE_4__","getControlProps","isInvalid","Boolean","error","defaultProps","_helpers_ramda__WEBPACK_IMPORTED_MODULE_2__","prop","DragHandle","react_sortable_hoc__WEBPACK_IMPORTED_MODULE_1__","styled_components__WEBPACK_IMPORTED_MODULE_2__","_Icon__WEBPACK_IMPORTED_MODULE_3__","DragHandleContainerStyled","iconName","FormInputSelect","0","validatioName","options","getOptionValue","defaultValue","F","onChange","selectedOptions","option","_SelectControl__WEBPACK_IMPORTED_MODULE_4__","onFocus","styles","control","base","borderColor","TouchButtonEdit","target","Link","react_default","TouchButton","width","styling","ButtonHeight","height","TouchButtonRemove","TouchButtonRemove_rest","TouchButtonRemove_extends","TouchButtonVisibility","isVisible","TouchButtonVisibility_rest","TouchButtonVisibility_extends","iconColor","white","greyMiddle","color","DataTable_DataTable","react","isLoading","heightStretch","DataTable_rest","es","DataTable_extends","autoHeight","headerHeight","rowHeight","rowCount","rowGetter","index","noRowsRenderer","Pacman","renderTable","scrollElement","window","disableHeight","checkColumnAccess","canQuery","canMutate","renderer","cellProps","result","CanQuery","queryName","CanMutate","mutationName","ColumnRendererEdit","cellData","ColumnRendererRemove","columnData","onClick","onRemove","ColumnRendererVisibility","rowData","onToggle","NoteText","styled_components_browser_esm","ColumnRendererWithNote","Fragment","noteKey","DataTableEmptyText","text","i18n","SortableTableRowRenderer","commonjs","columns","style","className","SortableDataTable_rest","SortableDataTableContainer","SortableDataTable_SortableDataTable","state","sortedItems","onHandleSorting","newIndex","oldIndex","__awaiter","currentItems","setState","onSort","sortSuccess","offset","SortableDataTable_extends","useDragHandle","lockAxis","lockToContainerEdges","onSortEnd","rowRenderer","rowProps","getDerivedStateFromProps","nextProps","CategoryListTable","categories","showEditColumn","showRemoveColumn","showVisibilityColumn","showHeader","isSortable","noRowsDisplay","disableHeader","CategoryListTable_extends","dataKey","cellRenderer","cellDataGetter","MenuCategoryModel","categoryType","enum","label","toLocaleLowerCase","CreateButtonContainer","CreateButton","routeTo","green","CategoryList","headline","subHeadline","FlexColumn","widthGrowIndex","Headline","fixedWidth","WithRoot","render","settings","CategoryList_graphql","CategoryList_extends","getQueryProps","renderLoading","wareCategories","menu","category","changeVisibility","sortCategory","PartialDataTableContainer","MenuCategoryListPage","FullPageLayout","pageTitle","useBackButton","Card","stretchToParent","SettingsCompanyBranchPicker","types","MAIN","SIDE_DISH","COVER","TopRightButtonContainer","SubmitButton","isCreate","react_form_es","form","FormSubmit","helpers_form","getButtonText","FormContainer","FormColumn","PictogramDisplayStyled","fontSize","fontSizeUnit","PictogramDisplay","pictogramId","getClassName","MenuCategoryPictogramSelect","SelectControl","pictogram","Flaticon","ramda","formatOptionLabel","components","SingleValue","data","container","menuList","maxHeight","isSearchable","minWidth","FormDeleteButton","confirmText","onDelete","react_router","history","TouchButtonDelete","FormDeleteButton_awaiter","goBack","FormInputInternalNote","icon","FormInputInternalNote_rest","IconLine","labelWidth","FormInputTextBox","FormInputInternalNote_extends","inputWidth","FormInputName","FormInputName_rest","FormInputName_extends","CategoryBasicForm","placeholder","FormInputCheckbox","WithSettings","deleteCategory","FormLoader","shouldLoad","loader","FormLoader_rest","values","setValues","then","FormLoader_extends","NavigateBack","ErrorPop","MenuBaseFormLoader_MenuBaseFormLoader","submitError","validationErrors","renderSubmitError","renderValidationErrors","messages","ApolloError","propEq","userErrors","graphQLErrors","renderPopover","errors","index_es","open","anchorEl","document","getElementById","onClose","anchorOrigin","vertical","horizontal","message","idx","key","onCreate","onUpdate","getDefaultValues","loadValues","loadDefaults","defaultValues","MenuBaseFormLoader_awaiter","loadedDefaults","defaults","formApi","logger","onSubmit","onSubmitFailure","keys","renderErrors","useMenu","RootProvider","CategoryFormLoader","categoryId","createCategory","updateCategory","visible","internalNoteLabel","nameLabel","recipes","getDefaults","CategoryFormLoader_awaiter","client","query","CategoryForm_graphql","variables","fetchPolicy","wareCategory","RecipeListTable","onSortRecipe","showTypeColumn","RecipeListTable_extends","MenuRecipeModel","recipeType","ColumnRendererCode","ColumnRendererPrice","priceType","DELIVERY","INHOUSE","prices","foundPrice","pathEq","price","formattedValue","type","MenuSuggestionPanel_MenuSuggestionPanel","selected","onAdd","onSelect","addLabel","addButtonText","MenuSuggestionPanel_rest","margin","MenuSuggestionPanel_extends","onKeyDown","ev","getOptionLabel","disabled","RecipeSuggestionPanel","filterRecipes","observe","RecipeList_graphql","RecipeSuggestionPanel_extends","CategoryRecipesView","recipe","recipeId","reject","without","addedRecipe","concat","titleByType","_lingui_react","MenuCategoryPage","hideLogoutWidget","DataTableContainer","RelativeRedirect","RelativeRedirect_rest","RelativeRedirect_extends","RecipeTypeSelection_RecipeTypeSelection","isOpen","onOpen","push","preventDefault","RecipeListLoader","user","RecipeListLoader_extends","queryProps","loading","MenuRecipeListPage","IsCategoryType","isMain","isSideDish","isCover","CategorySuggestionPanel","currentCategories","CategorySuggestionPanel_extends","RecipeCategoryView","noRowsText","addedCategory","FormInputCode","FormInputCode_rest","FormInputCode_extends","FormInputDescription","FormInputDescription_rest","FormInputDescription_extends","AllergensQuery","src_default","AllergenFragment_graphql","QueryAllergens","buildQuery","AllergenBox","active","black","yellow","MenuAllergenIndicator","allergens","allergen","AllergenIndicator_extends","title","code","extractAllergens","pipe","flatten","uniq","RecipeAllergenDisplay","RecipeFormBasic","deleteRecipe","RecipeFormLoader","createRecipe","updateRecipe","RecipeFormLoader_getDefaults","RecipeFormLoader_awaiter","defaultVats","getDefaultVat","getPriceMap","vatId","RecipeForm_graphql","recipeSource","associatedRecipes","sourceAssociatedRecipes","warePriceType","associatedRecipe","formattedPrice","ingredients","sourceIngredients","quantity","stockItem","wareUnit","unitLabel","sourcePrice","sourcePrices","vat","acc","reduce","internalNote","descriptionLabel","sideDishes","formInputPriceValidate","validator","FormInputPrice","FormInputPrice_rest","FormInputPrice_extends","VatsQuery","QueryVat","DphContainer","FormInputVatSelect","FormInputVatSelect_extends","vats","formatItem","FormPricingField","RecipeAssocListTable","RecipeAssociatedView","priceTypeRecipes","rejectSuggestions","some","isAssociated","onAddRecipe","RecipeAssociatedView_extends","priceTypes","RecipeFormPricing","RecipeIngredientsTable","rowIndex","validateQuantity","fieldName","validator_default","isEmpty","isFloat","min","unselectedStockOnly","differenceWith","RecipeIngredientsView","StockList_graphql","RecipeIngredientsView_extends","stockItems","addedStockItem","MenuRecipePage_titleByType","MenuRecipePage","StockDepositConfirmButton","onConfirm","numeral_default","format","1","StockDepositFilterInput","forwardRef","onFilter","ref","autoFocus","onKeyPressCapture","StockDepositQuantityInput","enabled","StockDepositResultTable","searchValue","ColumnRendererSelect","stockWithUnit","highlightMatch","HighlightedValue","span","indexOf","begin","substring","match","end","StockDepositControl_StockDepositControl","targetStockItem","filteredStockItems","inputQuantity","filterInputRef","createRef","quantityInputRef","trim","partialMatch","search","propValue","isPartialMatch","cond","T","propSatisfies","head","onConfirmFilter","current","focus","onQuantity","onSelectStockItem","onDeposit","hasSearchValue","isNoneFind","isMultiFind","cardName","MenuStockDepositQuery","WareUnitFragment_graphql","ChangeMenuStockQuantityMutation","ChangeMenuStockQuantity","mutation","buildMutation_rest","react_apollo_browser_umd","buildMutation_extends","QueryMenuStockDeposit","StockDepositLoader","execute","quantityChange","StockDepositLoader_extends","MenuStockDepositPage","StockListTable","Loading","StockListTable_stockWithUnit","StockListLoader","StockListLoader_extends","MenuStockListPage","MenuStockFormQuery","StockFormLoader","stockId","stock","createItem","updateItem","StockFormLoader_getDefaults","StockFormLoader_awaiter","note","plu","allowNegative","DEFAULT","FormInputAllergens","FormInputAllowNegative_items","ENABLED","DISABLED","FormInputAllowNegative","FormInputPlu","FormInputPlu_rest","FormInputPlu_extends","WareUnitsQuery","QueryWareUnits","FormInputWareUnit","selectProps","FormInputWareUnit_rest","wareUnits","FormInputWareUnit_extends","StockFormMain","deleteItem","StockRecipesQuery","QueryStockRecipes","StockRecipesView","MenuStockPage","MenuRoutes","SecureRoute","exact","path","component","params","NotFoundPage"],"mappings":"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","file":"static/js/54.06934660.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nimport { ScrollArea } from '../atoms/ScrollArea'\nimport { Spacing } from '../styling'\n\ninterface IPageLayoutFullHeightItemProps {\n  row?: number\n  column?: number\n  widthInColumns?: number\n  withScrollArea?: boolean\n  scrollAreaId?: string\n}\n\nconst gridColumnWidth: string = '6.22vw'\nconst gridColumnHeigth: string = '3.9375rem'\n\nconst leftPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.column !== undefined) {\n    return (\n      'calc((' +\n      props.column +\n      ' * ' +\n      gridColumnWidth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return Spacing.LayoutGridCellMargin\n  }\n}\nconst widthComputed = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.widthInColumns !== undefined) {\n    return (\n      'calc((' +\n      props.widthInColumns +\n      ' * ' +\n      gridColumnWidth +\n      ') - ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return 'calc(100vh - (2 * ' + Spacing.LayoutGridCellMargin + '))'\n  }\n}\nconst topPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.row !== undefined) {\n    return (\n      'calc((' +\n      props.row +\n      ' * ' +\n      gridColumnHeigth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return (\n      'calc(' + gridColumnHeigth + ' + ' + Spacing.LayoutGridCellMargin + ')'\n    )\n  }\n}\n\nconst FullHeightDiv = styled.div`\n  position: fixed;\n  bottom: 0.5rem;\n  width: ${widthComputed()};\n  left: ${leftPos()};\n  top: ${topPos()};\n`\n\nconst FullHeightDivStyled = styled.div`\n  height: 100%;\n`\n\nexport const PageLayoutFullHeightItem: React.SFC<\n  IPageLayoutFullHeightItemProps\n> = ({\n  children,\n  row = 1,\n  column = 0,\n  widthInColumns = 16,\n  withScrollArea = false,\n  scrollAreaId,\n}) => (\n  <FullHeightDiv\n    column={column}\n    row={row}\n    widthInColumns={widthInColumns}\n    withScrollArea={withScrollArea}\n  >\n    {withScrollArea ? (\n      <ScrollArea id={scrollAreaId}>{children}</ScrollArea>\n    ) : (\n      <FullHeightDivStyled>{children}</FullHeightDivStyled>\n    )}\n  </FullHeightDiv>\n)\n","import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import styled from 'styled-components'\n\nexport const ScrollArea = styled.div`\n  overflow-y: scroll;\n  -webkit-overflow-scrolling: touch;\n  height: 100%;\n`\n","import styled from 'styled-components'\n\nexport const FlexRowSingle = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: ${({ justify = 'space-between' }: { justify?: string }) =>\n    justify};\n`\n","import { LocationDescriptor } from 'history'\nimport React from 'react'\nimport { Link, LinkProps, Route } from 'react-router-dom'\nimport resolvePathname from 'resolve-pathname'\n\ninterface IRelativeLinkProps extends LinkProps {\n  to: LocationDescriptor\n  from?: string\n}\n\nexport const RelativeLink: React.SFC<IRelativeLinkProps> = ({\n  to,\n  from,\n  ...linkProps\n}) => (\n  <Route\n    children={({ location }) => (\n      <Link\n        to={resolveLocation(to, from || `${location.pathname}/`)}\n        {...linkProps}\n      />\n    )}\n  />\n)\n\nexport function resolveLocation(to: LocationDescriptor, from: string) {\n  if (typeof to === 'string') {\n    return resolvePathname(to, from)\n  }\n  const resolved = resolvePathname(to.pathname || '', from)\n  return { ...to, pathname: resolved }\n}\n","import React from 'react'\nimport { Field, FieldType, IFieldApi } from 'react-form'\n\nimport { RM } from '../helpers/ramda'\nimport { i18n } from '../i18n'\nimport { ISelectControlFlatProps, SelectControlFlat } from './SelectControlFlat'\n\ninterface IFormInputSelectProps<ItemType>\n  extends Omit<\n      ISelectControlFlatProps<ItemType>,\n      | 'selectedItems'\n      | 'onMultiSelection'\n      | 'selectedItem'\n      | 'onSingleSelection'\n    > {\n  field: FieldType\n  fieldIsPure?: boolean\n  getItemId?: (item: ItemType) => ID\n  isRequired?: boolean\n  validationName?: string\n  defaultSelection?: ReadonlyArray<ItemType> | ItemType\n}\n\nexport class FormInputFlatSelect<ItemType> extends React.Component<\n  IFormInputSelectProps<ItemType>\n> {\n  static defaultProps = {\n    validationName: i18n.t`Value`,\n    getItemId: RM.prop('id'),\n  }\n  validate = value => {\n    const { isRequired, isMulti, validationName } = this.props\n    if (isRequired) {\n      if (isMulti && (!Array.isArray(value) || value.length === 0)) {\n        return i18n.t`${validationName} must have at least option selected`\n      }\n      if (!isMulti && value == null) {\n        return i18n.t`${validationName} must have a selection`\n      }\n    }\n    return null\n  }\n  getControlProps(\n    fieldApi: IFieldApi,\n  ): Partial<ISelectControlFlatProps<ItemType>> {\n    const { isMulti, items, defaultSelection, getItemId } = this.props\n\n    const selection = fieldApi.value || defaultSelection\n\n    if (isMulti) {\n      const isSelected = (item: ItemType) =>\n        selection.includes(getItemId!(item))\n      return {\n        selectedItems: Array.isArray(selection) ? items.filter(isSelected) : [],\n        onMultiSelection: selectedItems => {\n          fieldApi.setValue(selectedItems.map(getItemId!))\n          fieldApi.setTouched(true)\n        },\n      }\n    }\n\n    return {\n      selectedItem:\n        selection && items.find(item => getItemId!(item) === selection),\n      onSingleSelection: item => {\n        fieldApi.setValue(item ? getItemId!(item) : null)\n        fieldApi.setTouched(true)\n      },\n    }\n  }\n  render() {\n    const {\n      field,\n      fieldIsPure = false,\n      isRequired = false,\n      isClearable = false,\n      ...props\n    } = this.props\n    return (\n      <Field field={field} pure={fieldIsPure} validate={this.validate}>\n        {fieldApi => (\n          <SelectControlFlat<ItemType>\n            {...this.getControlProps(fieldApi)}\n            isInvalid={Boolean(fieldApi.error)}\n            isClearable={isClearable && !isRequired}\n            {...props}\n          />\n        )}\n      </Field>\n    )\n  }\n}\n","import React from 'react'\nimport { SortableHandle } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Icon } from './Icon'\n\ninterface IDragHandleProps {}\n\nconst DragHandleContainerStyled = styled.div`\n  padding: 1rem 0.4rem;\n  cursor: grab;\n`\nexport const DragHandle = SortableHandle<IDragHandleProps>(() => (\n  <DragHandleContainerStyled>\n    <Icon iconName=\"reorder\" />\n  </DragHandleContainerStyled>\n))\n","import React from 'react'\nimport { Field, FieldType, IFieldApi } from 'react-form'\n\nimport { RM } from '../helpers/ramda'\nimport { i18n } from '../i18n'\nimport { ISelectControlProps, SelectControl } from './SelectControl'\n\nexport interface IFormInputSelectProps<OptionType>\n  extends ISelectControlProps<OptionType> {\n  field: FieldType\n  fieldIsPure?: boolean\n  defaultValue?: OptionType\n  isRequired?: boolean\n  validatioName?: string\n}\n\nexport class FormInputSelect<OptionType> extends React.Component<\n  IFormInputSelectProps<OptionType>\n> {\n  static defaultProps = {\n    validatioName: 'Value',\n    getItemId: RM.prop('id'),\n  }\n\n  validate = (value: OptionType | undefined) => {\n    if (this.props.isRequired && !value) {\n      return i18n.t`${this.props.validatioName} must be selected`\n    }\n    return null\n  }\n\n  getControlProps(fieldApi: IFieldApi) {\n    const { isMulti, options, getOptionValue, defaultValue } = this.props\n    const selection = fieldApi.value || defaultValue\n\n    if (isMulti) {\n      const isSelected = Array.isArray(selection)\n        ? (item: OptionType) => selection.includes(getOptionValue!(item))\n        : RM.F\n      return {\n        value: Array.isArray(options)\n          ? (options as OptionType[]).filter(isSelected)\n          : [],\n        onChange: selectedOptions => {\n          fieldApi.setValue(selectedOptions.map(getOptionValue))\n        },\n      }\n    }\n\n    return {\n      value:\n        selection &&\n        (options as OptionType[]).find(\n          item => getOptionValue!(item) === selection,\n        ),\n      onChange: option => {\n        fieldApi.setValue(getOptionValue!(option))\n      },\n    }\n  }\n\n  render() {\n    const {\n      field,\n      fieldIsPure = false,\n      defaultValue = undefined,\n      isRequired = false,\n      ...props\n    } = this.props\n    return (\n      <Field field={field} validate={this.validate} pure={fieldIsPure}>\n        {fieldApi => (\n          <SelectControl\n            {...this.getControlProps(fieldApi)}\n            onFocus={() => fieldApi.setTouched(true)}\n            styles={{\n              control: base => {\n                if (Boolean(fieldApi.error)) {\n                  return {\n                    ...base,\n                    borderColor: 'red',\n                  }\n                }\n                return base\n              },\n            }}\n            {...props}\n          />\n        )}\n      </Field>\n    )\n  }\n}\n","import { LocationDescriptor } from 'history'\nimport React, { ComponentType } from 'react'\n\nimport { RelativeLink } from '../atoms/RelativeLink'\nimport { Spacing } from '../styling'\nimport { ITouchButtonProps, TouchButton } from './TouchButton'\n\ninterface IProps extends Omit<ITouchButtonProps, 'onClick'> {\n  target: LocationDescriptor\n  Link?: ComponentType<{ to: LocationDescriptor }>\n}\n\nexport const TouchButtonEdit: React.SFC<IProps> = ({\n  target,\n  Link = RelativeLink,\n  ...props\n}) => (\n  <Link to={target}>\n    <TouchButton\n      iconName=\"mode_edit\"\n      width={Spacing.ButtonHeight}\n      height={Spacing.ButtonHeight}\n      {...props}\n    />\n  </Link>\n)\n","import React from 'react'\n\nimport { Spacing } from '../styling'\nimport { ITouchButtonProps, TouchButton } from './TouchButton'\n\ninterface IProps extends ITouchButtonProps {}\n\nexport const TouchButtonRemove: React.SFC<IProps> = ({ ...props }) => (\n  <TouchButton\n    iconName=\"remove_circle_outline\"\n    width={Spacing.ButtonHeight}\n    height={Spacing.ButtonHeight}\n    {...props}\n  />\n)\n","import React from 'react'\n\nimport { ITouchButtonProps, TouchButton } from '../molecules/TouchButton'\nimport { Colors, Spacing } from '../styling'\n\ninterface IProps extends ITouchButtonProps {\n  isVisible: boolean\n}\n\nexport const TouchButtonVisibility: React.SFC<IProps> = ({\n  isVisible,\n  ...props\n}) => (\n  <TouchButton\n    iconName=\"remove_red_eye\"\n    width={Spacing.ButtonHeight}\n    height={Spacing.ButtonHeight}\n    iconColor={isVisible ? Colors.white : Colors.greyMiddle}\n    color={Colors.greyMiddle}\n    {...props}\n  />\n)\n","import 'react-virtualized/styles.css'\n\nimport React, { Component } from 'react'\nimport {\n  AutoSizer,\n  Column,\n  Table,\n  TableCellProps,\n  TableCellRenderer,\n  TableProps,\n  WindowScroller,\n} from 'react-virtualized'\nimport styled from 'styled-components'\n\nimport { i18n } from '../i18n'\nimport { TouchButtonEdit } from '../molecules/TouchButtonEdit'\nimport { TouchButtonRemove } from '../molecules/TouchButtonRemove'\nimport { TouchButtonVisibility } from '../molecules/TouchButtonVisibility'\nimport { Colors } from '../styling'\nimport { CanMutate } from './CanMutate'\nimport { CanQuery } from './CanQuery'\nimport Pacman from './Pacman'\n\nexport interface IDataTableProps<T> extends Partial<TableProps> {\n  items: T[]\n  isLoading?: boolean\n  heightStretch?: boolean\n}\n\nexport class DataTable<T> extends Component<IDataTableProps<T>> {\n  static defaultProps = {\n    heightStretch: false,\n  }\n  renderTable(width: number, height: number) {\n    const { items, children, isLoading, heightStretch, ...props } = this.props\n\n    return (\n      <Table\n        autoHeight={!heightStretch}\n        width={width}\n        height={height}\n        headerHeight={50}\n        rowHeight={60}\n        rowCount={items ? items.length : 0}\n        rowGetter={({ index }) => items[index]}\n        noRowsRenderer={() => (isLoading ? <Pacman /> : null)}\n        {...props}\n      >\n        {children}\n      </Table>\n    )\n  }\n  render() {\n    return this.props.heightStretch ? (\n      <AutoSizer>\n        {({ width, height }) => this.renderTable(width, height)}\n      </AutoSizer>\n    ) : (\n      <WindowScroller scrollElement={window}>\n        {({ height }) => (\n          <AutoSizer disableHeight={true}>\n            {({ width }) => this.renderTable(width, height)}\n          </AutoSizer>\n        )}\n      </WindowScroller>\n    )\n  }\n}\n\nexport function checkColumnAccess(\n  { canQuery, canMutate }: { canQuery?: string; canMutate?: string },\n  renderer: TableCellRenderer,\n) {\n  return (cellProps: TableCellProps) => {\n    let result = renderer(cellProps)\n    if (canQuery) {\n      result = <CanQuery queryName={canQuery}>{result}</CanQuery>\n    }\n    if (canMutate) {\n      result = <CanMutate mutationName={canMutate}>{result}</CanMutate>\n    }\n    return result\n  }\n}\n\nexport function ColumnRendererEdit({ cellData }: TableCellProps) {\n  return <TouchButtonEdit target={cellData} />\n}\n\nexport function ColumnRendererRemove({ cellData, columnData }: TableCellProps) {\n  return (\n    <TouchButtonRemove\n      onClick={() => columnData.onRemove && columnData.onRemove(cellData)}\n    />\n  )\n}\n\nexport function ColumnRendererVisibility({\n  cellData,\n  columnData,\n  rowData,\n}: TableCellProps) {\n  return (\n    <TouchButtonVisibility\n      isVisible={cellData}\n      onClick={() => columnData.onToggle(rowData.id, !cellData)}\n    />\n  )\n}\n\nexport const NoteText = styled.div`\n  color: ${Colors.greyMiddle};\n`\n\nexport function ColumnRendererWithNote({\n  cellData,\n  rowData,\n  columnData,\n}: TableCellProps) {\n  return (\n    <>\n      {cellData}\n      <NoteText>{rowData[columnData.noteKey]}</NoteText>\n    </>\n  )\n}\n\nexport const DataTableEmptyText = styled(\n  ({ text = i18n.t`Table is empty`, ...props }: { text?: string }) => (\n    <div {...props}>{text}</div>\n  ),\n)`\n  padding: 1rem;\n  color: ${Colors.greyMiddle};\n  font-style: 'italic';\n`\n\nexport { Column }\n","import React from 'react'\nimport {\n  arrayMove,\n  SortableContainer,\n  SortableElement,\n  SortEndHandler,\n} from 'react-sortable-hoc'\n\nimport { DataTable, IDataTableProps } from '../atoms/DataTable'\n\ninterface ISortResult<T> {\n  item: T\n  items: T[]\n  offset: number\n  oldIndex: number\n  newIndex: number\n}\n\nexport type TSortHandler<T> = (\n  result: ISortResult<T>,\n) => Promise<boolean> | void\n\ninterface IProps<T> extends IDataTableProps<T> {\n  items: T[]\n  onSort?: TSortHandler<T>\n}\n\ninterface IState<T> {\n  sortedItems: T[]\n}\n\nconst SortableTableRowRenderer = SortableElement(\n  ({ columns, style, className, ...props }) => (\n    <div style={style} className={className}>\n      {columns}\n    </div>\n  ),\n)\n\nconst SortableDataTableContainer = SortableContainer(DataTable)\n\nexport class SortableDataTable<T> extends React.Component<\n  IProps<T>,\n  IState<T>\n> {\n  state = { sortedItems: this.props.items }\n  static getDerivedStateFromProps = (nextProps: IProps<{}>) => {\n    return {\n      sortedItems: nextProps.items,\n    }\n  }\n  onHandleSorting: SortEndHandler = async ({ newIndex, oldIndex }) => {\n    const currentItems = [...this.state.sortedItems]\n    const sortedItems = arrayMove(this.state.sortedItems, oldIndex, newIndex)\n\n    this.setState({ sortedItems })\n\n    if (this.props.onSort) {\n      const sortSuccess = this.props.onSort({\n        item: currentItems[oldIndex],\n        items: sortedItems,\n        offset: newIndex - oldIndex,\n        newIndex,\n        oldIndex,\n      })\n      if (sortSuccess && !(await sortSuccess)) {\n        this.setState({\n          sortedItems: currentItems,\n        })\n      }\n    }\n  }\n  render() {\n    const { items, isLoading, ...props } = this.props\n    return (\n      <SortableDataTableContainer\n        useDragHandle={true}\n        lockAxis=\"y\"\n        lockToContainerEdges={true}\n        onSortEnd={this.onHandleSorting}\n        rowRenderer={rowProps => {\n          return <SortableTableRowRenderer {...rowProps} />\n        }}\n        isLoading={isLoading}\n        {...props}\n        items={this.state.sortedItems}\n      />\n    )\n  }\n}\n","import React from 'react'\n\nimport {\n  checkColumnAccess,\n  Column,\n  ColumnRendererEdit,\n  ColumnRendererRemove,\n  ColumnRendererVisibility,\n  ColumnRendererWithNote,\n  DataTable,\n  DataTableEmptyText,\n  IDataTableProps,\n} from '../../../atoms/DataTable'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { GMenuCategoryListItem } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport {\n  SortableDataTable,\n  TSortHandler,\n} from '../../../molecules/SortableDataTable'\nimport { getCategoryRoute } from '../models/MenuCategoryModel'\n\ntype TCategory = GMenuCategoryListItem.Fragment\n\ninterface IProps {\n  categories: TCategory[]\n  isSortable?: boolean\n  isLoading?: boolean\n  showEditColumn?: boolean\n  showRemoveColumn?: boolean\n  showVisibilityColumn?: boolean\n  showHeader?: boolean\n  onToggle?(categoryId: ID, visible: boolean): void\n  onRemove?(categoryId: ID): void\n  onSort?: TSortHandler<TCategory>\n  heightStretch?: boolean\n  noRowsDisplay?: ReactNode\n}\n\nexport const CategoryListTable: React.SFC<IProps> = ({\n  categories,\n  onToggle,\n  onRemove,\n  onSort,\n  showEditColumn = true,\n  showRemoveColumn = false,\n  showVisibilityColumn = false,\n  showHeader = true,\n  isSortable = false,\n  isLoading = false,\n  heightStretch = false,\n  noRowsDisplay = () => (\n    <DataTableEmptyText text={i18n.t`No recipes in category`} />\n  ),\n}) => {\n  const props: IDataTableProps<TCategory> = {\n    isLoading,\n    items: categories,\n    disableHeader: !showHeader,\n    noRowsRenderer: () => noRowsDisplay,\n  }\n  let Table: React.SFC = ({ children }) =>\n    isSortable ? (\n      <SortableDataTable\n        heightStretch={heightStretch}\n        onSort={onSort}\n        {...props}\n      >\n        {children}\n      </SortableDataTable>\n    ) : (\n      <DataTable heightStretch={heightStretch} {...props}>\n        {children}\n      </DataTable>\n    )\n  return (\n    <Table>\n      {showEditColumn && (\n        <Column\n          dataKey=\"id\"\n          width={60}\n          cellRenderer={checkColumnAccess(\n            { canQuery: 'wareCategory' },\n            ColumnRendererEdit,\n          )}\n          cellDataGetter={({ rowData }) =>\n            getCategoryRoute(rowData.id, rowData.categoryType.enum)\n          }\n        />\n      )}\n      {showRemoveColumn && (\n        <Column\n          dataKey=\"id\"\n          width={60}\n          cellRenderer={ColumnRendererRemove}\n          columnData={{ onRemove }}\n        />\n      )}\n      {showVisibilityColumn && (\n        <Column\n          dataKey=\"visible\"\n          width={60}\n          cellRenderer={checkColumnAccess(\n            { canMutate: 'updateWareCategory' },\n            ColumnRendererVisibility,\n          )}\n          columnData={{ onToggle }}\n        />\n      )}\n      <Column\n        dataKey=\"nameLabel\"\n        width={300}\n        label={i18n.t`Name`}\n        cellRenderer={ColumnRendererWithNote}\n        columnData={{ noteKey: 'internalNoteLabel' }}\n      />\n      <Column\n        dataKey=\"countRecipes\"\n        label={i18n.t`Recipe count`}\n        width={100}\n        cellRenderer={({ cellData }) =>\n          `${cellData} ${i18n.t`Recipes`.toLocaleLowerCase()}`\n        }\n      />\n      {isSortable && (\n        <Column dataKey=\"id\" width={50} cellRenderer={() => <DragHandle />} />\n      )}\n    </Table>\n  )\n}\n","import { LocationDescriptor } from 'history'\nimport React, { MouseEvent } from 'react'\nimport styled from 'styled-components'\n\nimport { RelativeLink } from '../../../atoms/RelativeLink'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\n\ninterface IProps {\n  routeTo?: LocationDescriptor\n  onClick?: (event: MouseEvent<HTMLAnchorElement>) => void\n}\n\nconst CreateButtonContainer = styled.div`\n  position: absolute;\n  right: 0;\n  z-index: 5;\n`\n\nexport const CreateButton: React.SFC<IProps> = ({\n  routeTo = 'create',\n  onClick,\n}) => (\n  <CreateButtonContainer>\n    <RelativeLink to={routeTo} onClick={onClick}>\n      <TouchButton\n        iconName=\"add_circle\"\n        color={Colors.green}\n        width={Spacing.ButtonHeight}\n        height={Spacing.ButtonHeight}\n      />\n    </RelativeLink>\n  </CreateButtonContainer>\n)\n","import React from 'react'\n\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { Headline } from '../../../atoms/Headline'\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { WareCategoryTypeEnum } from '../../../graph/types'\nimport { getCategoryRoute } from '../models/MenuCategoryModel'\nimport { CategoryListTable } from '../molecules/CategoryListTable'\nimport { CreateButton } from '../molecules/CreateButton'\nimport { QueryCategoryList } from './CategoryList.graphql'\n\ninterface ICategoryListProps {\n  headline: string\n  subHeadline?: string\n  categoryType: WareCategoryTypeEnum\n  heightStretch?: boolean\n}\n\nexport const CategoryList: React.SFC<ICategoryListProps> = ({\n  headline,\n  subHeadline = false,\n  categoryType,\n  heightStretch = false,\n}) => (\n  <>\n    <FlexRowSingle>\n      <FlexColumn widthGrowIndex={1}>\n        <Headline>{headline}</Headline>\n        {subHeadline && <Headline size=\"smaller\">{subHeadline}</Headline>}\n      </FlexColumn>\n      <FlexColumn fixedWidth={true}>\n        <CreateButton routeTo={getCategoryRoute('create', categoryType)} />\n      </FlexColumn>\n    </FlexRowSingle>\n    <WithRoot\n      render={({ settings }) => (\n        <QueryCategoryList\n          {...settings.getQueryProps({ categoryType })}\n          renderLoading={true}\n          render={({ wareCategories }) => (\n            <CategoryListTable\n              categories={wareCategories}\n              onToggle={settings.menu.category.changeVisibility}\n              isSortable={true}\n              showHeader={false}\n              heightStretch={heightStretch}\n              showVisibilityColumn={true}\n              onSort={({ item, offset }) => {\n                settings.menu.category.sortCategory(item.id, offset)\n              }}\n            />\n          )}\n        />\n      )}\n    />\n  </>\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Card } from '../../../atoms/Card'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { WareCategoryTypeEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { SettingsCompanyBranchPicker } from '../../settings/organisms/SettingsCompanyBranchPicker'\nimport { CategoryList } from '../organisms/CategoryList'\n\nexport const PartialDataTableContainer = styled.div`\n  height: calc(100% - 3.5rem);\n  padding-top: 1rem;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  -webkit-overflow-scrolling: touch;\n`\n\nexport const MenuCategoryListPage: React.SFC = props => (\n  <>\n    <FullPageLayout\n      pageTitle={i18n.t`Category overview`}\n      useBackButton={true}\n    />\n    <PageLayoutFullHeightItem>\n      <Card stretchToParent={true}>\n        <SettingsCompanyBranchPicker />\n\n        <PartialDataTableContainer>\n          <CategoryList\n            categoryType={WareCategoryTypeEnum.MAIN}\n            headline={i18n.t`Category of recipes`}\n            heightStretch={false}\n          />\n\n          <VerticalGap size={1.5} />\n\n          <CategoryList\n            categoryType={WareCategoryTypeEnum.SIDE_DISH}\n            headline={i18n.t`Category of sidedish`}\n            heightStretch={false}\n          />\n\n          <VerticalGap size={1.5} />\n\n          <CategoryList\n            categoryType={WareCategoryTypeEnum.COVER}\n            headline={i18n.t`Category of covers`}\n            heightStretch={false}\n          />\n        </PartialDataTableContainer>\n        {/* <VerticalGap size={1.5} />\n      <Trans>\n        <Headline>Recipes without category</Headline>\n        <Headline size=\"smaller\">are not visible anywhere</Headline>\n      </Trans> */}\n      </Card>\n    </PageLayoutFullHeightItem>\n  </>\n)\n","import styled from 'styled-components'\n\nexport const TopRightButtonContainer = styled.div`\n  position: fixed;\n  right: 0;\n  top: -4rem;\n  width: 10rem;\n`\nTopRightButtonContainer.displayName = 'TopRightButtonContainer'\n","import React from 'react'\nimport { FormApi, IFormState } from 'react-form'\n\nimport { isFormValid } from '../../../helpers/form'\nimport { i18n } from '../../../i18n'\nimport { FormSubmit } from '../../../molecules/FormSubmit'\n\ninterface IProps {\n  isCreate?: boolean\n}\n\nexport const SubmitButton: React.SFC<IProps> = ({ isCreate = false }) => (\n  <FormApi\n    render={form => (\n      <FormSubmit id=\"form-submit\" form={form}>\n        {getButtonText(form, isCreate)}\n      </FormSubmit>\n    )}\n  />\n)\n\nfunction getButtonText(form: IFormState, isCreate: boolean) {\n  if (!isFormValid(form)) {\n    return i18n.t`Fix form errors`\n  }\n  return isCreate ? i18n.t`Create` : i18n.t`Save`\n}\n","import styled from 'styled-components'\n\nexport const FormContainer = styled.form`\n  margin: 0.6rem;\n  display: flex;\n`\n\nexport const FormColumn = styled.div`\n  flex: none;\n  margin-right: 1rem;\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface IProps {\n  pictogramId: string\n  fontSize?: number\n  fontSizeUnit?: string\n}\n\nconst PictogramDisplayStyled = styled.div`\n  &:before {\n    font-size: ${getFontSize} !important;\n    margin-left: 0.5rem !important;\n  }\n`\n\nexport const PictogramDisplay: React.SFC<IProps> = ({\n  pictogramId,\n  fontSize = 2,\n  fontSizeUnit = 'rem',\n}) => (\n  <PictogramDisplayStyled\n    className={getClassName(pictogramId)}\n    fontSize={fontSize}\n    fontSizeUnit={fontSizeUnit}\n  />\n)\n\nfunction getFontSize({ fontSize = 2, fontSizeUnit = 'rem' }: Partial<IProps>) {\n  return `${fontSize}${fontSizeUnit}`\n}\n\nfunction getClassName(pictogramId: string) {\n  return `flaticon-${pictogramId}`\n}\n","import React from 'react'\nimport { Field, FieldType } from 'react-form'\n\nimport availablePictograms from '../../../assets/Flaticon.json'\nimport { PictogramDisplay } from '../../../atoms/PictogramDisplay'\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { RM } from '../../../helpers/ramda'\n\ninterface IProps {\n  field: FieldType\n}\n\n// const SelectStyled = styled(Select)`\n//   width: 7rem;\n//   &.Select--single {\n//     .Select-control {\n//       outline: none;\n//       border: 1px solid ${Colors.greyMiddle};\n//       min-height: 5rem;\n//       .Select-value {\n//         line-height: 5rem;\n//         outline: none;\n//       }\n//     }\n//   }\n//   & .Select-menu-outer {\n//     min-height: 35rem;\n//   }\n//   & .Select-menu {\n//     min-height: calc(35rem - 2px);\n//   }\n// `\n\ninterface IFormValue {\n  pictogram: string\n}\n\nexport const MenuCategoryPictogramSelect: React.SFC<IProps> = ({ field }) => (\n  <Field field={field} pure={true}>\n    {fieldApi => (\n      <SelectControl<IFormValue>\n        value={fieldApi.value ? { pictogram: fieldApi.value } : null}\n        onChange={value => fieldApi.setValue(value)}\n        options={availablePictograms}\n        getOptionValue={RM.prop('pictogram')}\n        // @ts-ignore Badly typed\n        formatOptionLabel={(pictogram: string) => (\n          <PictogramDisplay pictogramId={pictogram} fontSize={2} />\n        )}\n        components={{\n          SingleValue: ({ data }) => (\n            <PictogramDisplay pictogramId={data.pictogram} fontSize={4} />\n          ),\n        }}\n        styles={{\n          container: base => ({ ...base, width: '8rem' }),\n          menuList: base => ({ ...base, maxHeight: '35rem' }),\n        }}\n        isClearable={false}\n        isSearchable={false}\n        minWidth={8}\n      />\n    )}\n  </Field>\n)\n","import React from 'react'\nimport { Field } from 'react-form'\nimport { Route } from 'react-router'\n\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\n\ninterface IProps {\n  confirmText: string\n  onDelete(id: ID): Promise<void>\n}\n\nexport const FormDeleteButton: React.SFC<IProps> = ({\n  confirmText,\n  onDelete,\n}) => (\n  <Field field=\"id\">\n    {field =>\n      field.value !== 'NEW' && (\n        <Route>\n          {({ history }) => (\n            <TouchButtonDelete\n              confirmText={confirmText}\n              onDelete={async () => {\n                await onDelete(field.value)\n                history.goBack()\n              }}\n            />\n          )}\n        </Route>\n      )\n    }\n  </Field>\n)\n","import React from 'react'\n\nimport {\n  FormInputTextBox,\n  TFormInputTextBoxProps,\n} from '../../../atoms/FormInputTextBox'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\n\ninterface IProps extends Partial<TFormInputTextBoxProps> {\n  icon?: string\n  label?: string\n}\n\nexport const FormInputInternalNote: React.SFC<IProps> = ({\n  field = 'internalNote',\n  icon = 'label_outline',\n  label = i18n.t`Internal note`.toLocaleLowerCase(),\n  ...props\n}) => (\n  <IconLine label={label} labelWidth={7}>\n    <FormInputTextBox field={field} inputWidth={22} {...props} />\n  </IconLine>\n)\n","import React from 'react'\n\nimport {\n  FormInputTextBox,\n  TFormInputTextBoxProps,\n} from '../../../atoms/FormInputTextBox'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\n\ninterface IProps extends Partial<TFormInputTextBoxProps> {\n  icon?: string\n}\n\nexport const FormInputName: React.SFC<IProps> = ({\n  field = 'nameLabel',\n  icon = 'label',\n  ...props\n}) => (\n  <IconLine icon={icon} labelWidth={7}>\n    <FormInputTextBox\n      field={field}\n      inputWidth={22}\n      isRequired={true}\n      validatioName={i18n.t`Name`}\n      {...props}\n    />\n  </IconLine>\n)\n","import React from 'react'\n\nimport { FormColumn, FormContainer } from '../../../atoms/FormContainer'\nimport { FormInputCheckbox } from '../../../atoms/FormInputCheckbox'\nimport { WareCategoryTypeEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport { MenuCategoryPictogramSelect } from '../atoms/MenuCategoryPictogramSelect'\nimport { FormDeleteButton } from '../molecules/FormDeleteButton'\nimport { FormInputInternalNote } from '../molecules/FormInputInternalNote'\nimport { FormInputName } from '../molecules/FormInputName'\n\ninterface ICategoryBasicFormProps {\n  categoryType: WareCategoryTypeEnum\n}\n\nexport const CategoryBasicForm: React.SFC<ICategoryBasicFormProps> = ({\n  categoryType,\n}) => (\n  <FormContainer>\n    <FormColumn>\n      <FormInputName placeholder={i18n.t`Category name`} inputWidth={22} />\n      <FormInputInternalNote\n        placeholder={i18n.t`Category internal note`}\n        inputWidth={22}\n      />\n      <FormInputCheckbox\n        field=\"visible\"\n        label={i18n.t`To show this category`}\n      />\n    </FormColumn>\n\n    {categoryType === WareCategoryTypeEnum.MAIN ? (\n      <FormColumn>\n        <MenuCategoryPictogramSelect field=\"pictogram\" />\n      </FormColumn>\n    ) : null}\n\n    <FormColumn>\n      <WithSettings\n        render={({ menu }) => (\n          <FormDeleteButton\n            confirmText={i18n.t`Remove this category?`}\n            onDelete={id => menu.category.deleteCategory(id, categoryType)}\n          />\n        )}\n      />\n    </FormColumn>\n  </FormContainer>\n)\n","import React, { useEffect, useState } from 'react'\nimport { Form, FormProps } from 'react-form'\n\ninterface IProps<TValues = object> extends FormProps<TValues> {\n  shouldLoad: boolean\n  loader(): Promise<TValues>\n}\n\nexport function FormLoader<TValues = object>({\n  shouldLoad,\n  loader,\n  ...props\n}: IProps<TValues>) {\n  const [values, setValues] = useState<TValues | null>(null)\n  useEffect(\n    () => {\n      if (!shouldLoad) {\n        return\n      }\n      loader().then(setValues)\n    },\n    [shouldLoad],\n  )\n  return <Form values={values} {...props} />\n}\n","import React from 'react'\nimport { Route } from 'react-router'\n\ninterface IProps {\n  render?(goBack: () => void): ReactNode\n}\n\nexport const NavigateBack: React.SFC<IProps> = ({ render }) => (\n  <Route>\n    {({ history }) => {\n      if (render) {\n        return render(() => history.goBack())\n      }\n      history.goBack()\n      return null\n    }}\n  </Route>\n)\n","import { Popover } from '@material-ui/core'\nimport { isApolloError } from 'apollo-client/errors/ApolloError'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { FormLoader } from '../../../atoms/FormLoader'\nimport { NavigateBack } from '../../../atoms/NavigateBack'\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { TQueryErrors } from '../../../graph/errorHandler'\nimport { logError, logForm } from '../../../helpers/logger'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\n\ninterface IProps<TValues = object> {\n  isCreate: boolean\n  getDefaultValues(): TValues\n  loadValues(): Promise<TValues>\n  loadDefaults?(): Promise<Partial<TValues>>\n  onCreate(values: TValues): Promise<TQueryErrors>\n  onUpdate(values: TValues): Promise<TQueryErrors>\n}\n\ninterface IState {\n  submitError: Maybe<Error>\n  validationErrors: Maybe<object>\n}\n\nconst ErrorPop = styled.div`\n  color: red;\n  padding: 1rem;\n  max-width: 30rem;\n  overflow-wrap: break-word;\n`\n\nexport class MenuBaseFormLoader<TValues extends {}> extends React.Component<\n  IProps<TValues>,\n  IState\n> {\n  state: IState = { submitError: null, validationErrors: null }\n  renderErrors() {\n    const { submitError, validationErrors } = this.state\n    if (submitError) {\n      return this.renderSubmitError(submitError)\n    }\n    if (validationErrors) {\n      return this.renderValidationErrors(validationErrors)\n    }\n    return null\n  }\n  renderSubmitError(submitError: Error) {\n    let messages = [\n      i18n.t`Unexpected error while sending form. Out team was notified about the issue.`,\n    ]\n    if (isApolloError(submitError)) {\n      const filter =\n        process.env.NODE_ENV === 'production'\n          ? RM.propEq('showToUser', true)\n          : () => true\n      const userErrors = submitError.graphQLErrors\n        .filter(filter)\n        .map(RM.prop('message'))\n      if (userErrors.length) {\n        messages = userErrors\n      }\n    }\n    return this.renderPopover(messages)\n  }\n  renderValidationErrors(errors: object) {\n    return null // this.renderPopover(Object.values(errors))\n  }\n  renderPopover(messages: string[]) {\n    return (\n      <Popover\n        open={true}\n        anchorEl={() => document.getElementById('submit-button')!}\n        onClose={() =>\n          this.setState({ submitError: null, validationErrors: null })\n        }\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n      >\n        {messages.map((message, idx) => (\n          <ErrorPop key={idx}>{message}</ErrorPop>\n        ))}\n      </Popover>\n    )\n  }\n  render() {\n    const {\n      isCreate,\n      onCreate,\n      onUpdate,\n      getDefaultValues,\n      loadValues,\n      loadDefaults,\n      children,\n    } = this.props\n    return (\n      <WithRoot\n        render={({ settings: { menu } }) => (\n          <NavigateBack\n            render={goBack => (\n              <FormLoader<TValues>\n                shouldLoad={true}\n                defaultValues={getDefaultValues()}\n                loader={async () => {\n                  if (isCreate && loadDefaults) {\n                    const loadedDefaults = await loadDefaults()\n                    const defaults = getDefaultValues()\n                    return Object.assign({}, defaults, loadedDefaults)\n                  }\n                  return loadValues()\n                }}\n                onChange={formApi => logForm('new values', formApi.values)}\n                onSubmit={async values => {\n                  if (isCreate) {\n                    await onCreate(values)\n                  } else {\n                    await onUpdate(values)\n                  }\n                  goBack()\n                }}\n                onSubmitFailure={(validationErrors, submitError) => {\n                  this.setState({ validationErrors, submitError })\n                  if (Object.keys(validationErrors).length) {\n                    logError('validation errors', validationErrors)\n                  }\n                  if (submitError) {\n                    logError('submit error', submitError)\n                  }\n                }}\n              >\n                {children}\n                {this.renderErrors()}\n              </FormLoader>\n            )}\n          />\n        )}\n      />\n    )\n  }\n}\n","import { useRoot } from '../../../atoms/RootProvider'\n\nexport function useMenu() {\n  const {\n    settings: { menu },\n  } = useRoot()\n  return menu\n}\n","import React from 'react'\n\nimport { GMenuCategoryForm, WareCategoryTypeEnum } from '../../../graph/types'\nimport { MenuBaseFormLoader } from '../atoms/MenuBaseFormLoader'\nimport { useMenu } from '../hooks/useMenu'\nimport { MenuCategoryFormQuery } from './CategoryForm.graphql'\n\ninterface IProps {\n  categoryId: Maybe<ID>\n  categoryType: WareCategoryTypeEnum\n  children: ReactNode\n}\n\nexport type TCategoryFormValues = GMenuCategoryForm.WareCategory\n\nexport const CategoryFormLoader: React.SFC<IProps> = ({\n  categoryId,\n  categoryType,\n  children,\n}) => {\n  const menu = useMenu()\n  return (\n    <MenuBaseFormLoader<TCategoryFormValues>\n      isCreate={categoryId === null}\n      onCreate={values => menu.category.createCategory(values, categoryType)}\n      onUpdate={values => menu.category.updateCategory(values, categoryType)}\n      getDefaultValues={() => getDefaults(categoryType)}\n      loadValues={async () => {\n        const { data } = await menu.client.query<GMenuCategoryForm.Query>({\n          query: MenuCategoryFormQuery,\n          variables: { categoryId },\n          fetchPolicy: 'no-cache',\n        })\n        return data.wareCategory\n      }}\n    >\n      {children}\n    </MenuBaseFormLoader>\n  )\n}\n\nfunction getDefaults(categoryType: WareCategoryTypeEnum): TCategoryFormValues {\n  return {\n    id: 'NEW',\n    visible: true,\n    internalNoteLabel: '',\n    nameLabel: '',\n    categoryType: { enum: categoryType },\n    recipes: [],\n  }\n}\n","import React from 'react'\nimport { TableCellProps } from 'react-virtualized'\n\nimport {\n  checkColumnAccess,\n  Column,\n  ColumnRendererEdit,\n  ColumnRendererRemove,\n  ColumnRendererVisibility,\n  ColumnRendererWithNote,\n  DataTable,\n} from '../../../atoms/DataTable'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { GMenuRecipeList, WareCategoryTypeEnum } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport {\n  SortableDataTable,\n  TSortHandler,\n} from '../../../molecules/SortableDataTable'\nimport { TPriceType } from '../menutypes'\nimport { getRecipeRoute } from '../models/MenuRecipeModel'\n\ntype TRecipe = GMenuRecipeList.Recipes\n\ninterface IProps {\n  recipes: TRecipe[]\n  isSortable?: boolean\n  isLoading?: boolean\n  showEditColumn?: boolean\n  showRemoveColumn?: boolean\n  showVisibilityColumn?: boolean\n  showTypeColumn?: boolean\n  onToggle?(recipeId: ID, visible: boolean): void\n  onRemove?(recipeId: ID): void\n  onSortRecipe?: TSortHandler<TRecipe>\n  heightStretch?: boolean\n}\n\nexport const RecipeListTable: React.SFC<IProps> = ({\n  recipes,\n  onToggle,\n  onRemove,\n  onSortRecipe,\n  showEditColumn = true,\n  showRemoveColumn = false,\n  showVisibilityColumn = true,\n  showTypeColumn = false,\n  isSortable = false,\n  isLoading = false,\n  heightStretch = false,\n}) => {\n  const props = {\n    isLoading,\n    items: recipes,\n  }\n  let Table: React.SFC = ({ children }) =>\n    isSortable ? (\n      <SortableDataTable\n        heightStretch={heightStretch}\n        onSort={onSortRecipe}\n        {...props}\n      >\n        {children}\n      </SortableDataTable>\n    ) : (\n      <DataTable heightStretch={heightStretch} {...props}>\n        {children}\n      </DataTable>\n    )\n  return (\n    <Table>\n      {showEditColumn && (\n        <Column\n          dataKey=\"id\"\n          width={60}\n          cellRenderer={checkColumnAccess(\n            { canQuery: 'recipe' },\n            ColumnRendererEdit,\n          )}\n          cellDataGetter={({ rowData }) =>\n            getRecipeRoute(rowData.id, rowData.recipeType.enum)\n          }\n        />\n      )}\n      {showRemoveColumn && (\n        <Column\n          dataKey=\"id\"\n          width={60}\n          cellRenderer={ColumnRendererRemove}\n          columnData={{ onRemove }}\n        />\n      )}\n      {showVisibilityColumn && (\n        <Column\n          dataKey=\"visible\"\n          width={60}\n          cellRenderer={checkColumnAccess(\n            { canMutate: 'updateRecipe' },\n            ColumnRendererVisibility,\n          )}\n          columnData={{ onToggle }}\n        />\n      )}\n      {showTypeColumn && (\n        <Column\n          dataKey=\"recipeType\"\n          width={100}\n          label={i18n.t`Type`}\n          cellRenderer={ColumnRendererCode}\n        />\n      )}\n      <Column dataKey=\"code\" width={100} label={i18n.t`Code`} />\n      <Column\n        dataKey=\"nameLabel\"\n        width={300}\n        label={i18n.t`Name`}\n        cellRenderer={ColumnRendererWithNote}\n        columnData={{ noteKey: 'internalNote' }}\n      />\n      <Column\n        dataKey=\"prices\"\n        width={150}\n        label={i18n.t`Delivery sale`}\n        cellRenderer={ColumnRendererPrice}\n        columnData={{ priceType: TPriceType.DELIVERY }}\n      />\n      <Column\n        dataKey=\"prices\"\n        width={150}\n        label={i18n.t`Local sale`}\n        cellRenderer={ColumnRendererPrice}\n        columnData={{ priceType: TPriceType.INHOUSE }}\n      />\n      <Column\n        dataKey=\"availableAmount\"\n        label={i18n.t('recipe.list.availableAmount')`Stock`}\n        width={100}\n      />\n      {isSortable && (\n        <Column dataKey=\"id\" width={50} cellRenderer={() => <DragHandle />} />\n      )}\n    </Table>\n  )\n}\n\nfunction ColumnRendererPrice({\n  cellData: prices,\n  columnData: { priceType },\n}: TableCellProps) {\n  const foundPrice = prices.find(RM.pathEq(['priceType', 'enum'], priceType))\n  if (foundPrice) {\n    return foundPrice.price.formattedValue\n  }\n  return <i>{i18n.t`Not set`.toLocaleLowerCase()}</i>\n}\n\nfunction ColumnRendererCode({ rowData }: TableCellProps) {\n  const type: WareCategoryTypeEnum = rowData.recipeType.enum\n  if (type === WareCategoryTypeEnum.SIDE_DISH) {\n    return i18n.t`Sidedish`.toLocaleLowerCase()\n  }\n  if (type === WareCategoryTypeEnum.COVER) {\n    return i18n.t`Cover`.toLocaleLowerCase()\n  }\n  return i18n.t`Ware`.toLocaleLowerCase()\n}\n","import React, { Component } from 'react'\n\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport {\n  ISelectControlProps,\n  SelectControl,\n} from '../../../atoms/SelectControl'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\n\ninterface IProps<OptionType> extends ISelectControlProps {\n  onAdd(option: OptionType): void\n  addLabel?: string\n  addButtonText?: string\n}\n\nexport class MenuSuggestionPanel<OptionType extends {}> extends Component<\n  IProps<OptionType>\n> {\n  static defaultProps = {\n    addButtonText: i18n.t`Add`,\n  }\n  state: { selected: Maybe<OptionType> } = { selected: null }\n  onAdd = () => {\n    if (this.state.selected) {\n      this.props.onAdd(this.state.selected!)\n      this.setState({ selected: null })\n    }\n  }\n  onSelect = (selected: OptionType) => {\n    this.setState({ selected })\n  }\n  render() {\n    const {\n      addLabel = i18n.t`Add`,\n      onAdd,\n      addButtonText,\n      ...props\n    } = this.props\n    return (\n      <FlexRowSingle justify=\"flex-start\">\n        <FlexColumn fixedWidth={true} width=\"4rem\" margin=\"auto 0\">\n          {addLabel}\n        </FlexColumn>\n        <FlexColumn fixedWidth={true} width=\"20rem\" margin=\"auto 0\">\n          <SelectControl\n            value={this.state.selected}\n            onChange={this.onSelect}\n            onKeyDown={ev => {\n              if (ev.key === 'Enter') {\n                this.onAdd()\n              }\n            }}\n            isClearable={false}\n            getOptionValue={RM.prop('id')}\n            getOptionLabel={RM.prop('nameLabel')}\n            {...props}\n          />\n        </FlexColumn>\n        <FlexColumn fixedWidth={true} width=\"10rem\" margin=\"auto 0\">\n          <TouchButton\n            text={addButtonText}\n            disabled={this.state.selected === null}\n            onClick={this.onAdd}\n          />\n        </FlexColumn>\n      </FlexRowSingle>\n    )\n  }\n}\n","import React from 'react'\n\nimport { GMenuRecipe, WareCategoryTypeEnum } from '../../../graph/types'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\nimport { QueryRecipeList } from './RecipeList.graphql'\n\ntype TRecipe = GMenuRecipe.Fragment\n\ninterface IProps {\n  categoryType?: WareCategoryTypeEnum\n  onAdd(recipe: TRecipe): void\n  filterRecipes(recipes: TRecipe[]): TRecipe[]\n}\n\nexport const RecipeSuggestionPanel: React.SFC<IProps> = ({\n  categoryType,\n  filterRecipes,\n  onAdd,\n}) => (\n  <WithSettings\n    observe={true}\n    render={settings => (\n      <QueryRecipeList\n        {...settings.getQueryProps({ categoryType })}\n        fetchPolicy=\"cache-and-network\"\n        render={({ recipes }) => (\n          <MenuSuggestionPanel<TRecipe>\n            options={filterRecipes(recipes)}\n            onAdd={onAdd}\n          />\n        )}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { Field, IFieldApi } from 'react-form'\n\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { GMenuRecipe, WareCategoryTypeEnum } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { RecipeListTable } from '../molecules/RecipeListTable'\nimport { RecipeSuggestionPanel } from './RecipeSuggestionPanel'\n\ninterface IProps {\n  categoryType: WareCategoryTypeEnum\n}\n\nexport const CategoryRecipesView: React.SFC<IProps> = ({ categoryType }) => (\n  <WithRoot\n    observe={false}\n    render={({\n      settings: {\n        menu: { recipe },\n      },\n    }) => (\n      <Field field=\"recipes\">\n        {(fieldApi: IFieldApi<GMenuRecipe.Fragment[]>) => (\n          <>\n            <RecipeListTable\n              recipes={fieldApi.value}\n              isSortable={true}\n              showRemoveColumn={true}\n              showEditColumn={false}\n              showVisibilityColumn={false}\n              onRemove={recipeId =>\n                fieldApi.setValue(\n                  RM.reject(RM.propEq('id', recipeId), fieldApi.value),\n                )\n              }\n              onSortRecipe={({ items }) => {\n                fieldApi.setValue(items)\n              }}\n            />\n            <RecipeSuggestionPanel\n              categoryType={categoryType}\n              filterRecipes={RM.without(fieldApi.value)}\n              onAdd={addedRecipe =>\n                fieldApi.setValue(fieldApi.value.concat(addedRecipe))\n              }\n            />\n          </>\n        )}\n      </Field>\n    )}\n  />\n)\n","import { i18nMark, Trans } from '@lingui/react'\nimport React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { WareCategoryTypeEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { TopRightButtonContainer } from '../../../molecules/TopRightButtonContainer'\nimport { SubmitButton } from '../molecules/SubmitButton'\nimport { CategoryBasicForm } from '../organisms/CategoryFormBasic'\nimport { CategoryFormLoader } from '../organisms/CategoryFormLoader'\nimport { CategoryRecipesView } from '../organisms/CategoryRecipesView'\n\ninterface IProps {\n  categoryId: Maybe<ID>\n  categoryType: WareCategoryTypeEnum\n}\n\nconst titleByType = {\n  [WareCategoryTypeEnum.MAIN]: i18nMark('Ware categories'),\n  [WareCategoryTypeEnum.SIDE_DISH]: i18nMark('Sidedish categories'),\n  [WareCategoryTypeEnum.COVER]: i18nMark('Cover categories'),\n}\n\nexport const MenuCategoryPage: React.SFC<IProps> = ({\n  categoryId,\n  categoryType,\n}) => (\n  <FullPageLayout\n    width={16}\n    pageTitle={i18n._(titleByType[categoryType])}\n    hideLogoutWidget={true}\n    useBackButton={true}\n  >\n    <CategoryFormLoader categoryId={categoryId} categoryType={categoryType}>\n      <>\n        <TopRightButtonContainer>\n          <CanMutate\n            mutationName={\n              categoryId === null ? 'createWareCategory' : 'updateWareCategory'\n            }\n          >\n            <SubmitButton isCreate={categoryId === null} />\n          </CanMutate>\n        </TopRightButtonContainer>\n        <Card>\n          <CategoryBasicForm categoryType={categoryType} />\n        </Card>\n        <Card>\n          <Headline>\n            <Trans>Recipes assigned to this category</Trans>\n          </Headline>\n          <CategoryRecipesView categoryType={categoryType} />\n        </Card>\n      </>\n    </CategoryFormLoader>\n  </FullPageLayout>\n)\n","import styled from 'styled-components'\n\nexport const DataTableContainer = styled.div`\n  height: calc(100% - 4.5rem);\n  padding-top: 2rem;\n`\n","import React from 'react'\nimport { Redirect, RedirectProps } from 'react-router-dom'\n\nimport { resolveLocation } from './RelativeLink'\n\ninterface IProps extends RedirectProps {}\n\nexport const RelativeRedirect: React.SFC<IProps> = ({ to, from, ...props }) => (\n  <Redirect\n    to={resolveLocation(to, from || `${location.pathname}/`)}\n    from={from}\n    {...props}\n  />\n)\n","import { Trans } from '@lingui/react'\nimport { Dialog, DialogTitle } from '@material-ui/core'\nimport React, { Component } from 'react'\n\nimport { RelativeRedirect } from '../../../atoms/RelativeRedirect'\nimport { WareCategoryTypeEnum } from '../../../graph/types'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { getRecipeRoute } from '../models/MenuRecipeModel'\nimport { CreateButton } from './CreateButton'\n\ninterface IProps {}\n\ninterface IState {\n  isOpen: boolean\n  recipeType: Maybe<WareCategoryTypeEnum>\n}\n\nexport class RecipeTypeSelection extends Component<IProps, IState> {\n  state = { isOpen: false, recipeType: null }\n  onClose = () => {\n    this.setState({ isOpen: false })\n  }\n  onOpen = () => {\n    this.setState({ isOpen: true })\n  }\n  onSelect = (recipeType: WareCategoryTypeEnum) => () => {\n    this.setState({ isOpen: true, recipeType })\n  }\n  render() {\n    const { isOpen, recipeType } = this.state\n    return (\n      <>\n        {recipeType !== null && (\n          <RelativeRedirect\n            to={getRecipeRoute('create', recipeType)}\n            push={true}\n          />\n        )}\n        <CreateButton\n          onClick={ev => {\n            ev.preventDefault()\n            this.onOpen()\n          }}\n        />\n        <Dialog open={isOpen} onClose={this.onClose}>\n          <DialogTitle>Select item type</DialogTitle>\n          <TouchButton onClick={this.onSelect(WareCategoryTypeEnum.MAIN)}>\n            <Trans>Ware</Trans>\n          </TouchButton>\n          <TouchButton onClick={this.onSelect(WareCategoryTypeEnum.SIDE_DISH)}>\n            <Trans>Sidedish</Trans>\n          </TouchButton>\n          <TouchButton onClick={this.onSelect(WareCategoryTypeEnum.COVER)}>\n            <Trans>Cover</Trans>\n          </TouchButton>\n        </Dialog>\n      </>\n    )\n  }\n}\n","import React from 'react'\n\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { RecipeListTable } from '../molecules/RecipeListTable'\nimport { QueryRecipeList } from './RecipeList.graphql'\n\ninterface IProps {}\n\nexport const RecipeListLoader: React.SFC<IProps> = props => (\n  <WithRoot\n    render={({ user, settings }) => (\n      <QueryRecipeList\n        {...settings.queryProps}\n        renderLoading={false}\n        render={({ recipes }, { loading }) => (\n          <RecipeListTable\n            recipes={recipes}\n            onToggle={settings.menu.recipe.changeVisibility}\n            isLoading={loading}\n            heightStretch={true}\n            showTypeColumn={true}\n          />\n        )}\n      />\n    )}\n  />\n)\n","import React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { DataTableContainer } from '../../../atoms/DataTableContainer'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { SettingsCompanyBranchPicker } from '../../settings/organisms/SettingsCompanyBranchPicker'\nimport { RecipeTypeSelection } from '../molecules/RecipeTypeSelection'\nimport { RecipeListLoader } from '../organisms/RecipeListLoader'\n\nexport const MenuRecipeListPage: React.SFC = props => (\n  <>\n    <FullPageLayout pageTitle={i18n.t`Recipe overview`} useBackButton={true} />\n\n    <PageLayoutFullHeightItem>\n      <Card stretchToParent={true}>\n        <SettingsCompanyBranchPicker />\n        <CanMutate mutationName=\"createRecipe\">\n          <RecipeTypeSelection />\n        </CanMutate>\n        <DataTableContainer>\n          <RecipeListLoader />\n        </DataTableContainer>\n      </Card>\n    </PageLayoutFullHeightItem>\n  </>\n)\n","import React from 'react'\n\nimport { WareCategoryTypeEnum } from '../../../graph/types'\n\ninterface IProps {\n  type: WareCategoryTypeEnum\n  isMain?: boolean\n  isSideDish?: boolean\n  isCover?: boolean\n  children: ReactNode | ReactNode[]\n}\n\nexport const IsCategoryType: React.SFC<IProps> = ({\n  type,\n  isMain,\n  isSideDish,\n  isCover,\n  children,\n}) => {\n  if (\n    (isMain === true && type === WareCategoryTypeEnum.MAIN) ||\n    (isSideDish === true && type === WareCategoryTypeEnum.SIDE_DISH) ||\n    (isCover === true && type === WareCategoryTypeEnum.COVER)\n  ) {\n    return <>{children}</>\n  }\n  return null\n}\n","import React from 'react'\n\nimport {\n  GMenuCategoryListItem,\n  WareCategoryTypeEnum,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\nimport { QueryCategoryList } from './CategoryList.graphql'\n\ninterface IProps {\n  categoryType: WareCategoryTypeEnum\n  onAdd(recipe: TCategory): void\n  addButtonText: string\n  currentCategories: TCategory[]\n}\n\ntype TCategory = GMenuCategoryListItem.Fragment\n\nexport const CategorySuggestionPanel: React.SFC<IProps> = ({\n  categoryType,\n  currentCategories,\n  addButtonText,\n  onAdd,\n}) => (\n  <WithSettings\n    observe={true}\n    render={settings => (\n      <QueryCategoryList\n        {...settings.getQueryProps({ categoryType })}\n        fetchPolicy=\"cache-and-network\"\n        render={({ wareCategories }) => (\n          <MenuSuggestionPanel<TCategory>\n            onAdd={onAdd}\n            options={RM.without(currentCategories, wareCategories)}\n            addButtonText={addButtonText}\n          />\n        )}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { Field, FieldType, IFieldApi } from 'react-form'\n\nimport { DataTableEmptyText } from '../../../atoms/DataTable'\nimport {\n  GMenuCategoryListItem,\n  WareCategoryTypeEnum,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { CategoryListTable } from '../molecules/CategoryListTable'\nimport { CategorySuggestionPanel } from './CategorySuggestionPanel'\n\ninterface IProps {\n  categoryType: WareCategoryTypeEnum\n  addButtonText: string\n  noRowsText: string\n  field: FieldType\n}\n\nexport const RecipeCategoryView: React.SFC<IProps> = ({\n  categoryType,\n  addButtonText,\n  noRowsText,\n  field,\n}) => (\n  <Field field={field}>\n    {(fieldApi: IFieldApi<GMenuCategoryListItem.Fragment[]>) => (\n      <>\n        <CategoryListTable\n          categories={fieldApi.value}\n          showRemoveColumn={true}\n          showEditColumn={false}\n          showHeader={false}\n          onRemove={categoryId =>\n            fieldApi.setValue(\n              RM.reject(RM.propEq('id', categoryId), fieldApi.value),\n            )\n          }\n          noRowsDisplay={<DataTableEmptyText text={noRowsText} />}\n        />\n        <CategorySuggestionPanel\n          addButtonText={addButtonText}\n          categoryType={categoryType}\n          currentCategories={fieldApi.value}\n          onAdd={addedCategory =>\n            fieldApi.setValue(fieldApi.value.concat(addedCategory))\n          }\n        />\n      </>\n    )}\n  </Field>\n)\n","import React from 'react'\n\nimport {\n  FormInputTextBox,\n  TFormInputTextBoxProps,\n} from '../../../atoms/FormInputTextBox'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\n\ninterface IProps extends Partial<TFormInputTextBoxProps> {\n  icon?: string\n  isRequired?: boolean\n}\n\nexport const FormInputCode: React.SFC<IProps> = ({\n  field = 'code',\n  icon = 'label_outline',\n  isRequired = true,\n  ...props\n}) => (\n  <IconLine label={i18n.t`Code`.toLocaleLowerCase()} labelWidth={7}>\n    <FormInputTextBox\n      field={field}\n      width={9}\n      isRequired={true}\n      validatioName={i18n.t`Code`}\n      {...props}\n    />\n  </IconLine>\n)\n","import React from 'react'\n\nimport {\n  FormInputTextBox,\n  TFormInputTextBoxProps,\n} from '../../../atoms/FormInputTextBox'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\n\ninterface IProps extends Partial<TFormInputTextBoxProps> {\n  icon?: string\n}\n\nexport const FormInputDescription: React.SFC<IProps> = ({\n  field = 'descriptionLabel',\n  icon = 'label_outline',\n  ...props\n}) => (\n  <IconLine label={i18n.t`Public note`.toLocaleLowerCase()} labelWidth={7}>\n    <FormInputTextBox field={field} inputWidth={22} {...props} />\n  </IconLine>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GAllergens } from '../../../graph/types'\nimport { AllergenFragment } from '../graph/AllergenFragment.graphql'\n\nexport const AllergensQuery = gql`\n  query GAllergens {\n    allergens {\n      ...GAllergen\n    }\n  }\n  ${AllergenFragment}\n`\n\nexport const QueryAllergens = buildQuery<\n  GAllergens.Query,\n  GAllergens.Variables\n>(AllergensQuery)\n","import React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { AllergenEnum } from '../../../graph/types'\nimport { Colors } from '../../../styling'\nimport { QueryAllergens } from '../molecules/FormInputAllergens.graphql'\n\ninterface IProps {\n  selected: AllergenEnum[]\n  onToggle?(allergen: AllergenEnum): void\n}\n\nconst AllergenBox = styled.div`\n  float: left;\n  width: 2rem;\n  height: 2rem;\n  border: 1px solid ${Colors.greyMiddle};\n  margin: 0.3rem 0.6rem 0.3rem 0;\n  font-size: 1.5rem;\n  text-align: center;\n  vertical-align: center;\n  cursor: default;\n  ${({ active }: { active: boolean }) => css`\n    color: ${active ? Colors.black : Colors.greyMiddle};\n    background-color: ${active ? Colors.yellow : Colors.white};\n  `};\n`\n\nexport const MenuAllergenIndicator: React.SFC<IProps> = ({\n  selected,\n  onToggle,\n}) => (\n  <QueryAllergens\n    render={({ allergens }) => (\n      <>\n        {allergens.map(allergen => {\n          const props = {\n            active: selected.includes(allergen.enum),\n            onClick: onToggle && (() => onToggle(allergen.enum)),\n          }\n          return (\n            <AllergenBox key={allergen.enum} title={allergen.code} {...props}>\n              {allergen.category}\n            </AllergenBox>\n          )\n        })}\n      </>\n    )}\n  />\n)\n","import React from 'react'\nimport { Field, IFieldApi } from 'react-form'\n\nimport { RM } from '../../../helpers/ramda'\nimport { MenuAllergenIndicator } from '../atoms/AllergenIndicator'\nimport { TIngredient } from '../menutypes'\n\nconst extractAllergens = RM.pipe(\n  RM.map(RM.prop('allergens')),\n  RM.flatten,\n  RM.uniq,\n)\n\nexport const RecipeAllergenDisplay: React.SFC = () => (\n  <Field field=\"ingredients\">\n    {({ value }: IFieldApi<TIngredient[]>) => {\n      const allergens = extractAllergens(value)\n      // @ts-ignore Something wrong with Ramda typings\n      return <MenuAllergenIndicator selected={allergens} />\n    }}\n  </Field>\n)\n","import React from 'react'\n\nimport { FormColumn, FormContainer } from '../../../atoms/FormContainer'\nimport { FormInputCheckbox } from '../../../atoms/FormInputCheckbox'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { WareCategoryTypeEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport { IsCategoryType } from '../atoms/IsCategoryType'\nimport { TRecipeType } from '../menutypes'\nimport { FormDeleteButton } from '../molecules/FormDeleteButton'\nimport { FormInputCode } from '../molecules/FormInputCode'\nimport { FormInputDescription } from '../molecules/FormInputDescription'\nimport { FormInputInternalNote } from '../molecules/FormInputInternalNote'\nimport { FormInputName } from '../molecules/FormInputName'\nimport { RecipeAllergenDisplay } from '../molecules/RecipeAllergenDisplay'\n\ninterface IProps {\n  recipeType: TRecipeType\n}\n\nexport const RecipeFormBasic: React.SFC<IProps> = ({ recipeType }) => {\n  const isMain = recipeType === WareCategoryTypeEnum.MAIN\n  return (\n    <FormContainer>\n      <FormColumn>\n        <FormInputName placeholder={i18n.t`Recipe name`} />\n        <FormInputCode placeholder={i18n.t`Recipe code`} />\n        <FormInputInternalNote placeholder={i18n.t`Recipe internal note`} />\n        {isMain && (\n          <FormInputDescription\n            placeholder={i18n.t`Public note for customers, allergens`}\n          />\n        )}\n        <IsCategoryType type={recipeType} isMain={true}>\n          <IconLine labelWidth={7} icon=\"error_outline\">\n            {i18n.t`Allergens based on stock cards`}\n            <br />\n            <RecipeAllergenDisplay />\n          </IconLine>\n        </IsCategoryType>\n        <IconLine labelWidth={7}>\n          <FormInputCheckbox\n            field=\"visible\"\n            label={i18n.t`To show this recipe`}\n          />\n        </IconLine>\n      </FormColumn>\n      <FormColumn>\n        <WithSettings\n          render={({ menu }) => (\n            <FormDeleteButton\n              confirmText={i18n.t`Remove this recipe?`}\n              onDelete={id => menu.recipe.deleteRecipe(id)}\n            />\n          )}\n        />\n      </FormColumn>\n    </FormContainer>\n  )\n}\n","import React from 'react'\n\nimport { GMenuRecipeForm, WarePriceTypeEnum } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { MenuBaseFormLoader } from '../atoms/MenuBaseFormLoader'\nimport { useMenu } from '../hooks/useMenu'\nimport { TRecipeFormValues, TRecipeType } from '../menutypes'\nimport { MenuRecipeFormQuery } from './RecipeForm.graphql'\n\ninterface IProps {\n  recipeId: Maybe<ID>\n  recipeType: TRecipeType\n}\n\nexport const RecipeFormLoader: React.SFC<IProps> = ({\n  recipeId,\n  recipeType,\n  children,\n}) => {\n  const menu = useMenu()\n  return (\n    <MenuBaseFormLoader<TRecipeFormValues>\n      isCreate={recipeId === null}\n      onCreate={values => menu.recipe.createRecipe(values, recipeType)}\n      onUpdate={values => menu.recipe.updateRecipe(values)}\n      getDefaultValues={() => getDefaults(recipeType)}\n      loadDefaults={async () => {\n        const defaultVats = await menu.recipe.getDefaultVat()\n        const defaults = { ...getDefaults(recipeType) }\n        defaults.prices = getPriceMap(priceType => ({\n          value: 0,\n          vatId: defaultVats[priceType],\n        }))\n        return defaults\n      }}\n      loadValues={async () => {\n        const { data } = await menu.client.query<GMenuRecipeForm.Query>({\n          query: MenuRecipeFormQuery,\n          variables: { recipeId },\n          fetchPolicy: 'no-cache',\n        })\n        return normalizeValues(data.recipe)\n      }}\n    >\n      {children}\n    </MenuBaseFormLoader>\n  )\n}\n\nfunction getPriceMap<T>(acc: (priceType: WarePriceTypeEnum) => T) {\n  return [WarePriceTypeEnum.DELIVERY, WarePriceTypeEnum.INHOUSE].reduce(\n    (result, priceType) => {\n      result[priceType] = acc(priceType)\n      return result\n    },\n    {},\n  ) as { [priceType in WarePriceTypeEnum]: T }\n}\n\nfunction getDefaults(recipeType: TRecipeType): TRecipeFormValues {\n  return {\n    id: 'NEW',\n    code: '',\n    nameLabel: '',\n    internalNote: '',\n    descriptionLabel: '',\n    visible: true,\n    recipeType: {\n      enum: recipeType,\n    },\n    sourcePrices: [],\n    prices: getPriceMap(() => ({\n      value: 0,\n      vatId: null,\n    })),\n    sourceAssociatedRecipes: [],\n    associatedRecipes: [],\n    sourceIngredients: [],\n    ingredients: [],\n    sideDishes: [],\n    categories: [],\n  }\n}\n\nfunction normalizeValues(\n  recipeSource: GMenuRecipeForm.Recipe,\n): TRecipeFormValues {\n  return {\n    ...recipeSource,\n    associatedRecipes: recipeSource.sourceAssociatedRecipes.map(\n      ({ priceType, recipe }) => ({\n        warePriceType: priceType.enum,\n        nameLabel: recipe.nameLabel,\n        associatedRecipe: recipe.id,\n        formattedPrice: '?',\n      }),\n    ),\n    ingredients: recipeSource.sourceIngredients.map(\n      ({ quantity, stockItem: { id, label, allergens, wareUnit } }) => ({\n        stockItem: id,\n        label,\n        quantity,\n        unitLabel: wareUnit.code,\n        allergens: allergens.map(RM.prop('enum')),\n      }),\n    ),\n    prices: getPriceMap(priceType => {\n      const sourcePrice = recipeSource.sourcePrices.find(\n        RM.pathEq(['priceType', 'enum'], priceType),\n      )\n      if (!sourcePrice) {\n        return {\n          value: 0,\n          vatId: null,\n        }\n      }\n      return {\n        value: sourcePrice.price.value,\n        vatId: sourcePrice.vat.id,\n      }\n    }),\n  }\n}\n","import React from 'react'\nimport { isDecimal, isEmpty } from 'validator'\n\nimport {\n  FormInputTextBox,\n  TFormInputTextBoxProps,\n} from '../../../atoms/FormInputTextBox'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\n\ninterface IProps extends Partial<TFormInputTextBoxProps> {\n  icon?: string\n}\n\nconst formInputPriceValidate = (value: string) => {\n  if (value === undefined || isEmpty(value + '') || !isDecimal(value + '')) {\n    return i18n.t`Price must be a number`\n  }\n  return null\n}\n\nexport const FormInputPrice: React.SFC<IProps> = ({\n  field = 'price.value',\n  icon = 'toll',\n  ...props\n}) => (\n  <IconLine icon={icon}>\n    <FormInputTextBox\n      field={field}\n      inputWidth={5}\n      validate={formInputPriceValidate}\n      {...props}\n    />\n    Kč\n  </IconLine>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GVats } from '../../../graph/types'\n\nexport const VatsQuery = gql`\n  query GVats($branchId: ID!) {\n    vats(companyBranch: $branchId) {\n      id\n      vat\n    }\n  }\n`\n\nexport const QueryVat = buildQuery<GVats.Query, GVats.Variables>(VatsQuery)\n","import React from 'react'\nimport { FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputFlatSelect } from '../../../atoms/FormInputFlatSelect'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { i18n } from '../../../i18n'\nimport { QueryVat } from './FormInputVatSelect.graphql'\n\ninterface IProps {\n  field?: FieldType\n}\n\nconst DphContainer = styled(IconLine)`\n  margin-left: 5rem;\n`\n\nexport const FormInputVatSelect: React.SFC<IProps> = ({\n  field = 'price.vat',\n}) => (\n  <WithRoot\n    render={({ settings }) => (\n      <QueryVat\n        {...settings.queryProps}\n        renderLoading={false}\n        render={({ vats }) => (\n          <DphContainer label={`${i18n.t`VAT`}:`}>\n            {vats && (\n              <FormInputFlatSelect\n                field={field}\n                items={vats}\n                formatItem={({ vat }) => `${vat}%`}\n                isRequired={true}\n                validationName={i18n.t`VAT`}\n              />\n            )}\n          </DphContainer>\n        )}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport { NestedField } from 'react-form'\n\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { Headline } from '../../../atoms/Headline'\nimport { TPriceType } from '../menutypes'\nimport { FormInputPrice } from './FormInputPrice'\nimport { FormInputVatSelect } from './FormInputVatSelect'\n\ninterface IProps {\n  priceType: TPriceType\n  label: string\n}\n\nexport const FormPricingField: React.SFC<IProps> = ({ priceType, label }) => (\n  <>\n    <Headline>{label}</Headline>\n    <NestedField field={['prices', priceType]}>\n      <FlexRowSingle justify=\"flex-start\">\n        <FormInputPrice field=\"value\" />\n        <FormInputVatSelect field=\"vatId\" />\n      </FlexRowSingle>\n    </NestedField>\n  </>\n)\n","import React from 'react'\n\nimport {\n  Column,\n  ColumnRendererWithNote,\n  DataTable,\n} from '../../../atoms/DataTable'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonRemove } from '../../../molecules/TouchButtonRemove'\nimport { TAssocRecipe } from '../menutypes'\n\ninterface IProps {\n  recipes: TAssocRecipe[]\n  onRemove(recipeId: ID): void\n}\n\nexport const RecipeAssocListTable: React.SFC<IProps> = ({\n  recipes,\n  onRemove,\n}) => (\n  <DataTable items={recipes} disableHeader={true}>\n    <Column\n      dataKey=\"associatedRecipe\"\n      width={60}\n      cellRenderer={({ cellData }) => (\n        <TouchButtonRemove onClick={() => onRemove(cellData)} />\n      )}\n    />\n    <Column\n      dataKey=\"nameLabel\"\n      width={300}\n      label={i18n.t`Name`}\n      cellRenderer={ColumnRendererWithNote}\n      columnData={{ noteKey: 'internalNote' }}\n    />\n    <Column dataKey=\"formattedPrice\" width={100} label={i18n.t`Price`} />\n  </DataTable>\n)\n","import React from 'react'\nimport { Field, IFieldApi } from 'react-form'\n\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { GMenuAssocRecipe } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\nimport { TAssocRecipe, TPriceType } from '../menutypes'\nimport { RecipeAssocListTable } from '../molecules/RecipeAssocListTable'\nimport { QueryMenuRecipeFormAssoc } from './RecipeForm.graphql'\n\ninterface IProps {\n  recipeId: MaybeID\n  priceType: TPriceType\n}\n\nexport const RecipeAssociatedView: React.SFC<IProps> = ({\n  priceType,\n  recipeId,\n}) => (\n  <Field field=\"associatedRecipes\">\n    {(fieldApi: IFieldApi<TAssocRecipe[]>) => {\n      const priceTypeRecipes = RM.filter(\n        RM.propEq('warePriceType', priceType),\n        fieldApi.value,\n      )\n      const isAssociated = (id: ID) =>\n        priceTypeRecipes.some(RM.propEq('associatedRecipe', id))\n\n      const rejectSuggestions = RM.reject(\n        (recipe: GMenuAssocRecipe.Fragment) =>\n          recipe.id === recipeId || isAssociated(recipe.id),\n      )\n      const onAddRecipe = (addedRecipe: GMenuAssocRecipe.Fragment) => {\n        fieldApi.setValue(\n          fieldApi.value.concat({\n            warePriceType: priceType,\n            associatedRecipe: addedRecipe.id,\n            nameLabel: addedRecipe.nameLabel,\n            formattedPrice: '?',\n          }),\n        )\n      }\n      const onRemoveRecipe = (id: ID) => {\n        fieldApi.setValue(\n          RM.reject(\n            ({ associatedRecipe, warePriceType }) =>\n              associatedRecipe === id && warePriceType === priceType,\n            fieldApi.value,\n          ),\n        )\n      }\n\n      return (\n        <>\n          <RecipeAssocListTable\n            recipes={priceTypeRecipes}\n            onRemove={onRemoveRecipe}\n          />\n          <WithSettings\n            render={settings => (\n              <QueryMenuRecipeFormAssoc\n                {...settings.queryProps}\n                render={({ recipes }) => (\n                  <MenuSuggestionPanel\n                    options={rejectSuggestions(recipes)}\n                    onAdd={onAddRecipe}\n                    // labelKey=\"nameLabel\"\n                  />\n                )}\n              />\n            )}\n          />\n          <VerticalGap />\n        </>\n      )\n    }}\n  </Field>\n)\n","import { i18nMark } from '@lingui/react'\nimport React, { Fragment } from 'react'\n\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { WarePriceTypeEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { TRecipeType } from '../menutypes'\nimport { FormPricingField } from '../molecules/FormPricingField'\nimport { RecipeAssociatedView } from './RecipeAssociatedView'\n\ninterface IProps {\n  recipeId: MaybeID\n  recipeType: TRecipeType\n}\n\nexport const priceTypes = [\n  {\n    priceType: WarePriceTypeEnum.DELIVERY,\n    label: i18nMark('Delivery sale'),\n  },\n  {\n    priceType: WarePriceTypeEnum.INHOUSE,\n    label: i18nMark('Local sale'),\n  },\n]\n\nexport const RecipeFormPricing: React.SFC<IProps> = ({\n  recipeType,\n  recipeId,\n}) => (\n  <>\n    {priceTypes.map(({ priceType, label }) => (\n      <Fragment key={priceType}>\n        <FormPricingField priceType={priceType} label={i18n._(label)} />\n        <VerticalGap />\n        {recipeType === TRecipeType.MAIN && (\n          <RecipeAssociatedView priceType={priceType} recipeId={recipeId} />\n        )}\n      </Fragment>\n    ))}\n  </>\n)\n","import React from 'react'\nimport validator from 'validator'\n\nimport {\n  Column,\n  ColumnRendererRemove,\n  DataTable,\n  DataTableEmptyText,\n} from '../../../atoms/DataTable'\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { i18n } from '../../../i18n'\nimport { TIngredient } from '../menutypes'\n\ninterface IProps {\n  ingredients: TIngredient[]\n  onRemove?(stockItemId: ID): void\n  isLoading?: boolean\n}\n\nexport const RecipeIngredientsTable: React.SFC<IProps> = ({\n  ingredients,\n  onRemove,\n  isLoading = false,\n}) => (\n  <DataTable\n    isLoading={isLoading}\n    items={ingredients}\n    disableHeader={true}\n    noRowsRenderer={() => (\n      <DataTableEmptyText text={i18n.t`Recipe has no ingredients`} />\n    )}\n  >\n    <Column\n      dataKey=\"stockItem\"\n      width={60}\n      cellRenderer={ColumnRendererRemove}\n      columnData={{ onRemove }}\n    />\n    <Column dataKey=\"label\" width={300} label={i18n.t`Name`} />\n    <Column\n      dataKey=\"quantity\"\n      width={60}\n      label={i18n.t`Quantity`}\n      cellRenderer={({ rowIndex }) => (\n        <FormInputTextBox\n          field={['ingredients', rowIndex, 'quantity']}\n          validate={validateQuantity}\n          width=\"40px\"\n        />\n      )}\n    />\n    <Column dataKey=\"unitLabel\" width={100} label={i18n.t`Ware unit`} />\n  </DataTable>\n)\n\nfunction validateQuantity(value: string) {\n  const fieldName = i18n.t`Quantity`\n  if (validator.isEmpty(value + '')) {\n    return i18n.t`${fieldName} must be entered`\n  }\n  if (!validator.isFloat(value + '', { min: 0 })) {\n    return i18n.t`${fieldName} must be a positive number`\n  }\n  return null\n}\n","import React from 'react'\nimport { Field, IFieldApi } from 'react-form'\n\nimport { GMenuStockItem } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport { MenuSuggestionPanel } from '../atoms/MenuSuggestionPanel'\nimport { TIngredient } from '../menutypes'\nimport { RecipeIngredientsTable } from '../molecules/RecipeIngredientsTable'\nimport { QueryMenuStockList } from './StockList.graphql'\n\ninterface IProps {}\n\nconst unselectedStockOnly = RM.differenceWith(\n  ({ id }, { stockItem }) => id === stockItem,\n)\n\nexport const RecipeIngredientsView: React.SFC<IProps> = () => (\n  <WithSettings\n    observe={false}\n    render={settings => (\n      <Field field=\"ingredients\">\n        {(fieldApi: IFieldApi<TIngredient[]>) => (\n          <>\n            <RecipeIngredientsTable\n              ingredients={fieldApi.value}\n              onRemove={stockItem => {\n                fieldApi.setValue(\n                  RM.reject(RM.propEq('stockItem', stockItem), fieldApi.value),\n                )\n              }}\n            />\n            <QueryMenuStockList\n              {...settings.queryProps}\n              render={({ stockItems }) => (\n                <MenuSuggestionPanel\n                  addButtonText={i18n.t`Add ingredient`}\n                  options={unselectedStockOnly(stockItems, fieldApi.value)}\n                  onAdd={(addedStockItem: GMenuStockItem.Fragment) => {\n                    fieldApi.setValue([\n                      ...fieldApi.value,\n                      {\n                        stockItem: addedStockItem.id,\n                        label: addedStockItem.nameLabel,\n                        quantity: 1,\n                        unitLabel: addedStockItem.wareUnit.code,\n                        allergens: addedStockItem.allergens.map(\n                          RM.prop('enum'),\n                        ),\n                      },\n                    ])\n                  }}\n                />\n              )}\n            />\n          </>\n        )}\n      </Field>\n    )}\n  />\n)\n","import { i18nMark, Trans } from '@lingui/react'\nimport React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { NoteText } from '../../../atoms/DataTable'\nimport { Headline } from '../../../atoms/Headline'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { WareCategoryTypeEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { TopRightButtonContainer } from '../../../molecules/TopRightButtonContainer'\nimport { IsCategoryType } from '../atoms/IsCategoryType'\nimport { SubmitButton } from '../molecules/SubmitButton'\nimport { RecipeCategoryView } from '../organisms/RecipeCategoryView'\nimport { RecipeFormBasic } from '../organisms/RecipeFormBasic'\nimport { RecipeFormLoader } from '../organisms/RecipeFormLoader'\nimport { RecipeFormPricing } from '../organisms/RecipeFormPricing'\nimport { RecipeIngredientsView } from '../organisms/RecipeIngredientsView'\n\ninterface IProps {\n  recipeId: Maybe<ID>\n  recipeType: WareCategoryTypeEnum\n}\n\nconst titleByType = {\n  [WareCategoryTypeEnum.MAIN]: i18nMark('Ware recipe'),\n  [WareCategoryTypeEnum.SIDE_DISH]: i18nMark('Sidedish recipe'),\n  [WareCategoryTypeEnum.COVER]: i18nMark('Cover recipe'),\n}\n\nexport const MenuRecipePage: React.SFC<IProps> = ({ recipeId, recipeType }) => (\n  <FullPageLayout\n    width={15}\n    pageTitle={i18n._(titleByType[recipeType])}\n    hideLogoutWidget={true}\n    useBackButton={true}\n  >\n    <RecipeFormLoader recipeId={recipeId} recipeType={recipeType}>\n      <TopRightButtonContainer>\n        <CanMutate\n          mutationName={recipeId === null ? 'createRecipe' : 'updateRecipe'}\n        >\n          <SubmitButton isCreate={recipeId === null} />\n        </CanMutate>\n      </TopRightButtonContainer>\n      <Card>\n        <RecipeFormBasic recipeType={recipeType} />\n      </Card>\n      <Card>\n        <RecipeFormPricing recipeType={recipeType} recipeId={recipeId} />\n      </Card>\n      <IsCategoryType type={recipeType} isMain={true}>\n        <Card>\n          <Headline>\n            <Trans>Recipe ingredients</Trans>\n          </Headline>\n          <VerticalGap />\n          <RecipeIngredientsView />\n        </Card>\n        <Card>\n          <Headline>\n            <Trans>Sidedish categories</Trans>\n          </Headline>\n          <NoteText>\n            <Trans>These sidedish are presented with recipe</Trans>\n          </NoteText>\n          <RecipeCategoryView\n            categoryType={WareCategoryTypeEnum.SIDE_DISH}\n            field=\"sideDishes\"\n            addButtonText={i18n.t`Attach sidedish category`}\n            noRowsText={i18n.t`Recipe has no sidedish category attached`}\n          />\n        </Card>\n        <Card>\n          <Headline>\n            <Trans>Category assignments</Trans>\n          </Headline>\n          <NoteText>\n            <Trans>Recipe is in these categories</Trans>\n          </NoteText>\n          <RecipeCategoryView\n            categoryType={WareCategoryTypeEnum.MAIN}\n            field=\"categories\"\n            addButtonText={i18n.t`Add to category`}\n            noRowsText={i18n.t`Recipe is not in any category`}\n          />\n        </Card>\n      </IsCategoryType>\n    </RecipeFormLoader>\n  </FullPageLayout>\n)\n","import { Trans } from '@lingui/react'\nimport numeral from 'numeral'\nimport React from 'react'\n\nimport { GWareUnit } from '../../../graph/types'\nimport { TouchButton } from '../../../molecules/TouchButton'\n\ninterface IProps {\n  cardName: string\n  wareUnit: Maybe<GWareUnit.Fragment>\n  quantity: number\n  onConfirm(): void\n}\n\nexport const StockDepositConfirmButton: React.SFC<IProps> = ({\n  wareUnit,\n  quantity,\n  onConfirm,\n}) => (\n  <TouchButton height={0.5} disabled={wareUnit === null} onClick={onConfirm}>\n    {wareUnit ? (\n      <Trans>{`Add ${numeral(quantity).format('0,0.[00]')} ${\n        wareUnit.code\n      }`}</Trans>\n    ) : (\n      <Trans>No stock card selected</Trans>\n    )}\n  </TouchButton>\n)\n","import React from 'react'\n\nimport { FormInputStyled } from '../../../atoms/FormInputTextBox'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {\n  value: string\n  onFilter(value: string): void\n  onConfirm(): void\n}\n\nexport const StockDepositFilterInput = React.forwardRef<\n  HTMLInputElement,\n  IProps\n>(({ value, onFilter, onConfirm }, ref) => (\n  <IconLine label={i18n.t`Stock card`} labelWidth={7}>\n    <FormInputStyled\n      // @ts-ignore https://github.com/DefinitelyTyped/DefinitelyTyped/issues/28884\n      ref={ref}\n      autoFocus={true}\n      placeholder={`${i18n.t`Code`.toLocaleLowerCase()} / ${i18n.t`PLU`} / ${i18n.t`Title`.toLocaleLowerCase()}`}\n      value={value}\n      onChange={ev => {\n        onFilter(ev.target.value)\n      }}\n      onKeyPressCapture={ev => {\n        if (ev.key === 'Enter') {\n          ev.preventDefault()\n          onConfirm()\n        }\n      }}\n    />\n  </IconLine>\n))\n","import numeral from 'numeral'\nimport React from 'react'\n\nimport { FormInputStyled } from '../../../atoms/FormInputTextBox'\n\ninterface IProps {\n  enabled: boolean\n  onChange(quantity: number): void\n  onConfirm(): void\n}\n\nexport const StockDepositQuantityInput = React.forwardRef<\n  HTMLInputElement,\n  IProps\n>(({ enabled, onChange, onConfirm }, ref) => (\n  <FormInputStyled\n    // @ts-ignore https://github.com/DefinitelyTyped/DefinitelyTyped/issues/28884\n    ref={ref}\n    disabled={!enabled}\n    onChange={ev => {\n      const value = numeral(ev.target.value).value()\n      onChange(value)\n    }}\n    onKeyPressCapture={ev => {\n      if (ev.key === 'Enter') {\n        ev.preventDefault()\n        onConfirm()\n      }\n    }}\n  />\n))\n","import React from 'react'\nimport { TableCellProps } from 'react-virtualized'\nimport styled from 'styled-components'\n\nimport { Column, DataTable } from '../../../atoms/DataTable'\nimport { DataTableContainer } from '../../../atoms/DataTableContainer'\nimport { GMenuStockDeposit } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\n\ninterface IProps {\n  searchValue: string\n  stockItems: GMenuStockDeposit.StockItems[]\n  onSelect(stockItem: GMenuStockDeposit.StockItems): void\n}\n\nexport const StockDepositResultTable: React.SFC<IProps> = ({\n  stockItems,\n  searchValue,\n  onSelect,\n}) => (\n  <DataTableContainer>\n    <DataTable items={stockItems} heightStretch={false}>\n      <Column\n        dataKey=\"id\"\n        width={60}\n        cellRenderer={ColumnRendererSelect}\n        columnData={{ onSelect }}\n      />\n      <Column\n        dataKey=\"quantity\"\n        width={100}\n        label={i18n.t`Card stock`}\n        cellRenderer={stockWithUnit}\n      />\n      <Column\n        dataKey=\"code\"\n        width={100}\n        label={i18n.t`Card code`}\n        cellRenderer={highlightMatch(searchValue)}\n      />\n      <Column\n        dataKey=\"nameLabel\"\n        width={300}\n        label={i18n.t`Card name`}\n        cellRenderer={highlightMatch(searchValue)}\n      />\n      <Column dataKey=\"note\" width={300} label={i18n.t`Card note`} />\n    </DataTable>\n  </DataTableContainer>\n)\n\nfunction ColumnRendererSelect({\n  rowData,\n  columnData: { onSelect },\n}: TableCellProps) {\n  return (\n    <TouchButton\n      iconName=\"done\"\n      width={Spacing.ButtonHeight}\n      height={Spacing.ButtonHeight}\n      onClick={() => onSelect(rowData)}\n    />\n  )\n}\n\nconst HighlightedValue = styled.span`\n  background-color: ${Colors.yellow};\n`\n\nfunction highlightMatch(searchValue: string) {\n  return ({ cellData }: TableCellProps) => {\n    const index = cellData\n      .toLocaleLowerCase()\n      .indexOf(searchValue.toLocaleLowerCase())\n    if (index === -1) {\n      return cellData\n    }\n    const begin = cellData.substring(0, index)\n    const match = cellData.substring(index, index + searchValue.length)\n    const end = cellData.substring(index + searchValue.length)\n    return (\n      <>\n        {begin}\n        <HighlightedValue>{match}</HighlightedValue>\n        {end}\n      </>\n    )\n  }\n}\n\nfunction stockWithUnit({ cellData, rowData }: TableCellProps) {\n  return `${cellData} ${rowData.wareUnit.code}`\n}\n","import { Trans } from '@lingui/react'\nimport React from 'react'\n\nimport { FormColumn, FormContainer } from '../../../atoms/FormContainer'\nimport { Headline } from '../../../atoms/Headline'\nimport { RM } from '../../../helpers/ramda'\nimport { StockDepositConfirmButton } from '../molecules/StockDepositConfirmButton'\nimport { StockDepositFilterInput } from '../molecules/StockDepositFilterInput'\nimport { StockDepositQuantityInput } from '../molecules/StockDepositQuantityInput'\nimport { StockDepositResultTable } from '../molecules/StockDepositResultTable'\nimport { TStockItem } from './StockDepositLoader'\n\ninterface IProps {\n  stockItems: TStockItem[]\n  onDeposit(stockItem: TStockItem, quantity: number): void\n}\n\ninterface IState {\n  targetStockItem: Maybe<TStockItem>\n  filteredStockItems: TStockItem[]\n  searchValue: string\n  inputQuantity: number\n}\n\nexport class StockDepositControl extends React.Component<IProps, IState> {\n  state: IState = {\n    targetStockItem: null,\n    filteredStockItems: [],\n    searchValue: '',\n    inputQuantity: 0,\n  }\n  filterInputRef = React.createRef<HTMLInputElement>()\n  quantityInputRef = React.createRef<HTMLInputElement>()\n  onFilter = (searchValue: string) => {\n    if (searchValue.trim() === '') {\n      this.setState({\n        filteredStockItems: [],\n        searchValue: '',\n        targetStockItem: null,\n      })\n      return\n    }\n    const partialMatch = isPartialMatch(searchValue)\n    const filteredStockItems = this.props.stockItems.filter(\n      RM.cond([\n        [RM.propEq('plu', searchValue), RM.T],\n        [RM.propSatisfies(partialMatch, 'code'), RM.T],\n        [RM.propSatisfies(partialMatch, 'nameLabel'), RM.T],\n      ]),\n    )\n    let targetStockItem: Maybe<TStockItem> = null\n    if (filteredStockItems.length === 1) {\n      targetStockItem = RM.head(filteredStockItems)!\n    }\n    this.setState({\n      filteredStockItems,\n      searchValue: searchValue,\n      targetStockItem,\n    })\n  }\n  onConfirmFilter = () => {\n    if (this.state.filteredStockItems.length === 1) {\n      this.quantityInputRef.current!.focus()\n    }\n  }\n  onQuantity = (quantity: number) => {\n    this.setState({ inputQuantity: quantity })\n  }\n  onSelectStockItem = (stockItem: TStockItem) => {\n    this.setState(\n      {\n        targetStockItem: stockItem,\n        filteredStockItems: [stockItem],\n      },\n      () => {\n        this.quantityInputRef.current!.focus()\n      },\n    )\n  }\n  onConfirm = () => {\n    const { targetStockItem, inputQuantity } = this.state\n    if (targetStockItem && inputQuantity !== 0) {\n      this.props.onDeposit(targetStockItem, inputQuantity)\n    }\n    this.setState(\n      { targetStockItem: null, searchValue: '', inputQuantity: 0 },\n      () => {\n        this.quantityInputRef.current!.value = ''\n        this.filterInputRef.current!.focus()\n      },\n    )\n  }\n  render() {\n    const {\n      searchValue,\n      filteredStockItems,\n      targetStockItem,\n      inputQuantity,\n    } = this.state\n    const hasSearchValue = searchValue.trim() !== ''\n    const isNoneFind = filteredStockItems.length === 0\n    const isMultiFind = filteredStockItems.length > 1\n    return (\n      <>\n        <FormContainer>\n          <FormColumn>\n            <StockDepositFilterInput\n              onFilter={this.onFilter}\n              onConfirm={this.onConfirmFilter}\n              value={searchValue}\n              ref={this.filterInputRef}\n            />\n          </FormColumn>\n          <FormColumn>\n            <StockDepositQuantityInput\n              enabled={targetStockItem !== null}\n              onChange={this.onQuantity}\n              onConfirm={this.onConfirm}\n              ref={this.quantityInputRef}\n            />\n          </FormColumn>\n          <FormColumn>\n            <StockDepositConfirmButton\n              cardName={targetStockItem ? targetStockItem.nameLabel : ''}\n              quantity={inputQuantity}\n              wareUnit={targetStockItem ? targetStockItem.wareUnit : null}\n              onConfirm={this.onConfirm}\n            />\n          </FormColumn>\n        </FormContainer>\n        <Headline>\n          {hasSearchValue &&\n            isMultiFind && (\n              <Trans>\n                Continue typing to find single stock card or select one from the\n                list\n              </Trans>\n            )}\n          {hasSearchValue &&\n            isNoneFind && (\n              <Trans>No stock card found from entered search value</Trans>\n            )}\n          {hasSearchValue &&\n            targetStockItem && (\n              <Trans>\n                Stock card <b>{targetStockItem.nameLabel}</b> is selected\n              </Trans>\n            )}\n        </Headline>\n        {hasSearchValue && (\n          <StockDepositResultTable\n            searchValue={searchValue}\n            stockItems={filteredStockItems}\n            onSelect={this.onSelectStockItem}\n          />\n        )}\n      </>\n    )\n  }\n}\n\nfunction isPartialMatch(searchValue: string) {\n  const search = searchValue.toLocaleLowerCase()\n  return (propValue: string) => propValue.toLocaleLowerCase().includes(search)\n}\n","import gql from 'graphql-tag'\n\nimport { buildMutation } from '../../../graph/buildMutation'\nimport { buildQuery } from '../../../graph/buildQuery'\nimport {\n  GChangeMenuStockQuantity,\n  GMenuStockDeposit,\n} from '../../../graph/types'\nimport { WareUnitFragment } from '../graph/WareUnitFragment.graphql'\n\nconst MenuStockDepositQuery = gql`\n  query GMenuStockDeposit($branchId: ID!) {\n    stockItems(companyBranch: $branchId) {\n      id\n      code\n      plu\n      nameLabel: label\n      note\n      quantity\n      wareUnit {\n        ...GWareUnit\n      }\n    }\n  }\n  ${WareUnitFragment}\n`\n\nconst ChangeMenuStockQuantityMutation = gql`\n  mutation GChangeMenuStockQuantity($stockItem: ID!, $quantityChange: Float!) {\n    changeAmountStockItem(id: $stockItem, amountOffset: $quantityChange) {\n      id\n      quantity\n    }\n  }\n`\n\nexport const ChangeMenuStockQuantity = buildMutation<\n  GChangeMenuStockQuantity.Mutation,\n  GChangeMenuStockQuantity.Variables\n>(ChangeMenuStockQuantityMutation)\n\nexport const QueryMenuStockDeposit = buildQuery<\n  GMenuStockDeposit.Query,\n  GMenuStockDeposit.Variables\n>(MenuStockDepositQuery)\n","import { DocumentNode } from 'graphql'\nimport React from 'react'\nimport { Mutation, MutationFn, MutationProps } from 'react-apollo'\n\nexport function buildMutation<TData, TVariables>(mutation: DocumentNode) {\n  interface IProps\n    extends Omit<MutationProps<TData, TVariables>, 'mutation' | 'children'> {\n    render(result: MutationFn<TData, TVariables>): ReactNode\n  }\n  const GMutation: React.SFC<IProps> = ({ render, children, ...props }) => (\n    <Mutation mutation={mutation} {...props}>\n      {render}\n    </Mutation>\n  )\n  return GMutation\n}\n","import React from 'react'\n\nimport { GMenuStockDeposit } from '../../../graph/types'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport {\n  ChangeMenuStockQuantity,\n  QueryMenuStockDeposit,\n} from './StockDepositLoader.graphql'\n\nexport type TStockItem = GMenuStockDeposit.StockItems\n\nexport type TDepositFn = (stockItem: TStockItem, quantity: number) => void\n\ninterface IProps {\n  children(stockItems: TStockItem[], onDeposit: TDepositFn): ReactNode\n}\n\nexport const StockDepositLoader: React.SFC<IProps> = ({ children }) => (\n  <ChangeMenuStockQuantity\n    render={execute => {\n      const onDeposit: TDepositFn = (stockItem, quantity) => {\n        execute({\n          variables: { stockItem: stockItem.id, quantityChange: quantity },\n        })\n      }\n      return (\n        <WithSettings\n          render={settings => (\n            <QueryMenuStockDeposit\n              {...settings.queryProps}\n              render={({ stockItems }) => children(stockItems, onDeposit)}\n            />\n          )}\n        />\n      )\n    }}\n  />\n)\n","import React from 'react'\n\nimport { Card } from '../../../atoms/Card'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { SettingsCompanyBranchPicker } from '../../settings/organisms/SettingsCompanyBranchPicker'\nimport { StockDepositControl } from '../organisms/StockDepositControl'\nimport { StockDepositLoader } from '../organisms/StockDepositLoader'\n\ninterface IProps {}\n\nexport const MenuStockDepositPage: React.SFC<IProps> = props => (\n  <FullPageLayout\n    width={16}\n    pageTitle={i18n.t`Stock deposit`}\n    useBackButton={true}\n  >\n    <Card>\n      <SettingsCompanyBranchPicker />\n      <StockDepositLoader>\n        {(stockItems, onDeposit) => (\n          <StockDepositControl stockItems={stockItems} onDeposit={onDeposit} />\n        )}\n      </StockDepositLoader>\n    </Card>\n  </FullPageLayout>\n)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport { TableCellProps } from 'react-virtualized'\n\nimport {\n  checkColumnAccess,\n  Column,\n  ColumnRendererEdit,\n  DataTable,\n} from '../../../atoms/DataTable'\nimport { Loading } from '../../../atoms/Loading'\nimport { GMenuStockList } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\n\ntype TStockItem = GMenuStockList.StockItems\n\ninterface IProps {\n  stockItems: TStockItem[]\n  isLoading: boolean\n}\n\nexport const StockListTable: React.SFC<IProps> = ({\n  stockItems,\n  isLoading,\n}) => (\n  <DataTable\n    items={stockItems}\n    heightStretch={true}\n    noRowsRenderer={() =>\n      isLoading ? (\n        <Loading />\n      ) : (\n        <h3>\n          <Trans>Selected branch has no stock cards</Trans>\n        </h3>\n      )\n    }\n  >\n    <Column\n      dataKey=\"id\"\n      width={60}\n      cellRenderer={checkColumnAccess(\n        { canQuery: 'stockItem' },\n        ColumnRendererEdit,\n      )}\n    />\n    <Column dataKey=\"code\" width={100} label={i18n.t`Card code`} />\n    <Column dataKey=\"nameLabel\" width={300} label={i18n.t`Card name`} />\n    <Column\n      dataKey=\"quantity\"\n      width={100}\n      label={i18n.t`Card stock`}\n      cellRenderer={stockWithUnit}\n    />\n    <Column dataKey=\"note\" width={300} label={i18n.t`Card note`} />\n  </DataTable>\n)\n\nfunction stockWithUnit({ cellData, rowData }: TableCellProps) {\n  return `${cellData} ${rowData.wareUnit.code}`\n}\n","import React from 'react'\n\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { QueryMenuStockList } from './StockList.graphql'\nimport { StockListTable } from './StockListTable'\n\nexport const StockListLoader: React.SFC = () => (\n  <WithRoot\n    observe={true}\n    render={({ settings }) => (\n      <QueryMenuStockList\n        {...settings.queryProps}\n        fetchPolicy=\"cache-and-network\"\n        renderLoading={false}\n        render={({ stockItems }, { loading }) => (\n          <StockListTable stockItems={stockItems} isLoading={loading} />\n        )}\n      />\n    )}\n  />\n)\n","import React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { DataTableContainer } from '../../../atoms/DataTableContainer'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { SettingsCompanyBranchPicker } from '../../settings/organisms/SettingsCompanyBranchPicker'\nimport { CreateButton } from '../molecules/CreateButton'\nimport { StockListLoader } from '../organisms/StockListLoader'\n\nexport const MenuStockListPage: React.SFC = props => (\n  <>\n    <FullPageLayout pageTitle={i18n.t`Stock overview`} useBackButton={true} />\n\n    <PageLayoutFullHeightItem>\n      <Card stretchToParent={true}>\n        <SettingsCompanyBranchPicker />\n        <CanMutate mutationName=\"createStockItem\">\n          <CreateButton routeTo=\"create\" />\n        </CanMutate>\n        <DataTableContainer>\n          <StockListLoader />\n        </DataTableContainer>\n      </Card>\n    </PageLayoutFullHeightItem>\n  </>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GMenuStockForm } from '../../../graph/types'\nimport { AllergenFragment } from '../graph/AllergenFragment.graphql'\nimport { WareUnitFragment } from '../graph/WareUnitFragment.graphql'\n\nexport const MenuStockFormQuery = gql`\n  query GMenuStockForm($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      code\n      plu\n      note\n      nameLabel: label\n      allowNegative\n      wareUnit {\n        ...GWareUnit\n      }\n      allergens {\n        ...GAllergen\n      }\n      companyBranch {\n        id\n        stockItemsCanBeNegative\n      }\n    }\n  }\n  ${AllergenFragment}\n  ${WareUnitFragment}\n`\n\nexport const QueryMenuStock = buildQuery<\n  GMenuStockForm.Query,\n  GMenuStockForm.Variables\n>(MenuStockFormQuery)\n","import React from 'react'\n\nimport {\n  AllergenEnum,\n  FieldStateEnum,\n  GMenuStockForm,\n  WareUnitEnum,\n} from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { MenuBaseFormLoader } from '../atoms/MenuBaseFormLoader'\nimport { useMenu } from '../hooks/useMenu'\nimport { MenuStockFormQuery } from './StockForm.graphql'\n\ninterface IProps {\n  stockId: Maybe<ID>\n  children: ReactNode\n}\n\nexport type TStockFormValues = {\n  id: ID\n  code: string\n  plu: Maybe<string>\n  note: string\n  nameLabel: string\n  internalNote: string\n  wareUnit: Maybe<WareUnitEnum>\n  allergens: AllergenEnum[]\n  allowNegative: FieldStateEnum\n}\n\nexport const StockFormLoader: React.SFC<IProps> = ({ stockId, children }) => {\n  const menu = useMenu()\n  return (\n    <MenuBaseFormLoader<TStockFormValues>\n      isCreate={stockId === null}\n      onCreate={values => menu.stock.createItem(values)}\n      onUpdate={values => menu.stock.updateItem(values)}\n      getDefaultValues={getDefaults}\n      loadValues={async () => {\n        const { data } = await menu.client.query<GMenuStockForm.Query>({\n          query: MenuStockFormQuery,\n          variables: { stockId },\n          fetchPolicy: 'no-cache',\n        })\n        return getFormValues(data.stockItem)\n      }}\n    >\n      {children}\n    </MenuBaseFormLoader>\n  )\n}\n\nfunction getDefaults(): TStockFormValues {\n  return {\n    id: 'NEW',\n    internalNote: '',\n    nameLabel: '',\n    code: '',\n    plu: '',\n    note: '',\n    wareUnit: null,\n    allergens: [],\n    allowNegative: FieldStateEnum.DEFAULT,\n  }\n}\n\nfunction getFormValues(stockItem: GMenuStockForm.StockItem): TStockFormValues {\n  return {\n    id: stockItem.id,\n    internalNote: 'TBD',\n    nameLabel: stockItem.nameLabel,\n    code: stockItem.code,\n    note: stockItem.note,\n    plu: stockItem.plu || '',\n    wareUnit: stockItem.wareUnit.enum,\n    allergens: stockItem.allergens.map(RM.prop('enum')),\n    allowNegative: stockItem.allowNegative,\n  }\n}\n","import React from 'react'\nimport { Field, FieldType } from 'react-form'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { AllergenEnum } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { MenuAllergenIndicator } from '../atoms/AllergenIndicator'\n\ninterface IProps {\n  field?: FieldType\n  icon?: string\n}\n\nexport const FormInputAllergens: React.SFC<IProps> = ({\n  field = 'allergens',\n  icon = 'error_outline',\n}) => (\n  <Field field={field}>\n    {fieldApi => {\n      const onToggle = (allergen: AllergenEnum) => {\n        const current: AllergenEnum[] = fieldApi.value\n        if (current.includes(allergen)) {\n          fieldApi.setValue(RM.without([allergen], current))\n        } else {\n          fieldApi.setValue([...current, allergen])\n        }\n      }\n      return (\n        <IconLine icon={icon} labelWidth={7}>\n          <MenuAllergenIndicator\n            selected={fieldApi.value}\n            onToggle={onToggle}\n          />\n        </IconLine>\n      )\n    }}\n  </Field>\n)\n","import { i18nMark } from '@lingui/react'\nimport React from 'react'\n\nimport { FormInputFlatSelect } from '../../../atoms/FormInputFlatSelect'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { FieldStateEnum } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\n\ninterface IProps {}\n\nconst items = [\n  {\n    type: FieldStateEnum.DEFAULT,\n    label: i18nMark('Not set'),\n  },\n  {\n    type: FieldStateEnum.ENABLED,\n    label: i18nMark('Permit'),\n  },\n  {\n    type: FieldStateEnum.DISABLED,\n    label: i18nMark('Forbid'),\n  },\n]\n\nexport const FormInputAllowNegative: React.SFC<IProps> = props => (\n  <IconLine label={i18n.t`Negative stock`} labelWidth={7}>\n    <FormInputFlatSelect\n      field=\"allowNegative\"\n      items={items}\n      formatItem={item => i18n._(item.label)}\n      getItemId={item => item.type}\n    />\n  </IconLine>\n)\n","import React from 'react'\n\nimport {\n  FormInputTextBox,\n  TFormInputTextBoxProps,\n} from '../../../atoms/FormInputTextBox'\nimport { IconLine } from '../../../atoms/IconLine'\n\ninterface IProps extends Partial<TFormInputTextBoxProps> {\n  icon?: string\n}\n\nexport const FormInputPlu: React.SFC<IProps> = ({\n  field = 'plu',\n  icon = 'fingerprint',\n  ...props\n}) => (\n  <IconLine icon={icon} labelWidth={7}>\n    <FormInputTextBox field={field} width={9} {...props} />\n  </IconLine>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GWareUnits } from '../../../graph/types'\n\nexport const WareUnitsQuery = gql`\n  query GWareUnits {\n    wareUnits {\n      id\n      code\n      enum\n    }\n  }\n`\n\nexport const QueryWareUnits = buildQuery<\n  GWareUnits.Query,\n  GWareUnits.Variables\n>(WareUnitsQuery)\n","import React from 'react'\n\nimport {\n  FormInputSelect,\n  IFormInputSelectProps,\n} from '../../../atoms/FormInputSelect'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { GWareUnits } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport { QueryWareUnits } from './FormInputWareUnit.graphql'\n\ninterface IProps extends Partial<IFormInputSelectProps<GWareUnits.WareUnits>> {\n  icon?: string\n}\n\nexport const FormInputWareUnit: React.SFC<IProps> = ({\n  field = 'wareUnit',\n  icon = 'select_all',\n  ...selectProps\n}) => (\n  <QueryWareUnits\n    renderLoading={false}\n    render={({ wareUnits }, { loading }) => (\n      <IconLine icon={icon} labelWidth={7}>\n        <FormInputSelect<GWareUnits.WareUnits>\n          field={field}\n          options={wareUnits || []}\n          isLoading={loading}\n          isRequired={true}\n          validatioName={i18n.t`Ware unit`}\n          getOptionLabel={RM.prop('code')}\n          getOptionValue={RM.prop('enum')}\n          width={12}\n          {...selectProps}\n        />\n      </IconLine>\n    )}\n  />\n)\n","import React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { FormColumn, FormContainer } from '../../../atoms/FormContainer'\nimport { i18n } from '../../../i18n'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport { FormDeleteButton } from '../molecules/FormDeleteButton'\nimport { FormInputAllergens } from '../molecules/FormInputAllergens'\nimport { FormInputAllowNegative } from '../molecules/FormInputAllowNegative'\nimport { FormInputCode } from '../molecules/FormInputCode'\nimport { FormInputInternalNote } from '../molecules/FormInputInternalNote'\nimport { FormInputName } from '../molecules/FormInputName'\nimport { FormInputPlu } from '../molecules/FormInputPlu'\nimport { FormInputWareUnit } from '../molecules/FormInputWareUnit'\n\nexport const StockFormMain: React.SFC = props => (\n  <FormContainer>\n    <FormColumn>\n      <FormInputName placeholder={i18n.t`Card name`} />\n      <FormInputCode placeholder={i18n.t`Card code`} />\n      <FormInputWareUnit placeholder={i18n.t`Choose unit`} />\n      <FormInputPlu placeholder={i18n.t`PLU`} />\n      <FormInputInternalNote\n        placeholder={i18n.t`Card note`}\n        field=\"note\"\n        label={i18n.t`Card note`}\n      />\n      <FormInputAllergens />\n      <FormInputAllowNegative />\n    </FormColumn>\n    <FormColumn>\n      <CanMutate mutationName=\"destroyStockItem\">\n        <WithSettings\n          render={({ menu }) => (\n            <FormDeleteButton\n              confirmText={i18n.t`Remove this card?`}\n              onDelete={id => menu.stock.deleteItem(id)}\n            />\n          )}\n        />\n      </CanMutate>\n    </FormColumn>\n  </FormContainer>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GStockRecipes } from '../../../graph/types'\n\nexport const StockRecipesQuery = gql`\n  query GStockRecipes($stockId: ID!) {\n    stockItem(id: $stockId) {\n      id\n      ingredients {\n        id\n        recipe {\n          id\n          nameLabel\n          descriptionLabel\n        }\n      }\n    }\n  }\n`\n\nexport const QueryStockRecipes = buildQuery<\n  GStockRecipes.Query,\n  GStockRecipes.Variables\n>(StockRecipesQuery)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\n\nimport {\n  Column,\n  ColumnRendererEdit,\n  DataTable,\n  NoteText,\n} from '../../../atoms/DataTable'\nimport { Headline } from '../../../atoms/Headline'\nimport { i18n } from '../../../i18n'\nimport { QueryStockRecipes } from './StockRecipesView.graphql'\n\ninterface IProps {\n  stockId: Maybe<ID>\n}\n\nexport const StockRecipesView: React.SFC<IProps> = ({ stockId }) =>\n  stockId === null ? null : (\n    <QueryStockRecipes\n      variables={{ stockId }}\n      render={({ stockItem: { ingredients } }) =>\n        ingredients.length > 0 ? (\n          <>\n            <Headline>\n              <Trans>Recipes using this card</Trans>\n            </Headline>\n\n            <DataTable items={ingredients}>\n              <Column\n                dataKey=\"\"\n                cellDataGetter={({ rowData }) =>\n                  `../../recipe/${rowData.recipe.id}`\n                }\n                cellRenderer={ColumnRendererEdit}\n                width={100}\n              />\n              <Column\n                dataKey=\"recipe\"\n                width={300}\n                label={i18n.t`Name`}\n                cellRenderer={({ rowData }) => (\n                  <>\n                    {rowData.recipe.nameLabel}\n                    <NoteText>{rowData.recipe.descriptionLabel}</NoteText>\n                  </>\n                )}\n              />\n            </DataTable>\n          </>\n        ) : null\n      }\n    />\n  )\n","import React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { CanQuery } from '../../../atoms/CanQuery'\nimport { Card } from '../../../atoms/Card'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { TopRightButtonContainer } from '../../../molecules/TopRightButtonContainer'\nimport { SubmitButton } from '../molecules/SubmitButton'\nimport { StockFormLoader } from '../organisms/StockFormLoader'\nimport { StockFormMain } from '../organisms/StockFormMain'\nimport { StockRecipesView } from '../organisms/StockRecipesVIew'\n\ninterface IProps {\n  stockId: Maybe<ID>\n}\n\nexport const MenuStockPage: React.SFC<IProps> = ({ stockId }) => (\n  <FullPageLayout\n    width={16}\n    pageTitle={i18n.t`Stock card`}\n    hideLogoutWidget={true}\n    useBackButton={true}\n  >\n    <StockFormLoader stockId={stockId}>\n      <>\n        <TopRightButtonContainer>\n          <CanMutate\n            mutationName={\n              stockId === null ? 'createStockItem' : 'updateStockItem'\n            }\n          >\n            <SubmitButton isCreate={stockId === null} />\n          </CanMutate>\n        </TopRightButtonContainer>\n        <Card>\n          <StockFormMain />\n          <CanQuery queryName=\"recipes\">\n            <StockRecipesView stockId={stockId} />\n          </CanQuery>\n        </Card>\n      </>\n    </StockFormLoader>\n  </FullPageLayout>\n)\n","import React from 'react'\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { SecureRoute } from '../../../routes/SecureRoute'\nimport { MenuCategoryListPage } from '../pages/MenuCategoryListPage'\nimport { MenuCategoryPage } from '../pages/MenuCategoryPage'\nimport { MenuRecipeListPage } from '../pages/MenuRecipeListPage'\nimport { MenuRecipePage } from '../pages/MenuRecipePage'\nimport { MenuStockDepositPage } from '../pages/MenuStockDepositPage'\nimport { MenuStockListPage } from '../pages/MenuStockListPage'\nimport { MenuStockPage } from '../pages/MenuStockPage'\n\ninterface IProps extends RouteComponentProps<{}> {}\n\nexport const MenuRoutes: React.SFC<IProps> = ({ match }) => (\n  <Switch>\n    <SecureRoute\n      exact={true}\n      path={match.path}\n      render={() => <Redirect to={`${match.path}/category`} />}\n    />\n    <SecureRoute\n      exact={true}\n      path={`${match.path}/category`}\n      component={MenuCategoryListPage}\n    />\n    <SecureRoute\n      path={`${match.path}/category/:categoryId`}\n      render={({ match: { params }, location: { state } }) => (\n        <MenuCategoryPage\n          categoryId={params.categoryId === 'create' ? null : params.categoryId}\n          categoryType={state.categoryType}\n        />\n      )}\n    />\n    <SecureRoute\n      exact={true}\n      path={`${match.path}/recipe`}\n      component={MenuRecipeListPage}\n    />\n    <SecureRoute\n      path={`${match.path}/recipe/:recipeId`}\n      render={({ match: { params }, location: { state } }) => (\n        <MenuRecipePage\n          recipeId={params.recipeId === 'create' ? null : params.recipeId}\n          recipeType={state.recipeType}\n        />\n      )}\n    />\n    <SecureRoute\n      exact={true}\n      path={`${match.path}/stock`}\n      component={MenuStockListPage}\n    />\n    <SecureRoute\n      path={`${match.path}/stock/deposit`}\n      component={MenuStockDepositPage}\n    />\n    <SecureRoute\n      path={`${match.path}/stock/:stockId`}\n      render={({ match: { params } }) => (\n        <MenuStockPage\n          stockId={params.stockId === 'create' ? null : params.stockId}\n        />\n      )}\n    />\n    <Route component={NotFoundPage} />\n  </Switch>\n)\n\nexport default MenuRoutes\n"],"sourceRoot":""}