{"version":3,"sources":["atoms/CanMutate.tsx","atoms/FlexColumn.tsx","components/forms/FormInput.tsx","atoms/Loading.tsx","atoms/CanQuery.tsx","molecules/TouchButtonDelete.tsx","atoms/DateTimeFormatProvider.tsx","components/forms/FormSubmitButton.tsx","atoms/FlexDiv.tsx","atoms/FlexRow.tsx","hooks/useSettings.ts","atoms/InputDate.tsx","components/forms/FormInputDate.tsx","atoms/InputTime.tsx","segments/businesshours/atoms/BusinessHoursTimeRange.tsx","segments/businesshours/molecules/BusinessHoursWeekday.tsx","segments/businesshours/organisms/BusinessHoursForm.tsx","components/forms/FormInputTime.tsx","components/forms/FormInputTimeSpan.tsx","segments/businesshours/molecules/SpecificModeSelector.tsx","segments/businesshours/organisms/SpecificBusinessHourForm.tsx","segments/businesshours/molecules/SpecificBusinessHourLine.tsx","segments/businesshours/organisms/SpecificBusinessHours.tsx","segments/businesshours/pages/BusinessHoursPage.tsx","segments/businesshours/routes/BusinessHoursRouting.tsx"],"names":["CanMutate","observer","mutationName","children","useCanMutate","FlexColumn","styled","div","fixedWidth","width","widthGrowIndex","padding","margin","FormInput","React","forwardRef","inputRef","fieldName","fullWidth","validate","addHiddenLabelWithPlaceholderText","withLabel","props","getInputProps","useFormInputProps","useObserver","inputFullWidth","ref","placeholder","hidden","htmlFor","id","useXFieldForInput","field","invalid","touched","Boolean","error","Loading","text","CanQuery","queryName","useCanQuery","TouchButtonDelete","onDelete","confirmText","icon","Delete","color","Colors","greyMiddle","onClick","ev","preventDefault","window","confirm","DateTimeFormatProvider","utils","MomentUtils","FormSubmitButton","state","useXFormState","type","green","disabled","isSubmitting","isDirty","isValid","undefined","ErrorOutline","iconSize","iconColor","red","FlexDiv","FlexRow","useSettings","useRoot","settings","InputDate","DatePicker","variant","format","maxDateMessage","minDateMessage","FormInputDate","pickerProps","getProps","onChange","setValue","onOpen","setTouched","InputTime","TimePicker","StyledBussinessHoursTimeRange","BusinessHoursTimeRange","memo","hour","value","openAt","label","closeAt","StyledBusinessHoursWeekday","article","white","Radiuses","Button","BusinessHoursWeekday","weekday","hours","onAdd","onRemove","renderHour","key","data-testid","className","SizerButton","TouchButton","title","i18n","role","code","length","map","AddCircle","getTodayTime","DFP","parse","Date","BusinessHoursForm","useQRegularBusinessHours","branchId","data","loading","useState","observable","Map","businessHours","useMBusinessHoursSubmit","submitBusinessHours","useEffect","size","weekDays","forEach","set","enum","array","weekDay","get","push","weekDayHours","clear","hourIdCounter","useRef","hourId","idx","findIndex","RM","propEq","splice","enqueueSuccess","useSnackBar","onSubmit","useCallback","a","formatTime","current","startOfDay","endOfDay","Sizer","MarginBox","FormInputTime","InlineWrap","FormInputTimeSpan","fieldFrom","fieldTo","labels","ESpecificHourMode","TIMESPAN","i18nMark","FULLDAY","SpecificModeSelector","SelectControlFlat","items","selectedItem","specificMode","formatItem","mode","_","onSingleSelection","changeSpecificMode","DateContainer","FormContainer","SpecificBusinessHourForm","now","getNow","useNow","useMSpecificBusinessHourCreate","createBsHour","values","isTimespanMode","date","input","companyBranch","specificDate","isoDate","closed","closedNote","note","refetchQueries","query","QSpecificBusinessHoursDocument","variables","initialValues","setHours","setMinutes","fullDateFormat","minDate","SpecificBusinessHourLine","bsHour","canDelete","specificDateLocalized","sortByDate","sort","ascend","or","prop","not","rejectOld","reject","isBefore","SpecificBusinessHours","getBsHours","useLoadingCache","useQSpecificBusinessHours","updateQuery","bsHours","useMSpecificBusinessHourDelete","deleteBsHour","updateOnDelete","produce","draft","idPropEq","BusinessHoursPage","FullPageLayout","pageTitle","useBackButton","Card","SettingsCompanyBranchPicker","Headline","BusinessHoursRouting","SecureRoute","exact","path","ROUTE_SETTINGS_HOURS","component","NotFoundPage"],"mappings":"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","file":"static/js/186.c551a60c.chunk.js","sourcesContent":["import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useCanMutate } from '../hooks/useAccessGuard'\nimport { NoAccess } from './NoAccess'\n\ninterface IProps {\n  mutationName: string\n}\n\nexport const CanMutate = observer<IProps>(({ mutationName, children }) => {\n  const canMutate = useCanMutate(mutationName)\n  return canMutate ? (\n    <>{children}</>\n  ) : (\n    <NoAccess>{`No access to mutation ${mutationName}`}</NoAccess>\n  )\n})\n","import styled from 'styled-components'\n\ninterface IFlexColumnProps {\n  fixedWidth?: boolean\n  width?: string\n  widthGrowIndex?: number\n  padding?: string\n  margin?: string\n}\n\nexport const FlexColumn = styled.div`\n  flex: ${getFlexValue};\n  padding: ${getPadding};\n  margin: ${getMargin};\n`\n\nfunction getFlexValue({\n  fixedWidth = false,\n  width,\n  widthGrowIndex = 0,\n}: IFlexColumnProps) {\n  return fixedWidth ? (width ? `0 0 ${width}` : '0 0') : `${widthGrowIndex} 0`\n}\n\nfunction getPadding({ padding = '0.25rem' }: IFlexColumnProps) {\n  return padding\n}\n\nfunction getMargin({ margin = '' }: IFlexColumnProps) {\n  return margin\n}\n","import { useXFieldForInput, XFieldName, XFieldValidator } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { StyledFormInput } from '../../atoms/FormInputStyled'\n\ninterface IProps extends LegacyOmit<React.InputHTMLAttributes<never>, 'name'> {\n  fieldName: XFieldName\n  validate?: XFieldValidator<string>\n  fullWidth?: boolean\n  children?: never\n  addHiddenLabelWithPlaceholderText?: boolean\n}\n\nexport type FormInputProps = IProps\n\nexport const FormInput = React.forwardRef<HTMLInputElement, IProps>(\n  (\n    {\n      fieldName,\n      fullWidth,\n      validate,\n      addHiddenLabelWithPlaceholderText: withLabel = true,\n      ...props\n    },\n    inputRef,\n  ) => {\n    const getInputProps = useFormInputProps({ fieldName, validate })\n    return useObserver(() => (\n      <>\n        <StyledFormInput\n          {...getInputProps()}\n          inputFullWidth={fullWidth}\n          ref={inputRef}\n          {...props}\n        />\n        {withLabel && props.placeholder && (\n          <label hidden={true} htmlFor={getInputProps().id}>\n            {props.placeholder}\n          </label>\n        )}\n      </>\n    ))\n  },\n)\n\ninterface IHookOptions {\n  fieldName: XFieldName\n  validate?: XFieldValidator<string>\n}\n\nexport function useFormInputProps({ fieldName, validate }: IHookOptions) {\n  const [field, getInputProps] = useXFieldForInput<string>(fieldName, {\n    validate,\n  })\n  return () => ({\n    ...getInputProps(),\n    invalid: field.touched && Boolean(field.error),\n  })\n}\n","import React from 'react'\n\ninterface ILoadingProps {\n  text?: string\n}\n\nexport const Loading: React.FC<ILoadingProps> = ({ text = '...' }) => (\n  <h1>{text}</h1>\n)\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useCanQuery } from '../hooks/useAccessGuard'\nimport { NoAccess } from './NoAccess'\n\ninterface IProps {\n  queryName: string\n}\n\nexport const CanQuery = observer<IProps>(({ queryName, children }) => {\n  const canQuery = useCanQuery(queryName)\n  return canQuery ? (\n    <>{children}</>\n  ) : (\n    <NoAccess>{`No access to query ${queryName}`}</NoAccess>\n  )\n})\n","import { Delete } from '@material-ui/icons'\nimport React from 'react'\n\nimport { SizerButton } from '../atoms/SizerButton'\nimport { Colors } from '../styling'\nimport { ITouchButtonProps, TouchButton } from './TouchButton'\n\ninterface ITouchButtonDeleteProps\n  extends LegacyOmit<ITouchButtonProps, 'onClick'> {\n  confirmText?: string\n  onDelete(): void\n}\n\nexport const TouchButtonDelete: React.FC<ITouchButtonDeleteProps> = ({\n  onDelete,\n  confirmText,\n  ...props\n}) => {\n  return (\n    <SizerButton>\n      <TouchButton\n        icon={Delete}\n        color={Colors.greyMiddle}\n        onClick={ev => {\n          ev.preventDefault()\n          if (!confirmText || window.confirm(confirmText)) {\n            onDelete()\n          }\n        }}\n        {...props}\n      />\n    </SizerButton>\n  )\n}\n","import MomentUtils from '@date-io/moment'\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers'\nimport React from 'react'\n\nexport const DateTimeFormatProvider: React.FC = ({ children }) => {\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      {children}\n    </MuiPickersUtilsProvider>\n  )\n}\n","import { ErrorOutline } from '@material-ui/icons'\nimport { useXFormState } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ITouchButtonProps, TouchButton } from '../../molecules/TouchButton'\nimport { Colors } from '../../styling'\n\ninterface IProps extends ITouchButtonProps {\n  children: ReactNode | ReactNode[] | string\n}\n\nexport const FormSubmitButton: React.FC<IProps> = ({\n  children,\n  id = 'form-submit',\n  ...props\n}) => {\n  const state = useXFormState()\n  return useObserver(() => (\n    <TouchButton\n      type=\"submit\"\n      color={Colors.green}\n      disabled={state.isSubmitting && state.isDirty}\n      id={id}\n      icon={!state.isValid ? ErrorOutline : undefined}\n      iconSize={1.1}\n      iconColor={Colors.red}\n      {...props}\n    >\n      <>{children}</>\n    </TouchButton>\n  ))\n}\n","import styled from 'styled-components/macro'\n\nexport const FlexDiv = styled.div`\n  display: flex;\n`\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\nimport { FlexDiv } from './FlexDiv'\n\nexport const FlexRow = styled(FlexDiv)`\n  flex-direction: row;\n  justify-content: space-between;\n  border-bottom: 1px solid ${Colors.greyMiddle};\n  padding: 0.1rem 0 0.1rem 0;\n`\n","import { useRoot } from '../atoms/RootProvider'\n\nexport function useSettings() {\n  const { settings } = useRoot()\n  return settings\n}\n","import { i18n } from '@lingui/core'\nimport { DatePicker, DatePickerProps } from '@material-ui/pickers'\nimport React from 'react'\n\nimport { DateTimeFormatProvider } from './DateTimeFormatProvider'\n\ninterface IProps extends DatePickerProps {}\n\nexport const InputDate: React.FC<IProps> = props => {\n  return (\n    <DateTimeFormatProvider>\n      <DatePicker\n        variant=\"inline\"\n        format=\"ll\"\n        maxDateMessage={i18n.t`Date is too much in the future`}\n        minDateMessage={i18n.t`Date is too much in the past`}\n        {...props}\n      />\n    </DateTimeFormatProvider>\n  )\n}\n","import { DatePickerProps } from '@material-ui/pickers'\nimport { useXFieldForInput, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { InputDate } from '../../atoms/InputDate'\n\ninterface IProps extends LegacyOmit<DatePickerProps, 'value' | 'onChange'> {\n  fieldName: XFieldName\n}\n\nexport const FormInputDate: React.FC<IProps> = ({\n  fieldName,\n  ...pickerProps\n}) => {\n  const [field, getProps] = useXFieldForInput(fieldName)\n  return useObserver(() => (\n    <InputDate\n      {...getProps()}\n      onChange={field.setValue}\n      onOpen={field.setTouched}\n      {...pickerProps}\n    />\n  ))\n}\n","import { TimePicker, TimePickerProps } from '@material-ui/pickers'\nimport React from 'react'\n\nimport { DateTimeFormatProvider } from './DateTimeFormatProvider'\n\ninterface IProps extends TimePickerProps {}\n\nexport const InputTime: React.FC<IProps> = props => {\n  return (\n    <DateTimeFormatProvider>\n      <TimePicker format=\"LT\" variant=\"inline\" {...props} />\n    </DateTimeFormatProvider>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { InputTime } from '../../../atoms/InputTime'\nimport { TBusinessHour } from '../businesshours.types'\n\ninterface IProps {\n  hour: TBusinessHour\n}\n\nconst StyledBussinessHoursTimeRange = styled.div`\n  & input {\n    width: 5rem;\n  }\n`\n\nexport const BusinessHoursTimeRange = React.memo<IProps>(({ hour }) => {\n  return useObserver(() => (\n    <StyledBussinessHoursTimeRange>\n      <InputTime\n        value={hour.openAt}\n        onChange={value => (hour.openAt = value)}\n        label={<Trans id=\"input.timespan.from\">from</Trans>}\n        fullWidth={false}\n      />\n      <InputTime\n        value={hour.closeAt}\n        onChange={value => (hour.closeAt = value)}\n        label={<Trans id=\"input.timespan.to\">to</Trans>}\n        fullWidth={false}\n      />\n    </StyledBussinessHoursTimeRange>\n  ))\n})\n","import { Trans } from '@lingui/macro'\nimport { AddCircle, Delete } from '@material-ui/icons'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { SizerButton } from '../../../atoms/SizerButton'\nimport { FWeekdayFragment } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Radiuses } from '../../../styling'\nimport { BusinessHoursTimeRange } from '../atoms/BusinessHoursTimeRange'\nimport { TBusinessHour } from '../businesshours.types'\n\ninterface IProps {\n  weekday: FWeekdayFragment\n  hours: RoA<TBusinessHour>\n  onAdd(): void\n  onRemove(hourId: ID): void\n}\n\nconst StyledBusinessHoursWeekday = styled.article`\n  display: flex;\n  align-items: baseline;\n  margin: 0 0 0.3rem 0;\n  h5 {\n    width: 5rem;\n  }\n  & .range {\n    display: flex;\n    margin: 0 2rem 0 0;\n    padding-right: 1rem;\n    background: ${Colors.white};\n    border-radius: ${Radiuses.Button};\n  }\n  .remove-btn {\n    margin-right: 1rem;\n  }\n`\n\nexport const BusinessHoursWeekday = React.memo<IProps>(\n  ({ weekday, hours, onAdd, onRemove }) => {\n    const renderHour = (hour: TBusinessHour) => {\n      return (\n        <div key={hour.id} data-testid=\"bh-range\" className=\"range\">\n          <SizerButton className=\"remove-btn\">\n            <TouchButton\n              title={i18n.t`Remove business hour`}\n              role=\"button\"\n              onClick={() => onRemove(hour.id)}\n            >\n              <Delete />\n            </TouchButton>\n          </SizerButton>\n          <BusinessHoursTimeRange hour={hour} />\n        </div>\n      )\n    }\n\n    const renderHours = () => {\n      if (hours.length === 0) {\n        return (\n          <em>\n            <Trans>Closed</Trans>\n          </em>\n        )\n      }\n      return hours.map(renderHour)\n    }\n\n    return useObserver(() => (\n      <StyledBusinessHoursWeekday>\n        <h5>{weekday.code}</h5>\n        {renderHours()}\n        <SizerButton>\n          <TouchButton\n            title={i18n.t`Add business hour`}\n            role=\"button\"\n            onClick={onAdd}\n          >\n            <AddCircle />\n          </TouchButton>\n        </SizerButton>\n      </StyledBusinessHoursWeekday>\n    ))\n  },\n)\n","import { DFP, RM } from '@speedlo/tools'\nimport { IObservableArray, observable } from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { Loading } from '../../../atoms/Loading'\nimport { MarginBox } from '../../../atoms/MarginBox'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { Sizer } from '../../../atoms/Sizer'\nimport {\n  InputBusinessHourCreate,\n  useMBusinessHoursSubmit,\n  useQRegularBusinessHours,\n  WeekDayEnum,\n} from '../../../graph/generated'\nimport { formatTime } from '../../../helpers/formats'\nimport { useSnackBar } from '../../../hooks/useSnackBar'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\nimport { TBusinessHour } from '../businesshours.types'\nimport { BusinessHoursWeekday } from '../molecules/BusinessHoursWeekday'\n\nconst getTodayTime = DFP.parse(new Date(), 'H:mm')\n\nexport const BusinessHoursForm = observer(() => {\n  const { settings } = useRoot()\n  const { data, loading } = useQRegularBusinessHours({\n    branchId: settings.branchId,\n  })\n\n  const [businessHours] = React.useState(() =>\n    observable(new Map<WeekDayEnum, IObservableArray<TBusinessHour>>()),\n  )\n\n  const [submitBusinessHours] = useMBusinessHoursSubmit()\n\n  React.useEffect(() => {\n    if (loading) {\n      return\n    }\n    if (businessHours.size === 0) {\n      data.weekDays.forEach(weekday => {\n        businessHours.set(weekday.enum, observable.array([]))\n      })\n    }\n    data.businessHours.forEach(({ id, openAt, closeAt, weekDay }) => {\n      if (weekDay) {\n        businessHours.get(weekDay.enum)!.push({\n          id,\n          openAt: getTodayTime(openAt),\n          closeAt: getTodayTime(closeAt),\n          weekDay: weekDay.enum,\n        })\n      }\n    })\n    return () => {\n      businessHours.forEach(weekDayHours => {\n        weekDayHours.clear()\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data.businessHours, data.weekDays, loading, settings.branchId])\n\n  const hourIdCounter = React.useRef(0)\n\n  const onAdd = (weekDay: WeekDayEnum) => () => {\n    businessHours.get(weekDay)!.push({\n      weekDay,\n      id: `L${hourIdCounter.current++}`,\n      openAt: DFP.startOfDay(new Date()),\n      closeAt: DFP.endOfDay(new Date()),\n    })\n  }\n\n  const onRemove = (weekDay: WeekDayEnum) => (hourId: ID) => {\n    const hours = businessHours.get(weekDay)!\n    const idx = hours.findIndex(RM.propEq('id', hourId))\n    if (idx >= 0) {\n      hours.splice(idx, 1)\n    }\n  }\n\n  const { enqueueSuccess } = useSnackBar()\n\n  const onSubmit = React.useCallback(async () => {\n    const hours: InputBusinessHourCreate[] = []\n    businessHours.forEach((weekDayHours, weekDay) => {\n      hours.push(\n        ...weekDayHours.map(hour => ({\n          openAt: formatTime(hour.openAt),\n          closeAt: formatTime(hour.closeAt),\n          weekDay,\n        })),\n      )\n    })\n    const result = await submitBusinessHours({\n      branchId: settings.branchId,\n      hours,\n    })\n    if (result) {\n      enqueueSuccess(i18n.t`Regular business hours has been updated`)\n    }\n  }, [businessHours, enqueueSuccess, settings.branchId, submitBusinessHours])\n\n  if (loading || businessHours.size === 0) {\n    return <Loading />\n  }\n\n  return (\n    <div>\n      {data.weekDays.map(weekday => (\n        <BusinessHoursWeekday\n          key={weekday.enum}\n          weekday={weekday}\n          hours={businessHours.get(weekday.enum)!}\n          onAdd={onAdd(weekday.enum)}\n          onRemove={onRemove(weekday.enum)}\n        />\n      ))}\n      <Sizer width={20}>\n        <MarginBox margin=\"1rem\">\n          <TouchButton\n            text={i18n.t`Save regular hours`}\n            color={Colors.green}\n            onClick={onSubmit}\n          />\n        </MarginBox>\n      </Sizer>\n    </div>\n  )\n})\n","import { TimePickerProps } from '@material-ui/pickers'\nimport { useXFieldForInput, XFieldName } from '@speedlo/xform'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { InputTime } from '../../atoms/InputTime'\n\ninterface IProps extends LegacyOmit<TimePickerProps, 'value' | 'onChange'> {\n  fieldName: XFieldName\n}\n\nexport const FormInputTime = React.memo<IProps>(\n  ({ fieldName, ...pickerProps }) => {\n    const [field, getProps] = useXFieldForInput(fieldName)\n    return useObserver(() => (\n      <InputTime\n        {...getProps()}\n        onChange={field.setValue}\n        onOpen={field.setTouched}\n        {...pickerProps}\n      />\n    ))\n  },\n)\n","import { Trans } from '@lingui/macro'\nimport { XFieldName } from '@speedlo/xform'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { FormInputTime } from './FormInputTime'\n\ninterface IFormInputTimeSpanProps {\n  fieldFrom: XFieldName\n  fieldTo: XFieldName\n}\n\nconst InlineWrap = styled.div`\n  width: 5rem;\n  display: inline-block;\n`\n\nexport const FormInputTimeSpan: React.FC<IFormInputTimeSpanProps> = ({\n  fieldFrom,\n  fieldTo,\n}) => (\n  <>\n    <InlineWrap>\n      <FormInputTime\n        fieldName={fieldFrom}\n        label={<Trans id=\"input.timespan.from\">from</Trans>}\n        fullWidth={false}\n      />\n    </InlineWrap>\n    <InlineWrap>\n      <FormInputTime\n        fieldName={fieldTo}\n        label={<Trans id=\"input.timespan.to\">to</Trans>}\n        fullWidth={false}\n      />\n    </InlineWrap>\n  </>\n)\n","import { i18nMark } from '@lingui/core'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { SelectControlFlat } from '../../../atoms/SelectControlFlat'\nimport { useSettings } from '../../../hooks/useSettings'\nimport { i18n } from '../../../i18n'\nimport { ESpecificHourMode } from '../businesshours.types'\n\nconst labels = {\n  [ESpecificHourMode.TIMESPAN]: i18nMark('Open between'),\n  [ESpecificHourMode.FULLDAY]: i18nMark('Closed'),\n}\n\nexport const SpecificModeSelector = React.memo(() => {\n  const { businessHours } = useSettings()\n  return useObserver(() => (\n    <SelectControlFlat<ESpecificHourMode>\n      items={[ESpecificHourMode.TIMESPAN, ESpecificHourMode.FULLDAY]}\n      selectedItem={businessHours.specificMode as ESpecificHourMode}\n      formatItem={mode => i18n._(labels[mode])}\n      onSingleSelection={(mode: ESpecificHourMode) =>\n        businessHours.changeSpecificMode(mode)\n      }\n    />\n  ))\n})\n","import { Trans } from '@lingui/macro'\nimport { isoDate } from '@speedlo/graphql'\nimport { useNow } from '@speedlo/hooks'\nimport { XForm } from '@speedlo/xform'\nimport { endOfDay, setHours, setMinutes, startOfDay } from 'date-fns'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { FormInput } from '../../../components/forms/FormInput'\nimport { FormInputDate } from '../../../components/forms/FormInputDate'\nimport { FormInputTimeSpan } from '../../../components/forms/FormInputTimeSpan'\nimport { FormSubmitButton } from '../../../components/forms/FormSubmitButton'\nimport {\n  QSpecificBusinessHoursDocument,\n  useMSpecificBusinessHourCreate,\n} from '../../../graph/generated'\nimport { formatTime, fullDateFormat } from '../../../helpers/formats'\nimport { i18n } from '../../../i18n'\nimport { TSpecificBusinessHoursFormValues } from '../businesshours.types'\nimport { SpecificModeSelector } from '../molecules/SpecificModeSelector'\n\nconst DateContainer = styled.div`\n  display: inline-block;\n  width: 13rem;\n  margin-left: 1rem;\n  margin-top: 2rem;\n`\n\nconst FormContainer = styled.div`\n  display: inline-block;\n  width: 16rem;\n  min-height: 6rem;\n  margin: 0rem 0 0 1rem;\n  vertical-align: top;\n`\n\ntype TFormValues = TSpecificBusinessHoursFormValues\n\nexport const SpecificBusinessHourForm: React.FC = () => {\n  const getNow = useNow()\n  const { settings } = useRoot()\n\n  const [createBsHour] = useMSpecificBusinessHourCreate()\n\n  const onSubmit = React.useCallback(\n    (values: TFormValues) => {\n      const openAt =\n        settings.businessHours.isTimespanMode && values.openAt\n          ? values.openAt\n          : startOfDay(values.date)\n      const closeAt =\n        settings.businessHours.isTimespanMode && values.closeAt\n          ? values.closeAt\n          : endOfDay(values.date)\n      createBsHour(\n        {\n          input: {\n            companyBranch: settings.branchId,\n            specificDate: isoDate(values.date),\n            closed: !settings.businessHours.isTimespanMode,\n            closedNote: values.note,\n            openAt: formatTime(openAt),\n            closeAt: formatTime(closeAt),\n          },\n        },\n        {\n          refetchQueries: [\n            {\n              query: QSpecificBusinessHoursDocument,\n              variables: { branchId: settings.branchId },\n            },\n          ],\n        },\n      )\n    },\n    [createBsHour, settings],\n  )\n\n  return (\n    <XForm onSubmit={onSubmit} initialValues={getInitialValues(getNow())}>\n      <DateContainer>\n        <FormInputDate\n          fieldName=\"date\"\n          format={fullDateFormat}\n          minDate={new Date()}\n          fullWidth={true}\n          label={<Trans>Date</Trans>}\n        />\n      </DateContainer>\n\n      <FormContainer>\n        <SpecificModeSelector />\n        <Observer>\n          {() =>\n            settings.businessHours.isTimespanMode ? (\n              <FormInputTimeSpan fieldFrom=\"openAt\" fieldTo=\"closeAt\" />\n            ) : (\n              <Sizer width={13}>\n                <FormInput\n                  fieldName=\"note\"\n                  fullWidth={true}\n                  placeholder={i18n.t`Closing reason`}\n                />\n              </Sizer>\n            )\n          }\n        </Observer>\n      </FormContainer>\n\n      <FormSubmitButton width=\"9rem\">\n        <Trans>Add</Trans>\n      </FormSubmitButton>\n    </XForm>\n  )\n}\n\nfunction getInitialValues(now: Date): TFormValues {\n  return {\n    date: now,\n    openAt: setHours(setMinutes(now, 0), 9),\n    closeAt: setHours(setMinutes(now, 0), 20),\n    note: '',\n  }\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRow } from '../../../atoms/FlexRow'\nimport { FSpecificBusinessHourFragment } from '../../../graph/generated'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\n\ninterface ISpecificBusinessHourLineProps {\n  bsHour: FSpecificBusinessHourFragment\n  canDelete: boolean\n  onDelete(): void\n}\n\nexport const SpecificBusinessHourLine: React.FC<\n  ISpecificBusinessHourLineProps\n> = ({ bsHour, canDelete, onDelete }) => (\n  <FlexRow>\n    <FlexColumn fixedWidth>\n      {canDelete && (\n        <TouchButtonDelete\n          onDelete={onDelete}\n          confirmText={`${i18n.t`Really remove specific business hour ${bsHour.specificDateLocalized}?`}`}\n        />\n      )}\n    </FlexColumn>\n    <FlexColumn fixedWidth width=\"14rem\">\n      {bsHour.specificDateLocalized}\n    </FlexColumn>\n    <FlexColumn fixedWidth width=\"10rem\">\n      {`${bsHour.openAt} - ${bsHour.closeAt}`}\n    </FlexColumn>\n    <FlexColumn fixedWidth width=\"10rem\">\n      {bsHour.closed ? <Trans>Closed</Trans> : <Trans>Open</Trans>}\n    </FlexColumn>\n    <FlexColumn widthGrowIndex={1}>{bsHour.closedNote}</FlexColumn>\n  </FlexRow>\n)\n","import { Trans } from '@lingui/macro'\nimport { idPropEq } from '@speedlo/tools'\nimport { isBefore, startOfDay } from 'date-fns/esm'\nimport produce from 'immer'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { MarginBox } from '../../../atoms/MarginBox'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport {\n  FRegularBusinessHourFragment,\n  FSpecificBusinessHourFragment,\n  QSpecificBusinessHoursQuery,\n  useMSpecificBusinessHourDelete,\n  useQSpecificBusinessHours,\n} from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { useCanMutate } from '../../../hooks/useAccessGuard'\nimport { useLoadingCache } from '../../../hooks/useLoadingCache'\nimport { SpecificBusinessHourLine } from '../molecules/SpecificBusinessHourLine'\n\ntype BsHour = FSpecificBusinessHourFragment\n\nconst sortByDate = RM.sort<BsHour>(\n  // @ts-ignore Fix typing\n  RM.ascend(RM.or(RM.prop('specificDate'), RM.not)),\n)\n\nconst rejectOld = RM.reject<BsHour>(\n  ({ specificDate }) =>\n    Boolean(specificDate) && isBefore(specificDate!, startOfDay(new Date())),\n)\n\nexport const SpecificBusinessHours = observer(() => {\n  const { settings } = useRoot()\n\n  const getBsHours = useLoadingCache<RoA<BsHour>>()\n\n  const { data, loading, updateQuery } = useQSpecificBusinessHours({\n    branchId: settings.branchId,\n  })\n\n  const bsHours = getBsHours(loading, () =>\n    sortByDate(rejectOld(data.businessHours)),\n  )\n\n  const canDelete = useCanMutate('destroyBusinessHour')\n  const [deleteBsHour] = useMSpecificBusinessHourDelete()\n\n  if (bsHours === null) {\n    return null\n  }\n\n  if (bsHours.length === 0) {\n    return (\n      <MarginBox margin={1}>\n        <Trans>No specific business hours defined</Trans>\n      </MarginBox>\n    )\n  }\n\n  return (\n    <>\n      {bsHours.map(bsHour => (\n        <SpecificBusinessHourLine\n          key={bsHour.id}\n          bsHour={bsHour}\n          canDelete={canDelete}\n          onDelete={async () => {\n            await deleteBsHour({ id: bsHour.id })\n            updateQuery(updateOnDelete(bsHour.id))\n          }}\n        />\n      ))}\n    </>\n  )\n})\n\nfunction updateOnDelete(bsHour: ID) {\n  return produce((draft: QSpecificBusinessHoursQuery) => {\n    ;((draft.businessHours as unknown) as FRegularBusinessHourFragment[]).splice(\n      draft.businessHours.findIndex(idPropEq(bsHour)),\n      1,\n    )\n  })\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { CanQuery } from '../../../atoms/CanQuery'\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { MarginBox } from '../../../atoms/MarginBox'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { SettingsCompanyBranchPicker } from '../../../segments/settings/organisms/SettingsCompanyBranchPicker'\nimport { BusinessHoursForm } from '../organisms/BusinessHoursForm'\nimport { SpecificBusinessHourForm } from '../organisms/SpecificBusinessHourForm'\nimport { SpecificBusinessHours } from '../organisms/SpecificBusinessHours'\n\nexport const BusinessHoursPage: React.FC = () => (\n  <FullPageLayout pageTitle={i18n.t`Business hours`} useBackButton={true}>\n    <Card>\n      <SettingsCompanyBranchPicker />\n      <CanQuery queryName=\"businessHours\">\n        <Headline>\n          <MarginBox margin=\"1rem 0\">\n            <Trans>Regular business hours</Trans>\n          </MarginBox>\n        </Headline>\n        <BusinessHoursForm />\n      </CanQuery>\n\n      <Headline>\n        <MarginBox margin=\"1rem 0\">\n          <Trans>Specific business hours</Trans>\n        </MarginBox>\n      </Headline>\n      <SpecificBusinessHours />\n\n      <CanMutate mutationName=\"addSpecialBusinessHour\">\n        <Headline>\n          <MarginBox margin=\"1rem 0\">\n            <Trans>Add specific business hour</Trans>\n          </MarginBox>\n        </Headline>\n        <SpecificBusinessHourForm />\n      </CanMutate>\n    </Card>\n  </FullPageLayout>\n)\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { SecureRoute } from '../../../routes/SecureRoute'\nimport { ROUTE_SETTINGS_HOURS } from '../../settings/settings.routes'\nimport { BusinessHoursPage } from '../pages/BusinessHoursPage'\n\ninterface IProps {}\n\nexport const BusinessHoursRouting: React.FC<IProps> = () => (\n  <Switch>\n    <SecureRoute\n      exact\n      path={ROUTE_SETTINGS_HOURS}\n      component={BusinessHoursPage}\n    />\n    <Route component={NotFoundPage} />\n  </Switch>\n)\n\nexport default BusinessHoursRouting\n"],"sourceRoot":""}