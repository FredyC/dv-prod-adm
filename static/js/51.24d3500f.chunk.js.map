{"version":3,"sources":["segments/settings/routes/SettingsRoutes.tsx","atoms/IconLine.tsx","atoms/FormInputTextBox.tsx","atoms/CanMutate.tsx","atoms/Headline.tsx","atoms/SelectControl.tsx","atoms/NoAccess.tsx","atoms/CanQuery.tsx","atoms/FlexColumn.tsx","segments/settings/atoms/WithSettings.tsx","atoms/SelectControlFlat.tsx","molecules/FormSubmit.tsx","helpers/form.ts","organisms/CompanyBranchPicker.tsx","molecules/TouchButtonDelete.tsx","molecules/CompanyBranchDropdown.tsx","segments/settings/organisms/SettingsCompanyBranchPicker.tsx","atoms/CompanyBranch.tsx","atoms/CursorContainer.tsx","molecules/CompanyBranchFlatSelect.tsx","molecules/PageLayoutItem.tsx","atoms/FormInputCheckbox.tsx","helpers/moment.ts","atoms/FormInputDate.tsx","atoms/FlexRow.tsx","segments/branchpreferences/routes/BranchPreferencesRoutes.tsx","segments/branchpreferences/pages/BranchPreferencesPage.tsx","segments/branchpreferences/organism/InvoicePreferencesForm.tsx","segments/branchpreferences/organism/SaveInvoicePreferencesButton.tsx","segments/branchpreferences/organism/StoppageForm.tsx","segments/businesshours/routes/BusinessHoursRoutes.tsx","segments/businesshours/pages/BusinessHoursPage.tsx","segments/businesshours/organisms/SpecificBusinessHourForm.tsx","atoms/FormInputTimeSpan.tsx","atoms/FormInputTime.tsx","segments/businesshours/molecules/SpecificModeSelector.tsx","segments/businesshours/organisms/SpecificBusinessHours.tsx","segments/businesshours/molecules/SpecificBusinessHourLine.tsx","segments/settings/pages/SettingsPage.tsx","segments/settings/organisms/BusinessHoursButton.tsx","segments/settings/organisms/MenuCategoryButton.tsx","segments/settings/organisms/MenuRecipeButton.tsx","segments/settings/organisms/MenuStockButton.tsx","segments/settings/organisms/MenuStockDepositButton.tsx","segments/settings/organisms/ZonesMenuButton.tsx"],"names":["_react","__webpack_require__","_reactRouter","_PageTitle","_i18n","_NotFoundPage","_LazyRoute","_SecureRoute","_BranchPreferencesRoutes","_BusinessHoursRoutes","_SettingsPage","ZoneMenuRoutes","default","lazy","Promise","all","e","then","t","bind","MenuRoutes","SettingsRoutes","match","createElement","Fragment","PageTitle","Route","path","title","i18n","_","Switch","SecureRoute","exact","component","SettingsPage","LazyRoute","BusinessHoursRoutes","BranchPreferencesRoutes","NotFoundPage","_interopRequireDefault","_styledComponents","_styling","_Icon","IconLineWrap","div","withConfig","displayName","DescriptionContainer","labelMargin","labelWidth","labelWidthUnits","Spacing","DefaultSizeUnit","IconLineChildren","LabelStyled","_a","icon","label","children","props","__rest","iconComponent","Icon","iconName","color","Colors","greyDark","nativeColor","_reactForm","_interopRequireWildcard","_validator","inputStyle","css","MarginAroundFormComponents","invalidInputStyle","FormInputStyled","input","invalid","FormInputTextBox","forwardRef","inputRef","field","inputWidth","DefaultInputWidth","inputWidthUnit","isRequired","validatioName","validationMessage","validate","Field","value","isEmpty","fieldApi","_extends","width","onChange","ev","setTouched","setValue","target","Boolean","error","ref","_NoAccess","_RootProvider","mutationName","user","useRoot","canMutate","NoAccess","Headline","h2","light","greyLight","greyDarkest","margin","size","_reactSelect","styles","composeSelectControlStyles","outerStyles","Object","assign","control","base","state","selectProps","minWidth","controlStyles","border","greyMiddle","undefined","menu","menuStyles","zIndex","black","queryName","canQuery","FlexColumn","fixedWidth","widthGrowIndex","padding","_WithRoot","observe","render","WithRoot","settings","_react2","_ramda","ItemStyled","textColor","isSelected","SelectorStyled","isInvalid","SelectControlFlat","Component","[object Object]","isMulti","selectedItem","selectedItems","this","Array","isArray","length","item","RM","contains","equals","onSingleSelection","onMultiSelection","isItemSelected","without","concat","items","isClearable","formatItem","hasSelection","onClick","updateSelection","Trans","id","map","idx","key","defaultProps","prop","getItemValue","_form","_TouchButton","FormApi","form","TouchButton","green","disabled","isFormValid","submitting","preventDefault","submitForm","formState","errors","keys","fieldName","_CompanyBranchDropdown","_CompanyBranchFlatSelect","breakpoint","selectedBranches","onSelectionChange","onSelectionClear","getDropdownProps","branch","includes","branches","selectedBranch","find","filter","selected","CompanyBranchFlatSelect","CompanyBranchDropdown","onDelete","confirmText","ButtonHeight","height","window","confirm","_CompanyBranch","_SelectControl","ClearIndicator","getStyles","innerProps","restInnerProps","style","SelectControl","placeholder","options","getOptionValue","formatOptionLabel","CompanyBranch","filterOption","rawInput","data","name","toLocaleLowerCase","closeMenuOnSelect","components","clearIndicator","cursor","selection","head","_mobxReactLite","_IconLine","_CompanyBranchPicker","useObserver","IconLine","CompanyBranchPicker","branchId","selectBranch","_CursorContainer","short","showBrand","CursorContainer","substr","brand","_SelectControlFlat","_reactRouterDom","_CanMutate","_CanQuery","route","layoutItem","Link","to","CanQuery","CanMutate","CheckboxStyled","Checkbox","white","Radiuses","TextComponent","defaultValue","inputProps","checked","_moment","cs","updateLocale","_reactDatepicker2","FormInputDateContainer","minDate","Date","date","FlexRow","_BranchPreferencesPage","BranchPreferencesPage","_Card","_Headline","_FullPageLayout","_SettingsCompanyBranchPicker","_InvoicePreferencesForm","_StoppageForm","FullPageLayout","pageTitle","Card","SettingsCompanyBranchPicker","StoppageForm","InvoicePreferencesForm","_FormInputTextBox","_SaveInvoicePreferencesButton","SaveButtonContainer","Form","SaveInvoicePreferencesButton","text","_FormInputCheckbox","FormInputCheckbox","_BusinessHoursPage","BusinessHoursPage","_SpecificBusinessHourForm","_SpecificBusinessHours","useBackButton","SpecificBusinessHours","SpecificBusinessHourForm","_dateFns","_FormInputDate","_FormInputTimeSpan","_formats","_FormSubmit","_BusinessHoursModel","_SpecificModeSelector","DateContainer","FormContainer","businessHours","onSubmit","submitSpecificHour","defaultValues","now","openAt","setHours","setMinutes","closeAt","getDefaultValues","FormInputDate","dateFormat","fullDateFormat","SpecificModeSelector","Observer","specificMode","ESpecificHourMode","TIMESPAN","FormInputTimeSpan","fieldFrom","fieldTo","FormSubmit","_FormInputTime","LabelToStyled","FormInputTime","FormInputTypeContainer","timeIntervals","timeFormat","time","showTimeSelect","showTimeSelectOnly","_WithSettings","labels","i18nMark","FULLDAY","WithSettings","mode","changeSpecificMode","_SpecificBusinessHourLine","sortByDate","sort","ascend","or","not","QuerySpecificBusinessHours","queryProps","fetchPolicy","renderFragment","bsHour","SpecificBusinessHourLine","deleteSpecificHour","_FlexColumn","_FlexRow","_TouchButtonDelete","TouchButtonDelete","0","specificDateLocalized","closed","closedNote","formatLineTime","_PageLayout","_PageLayoutItem","_BusinessHoursButton","_MenuCategoryButton","_MenuRecipeButton","_MenuStockButton","_MenuStockDepositButton","_ZonesMenuButton","PageLayout","layouts","i","x","y","w","h","PageLayoutItem","BusinessHoursButton","MenuRecipeButton","MenuCategoryButton","MenuStockButton","MenuStockDepositButton","ZonesMenuButton","red","turquoise","violet"],"mappings":"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","file":"static/js/51.24d3500f.chunk.js","sourcesContent":["import React from 'react'\nimport { Route, RouteComponentProps, Switch } from 'react-router'\n\nimport { PageTitle } from '../../../atoms/PageTitle'\nimport { i18n } from '../../../i18n'\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { LazyRoute } from '../../../routes/LazyRoute'\nimport { SecureRoute } from '../../../routes/SecureRoute'\nimport { BranchPreferencesRoutes } from '../../branchpreferences/routes/BranchPreferencesRoutes'\nimport { BusinessHoursRoutes } from '../../businesshours/routes/BusinessHoursRoutes'\nimport { SettingsPage } from '../pages/SettingsPage'\n\nconst ZoneMenuRoutes = React.lazy(() =>\n  import('../../../segments/zones/routes/ZoneMenuRoutes'),\n)\nconst MenuRoutes = React.lazy(() =>\n  import('../../../segments/menu/routes/MenuRoutes'),\n)\n\ninterface ISettingsRoutesProps extends RouteComponentProps<{}> {}\n\nexport const SettingsRoutes: React.SFC<ISettingsRoutesProps> = ({ match }) => {\n  return (\n    <>\n      <PageTitle.Route path={match.path} title={i18n.t`Settings`} />\n      <Switch>\n        <SecureRoute exact={true} path={match.path} component={SettingsPage} />\n        <LazyRoute path={`${match.path}/menu`} component={MenuRoutes} />\n        <LazyRoute path={`${match.path}/zones`} component={ZoneMenuRoutes} />\n        <Route\n          path={`${match.path}/businesshours`}\n          component={BusinessHoursRoutes}\n        />\n        <Route\n          path={`${match.path}/preferences`}\n          component={BranchPreferencesRoutes}\n        />\n        <Route component={NotFoundPage} />\n      </Switch>\n    </>\n  )\n}\n\nexport default SettingsRoutes\n","import { SvgIconProps } from '@material-ui/core/SvgIcon'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { Colors, Spacing } from '../styling'\nimport { Icon } from './Icon'\n\ninterface IProps {\n  icon?: string | React.ComponentType<SvgIconProps>\n  label?: string\n  labelWidth?: number\n  labelWidthUnits?: string\n  labelMargin?: string\n  className?: string\n}\n\nconst getLabelWidth = ({\n  labelWidth = 0,\n  labelWidthUnits = Spacing.DefaultSizeUnit,\n}: IProps) => {\n  return labelWidth + labelWidthUnits\n}\n\nconst getLabelMargin = ({ labelMargin = '0.5rem 0.2rem 0 auto' }: IProps) => {\n  return labelMargin\n}\n\nconst IconLineWrap = styled.div`\n  display: flex;\n`\nIconLineWrap.displayName = 'IconLineWrap'\n\nconst DescriptionContainer = styled.div`\n  margin: ${getLabelMargin};\n  min-width: ${getLabelWidth};\n  flex: 0 0 auto;\n  text-align: right;\n`\n\nconst IconLineChildren = styled.div`\n  margin-left: 0.5rem;\n  align-self: stretch;\n  flex: 1 1 auto;\n`\nconst LabelStyled = styled.div`\n  padding-top: 0.2rem;\n  display: inline-block;\n`\n\nIconLineChildren.displayName = 'IconLineChildren'\n\nexport const IconLine: React.SFC<IProps> = ({\n  icon,\n  label,\n  labelWidth,\n  labelWidthUnits,\n  labelMargin,\n  children,\n  ...props\n}) => {\n  let iconComponent\n  if (icon) {\n    if (typeof icon === 'string') {\n      iconComponent = <Icon iconName={icon} color={Colors.greyDark} />\n    } else {\n      iconComponent = React.createElement(icon, {\n        nativeColor: Colors.greyDark,\n      })\n    }\n  }\n\n  return (\n    <IconLineWrap {...props}>\n      <DescriptionContainer\n        labelWidth={labelWidth}\n        labelWidthUnits={labelWidthUnits}\n        labelMargin={labelMargin}\n      >\n        {iconComponent}\n        {label ? <LabelStyled>{label}</LabelStyled> : null}\n      </DescriptionContainer>\n      <IconLineChildren>{children}</IconLineChildren>\n    </IconLineWrap>\n  )\n}\n","import React from 'react'\nimport { Field, FieldType, ValidationResult } from 'react-form'\nimport styled, { css } from 'styled-components'\nimport { isEmpty } from 'validator'\n\nimport { i18n } from '../i18n'\nimport { Spacing } from '../styling'\n\ninterface IProps extends React.InputHTMLAttributes<never> {\n  field: FieldType\n  defaultValue?: string\n  inputWidth?: number\n  inputWidthUnit?: string\n  isRequired?: boolean\n  validatioName?: string\n  validationMessage?: string\n  validate?(value: string): ValidationResult\n}\n\nexport type TFormInputTextBoxProps = IProps\n\nconst inputStyle = css`\n  margin: ${Spacing.MarginAroundFormComponents};\n`\n\nconst invalidInputStyle = css`\n  border: 1px red solid;\n`\n\nexport const FormInputStyled = styled.input`\n  ${inputStyle};\n  ${({ invalid }: { invalid?: boolean }) => invalid && invalidInputStyle};\n`\n\nexport const FormInputTextBox = React.forwardRef<HTMLInputElement, IProps>(\n  (\n    {\n      field,\n      inputWidth = Spacing.DefaultInputWidth,\n      inputWidthUnit = Spacing.DefaultSizeUnit,\n      isRequired,\n      validatioName,\n      validationMessage,\n      validate,\n      ...props\n    },\n    inputRef,\n  ) => (\n    <Field\n      field={field}\n      validate={\n        validate ||\n        (value => {\n          if (isRequired && isEmpty(value + '')) {\n            if (validationMessage) {\n              return validationMessage\n            }\n            return i18n.t`${validatioName} is required`\n          }\n          return null\n        })\n      }\n    >\n      {fieldApi => (\n        <FormInputStyled\n          width={`${inputWidth}${inputWidthUnit}`}\n          value={!fieldApi.value && fieldApi.value !== 0 ? '' : fieldApi.value}\n          onChange={ev => {\n            fieldApi.setTouched(true)\n            fieldApi.setValue(ev.target.value)\n          }}\n          invalid={Boolean(fieldApi.error)}\n          // @ts-ignore\n          ref={inputRef}\n          {...props}\n        />\n      )}\n    </Field>\n  ),\n)\n","import React from 'react'\n\nimport { NoAccess } from './NoAccess'\nimport { useRoot } from './RootProvider'\n\ninterface IProps {\n  mutationName: string\n}\n\nexport const CanMutate: React.SFC<IProps> = ({ mutationName, children }) => {\n  const { user } = useRoot()\n  return user.canMutate(mutationName) ? (\n    <>{children}</>\n  ) : (\n    <NoAccess>{`No access to mutation ${mutationName}`}</NoAccess>\n  )\n}\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\ninterface IHeadlineProps {\n  margin?: string\n  size?: 'smaller'\n  light?: boolean\n}\n\nconst getMargin = ({ margin = '0 0.5rem 0 0.5rem' }: IHeadlineProps) => margin\n\nconst getFontSize = ({ size }: IHeadlineProps) => size === 'smaller' && '1rem'\n\nconst getColor = ({ light = false }: IHeadlineProps) =>\n  light ? Colors.greyLight : Colors.greyDarkest\n\nexport const Headline = styled.h2`\n  color: ${getColor};\n  font-weight: lighter;\n  margin: ${getMargin};\n  font-size: ${getFontSize};\n`\n","import React from 'react'\nimport Select from 'react-select'\nimport { Props } from 'react-select/lib/Select'\nimport { StylesConfig } from 'react-select/lib/styles'\n\nimport { Colors, Spacing } from '../styling'\n\nexport interface ISelectControlProps<OptionType> extends Props<OptionType> {\n  width?: number\n  minWidth?: number\n}\n\nexport const composeSelectControlStyles = (outerStyles: StylesConfig = {}) => ({\n  ...outerStyles,\n  control: (base, state) => {\n    const {\n      selectProps: { width, minWidth },\n    } = state\n    const controlStyles = {\n      ...base,\n      border: `1px solid ${Colors.greyMiddle}`,\n      margin: Spacing.MarginAroundFormComponents,\n      width: width !== undefined ? `${width}rem` : '100%',\n      minWidth: minWidth !== undefined ? `${minWidth}rem` : '8rem',\n    }\n    return outerStyles.control\n      ? outerStyles.control(controlStyles, state)\n      : controlStyles\n  },\n  menu: (base, state) => {\n    const {\n      selectProps: { width },\n    } = state\n    const menuStyles = {\n      ...base,\n      zIndex: 20,\n      color: Colors.black,\n      width: width !== undefined ? `${width}rem` : '100%',\n    }\n    return outerStyles.menu ? outerStyles.menu(menuStyles, state) : menuStyles\n  },\n})\n\nexport function SelectControl<OptionType>(\n  props: ISelectControlProps<OptionType>,\n) {\n  return (\n    <Select<OptionType>\n      {...props}\n      styles={composeSelectControlStyles(props.styles)}\n    />\n  )\n}\n","import { Tooltip } from '@material-ui/core'\nimport { PanTool } from '@material-ui/icons'\nimport React from 'react'\n\ninterface IProps {\n  children: string\n}\n\nexport const NoAccess: React.SFC<IProps> = ({ children }) =>\n  process.env.REACT_APP_STAGE !== 'prod' ? (\n    <Tooltip title={children}>\n      <PanTool />\n    </Tooltip>\n  ) : null\n","import React from 'react'\n\nimport { NoAccess } from './NoAccess'\nimport { useRoot } from './RootProvider'\n\ninterface IProps {\n  queryName: string\n}\n\nexport const CanQuery: React.SFC<IProps> = ({ queryName, children }) => {\n  const { user } = useRoot()\n  return user.canQuery(queryName) ? (\n    <>{children}</>\n  ) : (\n    <NoAccess>{`No access to query ${queryName}`}</NoAccess>\n  )\n}\n","import styled from 'styled-components'\n\ninterface IFlexColumnProps {\n  fixedWidth?: boolean\n  width?: string\n  widthGrowIndex?: number\n  padding?: string\n  margin?: string\n}\n\nexport const FlexColumn = styled.div`\n  flex: ${getFlexValue};\n  padding: ${getPadding};\n  margin: ${getMargin};\n`\n\nfunction getFlexValue({\n  fixedWidth = false,\n  width,\n  widthGrowIndex = 0,\n}: IFlexColumnProps) {\n  return fixedWidth ? (width ? `0 0 ${width}` : '0 0') : `${widthGrowIndex} 0`\n}\n\nfunction getPadding({ padding = '0.25rem' }: IFlexColumnProps) {\n  return padding\n}\n\nfunction getMargin({ margin = '' }: IFlexColumnProps) {\n  return margin\n}\n","import React from 'react'\n\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { TSettingsModel } from '../models/SettingsModel'\n\ninterface IProps {\n  render(settings: TSettingsModel): ReactNode\n  observe?: boolean\n}\n\nexport const WithSettings: React.SFC<IProps> = ({ observe, render }) => (\n  <WithRoot observe={observe} render={({ settings }) => render(settings)} />\n)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { RM } from '../helpers/ramda'\n\nexport interface ISelectControlFlatProps<ItemType = unknown> {\n  items: ReadonlyArray<ItemType>\n  selectedItem?: Maybe<ItemType>\n  onSingleSelection?(selected: Maybe<ItemType>): void\n  selectedItems?: ReadonlyArray<ItemType>\n  onMultiSelection?(selected: ReadonlyArray<ItemType>): void\n  formatItem?: (item: ItemType) => string | ReactNode\n  isMulti?: boolean\n  isClearable?: boolean\n  isInvalid?: boolean\n  textColor?: string\n}\n\ninterface IItemProps {\n  isSelected: boolean\n  textColor: string\n  onClick(): void\n}\n\nconst ItemStyled = styled.div`\n  margin: 0.5rem 0.6rem;\n  display: inline-block;\n  cursor: pointer;\n  color: ${({ textColor }: IItemProps) => textColor};\n  ${applySelectionStyle};\n`\n\nconst SelectorStyled = styled.div`\n  border: ${({ isInvalid }: { isInvalid: boolean }) =>\n    isInvalid === true ? '1px red solid' : 'auto'};\n`\n\nexport class SelectControlFlat<\n  ItemType = { id: ID; displayName: string }\n> extends React.Component<ISelectControlFlatProps<ItemType>> {\n  static defaultProps = {\n    formatItem: RM.prop('displayName'),\n    getItemValue: RM.prop('id'),\n  }\n  hasSelection() {\n    const { isMulti, selectedItem, selectedItems } = this.props\n    if (isMulti) {\n      return Array.isArray(selectedItems) && selectedItems.length > 0\n    }\n    return selectedItem != null\n  }\n  isItemSelected(item: ItemType) {\n    const { isMulti, selectedItem, selectedItems } = this.props\n    if (isMulti && Array.isArray(selectedItems)) {\n      return RM.contains(item, selectedItems)\n    }\n    return RM.equals(selectedItem, item)\n  }\n  updateSelection(item: Maybe<ItemType>) {\n    const {\n      isMulti,\n      selectedItems = [],\n      onSingleSelection,\n      onMultiSelection,\n    } = this.props\n    if (item === null) {\n      if (isMulti && onMultiSelection) {\n        onMultiSelection([])\n      } else if (onSingleSelection) {\n        onSingleSelection(null)\n      }\n    } else if (isMulti && onMultiSelection) {\n      if (this.isItemSelected(item)) {\n        onMultiSelection(\n          Array.isArray(selectedItems)\n            ? RM.without([item], selectedItems)\n            : [item],\n        )\n      } else {\n        onMultiSelection(\n          Array.isArray(selectedItems) ? RM.concat(selectedItems, [item]) : [],\n        )\n      }\n    } else if (onSingleSelection) {\n      onSingleSelection(item)\n    }\n  }\n  render() {\n    const {\n      items,\n      isClearable,\n      isInvalid = false,\n      textColor = 'inherit',\n      formatItem,\n    } = this.props\n    return (\n      <SelectorStyled isInvalid={isInvalid}>\n        {isClearable && (\n          <ItemStyled\n            isSelected={!this.hasSelection()}\n            textColor={textColor}\n            onClick={() => {\n              this.updateSelection(null)\n            }}\n          >\n            <Trans id=\"optionselector.clear-filter\">All</Trans>\n          </ItemStyled>\n        )}\n        {items.map((item, idx) => {\n          return (\n            <ItemStyled\n              key={idx}\n              isSelected={this.isItemSelected(item)}\n              textColor={textColor}\n              onClick={() => {\n                this.updateSelection(item)\n              }}\n            >\n              {formatItem!(item)}\n            </ItemStyled>\n          )\n        })}\n      </SelectorStyled>\n    )\n  }\n}\n\nfunction applySelectionStyle({ isSelected }: IItemProps) {\n  if (!isSelected) {\n    return ''\n  }\n  return css`\n    font-weight: bolder;\n    text-decoration: underline;\n  `\n}\n","import React from 'react'\nimport { FormApi } from 'react-form'\n\nimport { isFormValid } from '../helpers/form'\nimport { ITouchButtonProps, TouchButton } from '../molecules/TouchButton'\nimport { Colors } from '../styling'\n\ninterface IProps extends ITouchButtonProps {}\n\nexport const FormSubmit: React.SFC<IProps> = ({ children, ...props }) => (\n  <FormApi>\n    {form => (\n      <TouchButton\n        color={Colors.green}\n        disabled={!isFormValid(form) || form.submitting}\n        onClick={e => {\n          e.preventDefault()\n          form.submitForm(e)\n        }}\n        {...props}\n      >\n        {children}\n      </TouchButton>\n    )}\n  </FormApi>\n)\n","import { IFormState } from 'react-form'\nimport { isEmpty } from 'validator'\n\nimport { i18n } from '../i18n'\n\nexport function isFormValid(formState: IFormState) {\n  return !formState.errors || Object.keys(formState.errors).length === 0\n}\n\nexport function validateIsRequired(fieldName: string) {\n  return (value: string) =>\n    isEmpty(value + '') ? i18n.t`${fieldName} must be entered` : null\n}\n","import React from 'react'\n\nimport { useRoot } from '../atoms/RootProvider'\nimport { GCompanyBranch } from '../graph/types'\nimport { RM } from '../helpers/ramda'\nimport {\n  CompanyBranchDropdown,\n  ICompanyBranchDropdownProps,\n} from '../molecules/CompanyBranchDropdown'\nimport { CompanyBranchFlatSelect } from '../molecules/CompanyBranchFlatSelect'\n\ntype TBranch = GCompanyBranch.Fragment\n\ninterface ICompanyBranchPickerProps {\n  selectedBranches?: ID[]\n  onSelectionChange?(branchIds: ID[], branches: TBranch[]): void\n  onSelectionClear?(): void\n  breakpoint?: number\n  isMulti?: boolean\n  isClearable?: boolean\n  textColor?: string\n  getDropdownProps?(): Partial<ICompanyBranchDropdownProps>\n}\n\nexport interface ICompanyBranchPickerImpl {\n  branches: ReadonlyArray<TBranch>\n  isMulti?: boolean\n  isClearable?: boolean\n  selectedBranch?: Maybe<TBranch>\n  onSingleSelection?(branch: Maybe<TBranch>): void\n  selectedBranches?: TBranch[]\n  onMultiSelection?(branches: TBranch[]): void\n  textColor?: string\n}\n\nexport const CompanyBranchPicker: React.FC<ICompanyBranchPickerProps> = ({\n  breakpoint = 3,\n  selectedBranches = [],\n  isMulti = false,\n  isClearable = true,\n  textColor,\n  onSelectionChange,\n  onSelectionClear,\n  getDropdownProps = () => ({}),\n}) => {\n  const { user } = useRoot()\n  const isSelected = branch => selectedBranches.includes(branch.id)\n  const props: ICompanyBranchPickerImpl = {\n    textColor,\n    isClearable,\n    isMulti,\n    branches: user.branches,\n    selectedBranch: user.branches.find(isSelected),\n    selectedBranches: user.branches.filter(isSelected),\n    onSingleSelection(selected: TBranch) {\n      if (selected === null && onSelectionClear) {\n        onSelectionClear()\n      } else if (selected !== null && onSelectionChange) {\n        onSelectionChange([selected.id], [selected])\n      }\n    },\n    onMultiSelection(selected: TBranch[]) {\n      if (selected.length === 0 && onSelectionClear) {\n        onSelectionClear()\n      } else if (selected.length && onSelectionChange) {\n        onSelectionChange(selected.map(RM.prop('id')), selected)\n      }\n    },\n  }\n  if (user.branches.length < breakpoint) {\n    return <CompanyBranchFlatSelect {...props} />\n  }\n  return <CompanyBranchDropdown {...props} {...getDropdownProps()} />\n}\n","import React from 'react'\n\nimport { Colors, Spacing } from '../styling'\nimport { ITouchButtonProps, TouchButton } from './TouchButton'\n\ninterface ITouchButtonDeleteProps extends Omit<ITouchButtonProps, 'onClick'> {\n  confirmText?: string\n  onDelete(): void\n}\n\nexport const TouchButtonDelete: React.SFC<ITouchButtonDeleteProps> = ({\n  onDelete,\n  confirmText,\n  ...props\n}) => (\n  <TouchButton\n    iconName=\"delete\"\n    color={Colors.greyMiddle}\n    width={Spacing.ButtonHeight}\n    height={Spacing.ButtonHeight}\n    onClick={ev => {\n      ev.preventDefault()\n      if (!confirmText || window.confirm(confirmText)) {\n        onDelete()\n      }\n    }}\n    {...props}\n  />\n)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport { Props } from 'react-select/lib/Select'\n\nimport { CompanyBranch } from '../atoms/CompanyBranch'\nimport { ISelectControlProps, SelectControl } from '../atoms/SelectControl'\nimport { GCompanyBranch } from '../graph/types'\nimport { RM } from '../helpers/ramda'\nimport { i18n } from '../i18n'\nimport { ICompanyBranchPickerImpl } from '../organisms/CompanyBranchPicker'\n\ninterface IProps\n  extends ICompanyBranchPickerImpl,\n    Props<GCompanyBranch.Fragment> {}\n\nexport interface ICompanyBranchDropdownProps\n  extends Pick<\n      ISelectControlProps<GCompanyBranch.Fragment>,\n      'placeholder' | 'width'\n    > {}\n\nconst ClearIndicator = props => {\n  const {\n    getStyles,\n    innerProps: { ref, ...restInnerProps },\n  } = props\n  return (\n    <div\n      {...restInnerProps}\n      ref={ref}\n      style={getStyles('clearIndicator', props)}\n    >\n      <div style={{ padding: '0px 5px' }}>\n        <Trans>All</Trans>\n      </div>\n    </div>\n  )\n}\n\nexport const CompanyBranchDropdown: React.SFC<IProps> = ({\n  branches,\n  selectedBranch,\n  onSingleSelection,\n  selectedBranches,\n  onMultiSelection,\n  ...props\n}) => (\n  <SelectControl<GCompanyBranch.Fragment>\n    value={props.isMulti ? selectedBranches : selectedBranch}\n    placeholder={\n      props.isMulti ? i18n.t`Filter branches...` : i18n.t`Select a branch`\n    }\n    options={branches as GCompanyBranch.Fragment[]}\n    getOptionValue={RM.prop('id')}\n    formatOptionLabel={branch => <CompanyBranch branch={branch} />}\n    filterOption={(branch, rawInput) =>\n      branch.data.name\n        .toLocaleLowerCase()\n        .includes(rawInput.toLocaleLowerCase())\n    }\n    closeMenuOnSelect={!props.isMulti}\n    components={{\n      ClearIndicator,\n    }}\n    styles={{\n      clearIndicator: base => ({\n        ...base,\n        cursor: 'pointer',\n      }),\n    }}\n    onChange={selection => {\n      if (props.isMulti && onMultiSelection && Array.isArray(selection)) {\n        onMultiSelection(selection)\n      }\n      if (!props.isMulti && onSingleSelection) {\n        if (Array.isArray(selection)) {\n          onSingleSelection(RM.head(selection) || null)\n        } else {\n          onSingleSelection(selection || null)\n        }\n      }\n    }}\n    {...props}\n  />\n)\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { IconLine } from '../../../atoms/IconLine'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { CompanyBranchPicker } from '../../../organisms/CompanyBranchPicker'\n\ninterface IProps {\n  isMulti?: boolean\n  width?: number\n}\n\nexport const SettingsCompanyBranchPicker: React.FC<IProps> = ({\n  isMulti,\n  width,\n}) => {\n  const { settings } = useRoot()\n  return useObserver(() => (\n    <IconLine icon=\"store_mall_directory\">\n      <CompanyBranchPicker\n        selectedBranches={settings.branchId ? [settings.branchId] : undefined}\n        onSelectionChange={([branch]) => settings.selectBranch(branch)}\n        isMulti={isMulti}\n        isClearable={false}\n        getDropdownProps={() => ({ width })}\n      />\n    </IconLine>\n  ))\n}\n","import React from 'react'\n\nimport { CursorContainer } from '../atoms/CursorContainer'\nimport { GCompanyBranch } from '../graph/types'\n\ninterface ICompanyBranchProps {\n  branch: GCompanyBranch.Fragment\n  onClick?: () => void\n  short?: boolean\n  showBrand?: boolean\n}\n\nexport const CompanyBranch: React.SFC<ICompanyBranchProps> = ({\n  branch,\n  onClick,\n  short = false,\n  showBrand = true,\n}) => (\n  <CursorContainer cursor=\"pointer\" onClick={onClick}>\n    {short ? (\n      branch.name.substr(0, 8)\n    ) : (\n      <>\n        <span>{branch.name}</span>\n        {showBrand && <span>{` [${branch.brand.name}]`}</span>}\n      </>\n    )}\n  </CursorContainer>\n)\n","import styled from 'styled-components'\n\ntype TCursor = 'pointer' | 'arrow' | 'default'\n\nexport const CursorContainer = styled.div`\n  cursor: ${({ cursor = 'default' }: { cursor?: TCursor }) => cursor};\n`\n","import React from 'react'\n\nimport { SelectControlFlat } from '../atoms/SelectControlFlat'\nimport { GCompanyBranch } from '../graph/types'\nimport { ICompanyBranchPickerImpl } from '../organisms/CompanyBranchPicker'\nimport { Colors } from '../styling'\n\nexport const CompanyBranchFlatSelect: React.SFC<ICompanyBranchPickerImpl> = ({\n  branches,\n  selectedBranch,\n  selectedBranches,\n  textColor = Colors.black,\n  ...props\n}) => (\n  <SelectControlFlat<GCompanyBranch.Fragment>\n    items={branches}\n    selectedItem={selectedBranch}\n    selectedItems={selectedBranches}\n    textColor={textColor}\n    formatItem={item => <span title={item.brand.name}>{item.name}</span>}\n    {...props}\n  />\n)\n","import React, { createElement, HTMLAttributes } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { CanMutate } from '../atoms/CanMutate'\nimport { CanQuery } from '../atoms/CanQuery'\n\ninterface IPageLayoutItemProps extends HTMLAttributes<HTMLElement> {\n  route?: string\n  component: React.ComponentType\n  canQuery?: string\n  canMutate?: string\n}\n\nexport const PageLayoutItem: React.SFC<IPageLayoutItemProps> = ({\n  route,\n  component,\n  canQuery,\n  canMutate,\n  ...props\n}) => {\n  let layoutItem = route ? (\n    <Link to={route}>{createElement(component)}</Link>\n  ) : (\n    createElement(component)\n  )\n\n  if (canQuery) {\n    layoutItem = <CanQuery queryName={canQuery}>{layoutItem}</CanQuery>\n  }\n  if (canMutate) {\n    layoutItem = <CanMutate mutationName={canMutate}>{layoutItem}</CanMutate>\n  }\n  return <div {...props}>{layoutItem}</div>\n}\n","import React from 'react'\nimport { Checkbox, FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport { Colors, Radiuses, Spacing } from '../styling'\n\ninterface IProps extends React.InputHTMLAttributes<never> {\n  field: FieldType\n  label?: string\n}\n\nconst CheckboxStyled = styled(Checkbox)`\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  background-color: ${Colors.white};\n  border: 1px solid ${Colors.greyMiddle};\n  padding: 1rem;\n  border-radius: ${Radiuses.TextComponent};\n  display: inline-block;\n  position: relative;\n  margin: ${Spacing.MarginAroundFormComponents};\n  outline: none;\n  &:checked {\n    background-color: ${Colors.white};\n    border: 1px solid ${Colors.greyMiddle};\n  }\n  &:checked:after {\n    content: '\\\\2714';\n    font-size: 2rem;\n    position: absolute;\n    top: -0.5rem;\n    left: 0.1rem;\n    color: ${Colors.greyDark};\n    overflow: hidden;\n  }\n`\n\nconst LabelStyled = styled.div`\n  display: inline-block;\n  margin: 0.4rem 0 0 0.5rem;\n  vertical-align: top;\n`\n\nexport const FormInputCheckbox: React.SFC<IProps> = ({\n  field,\n  label,\n  defaultValue,\n  children,\n  ...inputProps\n}) => (\n  <>\n    <CheckboxStyled\n      field={field}\n      checked={Boolean(defaultValue)}\n      {...inputProps}\n    />\n    {label && <LabelStyled>{label}</LabelStyled>}\n  </>\n)\n","import moment from 'moment'\n\nconst cs = require('moment/locale/cs')\n\nmoment.updateLocale('cs', cs)\n\nexport default moment\n","import 'react-datepicker/dist/react-datepicker.css'\n\nimport React from 'react'\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker'\nimport { Field, FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport moment from '../helpers/moment'\n\ninterface IProps\n  extends Omit<ReactDatePickerProps, 'onChange' | 'selected' | 'minDate'> {\n  field: FieldType\n  defaultValue?: Date\n  inputWidth?: string\n  minDate?: Date\n}\n\nconst FormInputDateContainer = styled.div`\n  & .react-datepicker-wrapper,\n  .react-datepicker__input-container,\n  .react-datepicker__input-container input {\n    width: ${({ width = '6rem' }: { width?: string }) => width};\n  }\n`\nFormInputDateContainer.displayName = 'FormInputDateContainer'\n\nexport const FormInputDate: React.SFC<IProps> = ({\n  field,\n  defaultValue,\n  inputWidth,\n  minDate,\n  ...props\n}) => (\n  <FormInputDateContainer width={inputWidth}>\n    <Field\n      field={field}\n      defaultValue={defaultValue}\n      render={fieldApi => (\n        <DatePicker\n          selected={moment(fieldApi.value || new Date())}\n          onChange={date => fieldApi.setValue(date)}\n          minDate={minDate === undefined ? undefined : moment(minDate)}\n          {...props}\n        />\n      )}\n    />\n  </FormInputDateContainer>\n)\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\nexport const FlexRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  border-bottom: 1px solid ${Colors.greyMiddle};\n  padding: 0.1rem 0 0.1rem 0;\n`\n","import React from 'react'\nimport { Route, RouteComponentProps, Switch } from 'react-router'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { SecureRoute } from '../../../routes/SecureRoute'\nimport { BranchPreferencesPage } from '../pages/BranchPreferencesPage'\n\ninterface IProps extends RouteComponentProps<{}> {}\n\nexport const BranchPreferencesRoutes: React.SFC<IProps> = ({ match }) => (\n  <Switch>\n    <SecureRoute\n      exact={true}\n      path={match.path}\n      component={BranchPreferencesPage}\n    />\n    <Route component={NotFoundPage} />\n  </Switch>\n)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\n\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { SettingsCompanyBranchPicker } from '../../settings/organisms/SettingsCompanyBranchPicker'\nimport { InvoicePreferencesForm } from '../organism/InvoicePreferencesForm'\nimport { StoppageForm } from '../organism/StoppageForm'\n\ninterface IPreferencesPageProps {}\n\nexport const BranchPreferencesPage: React.SFC<\n  IPreferencesPageProps\n> = props => (\n  <FullPageLayout pageTitle={i18n.t`Branch preferences`}>\n    <Card>\n      <SettingsCompanyBranchPicker />\n      <Headline>\n        <Trans id=\"branch.preferences.stoppage\">Stoppage</Trans>\n      </Headline>\n      <StoppageForm />\n\n      <Headline>\n        <Trans>Change of invoice preferences</Trans>\n      </Headline>\n      <InvoicePreferencesForm />\n    </Card>\n  </FullPageLayout>\n)\n","import React from 'react'\nimport { Form } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { SaveInvoicePreferencesButton } from './SaveInvoicePreferencesButton'\n\ninterface IInvoicePreferencesFormProps {}\n\nconst SaveButtonContainer = styled.div`\n  margin-top: 1rem;\n  width: 15rem;\n`\n\nexport const InvoicePreferencesForm: React.SFC<\n  IInvoicePreferencesFormProps\n> = props => (\n  <Form>\n    <FormInputTextBox field=\"account\" placeholder=\"Název firmy\" />\n    <br />\n    <FormInputTextBox field=\"number\" placeholder=\"IČ\" />\n    <FormInputTextBox field=\"vatIdent\" placeholder=\"DIČ\" />\n\n    <SaveButtonContainer>\n      <SaveInvoicePreferencesButton />\n    </SaveButtonContainer>\n  </Form>\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nexport const SaveInvoicePreferencesButton: React.SFC = props => (\n  <TouchButton text={i18n.t`Save invoice preferences`} color={Colors.green} />\n)\n","import React from 'react'\nimport { Form } from 'react-form'\n\nimport { FormInputCheckbox } from '../../../atoms/FormInputCheckbox'\nimport { i18n } from '../../../i18n'\n\ninterface IStoppageFormProps {}\n\nexport const StoppageForm: React.SFC<IStoppageFormProps> = props => (\n  <Form>\n    <FormInputCheckbox\n      field=\"onlyPersonalPickup\"\n      label={i18n.t`We are not delivering, only take away.`}\n    />\n    <br />\n    <FormInputCheckbox\n      field=\"stoppage\"\n      label={i18n.t`Completely stop all orders.`}\n    />\n  </Form>\n)\n","import React from 'react'\nimport { Route, RouteComponentProps, Switch } from 'react-router'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { SecureRoute } from '../../../routes/SecureRoute'\nimport { BusinessHoursPage } from '../pages/BusinessHoursPage'\n\ninterface IProps extends RouteComponentProps<{}> {}\n\nexport const BusinessHoursRoutes: React.SFC<IProps> = ({ match }) => (\n  <Switch>\n    <SecureRoute exact={true} path={match.path} component={BusinessHoursPage} />\n    <Route component={NotFoundPage} />\n  </Switch>\n)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { SettingsCompanyBranchPicker } from '../../../segments/settings/organisms/SettingsCompanyBranchPicker'\nimport { SpecificBusinessHourForm } from '../organisms/SpecificBusinessHourForm'\nimport { SpecificBusinessHours } from '../organisms/SpecificBusinessHours'\n\nexport const BusinessHoursPage: React.SFC = () => (\n  <FullPageLayout pageTitle={i18n.t`Business hours`} useBackButton={true}>\n    <Card>\n      <SettingsCompanyBranchPicker />\n      {/* <Headline>Pravidelné otevírací hodiny</Headline>\n      <RegularOpeningHours /> */}\n\n      <Headline>\n        <Trans>Specific business hours</Trans>\n      </Headline>\n      <SpecificBusinessHours />\n\n      <CanMutate mutationName=\"addSpecialBusinessHour\">\n        <Headline>\n          <Trans>Add specific business hour</Trans>\n        </Headline>\n        <SpecificBusinessHourForm />\n      </CanMutate>\n    </Card>\n  </FullPageLayout>\n)\n","import { setHours, setMinutes } from 'date-fns'\nimport { Observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Form } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputDate } from '../../../atoms/FormInputDate'\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { FormInputTimeSpan } from '../../../atoms/FormInputTimeSpan'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { fullDateFormat } from '../../../helpers/formats'\nimport { i18n } from '../../../i18n'\nimport { FormSubmit } from '../../../molecules/FormSubmit'\nimport {\n  ESpecificHourMode,\n  ISpecificFormData,\n} from '../models/BusinessHoursModel'\nimport { SpecificModeSelector } from '../molecules/SpecificModeSelector'\n\nconst DateContainer = styled.div`\n  display: inline-block;\n  width: 13rem;\n  margin-left: 1rem;\n`\n\nconst FormContainer = styled.div`\n  display: inline-block;\n  width: 16rem;\n  min-height: 6rem;\n  margin: 0rem 0 0 1rem;\n  vertical-align: top;\n`\n\nexport const SpecificBusinessHourForm: React.FC = props => {\n  const {\n    settings: { businessHours },\n  } = useRoot()\n  return (\n    <Form\n      onSubmit={businessHours.submitSpecificHour}\n      defaultValues={getDefaultValues()}\n    >\n      <>\n        <DateContainer>\n          <FormInputDate\n            field=\"date\"\n            dateFormat={fullDateFormat}\n            minDate={new Date()}\n            inputWidth=\"12rem\"\n          />\n        </DateContainer>\n\n        <FormContainer>\n          <SpecificModeSelector />\n          <br />\n          <Observer>\n            {() =>\n              businessHours.specificMode === ESpecificHourMode.TIMESPAN ? (\n                <FormInputTimeSpan fieldFrom=\"openAt\" fieldTo=\"closeAt\" />\n              ) : (\n                <FormInputTextBox\n                  field=\"note\"\n                  placeholder={i18n.t`Closing reason`}\n                  inputWidth={13}\n                />\n              )\n            }\n          </Observer>\n        </FormContainer>\n\n        <FormSubmit width=\"9rem\">{i18n.t`Add`}</FormSubmit>\n      </>\n    </Form>\n  )\n}\n\nfunction getDefaultValues(): Partial<ISpecificFormData> {\n  const now = new Date()\n  return {\n    date: now,\n    openAt: setHours(setMinutes(now, 0), 9),\n    closeAt: setHours(setMinutes(now, 0), 20),\n  }\n}\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport { FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputTime } from './FormInputTime'\n\ninterface IFormInputTimeSpanProps {\n  fieldFrom?: FieldType\n  fieldTo?: FieldType\n}\n\nconst LabelStyled = styled.div`\n  margin: 0.5rem;\n  display: inline-block;\n`\n\nconst LabelToStyled = styled(LabelStyled)`\n  margin-left: 2rem;\n`\n\nexport const FormInputTimeSpan: React.SFC<IFormInputTimeSpanProps> = ({\n  fieldFrom,\n  fieldTo,\n}) => (\n  <>\n    {fieldFrom && (\n      <>\n        <LabelStyled>\n          <Trans id=\"input.timespan.from\">from</Trans>\n        </LabelStyled>\n        <FormInputTime field={fieldFrom} />\n      </>\n    )}\n    {fieldTo && (\n      <>\n        <LabelToStyled>\n          <Trans id=\"input.timespan.to\">to</Trans>\n        </LabelToStyled>\n        <FormInputTime field={fieldTo} />\n      </>\n    )}\n  </>\n)\n","import 'react-datepicker/dist/react-datepicker.css'\n\nimport React from 'react'\nimport DatePicker from 'react-datepicker'\nimport { Field, FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport moment from '../helpers/moment'\n\ninterface IFormInputTimeProps {\n  field: FieldType\n  timeIntervals?: number\n  timeFormat?: string\n}\n\nconst FormInputTypeContainer = styled.div`\n  display: inline-block;\n  & .react-datepicker__input-container,\n  .react-datepicker__input-container input {\n    width: inherit;\n  }\n  & .react-datepicker-wrapper {\n    width: 3rem;\n  }\n  &\n    .react-datepicker__time-container\n    .react-datepicker__time\n    .react-datepicker__time-box\n    ul.react-datepicker__time-list {\n    padding-left: unset;\n    padding-right: unset;\n    width: 100px;\n  }\n`\nFormInputTypeContainer.displayName = 'FormInputTypeContainer'\n\nexport const FormInputTime: React.SFC<IFormInputTimeProps> = ({\n  field,\n  timeIntervals = 30,\n  timeFormat = 'LT',\n}) => (\n  <FormInputTypeContainer>\n    <Field\n      field={field}\n      render={fieldApi => (\n        <DatePicker\n          selected={moment(fieldApi.value || new Date())}\n          onChange={time => fieldApi.setValue(time)}\n          showTimeSelect={true}\n          showTimeSelectOnly={true}\n          timeIntervals={timeIntervals}\n          dateFormat={timeFormat}\n          timeFormat={timeFormat}\n        />\n      )}\n    />\n  </FormInputTypeContainer>\n)\n","import { i18nMark } from '@lingui/react'\nimport React from 'react'\n\nimport { SelectControlFlat } from '../../../atoms/SelectControlFlat'\nimport { i18n } from '../../../i18n'\nimport { WithSettings } from '../../settings/atoms/WithSettings'\nimport { ESpecificHourMode } from '../models/BusinessHoursModel'\n\nconst labels = {\n  [ESpecificHourMode.TIMESPAN]: i18nMark('Open between'),\n  [ESpecificHourMode.FULLDAY]: i18nMark('Closed'),\n}\n\nexport const SpecificModeSelector: React.SFC = () => (\n  <WithSettings\n    observe={true}\n    render={({ businessHours }) => (\n      <SelectControlFlat<ESpecificHourMode>\n        items={[ESpecificHourMode.TIMESPAN, ESpecificHourMode.FULLDAY]}\n        selectedItem={businessHours.specificMode as ESpecificHourMode}\n        formatItem={mode => i18n._(labels[mode])}\n        onSingleSelection={(mode: ESpecificHourMode) =>\n          businessHours.changeSpecificMode(mode)\n        }\n      />\n    )}\n  />\n)\n","import React from 'react'\n\nimport { WithRoot } from '../../../atoms/WithRoot'\nimport { GSpecificBusinessHour } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { SpecificBusinessHourLine } from '../molecules/SpecificBusinessHourLine'\nimport { QuerySpecificBusinessHours } from './SpecificBusinessHours.graphql'\n\nconst sortByDate = RM.sort<GSpecificBusinessHour.Fragment>(\n  // @ts-ignore Fix typing\n  RM.ascend(RM.or(RM.prop('specificDate'), RM.not)),\n)\n\nexport const SpecificBusinessHours: React.SFC = props => (\n  <WithRoot\n    render={({ settings }) => (\n      <QuerySpecificBusinessHours\n        {...settings.queryProps}\n        fetchPolicy=\"cache-and-network\"\n        renderFragment={({ businessHours }) =>\n          sortByDate(businessHours).map(bsHour => (\n            <SpecificBusinessHourLine\n              key={bsHour.id}\n              bsHour={bsHour}\n              onDelete={() =>\n                settings.businessHours.deleteSpecificHour(bsHour.id)\n              }\n            />\n          ))\n        }\n      />\n    )}\n  />\n)\n","import React from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRow } from '../../../atoms/FlexRow'\nimport { GSpecificBusinessHour } from '../../../graph/types'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\n\ninterface ISpecificBusinessHourLineProps {\n  bsHour: GSpecificBusinessHour.Fragment\n  onDelete(): void\n}\n\nexport const SpecificBusinessHourLine: React.SFC<\n  ISpecificBusinessHourLineProps\n> = ({ bsHour, onDelete }) => (\n  <FlexRow>\n    <FlexColumn fixedWidth={true}>\n      <CanMutate mutationName=\"destroyBusinessHour\">\n        <TouchButtonDelete\n          onDelete={onDelete}\n          confirmText={`${i18n.t`Really remove specific business hour ${\n            bsHour.specificDateLocalized\n          }?`}`}\n        />\n      </CanMutate>\n    </FlexColumn>\n    <FlexColumn fixedWidth={true} width=\"14rem\">\n      {bsHour.specificDateLocalized}\n    </FlexColumn>\n    <FlexColumn widthGrowIndex={1}>{formatLineTime(bsHour)}</FlexColumn>\n  </FlexRow>\n)\n\nfunction formatLineTime(bsHour: GSpecificBusinessHour.Fragment) {\n  if (bsHour.closed) {\n    return bsHour.closedNote\n  }\n  return `${bsHour.openAt} - ${bsHour.closeAt}`\n}\n","import React from 'react'\n\nimport { PageLayout } from '../../../molecules/PageLayout'\nimport { PageLayoutItem } from '../../../molecules/PageLayoutItem'\n\nimport { BusinessHoursButton } from '../organisms/BusinessHoursButton'\nimport { MenuCategoryButton } from '../organisms/MenuCategoryButton'\nimport { MenuRecipeButton } from '../organisms/MenuRecipeButton'\nimport { MenuStockButton } from '../organisms/MenuStockButton'\nimport { MenuStockDepositButton } from '../organisms/MenuStockDepositButton'\nimport { ZonesMenuButton } from '../organisms/ZonesMenuButton'\n\ninterface ISettingsPageProps {}\n\nfunction getLayout() {\n  return [\n    { i: 'BusinessHours', x: 0, y: 1, w: 2, h: 2 },\n    { i: 'Preferences', x: 2, y: 1, w: 2, h: 2 },\n    { i: 'ZonesMenu', x: 4, y: 1, w: 2, h: 2 },\n    { i: 'MenuRecipe', x: 0, y: 3, w: 2, h: 2 },\n    { i: 'MenuCategory', x: 2, y: 3, w: 2, h: 2 },\n    { i: 'MenuStock', x: 4, y: 3, w: 2, h: 2 },\n    { i: 'MenuStockDeposit', x: 6, y: 3, w: 2, h: 2 },\n  ]\n}\n\nexport const SettingsPage: React.SFC<ISettingsPageProps> = props => (\n  <PageLayout layouts={getLayout()}>\n    <PageLayoutItem\n      key=\"BusinessHours\"\n      route=\"/settings/businesshours\"\n      component={BusinessHoursButton}\n      canQuery=\"businessHours\"\n    />\n    {/* <PageLayoutItem\n      key=\"Preferences\"\n      route=\"/settings/preferences\"\n      component={PreferencesButton}\n    /> */}\n    <PageLayoutItem\n      key=\"MenuRecipe\"\n      route=\"/settings/menu/recipe\"\n      component={MenuRecipeButton}\n      canQuery=\"recipes\"\n    />\n    <PageLayoutItem\n      key=\"MenuCategory\"\n      route=\"/settings/menu/category\"\n      component={MenuCategoryButton}\n      canQuery=\"wareCategories\"\n    />\n    <PageLayoutItem\n      key=\"MenuStock\"\n      route=\"/settings/menu/stock\"\n      component={MenuStockButton}\n      canQuery=\"stockItems\"\n    />\n    <PageLayoutItem\n      key=\"MenuStockDeposit\"\n      route=\"/settings/menu/stock/deposit\"\n      component={MenuStockDepositButton}\n      canMutate=\"changeAmountStockItem\"\n    />\n    <PageLayoutItem\n      key=\"ZonesMenu\"\n      route=\"/settings/zones\"\n      component={ZonesMenuButton}\n      canQuery=\"zones\"\n    />\n  </PageLayout>\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nexport const BusinessHoursButton: React.SFC = props => (\n  <TouchButton\n    text={i18n.t`Business hours`}\n    iconName=\"av_timer\"\n    color={Colors.red}\n  />\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nexport const MenuCategoryButton: React.SFC = props => (\n  <TouchButton\n    text={i18n.t`Categories`}\n    iconName=\"folder\"\n    color={Colors.turquoise}\n  />\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nexport const MenuRecipeButton: React.SFC = props => (\n  <TouchButton\n    text={i18n.t`Recipes`}\n    iconName=\"insert_drive_file\"\n    color={Colors.turquoise}\n  />\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nexport const MenuStockButton: React.SFC = props => (\n  <TouchButton\n    text={i18n.t`Stock overview`}\n    iconName=\"assignment\"\n    color={Colors.turquoise}\n  />\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\nexport const MenuStockDepositButton: React.SFC = props => (\n  <TouchButton\n    text={i18n.t`Stock deposit`}\n    iconName=\"open_in_browser\"\n    color={Colors.turquoise}\n  />\n)\n","import React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IZonesMenuButtonProps {}\n\nexport const ZonesMenuButton: React.SFC<IZonesMenuButtonProps> = props => (\n  <TouchButton\n    text={i18n.t`Delivery zones`}\n    iconName=\"edit_location\"\n    color={Colors.violet}\n  />\n)\n"],"sourceRoot":""}