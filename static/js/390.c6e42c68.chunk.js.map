{"version":3,"sources":["atoms/VerticalGap.tsx","segments/settings/organisms/UserMenuLanguage.tsx","segments/settings/pages/UserMenuPage.tsx"],"names":["VerticalGap","styled","div","size","sizeUnit","displayName","UserMenuLanguage","useRoot","auth","user","useQUserMenuLanguages","getStash","loading","refetch","useMUserMenuLanguage","updateUserLanguage","React","useState","selectedLanguage","selectLanguage","languages","data","useEffect","langCode","find","RM","propEq","language","isUpdating","setUpdating","useObserver","Sizer","width","margin","SelectControl","isLoading","options","ARRAY_EMPTY","getOptionLabel","prop","getOptionValue","value","onChange","lang","a","async","TouchButton","onClick","userId","enum","setLanguage","rawCode","color","Colors","green","disabled","UserMenuPage","FullPageLayout","pageTitle","i18n","Card","Headline"],"mappings":"2OAOO,IAAMA,E,MAAcC,EAAOC,IAAV,KACZ,oBAAGC,YAAH,MAAU,EAAV,MAAaC,gBAAb,MAAwB,MAAxB,kBACLD,GADK,OACEC,MAGdJ,EAAYK,YAAc,e,0NCUbC,EAAqC,WAAO,IAAD,EAC/BC,cAAfC,EAD8C,EAC9CA,KAAMC,EADwC,EACxCA,KADwC,EAEfC,eAA/BC,EAF8C,EAE9CA,SAAUC,EAFoC,EAEpCA,QAASC,EAF2B,EAE3BA,QAF2B,EAGzBC,eAAtBC,EAH+C,sBAKXC,IAAMC,SAAuB,MALlB,mBAK/CC,EAL+C,KAK7BC,EAL6B,KAOhDC,EAAYT,GAAS,SAAAU,GAAI,OAAIA,EAAKD,aAExCJ,IAAMM,WAAU,WACd,GAAyB,OAArBJ,GAA6BE,EAAW,CAC1C,IAAMG,EAAWH,EAAUI,KAAKC,IAAGC,OAAO,UAAWjB,EAAKkB,WACtDJ,GACFJ,EAAeI,MAGlB,CAACL,EAAkBE,EAAWX,IAhBqB,MAkBpBO,IAAMC,UAAS,GAlBK,mBAkB/CW,EAlB+C,KAkBnCC,EAlBmC,KAoBtD,OAAOC,aAAY,kBACjB,kBAACC,EAAA,EAAD,CAAOC,MAAO,GAAIC,OAAO,QACvB,kBAACC,EAAA,EAAD,CACEC,UAAWvB,EACXwB,QAAShB,GAAaiB,IACtBC,eAAgBb,IAAGc,KAAK,QACxBC,eAAgBf,IAAGc,KAAK,QACxBE,MAAOvB,EACPwB,SAAU,SAAMC,GAAN,SAAAC,EAAAC,OAAA,gDACJF,GACFxB,EAAewB,GAFT,wCAMZ,kBAAC3C,EAAA,EAAD,MACA,kBAAC8C,EAAA,EAAD,CACEC,QAAS,oBAAAH,EAAAC,OAAA,oDACH3B,EADG,wBAELW,GAAY,GAFP,WAAAe,EAAA,MAGoB7B,EAAmB,CAC1CiC,OAAQxC,EAAKwC,OACbL,KAAMzB,EAAiB+B,QALpB,oDAAAL,EAAA,MAQG/B,KARH,OASHJ,EAAKyC,YAAYhC,EAAiBiC,SAT/B,OAaLtB,GAAY,GAbP,uCAgBTuB,MAAOC,IAAOC,MACdC,SAAU3B,GAETA,EACC,kBAAC,QAAD,6BAEA,kBAAC,QAAD,8BC1DK4B,UAbgB,WAC7B,OACE,kBAACC,EAAA,EAAD,CAAgBC,UAAWC,EAAA,EAAK,EAAD,SAC7B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,QAAD,8BAEF,kBAAC,EAAD","file":"static/js/390.c6e42c68.chunk.js","sourcesContent":["import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import { Trans } from '@lingui/macro'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { Sizer } from '../../../atoms/Sizer'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport {\n  QUserMenuLanguagesLanguages,\n  useMUserMenuLanguage,\n  useQUserMenuLanguages,\n} from '../../../graph/generated'\nimport { ARRAY_EMPTY } from '../../../helpers/form'\nimport { RM } from '../../../tools/ramda'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IProps {}\n\ntype TLang = QUserMenuLanguagesLanguages\n\nexport const UserMenuLanguage: React.FC<IProps> = () => {\n  const { auth, user } = useRoot()\n  const { getStash, loading, refetch } = useQUserMenuLanguages()\n  const [updateUserLanguage] = useMUserMenuLanguage()\n\n  const [selectedLanguage, selectLanguage] = React.useState<Maybe<TLang>>(null)\n\n  const languages = getStash(data => data.languages)\n\n  React.useEffect(() => {\n    if (selectedLanguage === null && languages) {\n      const langCode = languages.find(RM.propEq('rawCode', user.language))\n      if (langCode) {\n        selectLanguage(langCode)\n      }\n    }\n  }, [selectedLanguage, languages, user])\n\n  const [isUpdating, setUpdating] = React.useState(false)\n\n  return useObserver(() => (\n    <Sizer width={20} margin=\"1rem\">\n      <SelectControl<TLang>\n        isLoading={loading}\n        options={languages || ARRAY_EMPTY}\n        getOptionLabel={RM.prop('code')}\n        getOptionValue={RM.prop('enum')}\n        value={selectedLanguage}\n        onChange={async lang => {\n          if (lang) {\n            selectLanguage(lang as TLang)\n          }\n        }}\n      />\n      <VerticalGap />\n      <TouchButton\n        onClick={async () => {\n          if (selectedLanguage) {\n            setUpdating(true)\n            const updateData = await updateUserLanguage({\n              userId: auth.userId!,\n              lang: selectedLanguage.enum,\n            })\n            if (updateData) {\n              await refetch()\n              user.setLanguage(selectedLanguage.rawCode)\n              // ? Not possible to do because new language won't be loaded yet and message would be shown with old language\n              // // enqueueSuccess(i18n.t`Language has been changed`)\n            }\n            setUpdating(false)\n          }\n        }}\n        color={Colors.green}\n        disabled={isUpdating}\n      >\n        {isUpdating ? (\n          <Trans>Changing language...</Trans>\n        ) : (\n          <Trans>Change language</Trans>\n        )}\n      </TouchButton>\n    </Sizer>\n  ))\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\n\nimport { Card } from '../../../atoms/Card'\nimport { Headline } from '../../../atoms/Headline'\nimport { i18n } from '../../../i18n'\nimport { FullPageLayout } from '../../../molecules/FullPageLayout'\nimport { UserMenuLanguage } from '../organisms/UserMenuLanguage'\n\nconst UserMenuPage: React.FC = () => {\n  return (\n    <FullPageLayout pageTitle={i18n.t`User`}>\n      <Card>\n        <Headline>\n          <Trans>Application language</Trans>\n        </Headline>\n        <UserMenuLanguage />\n      </Card>\n    </FullPageLayout>\n  )\n}\n\nexport default UserMenuPage\n"],"sourceRoot":""}