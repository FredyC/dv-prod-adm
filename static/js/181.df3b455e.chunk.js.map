{"version":3,"sources":["molecules/PageLayoutFullHeightItem.tsx","atoms/FlexRowSingle.tsx","atoms/VerticalGap.tsx","atoms/ScrollArea.tsx","atoms/BaseMap.tsx","atoms/CardListTitle.tsx","atoms/DragHandle.tsx","atoms/ConfirmDialog.tsx","atoms/FormInputSelect.tsx","segments/zones/hooks/useZoneId.ts","segments/zones/hooks/useZoneRouteControl.tsx","segments/zones/atoms/ZonePriceInput.tsx","segments/zones/molecules/ZoneColorSelector.tsx","segments/zones/atoms/ZonePlaceholderInput.tsx","segments/zones/molecules/ZoneFormPriceRange.tsx","segments/zones/molecules/ZoneFormContent.tsx","segments/zones/molecules/ZoneFormControls.tsx","segments/zones/organisms/ZoneListLoader.graphql.ts","segments/zones/organisms/ZoneListLoader.tsx","segments/zones/organisms/ZoneFormPanel.tsx","molecules/MapCompanyBranchMarker.tsx","segments/zones/atoms/ZoneMapArea.tsx","segments/zones/atoms/ZoneMapEditableArea.tsx","segments/zones/hooks/useZoneModel.ts","segments/zones/organisms/ZoneMapControl.tsx","segments/zones/molecules/CreateZoneButton.tsx","segments/zones/atoms/ZoneListCard.tsx","segments/zones/molecules/ZoneList.tsx","segments/zones/organisms/ZoneListControl.tsx","segments/zones/molecules/ZoneFIlterBranch.tsx","segments/zones/molecules/ZoneFilterBrand.tsx","segments/zones/organisms/ZoneFilter.tsx","segments/zones/organisms/ZoneMenuPanel.tsx","segments/zones/pages/ZonePageLayout.tsx","segments/zones/routes/ZoneMenuRoutes.tsx"],"names":["FullHeightDiv","styled","div","_templateObject","props","undefined","widthInColumns","Spacing","LayoutGridCellMargin","column","row","FullHeightDivStyled","_templateObject2","PageLayoutFullHeightItem","_ref","children","_ref$row","_ref$column","_ref$widthInColumns","_ref$withScrollArea","withScrollArea","scrollAreaId","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_atoms_ScrollArea__WEBPACK_IMPORTED_MODULE_3__","id","FlexRowSingle","_ref$justify","justify","VerticalGap","_ref$size","size","_ref$sizeUnit","sizeUnit","concat","displayName","ScrollArea","libraries","React","createContext","BaseMap","model","_React$useState","useState","_React$useState2","Object","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isLoaded","setLoaded","options","streetViewControl","mapTypeControl","fullscreenControl","react__WEBPACK_IMPORTED_MODULE_4___default","_react_google_maps_api__WEBPACK_IMPORTED_MODULE_1__","googleMapsApiKey","language","region","version","onLoad","mobx_react__WEBPACK_IMPORTED_MODULE_3__","zoom","center","onCenterChanged","updatePosition","onZoomChanged","updateZoom","setMapRef","mapContainerStyle","borderRadius","Radiuses","Card","overflow","height","useGoogleMap","map","useContext","MapContext","Error","CardListTitle","h2","Colors","greyLight","DragHandleContainerStyled","DragHandle","SortableHandle","_Icon__WEBPACK_IMPORTED_MODULE_4__","iconName","__webpack_require__","d","__webpack_exports__","ConfirmDialog","react__WEBPACK_IMPORTED_MODULE_0__","useEffect","isShow","window","confirm","confirmText","onConfirm","onCancel","FormInputSelect","_React$Component","_getPrototypeOf2","_this","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","_len","arguments","length","args","Array","_key","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","apply","validate","value","isRequired","_i18n__WEBPACK_IMPORTED_MODULE_10__","_","0","validatioName","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","key","fieldApi","_this$props","isMulti","getOptionValue","defaultValue","selection","isSelected","isArray","item","includes","RM","F","filter","onChange","selectedOptions","setValue","find","option","_this2","_this$props2","field","_this$props2$fieldIsP","fieldIsPure","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_7___default","react_form__WEBPACK_IMPORTED_MODULE_8__","pure","_SelectControl__WEBPACK_IMPORTED_MODULE_11__","assign","getControlProps","onFocus","setTouched","styles","control","base","Boolean","error","D_workspace_deepvision_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","borderColor","Component","defaultProps","getItemId","prop","useZoneId","useRouterContext","match","params","zoneId","useZoneRouteControl","_useRoot","useRoot","user","zoneModel","zone","history","getRouteToZone","routeToZoneEdit","editZoneId","panToZone","canQuery","push","routeToZoneList","LabelStyled","FormInputTextBoxStyled","FormInputTextBox","FormInputTextBoxDeliveryStyled","_templateObject3","blue","DeliveryContainer","_templateObject4","PriceRangeContainer","_templateObject5","VerticalLine","_templateObject6","validatePrice","trim","Number","isNaN","parseFloat","i18n","ZonePriceInput","forwardRef","ref","label","isDeliveryPrice","_ref$autoFocus","autoFocus","react_default","ColorOption","ZoneColorSelector_templateObject","color","white","QueryZoneColors","buildQuery","ZoneColorsQuery","ZoneColorSelector","_ref2","_ref2$field","render","_ref3","zoneColors","toConsumableArray","width","objectSpread","padding","margin","menu","maxWidth","head","formatOptionLabel","zoneColor","code","ZonePlaceholderInput_templateObject","FormInputForPlaceholderStyled","FormInputStyled","ZonePlaceholderInput_templateObject2","Container","ZonePlaceholderInput_templateObject3","ZonePlaceholderInput","display","ZonePlaceholderInput_LabelStyled","disabled","placeholder","AddButtonContainer","ZoneFormPriceRange_templateObject","RemoveButtonContainer","ZoneFormPriceRange_templateObject2","ZoneFormPriceRange","Fragment","values","idx","react","ZonePlaceholderInput_ZonePlaceholderInput","TouchButtonDelete","onDelete","removeValue","es","formApi","TouchButton","submitting","ButtonHeight","DefaultSizeUnit","onClick","addValue","price","toPrice","ZoneFormContentStyled","ZoneFormContent_templateObject","Middle","black","DescriptionUnderHeadline","ZoneFormContent_templateObject2","greyDark","ZoneFormContent","IconLine","icon","validateIsRequired","ZoneColorSelector_ZoneColorSelector","FormInputCheckbox","name","toLocaleLowerCase","_lingui_react","components","Headline","component","ZoneFormControls","isSubmitting","isModified","onGoBack","onSave","FlexColumn","widthGrowIndex","greyMiddle","text","CanMutate","mutationName","green","ZonesQuery","gql","ZoneListLoader_graphql_templateObject","FZoneFragmentDoc","QueryZones","ZoneListContext","ZoneListLoader","observer","branches","branchFilterPredicate","Provider","fetchPolicy","variables","branchesId","renderLoading","zones","loading","useZoneList","DeleteButtonContainer","ZoneFormPanel_templateObject","ZoneFormPanel","zoneList","_useState","_useState2","slicedToArray","setModified","formApiRef","useRef","_useSnackBar","useSnackBar","enqueueError","enqueueSuccess","_useMZoneUpdate","useMZoneUpdate","zoneUpdate","onSubmit","useCallback","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","getZoneVariables","sent","stop","_x","_callee2","_context2","destroyZone","useDisposable","reaction","currentZonePoints","propEq","clearZonePoints","defaultValues","formState","logDebug","current","ZoneFormControls_ZoneFormControls","submitForm","ZoneFormContent_ZoneFormContent","index_es","when","handleOk","handleCancel","Loading","BranchNameStyled","MapCompanyBranchMarker_templateObject","isActive","css","MapCompanyBranchMarker_templateObject2","MapCompanyBranchMarker","branch","_ref$isActive","lib","getPixelPositionOffset","x","y","mapPaneName","OverlayView","MARKER_LAYER","position","gpsToLatLng","gps","ZoneMapArea","onAreaFocus","e","points","priority","path","fillColor","fillOpacity","strokeWeight","zIndex","editable","draggable","onDblClick","ZoneMapEditableArea","polygonRef","listenersRef","onAreaChange","getPath","getArray","latLngToGps","polygon","addListener","onUnmount","onClear","forEach","lis","remove","onDragEnd","useZoneModel","ZoneMapControl","companyBranchId","hasBranchFilter","branchFilterId","renderBranchLabel","MapCompanyBranchMarker_MapCompanyBranchMarker","areaProps","geoPolygon","companyBranch","enabled","ZoneMapEditableArea_ZoneMapEditableArea","updateZonePoints","ZoneMapArea_ZoneMapArea","CreateZoneButton","createZone","turquoise","textNextToIcon","ZoneNameStyled","ZoneListCard_templateObject","ZoneDescriptionStyled","ZoneListCard_templateObject2","ZoneFlexRowStyled","ZoneListCard_templateObject3","ZoneListCard","SortableElement","onEdit","fixedWidth","SizerButton","ZoneListContainerStyled","SortableContainer","ZoneList_templateObject","sortZones","R","groupByBranch","ZoneList","output","onSortEnd","onZoneEdit","renderZone","index","collection","sorted","oldIndex","newIndex","changeZonePriority","grouped","branchZones","renderBranch","useDragHandle","lockAxis","ZoneListControl","react_content_loader_es","primaryOpacity","secondaryOpacity","brand","ZoneList_ZoneList","zoneFilterPredicate","root","filterBranches","ZoneFilterBranch","selectedBranch","onSelection","CompanyBranchDropdown","onSingleSelection","isClearable","ZoneFilterBrand","brands","selectedBrand","SelectControl","getOptionLabel","isSearchable","ZoneFilter","getBrandBranches","pathEq","autorun","setBranchFilter","singleBrand","setBrandFilter","ZoneFilterBrand_ZoneFilterBrand","clearBrandFilter","ZoneFIlterBranch_ZoneFilterBranch","clearBranchFilter","ZoneMenuContainer","ZoneMenuPanel_templateObject","FixedHeaderContainer","ZoneMenuPanel_templateObject2","ScrollAreaContainer","ZoneMenuPanel_templateObject3","ZoneMenuPanel","ZoneListControl_ZoneListControl","ZonePageLayout","isEditing","PageLayout","pageTitle","useBackButton","backRoute","ZoneFormPanel_ZoneFormPanel","ZoneMenuPanel_ZoneMenuPanel","ZoneMapControl_ZoneMapControl","ZoneMenuRoutes_ZoneMenuRoutes","ZoneMenuRoutes","react_router","NotFoundPage"],"mappings":"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","file":"static/js/181.df3b455e.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nimport { ScrollArea } from '../atoms/ScrollArea'\nimport { Spacing } from '../styling'\n\ninterface IPageLayoutFullHeightItemProps {\n  row?: number\n  column?: number\n  widthInColumns?: number\n  withScrollArea?: boolean\n  scrollAreaId?: string\n}\n\nconst gridColumnWidth: string = '6.22vw'\nconst gridColumnHeigth: string = '3.9375rem'\n\nconst leftPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.column !== undefined) {\n    return (\n      'calc((' +\n      props.column +\n      ' * ' +\n      gridColumnWidth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return Spacing.LayoutGridCellMargin\n  }\n}\nconst widthComputed = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.widthInColumns !== undefined) {\n    return (\n      'calc((' +\n      props.widthInColumns +\n      ' * ' +\n      gridColumnWidth +\n      ') - ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return 'calc(100vh - (2 * ' + Spacing.LayoutGridCellMargin + '))'\n  }\n}\nconst topPos = () => (props: IPageLayoutFullHeightItemProps) => {\n  if (props.row !== undefined) {\n    return (\n      'calc((' +\n      props.row +\n      ' * ' +\n      gridColumnHeigth +\n      ') + ' +\n      Spacing.LayoutGridCellMargin +\n      ')'\n    )\n  } else {\n    return (\n      'calc(' + gridColumnHeigth + ' + ' + Spacing.LayoutGridCellMargin + ')'\n    )\n  }\n}\n\nconst FullHeightDiv = styled.div`\n  position: fixed;\n  bottom: 0.5rem;\n  width: ${widthComputed()};\n  left: ${leftPos()};\n  top: ${topPos()};\n`\n\nconst FullHeightDivStyled = styled.div`\n  height: 100%;\n`\n\nexport const PageLayoutFullHeightItem: React.FC<\n  IPageLayoutFullHeightItemProps\n> = ({\n  children,\n  row = 1,\n  column = 0,\n  widthInColumns = 16,\n  withScrollArea = false,\n  scrollAreaId,\n}) => (\n  <FullHeightDiv\n    column={column}\n    row={row}\n    widthInColumns={widthInColumns}\n    withScrollArea={withScrollArea}\n  >\n    {withScrollArea ? (\n      <ScrollArea id={scrollAreaId}>{children}</ScrollArea>\n    ) : (\n      <FullHeightDivStyled>{children}</FullHeightDivStyled>\n    )}\n  </FullHeightDiv>\n)\n","import styled from 'styled-components'\n\nexport const FlexRowSingle = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: ${({ justify = 'space-between' }: { justify?: string }) =>\n    justify};\n`\n","import styled from 'styled-components'\n\ninterface IVerticalGapProps {\n  size?: number\n  sizeUnit?: string\n}\n\nexport const VerticalGap = styled.div`\n  height: ${({ size = 1, sizeUnit = 'rem' }: IVerticalGapProps) =>\n    `${size}${sizeUnit}`};\n`\n\nVerticalGap.displayName = 'VerticalGap'\n","import styled from 'styled-components'\n\nexport const ScrollArea = styled.div`\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  height: 100%;\n`\n","import { GoogleMap, LoadScript } from '@react-google-maps/api'\nimport MapContext from '@react-google-maps/api/lib/map-context'\nimport { Observer } from 'mobx-react'\nimport React, { useContext } from 'react'\n\nimport { TMapModel } from '../models/MapModel'\nimport { Radiuses } from '../styling'\n\ninterface IBaseMapProps {\n  model: TMapModel\n}\n\nconst mapModelContext = React.createContext<TMapModel | null>(null)\n\nconst libraries = ['places']\n\nexport const BaseMap: React.FC<IBaseMapProps> = ({ model, children }) => {\n  const [isLoaded, setLoaded] = React.useState(false)\n  const options: google.maps.MapOptions = {\n    streetViewControl: false,\n    mapTypeControl: false,\n    fullscreenControl: false,\n  }\n  const renderMap = () => (\n    <Observer>\n      {() => (\n        <GoogleMap\n          zoom={model.zoom}\n          center={model.center}\n          onCenterChanged={model.updatePosition}\n          onZoomChanged={model.updateZoom}\n          onLoad={model.setMapRef}\n          options={options}\n          mapContainerStyle={{\n            borderRadius: Radiuses.Card,\n            overflow: 'hidden',\n            height: '100%',\n          }}\n        >\n          {children}\n        </GoogleMap>\n      )}\n    </Observer>\n  )\n\n  return (\n    <LoadScript\n      id=\"script-loader\"\n      googleMapsApiKey=\"AIzaSyAMytFvlKm4fxw8LCcMHofNDHcrJ8ibOTY\"\n      language=\"cz\"\n      region=\"CS\"\n      libraries={libraries}\n      version=\"weekly\"\n      onLoad={() => setLoaded(true)}\n    >\n      {isLoaded ? renderMap() : null}\n    </LoadScript>\n  )\n}\n\nexport function useMapModel() {\n  const model = useContext(mapModelContext)\n  if (!model) {\n    throw new Error('Trying to useMapModel, but BaseMap is missing in the tree')\n  }\n  return model\n}\n\nexport function useGoogleMap() {\n  const map = useContext(MapContext)\n  if (!map) {\n    throw new Error(\n      'Trying to useGoogleMap, but BaseMap is missing in the tree',\n    )\n  }\n  return map\n}\n","import styled from 'styled-components'\n\nimport { Colors } from '../styling'\n\nexport const CardListTitle = styled.h2`\n  color: ${Colors.greyLight};\n  font-weight: lighter;\n  font-size: 1.2rem;\n  margin: 0.8rem 0 0.8rem 0.3rem;\n`\n","import React from 'react'\nimport { SortableHandle } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Icon } from './Icon'\n\ninterface IDragHandleProps {}\n\nconst DragHandleContainerStyled = styled.div`\n  padding: 1rem 0.4rem;\n  cursor: grab;\n`\nexport const DragHandle = SortableHandle<IDragHandleProps>(() => (\n  <DragHandleContainerStyled>\n    <Icon iconName=\"reorder\" />\n  </DragHandleContainerStyled>\n))\n","import React, { useEffect } from 'react'\n\ninterface IProps {\n  isShow: boolean\n  confirmText: string\n  onConfirm(): void\n  onCancel(): void\n}\n\nexport const ConfirmDialog: React.FC<IProps> = props => {\n  useEffect(\n    () => {\n      if (props.isShow) {\n        if (window.confirm(props.confirmText)) {\n          props.onConfirm()\n        } else {\n          props.onCancel()\n        }\n      }\n    },\n    [props.isShow],\n  )\n  return null\n}\n","import React from 'react'\nimport { Field, FieldType, IFieldApi } from 'react-form'\n\nimport { RM } from '../helpers/ramda'\nimport { i18n } from '../i18n'\nimport { ISelectControlProps, SelectControl } from './SelectControl'\n\nexport interface IFormInputSelectProps<OptionType>\n  extends ISelectControlProps<OptionType> {\n  field: FieldType\n  fieldIsPure?: boolean\n  defaultValue?: OptionType\n  isRequired?: boolean\n  validatioName?: string\n}\n\nexport class FormInputSelect<OptionType> extends React.Component<\n  IFormInputSelectProps<OptionType>\n> {\n  static defaultProps = {\n    validatioName: 'Value',\n    getItemId: RM.prop('id'),\n  }\n\n  validate = (value: OptionType | undefined) => {\n    if (this.props.isRequired && !value) {\n      return i18n.t`${this.props.validatioName} must be selected`\n    }\n    return null\n  }\n\n  getControlProps(fieldApi: IFieldApi) {\n    const { isMulti, options, getOptionValue, defaultValue } = this.props\n    const selection = fieldApi.value || defaultValue\n\n    if (isMulti) {\n      const isSelected = Array.isArray(selection)\n        ? (item: OptionType) => selection.includes(getOptionValue!(item))\n        : RM.F\n      return {\n        value: Array.isArray(options)\n          ? (options as OptionType[]).filter(isSelected)\n          : [],\n        onChange: selectedOptions => {\n          fieldApi.setValue(selectedOptions.map(getOptionValue))\n        },\n      }\n    }\n\n    return {\n      value:\n        selection &&\n        (options as OptionType[]).find(\n          item => getOptionValue!(item) === selection,\n        ),\n      onChange: option => {\n        fieldApi.setValue(getOptionValue!(option))\n      },\n    }\n  }\n\n  render() {\n    const {\n      field,\n      fieldIsPure = false,\n      isRequired = false,\n      defaultValue,\n      ...props\n    } = this.props\n    return (\n      <Field field={field} validate={this.validate} pure={fieldIsPure}>\n        {fieldApi => (\n          <SelectControl\n            {...this.getControlProps(fieldApi)}\n            onFocus={() => fieldApi.setTouched(true)}\n            styles={{\n              control: base => {\n                if (Boolean(fieldApi.error)) {\n                  return {\n                    ...base,\n                    borderColor: 'red',\n                  }\n                }\n                return base\n              },\n            }}\n            {...props}\n          />\n        )}\n      </Field>\n    )\n  }\n}\n","import { useRouterContext } from '@speedlo/hooks'\n\ninterface IZoneRouteParams {\n  zoneId?: ID\n}\n\nexport function useZoneId() {\n  const { match } = useRouterContext<IZoneRouteParams>()\n  const { zoneId } = match.params\n  return zoneId\n}\n","import { useRouterContext } from '@speedlo/hooks'\n\nimport { useRoot } from '../../../atoms/RootProvider'\n\nexport function useZoneRouteControl() {\n  const { user, zone: zoneModel } = useRoot()\n  const { history } = useRouterContext()\n  const baseRoute = '/settings/zones'\n  const getRouteToZone = (zoneId: ID) => {\n    return `${baseRoute}/${zoneId}`\n  }\n  return {\n    getRouteToZone,\n    routeToZoneEdit(editZoneId: ID) {\n      zoneModel.map.panToZone(editZoneId)\n      if (user.canQuery('zone')) {\n        history.push(getRouteToZone(editZoneId))\n      }\n    },\n    routeToZoneList() {\n      history.push(baseRoute)\n    },\n  }\n}\n","import React from 'react'\nimport { FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { i18n } from '../../../i18n'\nimport { Colors } from '../../../styling'\n\ninterface IZoneInputProps {\n  field: FieldType\n  label?: string\n  autoFocus?: boolean\n  isDeliveryPrice?: boolean\n}\n\nconst LabelStyled = styled.div`\n  min-width: 2rem;\n  display: inline-block;\n`\n\nconst FormInputTextBoxStyled = styled(FormInputTextBox)`\n  width: 3rem;\n  position: relative;\n  z-index: 4;\n`\nconst FormInputTextBoxDeliveryStyled = styled(FormInputTextBoxStyled)`\n  color: ${Colors.blue};\n`\n\nconst DeliveryContainer = styled.div`\n  position: relative;\n  left: 8rem;\n  top: 0rem;\n`\n\nconst PriceRangeContainer = styled.div`\n  position: relative;\n  left: 4rem;\n  top: -0.3rem;\n  width: 3rem;\n`\n\nconst VerticalLine = styled.div`\n  border-left: 3px solid #707070;\n  width: 3px;\n  position: relative;\n  left: -2rem;\n  height: 4rem;\n  float: left;\n  margin: -0.5rem 0 0 0;\n`\n\nconst validatePrice = (value: string) => {\n  if (typeof value === 'number') {\n    return null\n  }\n  const trim = value.trim()\n  return trim.length && Number.isNaN(Number.parseFloat(trim))\n    ? i18n.t`Must be number`\n    : null\n}\n\nexport const ZonePriceInput = React.forwardRef<\n  HTMLInputElement,\n  IZoneInputProps\n>(\n  ({ field, label, isDeliveryPrice, autoFocus = false }, ref) =>\n    isDeliveryPrice ? (\n      <DeliveryContainer>\n        <VerticalLine />\n        <LabelStyled>{label}</LabelStyled>\n        <FormInputTextBoxDeliveryStyled\n          field={field}\n          validate={validatePrice}\n          // @ts-ignore\n          ref={ref}\n        />\n      </DeliveryContainer>\n    ) : (\n      <PriceRangeContainer>\n        <FormInputTextBoxStyled\n          field={field}\n          validate={validatePrice}\n          autoFocus={autoFocus}\n        />\n      </PriceRangeContainer>\n    ),\n)\n","import React from 'react'\nimport { FieldType } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputSelect } from '../../../atoms/FormInputSelect'\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { GZoneColors } from '../../../graph/types'\nimport { RM } from '../../../helpers/ramda'\nimport { Colors } from '../../../styling'\nimport { ZoneColorsQuery } from '../Zones.graphql'\n\ninterface IZoneColorSelectorProps {\n  field?: FieldType\n}\n\nconst ColorOption = styled.div`\n  background-color: ${({ color }: { color: string }) => color};\n  color: ${Colors.white};\n  width: 6rem;\n  padding: 0.4rem 1rem;\n  margin: 0;\n  height: 100%;\n`\n\nconst QueryZoneColors = buildQuery<GZoneColors.Query, GZoneColors.Variables>(\n  ZoneColorsQuery,\n)\n\nconst makeStyles = () => ({\n  option: base => ({\n    ...base,\n    padding: 0,\n    margin: 0,\n  }),\n  menu: base => ({\n    ...base,\n    width: '8rem',\n    maxWidth: '8rem',\n  }),\n})\n\nexport const ZoneColorSelector: React.FC<IZoneColorSelectorProps> = ({\n  field = 'zoneColor.id',\n}) => (\n  <QueryZoneColors\n    render={({ zoneColors }) => (\n      <FormInputSelect<GZoneColors.ZoneColors>\n        field={field}\n        fieldIsPure={true}\n        options={[...zoneColors]}\n        width={8}\n        styles={makeStyles()}\n        defaultValue={RM.head(zoneColors)}\n        getOptionValue={RM.prop('id')}\n        formatOptionLabel={zoneColor => (\n          <ColorOption color={zoneColor.color}>{zoneColor.code}</ColorOption>\n        )}\n      />\n    )}\n  />\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { FormInputStyled } from '../../../atoms/FormInputStyled'\n\ninterface IZonePlaceholderInputProps {\n  label: string\n  display: string\n}\n\nconst LabelStyled = styled.div`\n  width: 3rem;\n  display: inline-block;\n`\n\nconst FormInputForPlaceholderStyled = styled(FormInputStyled)`\n  width: 3rem;\n  position: relative;\n  z-index: 4;\n`\n\nconst Container = styled.div`\n  margin: 0 0 0 1rem;\n`\n\nexport const ZonePlaceholderInput: React.FC<IZonePlaceholderInputProps> = ({\n  label,\n  display,\n}) => (\n  <Container>\n    <LabelStyled>{label}</LabelStyled>\n    <FormInputForPlaceholderStyled disabled={true} placeholder={display} />\n  </Container>\n)\n","import React, { Fragment } from 'react'\nimport { FormApi, NestedFieldComponentProps } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FZonePriceRangeFragment } from '../../../graph/generated'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Spacing } from '../../../styling'\nimport { ZonePlaceholderInput } from '../atoms/ZonePlaceholderInput'\nimport { ZonePriceInput } from '../atoms/ZonePriceInput'\n\ninterface IProps extends NestedFieldComponentProps<FZonePriceRangeFragment[]> {}\n\nconst AddButtonContainer = styled.div`\n  position: relative;\n  top: -6rem;\n`\n\nconst RemoveButtonContainer = styled.div`\n  position: relative;\n  top: -7rem;\n  left: 16rem;\n  height: 0;\n`\n\nexport const ZoneFormPriceRange: React.FC<IProps> = ({ fieldApi }) => {\n  return (\n    <>\n      {fieldApi.values.map((value, idx, values) => (\n        <Fragment key={idx}>\n          <ZonePriceInput\n            label=\"za\"\n            isDeliveryPrice={true}\n            field={[idx, 'price', 'value']}\n          />\n\n          {idx === values.length - 1 ? (\n            <ZonePlaceholderInput display=\"&infin;\" label=\"do\" />\n          ) : (\n            <ZonePriceInput\n              field={[idx, 'toPrice', 'value']}\n              autoFocus={true}\n            />\n          )}\n\n          {values.length > 1 && (\n            <RemoveButtonContainer>\n              <TouchButtonDelete\n                onDelete={() => fieldApi.removeValue('', idx)}\n              />\n            </RemoveButtonContainer>\n          )}\n        </Fragment>\n      ))}\n      <FormApi\n        render={formApi => (\n          <AddButtonContainer>\n            <TouchButton\n              disabled={formApi.submitting}\n              width={Spacing.ButtonHeight + Spacing.DefaultSizeUnit}\n              iconName=\"add_circle\"\n              onClick={() =>\n                fieldApi.addValue('', {\n                  price: { value: 0 },\n                  toPrice: { value: 0 },\n                })\n              }\n            />\n          </AddButtonContainer>\n        )}\n      />\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { NestedField } from 'react-form'\nimport styled from 'styled-components'\n\nimport { FormInputCheckbox } from '../../../atoms/FormInputCheckbox'\nimport { FormInputTextBox } from '../../../atoms/FormInputTextBox'\nimport { Headline } from '../../../atoms/Headline'\nimport { IconLine } from '../../../atoms/IconLine'\nimport { validateIsRequired } from '../../../helpers/form'\nimport { i18n } from '../../../i18n'\nimport { Colors, Spacing } from '../../../styling'\nimport { ZonePriceInput } from '../atoms/ZonePriceInput'\nimport { ZoneColorSelector } from '../molecules/ZoneColorSelector'\nimport { ZoneFormPriceRange } from '../molecules/ZoneFormPriceRange'\n\ninterface IZoneFormContentProps {}\n\nconst ZoneFormContentStyled = styled.div`\n  margin: ${Spacing.Middle};\n  color: ${Colors.black};\n`\n\nconst DescriptionUnderHeadline = styled.div`\n  color: ${Colors.greyDark};\n  padding-bottom: 0.2rem;\n`\n\nexport const ZoneFormContent: React.FC<IZoneFormContentProps> = props => (\n  <ZoneFormContentStyled>\n    <IconLine icon=\"label\">\n      <FormInputTextBox\n        field=\"name\"\n        validate={validateIsRequired(i18n.t`Zone name`)}\n      />\n    </IconLine>\n\n    <IconLine icon=\"color_lens\">\n      <ZoneColorSelector />\n    </IconLine>\n\n    <FormInputCheckbox\n      field=\"enabled\"\n      name=\"enabled\"\n      label={i18n.t`Is active`.toLocaleLowerCase()}\n    />\n\n    <Trans>\n      <Headline margin=\"0.5rem 0 0 0\">Delivery cost</Headline>\n      <DescriptionUnderHeadline>\n        according order total cost\n      </DescriptionUnderHeadline>\n    </Trans>\n    <ZonePriceInput field=\"minimalOrderPrice.value\" />\n    <NestedField field=\"priceRangeRules\" component={ZoneFormPriceRange} />\n  </ZoneFormContentStyled>\n)\n","import React, { MouseEvent } from 'react'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors } from '../../../styling'\n\ninterface IProps {\n  isSubmitting: boolean\n  isModified: boolean\n  onSave(e: MouseEvent<HTMLButtonElement>): void\n  onGoBack(): void\n}\n\nexport const ZoneFormControls: React.FC<IProps> = ({\n  isSubmitting,\n  isModified,\n  onGoBack,\n  onSave,\n}) => (\n  <FlexRowSingle>\n    <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n      <TouchButton\n        color={Colors.greyMiddle}\n        onClick={onGoBack}\n        text={i18n.t`Back`}\n        disabled={isSubmitting}\n      />\n    </FlexColumn>\n    <FlexColumn widthGrowIndex={0.4} padding=\"0\">\n      <CanMutate mutationName=\"updateZone\">\n        <TouchButton\n          color={Colors.green}\n          text={i18n.t`Save zone`}\n          onClick={onSave}\n          disabled={isSubmitting || !isModified}\n        />\n      </CanMutate>\n    </FlexColumn>\n  </FlexRowSingle>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../../graph/buildQuery'\nimport { FZoneFragmentDoc } from '../../../graph/generated'\nimport { GZones } from '../../../graph/types'\n\nexport const ZonesQuery = gql`\n  query GZones($branchesId: [ID!]!) {\n    zones(companyBranches: $branchesId) {\n      ...FZone\n    }\n  }\n  ${FZoneFragmentDoc}\n`\n\nexport const QueryZones = buildQuery<GZones.Query, GZones.Variables>(ZonesQuery)\n","import { observer } from 'mobx-react-lite'\nimport React, { useContext } from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { FZoneFragment } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { QueryZones } from './ZoneListLoader.graphql'\n\ninterface IProps {}\n\nexport type TZone = FZoneFragment\n\nconst ZoneListContext = React.createContext<Maybe<ReadonlyArray<TZone>>>(null)\n\nexport const ZoneListLoader: React.FC<IProps> = observer(({ children }) => {\n  const { zone } = useRoot()\n  const branches = zone.branches.filter(zone.branchFilterPredicate)\n  if (branches.length === 0) {\n    return (\n      <ZoneListContext.Provider value={[]}>{children}</ZoneListContext.Provider>\n    )\n  }\n  return (\n    <QueryZones\n      fetchPolicy=\"cache-and-network\"\n      variables={{ branchesId: branches.map(RM.prop('id')) }}\n      renderLoading={false}\n      render={({ zones }, { loading }) => (\n        <ZoneListContext.Provider value={loading ? null : zones}>\n          {children}\n        </ZoneListContext.Provider>\n      )}\n    />\n  )\n})\n\nexport const useZoneList = () => {\n  return useContext(ZoneListContext)\n}\n","import { reaction } from 'mobx'\nimport { useDisposable } from 'mobx-react-lite'\nimport React, { useCallback, useRef, useState } from 'react'\nimport { Form, IFormApi } from 'react-form'\nimport Goodbye from 'react-goodbye'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { ConfirmDialog } from '../../../atoms/ConfirmDialog'\nimport { Loading } from '../../../atoms/Loading'\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { useMZoneUpdate } from '../../../graph/generated'\nimport { logDebug } from '../../../helpers/logger'\nimport { RM } from '../../../helpers/ramda'\nimport { useSnackBar } from '../../../hooks/useSnackBar'\nimport { i18n } from '../../../i18n'\nimport { TouchButtonDelete } from '../../../molecules/TouchButtonDelete'\nimport { Spacing } from '../../../styling'\nimport { useZoneId } from '../hooks/useZoneId'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { ZoneFormContent } from '../molecules/ZoneFormContent'\nimport { ZoneFormControls } from '../molecules/ZoneFormControls'\nimport { useZoneList } from './ZoneListLoader'\n\nconst DeleteButtonContainer = styled.div`\n  width: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n  margin-top: ${Spacing.Middle};\n`\n\nexport const ZoneFormPanel: React.FC = () => {\n  const zoneId = useZoneId()\n  const zoneList = useZoneList()\n  const { zone: zoneModel } = useRoot()\n  const { routeToZoneList } = useZoneRouteControl()\n  const [isModified, setModified] = useState(false)\n  const formApiRef = useRef<IFormApi | null>(null)\n  const { enqueueError, enqueueSuccess } = useSnackBar()\n\n  const [zoneUpdate] = useMZoneUpdate()\n\n  const onSubmit = useCallback(\n    async values => {\n      if (zoneId) {\n        const data = await zoneUpdate(\n          zoneModel.getZoneVariables(zoneId, values),\n        )\n        if (data) {\n          setModified(false)\n          routeToZoneList()\n          enqueueSuccess(i18n.t`Zone has been updated`)\n        }\n      }\n    },\n    [zoneId],\n  )\n\n  const onDelete = useCallback(\n    async () => {\n      if (zoneId) {\n        await zoneModel.destroyZone(zoneId)\n      }\n      routeToZoneList()\n    },\n    [zoneId],\n  )\n\n  useDisposable(() =>\n    reaction(() => zoneModel.map.currentZonePoints !== null, setModified),\n  )\n\n  React.useEffect(\n    () => {\n      if (zoneList && zoneList.length === 0) {\n        enqueueError(i18n.t`Requested zone wasn't found`)\n        routeToZoneList()\n      }\n    },\n    [zoneList],\n  )\n\n  const zone =\n    zoneId && zoneList ? zoneList.find(RM.propEq('id', zoneId)) || null : null\n\n  React.useEffect(\n    () => {\n      zoneModel.map.clearZonePoints()\n    },\n    [zone],\n  )\n\n  if (!zone) {\n    return <Loading text={i18n.t`Loading form...`} />\n  }\n\n  return (\n    <Form\n      defaultValues={zone}\n      onChange={formState => {\n        logDebug('zone form change', formState.values)\n        setModified(true)\n      }}\n      onSubmit={onSubmit}\n      render={formApi => {\n        formApiRef.current = formApi\n        return (\n          <Card padding={0}>\n            <ZoneFormControls\n              isSubmitting={formApi.submitting}\n              isModified={isModified}\n              onSave={formApi.submitForm}\n              onGoBack={routeToZoneList}\n            />\n            <ZoneFormContent />\n\n            <CanMutate mutationName=\"destroyZone\">\n              <DeleteButtonContainer>\n                <TouchButtonDelete\n                  disabled={formApi.submitting}\n                  confirmText={i18n.t`Remove zone ${zone.name}?`}\n                  onDelete={onDelete}\n                />\n              </DeleteButtonContainer>\n            </CanMutate>\n\n            <Goodbye when={isModified}>\n              {({ isShow, handleOk, handleCancel }) => (\n                <ConfirmDialog\n                  isShow={isShow}\n                  confirmText={i18n.t`Do you want to cancel changes for the zone?`}\n                  onConfirm={handleOk}\n                  onCancel={handleCancel}\n                />\n              )}\n            </Goodbye>\n          </Card>\n        )\n      }}\n    />\n  )\n}\n","import { OverlayView } from '@react-google-maps/api'\nimport React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { FCompanyBranchFragment } from '../graph/generated'\nimport { gpsToLatLng } from '../helpers/gps'\nimport { Colors } from '../styling'\n\ninterface IProps {\n  branch: FCompanyBranchFragment\n  isActive?: boolean\n}\n\nconst BranchNameStyled = styled.div`\n  ${getColors} font-size: 1.3rem;\n  white-space: nowrap;\n  padding: 0.2rem 0.5rem;\n`\n\nexport const MapCompanyBranchMarker: React.FC<IProps> = ({\n  branch,\n  isActive = true,\n}) => (\n  <OverlayView\n    getPixelPositionOffset={(width, height) => ({\n      x: -(width / 2),\n      y: -(height / 2),\n    })}\n    mapPaneName={OverlayView.MARKER_LAYER}\n    position={gpsToLatLng(branch.gps)}\n  >\n    <BranchNameStyled isActive={isActive}>{branch.name}</BranchNameStyled>\n  </OverlayView>\n)\n\nfunction getColors({ isActive }: { isActive: boolean }) {\n  return css`\n    background-color: ${isActive ? Colors.green : Colors.greyLight};\n    color: ${isActive ? Colors.white : Colors.greyDark};\n  `\n}\n","import { Polygon } from '@react-google-maps/api'\nimport React from 'react'\n\nimport { gpsToLatLng } from '../../../helpers/gps'\n\ninterface IZoneMapAreaProps {\n  points: ReadonlyArray<GeoPoint>\n  color: string\n  priority: number\n  onFocus?(): void\n}\n\nexport const ZoneMapArea: React.FC<IZoneMapAreaProps> = props => {\n  const onAreaFocus = React.useCallback(\n    (e: google.maps.PolyMouseEvent) => {\n      if (props.onFocus) {\n        e.stop()\n        props.onFocus()\n      }\n    },\n    [props.onFocus],\n  )\n\n  const { points, color, priority } = props\n  return (\n    <Polygon\n      path={points.map(gpsToLatLng)}\n      options={{\n        fillColor: color,\n        fillOpacity: 0.3,\n        strokeWeight: 0,\n        zIndex: 5000 - priority,\n      }}\n      editable={false}\n      draggable={false}\n      onDblClick={onAreaFocus}\n    />\n  )\n}\n","import { Polygon } from '@react-google-maps/api'\nimport React from 'react'\n\nimport { gpsToLatLng, latLngToGps } from '../../../helpers/gps'\n\ninterface IZoneMapAreaProps {\n  points: ReadonlyArray<GeoPoint>\n  color: string\n  priority: number\n  onChange(points: GeoPoint[]): void\n  onClear(): void\n}\n\nexport const ZoneMapEditableArea: React.FC<IZoneMapAreaProps> = props => {\n  const polygonRef = React.useRef<google.maps.Polygon | null>(null)\n  const listenersRef = React.useRef<google.maps.MapsEventListener[]>([])\n\n  const onAreaChange = React.useCallback(() => {\n    if (polygonRef.current) {\n      const path = polygonRef.current.getPath()\n      props.onChange(path.getArray().map(latLngToGps))\n    }\n  }, [props.onChange])\n\n  const onLoad = React.useCallback((polygon: google.maps.Polygon) => {\n    polygonRef.current = polygon\n    const path = polygon.getPath()\n    listenersRef.current.push(\n      path.addListener('set_at', onAreaChange),\n      path.addListener('insert_at', onAreaChange),\n      path.addListener('remove_at', onAreaChange),\n    )\n  }, [])\n\n  const onUnmount = React.useCallback(() => {\n    props.onClear()\n    listenersRef.current.forEach(lis => lis.remove())\n    polygonRef.current = null\n  }, [])\n\n  const { points, color } = props\n  return (\n    <Polygon\n      path={points.map(gpsToLatLng)}\n      options={{\n        fillColor: color,\n        fillOpacity: 0.6,\n        strokeWeight: 2,\n        zIndex: 10000,\n      }}\n      editable={true}\n      draggable={true}\n      onDragEnd={onAreaChange}\n      onLoad={onLoad}\n      onUnmount={onUnmount}\n    />\n  )\n}\n","import { useRoot } from '../../../atoms/RootProvider'\n\nexport function useZoneModel() {\n  const { zone: zoneModel } = useRoot()\n  return zoneModel\n}\n","import React, { useCallback } from 'react'\n\nimport { BaseMap } from '../../../atoms/BaseMap'\nimport { FCompanyBranchFragment } from '../../../graph/generated'\nimport { MapCompanyBranchMarker } from '../../../molecules/MapCompanyBranchMarker'\nimport { Colors } from '../../../styling'\nimport { ZoneMapArea } from '../atoms/ZoneMapArea'\nimport { ZoneMapEditableArea } from '../atoms/ZoneMapEditableArea'\nimport { useZoneId } from '../hooks/useZoneId'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { TZone, useZoneList } from '../organisms/ZoneListLoader'\n\nexport const ZoneMapControl: React.FC = () => {\n  const zoneModel = useZoneModel()\n  const editZoneId = useZoneId()\n  const zoneList = useZoneList()\n  const { routeToZoneEdit } = useZoneRouteControl()\n\n  const branches = zoneModel.branches.filter(zoneModel.branchFilterPredicate)\n\n  const isActive = (companyBranchId: ID) =>\n    !zoneModel.hasBranchFilter || companyBranchId === zoneModel.branchFilterId\n\n  const renderZoneArea = (zone: TZone) => {\n    const areaProps = {\n      key: `zone${zone.id}`,\n      points: zone.geoPolygon,\n      priority: zone.priority,\n      color:\n        isActive(zone.companyBranch.id) && zone.enabled\n          ? zone.zoneColor.color\n          : Colors.greyMiddle,\n    }\n\n    if (zone.id === editZoneId) {\n      return (\n        <ZoneMapEditableArea\n          {...areaProps}\n          onChange={zoneModel.map.updateZonePoints}\n          onClear={zoneModel.map.clearZonePoints}\n        />\n      )\n    }\n\n    return (\n      <ZoneMapArea\n        {...areaProps}\n        onFocus={() => {\n          if (isActive(zone.companyBranch.id)) {\n            routeToZoneEdit(zone.id)\n          }\n        }}\n      />\n    )\n  }\n\n  const renderBranchLabel = useCallback(\n    (branch: FCompanyBranchFragment) => (\n      <MapCompanyBranchMarker\n        key={`branch${branch.id}`}\n        branch={branch}\n        isActive={isActive(branch.id)}\n      />\n    ),\n    [],\n  )\n\n  return (\n    <BaseMap model={zoneModel.map}>\n      {zoneList && zoneList.map(renderZoneArea)}\n      {branches && branches.map(renderBranchLabel)}\n    </BaseMap>\n  )\n}\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { i18n } from '../../../i18n'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\n\nexport const CreateZoneButton: React.FC = observer(() => {\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n  return (\n    <TouchButton\n      text={\n        zoneModel.hasBranchFilter\n          ? i18n.t`Create zone for branch`\n          : i18n.t`Select branch to create zone`\n      }\n      onClick={() => zoneModel.createZone(routeToZoneEdit)}\n      disabled={!zoneModel.hasBranchFilter}\n      color={Colors.turquoise}\n      textNextToIcon={true}\n      height={Spacing.ButtonHeight + Spacing.DefaultSizeUnit}\n      iconName=\"add_circle\"\n    />\n  )\n})\n","import React from 'react'\nimport { SortableElement } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { Card } from '../../../atoms/Card'\nimport { DragHandle } from '../../../atoms/DragHandle'\nimport { FlexColumn } from '../../../atoms/FlexColumn'\nimport { FlexRowSingle } from '../../../atoms/FlexRowSingle'\nimport { SizerButton } from '../../../atoms/SizerButton'\nimport { FCompanyBranchFragment, FZoneFragment } from '../../../graph/generated'\nimport { TouchButton } from '../../../molecules/TouchButton'\nimport { Colors, Spacing } from '../../../styling'\n\ninterface IZoneListCardProps {\n  zone: FZoneFragment\n  branch: FCompanyBranchFragment\n  onEdit(): void\n}\n\nconst ZoneNameStyled = styled.div`\n  font-size: 1.125rem;\n  margin-top: 0.2rem;\n`\n\nconst ZoneDescriptionStyled = styled.div`\n  font-size: 0.875rem;\n`\nconst ZoneFlexRowStyled = styled(FlexRowSingle)`\n  height: ${Spacing.ButtonHeight + Spacing.DefaultSizeUnit};\n`\n\nexport const ZoneListCard = SortableElement<IZoneListCardProps>(\n  ({ zone, branch, onEdit }) => (\n    <Card\n      key={zone.id}\n      padding={0}\n      color={zone.enabled ? zone.zoneColor.color : Colors.greyMiddle}\n      onClick={onEdit}\n    >\n      <ZoneFlexRowStyled>\n        <FlexColumn fixedWidth={true} padding=\"0 0.5rem 0 0\">\n          <SizerButton>\n            <TouchButton iconName=\"mode_edit\" />\n          </SizerButton>\n        </FlexColumn>\n        <FlexColumn widthGrowIndex={1}>\n          <ZoneNameStyled>\n            {zone.name}\n            {` [P${zone.priority}]`}\n          </ZoneNameStyled>\n          <ZoneDescriptionStyled>{branch.name}</ZoneDescriptionStyled>\n        </FlexColumn>\n        <FlexColumn padding=\"0\">\n          <DragHandle />\n        </FlexColumn>\n      </ZoneFlexRowStyled>\n    </Card>\n  ),\n)\n","import * as R from 'ramda'\nimport React, { Fragment } from 'react'\nimport { SortableContainer, SortEndHandler } from 'react-sortable-hoc'\nimport styled from 'styled-components'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { FCompanyBranchFragment, FZoneFragment } from '../../../graph/generated'\nimport { TZoneModel } from '../../../segments/zones/models/ZoneModel'\nimport { ZoneListCard } from '../atoms/ZoneListCard'\n\ntype TBranch = FCompanyBranchFragment\ntype TZone = FZoneFragment\n\ninterface IZoneListProps {\n  branches: TBranch[]\n  zones: TZone[]\n  zoneModel: TZoneModel\n  onZoneEdit(zoneID: ID): void\n}\n\nconst ZoneListContainerStyled = SortableContainer(styled.div`\n  margin-top: 0.5rem;\n  cursor: arrow;\n`)\n\nconst sortZones = R.sortWith<TZone>([\n  R.ascend(R.path(['companyBranch', 'name'])),\n  R.descend(R.prop('priority')),\n])\n\nconst groupByBranch = R.groupBy((zone: TZone) => zone.companyBranch.id)\n\nexport const ZoneList: React.FC<IZoneListProps> = ({\n  branches,\n  zones,\n  zoneModel,\n  onZoneEdit,\n}) => {\n  const renderZone = (zone: TZone, idx: number) => (\n    <ZoneListCard\n      key={zone.id}\n      zone={zone}\n      branch={branches.find(R.propEq('id', zone.companyBranch.id))!}\n      index={idx}\n      collection={zone.companyBranch.id}\n      onEdit={() => onZoneEdit(zone.id)}\n    />\n  )\n  const renderBranch = (branch: TBranch, branchZones: TZone[]) => (\n    <Fragment key={branch.id}>\n      <CardListTitle>{branch.name}</CardListTitle>\n      {branchZones.map(renderZone)}\n    </Fragment>\n  )\n\n  let output\n  let onSortEnd: SortEndHandler\n\n  if (branches.length === 1) {\n    const sorted = sortZones(zones)\n    output = sorted.map(renderZone)\n    onSortEnd = ({ oldIndex, newIndex }) => {\n      const zone = sorted[oldIndex]\n      zoneModel.changeZonePriority(zone, oldIndex, newIndex)\n    }\n  } else {\n    const grouped = R.mapObjIndexed(sortZones, groupByBranch(zones))\n    output = branches.map(branch => {\n      const branchZones = grouped[branch.id]\n      return branchZones ? renderBranch(branch, branchZones) : null\n    })\n    onSortEnd = ({ oldIndex, newIndex, collection }) => {\n      const group = grouped[collection]\n      const zone = group[oldIndex]\n      zoneModel.changeZonePriority(zone, oldIndex, newIndex)\n    }\n  }\n\n  return (\n    <ZoneListContainerStyled\n      useDragHandle={true}\n      lockAxis=\"y\"\n      onSortEnd={onSortEnd}\n    >\n      {output}\n    </ZoneListContainerStyled>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { BulletList } from 'react-content-loader'\n\nimport { CardListTitle } from '../../../atoms/CardListTitle'\nimport { useZoneModel } from '../hooks/useZoneModel'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\nimport { ZoneList } from '../molecules/ZoneList'\nimport { useZoneList } from './ZoneListLoader'\n\nexport const ZoneListControl: React.FC = () => {\n  const zoneList = useZoneList()\n  const zoneModel = useZoneModel()\n  const { routeToZoneEdit } = useZoneRouteControl()\n  if (zoneList === null) {\n    return <BulletList primaryOpacity={0.2} secondaryOpacity={0.2} />\n  }\n  if (zoneModel.brand === null) {\n    return (\n      <CardListTitle>\n        <Trans>Select brand to see its zones</Trans>\n      </CardListTitle>\n    )\n  }\n  return (\n    <ZoneList\n      zoneModel={zoneModel}\n      zones={zoneList.filter(zoneModel.zoneFilterPredicate)}\n      branches={zoneModel.root.user.filterBranches(\n        zoneModel.branchFilterPredicate,\n      )}\n      onZoneEdit={routeToZoneEdit}\n    />\n  )\n}\n","import React from 'react'\n\nimport { FCompanyBranchFragment } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\nimport { CompanyBranchDropdown } from '../../../molecules/CompanyBranchDropdown'\n\ntype TBranch = FCompanyBranchFragment\n\ninterface IProps {\n  branches: TBranch[]\n  selectedBranch: Maybe<TBranch>\n  onSelection(branch: Maybe<TBranch>): void\n  autoFocus: boolean\n}\n\nexport const ZoneFilterBranch: React.FC<IProps> = ({\n  branches,\n  selectedBranch,\n  onSelection,\n  autoFocus,\n}) => (\n  <CompanyBranchDropdown\n    placeholder={i18n.t`Select branch`}\n    branches={branches}\n    selectedBranch={selectedBranch}\n    onSingleSelection={onSelection}\n    formatOptionLabel={RM.prop('name')}\n    isClearable={true}\n    autoFocus={autoFocus}\n  />\n)\n","import React from 'react'\n\nimport { SelectControl } from '../../../atoms/SelectControl'\nimport { FCompanyBranchBrand } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { i18n } from '../../../i18n'\n\ntype TBrand = FCompanyBranchBrand\n\ninterface IProps {\n  brands: ReadonlyArray<TBrand>\n  selectedBrand: Maybe<TBrand>\n  onSelection(brand: Maybe<TBrand>): void\n}\n\nexport const ZoneFilterBrand: React.FC<IProps> = ({\n  brands,\n  selectedBrand,\n  onSelection,\n}) => (\n  <SelectControl<TBrand>\n    placeholder={i18n.t`Select brand`}\n    options={brands as TBrand[]}\n    value={selectedBrand}\n    formatOptionLabel={RM.prop('name')}\n    getOptionValue={RM.prop('id')}\n    getOptionLabel={RM.prop('name')}\n    isClearable={true}\n    isSearchable={true}\n    onChange={value => onSelection(value as Maybe<TBrand>)}\n    autoFocus={true}\n  />\n)\n","import { autorun } from 'mobx'\nimport { observer, useDisposable } from 'mobx-react-lite'\nimport React, { useCallback } from 'react'\n\nimport { useRoot } from '../../../atoms/RootProvider'\nimport { VerticalGap } from '../../../atoms/VerticalGap'\nimport { FCompanyBranchBrand } from '../../../graph/generated'\nimport { RM } from '../../../helpers/ramda'\nimport { ZoneFilterBranch } from '../molecules/ZoneFIlterBranch'\nimport { ZoneFilterBrand } from '../molecules/ZoneFilterBrand'\n\nexport const ZoneFilter: React.FC = observer(() => {\n  const { user, zone } = useRoot()\n  const branches = user.branches\n\n  const getBrandBranches = useCallback(\n    (brand: Maybe<FCompanyBranchBrand>) =>\n      brand === null\n        ? []\n        : user.branches.filter(RM.pathEq(['brand', 'id'], brand.id)),\n    [],\n  )\n\n  useDisposable(() =>\n    autorun(() => {\n      if (branches.length === 1) {\n        zone.setBranchFilter(RM.head(branches)!)\n      }\n    }),\n  )\n\n  // no filter is shown for less than 1 branch available\n  if (branches.length <= 1) {\n    return null\n  }\n\n  const singleBrand = user.brands.length === 1 ? RM.head(user.brands)! : null\n  if (singleBrand) {\n    zone.setBrandFilter(singleBrand, getBrandBranches(zone.brand))\n  }\n\n  return (\n    <>\n      {!singleBrand && (\n        <ZoneFilterBrand\n          brands={user.brands}\n          selectedBrand={zone.brand}\n          onSelection={brand => {\n            if (brand === null) {\n              zone.clearBrandFilter()\n            } else {\n              zone.setBrandFilter(brand, getBrandBranches(brand))\n            }\n          }}\n        />\n      )}\n      {!singleBrand && <VerticalGap />}\n      <ZoneFilterBranch\n        branches={getBrandBranches(zone.brand)}\n        selectedBranch={zone.branch}\n        autoFocus={Boolean(singleBrand)}\n        onSelection={branch => {\n          if (!branch) {\n            zone.clearBranchFilter()\n          } else {\n            zone.setBranchFilter(branch)\n          }\n        }}\n      />\n    </>\n  )\n})\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { CanMutate } from '../../../atoms/CanMutate'\nimport { Card } from '../../../atoms/Card'\nimport { ScrollArea } from '../../../atoms/ScrollArea'\nimport { CreateZoneButton } from '../molecules/CreateZoneButton'\nimport { ZoneListControl } from '../organisms/ZoneListControl'\nimport { ZoneFilter } from './ZoneFilter'\n\nconst ZoneMenuContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst FixedHeaderContainer = styled.div`\n  flex: 0 0 auto;\n`\nconst ScrollAreaContainer = styled.div`\n  flex: 1 1 0;\n  min-height: 0;\n`\nexport const ZoneMenuPanel: React.FC = () => (\n  <ZoneMenuContainer>\n    <FixedHeaderContainer>\n      <Card>\n        <ZoneFilter />\n      </Card>\n      <CanMutate mutationName=\"createZone\">\n        <CreateZoneButton />\n      </CanMutate>\n    </FixedHeaderContainer>\n\n    <ScrollAreaContainer>\n      <ScrollArea>\n        <ZoneListControl />\n      </ScrollArea>\n    </ScrollAreaContainer>\n  </ZoneMenuContainer>\n)\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport { i18n } from '../../../i18n'\nimport { PageLayout } from '../../../molecules/PageLayout'\nimport { PageLayoutFullHeightItem } from '../../../molecules/PageLayoutFullHeightItem'\nimport { ZoneFormPanel } from '../organisms/ZoneFormPanel'\nimport { ZoneListLoader } from '../organisms/ZoneListLoader'\nimport { ZoneMapControl } from '../organisms/ZoneMapControl'\nimport { ZoneMenuPanel } from '../organisms/ZoneMenuPanel'\n\ninterface IProps extends RouteComponentProps<{ zoneId?: ID }> {}\n\nexport const ZonePageLayout: React.FC<IProps> = ({ match }) => {\n  const isEditing = Boolean(match.params.zoneId)\n  return (\n    <ZoneListLoader>\n      <PageLayout\n        pageTitle={i18n.t`Delivery zones`}\n        useBackButton={true}\n        backRoute=\"/settings\"\n      />\n      <PageLayoutFullHeightItem\n        widthInColumns={6}\n        column={10}\n        withScrollArea={isEditing}\n      >\n        {isEditing ? <ZoneFormPanel /> : <ZoneMenuPanel />}\n      </PageLayoutFullHeightItem>\n      <PageLayoutFullHeightItem widthInColumns={10}>\n        <ZoneMapControl />\n      </PageLayoutFullHeightItem>\n    </ZoneListLoader>\n  )\n}\n","import React from 'react'\nimport { Route, RouteComponentProps, Switch } from 'react-router-dom'\n\nimport { NotFoundPage } from '../../../pages/NotFoundPage'\nimport { ZonePageLayout } from '../../../segments/zones/pages/ZonePageLayout'\nimport { useZoneRouteControl } from '../hooks/useZoneRouteControl'\n\ninterface IZoneMenuRoutesProps extends RouteComponentProps<{}> {}\n\nexport const ZoneMenuRoutes: React.FC<IZoneMenuRoutesProps> = () => {\n  const { getRouteToZone } = useZoneRouteControl()\n  return (\n    <Switch>\n      <Route path={getRouteToZone(':zoneId?')} component={ZonePageLayout} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  )\n}\n\nexport default ZoneMenuRoutes\n"],"sourceRoot":""}